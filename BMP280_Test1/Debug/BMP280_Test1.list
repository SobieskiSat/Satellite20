
BMP280_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  0800a948  0800a948  0001a948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acb8  0800acb8  0002034c  2**0
                  CONTENTS
  4 .ARM          00000008  0800acb8  0800acb8  0001acb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acc0  0800acc0  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acc0  0800acc0  0001acc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acc4  0800acc4  0001acc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800acc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a70  2000034c  0800b014  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dbc  0800b014  00021dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b17  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f4f  00000000  00000000  00035e93  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e30  00000000  00000000  00038de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ce8  00000000  00000000  00039c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021994  00000000  00000000  0003a900  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fc4f  00000000  00000000  0005c294  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bb83a  00000000  00000000  0006bee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012771d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f8  00000000  00000000  00127798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000034c 	.word	0x2000034c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a930 	.word	0x0800a930

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000350 	.word	0x20000350
 80001cc:	0800a930 	.word	0x0800a930

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_ldivmod>:
 8000ba8:	b97b      	cbnz	r3, 8000bca <__aeabi_ldivmod+0x22>
 8000baa:	b972      	cbnz	r2, 8000bca <__aeabi_ldivmod+0x22>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bfbe      	ittt	lt
 8000bb0:	2000      	movlt	r0, #0
 8000bb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bb6:	e006      	blt.n	8000bc6 <__aeabi_ldivmod+0x1e>
 8000bb8:	bf08      	it	eq
 8000bba:	2800      	cmpeq	r0, #0
 8000bbc:	bf1c      	itt	ne
 8000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc6:	f000 b9bd 	b.w	8000f44 <__aeabi_idiv0>
 8000bca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	db09      	blt.n	8000bea <__aeabi_ldivmod+0x42>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db1a      	blt.n	8000c10 <__aeabi_ldivmod+0x68>
 8000bda:	f000 f84d 	bl	8000c78 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db1b      	blt.n	8000c2c <__aeabi_ldivmod+0x84>
 8000bf4:	f000 f840 	bl	8000c78 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f82f 	bl	8000c78 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	4770      	bx	lr
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	f000 f821 	bl	8000c78 <__udivmoddi4>
 8000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3e:	b004      	add	sp, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2203      	movs	r2, #3
 8000f54:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2203      	movs	r2, #3
 8000f60:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2203      	movs	r2, #3
 8000f66:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2203      	movs	r2, #3
 8000f72:	715a      	strb	r2, [r3, #5]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af04      	add	r7, sp, #16
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f9a:	7afb      	ldrb	r3, [r7, #11]
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	8af9      	ldrh	r1, [r7, #22]
 8000fa0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fa4:	9302      	str	r3, [sp, #8]
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	f001 fde1 	bl	8002b78 <HAL_I2C_Mem_Read>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10b      	bne.n	8000fd4 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000fbc:	7d7b      	ldrb	r3, [r7, #21]
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	7d3b      	ldrb	r3, [r7, #20]
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	801a      	strh	r2, [r3, #0]
		return true;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <read_register16+0x56>
	} else
		return false;
 8000fd4:	2300      	movs	r3, #0

}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000fde:	b590      	push	{r4, r7, lr}
 8000fe0:	b08b      	sub	sp, #44	; 0x2c
 8000fe2:	af04      	add	r7, sp, #16
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	460b      	mov	r3, r1
 8000fec:	72fb      	strb	r3, [r7, #11]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ffe:	7afb      	ldrb	r3, [r7, #11]
 8001000:	b29c      	uxth	r4, r3
 8001002:	7abb      	ldrb	r3, [r7, #10]
 8001004:	b29b      	uxth	r3, r3
 8001006:	8af9      	ldrh	r1, [r7, #22]
 8001008:	f241 3288 	movw	r2, #5000	; 0x1388
 800100c:	9202      	str	r2, [sp, #8]
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2301      	movs	r3, #1
 8001016:	4622      	mov	r2, r4
 8001018:	f001 fdae 	bl	8002b78 <HAL_I2C_Mem_Read>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <read_data+0x48>
		return 0;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <read_data+0x4a>
	else
		return 1;
 8001026:	2301      	movs	r3, #1

}
 8001028:	4618      	mov	r0, r3
 800102a:	371c      	adds	r7, #28
 800102c:	46bd      	mov	sp, r7
 800102e:	bd90      	pop	{r4, r7, pc}

08001030 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	461a      	mov	r2, r3
 800103c:	2188      	movs	r1, #136	; 0x88
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ff9e 	bl	8000f80 <read_register16>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d06f      	beq.n	800112a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3302      	adds	r3, #2
 800104e:	461a      	mov	r2, r3
 8001050:	218a      	movs	r1, #138	; 0x8a
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ff94 	bl	8000f80 <read_register16>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d065      	beq.n	800112a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3304      	adds	r3, #4
 8001062:	461a      	mov	r2, r3
 8001064:	218c      	movs	r1, #140	; 0x8c
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ff8a 	bl	8000f80 <read_register16>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d05b      	beq.n	800112a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3306      	adds	r3, #6
 8001076:	461a      	mov	r2, r3
 8001078:	218e      	movs	r1, #142	; 0x8e
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ff80 	bl	8000f80 <read_register16>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d051      	beq.n	800112a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3308      	adds	r3, #8
 800108a:	461a      	mov	r2, r3
 800108c:	2190      	movs	r1, #144	; 0x90
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ff76 	bl	8000f80 <read_register16>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d047      	beq.n	800112a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	330a      	adds	r3, #10
 800109e:	461a      	mov	r2, r3
 80010a0:	2192      	movs	r1, #146	; 0x92
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ff6c 	bl	8000f80 <read_register16>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d03d      	beq.n	800112a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	330c      	adds	r3, #12
 80010b2:	461a      	mov	r2, r3
 80010b4:	2194      	movs	r1, #148	; 0x94
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ff62 	bl	8000f80 <read_register16>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d033      	beq.n	800112a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	330e      	adds	r3, #14
 80010c6:	461a      	mov	r2, r3
 80010c8:	2196      	movs	r1, #150	; 0x96
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ff58 	bl	8000f80 <read_register16>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d029      	beq.n	800112a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3310      	adds	r3, #16
 80010da:	461a      	mov	r2, r3
 80010dc:	2198      	movs	r1, #152	; 0x98
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff4e 	bl	8000f80 <read_register16>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d01f      	beq.n	800112a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3312      	adds	r3, #18
 80010ee:	461a      	mov	r2, r3
 80010f0:	219a      	movs	r1, #154	; 0x9a
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff44 	bl	8000f80 <read_register16>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d015      	beq.n	800112a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3314      	adds	r3, #20
 8001102:	461a      	mov	r2, r3
 8001104:	219c      	movs	r1, #156	; 0x9c
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff3a 	bl	8000f80 <read_register16>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00b      	beq.n	800112a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001116:	461a      	mov	r2, r3
 8001118:	219e      	movs	r1, #158	; 0x9e
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff30 	bl	8000f80 <read_register16>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <read_calibration_data+0xfa>

		return true;
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <read_calibration_data+0xfc>
	}

	return false;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f103 0218 	add.w	r2, r3, #24
 8001142:	2301      	movs	r3, #1
 8001144:	21a1      	movs	r1, #161	; 0xa1
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ff49 	bl	8000fde <read_data>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d14b      	bne.n	80011ea <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	331a      	adds	r3, #26
 8001156:	461a      	mov	r2, r3
 8001158:	21e1      	movs	r1, #225	; 0xe1
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ff10 	bl	8000f80 <read_register16>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d041      	beq.n	80011ea <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f103 021c 	add.w	r2, r3, #28
 800116c:	2301      	movs	r3, #1
 800116e:	21e3      	movs	r1, #227	; 0xe3
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff34 	bl	8000fde <read_data>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d136      	bne.n	80011ea <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800117c:	f107 030e 	add.w	r3, r7, #14
 8001180:	461a      	mov	r2, r3
 8001182:	21e4      	movs	r1, #228	; 0xe4
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fefb 	bl	8000f80 <read_register16>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d02c      	beq.n	80011ea <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	461a      	mov	r2, r3
 8001196:	21e5      	movs	r1, #229	; 0xe5
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff fef1 	bl	8000f80 <read_register16>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d022      	beq.n	80011ea <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80011aa:	2301      	movs	r3, #1
 80011ac:	21e7      	movs	r1, #231	; 0xe7
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ff15 	bl	8000fde <read_data>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d117      	bne.n	80011ea <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80011ba:	89fb      	ldrh	r3, [r7, #14]
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	b21b      	sxth	r3, r3
 80011c0:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	89fb      	ldrh	r3, [r7, #14]
 80011c8:	121b      	asrs	r3, r3, #8
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80011da:	89bb      	ldrh	r3, [r7, #12]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	b29b      	uxth	r3, r3
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	841a      	strh	r2, [r3, #32]

		return true;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <read_hum_calibration_data+0xb8>
	}

	return false;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af04      	add	r7, sp, #16
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	70fb      	strb	r3, [r7, #3]
 8001200:	4613      	mov	r3, r2
 8001202:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	b29a      	uxth	r2, r3
 8001214:	89f9      	ldrh	r1, [r7, #14]
 8001216:	f242 7310 	movw	r3, #10000	; 0x2710
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	2301      	movs	r3, #1
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	1cbb      	adds	r3, r7, #2
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	f001 fbad 	bl	8002984 <HAL_I2C_Mem_Write>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <write_register8+0x40>
		return false;
 8001230:	2300      	movs	r3, #0
 8001232:	e000      	b.n	8001236 <write_register8+0x42>
	else
		return true;
 8001234:	2301      	movs	r3, #1
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800123e:	b580      	push	{r7, lr}
 8001240:	b084      	sub	sp, #16
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800124c:	2b76      	cmp	r3, #118	; 0x76
 800124e:	d005      	beq.n	800125c <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001254:	2b77      	cmp	r3, #119	; 0x77
 8001256:	d001      	beq.n	800125c <bmp280_init+0x1e>

		return false;
 8001258:	2300      	movs	r3, #0
 800125a:	e099      	b.n	8001390 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001262:	2301      	movs	r3, #1
 8001264:	21d0      	movs	r1, #208	; 0xd0
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff feb9 	bl	8000fde <read_data>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <bmp280_init+0x38>
		return false;
 8001272:	2300      	movs	r3, #0
 8001274:	e08c      	b.n	8001390 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800127c:	2b58      	cmp	r3, #88	; 0x58
 800127e:	d006      	beq.n	800128e <bmp280_init+0x50>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001286:	2b60      	cmp	r3, #96	; 0x60
 8001288:	d001      	beq.n	800128e <bmp280_init+0x50>

		return false;
 800128a:	2300      	movs	r3, #0
 800128c:	e080      	b.n	8001390 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800128e:	22b6      	movs	r2, #182	; 0xb6
 8001290:	21e0      	movs	r1, #224	; 0xe0
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffae 	bl	80011f4 <write_register8>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <bmp280_init+0x64>
		return false;
 800129e:	2300      	movs	r3, #0
 80012a0:	e076      	b.n	8001390 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80012a2:	f107 020c 	add.w	r2, r7, #12
 80012a6:	2301      	movs	r3, #1
 80012a8:	21f3      	movs	r1, #243	; 0xf3
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fe97 	bl	8000fde <read_data>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f5      	bne.n	80012a2 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80012b6:	7b3b      	ldrb	r3, [r7, #12]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f0      	bne.n	80012a2 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff feb5 	bl	8001030 <read_calibration_data>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f083 0301 	eor.w	r3, r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d100      	bne.n	80012d4 <bmp280_init+0x96>
 80012d2:	e001      	b.n	80012d8 <bmp280_init+0x9a>
		return false;
 80012d4:	2300      	movs	r3, #0
 80012d6:	e05b      	b.n	8001390 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80012de:	2b60      	cmp	r3, #96	; 0x60
 80012e0:	d10a      	bne.n	80012f8 <bmp280_init+0xba>
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ff26 	bl	8001134 <read_hum_calibration_data>
 80012e8:	4603      	mov	r3, r0
 80012ea:	f083 0301 	eor.w	r3, r3, #1
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <bmp280_init+0xba>
		return false;
 80012f4:	2300      	movs	r3, #0
 80012f6:	e04b      	b.n	8001390 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	795b      	ldrb	r3, [r3, #5]
 80012fc:	015b      	lsls	r3, r3, #5
 80012fe:	b25a      	sxtb	r2, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	785b      	ldrb	r3, [r3, #1]
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	b25b      	sxtb	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b25b      	sxtb	r3, r3
 800130c:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	461a      	mov	r2, r3
 8001312:	21f5      	movs	r1, #245	; 0xf5
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff6d 	bl	80011f4 <write_register8>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <bmp280_init+0xe6>
		return false;
 8001320:	2300      	movs	r3, #0
 8001322:	e035      	b.n	8001390 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d102      	bne.n	8001332 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	78db      	ldrb	r3, [r3, #3]
 8001336:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001338:	b25a      	sxtb	r2, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	789b      	ldrb	r3, [r3, #2]
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	b25b      	sxtb	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b25a      	sxtb	r2, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b25b      	sxtb	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001350:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001358:	2b60      	cmp	r3, #96	; 0x60
 800135a:	d10d      	bne.n	8001378 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	791b      	ldrb	r3, [r3, #4]
 8001360:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001362:	7b7b      	ldrb	r3, [r7, #13]
 8001364:	461a      	mov	r2, r3
 8001366:	21f2      	movs	r1, #242	; 0xf2
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff43 	bl	80011f4 <write_register8>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <bmp280_init+0x13a>
			return false;
 8001374:	2300      	movs	r3, #0
 8001376:	e00b      	b.n	8001390 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001378:	7bbb      	ldrb	r3, [r7, #14]
 800137a:	461a      	mov	r2, r3
 800137c:	21f4      	movs	r1, #244	; 0xf4
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ff38 	bl	80011f4 <write_register8>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <bmp280_init+0x150>
		return false;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <bmp280_init+0x152>
	}

	return true;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	10da      	asrs	r2, r3, #3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013ba:	12db      	asrs	r3, r3, #11
 80013bc:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	111b      	asrs	r3, r3, #4
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	8812      	ldrh	r2, [r2, #0]
 80013c6:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	1112      	asrs	r2, r2, #4
 80013cc:	68f9      	ldr	r1, [r7, #12]
 80013ce:	8809      	ldrh	r1, [r1, #0]
 80013d0:	1a52      	subs	r2, r2, r1
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80013de:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80013e2:	139b      	asrs	r3, r3, #14
 80013e4:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	441a      	add	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	3380      	adds	r3, #128	; 0x80
 80013fc:	121b      	asrs	r3, r3, #8
}
 80013fe:	4618      	mov	r0, r3
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800140a:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4619      	mov	r1, r3
 800141c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001420:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001424:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001428:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	6a3a      	ldr	r2, [r7, #32]
 8001430:	fb02 f203 	mul.w	r2, r2, r3
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	6a39      	ldr	r1, [r7, #32]
 8001438:	fb01 f303 	mul.w	r3, r1, r3
 800143c:	441a      	add	r2, r3
 800143e:	6a39      	ldr	r1, [r7, #32]
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	fba1 3403 	umull	r3, r4, r1, r3
 8001446:	4422      	add	r2, r4
 8001448:	4614      	mov	r4, r2
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001450:	b211      	sxth	r1, r2
 8001452:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001456:	fb01 f504 	mul.w	r5, r1, r4
 800145a:	fb03 f002 	mul.w	r0, r3, r2
 800145e:	4428      	add	r0, r5
 8001460:	fba3 3401 	umull	r3, r4, r3, r1
 8001464:	1902      	adds	r2, r0, r4
 8001466:	4614      	mov	r4, r2
 8001468:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800146c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001476:	b21b      	sxth	r3, r3
 8001478:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800147c:	6a3a      	ldr	r2, [r7, #32]
 800147e:	fb04 f102 	mul.w	r1, r4, r2
 8001482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001484:	fb03 f202 	mul.w	r2, r3, r2
 8001488:	1888      	adds	r0, r1, r2
 800148a:	6a3a      	ldr	r2, [r7, #32]
 800148c:	fba2 1203 	umull	r1, r2, r2, r3
 8001490:	1883      	adds	r3, r0, r2
 8001492:	461a      	mov	r2, r3
 8001494:	f04f 0500 	mov.w	r5, #0
 8001498:	f04f 0600 	mov.w	r6, #0
 800149c:	0456      	lsls	r6, r2, #17
 800149e:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80014a2:	044d      	lsls	r5, r1, #17
 80014a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80014a8:	186b      	adds	r3, r5, r1
 80014aa:	eb46 0402 	adc.w	r4, r6, r2
 80014ae:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014b8:	b219      	sxth	r1, r3
 80014ba:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80014be:	f04f 0500 	mov.w	r5, #0
 80014c2:	f04f 0600 	mov.w	r6, #0
 80014c6:	00ce      	lsls	r6, r1, #3
 80014c8:	2500      	movs	r5, #0
 80014ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80014ce:	186b      	adds	r3, r5, r1
 80014d0:	eb46 0402 	adc.w	r4, r6, r2
 80014d4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	6a3a      	ldr	r2, [r7, #32]
 80014dc:	fb02 f203 	mul.w	r2, r2, r3
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	6a39      	ldr	r1, [r7, #32]
 80014e4:	fb01 f303 	mul.w	r3, r1, r3
 80014e8:	441a      	add	r2, r3
 80014ea:	6a39      	ldr	r1, [r7, #32]
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	fba1 3403 	umull	r3, r4, r1, r3
 80014f2:	4422      	add	r2, r4
 80014f4:	4614      	mov	r4, r2
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80014fc:	b211      	sxth	r1, r2
 80014fe:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001502:	fb01 f504 	mul.w	r5, r1, r4
 8001506:	fb03 f002 	mul.w	r0, r3, r2
 800150a:	4428      	add	r0, r5
 800150c:	fba3 3401 	umull	r3, r4, r3, r1
 8001510:	1902      	adds	r2, r0, r4
 8001512:	4614      	mov	r4, r2
 8001514:	f04f 0100 	mov.w	r1, #0
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	0a19      	lsrs	r1, r3, #8
 800151e:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001522:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800152a:	b21b      	sxth	r3, r3
 800152c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001530:	6a38      	ldr	r0, [r7, #32]
 8001532:	fb04 f500 	mul.w	r5, r4, r0
 8001536:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001538:	fb03 f000 	mul.w	r0, r3, r0
 800153c:	4428      	add	r0, r5
 800153e:	6a3d      	ldr	r5, [r7, #32]
 8001540:	fba5 5603 	umull	r5, r6, r5, r3
 8001544:	1983      	adds	r3, r0, r6
 8001546:	461e      	mov	r6, r3
 8001548:	f04f 0b00 	mov.w	fp, #0
 800154c:	f04f 0c00 	mov.w	ip, #0
 8001550:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001554:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001558:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800155c:	eb1b 0301 	adds.w	r3, fp, r1
 8001560:	eb4c 0402 	adc.w	r4, ip, r2
 8001564:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001568:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800156c:	1c19      	adds	r1, r3, #0
 800156e:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	88db      	ldrh	r3, [r3, #6]
 8001576:	b29b      	uxth	r3, r3
 8001578:	f04f 0400 	mov.w	r4, #0
 800157c:	fb03 f502 	mul.w	r5, r3, r2
 8001580:	fb01 f004 	mul.w	r0, r1, r4
 8001584:	4428      	add	r0, r5
 8001586:	fba1 3403 	umull	r3, r4, r1, r3
 800158a:	1902      	adds	r2, r0, r4
 800158c:	4614      	mov	r4, r2
 800158e:	f04f 0100 	mov.w	r1, #0
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	1061      	asrs	r1, r4, #1
 8001598:	17e2      	asrs	r2, r4, #31
 800159a:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 800159e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80015a2:	4323      	orrs	r3, r4
 80015a4:	d101      	bne.n	80015aa <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 80015a6:	2300      	movs	r3, #0
 80015a8:	e0d4      	b.n	8001754 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80015b0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80015b4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	ea4f 0963 	mov.w	r9, r3, asr #1
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80015c4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80015c8:	4645      	mov	r5, r8
 80015ca:	464e      	mov	r6, r9
 80015cc:	1aed      	subs	r5, r5, r3
 80015ce:	eb66 0604 	sbc.w	r6, r6, r4
 80015d2:	46a8      	mov	r8, r5
 80015d4:	46b1      	mov	r9, r6
 80015d6:	eb18 0308 	adds.w	r3, r8, r8
 80015da:	eb49 0409 	adc.w	r4, r9, r9
 80015de:	4698      	mov	r8, r3
 80015e0:	46a1      	mov	r9, r4
 80015e2:	eb18 0805 	adds.w	r8, r8, r5
 80015e6:	eb49 0906 	adc.w	r9, r9, r6
 80015ea:	f04f 0100 	mov.w	r1, #0
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80015f6:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80015fa:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80015fe:	eb18 0801 	adds.w	r8, r8, r1
 8001602:	eb49 0902 	adc.w	r9, r9, r2
 8001606:	f04f 0100 	mov.w	r1, #0
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001612:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001616:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800161a:	4688      	mov	r8, r1
 800161c:	4691      	mov	r9, r2
 800161e:	eb18 0805 	adds.w	r8, r8, r5
 8001622:	eb49 0906 	adc.w	r9, r9, r6
 8001626:	f04f 0100 	mov.w	r1, #0
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001632:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001636:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800163a:	4688      	mov	r8, r1
 800163c:	4691      	mov	r9, r2
 800163e:	eb18 0005 	adds.w	r0, r8, r5
 8001642:	eb49 0106 	adc.w	r1, r9, r6
 8001646:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800164a:	f7ff faad 	bl	8000ba8 <__aeabi_ldivmod>
 800164e:	4603      	mov	r3, r0
 8001650:	460c      	mov	r4, r1
 8001652:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800165c:	b219      	sxth	r1, r3
 800165e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001662:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	f04f 0400 	mov.w	r4, #0
 800166e:	0b6b      	lsrs	r3, r5, #13
 8001670:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001674:	1374      	asrs	r4, r6, #13
 8001676:	fb03 f502 	mul.w	r5, r3, r2
 800167a:	fb01 f004 	mul.w	r0, r1, r4
 800167e:	4428      	add	r0, r5
 8001680:	fba1 1203 	umull	r1, r2, r1, r3
 8001684:	1883      	adds	r3, r0, r2
 8001686:	461a      	mov	r2, r3
 8001688:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	f04f 0400 	mov.w	r4, #0
 8001694:	0b6b      	lsrs	r3, r5, #13
 8001696:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800169a:	1374      	asrs	r4, r6, #13
 800169c:	fb03 f502 	mul.w	r5, r3, r2
 80016a0:	fb01 f004 	mul.w	r0, r1, r4
 80016a4:	4428      	add	r0, r5
 80016a6:	fba1 1203 	umull	r1, r2, r1, r3
 80016aa:	1883      	adds	r3, r0, r2
 80016ac:	461a      	mov	r2, r3
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	f04f 0400 	mov.w	r4, #0
 80016b6:	0e4b      	lsrs	r3, r1, #25
 80016b8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80016bc:	1654      	asrs	r4, r2, #25
 80016be:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	fb04 f102 	mul.w	r1, r4, r2
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	fb03 f202 	mul.w	r2, r3, r2
 80016da:	1888      	adds	r0, r1, r2
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	fba2 1203 	umull	r1, r2, r2, r3
 80016e2:	1883      	adds	r3, r0, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	f04f 0400 	mov.w	r4, #0
 80016ee:	0ccb      	lsrs	r3, r1, #19
 80016f0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80016f4:	14d4      	asrs	r4, r2, #19
 80016f6:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80016fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80016fe:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001702:	eb11 0803 	adds.w	r8, r1, r3
 8001706:	eb42 0904 	adc.w	r9, r2, r4
 800170a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800170e:	eb13 0508 	adds.w	r5, r3, r8
 8001712:	eb44 0609 	adc.w	r6, r4, r9
 8001716:	f04f 0100 	mov.w	r1, #0
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	0a29      	lsrs	r1, r5, #8
 8001720:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001724:	1232      	asrs	r2, r6, #8
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800172c:	b21d      	sxth	r5, r3
 800172e:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001732:	f04f 0800 	mov.w	r8, #0
 8001736:	f04f 0900 	mov.w	r9, #0
 800173a:	ea4f 1906 	mov.w	r9, r6, lsl #4
 800173e:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001742:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001746:	eb18 0301 	adds.w	r3, r8, r1
 800174a:	eb49 0402 	adc.w	r4, r9, r2
 800174e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8001752:	693b      	ldr	r3, [r7, #16]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3728      	adds	r7, #40	; 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0800175e <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800175e:	b480      	push	{r7}
 8001760:	b087      	sub	sp, #28
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001770:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	039a      	lsls	r2, r3, #14
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800177c:	051b      	lsls	r3, r3, #20
 800177e:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001786:	4619      	mov	r1, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fb03 f301 	mul.w	r3, r3, r1
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001794:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 800179c:	4611      	mov	r1, r2
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	fb02 f201 	mul.w	r2, r2, r1
 80017a4:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80017a6:	68f9      	ldr	r1, [r7, #12]
 80017a8:	7f09      	ldrb	r1, [r1, #28]
 80017aa:	4608      	mov	r0, r1
 80017ac:	6979      	ldr	r1, [r7, #20]
 80017ae:	fb01 f100 	mul.w	r1, r1, r0
 80017b2:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80017b4:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80017b8:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80017bc:	1292      	asrs	r2, r2, #10
 80017be:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80017c2:	68f9      	ldr	r1, [r7, #12]
 80017c4:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80017c8:	fb01 f202 	mul.w	r2, r1, r2
 80017cc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80017d0:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	13db      	asrs	r3, r3, #15
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	13d2      	asrs	r2, r2, #15
 80017e0:	fb02 f303 	mul.w	r3, r2, r3
 80017e4:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	7e12      	ldrb	r2, [r2, #24]
 80017ea:	fb02 f303 	mul.w	r3, r2, r3
 80017ee:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80017fc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001804:	bfa8      	it	ge
 8001806:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 800180a:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	131b      	asrs	r3, r3, #12
}
 8001810:	4618      	mov	r0, r3
 8001812:	371c      	adds	r7, #28
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001830:	2b60      	cmp	r3, #96	; 0x60
 8001832:	d007      	beq.n	8001844 <bmp280_read_fixed+0x28>
		if (humidity)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <bmp280_read_fixed+0x24>
			*humidity = 0;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001840:	2300      	movs	r3, #0
 8001842:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <bmp280_read_fixed+0x32>
 800184a:	2308      	movs	r3, #8
 800184c:	e000      	b.n	8001850 <bmp280_read_fixed+0x34>
 800184e:	2306      	movs	r3, #6
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001854:	b2db      	uxtb	r3, r3
 8001856:	f107 0218 	add.w	r2, r7, #24
 800185a:	21f7      	movs	r1, #247	; 0xf7
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7ff fbbe 	bl	8000fde <read_data>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <bmp280_read_fixed+0x50>
		return false;
 8001868:	2300      	movs	r3, #0
 800186a:	e038      	b.n	80018de <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800186c:	7e3b      	ldrb	r3, [r7, #24]
 800186e:	031a      	lsls	r2, r3, #12
 8001870:	7e7b      	ldrb	r3, [r7, #25]
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	4313      	orrs	r3, r2
 8001876:	7eba      	ldrb	r2, [r7, #26]
 8001878:	0912      	lsrs	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	4313      	orrs	r3, r2
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001880:	7efb      	ldrb	r3, [r7, #27]
 8001882:	031a      	lsls	r2, r3, #12
 8001884:	7f3b      	ldrb	r3, [r7, #28]
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	4313      	orrs	r3, r2
 800188a:	7f7a      	ldrb	r2, [r7, #29]
 800188c:	0912      	lsrs	r2, r2, #4
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	4313      	orrs	r3, r2
 8001892:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	461a      	mov	r2, r3
 800189a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f7ff fd7b 	bl	8001398 <compensate_temperature>
 80018a2:	4602      	mov	r2, r0
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	461a      	mov	r2, r3
 80018ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f7ff fdab 	bl	800140a <compensate_pressure>
 80018b4:	4602      	mov	r2, r0
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	601a      	str	r2, [r3, #0]

	if (humidity) {
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00d      	beq.n	80018dc <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 80018c0:	7fbb      	ldrb	r3, [r7, #30]
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	7ffa      	ldrb	r2, [r7, #31]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	461a      	mov	r2, r3
 80018ce:	6a39      	ldr	r1, [r7, #32]
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7ff ff44 	bl	800175e <compensate_humidity>
 80018d6:	4602      	mov	r2, r0
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	601a      	str	r2, [r3, #0]
	}

	return true;
 80018dc:	2301      	movs	r3, #1
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3730      	adds	r7, #48	; 0x30
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <bmp280_read_float+0x1a>
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	e000      	b.n	8001904 <bmp280_read_float+0x1c>
 8001902:	2300      	movs	r3, #0
 8001904:	f107 0218 	add.w	r2, r7, #24
 8001908:	f107 011c 	add.w	r1, r7, #28
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f7ff ff85 	bl	800181c <bmp280_read_fixed>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d028      	beq.n	800196a <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001922:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001974 <bmp280_read_float+0x8c>
 8001926:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800193a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001978 <bmp280_read_float+0x90>
 800193e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00b      	beq.n	8001966 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	ee07 3a90 	vmov	s15, r3
 8001954:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001958:	eddf 6a08 	vldr	s13, [pc, #32]	; 800197c <bmp280_read_float+0x94>
 800195c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <bmp280_read_float+0x84>
	}

	return false;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	42c80000 	.word	0x42c80000
 8001978:	43800000 	.word	0x43800000
 800197c:	44800000 	.word	0x44800000

08001980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001982:	b085      	sub	sp, #20
 8001984:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001986:	f000 fb51 	bl	800202c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800198a:	f000 f933 	bl	8001bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800198e:	f000 f9c9 	bl	8001d24 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001992:	f006 fa2d 	bl	8007df0 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001996:	f000 f997 	bl	8001cc8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  bmp280_init_default_params(&bmp280.params);
 800199a:	4884      	ldr	r0, [pc, #528]	; (8001bac <main+0x22c>)
 800199c:	f7ff fad4 	bl	8000f48 <bmp280_init_default_params>
  	bmp280.addr = BMP280_I2C_ADDRESS_0;
 80019a0:	4b83      	ldr	r3, [pc, #524]	; (8001bb0 <main+0x230>)
 80019a2:	2276      	movs	r2, #118	; 0x76
 80019a4:	849a      	strh	r2, [r3, #36]	; 0x24
  	bmp280.i2c = &hi2c1;
 80019a6:	4b82      	ldr	r3, [pc, #520]	; (8001bb0 <main+0x230>)
 80019a8:	4a82      	ldr	r2, [pc, #520]	; (8001bb4 <main+0x234>)
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28

  	while (!bmp280_init(&bmp280, &bmp280.params)) {
 80019ac:	e01f      	b.n	80019ee <main+0x6e>
  		size = sprintf((char *)Data, "BMP280 initialization failed\n\r");
 80019ae:	4a82      	ldr	r2, [pc, #520]	; (8001bb8 <main+0x238>)
 80019b0:	4b82      	ldr	r3, [pc, #520]	; (8001bbc <main+0x23c>)
 80019b2:	4615      	mov	r5, r2
 80019b4:	461c      	mov	r4, r3
 80019b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b8:	6028      	str	r0, [r5, #0]
 80019ba:	6069      	str	r1, [r5, #4]
 80019bc:	60aa      	str	r2, [r5, #8]
 80019be:	60eb      	str	r3, [r5, #12]
 80019c0:	cc07      	ldmia	r4!, {r0, r1, r2}
 80019c2:	6128      	str	r0, [r5, #16]
 80019c4:	6169      	str	r1, [r5, #20]
 80019c6:	61aa      	str	r2, [r5, #24]
 80019c8:	8823      	ldrh	r3, [r4, #0]
 80019ca:	78a2      	ldrb	r2, [r4, #2]
 80019cc:	83ab      	strh	r3, [r5, #28]
 80019ce:	4613      	mov	r3, r2
 80019d0:	77ab      	strb	r3, [r5, #30]
 80019d2:	231e      	movs	r3, #30
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	4b7a      	ldr	r3, [pc, #488]	; (8001bc0 <main+0x240>)
 80019d8:	801a      	strh	r2, [r3, #0]
  		CDC_Transmit_FS(Data, size);
 80019da:	4b79      	ldr	r3, [pc, #484]	; (8001bc0 <main+0x240>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	4619      	mov	r1, r3
 80019e0:	4875      	ldr	r0, [pc, #468]	; (8001bb8 <main+0x238>)
 80019e2:	f006 fafb 	bl	8007fdc <CDC_Transmit_FS>
  		HAL_Delay(2000);
 80019e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019ea:	f000 fb91 	bl	8002110 <HAL_Delay>
  	while (!bmp280_init(&bmp280, &bmp280.params)) {
 80019ee:	496f      	ldr	r1, [pc, #444]	; (8001bac <main+0x22c>)
 80019f0:	486f      	ldr	r0, [pc, #444]	; (8001bb0 <main+0x230>)
 80019f2:	f7ff fc24 	bl	800123e <bmp280_init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f083 0301 	eor.w	r3, r3, #1
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1d5      	bne.n	80019ae <main+0x2e>
  	}
  	bool bme280p = bmp280.id == BME280_CHIP_ID;
 8001a02:	4b6b      	ldr	r3, [pc, #428]	; (8001bb0 <main+0x230>)
 8001a04:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a08:	2b60      	cmp	r3, #96	; 0x60
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	71fb      	strb	r3, [r7, #7]
  	size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <main+0x9c>
 8001a18:	4b6a      	ldr	r3, [pc, #424]	; (8001bc4 <main+0x244>)
 8001a1a:	e000      	b.n	8001a1e <main+0x9e>
 8001a1c:	4b6a      	ldr	r3, [pc, #424]	; (8001bc8 <main+0x248>)
 8001a1e:	461a      	mov	r2, r3
 8001a20:	496a      	ldr	r1, [pc, #424]	; (8001bcc <main+0x24c>)
 8001a22:	4865      	ldr	r0, [pc, #404]	; (8001bb8 <main+0x238>)
 8001a24:	f007 fc64 	bl	80092f0 <siprintf>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	4b64      	ldr	r3, [pc, #400]	; (8001bc0 <main+0x240>)
 8001a2e:	801a      	strh	r2, [r3, #0]
  	CDC_Transmit_FS(Data, size);
 8001a30:	4b63      	ldr	r3, [pc, #396]	; (8001bc0 <main+0x240>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	4860      	ldr	r0, [pc, #384]	; (8001bb8 <main+0x238>)
 8001a38:	f006 fad0 	bl	8007fdc <CDC_Transmit_FS>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001a3c:	2110      	movs	r1, #16
 8001a3e:	4864      	ldr	r0, [pc, #400]	; (8001bd0 <main+0x250>)
 8001a40:	f000 fe4d 	bl	80026de <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8001a44:	2064      	movs	r0, #100	; 0x64
 8001a46:	f000 fb63 	bl	8002110 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8001a4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a4e:	4861      	ldr	r0, [pc, #388]	; (8001bd4 <main+0x254>)
 8001a50:	f000 fe45 	bl	80026de <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8001a54:	2064      	movs	r0, #100	; 0x64
 8001a56:	f000 fb5b 	bl	8002110 <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001a5a:	2110      	movs	r1, #16
 8001a5c:	485c      	ldr	r0, [pc, #368]	; (8001bd0 <main+0x250>)
 8001a5e:	f000 fe3e 	bl	80026de <HAL_GPIO_TogglePin>
  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_14);
 8001a62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a66:	485b      	ldr	r0, [pc, #364]	; (8001bd4 <main+0x254>)
 8001a68:	f000 fe39 	bl	80026de <HAL_GPIO_TogglePin>
  	  HAL_Delay(100);
 8001a6c:	2064      	movs	r0, #100	; 0x64
 8001a6e:	f000 fb4f 	bl	8002110 <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8001a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a76:	4857      	ldr	r0, [pc, #348]	; (8001bd4 <main+0x254>)
 8001a78:	f000 fe31 	bl	80026de <HAL_GPIO_TogglePin>
  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_13);
 8001a7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a80:	4854      	ldr	r0, [pc, #336]	; (8001bd4 <main+0x254>)
 8001a82:	f000 fe2c 	bl	80026de <HAL_GPIO_TogglePin>
  	  HAL_Delay(100);
 8001a86:	2064      	movs	r0, #100	; 0x64
 8001a88:	f000 fb42 	bl	8002110 <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_14);
 8001a8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a90:	4850      	ldr	r0, [pc, #320]	; (8001bd4 <main+0x254>)
 8001a92:	f000 fe24 	bl	80026de <HAL_GPIO_TogglePin>
  	  HAL_Delay(100);
 8001a96:	2064      	movs	r0, #100	; 0x64
 8001a98:	f000 fb3a 	bl	8002110 <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_13);
 8001a9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aa0:	484c      	ldr	r0, [pc, #304]	; (8001bd4 <main+0x254>)
 8001aa2:	f000 fe1c 	bl	80026de <HAL_GPIO_TogglePin>



	  		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001aa6:	e025      	b.n	8001af4 <main+0x174>
	  			size = sprintf((char *)Data,
 8001aa8:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <main+0x238>)
 8001aaa:	4a4b      	ldr	r2, [pc, #300]	; (8001bd8 <main+0x258>)
 8001aac:	4614      	mov	r4, r2
 8001aae:	469c      	mov	ip, r3
 8001ab0:	f104 0e20 	add.w	lr, r4, #32
 8001ab4:	4665      	mov	r5, ip
 8001ab6:	4626      	mov	r6, r4
 8001ab8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001aba:	6028      	str	r0, [r5, #0]
 8001abc:	6069      	str	r1, [r5, #4]
 8001abe:	60aa      	str	r2, [r5, #8]
 8001ac0:	60eb      	str	r3, [r5, #12]
 8001ac2:	3410      	adds	r4, #16
 8001ac4:	f10c 0c10 	add.w	ip, ip, #16
 8001ac8:	4574      	cmp	r4, lr
 8001aca:	d1f3      	bne.n	8001ab4 <main+0x134>
 8001acc:	4663      	mov	r3, ip
 8001ace:	4622      	mov	r2, r4
 8001ad0:	6810      	ldr	r0, [r2, #0]
 8001ad2:	6018      	str	r0, [r3, #0]
 8001ad4:	8892      	ldrh	r2, [r2, #4]
 8001ad6:	809a      	strh	r2, [r3, #4]
 8001ad8:	2325      	movs	r3, #37	; 0x25
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <main+0x240>)
 8001ade:	801a      	strh	r2, [r3, #0]
	  					"Temperature/pressure reading failed\n\r");
	  			CDC_Transmit_FS(Data, size);
 8001ae0:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <main+0x240>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4834      	ldr	r0, [pc, #208]	; (8001bb8 <main+0x238>)
 8001ae8:	f006 fa78 	bl	8007fdc <CDC_Transmit_FS>
	  			HAL_Delay(2000);
 8001aec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001af0:	f000 fb0e 	bl	8002110 <HAL_Delay>
	  		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001af4:	4b39      	ldr	r3, [pc, #228]	; (8001bdc <main+0x25c>)
 8001af6:	4a3a      	ldr	r2, [pc, #232]	; (8001be0 <main+0x260>)
 8001af8:	493a      	ldr	r1, [pc, #232]	; (8001be4 <main+0x264>)
 8001afa:	482d      	ldr	r0, [pc, #180]	; (8001bb0 <main+0x230>)
 8001afc:	f7ff fef4 	bl	80018e8 <bmp280_read_float>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f083 0301 	eor.w	r3, r3, #1
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1cd      	bne.n	8001aa8 <main+0x128>
	  		}

	  		size = sprintf((char *)Data,"Pressure: %.2f Pa, Temperature: %.2f C \n\r",
 8001b0c:	4b34      	ldr	r3, [pc, #208]	; (8001be0 <main+0x260>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fd19 	bl	8000548 <__aeabi_f2d>
 8001b16:	4605      	mov	r5, r0
 8001b18:	460e      	mov	r6, r1
 8001b1a:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <main+0x264>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd12 	bl	8000548 <__aeabi_f2d>
 8001b24:	4603      	mov	r3, r0
 8001b26:	460c      	mov	r4, r1
 8001b28:	e9cd 3400 	strd	r3, r4, [sp]
 8001b2c:	462a      	mov	r2, r5
 8001b2e:	4633      	mov	r3, r6
 8001b30:	492d      	ldr	r1, [pc, #180]	; (8001be8 <main+0x268>)
 8001b32:	4821      	ldr	r0, [pc, #132]	; (8001bb8 <main+0x238>)
 8001b34:	f007 fbdc 	bl	80092f0 <siprintf>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <main+0x240>)
 8001b3e:	801a      	strh	r2, [r3, #0]
	  				pressure, temperature);
	  		CDC_Transmit_FS(Data, size);
 8001b40:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <main+0x240>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	481c      	ldr	r0, [pc, #112]	; (8001bb8 <main+0x238>)
 8001b48:	f006 fa48 	bl	8007fdc <CDC_Transmit_FS>
	  		if (bme280p) {
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d017      	beq.n	8001b82 <main+0x202>
	  			size = sprintf((char *)Data,", Humidity: %.2f\n", humidity);
 8001b52:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <main+0x25c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fcf6 	bl	8000548 <__aeabi_f2d>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	460c      	mov	r4, r1
 8001b60:	461a      	mov	r2, r3
 8001b62:	4623      	mov	r3, r4
 8001b64:	4921      	ldr	r1, [pc, #132]	; (8001bec <main+0x26c>)
 8001b66:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <main+0x238>)
 8001b68:	f007 fbc2 	bl	80092f0 <siprintf>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <main+0x240>)
 8001b72:	801a      	strh	r2, [r3, #0]
		  		CDC_Transmit_FS(Data, size);
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <main+0x240>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	480f      	ldr	r0, [pc, #60]	; (8001bb8 <main+0x238>)
 8001b7c:	f006 fa2e 	bl	8007fdc <CDC_Transmit_FS>
 8001b80:	e00f      	b.n	8001ba2 <main+0x222>
	  		}

	  		else {
	  			size = sprintf((char *)Data, "\n\r");
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <main+0x238>)
 8001b84:	4a1a      	ldr	r2, [pc, #104]	; (8001bf0 <main+0x270>)
 8001b86:	8811      	ldrh	r1, [r2, #0]
 8001b88:	7892      	ldrb	r2, [r2, #2]
 8001b8a:	8019      	strh	r1, [r3, #0]
 8001b8c:	709a      	strb	r2, [r3, #2]
 8001b8e:	2302      	movs	r3, #2
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <main+0x240>)
 8001b94:	801a      	strh	r2, [r3, #0]
		  		CDC_Transmit_FS(Data, size);
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <main+0x240>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <main+0x238>)
 8001b9e:	f006 fa1d 	bl	8007fdc <CDC_Transmit_FS>
	  		}
	  	  HAL_Delay(1000);
 8001ba2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ba6:	f000 fab3 	bl	8002110 <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001baa:	e747      	b.n	8001a3c <main+0xbc>
 8001bac:	20000508 	.word	0x20000508
 8001bb0:	200004dc 	.word	0x200004dc
 8001bb4:	20000378 	.word	0x20000378
 8001bb8:	200003d8 	.word	0x200003d8
 8001bbc:	0800a948 	.word	0x0800a948
 8001bc0:	200004d8 	.word	0x200004d8
 8001bc4:	0800a968 	.word	0x0800a968
 8001bc8:	0800a970 	.word	0x0800a970
 8001bcc:	0800a978 	.word	0x0800a978
 8001bd0:	40020400 	.word	0x40020400
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	0800a98c 	.word	0x0800a98c
 8001bdc:	200003d4 	.word	0x200003d4
 8001be0:	200003d0 	.word	0x200003d0
 8001be4:	200003cc 	.word	0x200003cc
 8001be8:	0800a9b4 	.word	0x0800a9b4
 8001bec:	0800a9e0 	.word	0x0800a9e0
 8001bf0:	0800a9f4 	.word	0x0800a9f4

08001bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b094      	sub	sp, #80	; 0x50
 8001bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfa:	f107 0320 	add.w	r3, r7, #32
 8001bfe:	2230      	movs	r2, #48	; 0x30
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f006 fe58 	bl	80088b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <SystemClock_Config+0xcc>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	4a27      	ldr	r2, [pc, #156]	; (8001cc0 <SystemClock_Config+0xcc>)
 8001c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c26:	6413      	str	r3, [r2, #64]	; 0x40
 8001c28:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <SystemClock_Config+0xcc>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <SystemClock_Config+0xd0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a21      	ldr	r2, [pc, #132]	; (8001cc4 <SystemClock_Config+0xd0>)
 8001c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <SystemClock_Config+0xd0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c50:	2301      	movs	r3, #1
 8001c52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001c64:	2306      	movs	r3, #6
 8001c66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c68:	23a8      	movs	r3, #168	; 0xa8
 8001c6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c70:	2307      	movs	r3, #7
 8001c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c74:	f107 0320 	add.w	r3, r7, #32
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f002 fe85 	bl	8004988 <HAL_RCC_OscConfig>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c84:	f000 f8b6 	bl	8001df4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c88:	230f      	movs	r3, #15
 8001c8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	2105      	movs	r1, #5
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f003 f8de 	bl	8004e68 <HAL_RCC_ClockConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cb2:	f000 f89f 	bl	8001df4 <Error_Handler>
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3750      	adds	r7, #80	; 0x50
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000

08001cc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cce:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <MX_I2C1_Init+0x54>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cd4:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <MX_I2C1_Init+0x58>)
 8001cd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001ce6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d04:	4804      	ldr	r0, [pc, #16]	; (8001d18 <MX_I2C1_Init+0x50>)
 8001d06:	f000 fd05 	bl	8002714 <HAL_I2C_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d10:	f000 f870 	bl	8001df4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000378 	.word	0x20000378
 8001d1c:	40005400 	.word	0x40005400
 8001d20:	000186a0 	.word	0x000186a0

08001d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2a:	f107 030c 	add.w	r3, r7, #12
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
 8001d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <MX_GPIO_Init+0xc4>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a29      	ldr	r2, [pc, #164]	; (8001de8 <MX_GPIO_Init+0xc4>)
 8001d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <MX_GPIO_Init+0xc4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <MX_GPIO_Init+0xc4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a22      	ldr	r2, [pc, #136]	; (8001de8 <MX_GPIO_Init+0xc4>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <MX_GPIO_Init+0xc4>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <MX_GPIO_Init+0xc4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <MX_GPIO_Init+0xc4>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <MX_GPIO_Init+0xc4>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001d94:	4815      	ldr	r0, [pc, #84]	; (8001dec <MX_GPIO_Init+0xc8>)
 8001d96:	f000 fc89 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2110      	movs	r1, #16
 8001d9e:	4814      	ldr	r0, [pc, #80]	; (8001df0 <MX_GPIO_Init+0xcc>)
 8001da0:	f000 fc84 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001da4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001da8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480b      	ldr	r0, [pc, #44]	; (8001dec <MX_GPIO_Init+0xc8>)
 8001dbe:	f000 fadb 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dc2:	2310      	movs	r3, #16
 8001dc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4805      	ldr	r0, [pc, #20]	; (8001df0 <MX_GPIO_Init+0xcc>)
 8001dda:	f000 facd 	bl	8002378 <HAL_GPIO_Init>

}
 8001dde:	bf00      	nop
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40020400 	.word	0x40020400

08001df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e18:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a08      	ldr	r2, [pc, #32]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800

08001e54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <HAL_I2C_MspInit+0x84>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d12b      	bne.n	8001ece <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_I2C_MspInit+0x88>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a17      	ldr	r2, [pc, #92]	; (8001edc <HAL_I2C_MspInit+0x88>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_I2C_MspInit+0x88>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e92:	23c0      	movs	r3, #192	; 0xc0
 8001e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e96:	2312      	movs	r3, #18
 8001e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <HAL_I2C_MspInit+0x8c>)
 8001eae:	f000 fa63 	bl	8002378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_I2C_MspInit+0x88>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a08      	ldr	r2, [pc, #32]	; (8001edc <HAL_I2C_MspInit+0x88>)
 8001ebc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_I2C_MspInit+0x88>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	; 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40005400 	.word	0x40005400
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020400 	.word	0x40020400

08001ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <MemManage_Handler+0x4>

08001efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f38:	f000 f8ca 	bl	80020d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <OTG_FS_IRQHandler+0x10>)
 8001f46:	f001 fce4 	bl	8003912 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200019b0 	.word	0x200019b0

08001f54 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <_sbrk+0x50>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <_sbrk+0x16>
		heap_end = &end;
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <_sbrk+0x50>)
 8001f66:	4a10      	ldr	r2, [pc, #64]	; (8001fa8 <_sbrk+0x54>)
 8001f68:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <_sbrk+0x50>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <_sbrk+0x50>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4413      	add	r3, r2
 8001f78:	466a      	mov	r2, sp
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d907      	bls.n	8001f8e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f7e:	f006 fc61 	bl	8008844 <__errno>
 8001f82:	4602      	mov	r2, r0
 8001f84:	230c      	movs	r3, #12
 8001f86:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8c:	e006      	b.n	8001f9c <_sbrk+0x48>
	}

	heap_end += incr;
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <_sbrk+0x50>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	4a03      	ldr	r2, [pc, #12]	; (8001fa4 <_sbrk+0x50>)
 8001f98:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000368 	.word	0x20000368
 8001fa8:	20001dc0 	.word	0x20001dc0

08001fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <SystemInit+0x28>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <SystemInit+0x28>)
 8001fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <SystemInit+0x28>)
 8001fc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fc6:	609a      	str	r2, [r3, #8]
#endif
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002010 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fde:	e003      	b.n	8001fe8 <LoopCopyDataInit>

08001fe0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fe2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fe4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fe6:	3104      	adds	r1, #4

08001fe8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fe8:	480b      	ldr	r0, [pc, #44]	; (8002018 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ff0:	d3f6      	bcc.n	8001fe0 <CopyDataInit>
  ldr  r2, =_sbss
 8001ff2:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ff4:	e002      	b.n	8001ffc <LoopFillZerobss>

08001ff6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ff6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ff8:	f842 3b04 	str.w	r3, [r2], #4

08001ffc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ffe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002000:	d3f9      	bcc.n	8001ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002002:	f7ff ffd3 	bl	8001fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002006:	f006 fc23 	bl	8008850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800200a:	f7ff fcb9 	bl	8001980 <main>
  bx  lr    
 800200e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002010:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002014:	0800acc8 	.word	0x0800acc8
  ldr  r0, =_sdata
 8002018:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800201c:	2000034c 	.word	0x2000034c
  ldr  r2, =_sbss
 8002020:	2000034c 	.word	0x2000034c
  ldr  r3, = _ebss
 8002024:	20001dbc 	.word	0x20001dbc

08002028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002028:	e7fe      	b.n	8002028 <ADC_IRQHandler>
	...

0800202c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002030:	4b0e      	ldr	r3, [pc, #56]	; (800206c <HAL_Init+0x40>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0d      	ldr	r2, [pc, #52]	; (800206c <HAL_Init+0x40>)
 8002036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_Init+0x40>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0a      	ldr	r2, [pc, #40]	; (800206c <HAL_Init+0x40>)
 8002042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002046:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_Init+0x40>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a07      	ldr	r2, [pc, #28]	; (800206c <HAL_Init+0x40>)
 800204e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002054:	2003      	movs	r0, #3
 8002056:	f000 f94d 	bl	80022f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800205a:	2000      	movs	r0, #0
 800205c:	f000 f808 	bl	8002070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002060:	f7ff fed0 	bl	8001e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023c00 	.word	0x40023c00

08002070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_InitTick+0x54>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_InitTick+0x58>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4619      	mov	r1, r3
 8002082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002086:	fbb3 f3f1 	udiv	r3, r3, r1
 800208a:	fbb2 f3f3 	udiv	r3, r2, r3
 800208e:	4618      	mov	r0, r3
 8002090:	f000 f965 	bl	800235e <HAL_SYSTICK_Config>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e00e      	b.n	80020bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b0f      	cmp	r3, #15
 80020a2:	d80a      	bhi.n	80020ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a4:	2200      	movs	r2, #0
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f000 f92d 	bl	800230a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b0:	4a06      	ldr	r2, [pc, #24]	; (80020cc <HAL_InitTick+0x5c>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e000      	b.n	80020bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000008 	.word	0x20000008
 80020cc:	20000004 	.word	0x20000004

080020d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_IncTick+0x20>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_IncTick+0x24>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <HAL_IncTick+0x24>)
 80020e2:	6013      	str	r3, [r2, #0]
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000008 	.word	0x20000008
 80020f4:	20000510 	.word	0x20000510

080020f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return uwTick;
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <HAL_GetTick+0x14>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000510 	.word	0x20000510

08002110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002118:	f7ff ffee 	bl	80020f8 <HAL_GetTick>
 800211c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d005      	beq.n	8002136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_Delay+0x40>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002136:	bf00      	nop
 8002138:	f7ff ffde 	bl	80020f8 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	429a      	cmp	r2, r3
 8002146:	d8f7      	bhi.n	8002138 <HAL_Delay+0x28>
  {
  }
}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000008 	.word	0x20000008

08002154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002170:	4013      	ands	r3, r2
 8002172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800217c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002186:	4a04      	ldr	r2, [pc, #16]	; (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	60d3      	str	r3, [r2, #12]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <__NVIC_GetPriorityGrouping+0x18>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	f003 0307 	and.w	r3, r3, #7
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	db0b      	blt.n	80021e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	f003 021f 	and.w	r2, r3, #31
 80021d0:	4907      	ldr	r1, [pc, #28]	; (80021f0 <__NVIC_EnableIRQ+0x38>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	2001      	movs	r0, #1
 80021da:	fa00 f202 	lsl.w	r2, r0, r2
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000e100 	.word	0xe000e100

080021f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	2b00      	cmp	r3, #0
 8002206:	db0a      	blt.n	800221e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	490c      	ldr	r1, [pc, #48]	; (8002240 <__NVIC_SetPriority+0x4c>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	0112      	lsls	r2, r2, #4
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	440b      	add	r3, r1
 8002218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800221c:	e00a      	b.n	8002234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <__NVIC_SetPriority+0x50>)
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	3b04      	subs	r3, #4
 800222c:	0112      	lsls	r2, r2, #4
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	440b      	add	r3, r1
 8002232:	761a      	strb	r2, [r3, #24]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000e100 	.word	0xe000e100
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f1c3 0307 	rsb	r3, r3, #7
 8002262:	2b04      	cmp	r3, #4
 8002264:	bf28      	it	cs
 8002266:	2304      	movcs	r3, #4
 8002268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3304      	adds	r3, #4
 800226e:	2b06      	cmp	r3, #6
 8002270:	d902      	bls.n	8002278 <NVIC_EncodePriority+0x30>
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3b03      	subs	r3, #3
 8002276:	e000      	b.n	800227a <NVIC_EncodePriority+0x32>
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	f04f 32ff 	mov.w	r2, #4294967295
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	401a      	ands	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	43d9      	mvns	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	4313      	orrs	r3, r2
         );
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c0:	d301      	bcc.n	80022c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00f      	b.n	80022e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <SysTick_Config+0x40>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ce:	210f      	movs	r1, #15
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	f7ff ff8e 	bl	80021f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <SysTick_Config+0x40>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <SysTick_Config+0x40>)
 80022e0:	2207      	movs	r2, #7
 80022e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	e000e010 	.word	0xe000e010

080022f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ff29 	bl	8002154 <__NVIC_SetPriorityGrouping>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230a:	b580      	push	{r7, lr}
 800230c:	b086      	sub	sp, #24
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800231c:	f7ff ff3e 	bl	800219c <__NVIC_GetPriorityGrouping>
 8002320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7ff ff8e 	bl	8002248 <NVIC_EncodePriority>
 800232c:	4602      	mov	r2, r0
 800232e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff5d 	bl	80021f4 <__NVIC_SetPriority>
}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800234c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff31 	bl	80021b8 <__NVIC_EnableIRQ>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ffa2 	bl	80022b0 <SysTick_Config>
 800236c:	4603      	mov	r3, r0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	e16b      	b.n	800266c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002394:	2201      	movs	r2, #1
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	f040 815a 	bne.w	8002666 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d00b      	beq.n	80023d2 <HAL_GPIO_Init+0x5a>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d007      	beq.n	80023d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023c6:	2b11      	cmp	r3, #17
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b12      	cmp	r3, #18
 80023d0:	d130      	bne.n	8002434 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	2203      	movs	r2, #3
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002408:	2201      	movs	r2, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 0201 	and.w	r2, r3, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0xfc>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b12      	cmp	r3, #18
 8002472:	d123      	bne.n	80024bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	08da      	lsrs	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3208      	adds	r2, #8
 800247c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	220f      	movs	r2, #15
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	08da      	lsrs	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3208      	adds	r2, #8
 80024b6:	69b9      	ldr	r1, [r7, #24]
 80024b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	2203      	movs	r2, #3
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0203 	and.w	r2, r3, #3
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80b4 	beq.w	8002666 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <HAL_GPIO_Init+0x308>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	4a5e      	ldr	r2, [pc, #376]	; (8002680 <HAL_GPIO_Init+0x308>)
 8002508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800250c:	6453      	str	r3, [r2, #68]	; 0x44
 800250e:	4b5c      	ldr	r3, [pc, #368]	; (8002680 <HAL_GPIO_Init+0x308>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251a:	4a5a      	ldr	r2, [pc, #360]	; (8002684 <HAL_GPIO_Init+0x30c>)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3302      	adds	r3, #2
 8002522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	220f      	movs	r2, #15
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a51      	ldr	r2, [pc, #324]	; (8002688 <HAL_GPIO_Init+0x310>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d02b      	beq.n	800259e <HAL_GPIO_Init+0x226>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a50      	ldr	r2, [pc, #320]	; (800268c <HAL_GPIO_Init+0x314>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d025      	beq.n	800259a <HAL_GPIO_Init+0x222>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a4f      	ldr	r2, [pc, #316]	; (8002690 <HAL_GPIO_Init+0x318>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01f      	beq.n	8002596 <HAL_GPIO_Init+0x21e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a4e      	ldr	r2, [pc, #312]	; (8002694 <HAL_GPIO_Init+0x31c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d019      	beq.n	8002592 <HAL_GPIO_Init+0x21a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4d      	ldr	r2, [pc, #308]	; (8002698 <HAL_GPIO_Init+0x320>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_GPIO_Init+0x216>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a4c      	ldr	r2, [pc, #304]	; (800269c <HAL_GPIO_Init+0x324>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00d      	beq.n	800258a <HAL_GPIO_Init+0x212>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a4b      	ldr	r2, [pc, #300]	; (80026a0 <HAL_GPIO_Init+0x328>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d007      	beq.n	8002586 <HAL_GPIO_Init+0x20e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4a      	ldr	r2, [pc, #296]	; (80026a4 <HAL_GPIO_Init+0x32c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d101      	bne.n	8002582 <HAL_GPIO_Init+0x20a>
 800257e:	2307      	movs	r3, #7
 8002580:	e00e      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 8002582:	2308      	movs	r3, #8
 8002584:	e00c      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 8002586:	2306      	movs	r3, #6
 8002588:	e00a      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 800258a:	2305      	movs	r3, #5
 800258c:	e008      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 800258e:	2304      	movs	r3, #4
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 8002592:	2303      	movs	r3, #3
 8002594:	e004      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 8002596:	2302      	movs	r3, #2
 8002598:	e002      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 800259e:	2300      	movs	r3, #0
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	f002 0203 	and.w	r2, r2, #3
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	4093      	lsls	r3, r2
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b0:	4934      	ldr	r1, [pc, #208]	; (8002684 <HAL_GPIO_Init+0x30c>)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	3302      	adds	r3, #2
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025be:	4b3a      	ldr	r3, [pc, #232]	; (80026a8 <HAL_GPIO_Init+0x330>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025e2:	4a31      	ldr	r2, [pc, #196]	; (80026a8 <HAL_GPIO_Init+0x330>)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025e8:	4b2f      	ldr	r3, [pc, #188]	; (80026a8 <HAL_GPIO_Init+0x330>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800260c:	4a26      	ldr	r2, [pc, #152]	; (80026a8 <HAL_GPIO_Init+0x330>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002612:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <HAL_GPIO_Init+0x330>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002636:	4a1c      	ldr	r2, [pc, #112]	; (80026a8 <HAL_GPIO_Init+0x330>)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <HAL_GPIO_Init+0x330>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_GPIO_Init+0x330>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3301      	adds	r3, #1
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2b0f      	cmp	r3, #15
 8002670:	f67f ae90 	bls.w	8002394 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002674:	bf00      	nop
 8002676:	3724      	adds	r7, #36	; 0x24
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	40023800 	.word	0x40023800
 8002684:	40013800 	.word	0x40013800
 8002688:	40020000 	.word	0x40020000
 800268c:	40020400 	.word	0x40020400
 8002690:	40020800 	.word	0x40020800
 8002694:	40020c00 	.word	0x40020c00
 8002698:	40021000 	.word	0x40021000
 800269c:	40021400 	.word	0x40021400
 80026a0:	40021800 	.word	0x40021800
 80026a4:	40021c00 	.word	0x40021c00
 80026a8:	40013c00 	.word	0x40013c00

080026ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]
 80026b8:	4613      	mov	r3, r2
 80026ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026bc:	787b      	ldrb	r3, [r7, #1]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026c8:	e003      	b.n	80026d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ca:	887b      	ldrh	r3, [r7, #2]
 80026cc:	041a      	lsls	r2, r3, #16
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	619a      	str	r2, [r3, #24]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	887b      	ldrh	r3, [r7, #2]
 80026f0:	401a      	ands	r2, r3
 80026f2:	887b      	ldrh	r3, [r7, #2]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d104      	bne.n	8002702 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026f8:	887b      	ldrh	r3, [r7, #2]
 80026fa:	041a      	lsls	r2, r3, #16
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002700:	e002      	b.n	8002708 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	619a      	str	r2, [r3, #24]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e11f      	b.n	8002966 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff fb8a 	bl	8001e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2224      	movs	r2, #36	; 0x24
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002766:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002776:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002778:	f002 fd1a 	bl	80051b0 <HAL_RCC_GetPCLK1Freq>
 800277c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4a7b      	ldr	r2, [pc, #492]	; (8002970 <HAL_I2C_Init+0x25c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d807      	bhi.n	8002798 <HAL_I2C_Init+0x84>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4a7a      	ldr	r2, [pc, #488]	; (8002974 <HAL_I2C_Init+0x260>)
 800278c:	4293      	cmp	r3, r2
 800278e:	bf94      	ite	ls
 8002790:	2301      	movls	r3, #1
 8002792:	2300      	movhi	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	e006      	b.n	80027a6 <HAL_I2C_Init+0x92>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4a77      	ldr	r2, [pc, #476]	; (8002978 <HAL_I2C_Init+0x264>)
 800279c:	4293      	cmp	r3, r2
 800279e:	bf94      	ite	ls
 80027a0:	2301      	movls	r3, #1
 80027a2:	2300      	movhi	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e0db      	b.n	8002966 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4a72      	ldr	r2, [pc, #456]	; (800297c <HAL_I2C_Init+0x268>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0c9b      	lsrs	r3, r3, #18
 80027b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4a64      	ldr	r2, [pc, #400]	; (8002970 <HAL_I2C_Init+0x25c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d802      	bhi.n	80027e8 <HAL_I2C_Init+0xd4>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	3301      	adds	r3, #1
 80027e6:	e009      	b.n	80027fc <HAL_I2C_Init+0xe8>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	4a63      	ldr	r2, [pc, #396]	; (8002980 <HAL_I2C_Init+0x26c>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	3301      	adds	r3, #1
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	430b      	orrs	r3, r1
 8002802:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800280e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4956      	ldr	r1, [pc, #344]	; (8002970 <HAL_I2C_Init+0x25c>)
 8002818:	428b      	cmp	r3, r1
 800281a:	d80d      	bhi.n	8002838 <HAL_I2C_Init+0x124>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e59      	subs	r1, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fbb1 f3f3 	udiv	r3, r1, r3
 800282a:	3301      	adds	r3, #1
 800282c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002830:	2b04      	cmp	r3, #4
 8002832:	bf38      	it	cc
 8002834:	2304      	movcc	r3, #4
 8002836:	e04f      	b.n	80028d8 <HAL_I2C_Init+0x1c4>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d111      	bne.n	8002864 <HAL_I2C_Init+0x150>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1e58      	subs	r0, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	440b      	add	r3, r1
 800284e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002852:	3301      	adds	r3, #1
 8002854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002858:	2b00      	cmp	r3, #0
 800285a:	bf0c      	ite	eq
 800285c:	2301      	moveq	r3, #1
 800285e:	2300      	movne	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	e012      	b.n	800288a <HAL_I2C_Init+0x176>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1e58      	subs	r0, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	0099      	lsls	r1, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	fbb0 f3f3 	udiv	r3, r0, r3
 800287a:	3301      	adds	r3, #1
 800287c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Init+0x17e>
 800288e:	2301      	movs	r3, #1
 8002890:	e022      	b.n	80028d8 <HAL_I2C_Init+0x1c4>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10e      	bne.n	80028b8 <HAL_I2C_Init+0x1a4>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1e58      	subs	r0, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	460b      	mov	r3, r1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	440b      	add	r3, r1
 80028a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b6:	e00f      	b.n	80028d8 <HAL_I2C_Init+0x1c4>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1e58      	subs	r0, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	0099      	lsls	r1, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ce:	3301      	adds	r3, #1
 80028d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	6809      	ldr	r1, [r1, #0]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69da      	ldr	r2, [r3, #28]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6911      	ldr	r1, [r2, #16]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68d2      	ldr	r2, [r2, #12]
 8002912:	4311      	orrs	r1, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	430b      	orrs	r3, r1
 800291a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	000186a0 	.word	0x000186a0
 8002974:	001e847f 	.word	0x001e847f
 8002978:	003d08ff 	.word	0x003d08ff
 800297c:	431bde83 	.word	0x431bde83
 8002980:	10624dd3 	.word	0x10624dd3

08002984 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	4608      	mov	r0, r1
 800298e:	4611      	mov	r1, r2
 8002990:	461a      	mov	r2, r3
 8002992:	4603      	mov	r3, r0
 8002994:	817b      	strh	r3, [r7, #10]
 8002996:	460b      	mov	r3, r1
 8002998:	813b      	strh	r3, [r7, #8]
 800299a:	4613      	mov	r3, r2
 800299c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800299e:	f7ff fbab 	bl	80020f8 <HAL_GetTick>
 80029a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	f040 80d9 	bne.w	8002b64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2319      	movs	r3, #25
 80029b8:	2201      	movs	r2, #1
 80029ba:	496d      	ldr	r1, [pc, #436]	; (8002b70 <HAL_I2C_Mem_Write+0x1ec>)
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fc7b 	bl	80032b8 <I2C_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
 80029ca:	e0cc      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_I2C_Mem_Write+0x56>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e0c5      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d007      	beq.n	8002a00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2221      	movs	r2, #33	; 0x21
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2240      	movs	r2, #64	; 0x40
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a3a      	ldr	r2, [r7, #32]
 8002a2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a4d      	ldr	r2, [pc, #308]	; (8002b74 <HAL_I2C_Mem_Write+0x1f0>)
 8002a40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a42:	88f8      	ldrh	r0, [r7, #6]
 8002a44:	893a      	ldrh	r2, [r7, #8]
 8002a46:	8979      	ldrh	r1, [r7, #10]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	4603      	mov	r3, r0
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 fab6 	bl	8002fc4 <I2C_RequestMemoryWrite>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d052      	beq.n	8002b04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e081      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fcfc 	bl	8003464 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00d      	beq.n	8002a8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d107      	bne.n	8002a8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e06b      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	781a      	ldrb	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d11b      	bne.n	8002b04 <HAL_I2C_Mem_Write+0x180>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d017      	beq.n	8002b04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	781a      	ldrb	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1aa      	bne.n	8002a62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fce8 	bl	80034e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00d      	beq.n	8002b38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d107      	bne.n	8002b34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e016      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e000      	b.n	8002b66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
  }
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	00100002 	.word	0x00100002
 8002b74:	ffff0000 	.word	0xffff0000

08002b78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08c      	sub	sp, #48	; 0x30
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	4608      	mov	r0, r1
 8002b82:	4611      	mov	r1, r2
 8002b84:	461a      	mov	r2, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	817b      	strh	r3, [r7, #10]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	813b      	strh	r3, [r7, #8]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b92:	f7ff fab1 	bl	80020f8 <HAL_GetTick>
 8002b96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	f040 8208 	bne.w	8002fb6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	2319      	movs	r3, #25
 8002bac:	2201      	movs	r2, #1
 8002bae:	497b      	ldr	r1, [pc, #492]	; (8002d9c <HAL_I2C_Mem_Read+0x224>)
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 fb81 	bl	80032b8 <I2C_WaitOnFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e1fb      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_I2C_Mem_Read+0x56>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e1f4      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d007      	beq.n	8002bf4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2222      	movs	r2, #34	; 0x22
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2240      	movs	r2, #64	; 0x40
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a5b      	ldr	r2, [pc, #364]	; (8002da0 <HAL_I2C_Mem_Read+0x228>)
 8002c34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c36:	88f8      	ldrh	r0, [r7, #6]
 8002c38:	893a      	ldrh	r2, [r7, #8]
 8002c3a:	8979      	ldrh	r1, [r7, #10]
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	4603      	mov	r3, r0
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fa50 	bl	80030ec <I2C_RequestMemoryRead>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e1b0      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d113      	bne.n	8002c86 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	623b      	str	r3, [r7, #32]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	623b      	str	r3, [r7, #32]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	623b      	str	r3, [r7, #32]
 8002c72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	e184      	b.n	8002f90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d11b      	bne.n	8002cc6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	61fb      	str	r3, [r7, #28]
 8002cb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	e164      	b.n	8002f90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d11b      	bne.n	8002d06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cdc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	e144      	b.n	8002f90 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d1c:	e138      	b.n	8002f90 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	f200 80f1 	bhi.w	8002f0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d123      	bne.n	8002d78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fc17 	bl	8003568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e139      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d76:	e10b      	b.n	8002f90 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d14e      	bne.n	8002e1e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d86:	2200      	movs	r2, #0
 8002d88:	4906      	ldr	r1, [pc, #24]	; (8002da4 <HAL_I2C_Mem_Read+0x22c>)
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 fa94 	bl	80032b8 <I2C_WaitOnFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e10e      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
 8002d9a:	bf00      	nop
 8002d9c:	00100002 	.word	0x00100002
 8002da0:	ffff0000 	.word	0xffff0000
 8002da4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e1c:	e0b8      	b.n	8002f90 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e24:	2200      	movs	r2, #0
 8002e26:	4966      	ldr	r1, [pc, #408]	; (8002fc0 <HAL_I2C_Mem_Read+0x448>)
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 fa45 	bl	80032b8 <I2C_WaitOnFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0bf      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	2200      	movs	r2, #0
 8002e82:	494f      	ldr	r1, [pc, #316]	; (8002fc0 <HAL_I2C_Mem_Read+0x448>)
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 fa17 	bl	80032b8 <I2C_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e091      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f08:	e042      	b.n	8002f90 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fb2a 	bl	8003568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e04c      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d118      	bne.n	8002f90 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f47f aec2 	bne.w	8002d1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e000      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002fb6:	2302      	movs	r3, #2
  }
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3728      	adds	r7, #40	; 0x28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	00010004 	.word	0x00010004

08002fc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	4608      	mov	r0, r1
 8002fce:	4611      	mov	r1, r2
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	817b      	strh	r3, [r7, #10]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	813b      	strh	r3, [r7, #8]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f95c 	bl	80032b8 <I2C_WaitOnFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00c      	beq.n	8003020 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800301a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e05f      	b.n	80030e0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003020:	897b      	ldrh	r3, [r7, #10]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800302e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	6a3a      	ldr	r2, [r7, #32]
 8003034:	492c      	ldr	r1, [pc, #176]	; (80030e8 <I2C_RequestMemoryWrite+0x124>)
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f995 	bl	8003366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e04c      	b.n	80030e0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800305c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305e:	6a39      	ldr	r1, [r7, #32]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f9ff 	bl	8003464 <I2C_WaitOnTXEFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00d      	beq.n	8003088 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	2b04      	cmp	r3, #4
 8003072:	d107      	bne.n	8003084 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003082:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e02b      	b.n	80030e0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d105      	bne.n	800309a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800308e:	893b      	ldrh	r3, [r7, #8]
 8003090:	b2da      	uxtb	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	611a      	str	r2, [r3, #16]
 8003098:	e021      	b.n	80030de <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800309a:	893b      	ldrh	r3, [r7, #8]
 800309c:	0a1b      	lsrs	r3, r3, #8
 800309e:	b29b      	uxth	r3, r3
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030aa:	6a39      	ldr	r1, [r7, #32]
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f9d9 	bl	8003464 <I2C_WaitOnTXEFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00d      	beq.n	80030d4 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d107      	bne.n	80030d0 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e005      	b.n	80030e0 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030d4:	893b      	ldrh	r3, [r7, #8]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	00010002 	.word	0x00010002

080030ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	4608      	mov	r0, r1
 80030f6:	4611      	mov	r1, r2
 80030f8:	461a      	mov	r2, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	817b      	strh	r3, [r7, #10]
 80030fe:	460b      	mov	r3, r1
 8003100:	813b      	strh	r3, [r7, #8]
 8003102:	4613      	mov	r3, r2
 8003104:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003114:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003124:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	2200      	movs	r2, #0
 800312e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f8c0 	bl	80032b8 <I2C_WaitOnFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00c      	beq.n	8003158 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003152:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e0a9      	b.n	80032ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003158:	897b      	ldrh	r3, [r7, #10]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003166:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	6a3a      	ldr	r2, [r7, #32]
 800316c:	4951      	ldr	r1, [pc, #324]	; (80032b4 <I2C_RequestMemoryRead+0x1c8>)
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f8f9 	bl	8003366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e096      	b.n	80032ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003196:	6a39      	ldr	r1, [r7, #32]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f963 	bl	8003464 <I2C_WaitOnTXEFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00d      	beq.n	80031c0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d107      	bne.n	80031bc <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e075      	b.n	80032ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d105      	bne.n	80031d2 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031c6:	893b      	ldrh	r3, [r7, #8]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	611a      	str	r2, [r3, #16]
 80031d0:	e021      	b.n	8003216 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031d2:	893b      	ldrh	r3, [r7, #8]
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e2:	6a39      	ldr	r1, [r7, #32]
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f93d 	bl	8003464 <I2C_WaitOnTXEFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00d      	beq.n	800320c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d107      	bne.n	8003208 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003206:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e04f      	b.n	80032ac <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800320c:	893b      	ldrh	r3, [r7, #8]
 800320e:	b2da      	uxtb	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003218:	6a39      	ldr	r1, [r7, #32]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f922 	bl	8003464 <I2C_WaitOnTXEFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00d      	beq.n	8003242 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	2b04      	cmp	r3, #4
 800322c:	d107      	bne.n	800323e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e034      	b.n	80032ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003250:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	2200      	movs	r2, #0
 800325a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f82a 	bl	80032b8 <I2C_WaitOnFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00c      	beq.n	8003284 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e013      	b.n	80032ac <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003284:	897b      	ldrh	r3, [r7, #10]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	b2da      	uxtb	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	6a3a      	ldr	r2, [r7, #32]
 8003298:	4906      	ldr	r1, [pc, #24]	; (80032b4 <I2C_RequestMemoryRead+0x1c8>)
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f863 	bl	8003366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	00010002 	.word	0x00010002

080032b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032c8:	e025      	b.n	8003316 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d021      	beq.n	8003316 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d2:	f7fe ff11 	bl	80020f8 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d302      	bcc.n	80032e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d116      	bne.n	8003316 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f043 0220 	orr.w	r2, r3, #32
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e023      	b.n	800335e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	0c1b      	lsrs	r3, r3, #16
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b01      	cmp	r3, #1
 800331e:	d10d      	bne.n	800333c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	43da      	mvns	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4013      	ands	r3, r2
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	bf0c      	ite	eq
 8003332:	2301      	moveq	r3, #1
 8003334:	2300      	movne	r3, #0
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	e00c      	b.n	8003356 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	43da      	mvns	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4013      	ands	r3, r2
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	bf0c      	ite	eq
 800334e:	2301      	moveq	r3, #1
 8003350:	2300      	movne	r3, #0
 8003352:	b2db      	uxtb	r3, r3
 8003354:	461a      	mov	r2, r3
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	429a      	cmp	r2, r3
 800335a:	d0b6      	beq.n	80032ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003374:	e051      	b.n	800341a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003384:	d123      	bne.n	80033ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003394:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800339e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2220      	movs	r2, #32
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f043 0204 	orr.w	r2, r3, #4
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e046      	b.n	800345c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d021      	beq.n	800341a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d6:	f7fe fe8f 	bl	80020f8 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d302      	bcc.n	80033ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d116      	bne.n	800341a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f043 0220 	orr.w	r2, r3, #32
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e020      	b.n	800345c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	0c1b      	lsrs	r3, r3, #16
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	d10c      	bne.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	43da      	mvns	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4013      	ands	r3, r2
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	bf14      	ite	ne
 8003436:	2301      	movne	r3, #1
 8003438:	2300      	moveq	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	e00b      	b.n	8003456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	43da      	mvns	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4013      	ands	r3, r2
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf14      	ite	ne
 8003450:	2301      	movne	r3, #1
 8003452:	2300      	moveq	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d18d      	bne.n	8003376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003470:	e02d      	b.n	80034ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f8ce 	bl	8003614 <I2C_IsAcknowledgeFailed>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e02d      	b.n	80034de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d021      	beq.n	80034ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348a:	f7fe fe35 	bl	80020f8 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d116      	bne.n	80034ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f043 0220 	orr.w	r2, r3, #32
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e007      	b.n	80034de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d8:	2b80      	cmp	r3, #128	; 0x80
 80034da:	d1ca      	bne.n	8003472 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034f2:	e02d      	b.n	8003550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f88d 	bl	8003614 <I2C_IsAcknowledgeFailed>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e02d      	b.n	8003560 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350a:	d021      	beq.n	8003550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350c:	f7fe fdf4 	bl	80020f8 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	429a      	cmp	r2, r3
 800351a:	d302      	bcc.n	8003522 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d116      	bne.n	8003550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f043 0220 	orr.w	r2, r3, #32
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e007      	b.n	8003560 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b04      	cmp	r3, #4
 800355c:	d1ca      	bne.n	80034f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003574:	e042      	b.n	80035fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b10      	cmp	r3, #16
 8003582:	d119      	bne.n	80035b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0210 	mvn.w	r2, #16
 800358c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e029      	b.n	800360c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b8:	f7fe fd9e 	bl	80020f8 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d302      	bcc.n	80035ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d116      	bne.n	80035fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e007      	b.n	800360c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	d1b5      	bne.n	8003576 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362a:	d11b      	bne.n	8003664 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003634:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	f043 0204 	orr.w	r2, r3, #4
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003672:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003674:	b08f      	sub	sp, #60	; 0x3c
 8003676:	af0a      	add	r7, sp, #40	; 0x28
 8003678:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e10f      	b.n	80038a4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f004 fdd0 	bl	8008244 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2203      	movs	r2, #3
 80036a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d102      	bne.n	80036be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 fe9d 	bl	8005402 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	687e      	ldr	r6, [r7, #4]
 80036d0:	466d      	mov	r5, sp
 80036d2:	f106 0410 	add.w	r4, r6, #16
 80036d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80036e6:	1d33      	adds	r3, r6, #4
 80036e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036ea:	6838      	ldr	r0, [r7, #0]
 80036ec:	f001 fd74 	bl	80051d8 <USB_CoreInit>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d005      	beq.n	8003702 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2202      	movs	r2, #2
 80036fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e0d0      	b.n	80038a4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f001 fe8b 	bl	8005424 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370e:	2300      	movs	r3, #0
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	e04a      	b.n	80037aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003714:	7bfa      	ldrb	r2, [r7, #15]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	333d      	adds	r3, #61	; 0x3d
 8003724:	2201      	movs	r2, #1
 8003726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003728:	7bfa      	ldrb	r2, [r7, #15]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	333c      	adds	r3, #60	; 0x3c
 8003738:	7bfa      	ldrb	r2, [r7, #15]
 800373a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	b298      	uxth	r0, r3
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4613      	mov	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	3342      	adds	r3, #66	; 0x42
 8003750:	4602      	mov	r2, r0
 8003752:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003754:	7bfa      	ldrb	r2, [r7, #15]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	333f      	adds	r3, #63	; 0x3f
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003768:	7bfa      	ldrb	r2, [r7, #15]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	3344      	adds	r3, #68	; 0x44
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800377c:	7bfa      	ldrb	r2, [r7, #15]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	3348      	adds	r3, #72	; 0x48
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	3350      	adds	r3, #80	; 0x50
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	3301      	adds	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d3af      	bcc.n	8003714 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b4:	2300      	movs	r3, #0
 80037b6:	73fb      	strb	r3, [r7, #15]
 80037b8:	e044      	b.n	8003844 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037ba:	7bfa      	ldrb	r2, [r7, #15]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037d0:	7bfa      	ldrb	r2, [r7, #15]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80037e2:	7bfa      	ldrb	r2, [r7, #15]
 80037e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037e6:	7bfa      	ldrb	r2, [r7, #15]
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	1a9b      	subs	r3, r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80037f8:	2200      	movs	r2, #0
 80037fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037fc:	7bfa      	ldrb	r2, [r7, #15]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003812:	7bfa      	ldrb	r2, [r7, #15]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003828:	7bfa      	ldrb	r2, [r7, #15]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	3301      	adds	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
 8003844:	7bfa      	ldrb	r2, [r7, #15]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	429a      	cmp	r2, r3
 800384c:	d3b5      	bcc.n	80037ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	687e      	ldr	r6, [r7, #4]
 8003856:	466d      	mov	r5, sp
 8003858:	f106 0410 	add.w	r4, r6, #16
 800385c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800385e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003864:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003868:	e885 0003 	stmia.w	r5, {r0, r1}
 800386c:	1d33      	adds	r3, r6, #4
 800386e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003870:	6838      	ldr	r0, [r7, #0]
 8003872:	f001 fe01 	bl	8005478 <USB_DevInit>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e00d      	b.n	80038a4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f002 fdf6 	bl	800648e <USB_DevDisconnect>

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_PCD_Start+0x1c>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e020      	b.n	800390a <HAL_PCD_Start+0x5e>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d109      	bne.n	80038ec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d005      	beq.n	80038ec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f002 fdb4 	bl	800645e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 fd70 	bl	80053e0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003912:	b590      	push	{r4, r7, lr}
 8003914:	b08d      	sub	sp, #52	; 0x34
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f002 fe5b 	bl	80065e4 <USB_GetMode>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	f040 838e 	bne.w	8004052 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f002 fdbf 	bl	80064be <USB_ReadInterrupts>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 8384 	beq.w	8004050 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f002 fdb6 	bl	80064be <USB_ReadInterrupts>
 8003952:	4603      	mov	r3, r0
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b02      	cmp	r3, #2
 800395a:	d107      	bne.n	800396c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f002 0202 	and.w	r2, r2, #2
 800396a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f002 fda4 	bl	80064be <USB_ReadInterrupts>
 8003976:	4603      	mov	r3, r0
 8003978:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800397c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003980:	d17b      	bne.n	8003a7a <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f002 fdaa 	bl	80064e4 <USB_ReadDevAllOutEpInterrupt>
 8003990:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003992:	e06f      	b.n	8003a74 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d064      	beq.n	8003a68 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	4611      	mov	r1, r2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f002 fdcf 	bl	800654c <USB_ReadDevOutEPInterrupt>
 80039ae:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00c      	beq.n	80039d4 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c6:	461a      	mov	r2, r3
 80039c8:	2301      	movs	r3, #1
 80039ca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80039cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fe0e 	bl	80045f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00c      	beq.n	80039f8 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80039de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 ff0d 	bl	8004800 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f2:	461a      	mov	r2, r3
 80039f4:	2308      	movs	r3, #8
 80039f6:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d008      	beq.n	8003a14 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2310      	movs	r3, #16
 8003a12:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d015      	beq.n	8003a4a <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d108      	bne.n	8003a38 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a30:	461a      	mov	r2, r3
 8003a32:	2101      	movs	r1, #1
 8003a34:	f002 fe1a 	bl	800666c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a44:	461a      	mov	r2, r3
 8003a46:	2320      	movs	r3, #32
 8003a48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d009      	beq.n	8003a68 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a60:	461a      	mov	r2, r3
 8003a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a66:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d18c      	bne.n	8003994 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 fd1d 	bl	80064be <USB_ReadInterrupts>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a8e:	f040 80c4 	bne.w	8003c1a <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f002 fd3e 	bl	8006518 <USB_ReadDevAllInEpInterrupt>
 8003a9c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003aa2:	e0b6      	b.n	8003c12 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 80ab 	beq.w	8003c06 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f002 fd64 	bl	8006588 <USB_ReadDevInEPInterrupt>
 8003ac0:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d05b      	beq.n	8003b84 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	69f9      	ldr	r1, [r7, #28]
 8003ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003aec:	4013      	ands	r3, r2
 8003aee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afc:	461a      	mov	r2, r3
 8003afe:	2301      	movs	r3, #1
 8003b00:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d11b      	bne.n	8003b42 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0e:	4613      	mov	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	3348      	adds	r3, #72	; 0x48
 8003b1a:	6819      	ldr	r1, [r3, #0]
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4403      	add	r3, r0
 8003b2a:	3344      	adds	r3, #68	; 0x44
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4419      	add	r1, r3
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4403      	add	r3, r0
 8003b3e:	3348      	adds	r3, #72	; 0x48
 8003b40:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	4619      	mov	r1, r3
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f004 fbfc 	bl	8008346 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d116      	bne.n	8003b84 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d113      	bne.n	8003b84 <HAL_PCD_IRQHandler+0x272>
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	3350      	adds	r3, #80	; 0x50
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d108      	bne.n	8003b84 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	2101      	movs	r1, #1
 8003b80:	f002 fd74 	bl	800666c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	2310      	movs	r3, #16
 8003bba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2340      	movs	r3, #64	; 0x40
 8003bd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d008      	beq.n	8003bf4 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fc67 	bl	80044d4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	3301      	adds	r3, #1
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f47f af45 	bne.w	8003aa4 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f002 fc4d 	bl	80064be <USB_ReadInterrupts>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c2e:	d122      	bne.n	8003c76 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d108      	bne.n	8003c60 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c56:	2100      	movs	r1, #0
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fe89 	bl	8004970 <HAL_PCDEx_LPM_Callback>
 8003c5e:	e002      	b.n	8003c66 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f004 fbe7 	bl	8008434 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695a      	ldr	r2, [r3, #20]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f002 fc1f 	bl	80064be <USB_ReadInterrupts>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c8a:	d112      	bne.n	8003cb2 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d102      	bne.n	8003ca2 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f004 fba3 	bl	80083e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003cb0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f002 fc01 	bl	80064be <USB_ReadInterrupts>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc6:	f040 80a7 	bne.w	8003e18 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2110      	movs	r1, #16
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f001 fd39 	bl	800575c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cea:	2300      	movs	r3, #0
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cee:	e036      	b.n	8003d5e <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d02:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d14:	0151      	lsls	r1, r2, #5
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	440a      	add	r2, r1
 8003d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d30:	461a      	mov	r2, r3
 8003d32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d36:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d48:	0151      	lsls	r1, r2, #5
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	440a      	add	r2, r1
 8003d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d56:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d3c3      	bcc.n	8003cf0 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d76:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d7a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d016      	beq.n	8003db2 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d94:	f043 030b 	orr.w	r3, r3, #11
 8003d98:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003daa:	f043 030b 	orr.w	r3, r3, #11
 8003dae:	6453      	str	r3, [r2, #68]	; 0x44
 8003db0:	e015      	b.n	8003dde <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003dc4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003dc8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dd8:	f043 030b 	orr.w	r3, r3, #11
 8003ddc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003df0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e02:	461a      	mov	r2, r3
 8003e04:	f002 fc32 	bl	800666c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f002 fb4e 	bl	80064be <USB_ReadInterrupts>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e2c:	d124      	bne.n	8003e78 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f002 fbe4 	bl	8006600 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f001 fcee 	bl	800581e <USB_GetDevSpeed>
 8003e42:	4603      	mov	r3, r0
 8003e44:	461a      	mov	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681c      	ldr	r4, [r3, #0]
 8003e4e:	f001 f9a3 	bl	8005198 <HAL_RCC_GetHCLKFreq>
 8003e52:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f001 fa1d 	bl	800529c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f004 fa97 	bl	8008396 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e76:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f002 fb1e 	bl	80064be <USB_ReadInterrupts>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d161      	bne.n	8003f50 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0210 	bic.w	r2, r2, #16
 8003e9a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f003 020f 	and.w	r2, r3, #15
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3304      	adds	r3, #4
 8003eba:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	0c5b      	lsrs	r3, r3, #17
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d124      	bne.n	8003f12 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d035      	beq.n	8003f40 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	091b      	lsrs	r3, r3, #4
 8003edc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	6a38      	ldr	r0, [r7, #32]
 8003ee8:	f002 f996 	bl	8006218 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ef8:	441a      	add	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f0a:	441a      	add	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	619a      	str	r2, [r3, #24]
 8003f10:	e016      	b.n	8003f40 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	0c5b      	lsrs	r3, r3, #17
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	2b06      	cmp	r3, #6
 8003f1c:	d110      	bne.n	8003f40 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f24:	2208      	movs	r2, #8
 8003f26:	4619      	mov	r1, r3
 8003f28:	6a38      	ldr	r0, [r7, #32]
 8003f2a:	f002 f975 	bl	8006218 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	699a      	ldr	r2, [r3, #24]
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f3a:	441a      	add	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0210 	orr.w	r2, r2, #16
 8003f4e:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f002 fab2 	bl	80064be <USB_ReadInterrupts>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d10a      	bne.n	8003f7a <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f004 fa08 	bl	800837a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f002 0208 	and.w	r2, r2, #8
 8003f78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f002 fa9d 	bl	80064be <USB_ReadInterrupts>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f8e:	d10f      	bne.n	8003fb0 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f004 fa6a 	bl	8008474 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003fae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f002 fa82 	bl	80064be <USB_ReadInterrupts>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fc4:	d10f      	bne.n	8003fe6 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f004 fa3d 	bl	8008450 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f002 fa67 	bl	80064be <USB_ReadInterrupts>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffa:	d10a      	bne.n	8004012 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f004 fa4b 	bl	8008498 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695a      	ldr	r2, [r3, #20]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004010:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f002 fa51 	bl	80064be <USB_ReadInterrupts>
 800401c:	4603      	mov	r3, r0
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b04      	cmp	r3, #4
 8004024:	d115      	bne.n	8004052 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f004 fa3b 	bl	80084b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	e000      	b.n	8004052 <HAL_PCD_IRQHandler+0x740>
      return;
 8004050:	bf00      	nop
    }
  }
}
 8004052:	3734      	adds	r7, #52	; 0x34
 8004054:	46bd      	mov	sp, r7
 8004056:	bd90      	pop	{r4, r7, pc}

08004058 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_PCD_SetAddress+0x1a>
 800406e:	2302      	movs	r3, #2
 8004070:	e013      	b.n	800409a <HAL_PCD_SetAddress+0x42>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f002 f9c1 	bl	8006412 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	4608      	mov	r0, r1
 80040ac:	4611      	mov	r1, r2
 80040ae:	461a      	mov	r2, r3
 80040b0:	4603      	mov	r3, r0
 80040b2:	70fb      	strb	r3, [r7, #3]
 80040b4:	460b      	mov	r3, r1
 80040b6:	803b      	strh	r3, [r7, #0]
 80040b8:	4613      	mov	r3, r2
 80040ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	da0f      	bge.n	80040e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	f003 020f 	and.w	r2, r3, #15
 80040ce:	4613      	mov	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	3338      	adds	r3, #56	; 0x38
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	4413      	add	r3, r2
 80040dc:	3304      	adds	r3, #4
 80040de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	705a      	strb	r2, [r3, #1]
 80040e6:	e00f      	b.n	8004108 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	f003 020f 	and.w	r2, r3, #15
 80040ee:	4613      	mov	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	3304      	adds	r3, #4
 8004100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	b2da      	uxtb	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004114:	883a      	ldrh	r2, [r7, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	78ba      	ldrb	r2, [r7, #2]
 800411e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	785b      	ldrb	r3, [r3, #1]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d004      	beq.n	8004132 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004132:	78bb      	ldrb	r3, [r7, #2]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d102      	bne.n	800413e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_PCD_EP_Open+0xaa>
 8004148:	2302      	movs	r3, #2
 800414a:	e00e      	b.n	800416a <HAL_PCD_EP_Open+0xc8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68f9      	ldr	r1, [r7, #12]
 800415a:	4618      	mov	r0, r3
 800415c:	f001 fb84 	bl	8005868 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004168:	7afb      	ldrb	r3, [r7, #11]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	460b      	mov	r3, r1
 800417c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800417e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004182:	2b00      	cmp	r3, #0
 8004184:	da0f      	bge.n	80041a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	f003 020f 	and.w	r2, r3, #15
 800418c:	4613      	mov	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	3338      	adds	r3, #56	; 0x38
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	4413      	add	r3, r2
 800419a:	3304      	adds	r3, #4
 800419c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	705a      	strb	r2, [r3, #1]
 80041a4:	e00f      	b.n	80041c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041a6:	78fb      	ldrb	r3, [r7, #3]
 80041a8:	f003 020f 	and.w	r2, r3, #15
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	4413      	add	r3, r2
 80041bc:	3304      	adds	r3, #4
 80041be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_PCD_EP_Close+0x6e>
 80041dc:	2302      	movs	r3, #2
 80041de:	e00e      	b.n	80041fe <HAL_PCD_EP_Close+0x8c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68f9      	ldr	r1, [r7, #12]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f001 fbc2 	bl	8005978 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b086      	sub	sp, #24
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	460b      	mov	r3, r1
 8004214:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004216:	7afb      	ldrb	r3, [r7, #11]
 8004218:	f003 020f 	and.w	r2, r3, #15
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	3304      	adds	r3, #4
 800422e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2200      	movs	r2, #0
 8004240:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2200      	movs	r2, #0
 8004246:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004248:	7afb      	ldrb	r3, [r7, #11]
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	b2da      	uxtb	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d102      	bne.n	8004262 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004262:	7afb      	ldrb	r3, [r7, #11]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	6979      	ldr	r1, [r7, #20]
 800427a:	f001 fe45 	bl	8005f08 <USB_EP0StartXfer>
 800427e:	e008      	b.n	8004292 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	6979      	ldr	r1, [r7, #20]
 800428e:	f001 fbf7 	bl	8005a80 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	f003 020f 	and.w	r2, r3, #15
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80042be:	681b      	ldr	r3, [r3, #0]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	607a      	str	r2, [r7, #4]
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	460b      	mov	r3, r1
 80042da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042dc:	7afb      	ldrb	r3, [r7, #11]
 80042de:	f003 020f 	and.w	r2, r3, #15
 80042e2:	4613      	mov	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	3338      	adds	r3, #56	; 0x38
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	3304      	adds	r3, #4
 80042f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2200      	movs	r2, #0
 8004304:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2201      	movs	r2, #1
 800430a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800430c:	7afb      	ldrb	r3, [r7, #11]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	b2da      	uxtb	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d102      	bne.n	8004326 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004326:	7afb      	ldrb	r3, [r7, #11]
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	2b00      	cmp	r3, #0
 800432e:	d109      	bne.n	8004344 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	6979      	ldr	r1, [r7, #20]
 800433e:	f001 fde3 	bl	8005f08 <USB_EP0StartXfer>
 8004342:	e008      	b.n	8004356 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	6979      	ldr	r1, [r7, #20]
 8004352:	f001 fb95 	bl	8005a80 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	f003 020f 	and.w	r2, r3, #15
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	429a      	cmp	r2, r3
 8004378:	d901      	bls.n	800437e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e050      	b.n	8004420 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800437e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004382:	2b00      	cmp	r3, #0
 8004384:	da0f      	bge.n	80043a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	f003 020f 	and.w	r2, r3, #15
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	3338      	adds	r3, #56	; 0x38
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	4413      	add	r3, r2
 800439a:	3304      	adds	r3, #4
 800439c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	705a      	strb	r2, [r3, #1]
 80043a4:	e00d      	b.n	80043c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4413      	add	r3, r2
 80043b8:	3304      	adds	r3, #4
 80043ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2201      	movs	r2, #1
 80043c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_PCD_EP_SetStall+0x82>
 80043de:	2302      	movs	r3, #2
 80043e0:	e01e      	b.n	8004420 <HAL_PCD_EP_SetStall+0xc0>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68f9      	ldr	r1, [r7, #12]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f001 ff3a 	bl	800626a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	b2d9      	uxtb	r1, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004410:	461a      	mov	r2, r3
 8004412:	f002 f92b 	bl	800666c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	f003 020f 	and.w	r2, r3, #15
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	429a      	cmp	r2, r3
 8004440:	d901      	bls.n	8004446 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e042      	b.n	80044cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004446:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800444a:	2b00      	cmp	r3, #0
 800444c:	da0f      	bge.n	800446e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800444e:	78fb      	ldrb	r3, [r7, #3]
 8004450:	f003 020f 	and.w	r2, r3, #15
 8004454:	4613      	mov	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	3338      	adds	r3, #56	; 0x38
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	4413      	add	r3, r2
 8004462:	3304      	adds	r3, #4
 8004464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	705a      	strb	r2, [r3, #1]
 800446c:	e00f      	b.n	800448e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	f003 020f 	and.w	r2, r3, #15
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	4413      	add	r3, r2
 8004484:	3304      	adds	r3, #4
 8004486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_PCD_EP_ClrStall+0x86>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e00e      	b.n	80044cc <HAL_PCD_EP_ClrStall+0xa4>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68f9      	ldr	r1, [r7, #12]
 80044bc:	4618      	mov	r0, r3
 80044be:	f001 ff42 	bl	8006346 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08a      	sub	sp, #40	; 0x28
 80044d8:	af02      	add	r7, sp, #8
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	4613      	mov	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	1a9b      	subs	r3, r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	3338      	adds	r3, #56	; 0x38
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	4413      	add	r3, r2
 80044f8:	3304      	adds	r3, #4
 80044fa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	699a      	ldr	r2, [r3, #24]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	429a      	cmp	r2, r3
 8004506:	d901      	bls.n	800450c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e06c      	b.n	80045e6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	429a      	cmp	r2, r3
 8004520:	d902      	bls.n	8004528 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	3303      	adds	r3, #3
 800452c:	089b      	lsrs	r3, r3, #2
 800452e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004530:	e02b      	b.n	800458a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	695a      	ldr	r2, [r3, #20]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	69fa      	ldr	r2, [r7, #28]
 8004544:	429a      	cmp	r2, r3
 8004546:	d902      	bls.n	800454e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	3303      	adds	r3, #3
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	68d9      	ldr	r1, [r3, #12]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	b2da      	uxtb	r2, r3
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004566:	b2db      	uxtb	r3, r3
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	4603      	mov	r3, r0
 800456c:	6978      	ldr	r0, [r7, #20]
 800456e:	f001 fe1e 	bl	80061ae <USB_WritePacket>

    ep->xfer_buff  += len;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	441a      	add	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	441a      	add	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	b29b      	uxth	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	429a      	cmp	r2, r3
 800459e:	d809      	bhi.n	80045b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	699a      	ldr	r2, [r3, #24]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d203      	bcs.n	80045b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1be      	bne.n	8004532 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	695a      	ldr	r2, [r3, #20]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d811      	bhi.n	80045e4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	2201      	movs	r2, #1
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	43db      	mvns	r3, r3
 80045da:	6939      	ldr	r1, [r7, #16]
 80045dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045e0:	4013      	ands	r3, r2
 80045e2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	333c      	adds	r3, #60	; 0x3c
 8004608:	3304      	adds	r3, #4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b01      	cmp	r3, #1
 8004624:	f040 80b3 	bne.w	800478e <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d028      	beq.n	8004684 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4a70      	ldr	r2, [pc, #448]	; (80047f8 <PCD_EP_OutXfrComplete_int+0x208>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d90e      	bls.n	8004658 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004640:	2b00      	cmp	r3, #0
 8004642:	d009      	beq.n	8004658 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004650:	461a      	mov	r2, r3
 8004652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004656:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f003 fe47 	bl	80082ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004668:	461a      	mov	r2, r3
 800466a:	2101      	movs	r1, #1
 800466c:	f001 fffe 	bl	800666c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467c:	461a      	mov	r2, r3
 800467e:	2308      	movs	r3, #8
 8004680:	6093      	str	r3, [r2, #8]
 8004682:	e0b3      	b.n	80047ec <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b00      	cmp	r3, #0
 800468c:	d009      	beq.n	80046a2 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469a:	461a      	mov	r2, r3
 800469c:	2320      	movs	r3, #32
 800469e:	6093      	str	r3, [r2, #8]
 80046a0:	e0a4      	b.n	80047ec <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f040 809f 	bne.w	80047ec <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4a51      	ldr	r2, [pc, #324]	; (80047f8 <PCD_EP_OutXfrComplete_int+0x208>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d90f      	bls.n	80046d6 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046cc:	461a      	mov	r2, r3
 80046ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d2:	6093      	str	r3, [r2, #8]
 80046d4:	e08a      	b.n	80047ec <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	4613      	mov	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	440b      	add	r3, r1
 80046e4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80046e8:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	0159      	lsls	r1, r3, #5
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	440b      	add	r3, r1
 80046f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80046fc:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	4613      	mov	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4403      	add	r3, r0
 800470c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004710:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	4613      	mov	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004724:	6819      	ldr	r1, [r3, #0]
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	4613      	mov	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4403      	add	r3, r0
 8004734:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4419      	add	r1, r3
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	4613      	mov	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4403      	add	r3, r0
 800474a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800474e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	4619      	mov	r1, r3
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f003 fdda 	bl	8008310 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d144      	bne.n	80047ec <PCD_EP_OutXfrComplete_int+0x1fc>
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	4613      	mov	r3, r2
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d138      	bne.n	80047ec <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004784:	461a      	mov	r2, r3
 8004786:	2101      	movs	r1, #1
 8004788:	f001 ff70 	bl	800666c <USB_EP0_OutStart>
 800478c:	e02e      	b.n	80047ec <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4a1a      	ldr	r2, [pc, #104]	; (80047fc <PCD_EP_OutXfrComplete_int+0x20c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d124      	bne.n	80047e0 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ac:	461a      	mov	r2, r3
 80047ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047b2:	6093      	str	r3, [r2, #8]
 80047b4:	e01a      	b.n	80047ec <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047cc:	461a      	mov	r2, r3
 80047ce:	2320      	movs	r3, #32
 80047d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	4619      	mov	r1, r3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f003 fd99 	bl	8008310 <HAL_PCD_DataOutStageCallback>
 80047de:	e005      	b.n	80047ec <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	4619      	mov	r1, r3
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f003 fd92 	bl	8008310 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	4f54300a 	.word	0x4f54300a
 80047fc:	4f54310a 	.word	0x4f54310a

08004800 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	333c      	adds	r3, #60	; 0x3c
 8004818:	3304      	adds	r3, #4
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d113      	bne.n	800485e <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4a1f      	ldr	r2, [pc, #124]	; (80048b8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d922      	bls.n	8004884 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01d      	beq.n	8004884 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004854:	461a      	mov	r2, r3
 8004856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800485a:	6093      	str	r3, [r2, #8]
 800485c:	e012      	b.n	8004884 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4a16      	ldr	r2, [pc, #88]	; (80048bc <PCD_EP_OutSetupPacket_int+0xbc>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10e      	bne.n	8004884 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800486c:	2b00      	cmp	r3, #0
 800486e:	d009      	beq.n	8004884 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487c:	461a      	mov	r2, r3
 800487e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004882:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f003 fd31 	bl	80082ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d90c      	bls.n	80048ac <PCD_EP_OutSetupPacket_int+0xac>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d108      	bne.n	80048ac <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048a4:	461a      	mov	r2, r3
 80048a6:	2101      	movs	r1, #1
 80048a8:	f001 fee0 	bl	800666c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	4f54300a 	.word	0x4f54300a
 80048bc:	4f54310a 	.word	0x4f54310a

080048c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	70fb      	strb	r3, [r7, #3]
 80048cc:	4613      	mov	r3, r2
 80048ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d107      	bne.n	80048ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80048de:	883b      	ldrh	r3, [r7, #0]
 80048e0:	0419      	lsls	r1, r3, #16
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	629a      	str	r2, [r3, #40]	; 0x28
 80048ec:	e028      	b.n	8004940 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	0c1b      	lsrs	r3, r3, #16
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	4413      	add	r3, r2
 80048fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048fc:	2300      	movs	r3, #0
 80048fe:	73fb      	strb	r3, [r7, #15]
 8004900:	e00d      	b.n	800491e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	3340      	adds	r3, #64	; 0x40
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	0c1b      	lsrs	r3, r3, #16
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	4413      	add	r3, r2
 8004916:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	3301      	adds	r3, #1
 800491c:	73fb      	strb	r3, [r7, #15]
 800491e:	7bfa      	ldrb	r2, [r7, #15]
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	3b01      	subs	r3, #1
 8004924:	429a      	cmp	r2, r3
 8004926:	d3ec      	bcc.n	8004902 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004928:	883b      	ldrh	r3, [r7, #0]
 800492a:	0418      	lsls	r0, r3, #16
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6819      	ldr	r1, [r3, #0]
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	3b01      	subs	r3, #1
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	4302      	orrs	r2, r0
 8004938:	3340      	adds	r3, #64	; 0x40
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	460b      	mov	r3, r1
 8004958:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	887a      	ldrh	r2, [r7, #2]
 8004960:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e25b      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d075      	beq.n	8004a92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049a6:	4ba3      	ldr	r3, [pc, #652]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 030c 	and.w	r3, r3, #12
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d00c      	beq.n	80049cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049b2:	4ba0      	ldr	r3, [pc, #640]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d112      	bne.n	80049e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049be:	4b9d      	ldr	r3, [pc, #628]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ca:	d10b      	bne.n	80049e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049cc:	4b99      	ldr	r3, [pc, #612]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d05b      	beq.n	8004a90 <HAL_RCC_OscConfig+0x108>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d157      	bne.n	8004a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e236      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ec:	d106      	bne.n	80049fc <HAL_RCC_OscConfig+0x74>
 80049ee:	4b91      	ldr	r3, [pc, #580]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a90      	ldr	r2, [pc, #576]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 80049f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	e01d      	b.n	8004a38 <HAL_RCC_OscConfig+0xb0>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCC_OscConfig+0x98>
 8004a06:	4b8b      	ldr	r3, [pc, #556]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a8a      	ldr	r2, [pc, #552]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	4b88      	ldr	r3, [pc, #544]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a87      	ldr	r2, [pc, #540]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	e00b      	b.n	8004a38 <HAL_RCC_OscConfig+0xb0>
 8004a20:	4b84      	ldr	r3, [pc, #528]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a83      	ldr	r2, [pc, #524]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	4b81      	ldr	r3, [pc, #516]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a80      	ldr	r2, [pc, #512]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d013      	beq.n	8004a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a40:	f7fd fb5a 	bl	80020f8 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a48:	f7fd fb56 	bl	80020f8 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b64      	cmp	r3, #100	; 0x64
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e1fb      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5a:	4b76      	ldr	r3, [pc, #472]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f0      	beq.n	8004a48 <HAL_RCC_OscConfig+0xc0>
 8004a66:	e014      	b.n	8004a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a68:	f7fd fb46 	bl	80020f8 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a70:	f7fd fb42 	bl	80020f8 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b64      	cmp	r3, #100	; 0x64
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e1e7      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a82:	4b6c      	ldr	r3, [pc, #432]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0xe8>
 8004a8e:	e000      	b.n	8004a92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d063      	beq.n	8004b66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a9e:	4b65      	ldr	r3, [pc, #404]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aaa:	4b62      	ldr	r3, [pc, #392]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d11c      	bne.n	8004af0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ab6:	4b5f      	ldr	r3, [pc, #380]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d116      	bne.n	8004af0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ac2:	4b5c      	ldr	r3, [pc, #368]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <HAL_RCC_OscConfig+0x152>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d001      	beq.n	8004ada <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e1bb      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ada:	4b56      	ldr	r3, [pc, #344]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	4952      	ldr	r1, [pc, #328]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aee:	e03a      	b.n	8004b66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d020      	beq.n	8004b3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af8:	4b4f      	ldr	r3, [pc, #316]	; (8004c38 <HAL_RCC_OscConfig+0x2b0>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afe:	f7fd fafb 	bl	80020f8 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b06:	f7fd faf7 	bl	80020f8 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e19c      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b18:	4b46      	ldr	r3, [pc, #280]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f0      	beq.n	8004b06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b24:	4b43      	ldr	r3, [pc, #268]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4940      	ldr	r1, [pc, #256]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	600b      	str	r3, [r1, #0]
 8004b38:	e015      	b.n	8004b66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b3a:	4b3f      	ldr	r3, [pc, #252]	; (8004c38 <HAL_RCC_OscConfig+0x2b0>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7fd fada 	bl	80020f8 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b48:	f7fd fad6 	bl	80020f8 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e17b      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b5a:	4b36      	ldr	r3, [pc, #216]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d030      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d016      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b7a:	4b30      	ldr	r3, [pc, #192]	; (8004c3c <HAL_RCC_OscConfig+0x2b4>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b80:	f7fd faba 	bl	80020f8 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b88:	f7fd fab6 	bl	80020f8 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e15b      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9a:	4b26      	ldr	r3, [pc, #152]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0x200>
 8004ba6:	e015      	b.n	8004bd4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ba8:	4b24      	ldr	r3, [pc, #144]	; (8004c3c <HAL_RCC_OscConfig+0x2b4>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bae:	f7fd faa3 	bl	80020f8 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bb6:	f7fd fa9f 	bl	80020f8 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e144      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc8:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1f0      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80a0 	beq.w	8004d22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004be2:	2300      	movs	r3, #0
 8004be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004be6:	4b13      	ldr	r3, [pc, #76]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10f      	bne.n	8004c12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	4a0e      	ldr	r2, [pc, #56]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c00:	6413      	str	r3, [r2, #64]	; 0x40
 8004c02:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <HAL_RCC_OscConfig+0x2ac>)
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c0a:	60bb      	str	r3, [r7, #8]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <HAL_RCC_OscConfig+0x2b8>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d121      	bne.n	8004c62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c1e:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <HAL_RCC_OscConfig+0x2b8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a07      	ldr	r2, [pc, #28]	; (8004c40 <HAL_RCC_OscConfig+0x2b8>)
 8004c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c2a:	f7fd fa65 	bl	80020f8 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c30:	e011      	b.n	8004c56 <HAL_RCC_OscConfig+0x2ce>
 8004c32:	bf00      	nop
 8004c34:	40023800 	.word	0x40023800
 8004c38:	42470000 	.word	0x42470000
 8004c3c:	42470e80 	.word	0x42470e80
 8004c40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c44:	f7fd fa58 	bl	80020f8 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e0fd      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c56:	4b81      	ldr	r3, [pc, #516]	; (8004e5c <HAL_RCC_OscConfig+0x4d4>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d106      	bne.n	8004c78 <HAL_RCC_OscConfig+0x2f0>
 8004c6a:	4b7d      	ldr	r3, [pc, #500]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6e:	4a7c      	ldr	r2, [pc, #496]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	6713      	str	r3, [r2, #112]	; 0x70
 8004c76:	e01c      	b.n	8004cb2 <HAL_RCC_OscConfig+0x32a>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	2b05      	cmp	r3, #5
 8004c7e:	d10c      	bne.n	8004c9a <HAL_RCC_OscConfig+0x312>
 8004c80:	4b77      	ldr	r3, [pc, #476]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c84:	4a76      	ldr	r2, [pc, #472]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004c86:	f043 0304 	orr.w	r3, r3, #4
 8004c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c8c:	4b74      	ldr	r3, [pc, #464]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c90:	4a73      	ldr	r2, [pc, #460]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	6713      	str	r3, [r2, #112]	; 0x70
 8004c98:	e00b      	b.n	8004cb2 <HAL_RCC_OscConfig+0x32a>
 8004c9a:	4b71      	ldr	r3, [pc, #452]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	4a70      	ldr	r2, [pc, #448]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004ca0:	f023 0301 	bic.w	r3, r3, #1
 8004ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca6:	4b6e      	ldr	r3, [pc, #440]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	4a6d      	ldr	r2, [pc, #436]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004cac:	f023 0304 	bic.w	r3, r3, #4
 8004cb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d015      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cba:	f7fd fa1d 	bl	80020f8 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc0:	e00a      	b.n	8004cd8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cc2:	f7fd fa19 	bl	80020f8 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e0bc      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd8:	4b61      	ldr	r3, [pc, #388]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0ee      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x33a>
 8004ce4:	e014      	b.n	8004d10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce6:	f7fd fa07 	bl	80020f8 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cec:	e00a      	b.n	8004d04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cee:	f7fd fa03 	bl	80020f8 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e0a6      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d04:	4b56      	ldr	r3, [pc, #344]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1ee      	bne.n	8004cee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d10:	7dfb      	ldrb	r3, [r7, #23]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d105      	bne.n	8004d22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d16:	4b52      	ldr	r3, [pc, #328]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	4a51      	ldr	r2, [pc, #324]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 8092 	beq.w	8004e50 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d2c:	4b4c      	ldr	r3, [pc, #304]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 030c 	and.w	r3, r3, #12
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d05c      	beq.n	8004df2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d141      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d40:	4b48      	ldr	r3, [pc, #288]	; (8004e64 <HAL_RCC_OscConfig+0x4dc>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d46:	f7fd f9d7 	bl	80020f8 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d4e:	f7fd f9d3 	bl	80020f8 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e078      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d60:	4b3f      	ldr	r3, [pc, #252]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1f0      	bne.n	8004d4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69da      	ldr	r2, [r3, #28]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	019b      	lsls	r3, r3, #6
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	3b01      	subs	r3, #1
 8004d86:	041b      	lsls	r3, r3, #16
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	061b      	lsls	r3, r3, #24
 8004d90:	4933      	ldr	r1, [pc, #204]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d96:	4b33      	ldr	r3, [pc, #204]	; (8004e64 <HAL_RCC_OscConfig+0x4dc>)
 8004d98:	2201      	movs	r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9c:	f7fd f9ac 	bl	80020f8 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da4:	f7fd f9a8 	bl	80020f8 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e04d      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db6:	4b2a      	ldr	r3, [pc, #168]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x41c>
 8004dc2:	e045      	b.n	8004e50 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc4:	4b27      	ldr	r3, [pc, #156]	; (8004e64 <HAL_RCC_OscConfig+0x4dc>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dca:	f7fd f995 	bl	80020f8 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd2:	f7fd f991 	bl	80020f8 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e036      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de4:	4b1e      	ldr	r3, [pc, #120]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f0      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x44a>
 8004df0:	e02e      	b.n	8004e50 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e029      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004dfe:	4b18      	ldr	r3, [pc, #96]	; (8004e60 <HAL_RCC_OscConfig+0x4d8>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d11c      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d115      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e26:	4013      	ands	r3, r2
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10d      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d106      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40007000 	.word	0x40007000
 8004e60:	40023800 	.word	0x40023800
 8004e64:	42470060 	.word	0x42470060

08004e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e0cc      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e7c:	4b68      	ldr	r3, [pc, #416]	; (8005020 <HAL_RCC_ClockConfig+0x1b8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d90c      	bls.n	8004ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e8a:	4b65      	ldr	r3, [pc, #404]	; (8005020 <HAL_RCC_ClockConfig+0x1b8>)
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e92:	4b63      	ldr	r3, [pc, #396]	; (8005020 <HAL_RCC_ClockConfig+0x1b8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d001      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0b8      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d020      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ebc:	4b59      	ldr	r3, [pc, #356]	; (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	4a58      	ldr	r2, [pc, #352]	; (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ed4:	4b53      	ldr	r3, [pc, #332]	; (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4a52      	ldr	r2, [pc, #328]	; (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ee0:	4b50      	ldr	r3, [pc, #320]	; (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	494d      	ldr	r1, [pc, #308]	; (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d044      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d107      	bne.n	8004f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f06:	4b47      	ldr	r3, [pc, #284]	; (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d119      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e07f      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d003      	beq.n	8004f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d107      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f26:	4b3f      	ldr	r3, [pc, #252]	; (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e06f      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f36:	4b3b      	ldr	r3, [pc, #236]	; (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e067      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f46:	4b37      	ldr	r3, [pc, #220]	; (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f023 0203 	bic.w	r2, r3, #3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	4934      	ldr	r1, [pc, #208]	; (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f58:	f7fd f8ce 	bl	80020f8 <HAL_GetTick>
 8004f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f60:	f7fd f8ca 	bl	80020f8 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e04f      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f76:	4b2b      	ldr	r3, [pc, #172]	; (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 020c 	and.w	r2, r3, #12
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d1eb      	bne.n	8004f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f88:	4b25      	ldr	r3, [pc, #148]	; (8005020 <HAL_RCC_ClockConfig+0x1b8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 030f 	and.w	r3, r3, #15
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d20c      	bcs.n	8004fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f96:	4b22      	ldr	r3, [pc, #136]	; (8005020 <HAL_RCC_ClockConfig+0x1b8>)
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9e:	4b20      	ldr	r3, [pc, #128]	; (8005020 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d001      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e032      	b.n	8005016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d008      	beq.n	8004fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fbc:	4b19      	ldr	r3, [pc, #100]	; (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	4916      	ldr	r1, [pc, #88]	; (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d009      	beq.n	8004fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fda:	4b12      	ldr	r3, [pc, #72]	; (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	490e      	ldr	r1, [pc, #56]	; (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fee:	f000 f821 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	091b      	lsrs	r3, r3, #4
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	4a0a      	ldr	r2, [pc, #40]	; (8005028 <HAL_RCC_ClockConfig+0x1c0>)
 8005000:	5cd3      	ldrb	r3, [r2, r3]
 8005002:	fa21 f303 	lsr.w	r3, r1, r3
 8005006:	4a09      	ldr	r2, [pc, #36]	; (800502c <HAL_RCC_ClockConfig+0x1c4>)
 8005008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800500a:	4b09      	ldr	r3, [pc, #36]	; (8005030 <HAL_RCC_ClockConfig+0x1c8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fd f82e 	bl	8002070 <HAL_InitTick>

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40023c00 	.word	0x40023c00
 8005024:	40023800 	.word	0x40023800
 8005028:	0800aa40 	.word	0x0800aa40
 800502c:	20000000 	.word	0x20000000
 8005030:	20000004 	.word	0x20000004

08005034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	607b      	str	r3, [r7, #4]
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	2300      	movs	r3, #0
 8005044:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800504a:	4b50      	ldr	r3, [pc, #320]	; (800518c <HAL_RCC_GetSysClockFreq+0x158>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b04      	cmp	r3, #4
 8005054:	d007      	beq.n	8005066 <HAL_RCC_GetSysClockFreq+0x32>
 8005056:	2b08      	cmp	r3, #8
 8005058:	d008      	beq.n	800506c <HAL_RCC_GetSysClockFreq+0x38>
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 808d 	bne.w	800517a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005060:	4b4b      	ldr	r3, [pc, #300]	; (8005190 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005062:	60bb      	str	r3, [r7, #8]
       break;
 8005064:	e08c      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005066:	4b4b      	ldr	r3, [pc, #300]	; (8005194 <HAL_RCC_GetSysClockFreq+0x160>)
 8005068:	60bb      	str	r3, [r7, #8]
      break;
 800506a:	e089      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800506c:	4b47      	ldr	r3, [pc, #284]	; (800518c <HAL_RCC_GetSysClockFreq+0x158>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005074:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005076:	4b45      	ldr	r3, [pc, #276]	; (800518c <HAL_RCC_GetSysClockFreq+0x158>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d023      	beq.n	80050ca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005082:	4b42      	ldr	r3, [pc, #264]	; (800518c <HAL_RCC_GetSysClockFreq+0x158>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	f04f 0400 	mov.w	r4, #0
 800508c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	ea03 0501 	and.w	r5, r3, r1
 8005098:	ea04 0602 	and.w	r6, r4, r2
 800509c:	4a3d      	ldr	r2, [pc, #244]	; (8005194 <HAL_RCC_GetSysClockFreq+0x160>)
 800509e:	fb02 f106 	mul.w	r1, r2, r6
 80050a2:	2200      	movs	r2, #0
 80050a4:	fb02 f205 	mul.w	r2, r2, r5
 80050a8:	440a      	add	r2, r1
 80050aa:	493a      	ldr	r1, [pc, #232]	; (8005194 <HAL_RCC_GetSysClockFreq+0x160>)
 80050ac:	fba5 0101 	umull	r0, r1, r5, r1
 80050b0:	1853      	adds	r3, r2, r1
 80050b2:	4619      	mov	r1, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f04f 0400 	mov.w	r4, #0
 80050ba:	461a      	mov	r2, r3
 80050bc:	4623      	mov	r3, r4
 80050be:	f7fb fdc3 	bl	8000c48 <__aeabi_uldivmod>
 80050c2:	4603      	mov	r3, r0
 80050c4:	460c      	mov	r4, r1
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	e049      	b.n	800515e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ca:	4b30      	ldr	r3, [pc, #192]	; (800518c <HAL_RCC_GetSysClockFreq+0x158>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	099b      	lsrs	r3, r3, #6
 80050d0:	f04f 0400 	mov.w	r4, #0
 80050d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	ea03 0501 	and.w	r5, r3, r1
 80050e0:	ea04 0602 	and.w	r6, r4, r2
 80050e4:	4629      	mov	r1, r5
 80050e6:	4632      	mov	r2, r6
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	f04f 0400 	mov.w	r4, #0
 80050f0:	0154      	lsls	r4, r2, #5
 80050f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050f6:	014b      	lsls	r3, r1, #5
 80050f8:	4619      	mov	r1, r3
 80050fa:	4622      	mov	r2, r4
 80050fc:	1b49      	subs	r1, r1, r5
 80050fe:	eb62 0206 	sbc.w	r2, r2, r6
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	f04f 0400 	mov.w	r4, #0
 800510a:	0194      	lsls	r4, r2, #6
 800510c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005110:	018b      	lsls	r3, r1, #6
 8005112:	1a5b      	subs	r3, r3, r1
 8005114:	eb64 0402 	sbc.w	r4, r4, r2
 8005118:	f04f 0100 	mov.w	r1, #0
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	00e2      	lsls	r2, r4, #3
 8005122:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005126:	00d9      	lsls	r1, r3, #3
 8005128:	460b      	mov	r3, r1
 800512a:	4614      	mov	r4, r2
 800512c:	195b      	adds	r3, r3, r5
 800512e:	eb44 0406 	adc.w	r4, r4, r6
 8005132:	f04f 0100 	mov.w	r1, #0
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	02a2      	lsls	r2, r4, #10
 800513c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005140:	0299      	lsls	r1, r3, #10
 8005142:	460b      	mov	r3, r1
 8005144:	4614      	mov	r4, r2
 8005146:	4618      	mov	r0, r3
 8005148:	4621      	mov	r1, r4
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f04f 0400 	mov.w	r4, #0
 8005150:	461a      	mov	r2, r3
 8005152:	4623      	mov	r3, r4
 8005154:	f7fb fd78 	bl	8000c48 <__aeabi_uldivmod>
 8005158:	4603      	mov	r3, r0
 800515a:	460c      	mov	r4, r1
 800515c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800515e:	4b0b      	ldr	r3, [pc, #44]	; (800518c <HAL_RCC_GetSysClockFreq+0x158>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	0c1b      	lsrs	r3, r3, #16
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	3301      	adds	r3, #1
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	fbb2 f3f3 	udiv	r3, r2, r3
 8005176:	60bb      	str	r3, [r7, #8]
      break;
 8005178:	e002      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800517a:	4b05      	ldr	r3, [pc, #20]	; (8005190 <HAL_RCC_GetSysClockFreq+0x15c>)
 800517c:	60bb      	str	r3, [r7, #8]
      break;
 800517e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005180:	68bb      	ldr	r3, [r7, #8]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800518a:	bf00      	nop
 800518c:	40023800 	.word	0x40023800
 8005190:	00f42400 	.word	0x00f42400
 8005194:	00b71b00 	.word	0x00b71b00

08005198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800519c:	4b03      	ldr	r3, [pc, #12]	; (80051ac <HAL_RCC_GetHCLKFreq+0x14>)
 800519e:	681b      	ldr	r3, [r3, #0]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000000 	.word	0x20000000

080051b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051b4:	f7ff fff0 	bl	8005198 <HAL_RCC_GetHCLKFreq>
 80051b8:	4601      	mov	r1, r0
 80051ba:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	0a9b      	lsrs	r3, r3, #10
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	4a03      	ldr	r2, [pc, #12]	; (80051d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051c6:	5cd3      	ldrb	r3, [r2, r3]
 80051c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40023800 	.word	0x40023800
 80051d4:	0800aa50 	.word	0x0800aa50

080051d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051d8:	b084      	sub	sp, #16
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	f107 001c 	add.w	r0, r7, #28
 80051e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d122      	bne.n	8005236 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800521a:	2b01      	cmp	r3, #1
 800521c:	d105      	bne.n	800522a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f001 fa7c 	bl	8006728 <USB_CoreReset>
 8005230:	4603      	mov	r3, r0
 8005232:	73fb      	strb	r3, [r7, #15]
 8005234:	e01a      	b.n	800526c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f001 fa70 	bl	8006728 <USB_CoreReset>
 8005248:	4603      	mov	r3, r0
 800524a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800524c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	639a      	str	r2, [r3, #56]	; 0x38
 800525e:	e005      	b.n	800526c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	2b01      	cmp	r3, #1
 8005270:	d10b      	bne.n	800528a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f043 0206 	orr.w	r2, r3, #6
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f043 0220 	orr.w	r2, r3, #32
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800528a:	7bfb      	ldrb	r3, [r7, #15]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005296:	b004      	add	sp, #16
 8005298:	4770      	bx	lr
	...

0800529c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	4613      	mov	r3, r2
 80052a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d165      	bne.n	800537c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4a41      	ldr	r2, [pc, #260]	; (80053b8 <USB_SetTurnaroundTime+0x11c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d906      	bls.n	80052c6 <USB_SetTurnaroundTime+0x2a>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4a40      	ldr	r2, [pc, #256]	; (80053bc <USB_SetTurnaroundTime+0x120>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d802      	bhi.n	80052c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052c0:	230f      	movs	r3, #15
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	e062      	b.n	800538c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	4a3c      	ldr	r2, [pc, #240]	; (80053bc <USB_SetTurnaroundTime+0x120>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d906      	bls.n	80052dc <USB_SetTurnaroundTime+0x40>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	4a3b      	ldr	r2, [pc, #236]	; (80053c0 <USB_SetTurnaroundTime+0x124>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d802      	bhi.n	80052dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052d6:	230e      	movs	r3, #14
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	e057      	b.n	800538c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4a38      	ldr	r2, [pc, #224]	; (80053c0 <USB_SetTurnaroundTime+0x124>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d906      	bls.n	80052f2 <USB_SetTurnaroundTime+0x56>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4a37      	ldr	r2, [pc, #220]	; (80053c4 <USB_SetTurnaroundTime+0x128>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d802      	bhi.n	80052f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052ec:	230d      	movs	r3, #13
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	e04c      	b.n	800538c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	4a33      	ldr	r2, [pc, #204]	; (80053c4 <USB_SetTurnaroundTime+0x128>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d906      	bls.n	8005308 <USB_SetTurnaroundTime+0x6c>
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	4a32      	ldr	r2, [pc, #200]	; (80053c8 <USB_SetTurnaroundTime+0x12c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d802      	bhi.n	8005308 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005302:	230c      	movs	r3, #12
 8005304:	617b      	str	r3, [r7, #20]
 8005306:	e041      	b.n	800538c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4a2f      	ldr	r2, [pc, #188]	; (80053c8 <USB_SetTurnaroundTime+0x12c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d906      	bls.n	800531e <USB_SetTurnaroundTime+0x82>
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4a2e      	ldr	r2, [pc, #184]	; (80053cc <USB_SetTurnaroundTime+0x130>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d802      	bhi.n	800531e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005318:	230b      	movs	r3, #11
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	e036      	b.n	800538c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	4a2a      	ldr	r2, [pc, #168]	; (80053cc <USB_SetTurnaroundTime+0x130>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d906      	bls.n	8005334 <USB_SetTurnaroundTime+0x98>
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	4a29      	ldr	r2, [pc, #164]	; (80053d0 <USB_SetTurnaroundTime+0x134>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d802      	bhi.n	8005334 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800532e:	230a      	movs	r3, #10
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	e02b      	b.n	800538c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4a26      	ldr	r2, [pc, #152]	; (80053d0 <USB_SetTurnaroundTime+0x134>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d906      	bls.n	800534a <USB_SetTurnaroundTime+0xae>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4a25      	ldr	r2, [pc, #148]	; (80053d4 <USB_SetTurnaroundTime+0x138>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d802      	bhi.n	800534a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005344:	2309      	movs	r3, #9
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e020      	b.n	800538c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4a21      	ldr	r2, [pc, #132]	; (80053d4 <USB_SetTurnaroundTime+0x138>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d906      	bls.n	8005360 <USB_SetTurnaroundTime+0xc4>
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	4a20      	ldr	r2, [pc, #128]	; (80053d8 <USB_SetTurnaroundTime+0x13c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d802      	bhi.n	8005360 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800535a:	2308      	movs	r3, #8
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	e015      	b.n	800538c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4a1d      	ldr	r2, [pc, #116]	; (80053d8 <USB_SetTurnaroundTime+0x13c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d906      	bls.n	8005376 <USB_SetTurnaroundTime+0xda>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4a1c      	ldr	r2, [pc, #112]	; (80053dc <USB_SetTurnaroundTime+0x140>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d802      	bhi.n	8005376 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005370:	2307      	movs	r3, #7
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	e00a      	b.n	800538c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005376:	2306      	movs	r3, #6
 8005378:	617b      	str	r3, [r7, #20]
 800537a:	e007      	b.n	800538c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d102      	bne.n	8005388 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005382:	2309      	movs	r3, #9
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	e001      	b.n	800538c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005388:	2309      	movs	r3, #9
 800538a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	029b      	lsls	r3, r3, #10
 80053a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80053a4:	431a      	orrs	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	371c      	adds	r7, #28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	00d8acbf 	.word	0x00d8acbf
 80053bc:	00e4e1bf 	.word	0x00e4e1bf
 80053c0:	00f423ff 	.word	0x00f423ff
 80053c4:	0106737f 	.word	0x0106737f
 80053c8:	011a499f 	.word	0x011a499f
 80053cc:	01312cff 	.word	0x01312cff
 80053d0:	014ca43f 	.word	0x014ca43f
 80053d4:	016e35ff 	.word	0x016e35ff
 80053d8:	01a6ab1f 	.word	0x01a6ab1f
 80053dc:	01e847ff 	.word	0x01e847ff

080053e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f043 0201 	orr.w	r2, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f023 0201 	bic.w	r2, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d106      	bne.n	8005450 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60da      	str	r2, [r3, #12]
 800544e:	e00b      	b.n	8005468 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	60da      	str	r2, [r3, #12]
 8005462:	e001      	b.n	8005468 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e003      	b.n	8005470 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005468:	2032      	movs	r0, #50	; 0x32
 800546a:	f7fc fe51 	bl	8002110 <HAL_Delay>

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005478:	b084      	sub	sp, #16
 800547a:	b580      	push	{r7, lr}
 800547c:	b086      	sub	sp, #24
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005492:	2300      	movs	r3, #0
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	e009      	b.n	80054ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	3340      	adds	r3, #64	; 0x40
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	2200      	movs	r2, #0
 80054a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	3301      	adds	r3, #1
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	2b0e      	cmp	r3, #14
 80054b0:	d9f2      	bls.n	8005498 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d112      	bne.n	80054de <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	639a      	str	r2, [r3, #56]	; 0x38
 80054dc:	e00b      	b.n	80054f6 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054fc:	461a      	mov	r2, r3
 80054fe:	2300      	movs	r3, #0
 8005500:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005508:	4619      	mov	r1, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005510:	461a      	mov	r2, r3
 8005512:	680b      	ldr	r3, [r1, #0]
 8005514:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005518:	2b01      	cmp	r3, #1
 800551a:	d10c      	bne.n	8005536 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551e:	2b00      	cmp	r3, #0
 8005520:	d104      	bne.n	800552c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005522:	2100      	movs	r1, #0
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f961 	bl	80057ec <USB_SetDevSpeed>
 800552a:	e008      	b.n	800553e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800552c:	2101      	movs	r1, #1
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f95c 	bl	80057ec <USB_SetDevSpeed>
 8005534:	e003      	b.n	800553e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005536:	2103      	movs	r1, #3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f957 	bl	80057ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800553e:	2110      	movs	r1, #16
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f90b 	bl	800575c <USB_FlushTxFifo>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f929 	bl	80057a8 <USB_FlushRxFifo>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005566:	461a      	mov	r2, r3
 8005568:	2300      	movs	r3, #0
 800556a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005572:	461a      	mov	r2, r3
 8005574:	2300      	movs	r3, #0
 8005576:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557e:	461a      	mov	r2, r3
 8005580:	2300      	movs	r3, #0
 8005582:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005584:	2300      	movs	r3, #0
 8005586:	613b      	str	r3, [r7, #16]
 8005588:	e043      	b.n	8005612 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800559c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055a0:	d118      	bne.n	80055d4 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10a      	bne.n	80055be <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b4:	461a      	mov	r2, r3
 80055b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	e013      	b.n	80055e6 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ca:	461a      	mov	r2, r3
 80055cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	e008      	b.n	80055e6 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e0:	461a      	mov	r2, r3
 80055e2:	2300      	movs	r3, #0
 80055e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f2:	461a      	mov	r2, r3
 80055f4:	2300      	movs	r3, #0
 80055f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	461a      	mov	r2, r3
 8005606:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800560a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	3301      	adds	r3, #1
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	429a      	cmp	r2, r3
 8005618:	d3b7      	bcc.n	800558a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800561a:	2300      	movs	r3, #0
 800561c:	613b      	str	r3, [r7, #16]
 800561e:	e043      	b.n	80056a8 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005636:	d118      	bne.n	800566a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10a      	bne.n	8005654 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564a:	461a      	mov	r2, r3
 800564c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	e013      	b.n	800567c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005660:	461a      	mov	r2, r3
 8005662:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	e008      	b.n	800567c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005676:	461a      	mov	r2, r3
 8005678:	2300      	movs	r3, #0
 800567a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005688:	461a      	mov	r2, r3
 800568a:	2300      	movs	r3, #0
 800568c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569a:	461a      	mov	r2, r3
 800569c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	3301      	adds	r3, #1
 80056a6:	613b      	str	r3, [r7, #16]
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d3b7      	bcc.n	8005620 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056c2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d111      	bne.n	80056ee <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d0:	461a      	mov	r2, r3
 80056d2:	4b20      	ldr	r3, [pc, #128]	; (8005754 <USB_DevInit+0x2dc>)
 80056d4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e8:	f043 0303 	orr.w	r3, r3, #3
 80056ec:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d105      	bne.n	800570e <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	f043 0210 	orr.w	r2, r3, #16
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	4b11      	ldr	r3, [pc, #68]	; (8005758 <USB_DevInit+0x2e0>)
 8005714:	4313      	orrs	r3, r2
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800571a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d005      	beq.n	800572c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	f043 0208 	orr.w	r2, r3, #8
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800572c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572e:	2b01      	cmp	r3, #1
 8005730:	d107      	bne.n	8005742 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800573a:	f043 0304 	orr.w	r3, r3, #4
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005742:	7dfb      	ldrb	r3, [r7, #23]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800574e:	b004      	add	sp, #16
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	00800100 	.word	0x00800100
 8005758:	803c3800 	.word	0x803c3800

0800575c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	019b      	lsls	r3, r3, #6
 800576e:	f043 0220 	orr.w	r2, r3, #32
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3301      	adds	r3, #1
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4a09      	ldr	r2, [pc, #36]	; (80057a4 <USB_FlushTxFifo+0x48>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d901      	bls.n	8005788 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e006      	b.n	8005796 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	f003 0320 	and.w	r3, r3, #32
 8005790:	2b20      	cmp	r3, #32
 8005792:	d0f0      	beq.n	8005776 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	00030d40 	.word	0x00030d40

080057a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2210      	movs	r2, #16
 80057b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3301      	adds	r3, #1
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4a09      	ldr	r2, [pc, #36]	; (80057e8 <USB_FlushRxFifo+0x40>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d901      	bls.n	80057cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e006      	b.n	80057da <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	2b10      	cmp	r3, #16
 80057d6:	d0f0      	beq.n	80057ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	00030d40 	.word	0x00030d40

080057ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	68f9      	ldr	r1, [r7, #12]
 8005808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800580c:	4313      	orrs	r3, r2
 800580e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800581e:	b480      	push	{r7}
 8005820:	b087      	sub	sp, #28
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 0306 	and.w	r3, r3, #6
 8005836:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d102      	bne.n	8005844 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800583e:	2300      	movs	r3, #0
 8005840:	75fb      	strb	r3, [r7, #23]
 8005842:	e00a      	b.n	800585a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b02      	cmp	r3, #2
 8005848:	d002      	beq.n	8005850 <USB_GetDevSpeed+0x32>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b06      	cmp	r3, #6
 800584e:	d102      	bne.n	8005856 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005850:	2302      	movs	r3, #2
 8005852:	75fb      	strb	r3, [r7, #23]
 8005854:	e001      	b.n	800585a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005856:	230f      	movs	r3, #15
 8005858:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800585a:	7dfb      	ldrb	r3, [r7, #23]
}
 800585c:	4618      	mov	r0, r3
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	785b      	ldrb	r3, [r3, #1]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d13a      	bne.n	80058fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588a:	69da      	ldr	r2, [r3, #28]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	2101      	movs	r1, #1
 8005896:	fa01 f303 	lsl.w	r3, r1, r3
 800589a:	b29b      	uxth	r3, r3
 800589c:	68f9      	ldr	r1, [r7, #12]
 800589e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058a2:	4313      	orrs	r3, r2
 80058a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d155      	bne.n	8005968 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	78db      	ldrb	r3, [r3, #3]
 80058d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	059b      	lsls	r3, r3, #22
 80058de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058e0:	4313      	orrs	r3, r2
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	0151      	lsls	r1, r2, #5
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	440a      	add	r2, r1
 80058ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	e036      	b.n	8005968 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005900:	69da      	ldr	r2, [r3, #28]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	2101      	movs	r1, #1
 800590c:	fa01 f303 	lsl.w	r3, r1, r3
 8005910:	041b      	lsls	r3, r3, #16
 8005912:	68f9      	ldr	r1, [r7, #12]
 8005914:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005918:	4313      	orrs	r3, r2
 800591a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d11a      	bne.n	8005968 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	78db      	ldrb	r3, [r3, #3]
 800594c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800594e:	430b      	orrs	r3, r1
 8005950:	4313      	orrs	r3, r2
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	0151      	lsls	r1, r2, #5
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	440a      	add	r2, r1
 800595a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800595e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005966:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	785b      	ldrb	r3, [r3, #1]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d135      	bne.n	8005a00 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f003 030f 	and.w	r3, r3, #15
 80059a4:	2101      	movs	r1, #1
 80059a6:	fa01 f303 	lsl.w	r3, r1, r3
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	43db      	mvns	r3, r3
 80059ae:	68f9      	ldr	r1, [r7, #12]
 80059b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059b4:	4013      	ands	r3, r2
 80059b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059be:	69da      	ldr	r2, [r3, #28]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	f003 030f 	and.w	r3, r3, #15
 80059c8:	2101      	movs	r1, #1
 80059ca:	fa01 f303 	lsl.w	r3, r1, r3
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	68f9      	ldr	r1, [r7, #12]
 80059d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059d8:	4013      	ands	r3, r2
 80059da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	0159      	lsls	r1, r3, #5
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	440b      	add	r3, r1
 80059f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f6:	4619      	mov	r1, r3
 80059f8:	4b1f      	ldr	r3, [pc, #124]	; (8005a78 <USB_DeactivateEndpoint+0x100>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	600b      	str	r3, [r1, #0]
 80059fe:	e034      	b.n	8005a6a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	2101      	movs	r1, #1
 8005a12:	fa01 f303 	lsl.w	r3, r1, r3
 8005a16:	041b      	lsls	r3, r3, #16
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a20:	4013      	ands	r3, r2
 8005a22:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	2101      	movs	r1, #1
 8005a36:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3a:	041b      	lsls	r3, r3, #16
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	68f9      	ldr	r1, [r7, #12]
 8005a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a44:	4013      	ands	r3, r2
 8005a46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	0159      	lsls	r1, r3, #5
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	440b      	add	r3, r1
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	4619      	mov	r1, r3
 8005a64:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <USB_DeactivateEndpoint+0x104>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	ec337800 	.word	0xec337800
 8005a7c:	eff37800 	.word	0xeff37800

08005a80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08a      	sub	sp, #40	; 0x28
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	f040 815c 	bne.w	8005d5a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d132      	bne.n	8005b10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	0151      	lsls	r1, r2, #5
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	440a      	add	r2, r1
 8005ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ac8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005acc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b08:	0cdb      	lsrs	r3, r3, #19
 8005b0a:	04db      	lsls	r3, r3, #19
 8005b0c:	6113      	str	r3, [r2, #16]
 8005b0e:	e074      	b.n	8005bfa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2a:	0cdb      	lsrs	r3, r3, #19
 8005b2c:	04db      	lsls	r3, r3, #19
 8005b2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	0151      	lsls	r1, r2, #5
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	440a      	add	r2, r1
 8005b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	6959      	ldr	r1, [r3, #20]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	440b      	add	r3, r1
 8005b6c:	1e59      	subs	r1, r3, #1
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b76:	04d9      	lsls	r1, r3, #19
 8005b78:	4b9d      	ldr	r3, [pc, #628]	; (8005df0 <USB_EPStartXfer+0x370>)
 8005b7a:	400b      	ands	r3, r1
 8005b7c:	69b9      	ldr	r1, [r7, #24]
 8005b7e:	0148      	lsls	r0, r1, #5
 8005b80:	69f9      	ldr	r1, [r7, #28]
 8005b82:	4401      	add	r1, r0
 8005b84:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ba2:	69b9      	ldr	r1, [r7, #24]
 8005ba4:	0148      	lsls	r0, r1, #5
 8005ba6:	69f9      	ldr	r1, [r7, #28]
 8005ba8:	4401      	add	r1, r0
 8005baa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	78db      	ldrb	r3, [r3, #3]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d11f      	bne.n	8005bfa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005bd8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bf8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005bfa:	79fb      	ldrb	r3, [r7, #7]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d14b      	bne.n	8005c98 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d009      	beq.n	8005c1c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c14:	461a      	mov	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	78db      	ldrb	r3, [r3, #3]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d128      	bne.n	8005c76 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d110      	bne.n	8005c56 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	e00f      	b.n	8005c76 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	69fa      	ldr	r2, [r7, #28]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c74:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	0151      	lsls	r1, r2, #5
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	440a      	add	r2, r1
 8005c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	e12f      	b.n	8005ef8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cb6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	78db      	ldrb	r3, [r3, #3]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d015      	beq.n	8005cec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 8117 	beq.w	8005ef8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	2101      	movs	r1, #1
 8005cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce0:	69f9      	ldr	r1, [r7, #28]
 8005ce2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	634b      	str	r3, [r1, #52]	; 0x34
 8005cea:	e105      	b.n	8005ef8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d110      	bne.n	8005d1e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	e00f      	b.n	8005d3e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	0151      	lsls	r1, r2, #5
 8005d30:	69fa      	ldr	r2, [r7, #28]
 8005d32:	440a      	add	r2, r1
 8005d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	68d9      	ldr	r1, [r3, #12]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	781a      	ldrb	r2, [r3, #0]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	b298      	uxth	r0, r3
 8005d4c:	79fb      	ldrb	r3, [r7, #7]
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	4603      	mov	r3, r0
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fa2b 	bl	80061ae <USB_WritePacket>
 8005d58:	e0ce      	b.n	8005ef8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d74:	0cdb      	lsrs	r3, r3, #19
 8005d76:	04db      	lsls	r3, r3, #19
 8005d78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	0151      	lsls	r1, r2, #5
 8005d8c:	69fa      	ldr	r2, [r7, #28]
 8005d8e:	440a      	add	r2, r1
 8005d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d126      	bne.n	8005df4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dbc:	69b9      	ldr	r1, [r7, #24]
 8005dbe:	0148      	lsls	r0, r1, #5
 8005dc0:	69f9      	ldr	r1, [r7, #28]
 8005dc2:	4401      	add	r1, r0
 8005dc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	0151      	lsls	r1, r2, #5
 8005dde:	69fa      	ldr	r2, [r7, #28]
 8005de0:	440a      	add	r2, r1
 8005de2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dea:	6113      	str	r3, [r2, #16]
 8005dec:	e036      	b.n	8005e5c <USB_EPStartXfer+0x3dc>
 8005dee:	bf00      	nop
 8005df0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	695a      	ldr	r2, [r3, #20]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	1e5a      	subs	r2, r3, #1
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	691a      	ldr	r2, [r3, #16]
 8005e18:	8afb      	ldrh	r3, [r7, #22]
 8005e1a:	04d9      	lsls	r1, r3, #19
 8005e1c:	4b39      	ldr	r3, [pc, #228]	; (8005f04 <USB_EPStartXfer+0x484>)
 8005e1e:	400b      	ands	r3, r1
 8005e20:	69b9      	ldr	r1, [r7, #24]
 8005e22:	0148      	lsls	r0, r1, #5
 8005e24:	69f9      	ldr	r1, [r7, #28]
 8005e26:	4401      	add	r1, r0
 8005e28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	8af9      	ldrh	r1, [r7, #22]
 8005e44:	fb01 f303 	mul.w	r3, r1, r3
 8005e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e4c:	69b9      	ldr	r1, [r7, #24]
 8005e4e:	0148      	lsls	r0, r1, #5
 8005e50:	69f9      	ldr	r1, [r7, #28]
 8005e52:	4401      	add	r1, r0
 8005e54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e5c:	79fb      	ldrb	r3, [r7, #7]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d10d      	bne.n	8005e7e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d009      	beq.n	8005e7e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	68d9      	ldr	r1, [r3, #12]
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7a:	460a      	mov	r2, r1
 8005e7c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	78db      	ldrb	r3, [r3, #3]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d128      	bne.n	8005ed8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d110      	bne.n	8005eb8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	e00f      	b.n	8005ed8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	0151      	lsls	r1, r2, #5
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	440a      	add	r2, r1
 8005eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ef6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3720      	adds	r7, #32
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	1ff80000 	.word	0x1ff80000

08005f08 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	4613      	mov	r3, r2
 8005f14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	785b      	ldrb	r3, [r3, #1]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	f040 80cd 	bne.w	80060c4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d132      	bne.n	8005f98 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f90:	0cdb      	lsrs	r3, r3, #19
 8005f92:	04db      	lsls	r3, r3, #19
 8005f94:	6113      	str	r3, [r2, #16]
 8005f96:	e04e      	b.n	8006036 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb2:	0cdb      	lsrs	r3, r3, #19
 8005fb4:	04db      	lsls	r3, r3, #19
 8005fb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fda:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	695a      	ldr	r2, [r3, #20]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d903      	bls.n	8005ff0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	0151      	lsls	r1, r2, #5
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	440a      	add	r2, r1
 8006006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800600e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006026:	6939      	ldr	r1, [r7, #16]
 8006028:	0148      	lsls	r0, r1, #5
 800602a:	6979      	ldr	r1, [r7, #20]
 800602c:	4401      	add	r1, r0
 800602e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006032:	4313      	orrs	r3, r2
 8006034:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006036:	79fb      	ldrb	r3, [r7, #7]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d11e      	bne.n	800607a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d009      	beq.n	8006058 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006050:	461a      	mov	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	440a      	add	r2, r1
 800606e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006072:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	e092      	b.n	80061a0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	440a      	add	r2, r1
 8006090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006094:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006098:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d07e      	beq.n	80061a0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	2101      	movs	r1, #1
 80060b4:	fa01 f303 	lsl.w	r3, r1, r3
 80060b8:	6979      	ldr	r1, [r7, #20]
 80060ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060be:	4313      	orrs	r3, r2
 80060c0:	634b      	str	r3, [r1, #52]	; 0x34
 80060c2:	e06d      	b.n	80061a0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060de:	0cdb      	lsrs	r3, r3, #19
 80060e0:	04db      	lsls	r3, r3, #19
 80060e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006102:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006106:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	0151      	lsls	r1, r2, #5
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	440a      	add	r2, r1
 800612e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006132:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006136:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800614e:	6939      	ldr	r1, [r7, #16]
 8006150:	0148      	lsls	r0, r1, #5
 8006152:	6979      	ldr	r1, [r7, #20]
 8006154:	4401      	add	r1, r0
 8006156:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800615a:	4313      	orrs	r3, r2
 800615c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d10d      	bne.n	8006180 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d009      	beq.n	8006180 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	68d9      	ldr	r1, [r3, #12]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617c:	460a      	mov	r2, r1
 800617e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	0151      	lsls	r1, r2, #5
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	440a      	add	r2, r1
 8006196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800619a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800619e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b089      	sub	sp, #36	; 0x24
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	4611      	mov	r1, r2
 80061ba:	461a      	mov	r2, r3
 80061bc:	460b      	mov	r3, r1
 80061be:	71fb      	strb	r3, [r7, #7]
 80061c0:	4613      	mov	r3, r2
 80061c2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80061cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d11a      	bne.n	800620a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80061d4:	88bb      	ldrh	r3, [r7, #4]
 80061d6:	3303      	adds	r3, #3
 80061d8:	089b      	lsrs	r3, r3, #2
 80061da:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80061dc:	2300      	movs	r3, #0
 80061de:	61bb      	str	r3, [r7, #24]
 80061e0:	e00f      	b.n	8006202 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	031a      	lsls	r2, r3, #12
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ee:	461a      	mov	r2, r3
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	3304      	adds	r3, #4
 80061fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	3301      	adds	r3, #1
 8006200:	61bb      	str	r3, [r7, #24]
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	429a      	cmp	r2, r3
 8006208:	d3eb      	bcc.n	80061e2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3724      	adds	r7, #36	; 0x24
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006218:	b480      	push	{r7}
 800621a:	b089      	sub	sp, #36	; 0x24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	4613      	mov	r3, r2
 8006224:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800622e:	88fb      	ldrh	r3, [r7, #6]
 8006230:	3303      	adds	r3, #3
 8006232:	089b      	lsrs	r3, r3, #2
 8006234:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006236:	2300      	movs	r3, #0
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	e00b      	b.n	8006254 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	601a      	str	r2, [r3, #0]
    pDest++;
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	3304      	adds	r3, #4
 800624c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	3301      	adds	r3, #1
 8006252:	61bb      	str	r3, [r7, #24]
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	429a      	cmp	r2, r3
 800625a:	d3ef      	bcc.n	800623c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800625c:	69fb      	ldr	r3, [r7, #28]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3724      	adds	r7, #36	; 0x24
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	785b      	ldrb	r3, [r3, #1]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d12c      	bne.n	80062e0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	db12      	blt.n	80062be <USB_EPSetStall+0x54>
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00f      	beq.n	80062be <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	0151      	lsls	r1, r2, #5
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	440a      	add	r2, r1
 80062b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062bc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	0151      	lsls	r1, r2, #5
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	440a      	add	r2, r1
 80062d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	e02b      	b.n	8006338 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	db12      	blt.n	8006318 <USB_EPSetStall+0xae>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00f      	beq.n	8006318 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	0151      	lsls	r1, r2, #5
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	440a      	add	r2, r1
 800630e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006312:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006316:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	0151      	lsls	r1, r2, #5
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	440a      	add	r2, r1
 800632e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006332:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006336:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006346:	b480      	push	{r7}
 8006348:	b085      	sub	sp, #20
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	785b      	ldrb	r3, [r3, #1]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d128      	bne.n	80063b4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4413      	add	r3, r2
 800636a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	0151      	lsls	r1, r2, #5
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	440a      	add	r2, r1
 8006378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800637c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006380:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	78db      	ldrb	r3, [r3, #3]
 8006386:	2b03      	cmp	r3, #3
 8006388:	d003      	beq.n	8006392 <USB_EPClearStall+0x4c>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	78db      	ldrb	r3, [r3, #3]
 800638e:	2b02      	cmp	r3, #2
 8006390:	d138      	bne.n	8006404 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	e027      	b.n	8006404 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	0151      	lsls	r1, r2, #5
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	440a      	add	r2, r1
 80063ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	78db      	ldrb	r3, [r3, #3]
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d003      	beq.n	80063e4 <USB_EPClearStall+0x9e>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	78db      	ldrb	r3, [r3, #3]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d10f      	bne.n	8006404 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	0151      	lsls	r1, r2, #5
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	440a      	add	r2, r1
 80063fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006402:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006412:	b480      	push	{r7}
 8006414:	b085      	sub	sp, #20
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006430:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006434:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006446:	68f9      	ldr	r1, [r7, #12]
 8006448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800644c:	4313      	orrs	r3, r2
 800644e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006478:	f023 0302 	bic.w	r3, r3, #2
 800647c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800647e:	2003      	movs	r0, #3
 8006480:	f7fb fe46 	bl	8002110 <HAL_Delay>

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064a8:	f043 0302 	orr.w	r3, r3, #2
 80064ac:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80064ae:	2003      	movs	r0, #3
 80064b0:	f7fb fe2e 	bl	8002110 <HAL_Delay>

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80064be:	b480      	push	{r7}
 80064c0:	b085      	sub	sp, #20
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4013      	ands	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064d6:	68fb      	ldr	r3, [r7, #12]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	4013      	ands	r3, r2
 8006506:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	0c1b      	lsrs	r3, r3, #16
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	4013      	ands	r3, r2
 800653a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	b29b      	uxth	r3, r3
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	4013      	ands	r3, r2
 8006578:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800657a:	68bb      	ldr	r3, [r7, #8]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065aa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	f003 030f 	and.w	r3, r3, #15
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	fa22 f303 	lsr.w	r3, r2, r3
 80065b8:	01db      	lsls	r3, r3, #7
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4313      	orrs	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80065c2:	78fb      	ldrb	r3, [r7, #3]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	4013      	ands	r3, r2
 80065d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065d6:	68bb      	ldr	r3, [r7, #8]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	371c      	adds	r7, #28
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	f003 0301 	and.w	r3, r3, #1
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800661a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800661e:	f023 0307 	bic.w	r3, r3, #7
 8006622:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f003 0306 	and.w	r3, r3, #6
 8006630:	2b04      	cmp	r3, #4
 8006632:	d109      	bne.n	8006648 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006642:	f043 0303 	orr.w	r3, r3, #3
 8006646:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800665a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
	...

0800666c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	460b      	mov	r3, r1
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	333c      	adds	r3, #60	; 0x3c
 8006682:	3304      	adds	r3, #4
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	4a26      	ldr	r2, [pc, #152]	; (8006724 <USB_EP0_OutStart+0xb8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d90a      	bls.n	80066a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800669c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066a0:	d101      	bne.n	80066a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e037      	b.n	8006716 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ac:	461a      	mov	r2, r3
 80066ae:	2300      	movs	r3, #0
 80066b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d4:	f043 0318 	orr.w	r3, r3, #24
 80066d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80066ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80066ee:	7afb      	ldrb	r3, [r7, #11]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d10f      	bne.n	8006714 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fa:	461a      	mov	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800670e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006712:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	371c      	adds	r7, #28
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	4f54300a 	.word	0x4f54300a

08006728 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	3301      	adds	r3, #1
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4a13      	ldr	r2, [pc, #76]	; (800678c <USB_CoreReset+0x64>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d901      	bls.n	8006746 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e01b      	b.n	800677e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	daf2      	bge.n	8006734 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f043 0201 	orr.w	r2, r3, #1
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3301      	adds	r3, #1
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4a09      	ldr	r2, [pc, #36]	; (800678c <USB_CoreReset+0x64>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d901      	bls.n	8006770 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e006      	b.n	800677e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b01      	cmp	r3, #1
 800677a:	d0f0      	beq.n	800675e <USB_CoreReset+0x36>

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	00030d40 	.word	0x00030d40

08006790 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	7c1b      	ldrb	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d115      	bne.n	80067d4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067ac:	2202      	movs	r2, #2
 80067ae:	2181      	movs	r1, #129	; 0x81
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f001 fef4 	bl	800859e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067c0:	2202      	movs	r2, #2
 80067c2:	2101      	movs	r1, #1
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 feea 	bl	800859e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80067d2:	e012      	b.n	80067fa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80067d4:	2340      	movs	r3, #64	; 0x40
 80067d6:	2202      	movs	r2, #2
 80067d8:	2181      	movs	r1, #129	; 0x81
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 fedf 	bl	800859e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80067e6:	2340      	movs	r3, #64	; 0x40
 80067e8:	2202      	movs	r2, #2
 80067ea:	2101      	movs	r1, #1
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 fed6 	bl	800859e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067fa:	2308      	movs	r3, #8
 80067fc:	2203      	movs	r2, #3
 80067fe:	2182      	movs	r1, #130	; 0x82
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 fecc 	bl	800859e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800680c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006810:	f002 f842 	bl	8008898 <malloc>
 8006814:	4603      	mov	r3, r0
 8006816:	461a      	mov	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006824:	2b00      	cmp	r3, #0
 8006826:	d102      	bne.n	800682e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8006828:	2301      	movs	r3, #1
 800682a:	73fb      	strb	r3, [r7, #15]
 800682c:	e026      	b.n	800687c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006834:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2200      	movs	r2, #0
 8006844:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	7c1b      	ldrb	r3, [r3, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d109      	bne.n	800686c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800685e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006862:	2101      	movs	r1, #1
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f001 ff8b 	bl	8008780 <USBD_LL_PrepareReceive>
 800686a:	e007      	b.n	800687c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006872:	2340      	movs	r3, #64	; 0x40
 8006874:	2101      	movs	r1, #1
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 ff82 	bl	8008780 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800687c:	7bfb      	ldrb	r3, [r7, #15]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	460b      	mov	r3, r1
 8006890:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006896:	2181      	movs	r1, #129	; 0x81
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 fea6 	bl	80085ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80068a4:	2101      	movs	r1, #1
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f001 fe9f 	bl	80085ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80068b4:	2182      	movs	r1, #130	; 0x82
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 fe97 	bl	80085ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00e      	beq.n	80068ea <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068dc:	4618      	mov	r0, r3
 80068de:	f001 ffe3 	bl	80088a8 <free>
    pdev->pClassData = NULL;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006904:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800691a:	2b00      	cmp	r3, #0
 800691c:	d039      	beq.n	8006992 <USBD_CDC_Setup+0x9e>
 800691e:	2b20      	cmp	r3, #32
 8006920:	d17c      	bne.n	8006a1c <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	88db      	ldrh	r3, [r3, #6]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d029      	beq.n	800697e <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	b25b      	sxtb	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	da11      	bge.n	8006958 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006940:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	88d2      	ldrh	r2, [r2, #6]
 8006946:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006948:	6939      	ldr	r1, [r7, #16]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	88db      	ldrh	r3, [r3, #6]
 800694e:	461a      	mov	r2, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 f9c9 	bl	8007ce8 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006956:	e068      	b.n	8006a2a <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	785a      	ldrb	r2, [r3, #1]
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	88db      	ldrh	r3, [r3, #6]
 8006966:	b2da      	uxtb	r2, r3
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800696e:	6939      	ldr	r1, [r7, #16]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	88db      	ldrh	r3, [r3, #6]
 8006974:	461a      	mov	r2, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f001 f9e4 	bl	8007d44 <USBD_CtlPrepareRx>
    break;
 800697c:	e055      	b.n	8006a2a <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	7850      	ldrb	r0, [r2, #1]
 800698a:	2200      	movs	r2, #0
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	4798      	blx	r3
    break;
 8006990:	e04b      	b.n	8006a2a <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	785b      	ldrb	r3, [r3, #1]
 8006996:	2b0a      	cmp	r3, #10
 8006998:	d017      	beq.n	80069ca <USBD_CDC_Setup+0xd6>
 800699a:	2b0b      	cmp	r3, #11
 800699c:	d029      	beq.n	80069f2 <USBD_CDC_Setup+0xfe>
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d133      	bne.n	8006a0a <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d107      	bne.n	80069bc <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80069ac:	f107 030c 	add.w	r3, r7, #12
 80069b0:	2202      	movs	r2, #2
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 f997 	bl	8007ce8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80069ba:	e02e      	b.n	8006a1a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 f927 	bl	8007c12 <USBD_CtlError>
			  ret = USBD_FAIL;
 80069c4:	2302      	movs	r3, #2
 80069c6:	75fb      	strb	r3, [r7, #23]
      break;
 80069c8:	e027      	b.n	8006a1a <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d107      	bne.n	80069e4 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80069d4:	f107 030f 	add.w	r3, r7, #15
 80069d8:	2201      	movs	r2, #1
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 f983 	bl	8007ce8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80069e2:	e01a      	b.n	8006a1a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 f913 	bl	8007c12 <USBD_CtlError>
			  ret = USBD_FAIL;
 80069ec:	2302      	movs	r3, #2
 80069ee:	75fb      	strb	r3, [r7, #23]
      break;
 80069f0:	e013      	b.n	8006a1a <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d00d      	beq.n	8006a18 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80069fc:	6839      	ldr	r1, [r7, #0]
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f001 f907 	bl	8007c12 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006a04:	2302      	movs	r3, #2
 8006a06:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006a08:	e006      	b.n	8006a18 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f001 f900 	bl	8007c12 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a12:	2302      	movs	r3, #2
 8006a14:	75fb      	strb	r3, [r7, #23]
      break;
 8006a16:	e000      	b.n	8006a1a <USBD_CDC_Setup+0x126>
      break;
 8006a18:	bf00      	nop
    }
    break;
 8006a1a:	e006      	b.n	8006a2a <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 f8f7 	bl	8007c12 <USBD_CtlError>
    ret = USBD_FAIL;
 8006a24:	2302      	movs	r3, #2
 8006a26:	75fb      	strb	r3, [r7, #23]
    break;
 8006a28:	bf00      	nop
  }

  return ret;
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a46:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006a4e:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d03a      	beq.n	8006ad0 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006a5a:	78fa      	ldrb	r2, [r7, #3]
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	331c      	adds	r3, #28
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d029      	beq.n	8006ac4 <USBD_CDC_DataIn+0x90>
 8006a70:	78fa      	ldrb	r2, [r7, #3]
 8006a72:	6879      	ldr	r1, [r7, #4]
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	440b      	add	r3, r1
 8006a7e:	331c      	adds	r3, #28
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	78f9      	ldrb	r1, [r7, #3]
 8006a84:	68b8      	ldr	r0, [r7, #8]
 8006a86:	460b      	mov	r3, r1
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	1a5b      	subs	r3, r3, r1
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4403      	add	r3, r0
 8006a90:	3344      	adds	r3, #68	; 0x44
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a98:	fb03 f301 	mul.w	r3, r3, r1
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d110      	bne.n	8006ac4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006aa2:	78fa      	ldrb	r2, [r7, #3]
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	440b      	add	r3, r1
 8006ab0:	331c      	adds	r3, #28
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006ab6:	78f9      	ldrb	r1, [r7, #3]
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2200      	movs	r2, #0
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 fe3c 	bl	800873a <USBD_LL_Transmit>
 8006ac2:	e003      	b.n	8006acc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	e000      	b.n	8006ad2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006ad0:	2302      	movs	r3, #2
  }
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006aee:	78fb      	ldrb	r3, [r7, #3]
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 fe67 	bl	80087c6 <USBD_LL_GetRxDataSize>
 8006af8:	4602      	mov	r2, r0
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00d      	beq.n	8006b26 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b1e:	4611      	mov	r1, r2
 8006b20:	4798      	blx	r3

    return USBD_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	e000      	b.n	8006b28 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006b26:	2302      	movs	r3, #2
  }
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b3e:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d015      	beq.n	8006b76 <USBD_CDC_EP0_RxReady+0x46>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b50:	2bff      	cmp	r3, #255	; 0xff
 8006b52:	d010      	beq.n	8006b76 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006b62:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b6a:	b292      	uxth	r2, r2
 8006b6c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	22ff      	movs	r2, #255	; 0xff
 8006b72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2243      	movs	r2, #67	; 0x43
 8006b8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006b8e:	4b03      	ldr	r3, [pc, #12]	; (8006b9c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	20000094 	.word	0x20000094

08006ba0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2243      	movs	r2, #67	; 0x43
 8006bac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006bae:	4b03      	ldr	r3, [pc, #12]	; (8006bbc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	20000050 	.word	0x20000050

08006bc0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2243      	movs	r2, #67	; 0x43
 8006bcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006bce:	4b03      	ldr	r3, [pc, #12]	; (8006bdc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	200000d8 	.word	0x200000d8

08006be0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	220a      	movs	r2, #10
 8006bec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006bee:	4b03      	ldr	r3, [pc, #12]	; (8006bfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	2000000c 	.word	0x2000000c

08006c00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b087      	sub	sp, #28
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c42:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006c4c:	88fa      	ldrh	r2, [r7, #6]
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	371c      	adds	r7, #28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b085      	sub	sp, #20
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c72:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c98:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d01c      	beq.n	8006cde <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d115      	bne.n	8006cda <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2181      	movs	r1, #129	; 0x81
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 fd32 	bl	800873a <USBD_LL_Transmit>

      return USBD_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e002      	b.n	8006ce0 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e000      	b.n	8006ce0 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006cde:	2302      	movs	r3, #2
  }
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d017      	beq.n	8006d32 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	7c1b      	ldrb	r3, [r3, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d109      	bne.n	8006d1e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d14:	2101      	movs	r1, #1
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f001 fd32 	bl	8008780 <USBD_LL_PrepareReceive>
 8006d1c:	e007      	b.n	8006d2e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d24:	2340      	movs	r3, #64	; 0x40
 8006d26:	2101      	movs	r1, #1
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 fd29 	bl	8008780 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	e000      	b.n	8006d34 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006d32:	2302      	movs	r3, #2
  }
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	4613      	mov	r3, r2
 8006d48:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d50:	2302      	movs	r3, #2
 8006d52:	e01a      	b.n	8006d8a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	79fa      	ldrb	r2, [r7, #7]
 8006d80:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f001 fba4 	bl	80084d0 <USBD_LL_Init>

  return USBD_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b085      	sub	sp, #20
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d006      	beq.n	8006db4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]
 8006db2:	e001      	b.n	8006db8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006db4:	2302      	movs	r3, #2
 8006db6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b082      	sub	sp, #8
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 fbca 	bl	8008568 <USBD_LL_Start>

  return USBD_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006e00:	2302      	movs	r3, #2
 8006e02:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00c      	beq.n	8006e28 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	78fa      	ldrb	r2, [r7, #3]
 8006e18:	4611      	mov	r1, r2
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	4798      	blx	r3
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	78fa      	ldrb	r2, [r7, #3]
 8006e48:	4611      	mov	r1, r2
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	4798      	blx	r3
  return USBD_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fe94 	bl	8007b98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006e7e:	461a      	mov	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006e8c:	f003 031f 	and.w	r3, r3, #31
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d00c      	beq.n	8006eae <USBD_LL_SetupStage+0x56>
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d302      	bcc.n	8006e9e <USBD_LL_SetupStage+0x46>
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d010      	beq.n	8006ebe <USBD_LL_SetupStage+0x66>
 8006e9c:	e017      	b.n	8006ece <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fa04 	bl	80072b4 <USBD_StdDevReq>
    break;
 8006eac:	e01a      	b.n	8006ee4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fa66 	bl	8007388 <USBD_StdItfReq>
    break;
 8006ebc:	e012      	b.n	8006ee4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 faa4 	bl	8007414 <USBD_StdEPReq>
    break;
 8006ecc:	e00a      	b.n	8006ee4 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006ed4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	4619      	mov	r1, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 fba3 	bl	8008628 <USBD_LL_StallEP>
    break;
 8006ee2:	bf00      	nop
  }

  return USBD_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b086      	sub	sp, #24
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	60f8      	str	r0, [r7, #12]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	607a      	str	r2, [r7, #4]
 8006efa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006efc:	7afb      	ldrb	r3, [r7, #11]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d14b      	bne.n	8006f9a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006f08:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d134      	bne.n	8006f7e <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d919      	bls.n	8006f54 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	68da      	ldr	r2, [r3, #12]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	1ad2      	subs	r2, r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d203      	bcs.n	8006f42 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	e002      	b.n	8006f48 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 ff17 	bl	8007d80 <USBD_CtlContinueRx>
 8006f52:	e038      	b.n	8006fc6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00a      	beq.n	8006f76 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d105      	bne.n	8006f76 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 ff14 	bl	8007da4 <USBD_CtlSendStatus>
 8006f7c:	e023      	b.n	8006fc6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006f84:	2b05      	cmp	r3, #5
 8006f86:	d11e      	bne.n	8006fc6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006f90:	2100      	movs	r1, #0
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f001 fb48 	bl	8008628 <USBD_LL_StallEP>
 8006f98:	e015      	b.n	8006fc6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00d      	beq.n	8006fc2 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d108      	bne.n	8006fc2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	7afa      	ldrb	r2, [r7, #11]
 8006fba:	4611      	mov	r1, r2
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	4798      	blx	r3
 8006fc0:	e001      	b.n	8006fc6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e000      	b.n	8006fc8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006fde:	7afb      	ldrb	r3, [r7, #11]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d17f      	bne.n	80070e4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3314      	adds	r3, #20
 8006fe8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d15c      	bne.n	80070ae <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d915      	bls.n	800702c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	68da      	ldr	r2, [r3, #12]
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	1ad2      	subs	r2, r2, r3
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	b29b      	uxth	r3, r3
 8007014:	461a      	mov	r2, r3
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 fe81 	bl	8007d20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800701e:	2300      	movs	r3, #0
 8007020:	2200      	movs	r2, #0
 8007022:	2100      	movs	r1, #0
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f001 fbab 	bl	8008780 <USBD_LL_PrepareReceive>
 800702a:	e04e      	b.n	80070ca <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	6912      	ldr	r2, [r2, #16]
 8007034:	fbb3 f1f2 	udiv	r1, r3, r2
 8007038:	fb02 f201 	mul.w	r2, r2, r1
 800703c:	1a9b      	subs	r3, r3, r2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d11c      	bne.n	800707c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	689a      	ldr	r2, [r3, #8]
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800704a:	429a      	cmp	r2, r3
 800704c:	d316      	bcc.n	800707c <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8007058:	429a      	cmp	r2, r3
 800705a:	d20f      	bcs.n	800707c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800705c:	2200      	movs	r2, #0
 800705e:	2100      	movs	r1, #0
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 fe5d 	bl	8007d20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800706e:	2300      	movs	r3, #0
 8007070:	2200      	movs	r2, #0
 8007072:	2100      	movs	r1, #0
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f001 fb83 	bl	8008780 <USBD_LL_PrepareReceive>
 800707a:	e026      	b.n	80070ca <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00a      	beq.n	800709e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800708e:	2b03      	cmp	r3, #3
 8007090:	d105      	bne.n	800709e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800709e:	2180      	movs	r1, #128	; 0x80
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f001 fac1 	bl	8008628 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 fe8f 	bl	8007dca <USBD_CtlReceiveStatus>
 80070ac:	e00d      	b.n	80070ca <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d004      	beq.n	80070c2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d103      	bne.n	80070ca <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80070c2:	2180      	movs	r1, #128	; 0x80
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f001 faaf 	bl	8008628 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d11d      	bne.n	8007110 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f7ff fe82 	bl	8006dde <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80070e2:	e015      	b.n	8007110 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00d      	beq.n	800710c <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d108      	bne.n	800710c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	7afa      	ldrb	r2, [r7, #11]
 8007104:	4611      	mov	r1, r2
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	4798      	blx	r3
 800710a:	e001      	b.n	8007110 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800710c:	2302      	movs	r3, #2
 800710e:	e000      	b.n	8007112 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007122:	2340      	movs	r3, #64	; 0x40
 8007124:	2200      	movs	r2, #0
 8007126:	2100      	movs	r1, #0
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 fa38 	bl	800859e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2240      	movs	r2, #64	; 0x40
 800713a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800713e:	2340      	movs	r3, #64	; 0x40
 8007140:	2200      	movs	r2, #0
 8007142:	2180      	movs	r1, #128	; 0x80
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 fa2a 	bl	800859e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2240      	movs	r2, #64	; 0x40
 8007154:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800717a:	2b00      	cmp	r3, #0
 800717c:	d009      	beq.n	8007192 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6852      	ldr	r2, [r2, #4]
 800718a:	b2d2      	uxtb	r2, r2
 800718c:	4611      	mov	r1, r2
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
  }

  return USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	78fa      	ldrb	r2, [r7, #3]
 80071ac:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2204      	movs	r2, #4
 80071d4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007216:	2b03      	cmp	r3, #3
 8007218:	d10b      	bne.n	8007232 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d005      	beq.n	8007232 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	460b      	mov	r3, r1
 8007260:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b082      	sub	sp, #8
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	6852      	ldr	r2, [r2, #4]
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	4611      	mov	r1, r2
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3

  return USBD_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ca:	2b20      	cmp	r3, #32
 80072cc:	d004      	beq.n	80072d8 <USBD_StdDevReq+0x24>
 80072ce:	2b40      	cmp	r3, #64	; 0x40
 80072d0:	d002      	beq.n	80072d8 <USBD_StdDevReq+0x24>
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d008      	beq.n	80072e8 <USBD_StdDevReq+0x34>
 80072d6:	e04c      	b.n	8007372 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	4798      	blx	r3
    break;
 80072e6:	e049      	b.n	800737c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	785b      	ldrb	r3, [r3, #1]
 80072ec:	2b09      	cmp	r3, #9
 80072ee:	d83a      	bhi.n	8007366 <USBD_StdDevReq+0xb2>
 80072f0:	a201      	add	r2, pc, #4	; (adr r2, 80072f8 <USBD_StdDevReq+0x44>)
 80072f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f6:	bf00      	nop
 80072f8:	08007349 	.word	0x08007349
 80072fc:	0800735d 	.word	0x0800735d
 8007300:	08007367 	.word	0x08007367
 8007304:	08007353 	.word	0x08007353
 8007308:	08007367 	.word	0x08007367
 800730c:	0800732b 	.word	0x0800732b
 8007310:	08007321 	.word	0x08007321
 8007314:	08007367 	.word	0x08007367
 8007318:	0800733f 	.word	0x0800733f
 800731c:	08007335 	.word	0x08007335
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f9d2 	bl	80076cc <USBD_GetDescriptor>
      break;
 8007328:	e022      	b.n	8007370 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fac7 	bl	80078c0 <USBD_SetAddress>
      break;
 8007332:	e01d      	b.n	8007370 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fb04 	bl	8007944 <USBD_SetConfig>
      break;
 800733c:	e018      	b.n	8007370 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fb8d 	bl	8007a60 <USBD_GetConfig>
      break;
 8007346:	e013      	b.n	8007370 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fbbc 	bl	8007ac8 <USBD_GetStatus>
      break;
 8007350:	e00e      	b.n	8007370 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fbea 	bl	8007b2e <USBD_SetFeature>
      break;
 800735a:	e009      	b.n	8007370 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fbf9 	bl	8007b56 <USBD_ClrFeature>
      break;
 8007364:	e004      	b.n	8007370 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fc52 	bl	8007c12 <USBD_CtlError>
      break;
 800736e:	bf00      	nop
    }
    break;
 8007370:	e004      	b.n	800737c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fc4c 	bl	8007c12 <USBD_CtlError>
    break;
 800737a:	bf00      	nop
  }

  return ret;
 800737c:	7bfb      	ldrb	r3, [r7, #15]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop

08007388 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800739e:	2b20      	cmp	r3, #32
 80073a0:	d003      	beq.n	80073aa <USBD_StdItfReq+0x22>
 80073a2:	2b40      	cmp	r3, #64	; 0x40
 80073a4:	d001      	beq.n	80073aa <USBD_StdItfReq+0x22>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d12a      	bne.n	8007400 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80073b0:	3b01      	subs	r3, #1
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d81d      	bhi.n	80073f2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	889b      	ldrh	r3, [r3, #4]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d813      	bhi.n	80073e8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	4798      	blx	r3
 80073ce:	4603      	mov	r3, r0
 80073d0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	88db      	ldrh	r3, [r3, #6]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d110      	bne.n	80073fc <USBD_StdItfReq+0x74>
 80073da:	7bfb      	ldrb	r3, [r7, #15]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10d      	bne.n	80073fc <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fcdf 	bl	8007da4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80073e6:	e009      	b.n	80073fc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fc11 	bl	8007c12 <USBD_CtlError>
      break;
 80073f0:	e004      	b.n	80073fc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fc0c 	bl	8007c12 <USBD_CtlError>
      break;
 80073fa:	e000      	b.n	80073fe <USBD_StdItfReq+0x76>
      break;
 80073fc:	bf00      	nop
    }
    break;
 80073fe:	e004      	b.n	800740a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fc05 	bl	8007c12 <USBD_CtlError>
    break;
 8007408:	bf00      	nop
  }

  return USBD_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	889b      	ldrh	r3, [r3, #4]
 8007426:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007430:	2b20      	cmp	r3, #32
 8007432:	d004      	beq.n	800743e <USBD_StdEPReq+0x2a>
 8007434:	2b40      	cmp	r3, #64	; 0x40
 8007436:	d002      	beq.n	800743e <USBD_StdEPReq+0x2a>
 8007438:	2b00      	cmp	r3, #0
 800743a:	d008      	beq.n	800744e <USBD_StdEPReq+0x3a>
 800743c:	e13b      	b.n	80076b6 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	4798      	blx	r3
    break;
 800744c:	e138      	b.n	80076c0 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007456:	2b20      	cmp	r3, #32
 8007458:	d10a      	bne.n	8007470 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	4798      	blx	r3
 8007468:	4603      	mov	r3, r0
 800746a:	73fb      	strb	r3, [r7, #15]

      return ret;
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	e128      	b.n	80076c2 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	785b      	ldrb	r3, [r3, #1]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d03e      	beq.n	80074f6 <USBD_StdEPReq+0xe2>
 8007478:	2b03      	cmp	r3, #3
 800747a:	d002      	beq.n	8007482 <USBD_StdEPReq+0x6e>
 800747c:	2b00      	cmp	r3, #0
 800747e:	d070      	beq.n	8007562 <USBD_StdEPReq+0x14e>
 8007480:	e113      	b.n	80076aa <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007488:	2b02      	cmp	r3, #2
 800748a:	d002      	beq.n	8007492 <USBD_StdEPReq+0x7e>
 800748c:	2b03      	cmp	r3, #3
 800748e:	d015      	beq.n	80074bc <USBD_StdEPReq+0xa8>
 8007490:	e02b      	b.n	80074ea <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00c      	beq.n	80074b2 <USBD_StdEPReq+0x9e>
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	2b80      	cmp	r3, #128	; 0x80
 800749c:	d009      	beq.n	80074b2 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f001 f8c0 	bl	8008628 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80074a8:	2180      	movs	r1, #128	; 0x80
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 f8bc 	bl	8008628 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80074b0:	e020      	b.n	80074f4 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fbac 	bl	8007c12 <USBD_CtlError>
        break;
 80074ba:	e01b      	b.n	80074f4 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	885b      	ldrh	r3, [r3, #2]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10e      	bne.n	80074e2 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00b      	beq.n	80074e2 <USBD_StdEPReq+0xce>
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	2b80      	cmp	r3, #128	; 0x80
 80074ce:	d008      	beq.n	80074e2 <USBD_StdEPReq+0xce>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	88db      	ldrh	r3, [r3, #6]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d104      	bne.n	80074e2 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f001 f8a3 	bl	8008628 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fc5e 	bl	8007da4 <USBD_CtlSendStatus>

        break;
 80074e8:	e004      	b.n	80074f4 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fb90 	bl	8007c12 <USBD_CtlError>
        break;
 80074f2:	bf00      	nop
      }
      break;
 80074f4:	e0de      	b.n	80076b4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d002      	beq.n	8007506 <USBD_StdEPReq+0xf2>
 8007500:	2b03      	cmp	r3, #3
 8007502:	d015      	beq.n	8007530 <USBD_StdEPReq+0x11c>
 8007504:	e026      	b.n	8007554 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007506:	7bbb      	ldrb	r3, [r7, #14]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00c      	beq.n	8007526 <USBD_StdEPReq+0x112>
 800750c:	7bbb      	ldrb	r3, [r7, #14]
 800750e:	2b80      	cmp	r3, #128	; 0x80
 8007510:	d009      	beq.n	8007526 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f001 f886 	bl	8008628 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800751c:	2180      	movs	r1, #128	; 0x80
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 f882 	bl	8008628 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007524:	e01c      	b.n	8007560 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fb72 	bl	8007c12 <USBD_CtlError>
        break;
 800752e:	e017      	b.n	8007560 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	885b      	ldrh	r3, [r3, #2]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d112      	bne.n	800755e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800753e:	2b00      	cmp	r3, #0
 8007540:	d004      	beq.n	800754c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f001 f88d 	bl	8008666 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fc29 	bl	8007da4 <USBD_CtlSendStatus>
        }
        break;
 8007552:	e004      	b.n	800755e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fb5b 	bl	8007c12 <USBD_CtlError>
        break;
 800755c:	e000      	b.n	8007560 <USBD_StdEPReq+0x14c>
        break;
 800755e:	bf00      	nop
      }
      break;
 8007560:	e0a8      	b.n	80076b4 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007568:	2b02      	cmp	r3, #2
 800756a:	d002      	beq.n	8007572 <USBD_StdEPReq+0x15e>
 800756c:	2b03      	cmp	r3, #3
 800756e:	d031      	beq.n	80075d4 <USBD_StdEPReq+0x1c0>
 8007570:	e095      	b.n	800769e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d007      	beq.n	8007588 <USBD_StdEPReq+0x174>
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	2b80      	cmp	r3, #128	; 0x80
 800757c:	d004      	beq.n	8007588 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fb46 	bl	8007c12 <USBD_CtlError>
          break;
 8007586:	e08f      	b.n	80076a8 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800758c:	2b00      	cmp	r3, #0
 800758e:	da0b      	bge.n	80075a8 <USBD_StdEPReq+0x194>
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007596:	4613      	mov	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	3310      	adds	r3, #16
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	4413      	add	r3, r2
 80075a4:	3304      	adds	r3, #4
 80075a6:	e00a      	b.n	80075be <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
 80075aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	4413      	add	r3, r2
 80075be:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2200      	movs	r2, #0
 80075c4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2202      	movs	r2, #2
 80075ca:	4619      	mov	r1, r3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fb8b 	bl	8007ce8 <USBD_CtlSendData>
          break;
 80075d2:	e069      	b.n	80076a8 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80075d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	da11      	bge.n	8007600 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075dc:	7bbb      	ldrb	r3, [r7, #14]
 80075de:	f003 020f 	and.w	r2, r3, #15
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	440b      	add	r3, r1
 80075ee:	3318      	adds	r3, #24
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d117      	bne.n	8007626 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fb0a 	bl	8007c12 <USBD_CtlError>
            break;
 80075fe:	e053      	b.n	80076a8 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	f003 020f 	and.w	r2, r3, #15
 8007606:	6879      	ldr	r1, [r7, #4]
 8007608:	4613      	mov	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	440b      	add	r3, r1
 8007612:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d104      	bne.n	8007626 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 faf7 	bl	8007c12 <USBD_CtlError>
            break;
 8007624:	e040      	b.n	80076a8 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007626:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800762a:	2b00      	cmp	r3, #0
 800762c:	da0b      	bge.n	8007646 <USBD_StdEPReq+0x232>
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007634:	4613      	mov	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	3310      	adds	r3, #16
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	4413      	add	r3, r2
 8007642:	3304      	adds	r3, #4
 8007644:	e00a      	b.n	800765c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800764c:	4613      	mov	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	4413      	add	r3, r2
 800765c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800765e:	7bbb      	ldrb	r3, [r7, #14]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <USBD_StdEPReq+0x256>
 8007664:	7bbb      	ldrb	r3, [r7, #14]
 8007666:	2b80      	cmp	r3, #128	; 0x80
 8007668:	d103      	bne.n	8007672 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2200      	movs	r2, #0
 800766e:	601a      	str	r2, [r3, #0]
 8007670:	e00e      	b.n	8007690 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f001 f814 	bl	80086a4 <USBD_LL_IsStallEP>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2201      	movs	r2, #1
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	e002      	b.n	8007690 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2202      	movs	r2, #2
 8007694:	4619      	mov	r1, r3
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fb26 	bl	8007ce8 <USBD_CtlSendData>
          break;
 800769c:	e004      	b.n	80076a8 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fab6 	bl	8007c12 <USBD_CtlError>
        break;
 80076a6:	bf00      	nop
      }
      break;
 80076a8:	e004      	b.n	80076b4 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fab0 	bl	8007c12 <USBD_CtlError>
      break;
 80076b2:	bf00      	nop
    }
    break;
 80076b4:	e004      	b.n	80076c0 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 faaa 	bl	8007c12 <USBD_CtlError>
    break;
 80076be:	bf00      	nop
  }

  return ret;
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
	...

080076cc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	885b      	ldrh	r3, [r3, #2]
 80076da:	0a1b      	lsrs	r3, r3, #8
 80076dc:	b29b      	uxth	r3, r3
 80076de:	3b01      	subs	r3, #1
 80076e0:	2b06      	cmp	r3, #6
 80076e2:	f200 80c9 	bhi.w	8007878 <USBD_GetDescriptor+0x1ac>
 80076e6:	a201      	add	r2, pc, #4	; (adr r2, 80076ec <USBD_GetDescriptor+0x20>)
 80076e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ec:	08007709 	.word	0x08007709
 80076f0:	08007721 	.word	0x08007721
 80076f4:	08007761 	.word	0x08007761
 80076f8:	08007879 	.word	0x08007879
 80076fc:	08007879 	.word	0x08007879
 8007700:	08007825 	.word	0x08007825
 8007704:	0800784b 	.word	0x0800784b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	7c12      	ldrb	r2, [r2, #16]
 8007714:	f107 010a 	add.w	r1, r7, #10
 8007718:	4610      	mov	r0, r2
 800771a:	4798      	blx	r3
 800771c:	60f8      	str	r0, [r7, #12]
    break;
 800771e:	e0b0      	b.n	8007882 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	7c1b      	ldrb	r3, [r3, #16]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10d      	bne.n	8007744 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800772e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007730:	f107 020a 	add.w	r2, r7, #10
 8007734:	4610      	mov	r0, r2
 8007736:	4798      	blx	r3
 8007738:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3301      	adds	r3, #1
 800773e:	2202      	movs	r2, #2
 8007740:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007742:	e09e      	b.n	8007882 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	f107 020a 	add.w	r2, r7, #10
 8007750:	4610      	mov	r0, r2
 8007752:	4798      	blx	r3
 8007754:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3301      	adds	r3, #1
 800775a:	2202      	movs	r2, #2
 800775c:	701a      	strb	r2, [r3, #0]
    break;
 800775e:	e090      	b.n	8007882 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	885b      	ldrh	r3, [r3, #2]
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b05      	cmp	r3, #5
 8007768:	d856      	bhi.n	8007818 <USBD_GetDescriptor+0x14c>
 800776a:	a201      	add	r2, pc, #4	; (adr r2, 8007770 <USBD_GetDescriptor+0xa4>)
 800776c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007770:	08007789 	.word	0x08007789
 8007774:	080077a1 	.word	0x080077a1
 8007778:	080077b9 	.word	0x080077b9
 800777c:	080077d1 	.word	0x080077d1
 8007780:	080077e9 	.word	0x080077e9
 8007784:	08007801 	.word	0x08007801
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	7c12      	ldrb	r2, [r2, #16]
 8007794:	f107 010a 	add.w	r1, r7, #10
 8007798:	4610      	mov	r0, r2
 800779a:	4798      	blx	r3
 800779c:	60f8      	str	r0, [r7, #12]
      break;
 800779e:	e040      	b.n	8007822 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	7c12      	ldrb	r2, [r2, #16]
 80077ac:	f107 010a 	add.w	r1, r7, #10
 80077b0:	4610      	mov	r0, r2
 80077b2:	4798      	blx	r3
 80077b4:	60f8      	str	r0, [r7, #12]
      break;
 80077b6:	e034      	b.n	8007822 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	7c12      	ldrb	r2, [r2, #16]
 80077c4:	f107 010a 	add.w	r1, r7, #10
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
 80077cc:	60f8      	str	r0, [r7, #12]
      break;
 80077ce:	e028      	b.n	8007822 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	7c12      	ldrb	r2, [r2, #16]
 80077dc:	f107 010a 	add.w	r1, r7, #10
 80077e0:	4610      	mov	r0, r2
 80077e2:	4798      	blx	r3
 80077e4:	60f8      	str	r0, [r7, #12]
      break;
 80077e6:	e01c      	b.n	8007822 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	7c12      	ldrb	r2, [r2, #16]
 80077f4:	f107 010a 	add.w	r1, r7, #10
 80077f8:	4610      	mov	r0, r2
 80077fa:	4798      	blx	r3
 80077fc:	60f8      	str	r0, [r7, #12]
      break;
 80077fe:	e010      	b.n	8007822 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	7c12      	ldrb	r2, [r2, #16]
 800780c:	f107 010a 	add.w	r1, r7, #10
 8007810:	4610      	mov	r0, r2
 8007812:	4798      	blx	r3
 8007814:	60f8      	str	r0, [r7, #12]
      break;
 8007816:	e004      	b.n	8007822 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f9f9 	bl	8007c12 <USBD_CtlError>
      return;
 8007820:	e04b      	b.n	80078ba <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007822:	e02e      	b.n	8007882 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	7c1b      	ldrb	r3, [r3, #16]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d109      	bne.n	8007840 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007834:	f107 020a 	add.w	r2, r7, #10
 8007838:	4610      	mov	r0, r2
 800783a:	4798      	blx	r3
 800783c:	60f8      	str	r0, [r7, #12]
      break;
 800783e:	e020      	b.n	8007882 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f9e5 	bl	8007c12 <USBD_CtlError>
      return;
 8007848:	e037      	b.n	80078ba <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	7c1b      	ldrb	r3, [r3, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10d      	bne.n	800786e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785a:	f107 020a 	add.w	r2, r7, #10
 800785e:	4610      	mov	r0, r2
 8007860:	4798      	blx	r3
 8007862:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3301      	adds	r3, #1
 8007868:	2207      	movs	r2, #7
 800786a:	701a      	strb	r2, [r3, #0]
      break;
 800786c:	e009      	b.n	8007882 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f9ce 	bl	8007c12 <USBD_CtlError>
      return;
 8007876:	e020      	b.n	80078ba <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f9c9 	bl	8007c12 <USBD_CtlError>
    return;
 8007880:	e01b      	b.n	80078ba <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007882:	897b      	ldrh	r3, [r7, #10]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d011      	beq.n	80078ac <USBD_GetDescriptor+0x1e0>
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	88db      	ldrh	r3, [r3, #6]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00d      	beq.n	80078ac <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	88da      	ldrh	r2, [r3, #6]
 8007894:	897b      	ldrh	r3, [r7, #10]
 8007896:	4293      	cmp	r3, r2
 8007898:	bf28      	it	cs
 800789a:	4613      	movcs	r3, r2
 800789c:	b29b      	uxth	r3, r3
 800789e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80078a0:	897b      	ldrh	r3, [r7, #10]
 80078a2:	461a      	mov	r2, r3
 80078a4:	68f9      	ldr	r1, [r7, #12]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fa1e 	bl	8007ce8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	88db      	ldrh	r3, [r3, #6]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d102      	bne.n	80078ba <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fa75 	bl	8007da4 <USBD_CtlSendStatus>
  }
}
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	889b      	ldrh	r3, [r3, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d130      	bne.n	8007934 <USBD_SetAddress+0x74>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	88db      	ldrh	r3, [r3, #6]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d12c      	bne.n	8007934 <USBD_SetAddress+0x74>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	885b      	ldrh	r3, [r3, #2]
 80078de:	2b7f      	cmp	r3, #127	; 0x7f
 80078e0:	d828      	bhi.n	8007934 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	885b      	ldrh	r3, [r3, #2]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d104      	bne.n	8007902 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f989 	bl	8007c12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007900:	e01c      	b.n	800793c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	7bfa      	ldrb	r2, [r7, #15]
 8007906:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800790a:	7bfb      	ldrb	r3, [r7, #15]
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fef4 	bl	80086fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fa45 	bl	8007da4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800791a:	7bfb      	ldrb	r3, [r7, #15]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d004      	beq.n	800792a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007928:	e008      	b.n	800793c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007932:	e003      	b.n	800793c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f96b 	bl	8007c12 <USBD_CtlError>
  }
}
 800793c:	bf00      	nop
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	885b      	ldrh	r3, [r3, #2]
 8007952:	b2da      	uxtb	r2, r3
 8007954:	4b41      	ldr	r3, [pc, #260]	; (8007a5c <USBD_SetConfig+0x118>)
 8007956:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007958:	4b40      	ldr	r3, [pc, #256]	; (8007a5c <USBD_SetConfig+0x118>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d904      	bls.n	800796a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f955 	bl	8007c12 <USBD_CtlError>
 8007968:	e075      	b.n	8007a56 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007970:	2b02      	cmp	r3, #2
 8007972:	d002      	beq.n	800797a <USBD_SetConfig+0x36>
 8007974:	2b03      	cmp	r3, #3
 8007976:	d023      	beq.n	80079c0 <USBD_SetConfig+0x7c>
 8007978:	e062      	b.n	8007a40 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800797a:	4b38      	ldr	r3, [pc, #224]	; (8007a5c <USBD_SetConfig+0x118>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d01a      	beq.n	80079b8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007982:	4b36      	ldr	r3, [pc, #216]	; (8007a5c <USBD_SetConfig+0x118>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2203      	movs	r2, #3
 8007990:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007994:	4b31      	ldr	r3, [pc, #196]	; (8007a5c <USBD_SetConfig+0x118>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7ff fa2a 	bl	8006df4 <USBD_SetClassConfig>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d104      	bne.n	80079b0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f932 	bl	8007c12 <USBD_CtlError>
          return;
 80079ae:	e052      	b.n	8007a56 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f9f7 	bl	8007da4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80079b6:	e04e      	b.n	8007a56 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f9f3 	bl	8007da4 <USBD_CtlSendStatus>
      break;
 80079be:	e04a      	b.n	8007a56 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80079c0:	4b26      	ldr	r3, [pc, #152]	; (8007a5c <USBD_SetConfig+0x118>)
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d112      	bne.n	80079ee <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80079d0:	4b22      	ldr	r3, [pc, #136]	; (8007a5c <USBD_SetConfig+0x118>)
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	461a      	mov	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80079da:	4b20      	ldr	r3, [pc, #128]	; (8007a5c <USBD_SetConfig+0x118>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff fa26 	bl	8006e32 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f9dc 	bl	8007da4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80079ec:	e033      	b.n	8007a56 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80079ee:	4b1b      	ldr	r3, [pc, #108]	; (8007a5c <USBD_SetConfig+0x118>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d01d      	beq.n	8007a38 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff fa14 	bl	8006e32 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a0a:	4b14      	ldr	r3, [pc, #80]	; (8007a5c <USBD_SetConfig+0x118>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a14:	4b11      	ldr	r3, [pc, #68]	; (8007a5c <USBD_SetConfig+0x118>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7ff f9ea 	bl	8006df4 <USBD_SetClassConfig>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d104      	bne.n	8007a30 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f8f2 	bl	8007c12 <USBD_CtlError>
          return;
 8007a2e:	e012      	b.n	8007a56 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f9b7 	bl	8007da4 <USBD_CtlSendStatus>
      break;
 8007a36:	e00e      	b.n	8007a56 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f9b3 	bl	8007da4 <USBD_CtlSendStatus>
      break;
 8007a3e:	e00a      	b.n	8007a56 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f8e5 	bl	8007c12 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007a48:	4b04      	ldr	r3, [pc, #16]	; (8007a5c <USBD_SetConfig+0x118>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7ff f9ef 	bl	8006e32 <USBD_ClrClassConfig>
      break;
 8007a54:	bf00      	nop
    }
  }
}
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	2000036c 	.word	0x2000036c

08007a60 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	88db      	ldrh	r3, [r3, #6]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d004      	beq.n	8007a7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f8cc 	bl	8007c12 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007a7a:	e021      	b.n	8007ac0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	db17      	blt.n	8007ab6 <USBD_GetConfig+0x56>
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	dd02      	ble.n	8007a90 <USBD_GetConfig+0x30>
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d00b      	beq.n	8007aa6 <USBD_GetConfig+0x46>
 8007a8e:	e012      	b.n	8007ab6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3308      	adds	r3, #8
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f922 	bl	8007ce8 <USBD_CtlSendData>
      break;
 8007aa4:	e00c      	b.n	8007ac0 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	2201      	movs	r2, #1
 8007aac:	4619      	mov	r1, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f91a 	bl	8007ce8 <USBD_CtlSendData>
      break;
 8007ab4:	e004      	b.n	8007ac0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f8aa 	bl	8007c12 <USBD_CtlError>
      break;
 8007abe:	bf00      	nop
}
 8007ac0:	bf00      	nop
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d81e      	bhi.n	8007b1c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	88db      	ldrh	r3, [r3, #6]
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d004      	beq.n	8007af0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f892 	bl	8007c12 <USBD_CtlError>
      break;
 8007aee:	e01a      	b.n	8007b26 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d005      	beq.n	8007b0c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f043 0202 	orr.w	r2, r3, #2
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	330c      	adds	r3, #12
 8007b10:	2202      	movs	r2, #2
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f8e7 	bl	8007ce8 <USBD_CtlSendData>
    break;
 8007b1a:	e004      	b.n	8007b26 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f877 	bl	8007c12 <USBD_CtlError>
    break;
 8007b24:	bf00      	nop
  }
}
 8007b26:	bf00      	nop
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	885b      	ldrh	r3, [r3, #2]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d106      	bne.n	8007b4e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f92b 	bl	8007da4 <USBD_CtlSendStatus>
  }

}
 8007b4e:	bf00      	nop
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b082      	sub	sp, #8
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b66:	3b01      	subs	r3, #1
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d80b      	bhi.n	8007b84 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	885b      	ldrh	r3, [r3, #2]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d10c      	bne.n	8007b8e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f911 	bl	8007da4 <USBD_CtlSendStatus>
    }
    break;
 8007b82:	e004      	b.n	8007b8e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f843 	bl	8007c12 <USBD_CtlError>
    break;
 8007b8c:	e000      	b.n	8007b90 <USBD_ClrFeature+0x3a>
    break;
 8007b8e:	bf00      	nop
  }
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	781a      	ldrb	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	785a      	ldrb	r2, [r3, #1]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	3302      	adds	r3, #2
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	3303      	adds	r3, #3
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	021b      	lsls	r3, r3, #8
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	4413      	add	r3, r2
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	3305      	adds	r3, #5
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	021b      	lsls	r3, r3, #8
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	4413      	add	r3, r2
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	3306      	adds	r3, #6
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	3307      	adds	r3, #7
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	021b      	lsls	r3, r3, #8
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	4413      	add	r3, r2
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	80da      	strh	r2, [r3, #6]

}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007c1c:	2180      	movs	r1, #128	; 0x80
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fd02 	bl	8008628 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007c24:	2100      	movs	r1, #0
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fcfe 	bl	8008628 <USBD_LL_StallEP>
}
 8007c2c:	bf00      	nop
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d032      	beq.n	8007cb0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 f834 	bl	8007cb8 <USBD_GetLen>
 8007c50:	4603      	mov	r3, r0
 8007c52:	3301      	adds	r3, #1
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	005b      	lsls	r3, r3, #1
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c5e:	7dfb      	ldrb	r3, [r7, #23]
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	75fa      	strb	r2, [r7, #23]
 8007c64:	461a      	mov	r2, r3
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	4413      	add	r3, r2
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	7812      	ldrb	r2, [r2, #0]
 8007c6e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	75fa      	strb	r2, [r7, #23]
 8007c76:	461a      	mov	r2, r3
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	2203      	movs	r2, #3
 8007c7e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c80:	e012      	b.n	8007ca8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	60fa      	str	r2, [r7, #12]
 8007c88:	7dfa      	ldrb	r2, [r7, #23]
 8007c8a:	1c51      	adds	r1, r2, #1
 8007c8c:	75f9      	strb	r1, [r7, #23]
 8007c8e:	4611      	mov	r1, r2
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	440a      	add	r2, r1
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	75fa      	strb	r2, [r7, #23]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1e8      	bne.n	8007c82 <USBD_GetString+0x4e>
    }
  }
}
 8007cb0:	bf00      	nop
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007cc4:	e005      	b.n	8007cd2 <USBD_GetLen+0x1a>
    {
        len++;
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1f5      	bne.n	8007cc6 <USBD_GetLen+0xe>
    }

    return len;
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007cfe:	88fa      	ldrh	r2, [r7, #6]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007d04:	88fa      	ldrh	r2, [r7, #6]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	2100      	movs	r1, #0
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 fd12 	bl	800873a <USBD_LL_Transmit>

  return USBD_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007d2e:	88fb      	ldrh	r3, [r7, #6]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	2100      	movs	r1, #0
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 fd00 	bl	800873a <USBD_LL_Transmit>

  return USBD_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2203      	movs	r2, #3
 8007d56:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007d5a:	88fa      	ldrh	r2, [r7, #6]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007d62:	88fa      	ldrh	r2, [r7, #6]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007d6a:	88fb      	ldrh	r3, [r7, #6]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	2100      	movs	r1, #0
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 fd05 	bl	8008780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d8e:	88fb      	ldrh	r3, [r7, #6]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	2100      	movs	r1, #0
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 fcf3 	bl	8008780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2204      	movs	r2, #4
 8007db0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007db4:	2300      	movs	r3, #0
 8007db6:	2200      	movs	r2, #0
 8007db8:	2100      	movs	r1, #0
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fcbd 	bl	800873a <USBD_LL_Transmit>

  return USBD_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b082      	sub	sp, #8
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2205      	movs	r2, #5
 8007dd6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007dda:	2300      	movs	r3, #0
 8007ddc:	2200      	movs	r2, #0
 8007dde:	2100      	movs	r1, #0
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fccd 	bl	8008780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007df4:	2200      	movs	r2, #0
 8007df6:	4912      	ldr	r1, [pc, #72]	; (8007e40 <MX_USB_DEVICE_Init+0x50>)
 8007df8:	4812      	ldr	r0, [pc, #72]	; (8007e44 <MX_USB_DEVICE_Init+0x54>)
 8007dfa:	f7fe ff9f 	bl	8006d3c <USBD_Init>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e04:	f7f9 fff6 	bl	8001df4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e08:	490f      	ldr	r1, [pc, #60]	; (8007e48 <MX_USB_DEVICE_Init+0x58>)
 8007e0a:	480e      	ldr	r0, [pc, #56]	; (8007e44 <MX_USB_DEVICE_Init+0x54>)
 8007e0c:	f7fe ffc1 	bl	8006d92 <USBD_RegisterClass>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e16:	f7f9 ffed 	bl	8001df4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e1a:	490c      	ldr	r1, [pc, #48]	; (8007e4c <MX_USB_DEVICE_Init+0x5c>)
 8007e1c:	4809      	ldr	r0, [pc, #36]	; (8007e44 <MX_USB_DEVICE_Init+0x54>)
 8007e1e:	f7fe feef 	bl	8006c00 <USBD_CDC_RegisterInterface>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e28:	f7f9 ffe4 	bl	8001df4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e2c:	4805      	ldr	r0, [pc, #20]	; (8007e44 <MX_USB_DEVICE_Init+0x54>)
 8007e2e:	f7fe ffca 	bl	8006dc6 <USBD_Start>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d001      	beq.n	8007e3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e38:	f7f9 ffdc 	bl	8001df4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e3c:	bf00      	nop
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	2000012c 	.word	0x2000012c
 8007e44:	20000514 	.word	0x20000514
 8007e48:	20000018 	.word	0x20000018
 8007e4c:	2000011c 	.word	0x2000011c

08007e50 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e54:	2200      	movs	r2, #0
 8007e56:	4905      	ldr	r1, [pc, #20]	; (8007e6c <CDC_Init_FS+0x1c>)
 8007e58:	4805      	ldr	r0, [pc, #20]	; (8007e70 <CDC_Init_FS+0x20>)
 8007e5a:	f7fe fee8 	bl	8006c2e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e5e:	4905      	ldr	r1, [pc, #20]	; (8007e74 <CDC_Init_FS+0x24>)
 8007e60:	4803      	ldr	r0, [pc, #12]	; (8007e70 <CDC_Init_FS+0x20>)
 8007e62:	f7fe fefe 	bl	8006c62 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e66:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	20000fb0 	.word	0x20000fb0
 8007e70:	20000514 	.word	0x20000514
 8007e74:	200007b0 	.word	0x200007b0

08007e78 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e7c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	6039      	str	r1, [r7, #0]
 8007e92:	71fb      	strb	r3, [r7, #7]
 8007e94:	4613      	mov	r3, r2
 8007e96:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 8007e98:	f107 0308 	add.w	r3, r7, #8
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 8007ea4:	79fb      	ldrb	r3, [r7, #7]
 8007ea6:	2b23      	cmp	r3, #35	; 0x23
 8007ea8:	d87c      	bhi.n	8007fa4 <CDC_Control_FS+0x11c>
 8007eaa:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <CDC_Control_FS+0x28>)
 8007eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb0:	08007fa5 	.word	0x08007fa5
 8007eb4:	08007fa5 	.word	0x08007fa5
 8007eb8:	08007fa5 	.word	0x08007fa5
 8007ebc:	08007fa5 	.word	0x08007fa5
 8007ec0:	08007fa5 	.word	0x08007fa5
 8007ec4:	08007fa5 	.word	0x08007fa5
 8007ec8:	08007fa5 	.word	0x08007fa5
 8007ecc:	08007fa5 	.word	0x08007fa5
 8007ed0:	08007fa5 	.word	0x08007fa5
 8007ed4:	08007fa5 	.word	0x08007fa5
 8007ed8:	08007fa5 	.word	0x08007fa5
 8007edc:	08007fa5 	.word	0x08007fa5
 8007ee0:	08007fa5 	.word	0x08007fa5
 8007ee4:	08007fa5 	.word	0x08007fa5
 8007ee8:	08007fa5 	.word	0x08007fa5
 8007eec:	08007fa5 	.word	0x08007fa5
 8007ef0:	08007fa5 	.word	0x08007fa5
 8007ef4:	08007fa5 	.word	0x08007fa5
 8007ef8:	08007fa5 	.word	0x08007fa5
 8007efc:	08007fa5 	.word	0x08007fa5
 8007f00:	08007fa5 	.word	0x08007fa5
 8007f04:	08007fa5 	.word	0x08007fa5
 8007f08:	08007fa5 	.word	0x08007fa5
 8007f0c:	08007fa5 	.word	0x08007fa5
 8007f10:	08007fa5 	.word	0x08007fa5
 8007f14:	08007fa5 	.word	0x08007fa5
 8007f18:	08007fa5 	.word	0x08007fa5
 8007f1c:	08007fa5 	.word	0x08007fa5
 8007f20:	08007fa5 	.word	0x08007fa5
 8007f24:	08007fa5 	.word	0x08007fa5
 8007f28:	08007fa5 	.word	0x08007fa5
 8007f2c:	08007fa5 	.word	0x08007fa5
 8007f30:	08007f41 	.word	0x08007f41
 8007f34:	08007f6d 	.word	0x08007f6d
 8007f38:	08007fa5 	.word	0x08007fa5
 8007f3c:	08007fa5 	.word	0x08007fa5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	tempbuf[0] = pbuf[0];
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	723b      	strb	r3, [r7, #8]
     	tempbuf[1] = pbuf[1];
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	785b      	ldrb	r3, [r3, #1]
 8007f4a:	727b      	strb	r3, [r7, #9]
     	tempbuf[2] = pbuf[2];
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	789b      	ldrb	r3, [r3, #2]
 8007f50:	72bb      	strb	r3, [r7, #10]
     	tempbuf[3] = pbuf[3];
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	78db      	ldrb	r3, [r3, #3]
 8007f56:	72fb      	strb	r3, [r7, #11]
     	tempbuf[4] = pbuf[4];
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	791b      	ldrb	r3, [r3, #4]
 8007f5c:	733b      	strb	r3, [r7, #12]
     	tempbuf[5] = pbuf[5];
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	795b      	ldrb	r3, [r3, #5]
 8007f62:	737b      	strb	r3, [r7, #13]
     	tempbuf[6] = pbuf[6];
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	799b      	ldrb	r3, [r3, #6]
 8007f68:	73bb      	strb	r3, [r7, #14]
     	break;
 8007f6a:	e01c      	b.n	8007fa6 <CDC_Control_FS+0x11e>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = tempbuf[0];
 8007f6c:	7a3a      	ldrb	r2, [r7, #8]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = tempbuf[1];
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	3301      	adds	r3, #1
 8007f76:	7a7a      	ldrb	r2, [r7, #9]
 8007f78:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = tempbuf[2];
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	3302      	adds	r3, #2
 8007f7e:	7aba      	ldrb	r2, [r7, #10]
 8007f80:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = tempbuf[3];
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	3303      	adds	r3, #3
 8007f86:	7afa      	ldrb	r2, [r7, #11]
 8007f88:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = tempbuf[4];
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	7b3a      	ldrb	r2, [r7, #12]
 8007f90:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = tempbuf[5];
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	3305      	adds	r3, #5
 8007f96:	7b7a      	ldrb	r2, [r7, #13]
 8007f98:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = tempbuf[6];
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	3306      	adds	r3, #6
 8007f9e:	7bba      	ldrb	r2, [r7, #14]
 8007fa0:	701a      	strb	r2, [r3, #0]
     	break;
 8007fa2:	e000      	b.n	8007fa6 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007fa4:	bf00      	nop
  }

  return (USBD_OK);
 8007fa6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	4805      	ldr	r0, [pc, #20]	; (8007fd8 <CDC_Receive_FS+0x24>)
 8007fc2:	f7fe fe4e 	bl	8006c62 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007fc6:	4804      	ldr	r0, [pc, #16]	; (8007fd8 <CDC_Receive_FS+0x24>)
 8007fc8:	f7fe fe8e 	bl	8006ce8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007fcc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20000514 	.word	0x20000514

08007fdc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007fec:	4b0d      	ldr	r3, [pc, #52]	; (8008024 <CDC_Transmit_FS+0x48>)
 8007fee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007ff2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e00b      	b.n	800801a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008002:	887b      	ldrh	r3, [r7, #2]
 8008004:	461a      	mov	r2, r3
 8008006:	6879      	ldr	r1, [r7, #4]
 8008008:	4806      	ldr	r0, [pc, #24]	; (8008024 <CDC_Transmit_FS+0x48>)
 800800a:	f7fe fe10 	bl	8006c2e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800800e:	4805      	ldr	r0, [pc, #20]	; (8008024 <CDC_Transmit_FS+0x48>)
 8008010:	f7fe fe3b 	bl	8006c8a <USBD_CDC_TransmitPacket>
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008018:	7bfb      	ldrb	r3, [r7, #15]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	20000514 	.word	0x20000514

08008028 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	4603      	mov	r3, r0
 8008030:	6039      	str	r1, [r7, #0]
 8008032:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2212      	movs	r2, #18
 8008038:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800803a:	4b03      	ldr	r3, [pc, #12]	; (8008048 <USBD_FS_DeviceDescriptor+0x20>)
}
 800803c:	4618      	mov	r0, r3
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	20000148 	.word	0x20000148

0800804c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	4603      	mov	r3, r0
 8008054:	6039      	str	r1, [r7, #0]
 8008056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2204      	movs	r2, #4
 800805c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800805e:	4b03      	ldr	r3, [pc, #12]	; (800806c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008060:	4618      	mov	r0, r3
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	2000015c 	.word	0x2000015c

08008070 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	4603      	mov	r3, r0
 8008078:	6039      	str	r1, [r7, #0]
 800807a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d105      	bne.n	800808e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	4907      	ldr	r1, [pc, #28]	; (80080a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008086:	4808      	ldr	r0, [pc, #32]	; (80080a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008088:	f7ff fdd4 	bl	8007c34 <USBD_GetString>
 800808c:	e004      	b.n	8008098 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	4904      	ldr	r1, [pc, #16]	; (80080a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008092:	4805      	ldr	r0, [pc, #20]	; (80080a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008094:	f7ff fdce 	bl	8007c34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008098:	4b02      	ldr	r3, [pc, #8]	; (80080a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800809a:	4618      	mov	r0, r3
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	200017b0 	.word	0x200017b0
 80080a8:	0800a9f8 	.word	0x0800a9f8

080080ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	4603      	mov	r3, r0
 80080b4:	6039      	str	r1, [r7, #0]
 80080b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080b8:	683a      	ldr	r2, [r7, #0]
 80080ba:	4904      	ldr	r1, [pc, #16]	; (80080cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80080bc:	4804      	ldr	r0, [pc, #16]	; (80080d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80080be:	f7ff fdb9 	bl	8007c34 <USBD_GetString>
  return USBD_StrDesc;
 80080c2:	4b02      	ldr	r3, [pc, #8]	; (80080cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	200017b0 	.word	0x200017b0
 80080d0:	0800aa10 	.word	0x0800aa10

080080d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	6039      	str	r1, [r7, #0]
 80080de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	221a      	movs	r2, #26
 80080e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080e6:	f000 f843 	bl	8008170 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80080ea:	4b02      	ldr	r3, [pc, #8]	; (80080f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	20000160 	.word	0x20000160

080080f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	4603      	mov	r3, r0
 8008100:	6039      	str	r1, [r7, #0]
 8008102:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008104:	79fb      	ldrb	r3, [r7, #7]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d105      	bne.n	8008116 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	4907      	ldr	r1, [pc, #28]	; (800812c <USBD_FS_ConfigStrDescriptor+0x34>)
 800810e:	4808      	ldr	r0, [pc, #32]	; (8008130 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008110:	f7ff fd90 	bl	8007c34 <USBD_GetString>
 8008114:	e004      	b.n	8008120 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	4904      	ldr	r1, [pc, #16]	; (800812c <USBD_FS_ConfigStrDescriptor+0x34>)
 800811a:	4805      	ldr	r0, [pc, #20]	; (8008130 <USBD_FS_ConfigStrDescriptor+0x38>)
 800811c:	f7ff fd8a 	bl	8007c34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008120:	4b02      	ldr	r3, [pc, #8]	; (800812c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	200017b0 	.word	0x200017b0
 8008130:	0800aa24 	.word	0x0800aa24

08008134 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	6039      	str	r1, [r7, #0]
 800813e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d105      	bne.n	8008152 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	4907      	ldr	r1, [pc, #28]	; (8008168 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800814a:	4808      	ldr	r0, [pc, #32]	; (800816c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800814c:	f7ff fd72 	bl	8007c34 <USBD_GetString>
 8008150:	e004      	b.n	800815c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	4904      	ldr	r1, [pc, #16]	; (8008168 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008156:	4805      	ldr	r0, [pc, #20]	; (800816c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008158:	f7ff fd6c 	bl	8007c34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800815c:	4b02      	ldr	r3, [pc, #8]	; (8008168 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	200017b0 	.word	0x200017b0
 800816c:	0800aa30 	.word	0x0800aa30

08008170 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008176:	4b0f      	ldr	r3, [pc, #60]	; (80081b4 <Get_SerialNum+0x44>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800817c:	4b0e      	ldr	r3, [pc, #56]	; (80081b8 <Get_SerialNum+0x48>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008182:	4b0e      	ldr	r3, [pc, #56]	; (80081bc <Get_SerialNum+0x4c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4413      	add	r3, r2
 800818e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d009      	beq.n	80081aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008196:	2208      	movs	r2, #8
 8008198:	4909      	ldr	r1, [pc, #36]	; (80081c0 <Get_SerialNum+0x50>)
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 f814 	bl	80081c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081a0:	2204      	movs	r2, #4
 80081a2:	4908      	ldr	r1, [pc, #32]	; (80081c4 <Get_SerialNum+0x54>)
 80081a4:	68b8      	ldr	r0, [r7, #8]
 80081a6:	f000 f80f 	bl	80081c8 <IntToUnicode>
  }
}
 80081aa:	bf00      	nop
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	1fff7a10 	.word	0x1fff7a10
 80081b8:	1fff7a14 	.word	0x1fff7a14
 80081bc:	1fff7a18 	.word	0x1fff7a18
 80081c0:	20000162 	.word	0x20000162
 80081c4:	20000172 	.word	0x20000172

080081c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	4613      	mov	r3, r2
 80081d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081d6:	2300      	movs	r3, #0
 80081d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081da:	2300      	movs	r3, #0
 80081dc:	75fb      	strb	r3, [r7, #23]
 80081de:	e027      	b.n	8008230 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	0f1b      	lsrs	r3, r3, #28
 80081e4:	2b09      	cmp	r3, #9
 80081e6:	d80b      	bhi.n	8008200 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	0f1b      	lsrs	r3, r3, #28
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	7dfb      	ldrb	r3, [r7, #23]
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	4619      	mov	r1, r3
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	440b      	add	r3, r1
 80081f8:	3230      	adds	r2, #48	; 0x30
 80081fa:	b2d2      	uxtb	r2, r2
 80081fc:	701a      	strb	r2, [r3, #0]
 80081fe:	e00a      	b.n	8008216 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	0f1b      	lsrs	r3, r3, #28
 8008204:	b2da      	uxtb	r2, r3
 8008206:	7dfb      	ldrb	r3, [r7, #23]
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	4619      	mov	r1, r3
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	440b      	add	r3, r1
 8008210:	3237      	adds	r2, #55	; 0x37
 8008212:	b2d2      	uxtb	r2, r2
 8008214:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	011b      	lsls	r3, r3, #4
 800821a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800821c:	7dfb      	ldrb	r3, [r7, #23]
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	3301      	adds	r3, #1
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	4413      	add	r3, r2
 8008226:	2200      	movs	r2, #0
 8008228:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800822a:	7dfb      	ldrb	r3, [r7, #23]
 800822c:	3301      	adds	r3, #1
 800822e:	75fb      	strb	r3, [r7, #23]
 8008230:	7dfa      	ldrb	r2, [r7, #23]
 8008232:	79fb      	ldrb	r3, [r7, #7]
 8008234:	429a      	cmp	r2, r3
 8008236:	d3d3      	bcc.n	80081e0 <IntToUnicode+0x18>
  }
}
 8008238:	bf00      	nop
 800823a:	371c      	adds	r7, #28
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08a      	sub	sp, #40	; 0x28
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800824c:	f107 0314 	add.w	r3, r7, #20
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	605a      	str	r2, [r3, #4]
 8008256:	609a      	str	r2, [r3, #8]
 8008258:	60da      	str	r2, [r3, #12]
 800825a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008264:	d13a      	bne.n	80082dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008266:	2300      	movs	r3, #0
 8008268:	613b      	str	r3, [r7, #16]
 800826a:	4b1e      	ldr	r3, [pc, #120]	; (80082e4 <HAL_PCD_MspInit+0xa0>)
 800826c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826e:	4a1d      	ldr	r2, [pc, #116]	; (80082e4 <HAL_PCD_MspInit+0xa0>)
 8008270:	f043 0301 	orr.w	r3, r3, #1
 8008274:	6313      	str	r3, [r2, #48]	; 0x30
 8008276:	4b1b      	ldr	r3, [pc, #108]	; (80082e4 <HAL_PCD_MspInit+0xa0>)
 8008278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	613b      	str	r3, [r7, #16]
 8008280:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008282:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008288:	2302      	movs	r3, #2
 800828a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800828c:	2300      	movs	r3, #0
 800828e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008290:	2303      	movs	r3, #3
 8008292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008294:	230a      	movs	r3, #10
 8008296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008298:	f107 0314 	add.w	r3, r7, #20
 800829c:	4619      	mov	r1, r3
 800829e:	4812      	ldr	r0, [pc, #72]	; (80082e8 <HAL_PCD_MspInit+0xa4>)
 80082a0:	f7fa f86a 	bl	8002378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082a4:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <HAL_PCD_MspInit+0xa0>)
 80082a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a8:	4a0e      	ldr	r2, [pc, #56]	; (80082e4 <HAL_PCD_MspInit+0xa0>)
 80082aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ae:	6353      	str	r3, [r2, #52]	; 0x34
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	4b0b      	ldr	r3, [pc, #44]	; (80082e4 <HAL_PCD_MspInit+0xa0>)
 80082b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b8:	4a0a      	ldr	r2, [pc, #40]	; (80082e4 <HAL_PCD_MspInit+0xa0>)
 80082ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082be:	6453      	str	r3, [r2, #68]	; 0x44
 80082c0:	4b08      	ldr	r3, [pc, #32]	; (80082e4 <HAL_PCD_MspInit+0xa0>)
 80082c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082c8:	60fb      	str	r3, [r7, #12]
 80082ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80082cc:	2200      	movs	r2, #0
 80082ce:	2100      	movs	r1, #0
 80082d0:	2043      	movs	r0, #67	; 0x43
 80082d2:	f7fa f81a 	bl	800230a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80082d6:	2043      	movs	r0, #67	; 0x43
 80082d8:	f7fa f833 	bl	8002342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80082dc:	bf00      	nop
 80082de:	3728      	adds	r7, #40	; 0x28
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	40023800 	.word	0x40023800
 80082e8:	40020000 	.word	0x40020000

080082ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008300:	4619      	mov	r1, r3
 8008302:	4610      	mov	r0, r2
 8008304:	f7fe fda8 	bl	8006e58 <USBD_LL_SetupStage>
}
 8008308:	bf00      	nop
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008322:	78fa      	ldrb	r2, [r7, #3]
 8008324:	6879      	ldr	r1, [r7, #4]
 8008326:	4613      	mov	r3, r2
 8008328:	00db      	lsls	r3, r3, #3
 800832a:	1a9b      	subs	r3, r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	440b      	add	r3, r1
 8008330:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	4619      	mov	r1, r3
 800833a:	f7fe fdd8 	bl	8006eee <USBD_LL_DataOutStage>
}
 800833e:	bf00      	nop
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	460b      	mov	r3, r1
 8008350:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008358:	78fa      	ldrb	r2, [r7, #3]
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	4613      	mov	r3, r2
 800835e:	00db      	lsls	r3, r3, #3
 8008360:	1a9b      	subs	r3, r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	440b      	add	r3, r1
 8008366:	3348      	adds	r3, #72	; 0x48
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	78fb      	ldrb	r3, [r7, #3]
 800836c:	4619      	mov	r1, r3
 800836e:	f7fe fe2f 	bl	8006fd0 <USBD_LL_DataInStage>
}
 8008372:	bf00      	nop
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b082      	sub	sp, #8
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008388:	4618      	mov	r0, r3
 800838a:	f7fe ff3d 	bl	8007208 <USBD_LL_SOF>
}
 800838e:	bf00      	nop
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800839e:	2301      	movs	r3, #1
 80083a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d102      	bne.n	80083b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80083aa:	2300      	movs	r3, #0
 80083ac:	73fb      	strb	r3, [r7, #15]
 80083ae:	e008      	b.n	80083c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d102      	bne.n	80083be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80083b8:	2301      	movs	r3, #1
 80083ba:	73fb      	strb	r3, [r7, #15]
 80083bc:	e001      	b.n	80083c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80083be:	f7f9 fd19 	bl	8001df4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083c8:	7bfa      	ldrb	r2, [r7, #15]
 80083ca:	4611      	mov	r1, r2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fe fee5 	bl	800719c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fe fe9e 	bl	800711a <USBD_LL_Reset>
}
 80083de:	bf00      	nop
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
	...

080083e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fe fee0 	bl	80071bc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	6812      	ldr	r2, [r2, #0]
 800840a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800840e:	f043 0301 	orr.w	r3, r3, #1
 8008412:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d005      	beq.n	8008428 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800841c:	4b04      	ldr	r3, [pc, #16]	; (8008430 <HAL_PCD_SuspendCallback+0x48>)
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	4a03      	ldr	r2, [pc, #12]	; (8008430 <HAL_PCD_SuspendCallback+0x48>)
 8008422:	f043 0306 	orr.w	r3, r3, #6
 8008426:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	e000ed00 	.word	0xe000ed00

08008434 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008442:	4618      	mov	r0, r3
 8008444:	f7fe fecf 	bl	80071e6 <USBD_LL_Resume>
}
 8008448:	bf00      	nop
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	460b      	mov	r3, r1
 800845a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008462:	78fa      	ldrb	r2, [r7, #3]
 8008464:	4611      	mov	r1, r2
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe fef5 	bl	8007256 <USBD_LL_IsoOUTIncomplete>
}
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	460b      	mov	r3, r1
 800847e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008486:	78fa      	ldrb	r2, [r7, #3]
 8008488:	4611      	mov	r1, r2
 800848a:	4618      	mov	r0, r3
 800848c:	f7fe fed6 	bl	800723c <USBD_LL_IsoINIncomplete>
}
 8008490:	bf00      	nop
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe fee2 	bl	8007270 <USBD_LL_DevConnected>
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fe fedf 	bl	8007286 <USBD_LL_DevDisconnected>
}
 80084c8:	bf00      	nop
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d13c      	bne.n	800855a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80084e0:	4a20      	ldr	r2, [pc, #128]	; (8008564 <USBD_LL_Init+0x94>)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a1e      	ldr	r2, [pc, #120]	; (8008564 <USBD_LL_Init+0x94>)
 80084ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084f0:	4b1c      	ldr	r3, [pc, #112]	; (8008564 <USBD_LL_Init+0x94>)
 80084f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80084f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80084f8:	4b1a      	ldr	r3, [pc, #104]	; (8008564 <USBD_LL_Init+0x94>)
 80084fa:	2204      	movs	r2, #4
 80084fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80084fe:	4b19      	ldr	r3, [pc, #100]	; (8008564 <USBD_LL_Init+0x94>)
 8008500:	2202      	movs	r2, #2
 8008502:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008504:	4b17      	ldr	r3, [pc, #92]	; (8008564 <USBD_LL_Init+0x94>)
 8008506:	2200      	movs	r2, #0
 8008508:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800850a:	4b16      	ldr	r3, [pc, #88]	; (8008564 <USBD_LL_Init+0x94>)
 800850c:	2202      	movs	r2, #2
 800850e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008510:	4b14      	ldr	r3, [pc, #80]	; (8008564 <USBD_LL_Init+0x94>)
 8008512:	2200      	movs	r2, #0
 8008514:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008516:	4b13      	ldr	r3, [pc, #76]	; (8008564 <USBD_LL_Init+0x94>)
 8008518:	2200      	movs	r2, #0
 800851a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800851c:	4b11      	ldr	r3, [pc, #68]	; (8008564 <USBD_LL_Init+0x94>)
 800851e:	2200      	movs	r2, #0
 8008520:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008522:	4b10      	ldr	r3, [pc, #64]	; (8008564 <USBD_LL_Init+0x94>)
 8008524:	2200      	movs	r2, #0
 8008526:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008528:	4b0e      	ldr	r3, [pc, #56]	; (8008564 <USBD_LL_Init+0x94>)
 800852a:	2200      	movs	r2, #0
 800852c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800852e:	480d      	ldr	r0, [pc, #52]	; (8008564 <USBD_LL_Init+0x94>)
 8008530:	f7fb f89f 	bl	8003672 <HAL_PCD_Init>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800853a:	f7f9 fc5b 	bl	8001df4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800853e:	2180      	movs	r1, #128	; 0x80
 8008540:	4808      	ldr	r0, [pc, #32]	; (8008564 <USBD_LL_Init+0x94>)
 8008542:	f7fc fa04 	bl	800494e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008546:	2240      	movs	r2, #64	; 0x40
 8008548:	2100      	movs	r1, #0
 800854a:	4806      	ldr	r0, [pc, #24]	; (8008564 <USBD_LL_Init+0x94>)
 800854c:	f7fc f9b8 	bl	80048c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008550:	2280      	movs	r2, #128	; 0x80
 8008552:	2101      	movs	r1, #1
 8008554:	4803      	ldr	r0, [pc, #12]	; (8008564 <USBD_LL_Init+0x94>)
 8008556:	f7fc f9b3 	bl	80048c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	200019b0 	.word	0x200019b0

08008568 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800857e:	4618      	mov	r0, r3
 8008580:	f7fb f994 	bl	80038ac <HAL_PCD_Start>
 8008584:	4603      	mov	r3, r0
 8008586:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 f92e 	bl	80087ec <USBD_Get_USB_Status>
 8008590:	4603      	mov	r3, r0
 8008592:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008594:	7bbb      	ldrb	r3, [r7, #14]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	4608      	mov	r0, r1
 80085a8:	4611      	mov	r1, r2
 80085aa:	461a      	mov	r2, r3
 80085ac:	4603      	mov	r3, r0
 80085ae:	70fb      	strb	r3, [r7, #3]
 80085b0:	460b      	mov	r3, r1
 80085b2:	70bb      	strb	r3, [r7, #2]
 80085b4:	4613      	mov	r3, r2
 80085b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80085c6:	78bb      	ldrb	r3, [r7, #2]
 80085c8:	883a      	ldrh	r2, [r7, #0]
 80085ca:	78f9      	ldrb	r1, [r7, #3]
 80085cc:	f7fb fd69 	bl	80040a2 <HAL_PCD_EP_Open>
 80085d0:	4603      	mov	r3, r0
 80085d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f000 f908 	bl	80087ec <USBD_Get_USB_Status>
 80085dc:	4603      	mov	r3, r0
 80085de:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008604:	78fa      	ldrb	r2, [r7, #3]
 8008606:	4611      	mov	r1, r2
 8008608:	4618      	mov	r0, r3
 800860a:	f7fb fdb2 	bl	8004172 <HAL_PCD_EP_Close>
 800860e:	4603      	mov	r3, r0
 8008610:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8008612:	7bfb      	ldrb	r3, [r7, #15]
 8008614:	4618      	mov	r0, r3
 8008616:	f000 f8e9 	bl	80087ec <USBD_Get_USB_Status>
 800861a:	4603      	mov	r3, r0
 800861c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800861e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008642:	78fa      	ldrb	r2, [r7, #3]
 8008644:	4611      	mov	r1, r2
 8008646:	4618      	mov	r0, r3
 8008648:	f7fb fe8a 	bl	8004360 <HAL_PCD_EP_SetStall>
 800864c:	4603      	mov	r3, r0
 800864e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	4618      	mov	r0, r3
 8008654:	f000 f8ca 	bl	80087ec <USBD_Get_USB_Status>
 8008658:	4603      	mov	r3, r0
 800865a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800865c:	7bbb      	ldrb	r3, [r7, #14]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	460b      	mov	r3, r1
 8008670:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008680:	78fa      	ldrb	r2, [r7, #3]
 8008682:	4611      	mov	r1, r2
 8008684:	4618      	mov	r0, r3
 8008686:	f7fb fecf 	bl	8004428 <HAL_PCD_EP_ClrStall>
 800868a:	4603      	mov	r3, r0
 800868c:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800868e:	7bfb      	ldrb	r3, [r7, #15]
 8008690:	4618      	mov	r0, r3
 8008692:	f000 f8ab 	bl	80087ec <USBD_Get_USB_Status>
 8008696:	4603      	mov	r3, r0
 8008698:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800869a:	7bbb      	ldrb	r3, [r7, #14]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80086b6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80086b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	da0b      	bge.n	80086d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80086c0:	78fb      	ldrb	r3, [r7, #3]
 80086c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086c6:	68f9      	ldr	r1, [r7, #12]
 80086c8:	4613      	mov	r3, r2
 80086ca:	00db      	lsls	r3, r3, #3
 80086cc:	1a9b      	subs	r3, r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	440b      	add	r3, r1
 80086d2:	333e      	adds	r3, #62	; 0x3e
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	e00b      	b.n	80086f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086de:	68f9      	ldr	r1, [r7, #12]
 80086e0:	4613      	mov	r3, r2
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	1a9b      	subs	r3, r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	440b      	add	r3, r1
 80086ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80086ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008716:	78fa      	ldrb	r2, [r7, #3]
 8008718:	4611      	mov	r1, r2
 800871a:	4618      	mov	r0, r3
 800871c:	f7fb fc9c 	bl	8004058 <HAL_PCD_SetAddress>
 8008720:	4603      	mov	r3, r0
 8008722:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	4618      	mov	r0, r3
 8008728:	f000 f860 	bl	80087ec <USBD_Get_USB_Status>
 800872c:	4603      	mov	r3, r0
 800872e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008730:	7bbb      	ldrb	r3, [r7, #14]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b086      	sub	sp, #24
 800873e:	af00      	add	r7, sp, #0
 8008740:	60f8      	str	r0, [r7, #12]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	461a      	mov	r2, r3
 8008746:	460b      	mov	r3, r1
 8008748:	72fb      	strb	r3, [r7, #11]
 800874a:	4613      	mov	r3, r2
 800874c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800875c:	893b      	ldrh	r3, [r7, #8]
 800875e:	7af9      	ldrb	r1, [r7, #11]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	f7fb fdb3 	bl	80042cc <HAL_PCD_EP_Transmit>
 8008766:	4603      	mov	r3, r0
 8008768:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	4618      	mov	r0, r3
 800876e:	f000 f83d 	bl	80087ec <USBD_Get_USB_Status>
 8008772:	4603      	mov	r3, r0
 8008774:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008776:	7dbb      	ldrb	r3, [r7, #22]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	607a      	str	r2, [r7, #4]
 800878a:	461a      	mov	r2, r3
 800878c:	460b      	mov	r3, r1
 800878e:	72fb      	strb	r3, [r7, #11]
 8008790:	4613      	mov	r3, r2
 8008792:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80087a2:	893b      	ldrh	r3, [r7, #8]
 80087a4:	7af9      	ldrb	r1, [r7, #11]
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	f7fb fd2d 	bl	8004206 <HAL_PCD_EP_Receive>
 80087ac:	4603      	mov	r3, r0
 80087ae:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 f81a 	bl	80087ec <USBD_Get_USB_Status>
 80087b8:	4603      	mov	r3, r0
 80087ba:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80087bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3718      	adds	r7, #24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b082      	sub	sp, #8
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	460b      	mov	r3, r1
 80087d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80087d8:	78fa      	ldrb	r2, [r7, #3]
 80087da:	4611      	mov	r1, r2
 80087dc:	4618      	mov	r0, r3
 80087de:	f7fb fd5d 	bl	800429c <HAL_PCD_EP_GetRxCount>
 80087e2:	4603      	mov	r3, r0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087fa:	79fb      	ldrb	r3, [r7, #7]
 80087fc:	2b03      	cmp	r3, #3
 80087fe:	d817      	bhi.n	8008830 <USBD_Get_USB_Status+0x44>
 8008800:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <USBD_Get_USB_Status+0x1c>)
 8008802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008806:	bf00      	nop
 8008808:	08008819 	.word	0x08008819
 800880c:	0800881f 	.word	0x0800881f
 8008810:	08008825 	.word	0x08008825
 8008814:	0800882b 	.word	0x0800882b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	73fb      	strb	r3, [r7, #15]
    break;
 800881c:	e00b      	b.n	8008836 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800881e:	2302      	movs	r3, #2
 8008820:	73fb      	strb	r3, [r7, #15]
    break;
 8008822:	e008      	b.n	8008836 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008824:	2301      	movs	r3, #1
 8008826:	73fb      	strb	r3, [r7, #15]
    break;
 8008828:	e005      	b.n	8008836 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800882a:	2302      	movs	r3, #2
 800882c:	73fb      	strb	r3, [r7, #15]
    break;
 800882e:	e002      	b.n	8008836 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008830:	2302      	movs	r3, #2
 8008832:	73fb      	strb	r3, [r7, #15]
    break;
 8008834:	bf00      	nop
  }
  return usb_status;
 8008836:	7bfb      	ldrb	r3, [r7, #15]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <__errno>:
 8008844:	4b01      	ldr	r3, [pc, #4]	; (800884c <__errno+0x8>)
 8008846:	6818      	ldr	r0, [r3, #0]
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	2000017c 	.word	0x2000017c

08008850 <__libc_init_array>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	4e0d      	ldr	r6, [pc, #52]	; (8008888 <__libc_init_array+0x38>)
 8008854:	4c0d      	ldr	r4, [pc, #52]	; (800888c <__libc_init_array+0x3c>)
 8008856:	1ba4      	subs	r4, r4, r6
 8008858:	10a4      	asrs	r4, r4, #2
 800885a:	2500      	movs	r5, #0
 800885c:	42a5      	cmp	r5, r4
 800885e:	d109      	bne.n	8008874 <__libc_init_array+0x24>
 8008860:	4e0b      	ldr	r6, [pc, #44]	; (8008890 <__libc_init_array+0x40>)
 8008862:	4c0c      	ldr	r4, [pc, #48]	; (8008894 <__libc_init_array+0x44>)
 8008864:	f002 f864 	bl	800a930 <_init>
 8008868:	1ba4      	subs	r4, r4, r6
 800886a:	10a4      	asrs	r4, r4, #2
 800886c:	2500      	movs	r5, #0
 800886e:	42a5      	cmp	r5, r4
 8008870:	d105      	bne.n	800887e <__libc_init_array+0x2e>
 8008872:	bd70      	pop	{r4, r5, r6, pc}
 8008874:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008878:	4798      	blx	r3
 800887a:	3501      	adds	r5, #1
 800887c:	e7ee      	b.n	800885c <__libc_init_array+0xc>
 800887e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008882:	4798      	blx	r3
 8008884:	3501      	adds	r5, #1
 8008886:	e7f2      	b.n	800886e <__libc_init_array+0x1e>
 8008888:	0800acc0 	.word	0x0800acc0
 800888c:	0800acc0 	.word	0x0800acc0
 8008890:	0800acc0 	.word	0x0800acc0
 8008894:	0800acc4 	.word	0x0800acc4

08008898 <malloc>:
 8008898:	4b02      	ldr	r3, [pc, #8]	; (80088a4 <malloc+0xc>)
 800889a:	4601      	mov	r1, r0
 800889c:	6818      	ldr	r0, [r3, #0]
 800889e:	f000 b861 	b.w	8008964 <_malloc_r>
 80088a2:	bf00      	nop
 80088a4:	2000017c 	.word	0x2000017c

080088a8 <free>:
 80088a8:	4b02      	ldr	r3, [pc, #8]	; (80088b4 <free+0xc>)
 80088aa:	4601      	mov	r1, r0
 80088ac:	6818      	ldr	r0, [r3, #0]
 80088ae:	f000 b80b 	b.w	80088c8 <_free_r>
 80088b2:	bf00      	nop
 80088b4:	2000017c 	.word	0x2000017c

080088b8 <memset>:
 80088b8:	4402      	add	r2, r0
 80088ba:	4603      	mov	r3, r0
 80088bc:	4293      	cmp	r3, r2
 80088be:	d100      	bne.n	80088c2 <memset+0xa>
 80088c0:	4770      	bx	lr
 80088c2:	f803 1b01 	strb.w	r1, [r3], #1
 80088c6:	e7f9      	b.n	80088bc <memset+0x4>

080088c8 <_free_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	4605      	mov	r5, r0
 80088cc:	2900      	cmp	r1, #0
 80088ce:	d045      	beq.n	800895c <_free_r+0x94>
 80088d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088d4:	1f0c      	subs	r4, r1, #4
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	bfb8      	it	lt
 80088da:	18e4      	addlt	r4, r4, r3
 80088dc:	f001 fb85 	bl	8009fea <__malloc_lock>
 80088e0:	4a1f      	ldr	r2, [pc, #124]	; (8008960 <_free_r+0x98>)
 80088e2:	6813      	ldr	r3, [r2, #0]
 80088e4:	4610      	mov	r0, r2
 80088e6:	b933      	cbnz	r3, 80088f6 <_free_r+0x2e>
 80088e8:	6063      	str	r3, [r4, #4]
 80088ea:	6014      	str	r4, [r2, #0]
 80088ec:	4628      	mov	r0, r5
 80088ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088f2:	f001 bb7b 	b.w	8009fec <__malloc_unlock>
 80088f6:	42a3      	cmp	r3, r4
 80088f8:	d90c      	bls.n	8008914 <_free_r+0x4c>
 80088fa:	6821      	ldr	r1, [r4, #0]
 80088fc:	1862      	adds	r2, r4, r1
 80088fe:	4293      	cmp	r3, r2
 8008900:	bf04      	itt	eq
 8008902:	681a      	ldreq	r2, [r3, #0]
 8008904:	685b      	ldreq	r3, [r3, #4]
 8008906:	6063      	str	r3, [r4, #4]
 8008908:	bf04      	itt	eq
 800890a:	1852      	addeq	r2, r2, r1
 800890c:	6022      	streq	r2, [r4, #0]
 800890e:	6004      	str	r4, [r0, #0]
 8008910:	e7ec      	b.n	80088ec <_free_r+0x24>
 8008912:	4613      	mov	r3, r2
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	b10a      	cbz	r2, 800891c <_free_r+0x54>
 8008918:	42a2      	cmp	r2, r4
 800891a:	d9fa      	bls.n	8008912 <_free_r+0x4a>
 800891c:	6819      	ldr	r1, [r3, #0]
 800891e:	1858      	adds	r0, r3, r1
 8008920:	42a0      	cmp	r0, r4
 8008922:	d10b      	bne.n	800893c <_free_r+0x74>
 8008924:	6820      	ldr	r0, [r4, #0]
 8008926:	4401      	add	r1, r0
 8008928:	1858      	adds	r0, r3, r1
 800892a:	4282      	cmp	r2, r0
 800892c:	6019      	str	r1, [r3, #0]
 800892e:	d1dd      	bne.n	80088ec <_free_r+0x24>
 8008930:	6810      	ldr	r0, [r2, #0]
 8008932:	6852      	ldr	r2, [r2, #4]
 8008934:	605a      	str	r2, [r3, #4]
 8008936:	4401      	add	r1, r0
 8008938:	6019      	str	r1, [r3, #0]
 800893a:	e7d7      	b.n	80088ec <_free_r+0x24>
 800893c:	d902      	bls.n	8008944 <_free_r+0x7c>
 800893e:	230c      	movs	r3, #12
 8008940:	602b      	str	r3, [r5, #0]
 8008942:	e7d3      	b.n	80088ec <_free_r+0x24>
 8008944:	6820      	ldr	r0, [r4, #0]
 8008946:	1821      	adds	r1, r4, r0
 8008948:	428a      	cmp	r2, r1
 800894a:	bf04      	itt	eq
 800894c:	6811      	ldreq	r1, [r2, #0]
 800894e:	6852      	ldreq	r2, [r2, #4]
 8008950:	6062      	str	r2, [r4, #4]
 8008952:	bf04      	itt	eq
 8008954:	1809      	addeq	r1, r1, r0
 8008956:	6021      	streq	r1, [r4, #0]
 8008958:	605c      	str	r4, [r3, #4]
 800895a:	e7c7      	b.n	80088ec <_free_r+0x24>
 800895c:	bd38      	pop	{r3, r4, r5, pc}
 800895e:	bf00      	nop
 8008960:	20000370 	.word	0x20000370

08008964 <_malloc_r>:
 8008964:	b570      	push	{r4, r5, r6, lr}
 8008966:	1ccd      	adds	r5, r1, #3
 8008968:	f025 0503 	bic.w	r5, r5, #3
 800896c:	3508      	adds	r5, #8
 800896e:	2d0c      	cmp	r5, #12
 8008970:	bf38      	it	cc
 8008972:	250c      	movcc	r5, #12
 8008974:	2d00      	cmp	r5, #0
 8008976:	4606      	mov	r6, r0
 8008978:	db01      	blt.n	800897e <_malloc_r+0x1a>
 800897a:	42a9      	cmp	r1, r5
 800897c:	d903      	bls.n	8008986 <_malloc_r+0x22>
 800897e:	230c      	movs	r3, #12
 8008980:	6033      	str	r3, [r6, #0]
 8008982:	2000      	movs	r0, #0
 8008984:	bd70      	pop	{r4, r5, r6, pc}
 8008986:	f001 fb30 	bl	8009fea <__malloc_lock>
 800898a:	4a21      	ldr	r2, [pc, #132]	; (8008a10 <_malloc_r+0xac>)
 800898c:	6814      	ldr	r4, [r2, #0]
 800898e:	4621      	mov	r1, r4
 8008990:	b991      	cbnz	r1, 80089b8 <_malloc_r+0x54>
 8008992:	4c20      	ldr	r4, [pc, #128]	; (8008a14 <_malloc_r+0xb0>)
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	b91b      	cbnz	r3, 80089a0 <_malloc_r+0x3c>
 8008998:	4630      	mov	r0, r6
 800899a:	f000 fc99 	bl	80092d0 <_sbrk_r>
 800899e:	6020      	str	r0, [r4, #0]
 80089a0:	4629      	mov	r1, r5
 80089a2:	4630      	mov	r0, r6
 80089a4:	f000 fc94 	bl	80092d0 <_sbrk_r>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d124      	bne.n	80089f6 <_malloc_r+0x92>
 80089ac:	230c      	movs	r3, #12
 80089ae:	6033      	str	r3, [r6, #0]
 80089b0:	4630      	mov	r0, r6
 80089b2:	f001 fb1b 	bl	8009fec <__malloc_unlock>
 80089b6:	e7e4      	b.n	8008982 <_malloc_r+0x1e>
 80089b8:	680b      	ldr	r3, [r1, #0]
 80089ba:	1b5b      	subs	r3, r3, r5
 80089bc:	d418      	bmi.n	80089f0 <_malloc_r+0x8c>
 80089be:	2b0b      	cmp	r3, #11
 80089c0:	d90f      	bls.n	80089e2 <_malloc_r+0x7e>
 80089c2:	600b      	str	r3, [r1, #0]
 80089c4:	50cd      	str	r5, [r1, r3]
 80089c6:	18cc      	adds	r4, r1, r3
 80089c8:	4630      	mov	r0, r6
 80089ca:	f001 fb0f 	bl	8009fec <__malloc_unlock>
 80089ce:	f104 000b 	add.w	r0, r4, #11
 80089d2:	1d23      	adds	r3, r4, #4
 80089d4:	f020 0007 	bic.w	r0, r0, #7
 80089d8:	1ac3      	subs	r3, r0, r3
 80089da:	d0d3      	beq.n	8008984 <_malloc_r+0x20>
 80089dc:	425a      	negs	r2, r3
 80089de:	50e2      	str	r2, [r4, r3]
 80089e0:	e7d0      	b.n	8008984 <_malloc_r+0x20>
 80089e2:	428c      	cmp	r4, r1
 80089e4:	684b      	ldr	r3, [r1, #4]
 80089e6:	bf16      	itet	ne
 80089e8:	6063      	strne	r3, [r4, #4]
 80089ea:	6013      	streq	r3, [r2, #0]
 80089ec:	460c      	movne	r4, r1
 80089ee:	e7eb      	b.n	80089c8 <_malloc_r+0x64>
 80089f0:	460c      	mov	r4, r1
 80089f2:	6849      	ldr	r1, [r1, #4]
 80089f4:	e7cc      	b.n	8008990 <_malloc_r+0x2c>
 80089f6:	1cc4      	adds	r4, r0, #3
 80089f8:	f024 0403 	bic.w	r4, r4, #3
 80089fc:	42a0      	cmp	r0, r4
 80089fe:	d005      	beq.n	8008a0c <_malloc_r+0xa8>
 8008a00:	1a21      	subs	r1, r4, r0
 8008a02:	4630      	mov	r0, r6
 8008a04:	f000 fc64 	bl	80092d0 <_sbrk_r>
 8008a08:	3001      	adds	r0, #1
 8008a0a:	d0cf      	beq.n	80089ac <_malloc_r+0x48>
 8008a0c:	6025      	str	r5, [r4, #0]
 8008a0e:	e7db      	b.n	80089c8 <_malloc_r+0x64>
 8008a10:	20000370 	.word	0x20000370
 8008a14:	20000374 	.word	0x20000374

08008a18 <__cvt>:
 8008a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a1c:	ec55 4b10 	vmov	r4, r5, d0
 8008a20:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008a22:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a26:	2d00      	cmp	r5, #0
 8008a28:	460e      	mov	r6, r1
 8008a2a:	4691      	mov	r9, r2
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	bfb8      	it	lt
 8008a30:	4622      	movlt	r2, r4
 8008a32:	462b      	mov	r3, r5
 8008a34:	f027 0720 	bic.w	r7, r7, #32
 8008a38:	bfbb      	ittet	lt
 8008a3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008a3e:	461d      	movlt	r5, r3
 8008a40:	2300      	movge	r3, #0
 8008a42:	232d      	movlt	r3, #45	; 0x2d
 8008a44:	bfb8      	it	lt
 8008a46:	4614      	movlt	r4, r2
 8008a48:	2f46      	cmp	r7, #70	; 0x46
 8008a4a:	700b      	strb	r3, [r1, #0]
 8008a4c:	d004      	beq.n	8008a58 <__cvt+0x40>
 8008a4e:	2f45      	cmp	r7, #69	; 0x45
 8008a50:	d100      	bne.n	8008a54 <__cvt+0x3c>
 8008a52:	3601      	adds	r6, #1
 8008a54:	2102      	movs	r1, #2
 8008a56:	e000      	b.n	8008a5a <__cvt+0x42>
 8008a58:	2103      	movs	r1, #3
 8008a5a:	ab03      	add	r3, sp, #12
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	ab02      	add	r3, sp, #8
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	4632      	mov	r2, r6
 8008a64:	4653      	mov	r3, sl
 8008a66:	ec45 4b10 	vmov	d0, r4, r5
 8008a6a:	f000 fced 	bl	8009448 <_dtoa_r>
 8008a6e:	2f47      	cmp	r7, #71	; 0x47
 8008a70:	4680      	mov	r8, r0
 8008a72:	d102      	bne.n	8008a7a <__cvt+0x62>
 8008a74:	f019 0f01 	tst.w	r9, #1
 8008a78:	d026      	beq.n	8008ac8 <__cvt+0xb0>
 8008a7a:	2f46      	cmp	r7, #70	; 0x46
 8008a7c:	eb08 0906 	add.w	r9, r8, r6
 8008a80:	d111      	bne.n	8008aa6 <__cvt+0x8e>
 8008a82:	f898 3000 	ldrb.w	r3, [r8]
 8008a86:	2b30      	cmp	r3, #48	; 0x30
 8008a88:	d10a      	bne.n	8008aa0 <__cvt+0x88>
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4620      	mov	r0, r4
 8008a90:	4629      	mov	r1, r5
 8008a92:	f7f8 f819 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a96:	b918      	cbnz	r0, 8008aa0 <__cvt+0x88>
 8008a98:	f1c6 0601 	rsb	r6, r6, #1
 8008a9c:	f8ca 6000 	str.w	r6, [sl]
 8008aa0:	f8da 3000 	ldr.w	r3, [sl]
 8008aa4:	4499      	add	r9, r3
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4620      	mov	r0, r4
 8008aac:	4629      	mov	r1, r5
 8008aae:	f7f8 f80b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ab2:	b938      	cbnz	r0, 8008ac4 <__cvt+0xac>
 8008ab4:	2230      	movs	r2, #48	; 0x30
 8008ab6:	9b03      	ldr	r3, [sp, #12]
 8008ab8:	454b      	cmp	r3, r9
 8008aba:	d205      	bcs.n	8008ac8 <__cvt+0xb0>
 8008abc:	1c59      	adds	r1, r3, #1
 8008abe:	9103      	str	r1, [sp, #12]
 8008ac0:	701a      	strb	r2, [r3, #0]
 8008ac2:	e7f8      	b.n	8008ab6 <__cvt+0x9e>
 8008ac4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ac8:	9b03      	ldr	r3, [sp, #12]
 8008aca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008acc:	eba3 0308 	sub.w	r3, r3, r8
 8008ad0:	4640      	mov	r0, r8
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	b004      	add	sp, #16
 8008ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008ada <__exponent>:
 8008ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008adc:	2900      	cmp	r1, #0
 8008ade:	4604      	mov	r4, r0
 8008ae0:	bfba      	itte	lt
 8008ae2:	4249      	neglt	r1, r1
 8008ae4:	232d      	movlt	r3, #45	; 0x2d
 8008ae6:	232b      	movge	r3, #43	; 0x2b
 8008ae8:	2909      	cmp	r1, #9
 8008aea:	f804 2b02 	strb.w	r2, [r4], #2
 8008aee:	7043      	strb	r3, [r0, #1]
 8008af0:	dd20      	ble.n	8008b34 <__exponent+0x5a>
 8008af2:	f10d 0307 	add.w	r3, sp, #7
 8008af6:	461f      	mov	r7, r3
 8008af8:	260a      	movs	r6, #10
 8008afa:	fb91 f5f6 	sdiv	r5, r1, r6
 8008afe:	fb06 1115 	mls	r1, r6, r5, r1
 8008b02:	3130      	adds	r1, #48	; 0x30
 8008b04:	2d09      	cmp	r5, #9
 8008b06:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008b0a:	f103 32ff 	add.w	r2, r3, #4294967295
 8008b0e:	4629      	mov	r1, r5
 8008b10:	dc09      	bgt.n	8008b26 <__exponent+0x4c>
 8008b12:	3130      	adds	r1, #48	; 0x30
 8008b14:	3b02      	subs	r3, #2
 8008b16:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008b1a:	42bb      	cmp	r3, r7
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	d304      	bcc.n	8008b2a <__exponent+0x50>
 8008b20:	1a10      	subs	r0, r2, r0
 8008b22:	b003      	add	sp, #12
 8008b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b26:	4613      	mov	r3, r2
 8008b28:	e7e7      	b.n	8008afa <__exponent+0x20>
 8008b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b2e:	f804 2b01 	strb.w	r2, [r4], #1
 8008b32:	e7f2      	b.n	8008b1a <__exponent+0x40>
 8008b34:	2330      	movs	r3, #48	; 0x30
 8008b36:	4419      	add	r1, r3
 8008b38:	7083      	strb	r3, [r0, #2]
 8008b3a:	1d02      	adds	r2, r0, #4
 8008b3c:	70c1      	strb	r1, [r0, #3]
 8008b3e:	e7ef      	b.n	8008b20 <__exponent+0x46>

08008b40 <_printf_float>:
 8008b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	b08d      	sub	sp, #52	; 0x34
 8008b46:	460c      	mov	r4, r1
 8008b48:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008b4c:	4616      	mov	r6, r2
 8008b4e:	461f      	mov	r7, r3
 8008b50:	4605      	mov	r5, r0
 8008b52:	f001 fa31 	bl	8009fb8 <_localeconv_r>
 8008b56:	6803      	ldr	r3, [r0, #0]
 8008b58:	9304      	str	r3, [sp, #16]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7f7 fb38 	bl	80001d0 <strlen>
 8008b60:	2300      	movs	r3, #0
 8008b62:	930a      	str	r3, [sp, #40]	; 0x28
 8008b64:	f8d8 3000 	ldr.w	r3, [r8]
 8008b68:	9005      	str	r0, [sp, #20]
 8008b6a:	3307      	adds	r3, #7
 8008b6c:	f023 0307 	bic.w	r3, r3, #7
 8008b70:	f103 0208 	add.w	r2, r3, #8
 8008b74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008b78:	f8d4 b000 	ldr.w	fp, [r4]
 8008b7c:	f8c8 2000 	str.w	r2, [r8]
 8008b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b84:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008b88:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008b8c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b90:	9307      	str	r3, [sp, #28]
 8008b92:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b96:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9a:	4ba7      	ldr	r3, [pc, #668]	; (8008e38 <_printf_float+0x2f8>)
 8008b9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ba0:	f7f7 ffc4 	bl	8000b2c <__aeabi_dcmpun>
 8008ba4:	bb70      	cbnz	r0, 8008c04 <_printf_float+0xc4>
 8008ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8008baa:	4ba3      	ldr	r3, [pc, #652]	; (8008e38 <_printf_float+0x2f8>)
 8008bac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bb0:	f7f7 ff9e 	bl	8000af0 <__aeabi_dcmple>
 8008bb4:	bb30      	cbnz	r0, 8008c04 <_printf_float+0xc4>
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	2300      	movs	r3, #0
 8008bba:	4640      	mov	r0, r8
 8008bbc:	4649      	mov	r1, r9
 8008bbe:	f7f7 ff8d 	bl	8000adc <__aeabi_dcmplt>
 8008bc2:	b110      	cbz	r0, 8008bca <_printf_float+0x8a>
 8008bc4:	232d      	movs	r3, #45	; 0x2d
 8008bc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bca:	4a9c      	ldr	r2, [pc, #624]	; (8008e3c <_printf_float+0x2fc>)
 8008bcc:	4b9c      	ldr	r3, [pc, #624]	; (8008e40 <_printf_float+0x300>)
 8008bce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008bd2:	bf8c      	ite	hi
 8008bd4:	4690      	movhi	r8, r2
 8008bd6:	4698      	movls	r8, r3
 8008bd8:	2303      	movs	r3, #3
 8008bda:	f02b 0204 	bic.w	r2, fp, #4
 8008bde:	6123      	str	r3, [r4, #16]
 8008be0:	6022      	str	r2, [r4, #0]
 8008be2:	f04f 0900 	mov.w	r9, #0
 8008be6:	9700      	str	r7, [sp, #0]
 8008be8:	4633      	mov	r3, r6
 8008bea:	aa0b      	add	r2, sp, #44	; 0x2c
 8008bec:	4621      	mov	r1, r4
 8008bee:	4628      	mov	r0, r5
 8008bf0:	f000 f9e6 	bl	8008fc0 <_printf_common>
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	f040 808d 	bne.w	8008d14 <_printf_float+0x1d4>
 8008bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfe:	b00d      	add	sp, #52	; 0x34
 8008c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c04:	4642      	mov	r2, r8
 8008c06:	464b      	mov	r3, r9
 8008c08:	4640      	mov	r0, r8
 8008c0a:	4649      	mov	r1, r9
 8008c0c:	f7f7 ff8e 	bl	8000b2c <__aeabi_dcmpun>
 8008c10:	b110      	cbz	r0, 8008c18 <_printf_float+0xd8>
 8008c12:	4a8c      	ldr	r2, [pc, #560]	; (8008e44 <_printf_float+0x304>)
 8008c14:	4b8c      	ldr	r3, [pc, #560]	; (8008e48 <_printf_float+0x308>)
 8008c16:	e7da      	b.n	8008bce <_printf_float+0x8e>
 8008c18:	6861      	ldr	r1, [r4, #4]
 8008c1a:	1c4b      	adds	r3, r1, #1
 8008c1c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008c20:	a80a      	add	r0, sp, #40	; 0x28
 8008c22:	d13e      	bne.n	8008ca2 <_printf_float+0x162>
 8008c24:	2306      	movs	r3, #6
 8008c26:	6063      	str	r3, [r4, #4]
 8008c28:	2300      	movs	r3, #0
 8008c2a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008c2e:	ab09      	add	r3, sp, #36	; 0x24
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	ec49 8b10 	vmov	d0, r8, r9
 8008c36:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c3a:	6022      	str	r2, [r4, #0]
 8008c3c:	f8cd a004 	str.w	sl, [sp, #4]
 8008c40:	6861      	ldr	r1, [r4, #4]
 8008c42:	4628      	mov	r0, r5
 8008c44:	f7ff fee8 	bl	8008a18 <__cvt>
 8008c48:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008c4c:	2b47      	cmp	r3, #71	; 0x47
 8008c4e:	4680      	mov	r8, r0
 8008c50:	d109      	bne.n	8008c66 <_printf_float+0x126>
 8008c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c54:	1cd8      	adds	r0, r3, #3
 8008c56:	db02      	blt.n	8008c5e <_printf_float+0x11e>
 8008c58:	6862      	ldr	r2, [r4, #4]
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	dd47      	ble.n	8008cee <_printf_float+0x1ae>
 8008c5e:	f1aa 0a02 	sub.w	sl, sl, #2
 8008c62:	fa5f fa8a 	uxtb.w	sl, sl
 8008c66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008c6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c6c:	d824      	bhi.n	8008cb8 <_printf_float+0x178>
 8008c6e:	3901      	subs	r1, #1
 8008c70:	4652      	mov	r2, sl
 8008c72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c76:	9109      	str	r1, [sp, #36]	; 0x24
 8008c78:	f7ff ff2f 	bl	8008ada <__exponent>
 8008c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c7e:	1813      	adds	r3, r2, r0
 8008c80:	2a01      	cmp	r2, #1
 8008c82:	4681      	mov	r9, r0
 8008c84:	6123      	str	r3, [r4, #16]
 8008c86:	dc02      	bgt.n	8008c8e <_printf_float+0x14e>
 8008c88:	6822      	ldr	r2, [r4, #0]
 8008c8a:	07d1      	lsls	r1, r2, #31
 8008c8c:	d501      	bpl.n	8008c92 <_printf_float+0x152>
 8008c8e:	3301      	adds	r3, #1
 8008c90:	6123      	str	r3, [r4, #16]
 8008c92:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d0a5      	beq.n	8008be6 <_printf_float+0xa6>
 8008c9a:	232d      	movs	r3, #45	; 0x2d
 8008c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ca0:	e7a1      	b.n	8008be6 <_printf_float+0xa6>
 8008ca2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008ca6:	f000 8177 	beq.w	8008f98 <_printf_float+0x458>
 8008caa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008cae:	d1bb      	bne.n	8008c28 <_printf_float+0xe8>
 8008cb0:	2900      	cmp	r1, #0
 8008cb2:	d1b9      	bne.n	8008c28 <_printf_float+0xe8>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e7b6      	b.n	8008c26 <_printf_float+0xe6>
 8008cb8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008cbc:	d119      	bne.n	8008cf2 <_printf_float+0x1b2>
 8008cbe:	2900      	cmp	r1, #0
 8008cc0:	6863      	ldr	r3, [r4, #4]
 8008cc2:	dd0c      	ble.n	8008cde <_printf_float+0x19e>
 8008cc4:	6121      	str	r1, [r4, #16]
 8008cc6:	b913      	cbnz	r3, 8008cce <_printf_float+0x18e>
 8008cc8:	6822      	ldr	r2, [r4, #0]
 8008cca:	07d2      	lsls	r2, r2, #31
 8008ccc:	d502      	bpl.n	8008cd4 <_printf_float+0x194>
 8008cce:	3301      	adds	r3, #1
 8008cd0:	440b      	add	r3, r1
 8008cd2:	6123      	str	r3, [r4, #16]
 8008cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cd6:	65a3      	str	r3, [r4, #88]	; 0x58
 8008cd8:	f04f 0900 	mov.w	r9, #0
 8008cdc:	e7d9      	b.n	8008c92 <_printf_float+0x152>
 8008cde:	b913      	cbnz	r3, 8008ce6 <_printf_float+0x1a6>
 8008ce0:	6822      	ldr	r2, [r4, #0]
 8008ce2:	07d0      	lsls	r0, r2, #31
 8008ce4:	d501      	bpl.n	8008cea <_printf_float+0x1aa>
 8008ce6:	3302      	adds	r3, #2
 8008ce8:	e7f3      	b.n	8008cd2 <_printf_float+0x192>
 8008cea:	2301      	movs	r3, #1
 8008cec:	e7f1      	b.n	8008cd2 <_printf_float+0x192>
 8008cee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008cf2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	db05      	blt.n	8008d06 <_printf_float+0x1c6>
 8008cfa:	6822      	ldr	r2, [r4, #0]
 8008cfc:	6123      	str	r3, [r4, #16]
 8008cfe:	07d1      	lsls	r1, r2, #31
 8008d00:	d5e8      	bpl.n	8008cd4 <_printf_float+0x194>
 8008d02:	3301      	adds	r3, #1
 8008d04:	e7e5      	b.n	8008cd2 <_printf_float+0x192>
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	bfd4      	ite	le
 8008d0a:	f1c3 0302 	rsble	r3, r3, #2
 8008d0e:	2301      	movgt	r3, #1
 8008d10:	4413      	add	r3, r2
 8008d12:	e7de      	b.n	8008cd2 <_printf_float+0x192>
 8008d14:	6823      	ldr	r3, [r4, #0]
 8008d16:	055a      	lsls	r2, r3, #21
 8008d18:	d407      	bmi.n	8008d2a <_printf_float+0x1ea>
 8008d1a:	6923      	ldr	r3, [r4, #16]
 8008d1c:	4642      	mov	r2, r8
 8008d1e:	4631      	mov	r1, r6
 8008d20:	4628      	mov	r0, r5
 8008d22:	47b8      	blx	r7
 8008d24:	3001      	adds	r0, #1
 8008d26:	d12b      	bne.n	8008d80 <_printf_float+0x240>
 8008d28:	e767      	b.n	8008bfa <_printf_float+0xba>
 8008d2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008d2e:	f240 80dc 	bls.w	8008eea <_printf_float+0x3aa>
 8008d32:	2200      	movs	r2, #0
 8008d34:	2300      	movs	r3, #0
 8008d36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d3a:	f7f7 fec5 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	d033      	beq.n	8008daa <_printf_float+0x26a>
 8008d42:	2301      	movs	r3, #1
 8008d44:	4a41      	ldr	r2, [pc, #260]	; (8008e4c <_printf_float+0x30c>)
 8008d46:	4631      	mov	r1, r6
 8008d48:	4628      	mov	r0, r5
 8008d4a:	47b8      	blx	r7
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	f43f af54 	beq.w	8008bfa <_printf_float+0xba>
 8008d52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d56:	429a      	cmp	r2, r3
 8008d58:	db02      	blt.n	8008d60 <_printf_float+0x220>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	07d8      	lsls	r0, r3, #31
 8008d5e:	d50f      	bpl.n	8008d80 <_printf_float+0x240>
 8008d60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d64:	4631      	mov	r1, r6
 8008d66:	4628      	mov	r0, r5
 8008d68:	47b8      	blx	r7
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	f43f af45 	beq.w	8008bfa <_printf_float+0xba>
 8008d70:	f04f 0800 	mov.w	r8, #0
 8008d74:	f104 091a 	add.w	r9, r4, #26
 8008d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	4543      	cmp	r3, r8
 8008d7e:	dc09      	bgt.n	8008d94 <_printf_float+0x254>
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	079b      	lsls	r3, r3, #30
 8008d84:	f100 8103 	bmi.w	8008f8e <_printf_float+0x44e>
 8008d88:	68e0      	ldr	r0, [r4, #12]
 8008d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d8c:	4298      	cmp	r0, r3
 8008d8e:	bfb8      	it	lt
 8008d90:	4618      	movlt	r0, r3
 8008d92:	e734      	b.n	8008bfe <_printf_float+0xbe>
 8008d94:	2301      	movs	r3, #1
 8008d96:	464a      	mov	r2, r9
 8008d98:	4631      	mov	r1, r6
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	47b8      	blx	r7
 8008d9e:	3001      	adds	r0, #1
 8008da0:	f43f af2b 	beq.w	8008bfa <_printf_float+0xba>
 8008da4:	f108 0801 	add.w	r8, r8, #1
 8008da8:	e7e6      	b.n	8008d78 <_printf_float+0x238>
 8008daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	dc2b      	bgt.n	8008e08 <_printf_float+0x2c8>
 8008db0:	2301      	movs	r3, #1
 8008db2:	4a26      	ldr	r2, [pc, #152]	; (8008e4c <_printf_float+0x30c>)
 8008db4:	4631      	mov	r1, r6
 8008db6:	4628      	mov	r0, r5
 8008db8:	47b8      	blx	r7
 8008dba:	3001      	adds	r0, #1
 8008dbc:	f43f af1d 	beq.w	8008bfa <_printf_float+0xba>
 8008dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc2:	b923      	cbnz	r3, 8008dce <_printf_float+0x28e>
 8008dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc6:	b913      	cbnz	r3, 8008dce <_printf_float+0x28e>
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	07d9      	lsls	r1, r3, #31
 8008dcc:	d5d8      	bpl.n	8008d80 <_printf_float+0x240>
 8008dce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dd2:	4631      	mov	r1, r6
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	47b8      	blx	r7
 8008dd8:	3001      	adds	r0, #1
 8008dda:	f43f af0e 	beq.w	8008bfa <_printf_float+0xba>
 8008dde:	f04f 0900 	mov.w	r9, #0
 8008de2:	f104 0a1a 	add.w	sl, r4, #26
 8008de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de8:	425b      	negs	r3, r3
 8008dea:	454b      	cmp	r3, r9
 8008dec:	dc01      	bgt.n	8008df2 <_printf_float+0x2b2>
 8008dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008df0:	e794      	b.n	8008d1c <_printf_float+0x1dc>
 8008df2:	2301      	movs	r3, #1
 8008df4:	4652      	mov	r2, sl
 8008df6:	4631      	mov	r1, r6
 8008df8:	4628      	mov	r0, r5
 8008dfa:	47b8      	blx	r7
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	f43f aefc 	beq.w	8008bfa <_printf_float+0xba>
 8008e02:	f109 0901 	add.w	r9, r9, #1
 8008e06:	e7ee      	b.n	8008de6 <_printf_float+0x2a6>
 8008e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	bfa8      	it	ge
 8008e10:	461a      	movge	r2, r3
 8008e12:	2a00      	cmp	r2, #0
 8008e14:	4691      	mov	r9, r2
 8008e16:	dd07      	ble.n	8008e28 <_printf_float+0x2e8>
 8008e18:	4613      	mov	r3, r2
 8008e1a:	4631      	mov	r1, r6
 8008e1c:	4642      	mov	r2, r8
 8008e1e:	4628      	mov	r0, r5
 8008e20:	47b8      	blx	r7
 8008e22:	3001      	adds	r0, #1
 8008e24:	f43f aee9 	beq.w	8008bfa <_printf_float+0xba>
 8008e28:	f104 031a 	add.w	r3, r4, #26
 8008e2c:	f04f 0b00 	mov.w	fp, #0
 8008e30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e34:	9306      	str	r3, [sp, #24]
 8008e36:	e015      	b.n	8008e64 <_printf_float+0x324>
 8008e38:	7fefffff 	.word	0x7fefffff
 8008e3c:	0800aa5c 	.word	0x0800aa5c
 8008e40:	0800aa58 	.word	0x0800aa58
 8008e44:	0800aa64 	.word	0x0800aa64
 8008e48:	0800aa60 	.word	0x0800aa60
 8008e4c:	0800aa68 	.word	0x0800aa68
 8008e50:	2301      	movs	r3, #1
 8008e52:	9a06      	ldr	r2, [sp, #24]
 8008e54:	4631      	mov	r1, r6
 8008e56:	4628      	mov	r0, r5
 8008e58:	47b8      	blx	r7
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	f43f aecd 	beq.w	8008bfa <_printf_float+0xba>
 8008e60:	f10b 0b01 	add.w	fp, fp, #1
 8008e64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008e68:	ebaa 0309 	sub.w	r3, sl, r9
 8008e6c:	455b      	cmp	r3, fp
 8008e6e:	dcef      	bgt.n	8008e50 <_printf_float+0x310>
 8008e70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e74:	429a      	cmp	r2, r3
 8008e76:	44d0      	add	r8, sl
 8008e78:	db15      	blt.n	8008ea6 <_printf_float+0x366>
 8008e7a:	6823      	ldr	r3, [r4, #0]
 8008e7c:	07da      	lsls	r2, r3, #31
 8008e7e:	d412      	bmi.n	8008ea6 <_printf_float+0x366>
 8008e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e84:	eba3 020a 	sub.w	r2, r3, sl
 8008e88:	eba3 0a01 	sub.w	sl, r3, r1
 8008e8c:	4592      	cmp	sl, r2
 8008e8e:	bfa8      	it	ge
 8008e90:	4692      	movge	sl, r2
 8008e92:	f1ba 0f00 	cmp.w	sl, #0
 8008e96:	dc0e      	bgt.n	8008eb6 <_printf_float+0x376>
 8008e98:	f04f 0800 	mov.w	r8, #0
 8008e9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ea0:	f104 091a 	add.w	r9, r4, #26
 8008ea4:	e019      	b.n	8008eda <_printf_float+0x39a>
 8008ea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eaa:	4631      	mov	r1, r6
 8008eac:	4628      	mov	r0, r5
 8008eae:	47b8      	blx	r7
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	d1e5      	bne.n	8008e80 <_printf_float+0x340>
 8008eb4:	e6a1      	b.n	8008bfa <_printf_float+0xba>
 8008eb6:	4653      	mov	r3, sl
 8008eb8:	4642      	mov	r2, r8
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	47b8      	blx	r7
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	d1e9      	bne.n	8008e98 <_printf_float+0x358>
 8008ec4:	e699      	b.n	8008bfa <_printf_float+0xba>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	464a      	mov	r2, r9
 8008eca:	4631      	mov	r1, r6
 8008ecc:	4628      	mov	r0, r5
 8008ece:	47b8      	blx	r7
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	f43f ae92 	beq.w	8008bfa <_printf_float+0xba>
 8008ed6:	f108 0801 	add.w	r8, r8, #1
 8008eda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ede:	1a9b      	subs	r3, r3, r2
 8008ee0:	eba3 030a 	sub.w	r3, r3, sl
 8008ee4:	4543      	cmp	r3, r8
 8008ee6:	dcee      	bgt.n	8008ec6 <_printf_float+0x386>
 8008ee8:	e74a      	b.n	8008d80 <_printf_float+0x240>
 8008eea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eec:	2a01      	cmp	r2, #1
 8008eee:	dc01      	bgt.n	8008ef4 <_printf_float+0x3b4>
 8008ef0:	07db      	lsls	r3, r3, #31
 8008ef2:	d53a      	bpl.n	8008f6a <_printf_float+0x42a>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	4642      	mov	r2, r8
 8008ef8:	4631      	mov	r1, r6
 8008efa:	4628      	mov	r0, r5
 8008efc:	47b8      	blx	r7
 8008efe:	3001      	adds	r0, #1
 8008f00:	f43f ae7b 	beq.w	8008bfa <_printf_float+0xba>
 8008f04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f08:	4631      	mov	r1, r6
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	47b8      	blx	r7
 8008f0e:	3001      	adds	r0, #1
 8008f10:	f108 0801 	add.w	r8, r8, #1
 8008f14:	f43f ae71 	beq.w	8008bfa <_printf_float+0xba>
 8008f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f103 3aff 	add.w	sl, r3, #4294967295
 8008f20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f24:	2300      	movs	r3, #0
 8008f26:	f7f7 fdcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f2a:	b9c8      	cbnz	r0, 8008f60 <_printf_float+0x420>
 8008f2c:	4653      	mov	r3, sl
 8008f2e:	4642      	mov	r2, r8
 8008f30:	4631      	mov	r1, r6
 8008f32:	4628      	mov	r0, r5
 8008f34:	47b8      	blx	r7
 8008f36:	3001      	adds	r0, #1
 8008f38:	d10e      	bne.n	8008f58 <_printf_float+0x418>
 8008f3a:	e65e      	b.n	8008bfa <_printf_float+0xba>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	4652      	mov	r2, sl
 8008f40:	4631      	mov	r1, r6
 8008f42:	4628      	mov	r0, r5
 8008f44:	47b8      	blx	r7
 8008f46:	3001      	adds	r0, #1
 8008f48:	f43f ae57 	beq.w	8008bfa <_printf_float+0xba>
 8008f4c:	f108 0801 	add.w	r8, r8, #1
 8008f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f52:	3b01      	subs	r3, #1
 8008f54:	4543      	cmp	r3, r8
 8008f56:	dcf1      	bgt.n	8008f3c <_printf_float+0x3fc>
 8008f58:	464b      	mov	r3, r9
 8008f5a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f5e:	e6de      	b.n	8008d1e <_printf_float+0x1de>
 8008f60:	f04f 0800 	mov.w	r8, #0
 8008f64:	f104 0a1a 	add.w	sl, r4, #26
 8008f68:	e7f2      	b.n	8008f50 <_printf_float+0x410>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e7df      	b.n	8008f2e <_printf_float+0x3ee>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	464a      	mov	r2, r9
 8008f72:	4631      	mov	r1, r6
 8008f74:	4628      	mov	r0, r5
 8008f76:	47b8      	blx	r7
 8008f78:	3001      	adds	r0, #1
 8008f7a:	f43f ae3e 	beq.w	8008bfa <_printf_float+0xba>
 8008f7e:	f108 0801 	add.w	r8, r8, #1
 8008f82:	68e3      	ldr	r3, [r4, #12]
 8008f84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f86:	1a9b      	subs	r3, r3, r2
 8008f88:	4543      	cmp	r3, r8
 8008f8a:	dcf0      	bgt.n	8008f6e <_printf_float+0x42e>
 8008f8c:	e6fc      	b.n	8008d88 <_printf_float+0x248>
 8008f8e:	f04f 0800 	mov.w	r8, #0
 8008f92:	f104 0919 	add.w	r9, r4, #25
 8008f96:	e7f4      	b.n	8008f82 <_printf_float+0x442>
 8008f98:	2900      	cmp	r1, #0
 8008f9a:	f43f ae8b 	beq.w	8008cb4 <_printf_float+0x174>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008fa4:	ab09      	add	r3, sp, #36	; 0x24
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	ec49 8b10 	vmov	d0, r8, r9
 8008fac:	6022      	str	r2, [r4, #0]
 8008fae:	f8cd a004 	str.w	sl, [sp, #4]
 8008fb2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f7ff fd2e 	bl	8008a18 <__cvt>
 8008fbc:	4680      	mov	r8, r0
 8008fbe:	e648      	b.n	8008c52 <_printf_float+0x112>

08008fc0 <_printf_common>:
 8008fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc4:	4691      	mov	r9, r2
 8008fc6:	461f      	mov	r7, r3
 8008fc8:	688a      	ldr	r2, [r1, #8]
 8008fca:	690b      	ldr	r3, [r1, #16]
 8008fcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	bfb8      	it	lt
 8008fd4:	4613      	movlt	r3, r2
 8008fd6:	f8c9 3000 	str.w	r3, [r9]
 8008fda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fde:	4606      	mov	r6, r0
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	b112      	cbz	r2, 8008fea <_printf_common+0x2a>
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	f8c9 3000 	str.w	r3, [r9]
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	0699      	lsls	r1, r3, #26
 8008fee:	bf42      	ittt	mi
 8008ff0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008ff4:	3302      	addmi	r3, #2
 8008ff6:	f8c9 3000 	strmi.w	r3, [r9]
 8008ffa:	6825      	ldr	r5, [r4, #0]
 8008ffc:	f015 0506 	ands.w	r5, r5, #6
 8009000:	d107      	bne.n	8009012 <_printf_common+0x52>
 8009002:	f104 0a19 	add.w	sl, r4, #25
 8009006:	68e3      	ldr	r3, [r4, #12]
 8009008:	f8d9 2000 	ldr.w	r2, [r9]
 800900c:	1a9b      	subs	r3, r3, r2
 800900e:	42ab      	cmp	r3, r5
 8009010:	dc28      	bgt.n	8009064 <_printf_common+0xa4>
 8009012:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009016:	6822      	ldr	r2, [r4, #0]
 8009018:	3300      	adds	r3, #0
 800901a:	bf18      	it	ne
 800901c:	2301      	movne	r3, #1
 800901e:	0692      	lsls	r2, r2, #26
 8009020:	d42d      	bmi.n	800907e <_printf_common+0xbe>
 8009022:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009026:	4639      	mov	r1, r7
 8009028:	4630      	mov	r0, r6
 800902a:	47c0      	blx	r8
 800902c:	3001      	adds	r0, #1
 800902e:	d020      	beq.n	8009072 <_printf_common+0xb2>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	68e5      	ldr	r5, [r4, #12]
 8009034:	f8d9 2000 	ldr.w	r2, [r9]
 8009038:	f003 0306 	and.w	r3, r3, #6
 800903c:	2b04      	cmp	r3, #4
 800903e:	bf08      	it	eq
 8009040:	1aad      	subeq	r5, r5, r2
 8009042:	68a3      	ldr	r3, [r4, #8]
 8009044:	6922      	ldr	r2, [r4, #16]
 8009046:	bf0c      	ite	eq
 8009048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800904c:	2500      	movne	r5, #0
 800904e:	4293      	cmp	r3, r2
 8009050:	bfc4      	itt	gt
 8009052:	1a9b      	subgt	r3, r3, r2
 8009054:	18ed      	addgt	r5, r5, r3
 8009056:	f04f 0900 	mov.w	r9, #0
 800905a:	341a      	adds	r4, #26
 800905c:	454d      	cmp	r5, r9
 800905e:	d11a      	bne.n	8009096 <_printf_common+0xd6>
 8009060:	2000      	movs	r0, #0
 8009062:	e008      	b.n	8009076 <_printf_common+0xb6>
 8009064:	2301      	movs	r3, #1
 8009066:	4652      	mov	r2, sl
 8009068:	4639      	mov	r1, r7
 800906a:	4630      	mov	r0, r6
 800906c:	47c0      	blx	r8
 800906e:	3001      	adds	r0, #1
 8009070:	d103      	bne.n	800907a <_printf_common+0xba>
 8009072:	f04f 30ff 	mov.w	r0, #4294967295
 8009076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800907a:	3501      	adds	r5, #1
 800907c:	e7c3      	b.n	8009006 <_printf_common+0x46>
 800907e:	18e1      	adds	r1, r4, r3
 8009080:	1c5a      	adds	r2, r3, #1
 8009082:	2030      	movs	r0, #48	; 0x30
 8009084:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009088:	4422      	add	r2, r4
 800908a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800908e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009092:	3302      	adds	r3, #2
 8009094:	e7c5      	b.n	8009022 <_printf_common+0x62>
 8009096:	2301      	movs	r3, #1
 8009098:	4622      	mov	r2, r4
 800909a:	4639      	mov	r1, r7
 800909c:	4630      	mov	r0, r6
 800909e:	47c0      	blx	r8
 80090a0:	3001      	adds	r0, #1
 80090a2:	d0e6      	beq.n	8009072 <_printf_common+0xb2>
 80090a4:	f109 0901 	add.w	r9, r9, #1
 80090a8:	e7d8      	b.n	800905c <_printf_common+0x9c>
	...

080090ac <_printf_i>:
 80090ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80090b4:	460c      	mov	r4, r1
 80090b6:	7e09      	ldrb	r1, [r1, #24]
 80090b8:	b085      	sub	sp, #20
 80090ba:	296e      	cmp	r1, #110	; 0x6e
 80090bc:	4617      	mov	r7, r2
 80090be:	4606      	mov	r6, r0
 80090c0:	4698      	mov	r8, r3
 80090c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090c4:	f000 80b3 	beq.w	800922e <_printf_i+0x182>
 80090c8:	d822      	bhi.n	8009110 <_printf_i+0x64>
 80090ca:	2963      	cmp	r1, #99	; 0x63
 80090cc:	d036      	beq.n	800913c <_printf_i+0x90>
 80090ce:	d80a      	bhi.n	80090e6 <_printf_i+0x3a>
 80090d0:	2900      	cmp	r1, #0
 80090d2:	f000 80b9 	beq.w	8009248 <_printf_i+0x19c>
 80090d6:	2958      	cmp	r1, #88	; 0x58
 80090d8:	f000 8083 	beq.w	80091e2 <_printf_i+0x136>
 80090dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80090e4:	e032      	b.n	800914c <_printf_i+0xa0>
 80090e6:	2964      	cmp	r1, #100	; 0x64
 80090e8:	d001      	beq.n	80090ee <_printf_i+0x42>
 80090ea:	2969      	cmp	r1, #105	; 0x69
 80090ec:	d1f6      	bne.n	80090dc <_printf_i+0x30>
 80090ee:	6820      	ldr	r0, [r4, #0]
 80090f0:	6813      	ldr	r3, [r2, #0]
 80090f2:	0605      	lsls	r5, r0, #24
 80090f4:	f103 0104 	add.w	r1, r3, #4
 80090f8:	d52a      	bpl.n	8009150 <_printf_i+0xa4>
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6011      	str	r1, [r2, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	da03      	bge.n	800910a <_printf_i+0x5e>
 8009102:	222d      	movs	r2, #45	; 0x2d
 8009104:	425b      	negs	r3, r3
 8009106:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800910a:	486f      	ldr	r0, [pc, #444]	; (80092c8 <_printf_i+0x21c>)
 800910c:	220a      	movs	r2, #10
 800910e:	e039      	b.n	8009184 <_printf_i+0xd8>
 8009110:	2973      	cmp	r1, #115	; 0x73
 8009112:	f000 809d 	beq.w	8009250 <_printf_i+0x1a4>
 8009116:	d808      	bhi.n	800912a <_printf_i+0x7e>
 8009118:	296f      	cmp	r1, #111	; 0x6f
 800911a:	d020      	beq.n	800915e <_printf_i+0xb2>
 800911c:	2970      	cmp	r1, #112	; 0x70
 800911e:	d1dd      	bne.n	80090dc <_printf_i+0x30>
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	f043 0320 	orr.w	r3, r3, #32
 8009126:	6023      	str	r3, [r4, #0]
 8009128:	e003      	b.n	8009132 <_printf_i+0x86>
 800912a:	2975      	cmp	r1, #117	; 0x75
 800912c:	d017      	beq.n	800915e <_printf_i+0xb2>
 800912e:	2978      	cmp	r1, #120	; 0x78
 8009130:	d1d4      	bne.n	80090dc <_printf_i+0x30>
 8009132:	2378      	movs	r3, #120	; 0x78
 8009134:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009138:	4864      	ldr	r0, [pc, #400]	; (80092cc <_printf_i+0x220>)
 800913a:	e055      	b.n	80091e8 <_printf_i+0x13c>
 800913c:	6813      	ldr	r3, [r2, #0]
 800913e:	1d19      	adds	r1, r3, #4
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6011      	str	r1, [r2, #0]
 8009144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800914c:	2301      	movs	r3, #1
 800914e:	e08c      	b.n	800926a <_printf_i+0x1be>
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	6011      	str	r1, [r2, #0]
 8009154:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009158:	bf18      	it	ne
 800915a:	b21b      	sxthne	r3, r3
 800915c:	e7cf      	b.n	80090fe <_printf_i+0x52>
 800915e:	6813      	ldr	r3, [r2, #0]
 8009160:	6825      	ldr	r5, [r4, #0]
 8009162:	1d18      	adds	r0, r3, #4
 8009164:	6010      	str	r0, [r2, #0]
 8009166:	0628      	lsls	r0, r5, #24
 8009168:	d501      	bpl.n	800916e <_printf_i+0xc2>
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	e002      	b.n	8009174 <_printf_i+0xc8>
 800916e:	0668      	lsls	r0, r5, #25
 8009170:	d5fb      	bpl.n	800916a <_printf_i+0xbe>
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	4854      	ldr	r0, [pc, #336]	; (80092c8 <_printf_i+0x21c>)
 8009176:	296f      	cmp	r1, #111	; 0x6f
 8009178:	bf14      	ite	ne
 800917a:	220a      	movne	r2, #10
 800917c:	2208      	moveq	r2, #8
 800917e:	2100      	movs	r1, #0
 8009180:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009184:	6865      	ldr	r5, [r4, #4]
 8009186:	60a5      	str	r5, [r4, #8]
 8009188:	2d00      	cmp	r5, #0
 800918a:	f2c0 8095 	blt.w	80092b8 <_printf_i+0x20c>
 800918e:	6821      	ldr	r1, [r4, #0]
 8009190:	f021 0104 	bic.w	r1, r1, #4
 8009194:	6021      	str	r1, [r4, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d13d      	bne.n	8009216 <_printf_i+0x16a>
 800919a:	2d00      	cmp	r5, #0
 800919c:	f040 808e 	bne.w	80092bc <_printf_i+0x210>
 80091a0:	4665      	mov	r5, ip
 80091a2:	2a08      	cmp	r2, #8
 80091a4:	d10b      	bne.n	80091be <_printf_i+0x112>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	07db      	lsls	r3, r3, #31
 80091aa:	d508      	bpl.n	80091be <_printf_i+0x112>
 80091ac:	6923      	ldr	r3, [r4, #16]
 80091ae:	6862      	ldr	r2, [r4, #4]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	bfde      	ittt	le
 80091b4:	2330      	movle	r3, #48	; 0x30
 80091b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091be:	ebac 0305 	sub.w	r3, ip, r5
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	f8cd 8000 	str.w	r8, [sp]
 80091c8:	463b      	mov	r3, r7
 80091ca:	aa03      	add	r2, sp, #12
 80091cc:	4621      	mov	r1, r4
 80091ce:	4630      	mov	r0, r6
 80091d0:	f7ff fef6 	bl	8008fc0 <_printf_common>
 80091d4:	3001      	adds	r0, #1
 80091d6:	d14d      	bne.n	8009274 <_printf_i+0x1c8>
 80091d8:	f04f 30ff 	mov.w	r0, #4294967295
 80091dc:	b005      	add	sp, #20
 80091de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091e2:	4839      	ldr	r0, [pc, #228]	; (80092c8 <_printf_i+0x21c>)
 80091e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80091e8:	6813      	ldr	r3, [r2, #0]
 80091ea:	6821      	ldr	r1, [r4, #0]
 80091ec:	1d1d      	adds	r5, r3, #4
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6015      	str	r5, [r2, #0]
 80091f2:	060a      	lsls	r2, r1, #24
 80091f4:	d50b      	bpl.n	800920e <_printf_i+0x162>
 80091f6:	07ca      	lsls	r2, r1, #31
 80091f8:	bf44      	itt	mi
 80091fa:	f041 0120 	orrmi.w	r1, r1, #32
 80091fe:	6021      	strmi	r1, [r4, #0]
 8009200:	b91b      	cbnz	r3, 800920a <_printf_i+0x15e>
 8009202:	6822      	ldr	r2, [r4, #0]
 8009204:	f022 0220 	bic.w	r2, r2, #32
 8009208:	6022      	str	r2, [r4, #0]
 800920a:	2210      	movs	r2, #16
 800920c:	e7b7      	b.n	800917e <_printf_i+0xd2>
 800920e:	064d      	lsls	r5, r1, #25
 8009210:	bf48      	it	mi
 8009212:	b29b      	uxthmi	r3, r3
 8009214:	e7ef      	b.n	80091f6 <_printf_i+0x14a>
 8009216:	4665      	mov	r5, ip
 8009218:	fbb3 f1f2 	udiv	r1, r3, r2
 800921c:	fb02 3311 	mls	r3, r2, r1, r3
 8009220:	5cc3      	ldrb	r3, [r0, r3]
 8009222:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009226:	460b      	mov	r3, r1
 8009228:	2900      	cmp	r1, #0
 800922a:	d1f5      	bne.n	8009218 <_printf_i+0x16c>
 800922c:	e7b9      	b.n	80091a2 <_printf_i+0xf6>
 800922e:	6813      	ldr	r3, [r2, #0]
 8009230:	6825      	ldr	r5, [r4, #0]
 8009232:	6961      	ldr	r1, [r4, #20]
 8009234:	1d18      	adds	r0, r3, #4
 8009236:	6010      	str	r0, [r2, #0]
 8009238:	0628      	lsls	r0, r5, #24
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	d501      	bpl.n	8009242 <_printf_i+0x196>
 800923e:	6019      	str	r1, [r3, #0]
 8009240:	e002      	b.n	8009248 <_printf_i+0x19c>
 8009242:	066a      	lsls	r2, r5, #25
 8009244:	d5fb      	bpl.n	800923e <_printf_i+0x192>
 8009246:	8019      	strh	r1, [r3, #0]
 8009248:	2300      	movs	r3, #0
 800924a:	6123      	str	r3, [r4, #16]
 800924c:	4665      	mov	r5, ip
 800924e:	e7b9      	b.n	80091c4 <_printf_i+0x118>
 8009250:	6813      	ldr	r3, [r2, #0]
 8009252:	1d19      	adds	r1, r3, #4
 8009254:	6011      	str	r1, [r2, #0]
 8009256:	681d      	ldr	r5, [r3, #0]
 8009258:	6862      	ldr	r2, [r4, #4]
 800925a:	2100      	movs	r1, #0
 800925c:	4628      	mov	r0, r5
 800925e:	f7f6 ffbf 	bl	80001e0 <memchr>
 8009262:	b108      	cbz	r0, 8009268 <_printf_i+0x1bc>
 8009264:	1b40      	subs	r0, r0, r5
 8009266:	6060      	str	r0, [r4, #4]
 8009268:	6863      	ldr	r3, [r4, #4]
 800926a:	6123      	str	r3, [r4, #16]
 800926c:	2300      	movs	r3, #0
 800926e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009272:	e7a7      	b.n	80091c4 <_printf_i+0x118>
 8009274:	6923      	ldr	r3, [r4, #16]
 8009276:	462a      	mov	r2, r5
 8009278:	4639      	mov	r1, r7
 800927a:	4630      	mov	r0, r6
 800927c:	47c0      	blx	r8
 800927e:	3001      	adds	r0, #1
 8009280:	d0aa      	beq.n	80091d8 <_printf_i+0x12c>
 8009282:	6823      	ldr	r3, [r4, #0]
 8009284:	079b      	lsls	r3, r3, #30
 8009286:	d413      	bmi.n	80092b0 <_printf_i+0x204>
 8009288:	68e0      	ldr	r0, [r4, #12]
 800928a:	9b03      	ldr	r3, [sp, #12]
 800928c:	4298      	cmp	r0, r3
 800928e:	bfb8      	it	lt
 8009290:	4618      	movlt	r0, r3
 8009292:	e7a3      	b.n	80091dc <_printf_i+0x130>
 8009294:	2301      	movs	r3, #1
 8009296:	464a      	mov	r2, r9
 8009298:	4639      	mov	r1, r7
 800929a:	4630      	mov	r0, r6
 800929c:	47c0      	blx	r8
 800929e:	3001      	adds	r0, #1
 80092a0:	d09a      	beq.n	80091d8 <_printf_i+0x12c>
 80092a2:	3501      	adds	r5, #1
 80092a4:	68e3      	ldr	r3, [r4, #12]
 80092a6:	9a03      	ldr	r2, [sp, #12]
 80092a8:	1a9b      	subs	r3, r3, r2
 80092aa:	42ab      	cmp	r3, r5
 80092ac:	dcf2      	bgt.n	8009294 <_printf_i+0x1e8>
 80092ae:	e7eb      	b.n	8009288 <_printf_i+0x1dc>
 80092b0:	2500      	movs	r5, #0
 80092b2:	f104 0919 	add.w	r9, r4, #25
 80092b6:	e7f5      	b.n	80092a4 <_printf_i+0x1f8>
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1ac      	bne.n	8009216 <_printf_i+0x16a>
 80092bc:	7803      	ldrb	r3, [r0, #0]
 80092be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092c6:	e76c      	b.n	80091a2 <_printf_i+0xf6>
 80092c8:	0800aa6a 	.word	0x0800aa6a
 80092cc:	0800aa7b 	.word	0x0800aa7b

080092d0 <_sbrk_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4c06      	ldr	r4, [pc, #24]	; (80092ec <_sbrk_r+0x1c>)
 80092d4:	2300      	movs	r3, #0
 80092d6:	4605      	mov	r5, r0
 80092d8:	4608      	mov	r0, r1
 80092da:	6023      	str	r3, [r4, #0]
 80092dc:	f7f8 fe3a 	bl	8001f54 <_sbrk>
 80092e0:	1c43      	adds	r3, r0, #1
 80092e2:	d102      	bne.n	80092ea <_sbrk_r+0x1a>
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	b103      	cbz	r3, 80092ea <_sbrk_r+0x1a>
 80092e8:	602b      	str	r3, [r5, #0]
 80092ea:	bd38      	pop	{r3, r4, r5, pc}
 80092ec:	20001db8 	.word	0x20001db8

080092f0 <siprintf>:
 80092f0:	b40e      	push	{r1, r2, r3}
 80092f2:	b500      	push	{lr}
 80092f4:	b09c      	sub	sp, #112	; 0x70
 80092f6:	ab1d      	add	r3, sp, #116	; 0x74
 80092f8:	9002      	str	r0, [sp, #8]
 80092fa:	9006      	str	r0, [sp, #24]
 80092fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009300:	4809      	ldr	r0, [pc, #36]	; (8009328 <siprintf+0x38>)
 8009302:	9107      	str	r1, [sp, #28]
 8009304:	9104      	str	r1, [sp, #16]
 8009306:	4909      	ldr	r1, [pc, #36]	; (800932c <siprintf+0x3c>)
 8009308:	f853 2b04 	ldr.w	r2, [r3], #4
 800930c:	9105      	str	r1, [sp, #20]
 800930e:	6800      	ldr	r0, [r0, #0]
 8009310:	9301      	str	r3, [sp, #4]
 8009312:	a902      	add	r1, sp, #8
 8009314:	f001 f9ae 	bl	800a674 <_svfiprintf_r>
 8009318:	9b02      	ldr	r3, [sp, #8]
 800931a:	2200      	movs	r2, #0
 800931c:	701a      	strb	r2, [r3, #0]
 800931e:	b01c      	add	sp, #112	; 0x70
 8009320:	f85d eb04 	ldr.w	lr, [sp], #4
 8009324:	b003      	add	sp, #12
 8009326:	4770      	bx	lr
 8009328:	2000017c 	.word	0x2000017c
 800932c:	ffff0208 	.word	0xffff0208

08009330 <quorem>:
 8009330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009334:	6903      	ldr	r3, [r0, #16]
 8009336:	690c      	ldr	r4, [r1, #16]
 8009338:	42a3      	cmp	r3, r4
 800933a:	4680      	mov	r8, r0
 800933c:	f2c0 8082 	blt.w	8009444 <quorem+0x114>
 8009340:	3c01      	subs	r4, #1
 8009342:	f101 0714 	add.w	r7, r1, #20
 8009346:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800934a:	f100 0614 	add.w	r6, r0, #20
 800934e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009352:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009356:	eb06 030c 	add.w	r3, r6, ip
 800935a:	3501      	adds	r5, #1
 800935c:	eb07 090c 	add.w	r9, r7, ip
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	fbb0 f5f5 	udiv	r5, r0, r5
 8009366:	b395      	cbz	r5, 80093ce <quorem+0x9e>
 8009368:	f04f 0a00 	mov.w	sl, #0
 800936c:	4638      	mov	r0, r7
 800936e:	46b6      	mov	lr, r6
 8009370:	46d3      	mov	fp, sl
 8009372:	f850 2b04 	ldr.w	r2, [r0], #4
 8009376:	b293      	uxth	r3, r2
 8009378:	fb05 a303 	mla	r3, r5, r3, sl
 800937c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009380:	b29b      	uxth	r3, r3
 8009382:	ebab 0303 	sub.w	r3, fp, r3
 8009386:	0c12      	lsrs	r2, r2, #16
 8009388:	f8de b000 	ldr.w	fp, [lr]
 800938c:	fb05 a202 	mla	r2, r5, r2, sl
 8009390:	fa13 f38b 	uxtah	r3, r3, fp
 8009394:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009398:	fa1f fb82 	uxth.w	fp, r2
 800939c:	f8de 2000 	ldr.w	r2, [lr]
 80093a0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80093a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093ae:	4581      	cmp	r9, r0
 80093b0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80093b4:	f84e 3b04 	str.w	r3, [lr], #4
 80093b8:	d2db      	bcs.n	8009372 <quorem+0x42>
 80093ba:	f856 300c 	ldr.w	r3, [r6, ip]
 80093be:	b933      	cbnz	r3, 80093ce <quorem+0x9e>
 80093c0:	9b01      	ldr	r3, [sp, #4]
 80093c2:	3b04      	subs	r3, #4
 80093c4:	429e      	cmp	r6, r3
 80093c6:	461a      	mov	r2, r3
 80093c8:	d330      	bcc.n	800942c <quorem+0xfc>
 80093ca:	f8c8 4010 	str.w	r4, [r8, #16]
 80093ce:	4640      	mov	r0, r8
 80093d0:	f001 f822 	bl	800a418 <__mcmp>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	db25      	blt.n	8009424 <quorem+0xf4>
 80093d8:	3501      	adds	r5, #1
 80093da:	4630      	mov	r0, r6
 80093dc:	f04f 0c00 	mov.w	ip, #0
 80093e0:	f857 2b04 	ldr.w	r2, [r7], #4
 80093e4:	f8d0 e000 	ldr.w	lr, [r0]
 80093e8:	b293      	uxth	r3, r2
 80093ea:	ebac 0303 	sub.w	r3, ip, r3
 80093ee:	0c12      	lsrs	r2, r2, #16
 80093f0:	fa13 f38e 	uxtah	r3, r3, lr
 80093f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80093f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009402:	45b9      	cmp	r9, r7
 8009404:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009408:	f840 3b04 	str.w	r3, [r0], #4
 800940c:	d2e8      	bcs.n	80093e0 <quorem+0xb0>
 800940e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009412:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009416:	b92a      	cbnz	r2, 8009424 <quorem+0xf4>
 8009418:	3b04      	subs	r3, #4
 800941a:	429e      	cmp	r6, r3
 800941c:	461a      	mov	r2, r3
 800941e:	d30b      	bcc.n	8009438 <quorem+0x108>
 8009420:	f8c8 4010 	str.w	r4, [r8, #16]
 8009424:	4628      	mov	r0, r5
 8009426:	b003      	add	sp, #12
 8009428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800942c:	6812      	ldr	r2, [r2, #0]
 800942e:	3b04      	subs	r3, #4
 8009430:	2a00      	cmp	r2, #0
 8009432:	d1ca      	bne.n	80093ca <quorem+0x9a>
 8009434:	3c01      	subs	r4, #1
 8009436:	e7c5      	b.n	80093c4 <quorem+0x94>
 8009438:	6812      	ldr	r2, [r2, #0]
 800943a:	3b04      	subs	r3, #4
 800943c:	2a00      	cmp	r2, #0
 800943e:	d1ef      	bne.n	8009420 <quorem+0xf0>
 8009440:	3c01      	subs	r4, #1
 8009442:	e7ea      	b.n	800941a <quorem+0xea>
 8009444:	2000      	movs	r0, #0
 8009446:	e7ee      	b.n	8009426 <quorem+0xf6>

08009448 <_dtoa_r>:
 8009448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944c:	ec57 6b10 	vmov	r6, r7, d0
 8009450:	b097      	sub	sp, #92	; 0x5c
 8009452:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009454:	9106      	str	r1, [sp, #24]
 8009456:	4604      	mov	r4, r0
 8009458:	920b      	str	r2, [sp, #44]	; 0x2c
 800945a:	9312      	str	r3, [sp, #72]	; 0x48
 800945c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009460:	e9cd 6700 	strd	r6, r7, [sp]
 8009464:	b93d      	cbnz	r5, 8009476 <_dtoa_r+0x2e>
 8009466:	2010      	movs	r0, #16
 8009468:	f7ff fa16 	bl	8008898 <malloc>
 800946c:	6260      	str	r0, [r4, #36]	; 0x24
 800946e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009472:	6005      	str	r5, [r0, #0]
 8009474:	60c5      	str	r5, [r0, #12]
 8009476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009478:	6819      	ldr	r1, [r3, #0]
 800947a:	b151      	cbz	r1, 8009492 <_dtoa_r+0x4a>
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	604a      	str	r2, [r1, #4]
 8009480:	2301      	movs	r3, #1
 8009482:	4093      	lsls	r3, r2
 8009484:	608b      	str	r3, [r1, #8]
 8009486:	4620      	mov	r0, r4
 8009488:	f000 fde5 	bl	800a056 <_Bfree>
 800948c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800948e:	2200      	movs	r2, #0
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	1e3b      	subs	r3, r7, #0
 8009494:	bfbb      	ittet	lt
 8009496:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800949a:	9301      	strlt	r3, [sp, #4]
 800949c:	2300      	movge	r3, #0
 800949e:	2201      	movlt	r2, #1
 80094a0:	bfac      	ite	ge
 80094a2:	f8c8 3000 	strge.w	r3, [r8]
 80094a6:	f8c8 2000 	strlt.w	r2, [r8]
 80094aa:	4baf      	ldr	r3, [pc, #700]	; (8009768 <_dtoa_r+0x320>)
 80094ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80094b0:	ea33 0308 	bics.w	r3, r3, r8
 80094b4:	d114      	bne.n	80094e0 <_dtoa_r+0x98>
 80094b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80094bc:	6013      	str	r3, [r2, #0]
 80094be:	9b00      	ldr	r3, [sp, #0]
 80094c0:	b923      	cbnz	r3, 80094cc <_dtoa_r+0x84>
 80094c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80094c6:	2800      	cmp	r0, #0
 80094c8:	f000 8542 	beq.w	8009f50 <_dtoa_r+0xb08>
 80094cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800977c <_dtoa_r+0x334>
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f000 8544 	beq.w	8009f60 <_dtoa_r+0xb18>
 80094d8:	f10b 0303 	add.w	r3, fp, #3
 80094dc:	f000 bd3e 	b.w	8009f5c <_dtoa_r+0xb14>
 80094e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80094e4:	2200      	movs	r2, #0
 80094e6:	2300      	movs	r3, #0
 80094e8:	4630      	mov	r0, r6
 80094ea:	4639      	mov	r1, r7
 80094ec:	f7f7 faec 	bl	8000ac8 <__aeabi_dcmpeq>
 80094f0:	4681      	mov	r9, r0
 80094f2:	b168      	cbz	r0, 8009510 <_dtoa_r+0xc8>
 80094f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094f6:	2301      	movs	r3, #1
 80094f8:	6013      	str	r3, [r2, #0]
 80094fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 8524 	beq.w	8009f4a <_dtoa_r+0xb02>
 8009502:	4b9a      	ldr	r3, [pc, #616]	; (800976c <_dtoa_r+0x324>)
 8009504:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009506:	f103 3bff 	add.w	fp, r3, #4294967295
 800950a:	6013      	str	r3, [r2, #0]
 800950c:	f000 bd28 	b.w	8009f60 <_dtoa_r+0xb18>
 8009510:	aa14      	add	r2, sp, #80	; 0x50
 8009512:	a915      	add	r1, sp, #84	; 0x54
 8009514:	ec47 6b10 	vmov	d0, r6, r7
 8009518:	4620      	mov	r0, r4
 800951a:	f000 fff4 	bl	800a506 <__d2b>
 800951e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009522:	9004      	str	r0, [sp, #16]
 8009524:	2d00      	cmp	r5, #0
 8009526:	d07c      	beq.n	8009622 <_dtoa_r+0x1da>
 8009528:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800952c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009530:	46b2      	mov	sl, r6
 8009532:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009536:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800953a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800953e:	2200      	movs	r2, #0
 8009540:	4b8b      	ldr	r3, [pc, #556]	; (8009770 <_dtoa_r+0x328>)
 8009542:	4650      	mov	r0, sl
 8009544:	4659      	mov	r1, fp
 8009546:	f7f6 fe9f 	bl	8000288 <__aeabi_dsub>
 800954a:	a381      	add	r3, pc, #516	; (adr r3, 8009750 <_dtoa_r+0x308>)
 800954c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009550:	f7f7 f852 	bl	80005f8 <__aeabi_dmul>
 8009554:	a380      	add	r3, pc, #512	; (adr r3, 8009758 <_dtoa_r+0x310>)
 8009556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955a:	f7f6 fe97 	bl	800028c <__adddf3>
 800955e:	4606      	mov	r6, r0
 8009560:	4628      	mov	r0, r5
 8009562:	460f      	mov	r7, r1
 8009564:	f7f6 ffde 	bl	8000524 <__aeabi_i2d>
 8009568:	a37d      	add	r3, pc, #500	; (adr r3, 8009760 <_dtoa_r+0x318>)
 800956a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956e:	f7f7 f843 	bl	80005f8 <__aeabi_dmul>
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	4630      	mov	r0, r6
 8009578:	4639      	mov	r1, r7
 800957a:	f7f6 fe87 	bl	800028c <__adddf3>
 800957e:	4606      	mov	r6, r0
 8009580:	460f      	mov	r7, r1
 8009582:	f7f7 fae9 	bl	8000b58 <__aeabi_d2iz>
 8009586:	2200      	movs	r2, #0
 8009588:	4682      	mov	sl, r0
 800958a:	2300      	movs	r3, #0
 800958c:	4630      	mov	r0, r6
 800958e:	4639      	mov	r1, r7
 8009590:	f7f7 faa4 	bl	8000adc <__aeabi_dcmplt>
 8009594:	b148      	cbz	r0, 80095aa <_dtoa_r+0x162>
 8009596:	4650      	mov	r0, sl
 8009598:	f7f6 ffc4 	bl	8000524 <__aeabi_i2d>
 800959c:	4632      	mov	r2, r6
 800959e:	463b      	mov	r3, r7
 80095a0:	f7f7 fa92 	bl	8000ac8 <__aeabi_dcmpeq>
 80095a4:	b908      	cbnz	r0, 80095aa <_dtoa_r+0x162>
 80095a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095aa:	f1ba 0f16 	cmp.w	sl, #22
 80095ae:	d859      	bhi.n	8009664 <_dtoa_r+0x21c>
 80095b0:	4970      	ldr	r1, [pc, #448]	; (8009774 <_dtoa_r+0x32c>)
 80095b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80095b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095be:	f7f7 faab 	bl	8000b18 <__aeabi_dcmpgt>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d050      	beq.n	8009668 <_dtoa_r+0x220>
 80095c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095ca:	2300      	movs	r3, #0
 80095cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80095ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095d0:	1b5d      	subs	r5, r3, r5
 80095d2:	f1b5 0801 	subs.w	r8, r5, #1
 80095d6:	bf49      	itett	mi
 80095d8:	f1c5 0301 	rsbmi	r3, r5, #1
 80095dc:	2300      	movpl	r3, #0
 80095de:	9305      	strmi	r3, [sp, #20]
 80095e0:	f04f 0800 	movmi.w	r8, #0
 80095e4:	bf58      	it	pl
 80095e6:	9305      	strpl	r3, [sp, #20]
 80095e8:	f1ba 0f00 	cmp.w	sl, #0
 80095ec:	db3e      	blt.n	800966c <_dtoa_r+0x224>
 80095ee:	2300      	movs	r3, #0
 80095f0:	44d0      	add	r8, sl
 80095f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80095f6:	9307      	str	r3, [sp, #28]
 80095f8:	9b06      	ldr	r3, [sp, #24]
 80095fa:	2b09      	cmp	r3, #9
 80095fc:	f200 8090 	bhi.w	8009720 <_dtoa_r+0x2d8>
 8009600:	2b05      	cmp	r3, #5
 8009602:	bfc4      	itt	gt
 8009604:	3b04      	subgt	r3, #4
 8009606:	9306      	strgt	r3, [sp, #24]
 8009608:	9b06      	ldr	r3, [sp, #24]
 800960a:	f1a3 0302 	sub.w	r3, r3, #2
 800960e:	bfcc      	ite	gt
 8009610:	2500      	movgt	r5, #0
 8009612:	2501      	movle	r5, #1
 8009614:	2b03      	cmp	r3, #3
 8009616:	f200 808f 	bhi.w	8009738 <_dtoa_r+0x2f0>
 800961a:	e8df f003 	tbb	[pc, r3]
 800961e:	7f7d      	.short	0x7f7d
 8009620:	7131      	.short	0x7131
 8009622:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009626:	441d      	add	r5, r3
 8009628:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800962c:	2820      	cmp	r0, #32
 800962e:	dd13      	ble.n	8009658 <_dtoa_r+0x210>
 8009630:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009634:	9b00      	ldr	r3, [sp, #0]
 8009636:	fa08 f800 	lsl.w	r8, r8, r0
 800963a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800963e:	fa23 f000 	lsr.w	r0, r3, r0
 8009642:	ea48 0000 	orr.w	r0, r8, r0
 8009646:	f7f6 ff5d 	bl	8000504 <__aeabi_ui2d>
 800964a:	2301      	movs	r3, #1
 800964c:	4682      	mov	sl, r0
 800964e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009652:	3d01      	subs	r5, #1
 8009654:	9313      	str	r3, [sp, #76]	; 0x4c
 8009656:	e772      	b.n	800953e <_dtoa_r+0xf6>
 8009658:	9b00      	ldr	r3, [sp, #0]
 800965a:	f1c0 0020 	rsb	r0, r0, #32
 800965e:	fa03 f000 	lsl.w	r0, r3, r0
 8009662:	e7f0      	b.n	8009646 <_dtoa_r+0x1fe>
 8009664:	2301      	movs	r3, #1
 8009666:	e7b1      	b.n	80095cc <_dtoa_r+0x184>
 8009668:	900f      	str	r0, [sp, #60]	; 0x3c
 800966a:	e7b0      	b.n	80095ce <_dtoa_r+0x186>
 800966c:	9b05      	ldr	r3, [sp, #20]
 800966e:	eba3 030a 	sub.w	r3, r3, sl
 8009672:	9305      	str	r3, [sp, #20]
 8009674:	f1ca 0300 	rsb	r3, sl, #0
 8009678:	9307      	str	r3, [sp, #28]
 800967a:	2300      	movs	r3, #0
 800967c:	930e      	str	r3, [sp, #56]	; 0x38
 800967e:	e7bb      	b.n	80095f8 <_dtoa_r+0x1b0>
 8009680:	2301      	movs	r3, #1
 8009682:	930a      	str	r3, [sp, #40]	; 0x28
 8009684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009686:	2b00      	cmp	r3, #0
 8009688:	dd59      	ble.n	800973e <_dtoa_r+0x2f6>
 800968a:	9302      	str	r3, [sp, #8]
 800968c:	4699      	mov	r9, r3
 800968e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009690:	2200      	movs	r2, #0
 8009692:	6072      	str	r2, [r6, #4]
 8009694:	2204      	movs	r2, #4
 8009696:	f102 0014 	add.w	r0, r2, #20
 800969a:	4298      	cmp	r0, r3
 800969c:	6871      	ldr	r1, [r6, #4]
 800969e:	d953      	bls.n	8009748 <_dtoa_r+0x300>
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 fca4 	bl	8009fee <_Balloc>
 80096a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096a8:	6030      	str	r0, [r6, #0]
 80096aa:	f1b9 0f0e 	cmp.w	r9, #14
 80096ae:	f8d3 b000 	ldr.w	fp, [r3]
 80096b2:	f200 80e6 	bhi.w	8009882 <_dtoa_r+0x43a>
 80096b6:	2d00      	cmp	r5, #0
 80096b8:	f000 80e3 	beq.w	8009882 <_dtoa_r+0x43a>
 80096bc:	ed9d 7b00 	vldr	d7, [sp]
 80096c0:	f1ba 0f00 	cmp.w	sl, #0
 80096c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80096c8:	dd74      	ble.n	80097b4 <_dtoa_r+0x36c>
 80096ca:	4a2a      	ldr	r2, [pc, #168]	; (8009774 <_dtoa_r+0x32c>)
 80096cc:	f00a 030f 	and.w	r3, sl, #15
 80096d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80096d4:	ed93 7b00 	vldr	d7, [r3]
 80096d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80096dc:	06f0      	lsls	r0, r6, #27
 80096de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80096e2:	d565      	bpl.n	80097b0 <_dtoa_r+0x368>
 80096e4:	4b24      	ldr	r3, [pc, #144]	; (8009778 <_dtoa_r+0x330>)
 80096e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80096ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096ee:	f7f7 f8ad 	bl	800084c <__aeabi_ddiv>
 80096f2:	e9cd 0100 	strd	r0, r1, [sp]
 80096f6:	f006 060f 	and.w	r6, r6, #15
 80096fa:	2503      	movs	r5, #3
 80096fc:	4f1e      	ldr	r7, [pc, #120]	; (8009778 <_dtoa_r+0x330>)
 80096fe:	e04c      	b.n	800979a <_dtoa_r+0x352>
 8009700:	2301      	movs	r3, #1
 8009702:	930a      	str	r3, [sp, #40]	; 0x28
 8009704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009706:	4453      	add	r3, sl
 8009708:	f103 0901 	add.w	r9, r3, #1
 800970c:	9302      	str	r3, [sp, #8]
 800970e:	464b      	mov	r3, r9
 8009710:	2b01      	cmp	r3, #1
 8009712:	bfb8      	it	lt
 8009714:	2301      	movlt	r3, #1
 8009716:	e7ba      	b.n	800968e <_dtoa_r+0x246>
 8009718:	2300      	movs	r3, #0
 800971a:	e7b2      	b.n	8009682 <_dtoa_r+0x23a>
 800971c:	2300      	movs	r3, #0
 800971e:	e7f0      	b.n	8009702 <_dtoa_r+0x2ba>
 8009720:	2501      	movs	r5, #1
 8009722:	2300      	movs	r3, #0
 8009724:	9306      	str	r3, [sp, #24]
 8009726:	950a      	str	r5, [sp, #40]	; 0x28
 8009728:	f04f 33ff 	mov.w	r3, #4294967295
 800972c:	9302      	str	r3, [sp, #8]
 800972e:	4699      	mov	r9, r3
 8009730:	2200      	movs	r2, #0
 8009732:	2312      	movs	r3, #18
 8009734:	920b      	str	r2, [sp, #44]	; 0x2c
 8009736:	e7aa      	b.n	800968e <_dtoa_r+0x246>
 8009738:	2301      	movs	r3, #1
 800973a:	930a      	str	r3, [sp, #40]	; 0x28
 800973c:	e7f4      	b.n	8009728 <_dtoa_r+0x2e0>
 800973e:	2301      	movs	r3, #1
 8009740:	9302      	str	r3, [sp, #8]
 8009742:	4699      	mov	r9, r3
 8009744:	461a      	mov	r2, r3
 8009746:	e7f5      	b.n	8009734 <_dtoa_r+0x2ec>
 8009748:	3101      	adds	r1, #1
 800974a:	6071      	str	r1, [r6, #4]
 800974c:	0052      	lsls	r2, r2, #1
 800974e:	e7a2      	b.n	8009696 <_dtoa_r+0x24e>
 8009750:	636f4361 	.word	0x636f4361
 8009754:	3fd287a7 	.word	0x3fd287a7
 8009758:	8b60c8b3 	.word	0x8b60c8b3
 800975c:	3fc68a28 	.word	0x3fc68a28
 8009760:	509f79fb 	.word	0x509f79fb
 8009764:	3fd34413 	.word	0x3fd34413
 8009768:	7ff00000 	.word	0x7ff00000
 800976c:	0800aa69 	.word	0x0800aa69
 8009770:	3ff80000 	.word	0x3ff80000
 8009774:	0800aac8 	.word	0x0800aac8
 8009778:	0800aaa0 	.word	0x0800aaa0
 800977c:	0800aa95 	.word	0x0800aa95
 8009780:	07f1      	lsls	r1, r6, #31
 8009782:	d508      	bpl.n	8009796 <_dtoa_r+0x34e>
 8009784:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800978c:	f7f6 ff34 	bl	80005f8 <__aeabi_dmul>
 8009790:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009794:	3501      	adds	r5, #1
 8009796:	1076      	asrs	r6, r6, #1
 8009798:	3708      	adds	r7, #8
 800979a:	2e00      	cmp	r6, #0
 800979c:	d1f0      	bne.n	8009780 <_dtoa_r+0x338>
 800979e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80097a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097a6:	f7f7 f851 	bl	800084c <__aeabi_ddiv>
 80097aa:	e9cd 0100 	strd	r0, r1, [sp]
 80097ae:	e01a      	b.n	80097e6 <_dtoa_r+0x39e>
 80097b0:	2502      	movs	r5, #2
 80097b2:	e7a3      	b.n	80096fc <_dtoa_r+0x2b4>
 80097b4:	f000 80a0 	beq.w	80098f8 <_dtoa_r+0x4b0>
 80097b8:	f1ca 0600 	rsb	r6, sl, #0
 80097bc:	4b9f      	ldr	r3, [pc, #636]	; (8009a3c <_dtoa_r+0x5f4>)
 80097be:	4fa0      	ldr	r7, [pc, #640]	; (8009a40 <_dtoa_r+0x5f8>)
 80097c0:	f006 020f 	and.w	r2, r6, #15
 80097c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80097d0:	f7f6 ff12 	bl	80005f8 <__aeabi_dmul>
 80097d4:	e9cd 0100 	strd	r0, r1, [sp]
 80097d8:	1136      	asrs	r6, r6, #4
 80097da:	2300      	movs	r3, #0
 80097dc:	2502      	movs	r5, #2
 80097de:	2e00      	cmp	r6, #0
 80097e0:	d17f      	bne.n	80098e2 <_dtoa_r+0x49a>
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e1      	bne.n	80097aa <_dtoa_r+0x362>
 80097e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f000 8087 	beq.w	80098fc <_dtoa_r+0x4b4>
 80097ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80097f2:	2200      	movs	r2, #0
 80097f4:	4b93      	ldr	r3, [pc, #588]	; (8009a44 <_dtoa_r+0x5fc>)
 80097f6:	4630      	mov	r0, r6
 80097f8:	4639      	mov	r1, r7
 80097fa:	f7f7 f96f 	bl	8000adc <__aeabi_dcmplt>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d07c      	beq.n	80098fc <_dtoa_r+0x4b4>
 8009802:	f1b9 0f00 	cmp.w	r9, #0
 8009806:	d079      	beq.n	80098fc <_dtoa_r+0x4b4>
 8009808:	9b02      	ldr	r3, [sp, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	dd35      	ble.n	800987a <_dtoa_r+0x432>
 800980e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009812:	9308      	str	r3, [sp, #32]
 8009814:	4639      	mov	r1, r7
 8009816:	2200      	movs	r2, #0
 8009818:	4b8b      	ldr	r3, [pc, #556]	; (8009a48 <_dtoa_r+0x600>)
 800981a:	4630      	mov	r0, r6
 800981c:	f7f6 feec 	bl	80005f8 <__aeabi_dmul>
 8009820:	e9cd 0100 	strd	r0, r1, [sp]
 8009824:	9f02      	ldr	r7, [sp, #8]
 8009826:	3501      	adds	r5, #1
 8009828:	4628      	mov	r0, r5
 800982a:	f7f6 fe7b 	bl	8000524 <__aeabi_i2d>
 800982e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009832:	f7f6 fee1 	bl	80005f8 <__aeabi_dmul>
 8009836:	2200      	movs	r2, #0
 8009838:	4b84      	ldr	r3, [pc, #528]	; (8009a4c <_dtoa_r+0x604>)
 800983a:	f7f6 fd27 	bl	800028c <__adddf3>
 800983e:	4605      	mov	r5, r0
 8009840:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009844:	2f00      	cmp	r7, #0
 8009846:	d15d      	bne.n	8009904 <_dtoa_r+0x4bc>
 8009848:	2200      	movs	r2, #0
 800984a:	4b81      	ldr	r3, [pc, #516]	; (8009a50 <_dtoa_r+0x608>)
 800984c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009850:	f7f6 fd1a 	bl	8000288 <__aeabi_dsub>
 8009854:	462a      	mov	r2, r5
 8009856:	4633      	mov	r3, r6
 8009858:	e9cd 0100 	strd	r0, r1, [sp]
 800985c:	f7f7 f95c 	bl	8000b18 <__aeabi_dcmpgt>
 8009860:	2800      	cmp	r0, #0
 8009862:	f040 8288 	bne.w	8009d76 <_dtoa_r+0x92e>
 8009866:	462a      	mov	r2, r5
 8009868:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800986c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009870:	f7f7 f934 	bl	8000adc <__aeabi_dcmplt>
 8009874:	2800      	cmp	r0, #0
 8009876:	f040 827c 	bne.w	8009d72 <_dtoa_r+0x92a>
 800987a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800987e:	e9cd 2300 	strd	r2, r3, [sp]
 8009882:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009884:	2b00      	cmp	r3, #0
 8009886:	f2c0 8150 	blt.w	8009b2a <_dtoa_r+0x6e2>
 800988a:	f1ba 0f0e 	cmp.w	sl, #14
 800988e:	f300 814c 	bgt.w	8009b2a <_dtoa_r+0x6e2>
 8009892:	4b6a      	ldr	r3, [pc, #424]	; (8009a3c <_dtoa_r+0x5f4>)
 8009894:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009898:	ed93 7b00 	vldr	d7, [r3]
 800989c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800989e:	2b00      	cmp	r3, #0
 80098a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80098a4:	f280 80d8 	bge.w	8009a58 <_dtoa_r+0x610>
 80098a8:	f1b9 0f00 	cmp.w	r9, #0
 80098ac:	f300 80d4 	bgt.w	8009a58 <_dtoa_r+0x610>
 80098b0:	f040 825e 	bne.w	8009d70 <_dtoa_r+0x928>
 80098b4:	2200      	movs	r2, #0
 80098b6:	4b66      	ldr	r3, [pc, #408]	; (8009a50 <_dtoa_r+0x608>)
 80098b8:	ec51 0b17 	vmov	r0, r1, d7
 80098bc:	f7f6 fe9c 	bl	80005f8 <__aeabi_dmul>
 80098c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098c4:	f7f7 f91e 	bl	8000b04 <__aeabi_dcmpge>
 80098c8:	464f      	mov	r7, r9
 80098ca:	464e      	mov	r6, r9
 80098cc:	2800      	cmp	r0, #0
 80098ce:	f040 8234 	bne.w	8009d3a <_dtoa_r+0x8f2>
 80098d2:	2331      	movs	r3, #49	; 0x31
 80098d4:	f10b 0501 	add.w	r5, fp, #1
 80098d8:	f88b 3000 	strb.w	r3, [fp]
 80098dc:	f10a 0a01 	add.w	sl, sl, #1
 80098e0:	e22f      	b.n	8009d42 <_dtoa_r+0x8fa>
 80098e2:	07f2      	lsls	r2, r6, #31
 80098e4:	d505      	bpl.n	80098f2 <_dtoa_r+0x4aa>
 80098e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098ea:	f7f6 fe85 	bl	80005f8 <__aeabi_dmul>
 80098ee:	3501      	adds	r5, #1
 80098f0:	2301      	movs	r3, #1
 80098f2:	1076      	asrs	r6, r6, #1
 80098f4:	3708      	adds	r7, #8
 80098f6:	e772      	b.n	80097de <_dtoa_r+0x396>
 80098f8:	2502      	movs	r5, #2
 80098fa:	e774      	b.n	80097e6 <_dtoa_r+0x39e>
 80098fc:	f8cd a020 	str.w	sl, [sp, #32]
 8009900:	464f      	mov	r7, r9
 8009902:	e791      	b.n	8009828 <_dtoa_r+0x3e0>
 8009904:	4b4d      	ldr	r3, [pc, #308]	; (8009a3c <_dtoa_r+0x5f4>)
 8009906:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800990a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800990e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009910:	2b00      	cmp	r3, #0
 8009912:	d047      	beq.n	80099a4 <_dtoa_r+0x55c>
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	2000      	movs	r0, #0
 800991a:	494e      	ldr	r1, [pc, #312]	; (8009a54 <_dtoa_r+0x60c>)
 800991c:	f7f6 ff96 	bl	800084c <__aeabi_ddiv>
 8009920:	462a      	mov	r2, r5
 8009922:	4633      	mov	r3, r6
 8009924:	f7f6 fcb0 	bl	8000288 <__aeabi_dsub>
 8009928:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800992c:	465d      	mov	r5, fp
 800992e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009932:	f7f7 f911 	bl	8000b58 <__aeabi_d2iz>
 8009936:	4606      	mov	r6, r0
 8009938:	f7f6 fdf4 	bl	8000524 <__aeabi_i2d>
 800993c:	4602      	mov	r2, r0
 800993e:	460b      	mov	r3, r1
 8009940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009944:	f7f6 fca0 	bl	8000288 <__aeabi_dsub>
 8009948:	3630      	adds	r6, #48	; 0x30
 800994a:	f805 6b01 	strb.w	r6, [r5], #1
 800994e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009952:	e9cd 0100 	strd	r0, r1, [sp]
 8009956:	f7f7 f8c1 	bl	8000adc <__aeabi_dcmplt>
 800995a:	2800      	cmp	r0, #0
 800995c:	d163      	bne.n	8009a26 <_dtoa_r+0x5de>
 800995e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009962:	2000      	movs	r0, #0
 8009964:	4937      	ldr	r1, [pc, #220]	; (8009a44 <_dtoa_r+0x5fc>)
 8009966:	f7f6 fc8f 	bl	8000288 <__aeabi_dsub>
 800996a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800996e:	f7f7 f8b5 	bl	8000adc <__aeabi_dcmplt>
 8009972:	2800      	cmp	r0, #0
 8009974:	f040 80b7 	bne.w	8009ae6 <_dtoa_r+0x69e>
 8009978:	eba5 030b 	sub.w	r3, r5, fp
 800997c:	429f      	cmp	r7, r3
 800997e:	f77f af7c 	ble.w	800987a <_dtoa_r+0x432>
 8009982:	2200      	movs	r2, #0
 8009984:	4b30      	ldr	r3, [pc, #192]	; (8009a48 <_dtoa_r+0x600>)
 8009986:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800998a:	f7f6 fe35 	bl	80005f8 <__aeabi_dmul>
 800998e:	2200      	movs	r2, #0
 8009990:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009994:	4b2c      	ldr	r3, [pc, #176]	; (8009a48 <_dtoa_r+0x600>)
 8009996:	e9dd 0100 	ldrd	r0, r1, [sp]
 800999a:	f7f6 fe2d 	bl	80005f8 <__aeabi_dmul>
 800999e:	e9cd 0100 	strd	r0, r1, [sp]
 80099a2:	e7c4      	b.n	800992e <_dtoa_r+0x4e6>
 80099a4:	462a      	mov	r2, r5
 80099a6:	4633      	mov	r3, r6
 80099a8:	f7f6 fe26 	bl	80005f8 <__aeabi_dmul>
 80099ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80099b0:	eb0b 0507 	add.w	r5, fp, r7
 80099b4:	465e      	mov	r6, fp
 80099b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099ba:	f7f7 f8cd 	bl	8000b58 <__aeabi_d2iz>
 80099be:	4607      	mov	r7, r0
 80099c0:	f7f6 fdb0 	bl	8000524 <__aeabi_i2d>
 80099c4:	3730      	adds	r7, #48	; 0x30
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099ce:	f7f6 fc5b 	bl	8000288 <__aeabi_dsub>
 80099d2:	f806 7b01 	strb.w	r7, [r6], #1
 80099d6:	42ae      	cmp	r6, r5
 80099d8:	e9cd 0100 	strd	r0, r1, [sp]
 80099dc:	f04f 0200 	mov.w	r2, #0
 80099e0:	d126      	bne.n	8009a30 <_dtoa_r+0x5e8>
 80099e2:	4b1c      	ldr	r3, [pc, #112]	; (8009a54 <_dtoa_r+0x60c>)
 80099e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099e8:	f7f6 fc50 	bl	800028c <__adddf3>
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099f4:	f7f7 f890 	bl	8000b18 <__aeabi_dcmpgt>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d174      	bne.n	8009ae6 <_dtoa_r+0x69e>
 80099fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009a00:	2000      	movs	r0, #0
 8009a02:	4914      	ldr	r1, [pc, #80]	; (8009a54 <_dtoa_r+0x60c>)
 8009a04:	f7f6 fc40 	bl	8000288 <__aeabi_dsub>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a10:	f7f7 f864 	bl	8000adc <__aeabi_dcmplt>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	f43f af30 	beq.w	800987a <_dtoa_r+0x432>
 8009a1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a1e:	2b30      	cmp	r3, #48	; 0x30
 8009a20:	f105 32ff 	add.w	r2, r5, #4294967295
 8009a24:	d002      	beq.n	8009a2c <_dtoa_r+0x5e4>
 8009a26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009a2a:	e04a      	b.n	8009ac2 <_dtoa_r+0x67a>
 8009a2c:	4615      	mov	r5, r2
 8009a2e:	e7f4      	b.n	8009a1a <_dtoa_r+0x5d2>
 8009a30:	4b05      	ldr	r3, [pc, #20]	; (8009a48 <_dtoa_r+0x600>)
 8009a32:	f7f6 fde1 	bl	80005f8 <__aeabi_dmul>
 8009a36:	e9cd 0100 	strd	r0, r1, [sp]
 8009a3a:	e7bc      	b.n	80099b6 <_dtoa_r+0x56e>
 8009a3c:	0800aac8 	.word	0x0800aac8
 8009a40:	0800aaa0 	.word	0x0800aaa0
 8009a44:	3ff00000 	.word	0x3ff00000
 8009a48:	40240000 	.word	0x40240000
 8009a4c:	401c0000 	.word	0x401c0000
 8009a50:	40140000 	.word	0x40140000
 8009a54:	3fe00000 	.word	0x3fe00000
 8009a58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009a5c:	465d      	mov	r5, fp
 8009a5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a62:	4630      	mov	r0, r6
 8009a64:	4639      	mov	r1, r7
 8009a66:	f7f6 fef1 	bl	800084c <__aeabi_ddiv>
 8009a6a:	f7f7 f875 	bl	8000b58 <__aeabi_d2iz>
 8009a6e:	4680      	mov	r8, r0
 8009a70:	f7f6 fd58 	bl	8000524 <__aeabi_i2d>
 8009a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a78:	f7f6 fdbe 	bl	80005f8 <__aeabi_dmul>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	4630      	mov	r0, r6
 8009a82:	4639      	mov	r1, r7
 8009a84:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009a88:	f7f6 fbfe 	bl	8000288 <__aeabi_dsub>
 8009a8c:	f805 6b01 	strb.w	r6, [r5], #1
 8009a90:	eba5 060b 	sub.w	r6, r5, fp
 8009a94:	45b1      	cmp	r9, r6
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	d139      	bne.n	8009b10 <_dtoa_r+0x6c8>
 8009a9c:	f7f6 fbf6 	bl	800028c <__adddf3>
 8009aa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009aa4:	4606      	mov	r6, r0
 8009aa6:	460f      	mov	r7, r1
 8009aa8:	f7f7 f836 	bl	8000b18 <__aeabi_dcmpgt>
 8009aac:	b9c8      	cbnz	r0, 8009ae2 <_dtoa_r+0x69a>
 8009aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	4639      	mov	r1, r7
 8009ab6:	f7f7 f807 	bl	8000ac8 <__aeabi_dcmpeq>
 8009aba:	b110      	cbz	r0, 8009ac2 <_dtoa_r+0x67a>
 8009abc:	f018 0f01 	tst.w	r8, #1
 8009ac0:	d10f      	bne.n	8009ae2 <_dtoa_r+0x69a>
 8009ac2:	9904      	ldr	r1, [sp, #16]
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f000 fac6 	bl	800a056 <_Bfree>
 8009aca:	2300      	movs	r3, #0
 8009acc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ace:	702b      	strb	r3, [r5, #0]
 8009ad0:	f10a 0301 	add.w	r3, sl, #1
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 8241 	beq.w	8009f60 <_dtoa_r+0xb18>
 8009ade:	601d      	str	r5, [r3, #0]
 8009ae0:	e23e      	b.n	8009f60 <_dtoa_r+0xb18>
 8009ae2:	f8cd a020 	str.w	sl, [sp, #32]
 8009ae6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009aea:	2a39      	cmp	r2, #57	; 0x39
 8009aec:	f105 33ff 	add.w	r3, r5, #4294967295
 8009af0:	d108      	bne.n	8009b04 <_dtoa_r+0x6bc>
 8009af2:	459b      	cmp	fp, r3
 8009af4:	d10a      	bne.n	8009b0c <_dtoa_r+0x6c4>
 8009af6:	9b08      	ldr	r3, [sp, #32]
 8009af8:	3301      	adds	r3, #1
 8009afa:	9308      	str	r3, [sp, #32]
 8009afc:	2330      	movs	r3, #48	; 0x30
 8009afe:	f88b 3000 	strb.w	r3, [fp]
 8009b02:	465b      	mov	r3, fp
 8009b04:	781a      	ldrb	r2, [r3, #0]
 8009b06:	3201      	adds	r2, #1
 8009b08:	701a      	strb	r2, [r3, #0]
 8009b0a:	e78c      	b.n	8009a26 <_dtoa_r+0x5de>
 8009b0c:	461d      	mov	r5, r3
 8009b0e:	e7ea      	b.n	8009ae6 <_dtoa_r+0x69e>
 8009b10:	2200      	movs	r2, #0
 8009b12:	4b9b      	ldr	r3, [pc, #620]	; (8009d80 <_dtoa_r+0x938>)
 8009b14:	f7f6 fd70 	bl	80005f8 <__aeabi_dmul>
 8009b18:	2200      	movs	r2, #0
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	460f      	mov	r7, r1
 8009b20:	f7f6 ffd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d09a      	beq.n	8009a5e <_dtoa_r+0x616>
 8009b28:	e7cb      	b.n	8009ac2 <_dtoa_r+0x67a>
 8009b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b2c:	2a00      	cmp	r2, #0
 8009b2e:	f000 808b 	beq.w	8009c48 <_dtoa_r+0x800>
 8009b32:	9a06      	ldr	r2, [sp, #24]
 8009b34:	2a01      	cmp	r2, #1
 8009b36:	dc6e      	bgt.n	8009c16 <_dtoa_r+0x7ce>
 8009b38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b3a:	2a00      	cmp	r2, #0
 8009b3c:	d067      	beq.n	8009c0e <_dtoa_r+0x7c6>
 8009b3e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b42:	9f07      	ldr	r7, [sp, #28]
 8009b44:	9d05      	ldr	r5, [sp, #20]
 8009b46:	9a05      	ldr	r2, [sp, #20]
 8009b48:	2101      	movs	r1, #1
 8009b4a:	441a      	add	r2, r3
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	9205      	str	r2, [sp, #20]
 8009b50:	4498      	add	r8, r3
 8009b52:	f000 fb20 	bl	800a196 <__i2b>
 8009b56:	4606      	mov	r6, r0
 8009b58:	2d00      	cmp	r5, #0
 8009b5a:	dd0c      	ble.n	8009b76 <_dtoa_r+0x72e>
 8009b5c:	f1b8 0f00 	cmp.w	r8, #0
 8009b60:	dd09      	ble.n	8009b76 <_dtoa_r+0x72e>
 8009b62:	4545      	cmp	r5, r8
 8009b64:	9a05      	ldr	r2, [sp, #20]
 8009b66:	462b      	mov	r3, r5
 8009b68:	bfa8      	it	ge
 8009b6a:	4643      	movge	r3, r8
 8009b6c:	1ad2      	subs	r2, r2, r3
 8009b6e:	9205      	str	r2, [sp, #20]
 8009b70:	1aed      	subs	r5, r5, r3
 8009b72:	eba8 0803 	sub.w	r8, r8, r3
 8009b76:	9b07      	ldr	r3, [sp, #28]
 8009b78:	b1eb      	cbz	r3, 8009bb6 <_dtoa_r+0x76e>
 8009b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d067      	beq.n	8009c50 <_dtoa_r+0x808>
 8009b80:	b18f      	cbz	r7, 8009ba6 <_dtoa_r+0x75e>
 8009b82:	4631      	mov	r1, r6
 8009b84:	463a      	mov	r2, r7
 8009b86:	4620      	mov	r0, r4
 8009b88:	f000 fba4 	bl	800a2d4 <__pow5mult>
 8009b8c:	9a04      	ldr	r2, [sp, #16]
 8009b8e:	4601      	mov	r1, r0
 8009b90:	4606      	mov	r6, r0
 8009b92:	4620      	mov	r0, r4
 8009b94:	f000 fb08 	bl	800a1a8 <__multiply>
 8009b98:	9904      	ldr	r1, [sp, #16]
 8009b9a:	9008      	str	r0, [sp, #32]
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	f000 fa5a 	bl	800a056 <_Bfree>
 8009ba2:	9b08      	ldr	r3, [sp, #32]
 8009ba4:	9304      	str	r3, [sp, #16]
 8009ba6:	9b07      	ldr	r3, [sp, #28]
 8009ba8:	1bda      	subs	r2, r3, r7
 8009baa:	d004      	beq.n	8009bb6 <_dtoa_r+0x76e>
 8009bac:	9904      	ldr	r1, [sp, #16]
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f000 fb90 	bl	800a2d4 <__pow5mult>
 8009bb4:	9004      	str	r0, [sp, #16]
 8009bb6:	2101      	movs	r1, #1
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f000 faec 	bl	800a196 <__i2b>
 8009bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bc0:	4607      	mov	r7, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f000 81d0 	beq.w	8009f68 <_dtoa_r+0xb20>
 8009bc8:	461a      	mov	r2, r3
 8009bca:	4601      	mov	r1, r0
 8009bcc:	4620      	mov	r0, r4
 8009bce:	f000 fb81 	bl	800a2d4 <__pow5mult>
 8009bd2:	9b06      	ldr	r3, [sp, #24]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	4607      	mov	r7, r0
 8009bd8:	dc40      	bgt.n	8009c5c <_dtoa_r+0x814>
 8009bda:	9b00      	ldr	r3, [sp, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d139      	bne.n	8009c54 <_dtoa_r+0x80c>
 8009be0:	9b01      	ldr	r3, [sp, #4]
 8009be2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d136      	bne.n	8009c58 <_dtoa_r+0x810>
 8009bea:	9b01      	ldr	r3, [sp, #4]
 8009bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bf0:	0d1b      	lsrs	r3, r3, #20
 8009bf2:	051b      	lsls	r3, r3, #20
 8009bf4:	b12b      	cbz	r3, 8009c02 <_dtoa_r+0x7ba>
 8009bf6:	9b05      	ldr	r3, [sp, #20]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	9305      	str	r3, [sp, #20]
 8009bfc:	f108 0801 	add.w	r8, r8, #1
 8009c00:	2301      	movs	r3, #1
 8009c02:	9307      	str	r3, [sp, #28]
 8009c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d12a      	bne.n	8009c60 <_dtoa_r+0x818>
 8009c0a:	2001      	movs	r0, #1
 8009c0c:	e030      	b.n	8009c70 <_dtoa_r+0x828>
 8009c0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c10:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c14:	e795      	b.n	8009b42 <_dtoa_r+0x6fa>
 8009c16:	9b07      	ldr	r3, [sp, #28]
 8009c18:	f109 37ff 	add.w	r7, r9, #4294967295
 8009c1c:	42bb      	cmp	r3, r7
 8009c1e:	bfbf      	itttt	lt
 8009c20:	9b07      	ldrlt	r3, [sp, #28]
 8009c22:	9707      	strlt	r7, [sp, #28]
 8009c24:	1afa      	sublt	r2, r7, r3
 8009c26:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009c28:	bfbb      	ittet	lt
 8009c2a:	189b      	addlt	r3, r3, r2
 8009c2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009c2e:	1bdf      	subge	r7, r3, r7
 8009c30:	2700      	movlt	r7, #0
 8009c32:	f1b9 0f00 	cmp.w	r9, #0
 8009c36:	bfb5      	itete	lt
 8009c38:	9b05      	ldrlt	r3, [sp, #20]
 8009c3a:	9d05      	ldrge	r5, [sp, #20]
 8009c3c:	eba3 0509 	sublt.w	r5, r3, r9
 8009c40:	464b      	movge	r3, r9
 8009c42:	bfb8      	it	lt
 8009c44:	2300      	movlt	r3, #0
 8009c46:	e77e      	b.n	8009b46 <_dtoa_r+0x6fe>
 8009c48:	9f07      	ldr	r7, [sp, #28]
 8009c4a:	9d05      	ldr	r5, [sp, #20]
 8009c4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009c4e:	e783      	b.n	8009b58 <_dtoa_r+0x710>
 8009c50:	9a07      	ldr	r2, [sp, #28]
 8009c52:	e7ab      	b.n	8009bac <_dtoa_r+0x764>
 8009c54:	2300      	movs	r3, #0
 8009c56:	e7d4      	b.n	8009c02 <_dtoa_r+0x7ba>
 8009c58:	9b00      	ldr	r3, [sp, #0]
 8009c5a:	e7d2      	b.n	8009c02 <_dtoa_r+0x7ba>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	9307      	str	r3, [sp, #28]
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009c66:	6918      	ldr	r0, [r3, #16]
 8009c68:	f000 fa47 	bl	800a0fa <__hi0bits>
 8009c6c:	f1c0 0020 	rsb	r0, r0, #32
 8009c70:	4440      	add	r0, r8
 8009c72:	f010 001f 	ands.w	r0, r0, #31
 8009c76:	d047      	beq.n	8009d08 <_dtoa_r+0x8c0>
 8009c78:	f1c0 0320 	rsb	r3, r0, #32
 8009c7c:	2b04      	cmp	r3, #4
 8009c7e:	dd3b      	ble.n	8009cf8 <_dtoa_r+0x8b0>
 8009c80:	9b05      	ldr	r3, [sp, #20]
 8009c82:	f1c0 001c 	rsb	r0, r0, #28
 8009c86:	4403      	add	r3, r0
 8009c88:	9305      	str	r3, [sp, #20]
 8009c8a:	4405      	add	r5, r0
 8009c8c:	4480      	add	r8, r0
 8009c8e:	9b05      	ldr	r3, [sp, #20]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	dd05      	ble.n	8009ca0 <_dtoa_r+0x858>
 8009c94:	461a      	mov	r2, r3
 8009c96:	9904      	ldr	r1, [sp, #16]
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f000 fb69 	bl	800a370 <__lshift>
 8009c9e:	9004      	str	r0, [sp, #16]
 8009ca0:	f1b8 0f00 	cmp.w	r8, #0
 8009ca4:	dd05      	ble.n	8009cb2 <_dtoa_r+0x86a>
 8009ca6:	4639      	mov	r1, r7
 8009ca8:	4642      	mov	r2, r8
 8009caa:	4620      	mov	r0, r4
 8009cac:	f000 fb60 	bl	800a370 <__lshift>
 8009cb0:	4607      	mov	r7, r0
 8009cb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cb4:	b353      	cbz	r3, 8009d0c <_dtoa_r+0x8c4>
 8009cb6:	4639      	mov	r1, r7
 8009cb8:	9804      	ldr	r0, [sp, #16]
 8009cba:	f000 fbad 	bl	800a418 <__mcmp>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	da24      	bge.n	8009d0c <_dtoa_r+0x8c4>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	220a      	movs	r2, #10
 8009cc6:	9904      	ldr	r1, [sp, #16]
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f000 f9db 	bl	800a084 <__multadd>
 8009cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cd0:	9004      	str	r0, [sp, #16]
 8009cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 814d 	beq.w	8009f76 <_dtoa_r+0xb2e>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	4631      	mov	r1, r6
 8009ce0:	220a      	movs	r2, #10
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f000 f9ce 	bl	800a084 <__multadd>
 8009ce8:	9b02      	ldr	r3, [sp, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	4606      	mov	r6, r0
 8009cee:	dc4f      	bgt.n	8009d90 <_dtoa_r+0x948>
 8009cf0:	9b06      	ldr	r3, [sp, #24]
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	dd4c      	ble.n	8009d90 <_dtoa_r+0x948>
 8009cf6:	e011      	b.n	8009d1c <_dtoa_r+0x8d4>
 8009cf8:	d0c9      	beq.n	8009c8e <_dtoa_r+0x846>
 8009cfa:	9a05      	ldr	r2, [sp, #20]
 8009cfc:	331c      	adds	r3, #28
 8009cfe:	441a      	add	r2, r3
 8009d00:	9205      	str	r2, [sp, #20]
 8009d02:	441d      	add	r5, r3
 8009d04:	4498      	add	r8, r3
 8009d06:	e7c2      	b.n	8009c8e <_dtoa_r+0x846>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	e7f6      	b.n	8009cfa <_dtoa_r+0x8b2>
 8009d0c:	f1b9 0f00 	cmp.w	r9, #0
 8009d10:	dc38      	bgt.n	8009d84 <_dtoa_r+0x93c>
 8009d12:	9b06      	ldr	r3, [sp, #24]
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	dd35      	ble.n	8009d84 <_dtoa_r+0x93c>
 8009d18:	f8cd 9008 	str.w	r9, [sp, #8]
 8009d1c:	9b02      	ldr	r3, [sp, #8]
 8009d1e:	b963      	cbnz	r3, 8009d3a <_dtoa_r+0x8f2>
 8009d20:	4639      	mov	r1, r7
 8009d22:	2205      	movs	r2, #5
 8009d24:	4620      	mov	r0, r4
 8009d26:	f000 f9ad 	bl	800a084 <__multadd>
 8009d2a:	4601      	mov	r1, r0
 8009d2c:	4607      	mov	r7, r0
 8009d2e:	9804      	ldr	r0, [sp, #16]
 8009d30:	f000 fb72 	bl	800a418 <__mcmp>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	f73f adcc 	bgt.w	80098d2 <_dtoa_r+0x48a>
 8009d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d3c:	465d      	mov	r5, fp
 8009d3e:	ea6f 0a03 	mvn.w	sl, r3
 8009d42:	f04f 0900 	mov.w	r9, #0
 8009d46:	4639      	mov	r1, r7
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f000 f984 	bl	800a056 <_Bfree>
 8009d4e:	2e00      	cmp	r6, #0
 8009d50:	f43f aeb7 	beq.w	8009ac2 <_dtoa_r+0x67a>
 8009d54:	f1b9 0f00 	cmp.w	r9, #0
 8009d58:	d005      	beq.n	8009d66 <_dtoa_r+0x91e>
 8009d5a:	45b1      	cmp	r9, r6
 8009d5c:	d003      	beq.n	8009d66 <_dtoa_r+0x91e>
 8009d5e:	4649      	mov	r1, r9
 8009d60:	4620      	mov	r0, r4
 8009d62:	f000 f978 	bl	800a056 <_Bfree>
 8009d66:	4631      	mov	r1, r6
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f000 f974 	bl	800a056 <_Bfree>
 8009d6e:	e6a8      	b.n	8009ac2 <_dtoa_r+0x67a>
 8009d70:	2700      	movs	r7, #0
 8009d72:	463e      	mov	r6, r7
 8009d74:	e7e1      	b.n	8009d3a <_dtoa_r+0x8f2>
 8009d76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009d7a:	463e      	mov	r6, r7
 8009d7c:	e5a9      	b.n	80098d2 <_dtoa_r+0x48a>
 8009d7e:	bf00      	nop
 8009d80:	40240000 	.word	0x40240000
 8009d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d86:	f8cd 9008 	str.w	r9, [sp, #8]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 80fa 	beq.w	8009f84 <_dtoa_r+0xb3c>
 8009d90:	2d00      	cmp	r5, #0
 8009d92:	dd05      	ble.n	8009da0 <_dtoa_r+0x958>
 8009d94:	4631      	mov	r1, r6
 8009d96:	462a      	mov	r2, r5
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f000 fae9 	bl	800a370 <__lshift>
 8009d9e:	4606      	mov	r6, r0
 8009da0:	9b07      	ldr	r3, [sp, #28]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d04c      	beq.n	8009e40 <_dtoa_r+0x9f8>
 8009da6:	6871      	ldr	r1, [r6, #4]
 8009da8:	4620      	mov	r0, r4
 8009daa:	f000 f920 	bl	8009fee <_Balloc>
 8009dae:	6932      	ldr	r2, [r6, #16]
 8009db0:	3202      	adds	r2, #2
 8009db2:	4605      	mov	r5, r0
 8009db4:	0092      	lsls	r2, r2, #2
 8009db6:	f106 010c 	add.w	r1, r6, #12
 8009dba:	300c      	adds	r0, #12
 8009dbc:	f000 f90a 	bl	8009fd4 <memcpy>
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f000 fad3 	bl	800a370 <__lshift>
 8009dca:	9b00      	ldr	r3, [sp, #0]
 8009dcc:	f8cd b014 	str.w	fp, [sp, #20]
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	46b1      	mov	r9, r6
 8009dd6:	9307      	str	r3, [sp, #28]
 8009dd8:	4606      	mov	r6, r0
 8009dda:	4639      	mov	r1, r7
 8009ddc:	9804      	ldr	r0, [sp, #16]
 8009dde:	f7ff faa7 	bl	8009330 <quorem>
 8009de2:	4649      	mov	r1, r9
 8009de4:	4605      	mov	r5, r0
 8009de6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009dea:	9804      	ldr	r0, [sp, #16]
 8009dec:	f000 fb14 	bl	800a418 <__mcmp>
 8009df0:	4632      	mov	r2, r6
 8009df2:	9000      	str	r0, [sp, #0]
 8009df4:	4639      	mov	r1, r7
 8009df6:	4620      	mov	r0, r4
 8009df8:	f000 fb28 	bl	800a44c <__mdiff>
 8009dfc:	68c3      	ldr	r3, [r0, #12]
 8009dfe:	4602      	mov	r2, r0
 8009e00:	bb03      	cbnz	r3, 8009e44 <_dtoa_r+0x9fc>
 8009e02:	4601      	mov	r1, r0
 8009e04:	9008      	str	r0, [sp, #32]
 8009e06:	9804      	ldr	r0, [sp, #16]
 8009e08:	f000 fb06 	bl	800a418 <__mcmp>
 8009e0c:	9a08      	ldr	r2, [sp, #32]
 8009e0e:	4603      	mov	r3, r0
 8009e10:	4611      	mov	r1, r2
 8009e12:	4620      	mov	r0, r4
 8009e14:	9308      	str	r3, [sp, #32]
 8009e16:	f000 f91e 	bl	800a056 <_Bfree>
 8009e1a:	9b08      	ldr	r3, [sp, #32]
 8009e1c:	b9a3      	cbnz	r3, 8009e48 <_dtoa_r+0xa00>
 8009e1e:	9a06      	ldr	r2, [sp, #24]
 8009e20:	b992      	cbnz	r2, 8009e48 <_dtoa_r+0xa00>
 8009e22:	9a07      	ldr	r2, [sp, #28]
 8009e24:	b982      	cbnz	r2, 8009e48 <_dtoa_r+0xa00>
 8009e26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009e2a:	d029      	beq.n	8009e80 <_dtoa_r+0xa38>
 8009e2c:	9b00      	ldr	r3, [sp, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	dd01      	ble.n	8009e36 <_dtoa_r+0x9ee>
 8009e32:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009e36:	9b05      	ldr	r3, [sp, #20]
 8009e38:	1c5d      	adds	r5, r3, #1
 8009e3a:	f883 8000 	strb.w	r8, [r3]
 8009e3e:	e782      	b.n	8009d46 <_dtoa_r+0x8fe>
 8009e40:	4630      	mov	r0, r6
 8009e42:	e7c2      	b.n	8009dca <_dtoa_r+0x982>
 8009e44:	2301      	movs	r3, #1
 8009e46:	e7e3      	b.n	8009e10 <_dtoa_r+0x9c8>
 8009e48:	9a00      	ldr	r2, [sp, #0]
 8009e4a:	2a00      	cmp	r2, #0
 8009e4c:	db04      	blt.n	8009e58 <_dtoa_r+0xa10>
 8009e4e:	d125      	bne.n	8009e9c <_dtoa_r+0xa54>
 8009e50:	9a06      	ldr	r2, [sp, #24]
 8009e52:	bb1a      	cbnz	r2, 8009e9c <_dtoa_r+0xa54>
 8009e54:	9a07      	ldr	r2, [sp, #28]
 8009e56:	bb0a      	cbnz	r2, 8009e9c <_dtoa_r+0xa54>
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	ddec      	ble.n	8009e36 <_dtoa_r+0x9ee>
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	9904      	ldr	r1, [sp, #16]
 8009e60:	4620      	mov	r0, r4
 8009e62:	f000 fa85 	bl	800a370 <__lshift>
 8009e66:	4639      	mov	r1, r7
 8009e68:	9004      	str	r0, [sp, #16]
 8009e6a:	f000 fad5 	bl	800a418 <__mcmp>
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	dc03      	bgt.n	8009e7a <_dtoa_r+0xa32>
 8009e72:	d1e0      	bne.n	8009e36 <_dtoa_r+0x9ee>
 8009e74:	f018 0f01 	tst.w	r8, #1
 8009e78:	d0dd      	beq.n	8009e36 <_dtoa_r+0x9ee>
 8009e7a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009e7e:	d1d8      	bne.n	8009e32 <_dtoa_r+0x9ea>
 8009e80:	9b05      	ldr	r3, [sp, #20]
 8009e82:	9a05      	ldr	r2, [sp, #20]
 8009e84:	1c5d      	adds	r5, r3, #1
 8009e86:	2339      	movs	r3, #57	; 0x39
 8009e88:	7013      	strb	r3, [r2, #0]
 8009e8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e8e:	2b39      	cmp	r3, #57	; 0x39
 8009e90:	f105 32ff 	add.w	r2, r5, #4294967295
 8009e94:	d04f      	beq.n	8009f36 <_dtoa_r+0xaee>
 8009e96:	3301      	adds	r3, #1
 8009e98:	7013      	strb	r3, [r2, #0]
 8009e9a:	e754      	b.n	8009d46 <_dtoa_r+0x8fe>
 8009e9c:	9a05      	ldr	r2, [sp, #20]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f102 0501 	add.w	r5, r2, #1
 8009ea4:	dd06      	ble.n	8009eb4 <_dtoa_r+0xa6c>
 8009ea6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009eaa:	d0e9      	beq.n	8009e80 <_dtoa_r+0xa38>
 8009eac:	f108 0801 	add.w	r8, r8, #1
 8009eb0:	9b05      	ldr	r3, [sp, #20]
 8009eb2:	e7c2      	b.n	8009e3a <_dtoa_r+0x9f2>
 8009eb4:	9a02      	ldr	r2, [sp, #8]
 8009eb6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009eba:	eba5 030b 	sub.w	r3, r5, fp
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d021      	beq.n	8009f06 <_dtoa_r+0xabe>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	220a      	movs	r2, #10
 8009ec6:	9904      	ldr	r1, [sp, #16]
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f000 f8db 	bl	800a084 <__multadd>
 8009ece:	45b1      	cmp	r9, r6
 8009ed0:	9004      	str	r0, [sp, #16]
 8009ed2:	f04f 0300 	mov.w	r3, #0
 8009ed6:	f04f 020a 	mov.w	r2, #10
 8009eda:	4649      	mov	r1, r9
 8009edc:	4620      	mov	r0, r4
 8009ede:	d105      	bne.n	8009eec <_dtoa_r+0xaa4>
 8009ee0:	f000 f8d0 	bl	800a084 <__multadd>
 8009ee4:	4681      	mov	r9, r0
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	9505      	str	r5, [sp, #20]
 8009eea:	e776      	b.n	8009dda <_dtoa_r+0x992>
 8009eec:	f000 f8ca 	bl	800a084 <__multadd>
 8009ef0:	4631      	mov	r1, r6
 8009ef2:	4681      	mov	r9, r0
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	220a      	movs	r2, #10
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f000 f8c3 	bl	800a084 <__multadd>
 8009efe:	4606      	mov	r6, r0
 8009f00:	e7f2      	b.n	8009ee8 <_dtoa_r+0xaa0>
 8009f02:	f04f 0900 	mov.w	r9, #0
 8009f06:	2201      	movs	r2, #1
 8009f08:	9904      	ldr	r1, [sp, #16]
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f000 fa30 	bl	800a370 <__lshift>
 8009f10:	4639      	mov	r1, r7
 8009f12:	9004      	str	r0, [sp, #16]
 8009f14:	f000 fa80 	bl	800a418 <__mcmp>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	dcb6      	bgt.n	8009e8a <_dtoa_r+0xa42>
 8009f1c:	d102      	bne.n	8009f24 <_dtoa_r+0xadc>
 8009f1e:	f018 0f01 	tst.w	r8, #1
 8009f22:	d1b2      	bne.n	8009e8a <_dtoa_r+0xa42>
 8009f24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f28:	2b30      	cmp	r3, #48	; 0x30
 8009f2a:	f105 32ff 	add.w	r2, r5, #4294967295
 8009f2e:	f47f af0a 	bne.w	8009d46 <_dtoa_r+0x8fe>
 8009f32:	4615      	mov	r5, r2
 8009f34:	e7f6      	b.n	8009f24 <_dtoa_r+0xadc>
 8009f36:	4593      	cmp	fp, r2
 8009f38:	d105      	bne.n	8009f46 <_dtoa_r+0xafe>
 8009f3a:	2331      	movs	r3, #49	; 0x31
 8009f3c:	f10a 0a01 	add.w	sl, sl, #1
 8009f40:	f88b 3000 	strb.w	r3, [fp]
 8009f44:	e6ff      	b.n	8009d46 <_dtoa_r+0x8fe>
 8009f46:	4615      	mov	r5, r2
 8009f48:	e79f      	b.n	8009e8a <_dtoa_r+0xa42>
 8009f4a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009fb0 <_dtoa_r+0xb68>
 8009f4e:	e007      	b.n	8009f60 <_dtoa_r+0xb18>
 8009f50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f52:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009fb4 <_dtoa_r+0xb6c>
 8009f56:	b11b      	cbz	r3, 8009f60 <_dtoa_r+0xb18>
 8009f58:	f10b 0308 	add.w	r3, fp, #8
 8009f5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	4658      	mov	r0, fp
 8009f62:	b017      	add	sp, #92	; 0x5c
 8009f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f68:	9b06      	ldr	r3, [sp, #24]
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	f77f ae35 	ble.w	8009bda <_dtoa_r+0x792>
 8009f70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f72:	9307      	str	r3, [sp, #28]
 8009f74:	e649      	b.n	8009c0a <_dtoa_r+0x7c2>
 8009f76:	9b02      	ldr	r3, [sp, #8]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	dc03      	bgt.n	8009f84 <_dtoa_r+0xb3c>
 8009f7c:	9b06      	ldr	r3, [sp, #24]
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	f73f aecc 	bgt.w	8009d1c <_dtoa_r+0x8d4>
 8009f84:	465d      	mov	r5, fp
 8009f86:	4639      	mov	r1, r7
 8009f88:	9804      	ldr	r0, [sp, #16]
 8009f8a:	f7ff f9d1 	bl	8009330 <quorem>
 8009f8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009f92:	f805 8b01 	strb.w	r8, [r5], #1
 8009f96:	9a02      	ldr	r2, [sp, #8]
 8009f98:	eba5 030b 	sub.w	r3, r5, fp
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	ddb0      	ble.n	8009f02 <_dtoa_r+0xaba>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	220a      	movs	r2, #10
 8009fa4:	9904      	ldr	r1, [sp, #16]
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f000 f86c 	bl	800a084 <__multadd>
 8009fac:	9004      	str	r0, [sp, #16]
 8009fae:	e7ea      	b.n	8009f86 <_dtoa_r+0xb3e>
 8009fb0:	0800aa68 	.word	0x0800aa68
 8009fb4:	0800aa8c 	.word	0x0800aa8c

08009fb8 <_localeconv_r>:
 8009fb8:	4b04      	ldr	r3, [pc, #16]	; (8009fcc <_localeconv_r+0x14>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	6a18      	ldr	r0, [r3, #32]
 8009fbe:	4b04      	ldr	r3, [pc, #16]	; (8009fd0 <_localeconv_r+0x18>)
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	bf08      	it	eq
 8009fc4:	4618      	moveq	r0, r3
 8009fc6:	30f0      	adds	r0, #240	; 0xf0
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	2000017c 	.word	0x2000017c
 8009fd0:	200001e0 	.word	0x200001e0

08009fd4 <memcpy>:
 8009fd4:	b510      	push	{r4, lr}
 8009fd6:	1e43      	subs	r3, r0, #1
 8009fd8:	440a      	add	r2, r1
 8009fda:	4291      	cmp	r1, r2
 8009fdc:	d100      	bne.n	8009fe0 <memcpy+0xc>
 8009fde:	bd10      	pop	{r4, pc}
 8009fe0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fe4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fe8:	e7f7      	b.n	8009fda <memcpy+0x6>

08009fea <__malloc_lock>:
 8009fea:	4770      	bx	lr

08009fec <__malloc_unlock>:
 8009fec:	4770      	bx	lr

08009fee <_Balloc>:
 8009fee:	b570      	push	{r4, r5, r6, lr}
 8009ff0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	460e      	mov	r6, r1
 8009ff6:	b93d      	cbnz	r5, 800a008 <_Balloc+0x1a>
 8009ff8:	2010      	movs	r0, #16
 8009ffa:	f7fe fc4d 	bl	8008898 <malloc>
 8009ffe:	6260      	str	r0, [r4, #36]	; 0x24
 800a000:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a004:	6005      	str	r5, [r0, #0]
 800a006:	60c5      	str	r5, [r0, #12]
 800a008:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a00a:	68eb      	ldr	r3, [r5, #12]
 800a00c:	b183      	cbz	r3, 800a030 <_Balloc+0x42>
 800a00e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a016:	b9b8      	cbnz	r0, 800a048 <_Balloc+0x5a>
 800a018:	2101      	movs	r1, #1
 800a01a:	fa01 f506 	lsl.w	r5, r1, r6
 800a01e:	1d6a      	adds	r2, r5, #5
 800a020:	0092      	lsls	r2, r2, #2
 800a022:	4620      	mov	r0, r4
 800a024:	f000 fabe 	bl	800a5a4 <_calloc_r>
 800a028:	b160      	cbz	r0, 800a044 <_Balloc+0x56>
 800a02a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a02e:	e00e      	b.n	800a04e <_Balloc+0x60>
 800a030:	2221      	movs	r2, #33	; 0x21
 800a032:	2104      	movs	r1, #4
 800a034:	4620      	mov	r0, r4
 800a036:	f000 fab5 	bl	800a5a4 <_calloc_r>
 800a03a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a03c:	60e8      	str	r0, [r5, #12]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1e4      	bne.n	800a00e <_Balloc+0x20>
 800a044:	2000      	movs	r0, #0
 800a046:	bd70      	pop	{r4, r5, r6, pc}
 800a048:	6802      	ldr	r2, [r0, #0]
 800a04a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a04e:	2300      	movs	r3, #0
 800a050:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a054:	e7f7      	b.n	800a046 <_Balloc+0x58>

0800a056 <_Bfree>:
 800a056:	b570      	push	{r4, r5, r6, lr}
 800a058:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a05a:	4606      	mov	r6, r0
 800a05c:	460d      	mov	r5, r1
 800a05e:	b93c      	cbnz	r4, 800a070 <_Bfree+0x1a>
 800a060:	2010      	movs	r0, #16
 800a062:	f7fe fc19 	bl	8008898 <malloc>
 800a066:	6270      	str	r0, [r6, #36]	; 0x24
 800a068:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a06c:	6004      	str	r4, [r0, #0]
 800a06e:	60c4      	str	r4, [r0, #12]
 800a070:	b13d      	cbz	r5, 800a082 <_Bfree+0x2c>
 800a072:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a074:	686a      	ldr	r2, [r5, #4]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a07c:	6029      	str	r1, [r5, #0]
 800a07e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a082:	bd70      	pop	{r4, r5, r6, pc}

0800a084 <__multadd>:
 800a084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a088:	690d      	ldr	r5, [r1, #16]
 800a08a:	461f      	mov	r7, r3
 800a08c:	4606      	mov	r6, r0
 800a08e:	460c      	mov	r4, r1
 800a090:	f101 0c14 	add.w	ip, r1, #20
 800a094:	2300      	movs	r3, #0
 800a096:	f8dc 0000 	ldr.w	r0, [ip]
 800a09a:	b281      	uxth	r1, r0
 800a09c:	fb02 7101 	mla	r1, r2, r1, r7
 800a0a0:	0c0f      	lsrs	r7, r1, #16
 800a0a2:	0c00      	lsrs	r0, r0, #16
 800a0a4:	fb02 7000 	mla	r0, r2, r0, r7
 800a0a8:	b289      	uxth	r1, r1
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a0b0:	429d      	cmp	r5, r3
 800a0b2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a0b6:	f84c 1b04 	str.w	r1, [ip], #4
 800a0ba:	dcec      	bgt.n	800a096 <__multadd+0x12>
 800a0bc:	b1d7      	cbz	r7, 800a0f4 <__multadd+0x70>
 800a0be:	68a3      	ldr	r3, [r4, #8]
 800a0c0:	42ab      	cmp	r3, r5
 800a0c2:	dc12      	bgt.n	800a0ea <__multadd+0x66>
 800a0c4:	6861      	ldr	r1, [r4, #4]
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	3101      	adds	r1, #1
 800a0ca:	f7ff ff90 	bl	8009fee <_Balloc>
 800a0ce:	6922      	ldr	r2, [r4, #16]
 800a0d0:	3202      	adds	r2, #2
 800a0d2:	f104 010c 	add.w	r1, r4, #12
 800a0d6:	4680      	mov	r8, r0
 800a0d8:	0092      	lsls	r2, r2, #2
 800a0da:	300c      	adds	r0, #12
 800a0dc:	f7ff ff7a 	bl	8009fd4 <memcpy>
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f7ff ffb7 	bl	800a056 <_Bfree>
 800a0e8:	4644      	mov	r4, r8
 800a0ea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0ee:	3501      	adds	r5, #1
 800a0f0:	615f      	str	r7, [r3, #20]
 800a0f2:	6125      	str	r5, [r4, #16]
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a0fa <__hi0bits>:
 800a0fa:	0c02      	lsrs	r2, r0, #16
 800a0fc:	0412      	lsls	r2, r2, #16
 800a0fe:	4603      	mov	r3, r0
 800a100:	b9b2      	cbnz	r2, 800a130 <__hi0bits+0x36>
 800a102:	0403      	lsls	r3, r0, #16
 800a104:	2010      	movs	r0, #16
 800a106:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a10a:	bf04      	itt	eq
 800a10c:	021b      	lsleq	r3, r3, #8
 800a10e:	3008      	addeq	r0, #8
 800a110:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a114:	bf04      	itt	eq
 800a116:	011b      	lsleq	r3, r3, #4
 800a118:	3004      	addeq	r0, #4
 800a11a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a11e:	bf04      	itt	eq
 800a120:	009b      	lsleq	r3, r3, #2
 800a122:	3002      	addeq	r0, #2
 800a124:	2b00      	cmp	r3, #0
 800a126:	db06      	blt.n	800a136 <__hi0bits+0x3c>
 800a128:	005b      	lsls	r3, r3, #1
 800a12a:	d503      	bpl.n	800a134 <__hi0bits+0x3a>
 800a12c:	3001      	adds	r0, #1
 800a12e:	4770      	bx	lr
 800a130:	2000      	movs	r0, #0
 800a132:	e7e8      	b.n	800a106 <__hi0bits+0xc>
 800a134:	2020      	movs	r0, #32
 800a136:	4770      	bx	lr

0800a138 <__lo0bits>:
 800a138:	6803      	ldr	r3, [r0, #0]
 800a13a:	f013 0207 	ands.w	r2, r3, #7
 800a13e:	4601      	mov	r1, r0
 800a140:	d00b      	beq.n	800a15a <__lo0bits+0x22>
 800a142:	07da      	lsls	r2, r3, #31
 800a144:	d423      	bmi.n	800a18e <__lo0bits+0x56>
 800a146:	0798      	lsls	r0, r3, #30
 800a148:	bf49      	itett	mi
 800a14a:	085b      	lsrmi	r3, r3, #1
 800a14c:	089b      	lsrpl	r3, r3, #2
 800a14e:	2001      	movmi	r0, #1
 800a150:	600b      	strmi	r3, [r1, #0]
 800a152:	bf5c      	itt	pl
 800a154:	600b      	strpl	r3, [r1, #0]
 800a156:	2002      	movpl	r0, #2
 800a158:	4770      	bx	lr
 800a15a:	b298      	uxth	r0, r3
 800a15c:	b9a8      	cbnz	r0, 800a18a <__lo0bits+0x52>
 800a15e:	0c1b      	lsrs	r3, r3, #16
 800a160:	2010      	movs	r0, #16
 800a162:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a166:	bf04      	itt	eq
 800a168:	0a1b      	lsreq	r3, r3, #8
 800a16a:	3008      	addeq	r0, #8
 800a16c:	071a      	lsls	r2, r3, #28
 800a16e:	bf04      	itt	eq
 800a170:	091b      	lsreq	r3, r3, #4
 800a172:	3004      	addeq	r0, #4
 800a174:	079a      	lsls	r2, r3, #30
 800a176:	bf04      	itt	eq
 800a178:	089b      	lsreq	r3, r3, #2
 800a17a:	3002      	addeq	r0, #2
 800a17c:	07da      	lsls	r2, r3, #31
 800a17e:	d402      	bmi.n	800a186 <__lo0bits+0x4e>
 800a180:	085b      	lsrs	r3, r3, #1
 800a182:	d006      	beq.n	800a192 <__lo0bits+0x5a>
 800a184:	3001      	adds	r0, #1
 800a186:	600b      	str	r3, [r1, #0]
 800a188:	4770      	bx	lr
 800a18a:	4610      	mov	r0, r2
 800a18c:	e7e9      	b.n	800a162 <__lo0bits+0x2a>
 800a18e:	2000      	movs	r0, #0
 800a190:	4770      	bx	lr
 800a192:	2020      	movs	r0, #32
 800a194:	4770      	bx	lr

0800a196 <__i2b>:
 800a196:	b510      	push	{r4, lr}
 800a198:	460c      	mov	r4, r1
 800a19a:	2101      	movs	r1, #1
 800a19c:	f7ff ff27 	bl	8009fee <_Balloc>
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	6144      	str	r4, [r0, #20]
 800a1a4:	6102      	str	r2, [r0, #16]
 800a1a6:	bd10      	pop	{r4, pc}

0800a1a8 <__multiply>:
 800a1a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ac:	4614      	mov	r4, r2
 800a1ae:	690a      	ldr	r2, [r1, #16]
 800a1b0:	6923      	ldr	r3, [r4, #16]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	bfb8      	it	lt
 800a1b6:	460b      	movlt	r3, r1
 800a1b8:	4688      	mov	r8, r1
 800a1ba:	bfbc      	itt	lt
 800a1bc:	46a0      	movlt	r8, r4
 800a1be:	461c      	movlt	r4, r3
 800a1c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a1c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a1c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a1d0:	eb07 0609 	add.w	r6, r7, r9
 800a1d4:	42b3      	cmp	r3, r6
 800a1d6:	bfb8      	it	lt
 800a1d8:	3101      	addlt	r1, #1
 800a1da:	f7ff ff08 	bl	8009fee <_Balloc>
 800a1de:	f100 0514 	add.w	r5, r0, #20
 800a1e2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a1e6:	462b      	mov	r3, r5
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	4573      	cmp	r3, lr
 800a1ec:	d316      	bcc.n	800a21c <__multiply+0x74>
 800a1ee:	f104 0214 	add.w	r2, r4, #20
 800a1f2:	f108 0114 	add.w	r1, r8, #20
 800a1f6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a1fa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	9b00      	ldr	r3, [sp, #0]
 800a202:	9201      	str	r2, [sp, #4]
 800a204:	4293      	cmp	r3, r2
 800a206:	d80c      	bhi.n	800a222 <__multiply+0x7a>
 800a208:	2e00      	cmp	r6, #0
 800a20a:	dd03      	ble.n	800a214 <__multiply+0x6c>
 800a20c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a210:	2b00      	cmp	r3, #0
 800a212:	d05d      	beq.n	800a2d0 <__multiply+0x128>
 800a214:	6106      	str	r6, [r0, #16]
 800a216:	b003      	add	sp, #12
 800a218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21c:	f843 2b04 	str.w	r2, [r3], #4
 800a220:	e7e3      	b.n	800a1ea <__multiply+0x42>
 800a222:	f8b2 b000 	ldrh.w	fp, [r2]
 800a226:	f1bb 0f00 	cmp.w	fp, #0
 800a22a:	d023      	beq.n	800a274 <__multiply+0xcc>
 800a22c:	4689      	mov	r9, r1
 800a22e:	46ac      	mov	ip, r5
 800a230:	f04f 0800 	mov.w	r8, #0
 800a234:	f859 4b04 	ldr.w	r4, [r9], #4
 800a238:	f8dc a000 	ldr.w	sl, [ip]
 800a23c:	b2a3      	uxth	r3, r4
 800a23e:	fa1f fa8a 	uxth.w	sl, sl
 800a242:	fb0b a303 	mla	r3, fp, r3, sl
 800a246:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a24a:	f8dc 4000 	ldr.w	r4, [ip]
 800a24e:	4443      	add	r3, r8
 800a250:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a254:	fb0b 840a 	mla	r4, fp, sl, r8
 800a258:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a25c:	46e2      	mov	sl, ip
 800a25e:	b29b      	uxth	r3, r3
 800a260:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a264:	454f      	cmp	r7, r9
 800a266:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a26a:	f84a 3b04 	str.w	r3, [sl], #4
 800a26e:	d82b      	bhi.n	800a2c8 <__multiply+0x120>
 800a270:	f8cc 8004 	str.w	r8, [ip, #4]
 800a274:	9b01      	ldr	r3, [sp, #4]
 800a276:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a27a:	3204      	adds	r2, #4
 800a27c:	f1ba 0f00 	cmp.w	sl, #0
 800a280:	d020      	beq.n	800a2c4 <__multiply+0x11c>
 800a282:	682b      	ldr	r3, [r5, #0]
 800a284:	4689      	mov	r9, r1
 800a286:	46a8      	mov	r8, r5
 800a288:	f04f 0b00 	mov.w	fp, #0
 800a28c:	f8b9 c000 	ldrh.w	ip, [r9]
 800a290:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a294:	fb0a 440c 	mla	r4, sl, ip, r4
 800a298:	445c      	add	r4, fp
 800a29a:	46c4      	mov	ip, r8
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a2a2:	f84c 3b04 	str.w	r3, [ip], #4
 800a2a6:	f859 3b04 	ldr.w	r3, [r9], #4
 800a2aa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a2ae:	0c1b      	lsrs	r3, r3, #16
 800a2b0:	fb0a b303 	mla	r3, sl, r3, fp
 800a2b4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a2b8:	454f      	cmp	r7, r9
 800a2ba:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a2be:	d805      	bhi.n	800a2cc <__multiply+0x124>
 800a2c0:	f8c8 3004 	str.w	r3, [r8, #4]
 800a2c4:	3504      	adds	r5, #4
 800a2c6:	e79b      	b.n	800a200 <__multiply+0x58>
 800a2c8:	46d4      	mov	ip, sl
 800a2ca:	e7b3      	b.n	800a234 <__multiply+0x8c>
 800a2cc:	46e0      	mov	r8, ip
 800a2ce:	e7dd      	b.n	800a28c <__multiply+0xe4>
 800a2d0:	3e01      	subs	r6, #1
 800a2d2:	e799      	b.n	800a208 <__multiply+0x60>

0800a2d4 <__pow5mult>:
 800a2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2d8:	4615      	mov	r5, r2
 800a2da:	f012 0203 	ands.w	r2, r2, #3
 800a2de:	4606      	mov	r6, r0
 800a2e0:	460f      	mov	r7, r1
 800a2e2:	d007      	beq.n	800a2f4 <__pow5mult+0x20>
 800a2e4:	3a01      	subs	r2, #1
 800a2e6:	4c21      	ldr	r4, [pc, #132]	; (800a36c <__pow5mult+0x98>)
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2ee:	f7ff fec9 	bl	800a084 <__multadd>
 800a2f2:	4607      	mov	r7, r0
 800a2f4:	10ad      	asrs	r5, r5, #2
 800a2f6:	d035      	beq.n	800a364 <__pow5mult+0x90>
 800a2f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a2fa:	b93c      	cbnz	r4, 800a30c <__pow5mult+0x38>
 800a2fc:	2010      	movs	r0, #16
 800a2fe:	f7fe facb 	bl	8008898 <malloc>
 800a302:	6270      	str	r0, [r6, #36]	; 0x24
 800a304:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a308:	6004      	str	r4, [r0, #0]
 800a30a:	60c4      	str	r4, [r0, #12]
 800a30c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a310:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a314:	b94c      	cbnz	r4, 800a32a <__pow5mult+0x56>
 800a316:	f240 2171 	movw	r1, #625	; 0x271
 800a31a:	4630      	mov	r0, r6
 800a31c:	f7ff ff3b 	bl	800a196 <__i2b>
 800a320:	2300      	movs	r3, #0
 800a322:	f8c8 0008 	str.w	r0, [r8, #8]
 800a326:	4604      	mov	r4, r0
 800a328:	6003      	str	r3, [r0, #0]
 800a32a:	f04f 0800 	mov.w	r8, #0
 800a32e:	07eb      	lsls	r3, r5, #31
 800a330:	d50a      	bpl.n	800a348 <__pow5mult+0x74>
 800a332:	4639      	mov	r1, r7
 800a334:	4622      	mov	r2, r4
 800a336:	4630      	mov	r0, r6
 800a338:	f7ff ff36 	bl	800a1a8 <__multiply>
 800a33c:	4639      	mov	r1, r7
 800a33e:	4681      	mov	r9, r0
 800a340:	4630      	mov	r0, r6
 800a342:	f7ff fe88 	bl	800a056 <_Bfree>
 800a346:	464f      	mov	r7, r9
 800a348:	106d      	asrs	r5, r5, #1
 800a34a:	d00b      	beq.n	800a364 <__pow5mult+0x90>
 800a34c:	6820      	ldr	r0, [r4, #0]
 800a34e:	b938      	cbnz	r0, 800a360 <__pow5mult+0x8c>
 800a350:	4622      	mov	r2, r4
 800a352:	4621      	mov	r1, r4
 800a354:	4630      	mov	r0, r6
 800a356:	f7ff ff27 	bl	800a1a8 <__multiply>
 800a35a:	6020      	str	r0, [r4, #0]
 800a35c:	f8c0 8000 	str.w	r8, [r0]
 800a360:	4604      	mov	r4, r0
 800a362:	e7e4      	b.n	800a32e <__pow5mult+0x5a>
 800a364:	4638      	mov	r0, r7
 800a366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a36a:	bf00      	nop
 800a36c:	0800ab90 	.word	0x0800ab90

0800a370 <__lshift>:
 800a370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a374:	460c      	mov	r4, r1
 800a376:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a37a:	6923      	ldr	r3, [r4, #16]
 800a37c:	6849      	ldr	r1, [r1, #4]
 800a37e:	eb0a 0903 	add.w	r9, sl, r3
 800a382:	68a3      	ldr	r3, [r4, #8]
 800a384:	4607      	mov	r7, r0
 800a386:	4616      	mov	r6, r2
 800a388:	f109 0501 	add.w	r5, r9, #1
 800a38c:	42ab      	cmp	r3, r5
 800a38e:	db32      	blt.n	800a3f6 <__lshift+0x86>
 800a390:	4638      	mov	r0, r7
 800a392:	f7ff fe2c 	bl	8009fee <_Balloc>
 800a396:	2300      	movs	r3, #0
 800a398:	4680      	mov	r8, r0
 800a39a:	f100 0114 	add.w	r1, r0, #20
 800a39e:	461a      	mov	r2, r3
 800a3a0:	4553      	cmp	r3, sl
 800a3a2:	db2b      	blt.n	800a3fc <__lshift+0x8c>
 800a3a4:	6920      	ldr	r0, [r4, #16]
 800a3a6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a3aa:	f104 0314 	add.w	r3, r4, #20
 800a3ae:	f016 021f 	ands.w	r2, r6, #31
 800a3b2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3b6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a3ba:	d025      	beq.n	800a408 <__lshift+0x98>
 800a3bc:	f1c2 0e20 	rsb	lr, r2, #32
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	681e      	ldr	r6, [r3, #0]
 800a3c4:	468a      	mov	sl, r1
 800a3c6:	4096      	lsls	r6, r2
 800a3c8:	4330      	orrs	r0, r6
 800a3ca:	f84a 0b04 	str.w	r0, [sl], #4
 800a3ce:	f853 0b04 	ldr.w	r0, [r3], #4
 800a3d2:	459c      	cmp	ip, r3
 800a3d4:	fa20 f00e 	lsr.w	r0, r0, lr
 800a3d8:	d814      	bhi.n	800a404 <__lshift+0x94>
 800a3da:	6048      	str	r0, [r1, #4]
 800a3dc:	b108      	cbz	r0, 800a3e2 <__lshift+0x72>
 800a3de:	f109 0502 	add.w	r5, r9, #2
 800a3e2:	3d01      	subs	r5, #1
 800a3e4:	4638      	mov	r0, r7
 800a3e6:	f8c8 5010 	str.w	r5, [r8, #16]
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	f7ff fe33 	bl	800a056 <_Bfree>
 800a3f0:	4640      	mov	r0, r8
 800a3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f6:	3101      	adds	r1, #1
 800a3f8:	005b      	lsls	r3, r3, #1
 800a3fa:	e7c7      	b.n	800a38c <__lshift+0x1c>
 800a3fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a400:	3301      	adds	r3, #1
 800a402:	e7cd      	b.n	800a3a0 <__lshift+0x30>
 800a404:	4651      	mov	r1, sl
 800a406:	e7dc      	b.n	800a3c2 <__lshift+0x52>
 800a408:	3904      	subs	r1, #4
 800a40a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a40e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a412:	459c      	cmp	ip, r3
 800a414:	d8f9      	bhi.n	800a40a <__lshift+0x9a>
 800a416:	e7e4      	b.n	800a3e2 <__lshift+0x72>

0800a418 <__mcmp>:
 800a418:	6903      	ldr	r3, [r0, #16]
 800a41a:	690a      	ldr	r2, [r1, #16]
 800a41c:	1a9b      	subs	r3, r3, r2
 800a41e:	b530      	push	{r4, r5, lr}
 800a420:	d10c      	bne.n	800a43c <__mcmp+0x24>
 800a422:	0092      	lsls	r2, r2, #2
 800a424:	3014      	adds	r0, #20
 800a426:	3114      	adds	r1, #20
 800a428:	1884      	adds	r4, r0, r2
 800a42a:	4411      	add	r1, r2
 800a42c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a430:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a434:	4295      	cmp	r5, r2
 800a436:	d003      	beq.n	800a440 <__mcmp+0x28>
 800a438:	d305      	bcc.n	800a446 <__mcmp+0x2e>
 800a43a:	2301      	movs	r3, #1
 800a43c:	4618      	mov	r0, r3
 800a43e:	bd30      	pop	{r4, r5, pc}
 800a440:	42a0      	cmp	r0, r4
 800a442:	d3f3      	bcc.n	800a42c <__mcmp+0x14>
 800a444:	e7fa      	b.n	800a43c <__mcmp+0x24>
 800a446:	f04f 33ff 	mov.w	r3, #4294967295
 800a44a:	e7f7      	b.n	800a43c <__mcmp+0x24>

0800a44c <__mdiff>:
 800a44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a450:	460d      	mov	r5, r1
 800a452:	4607      	mov	r7, r0
 800a454:	4611      	mov	r1, r2
 800a456:	4628      	mov	r0, r5
 800a458:	4614      	mov	r4, r2
 800a45a:	f7ff ffdd 	bl	800a418 <__mcmp>
 800a45e:	1e06      	subs	r6, r0, #0
 800a460:	d108      	bne.n	800a474 <__mdiff+0x28>
 800a462:	4631      	mov	r1, r6
 800a464:	4638      	mov	r0, r7
 800a466:	f7ff fdc2 	bl	8009fee <_Balloc>
 800a46a:	2301      	movs	r3, #1
 800a46c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a474:	bfa4      	itt	ge
 800a476:	4623      	movge	r3, r4
 800a478:	462c      	movge	r4, r5
 800a47a:	4638      	mov	r0, r7
 800a47c:	6861      	ldr	r1, [r4, #4]
 800a47e:	bfa6      	itte	ge
 800a480:	461d      	movge	r5, r3
 800a482:	2600      	movge	r6, #0
 800a484:	2601      	movlt	r6, #1
 800a486:	f7ff fdb2 	bl	8009fee <_Balloc>
 800a48a:	692b      	ldr	r3, [r5, #16]
 800a48c:	60c6      	str	r6, [r0, #12]
 800a48e:	6926      	ldr	r6, [r4, #16]
 800a490:	f105 0914 	add.w	r9, r5, #20
 800a494:	f104 0214 	add.w	r2, r4, #20
 800a498:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a49c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a4a0:	f100 0514 	add.w	r5, r0, #20
 800a4a4:	f04f 0e00 	mov.w	lr, #0
 800a4a8:	f852 ab04 	ldr.w	sl, [r2], #4
 800a4ac:	f859 4b04 	ldr.w	r4, [r9], #4
 800a4b0:	fa1e f18a 	uxtah	r1, lr, sl
 800a4b4:	b2a3      	uxth	r3, r4
 800a4b6:	1ac9      	subs	r1, r1, r3
 800a4b8:	0c23      	lsrs	r3, r4, #16
 800a4ba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a4be:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a4c2:	b289      	uxth	r1, r1
 800a4c4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a4c8:	45c8      	cmp	r8, r9
 800a4ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a4ce:	4694      	mov	ip, r2
 800a4d0:	f845 3b04 	str.w	r3, [r5], #4
 800a4d4:	d8e8      	bhi.n	800a4a8 <__mdiff+0x5c>
 800a4d6:	45bc      	cmp	ip, r7
 800a4d8:	d304      	bcc.n	800a4e4 <__mdiff+0x98>
 800a4da:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a4de:	b183      	cbz	r3, 800a502 <__mdiff+0xb6>
 800a4e0:	6106      	str	r6, [r0, #16]
 800a4e2:	e7c5      	b.n	800a470 <__mdiff+0x24>
 800a4e4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a4e8:	fa1e f381 	uxtah	r3, lr, r1
 800a4ec:	141a      	asrs	r2, r3, #16
 800a4ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4f8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a4fc:	f845 3b04 	str.w	r3, [r5], #4
 800a500:	e7e9      	b.n	800a4d6 <__mdiff+0x8a>
 800a502:	3e01      	subs	r6, #1
 800a504:	e7e9      	b.n	800a4da <__mdiff+0x8e>

0800a506 <__d2b>:
 800a506:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a50a:	460e      	mov	r6, r1
 800a50c:	2101      	movs	r1, #1
 800a50e:	ec59 8b10 	vmov	r8, r9, d0
 800a512:	4615      	mov	r5, r2
 800a514:	f7ff fd6b 	bl	8009fee <_Balloc>
 800a518:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a51c:	4607      	mov	r7, r0
 800a51e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a522:	bb34      	cbnz	r4, 800a572 <__d2b+0x6c>
 800a524:	9301      	str	r3, [sp, #4]
 800a526:	f1b8 0300 	subs.w	r3, r8, #0
 800a52a:	d027      	beq.n	800a57c <__d2b+0x76>
 800a52c:	a802      	add	r0, sp, #8
 800a52e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a532:	f7ff fe01 	bl	800a138 <__lo0bits>
 800a536:	9900      	ldr	r1, [sp, #0]
 800a538:	b1f0      	cbz	r0, 800a578 <__d2b+0x72>
 800a53a:	9a01      	ldr	r2, [sp, #4]
 800a53c:	f1c0 0320 	rsb	r3, r0, #32
 800a540:	fa02 f303 	lsl.w	r3, r2, r3
 800a544:	430b      	orrs	r3, r1
 800a546:	40c2      	lsrs	r2, r0
 800a548:	617b      	str	r3, [r7, #20]
 800a54a:	9201      	str	r2, [sp, #4]
 800a54c:	9b01      	ldr	r3, [sp, #4]
 800a54e:	61bb      	str	r3, [r7, #24]
 800a550:	2b00      	cmp	r3, #0
 800a552:	bf14      	ite	ne
 800a554:	2102      	movne	r1, #2
 800a556:	2101      	moveq	r1, #1
 800a558:	6139      	str	r1, [r7, #16]
 800a55a:	b1c4      	cbz	r4, 800a58e <__d2b+0x88>
 800a55c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a560:	4404      	add	r4, r0
 800a562:	6034      	str	r4, [r6, #0]
 800a564:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a568:	6028      	str	r0, [r5, #0]
 800a56a:	4638      	mov	r0, r7
 800a56c:	b003      	add	sp, #12
 800a56e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a576:	e7d5      	b.n	800a524 <__d2b+0x1e>
 800a578:	6179      	str	r1, [r7, #20]
 800a57a:	e7e7      	b.n	800a54c <__d2b+0x46>
 800a57c:	a801      	add	r0, sp, #4
 800a57e:	f7ff fddb 	bl	800a138 <__lo0bits>
 800a582:	9b01      	ldr	r3, [sp, #4]
 800a584:	617b      	str	r3, [r7, #20]
 800a586:	2101      	movs	r1, #1
 800a588:	6139      	str	r1, [r7, #16]
 800a58a:	3020      	adds	r0, #32
 800a58c:	e7e5      	b.n	800a55a <__d2b+0x54>
 800a58e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a592:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a596:	6030      	str	r0, [r6, #0]
 800a598:	6918      	ldr	r0, [r3, #16]
 800a59a:	f7ff fdae 	bl	800a0fa <__hi0bits>
 800a59e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a5a2:	e7e1      	b.n	800a568 <__d2b+0x62>

0800a5a4 <_calloc_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	fb02 f401 	mul.w	r4, r2, r1
 800a5aa:	4621      	mov	r1, r4
 800a5ac:	f7fe f9da 	bl	8008964 <_malloc_r>
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	b118      	cbz	r0, 800a5bc <_calloc_r+0x18>
 800a5b4:	4622      	mov	r2, r4
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	f7fe f97e 	bl	80088b8 <memset>
 800a5bc:	4628      	mov	r0, r5
 800a5be:	bd38      	pop	{r3, r4, r5, pc}

0800a5c0 <__ssputs_r>:
 800a5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c4:	688e      	ldr	r6, [r1, #8]
 800a5c6:	429e      	cmp	r6, r3
 800a5c8:	4682      	mov	sl, r0
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	4690      	mov	r8, r2
 800a5ce:	4699      	mov	r9, r3
 800a5d0:	d837      	bhi.n	800a642 <__ssputs_r+0x82>
 800a5d2:	898a      	ldrh	r2, [r1, #12]
 800a5d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5d8:	d031      	beq.n	800a63e <__ssputs_r+0x7e>
 800a5da:	6825      	ldr	r5, [r4, #0]
 800a5dc:	6909      	ldr	r1, [r1, #16]
 800a5de:	1a6f      	subs	r7, r5, r1
 800a5e0:	6965      	ldr	r5, [r4, #20]
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5e8:	fb95 f5f3 	sdiv	r5, r5, r3
 800a5ec:	f109 0301 	add.w	r3, r9, #1
 800a5f0:	443b      	add	r3, r7
 800a5f2:	429d      	cmp	r5, r3
 800a5f4:	bf38      	it	cc
 800a5f6:	461d      	movcc	r5, r3
 800a5f8:	0553      	lsls	r3, r2, #21
 800a5fa:	d530      	bpl.n	800a65e <__ssputs_r+0x9e>
 800a5fc:	4629      	mov	r1, r5
 800a5fe:	f7fe f9b1 	bl	8008964 <_malloc_r>
 800a602:	4606      	mov	r6, r0
 800a604:	b950      	cbnz	r0, 800a61c <__ssputs_r+0x5c>
 800a606:	230c      	movs	r3, #12
 800a608:	f8ca 3000 	str.w	r3, [sl]
 800a60c:	89a3      	ldrh	r3, [r4, #12]
 800a60e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a612:	81a3      	strh	r3, [r4, #12]
 800a614:	f04f 30ff 	mov.w	r0, #4294967295
 800a618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a61c:	463a      	mov	r2, r7
 800a61e:	6921      	ldr	r1, [r4, #16]
 800a620:	f7ff fcd8 	bl	8009fd4 <memcpy>
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a62a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a62e:	81a3      	strh	r3, [r4, #12]
 800a630:	6126      	str	r6, [r4, #16]
 800a632:	6165      	str	r5, [r4, #20]
 800a634:	443e      	add	r6, r7
 800a636:	1bed      	subs	r5, r5, r7
 800a638:	6026      	str	r6, [r4, #0]
 800a63a:	60a5      	str	r5, [r4, #8]
 800a63c:	464e      	mov	r6, r9
 800a63e:	454e      	cmp	r6, r9
 800a640:	d900      	bls.n	800a644 <__ssputs_r+0x84>
 800a642:	464e      	mov	r6, r9
 800a644:	4632      	mov	r2, r6
 800a646:	4641      	mov	r1, r8
 800a648:	6820      	ldr	r0, [r4, #0]
 800a64a:	f000 f91d 	bl	800a888 <memmove>
 800a64e:	68a3      	ldr	r3, [r4, #8]
 800a650:	1b9b      	subs	r3, r3, r6
 800a652:	60a3      	str	r3, [r4, #8]
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	441e      	add	r6, r3
 800a658:	6026      	str	r6, [r4, #0]
 800a65a:	2000      	movs	r0, #0
 800a65c:	e7dc      	b.n	800a618 <__ssputs_r+0x58>
 800a65e:	462a      	mov	r2, r5
 800a660:	f000 f92b 	bl	800a8ba <_realloc_r>
 800a664:	4606      	mov	r6, r0
 800a666:	2800      	cmp	r0, #0
 800a668:	d1e2      	bne.n	800a630 <__ssputs_r+0x70>
 800a66a:	6921      	ldr	r1, [r4, #16]
 800a66c:	4650      	mov	r0, sl
 800a66e:	f7fe f92b 	bl	80088c8 <_free_r>
 800a672:	e7c8      	b.n	800a606 <__ssputs_r+0x46>

0800a674 <_svfiprintf_r>:
 800a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a678:	461d      	mov	r5, r3
 800a67a:	898b      	ldrh	r3, [r1, #12]
 800a67c:	061f      	lsls	r7, r3, #24
 800a67e:	b09d      	sub	sp, #116	; 0x74
 800a680:	4680      	mov	r8, r0
 800a682:	460c      	mov	r4, r1
 800a684:	4616      	mov	r6, r2
 800a686:	d50f      	bpl.n	800a6a8 <_svfiprintf_r+0x34>
 800a688:	690b      	ldr	r3, [r1, #16]
 800a68a:	b96b      	cbnz	r3, 800a6a8 <_svfiprintf_r+0x34>
 800a68c:	2140      	movs	r1, #64	; 0x40
 800a68e:	f7fe f969 	bl	8008964 <_malloc_r>
 800a692:	6020      	str	r0, [r4, #0]
 800a694:	6120      	str	r0, [r4, #16]
 800a696:	b928      	cbnz	r0, 800a6a4 <_svfiprintf_r+0x30>
 800a698:	230c      	movs	r3, #12
 800a69a:	f8c8 3000 	str.w	r3, [r8]
 800a69e:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a2:	e0c8      	b.n	800a836 <_svfiprintf_r+0x1c2>
 800a6a4:	2340      	movs	r3, #64	; 0x40
 800a6a6:	6163      	str	r3, [r4, #20]
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ac:	2320      	movs	r3, #32
 800a6ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6b2:	2330      	movs	r3, #48	; 0x30
 800a6b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6b8:	9503      	str	r5, [sp, #12]
 800a6ba:	f04f 0b01 	mov.w	fp, #1
 800a6be:	4637      	mov	r7, r6
 800a6c0:	463d      	mov	r5, r7
 800a6c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a6c6:	b10b      	cbz	r3, 800a6cc <_svfiprintf_r+0x58>
 800a6c8:	2b25      	cmp	r3, #37	; 0x25
 800a6ca:	d13e      	bne.n	800a74a <_svfiprintf_r+0xd6>
 800a6cc:	ebb7 0a06 	subs.w	sl, r7, r6
 800a6d0:	d00b      	beq.n	800a6ea <_svfiprintf_r+0x76>
 800a6d2:	4653      	mov	r3, sl
 800a6d4:	4632      	mov	r2, r6
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	4640      	mov	r0, r8
 800a6da:	f7ff ff71 	bl	800a5c0 <__ssputs_r>
 800a6de:	3001      	adds	r0, #1
 800a6e0:	f000 80a4 	beq.w	800a82c <_svfiprintf_r+0x1b8>
 800a6e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e6:	4453      	add	r3, sl
 800a6e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ea:	783b      	ldrb	r3, [r7, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f000 809d 	beq.w	800a82c <_svfiprintf_r+0x1b8>
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6fc:	9304      	str	r3, [sp, #16]
 800a6fe:	9307      	str	r3, [sp, #28]
 800a700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a704:	931a      	str	r3, [sp, #104]	; 0x68
 800a706:	462f      	mov	r7, r5
 800a708:	2205      	movs	r2, #5
 800a70a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a70e:	4850      	ldr	r0, [pc, #320]	; (800a850 <_svfiprintf_r+0x1dc>)
 800a710:	f7f5 fd66 	bl	80001e0 <memchr>
 800a714:	9b04      	ldr	r3, [sp, #16]
 800a716:	b9d0      	cbnz	r0, 800a74e <_svfiprintf_r+0xda>
 800a718:	06d9      	lsls	r1, r3, #27
 800a71a:	bf44      	itt	mi
 800a71c:	2220      	movmi	r2, #32
 800a71e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a722:	071a      	lsls	r2, r3, #28
 800a724:	bf44      	itt	mi
 800a726:	222b      	movmi	r2, #43	; 0x2b
 800a728:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a72c:	782a      	ldrb	r2, [r5, #0]
 800a72e:	2a2a      	cmp	r2, #42	; 0x2a
 800a730:	d015      	beq.n	800a75e <_svfiprintf_r+0xea>
 800a732:	9a07      	ldr	r2, [sp, #28]
 800a734:	462f      	mov	r7, r5
 800a736:	2000      	movs	r0, #0
 800a738:	250a      	movs	r5, #10
 800a73a:	4639      	mov	r1, r7
 800a73c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a740:	3b30      	subs	r3, #48	; 0x30
 800a742:	2b09      	cmp	r3, #9
 800a744:	d94d      	bls.n	800a7e2 <_svfiprintf_r+0x16e>
 800a746:	b1b8      	cbz	r0, 800a778 <_svfiprintf_r+0x104>
 800a748:	e00f      	b.n	800a76a <_svfiprintf_r+0xf6>
 800a74a:	462f      	mov	r7, r5
 800a74c:	e7b8      	b.n	800a6c0 <_svfiprintf_r+0x4c>
 800a74e:	4a40      	ldr	r2, [pc, #256]	; (800a850 <_svfiprintf_r+0x1dc>)
 800a750:	1a80      	subs	r0, r0, r2
 800a752:	fa0b f000 	lsl.w	r0, fp, r0
 800a756:	4318      	orrs	r0, r3
 800a758:	9004      	str	r0, [sp, #16]
 800a75a:	463d      	mov	r5, r7
 800a75c:	e7d3      	b.n	800a706 <_svfiprintf_r+0x92>
 800a75e:	9a03      	ldr	r2, [sp, #12]
 800a760:	1d11      	adds	r1, r2, #4
 800a762:	6812      	ldr	r2, [r2, #0]
 800a764:	9103      	str	r1, [sp, #12]
 800a766:	2a00      	cmp	r2, #0
 800a768:	db01      	blt.n	800a76e <_svfiprintf_r+0xfa>
 800a76a:	9207      	str	r2, [sp, #28]
 800a76c:	e004      	b.n	800a778 <_svfiprintf_r+0x104>
 800a76e:	4252      	negs	r2, r2
 800a770:	f043 0302 	orr.w	r3, r3, #2
 800a774:	9207      	str	r2, [sp, #28]
 800a776:	9304      	str	r3, [sp, #16]
 800a778:	783b      	ldrb	r3, [r7, #0]
 800a77a:	2b2e      	cmp	r3, #46	; 0x2e
 800a77c:	d10c      	bne.n	800a798 <_svfiprintf_r+0x124>
 800a77e:	787b      	ldrb	r3, [r7, #1]
 800a780:	2b2a      	cmp	r3, #42	; 0x2a
 800a782:	d133      	bne.n	800a7ec <_svfiprintf_r+0x178>
 800a784:	9b03      	ldr	r3, [sp, #12]
 800a786:	1d1a      	adds	r2, r3, #4
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	9203      	str	r2, [sp, #12]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	bfb8      	it	lt
 800a790:	f04f 33ff 	movlt.w	r3, #4294967295
 800a794:	3702      	adds	r7, #2
 800a796:	9305      	str	r3, [sp, #20]
 800a798:	4d2e      	ldr	r5, [pc, #184]	; (800a854 <_svfiprintf_r+0x1e0>)
 800a79a:	7839      	ldrb	r1, [r7, #0]
 800a79c:	2203      	movs	r2, #3
 800a79e:	4628      	mov	r0, r5
 800a7a0:	f7f5 fd1e 	bl	80001e0 <memchr>
 800a7a4:	b138      	cbz	r0, 800a7b6 <_svfiprintf_r+0x142>
 800a7a6:	2340      	movs	r3, #64	; 0x40
 800a7a8:	1b40      	subs	r0, r0, r5
 800a7aa:	fa03 f000 	lsl.w	r0, r3, r0
 800a7ae:	9b04      	ldr	r3, [sp, #16]
 800a7b0:	4303      	orrs	r3, r0
 800a7b2:	3701      	adds	r7, #1
 800a7b4:	9304      	str	r3, [sp, #16]
 800a7b6:	7839      	ldrb	r1, [r7, #0]
 800a7b8:	4827      	ldr	r0, [pc, #156]	; (800a858 <_svfiprintf_r+0x1e4>)
 800a7ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7be:	2206      	movs	r2, #6
 800a7c0:	1c7e      	adds	r6, r7, #1
 800a7c2:	f7f5 fd0d 	bl	80001e0 <memchr>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d038      	beq.n	800a83c <_svfiprintf_r+0x1c8>
 800a7ca:	4b24      	ldr	r3, [pc, #144]	; (800a85c <_svfiprintf_r+0x1e8>)
 800a7cc:	bb13      	cbnz	r3, 800a814 <_svfiprintf_r+0x1a0>
 800a7ce:	9b03      	ldr	r3, [sp, #12]
 800a7d0:	3307      	adds	r3, #7
 800a7d2:	f023 0307 	bic.w	r3, r3, #7
 800a7d6:	3308      	adds	r3, #8
 800a7d8:	9303      	str	r3, [sp, #12]
 800a7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7dc:	444b      	add	r3, r9
 800a7de:	9309      	str	r3, [sp, #36]	; 0x24
 800a7e0:	e76d      	b.n	800a6be <_svfiprintf_r+0x4a>
 800a7e2:	fb05 3202 	mla	r2, r5, r2, r3
 800a7e6:	2001      	movs	r0, #1
 800a7e8:	460f      	mov	r7, r1
 800a7ea:	e7a6      	b.n	800a73a <_svfiprintf_r+0xc6>
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	3701      	adds	r7, #1
 800a7f0:	9305      	str	r3, [sp, #20]
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	250a      	movs	r5, #10
 800a7f6:	4638      	mov	r0, r7
 800a7f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7fc:	3a30      	subs	r2, #48	; 0x30
 800a7fe:	2a09      	cmp	r2, #9
 800a800:	d903      	bls.n	800a80a <_svfiprintf_r+0x196>
 800a802:	2b00      	cmp	r3, #0
 800a804:	d0c8      	beq.n	800a798 <_svfiprintf_r+0x124>
 800a806:	9105      	str	r1, [sp, #20]
 800a808:	e7c6      	b.n	800a798 <_svfiprintf_r+0x124>
 800a80a:	fb05 2101 	mla	r1, r5, r1, r2
 800a80e:	2301      	movs	r3, #1
 800a810:	4607      	mov	r7, r0
 800a812:	e7f0      	b.n	800a7f6 <_svfiprintf_r+0x182>
 800a814:	ab03      	add	r3, sp, #12
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	4622      	mov	r2, r4
 800a81a:	4b11      	ldr	r3, [pc, #68]	; (800a860 <_svfiprintf_r+0x1ec>)
 800a81c:	a904      	add	r1, sp, #16
 800a81e:	4640      	mov	r0, r8
 800a820:	f7fe f98e 	bl	8008b40 <_printf_float>
 800a824:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a828:	4681      	mov	r9, r0
 800a82a:	d1d6      	bne.n	800a7da <_svfiprintf_r+0x166>
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	065b      	lsls	r3, r3, #25
 800a830:	f53f af35 	bmi.w	800a69e <_svfiprintf_r+0x2a>
 800a834:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a836:	b01d      	add	sp, #116	; 0x74
 800a838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a83c:	ab03      	add	r3, sp, #12
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	4622      	mov	r2, r4
 800a842:	4b07      	ldr	r3, [pc, #28]	; (800a860 <_svfiprintf_r+0x1ec>)
 800a844:	a904      	add	r1, sp, #16
 800a846:	4640      	mov	r0, r8
 800a848:	f7fe fc30 	bl	80090ac <_printf_i>
 800a84c:	e7ea      	b.n	800a824 <_svfiprintf_r+0x1b0>
 800a84e:	bf00      	nop
 800a850:	0800ab9c 	.word	0x0800ab9c
 800a854:	0800aba2 	.word	0x0800aba2
 800a858:	0800aba6 	.word	0x0800aba6
 800a85c:	08008b41 	.word	0x08008b41
 800a860:	0800a5c1 	.word	0x0800a5c1

0800a864 <__ascii_mbtowc>:
 800a864:	b082      	sub	sp, #8
 800a866:	b901      	cbnz	r1, 800a86a <__ascii_mbtowc+0x6>
 800a868:	a901      	add	r1, sp, #4
 800a86a:	b142      	cbz	r2, 800a87e <__ascii_mbtowc+0x1a>
 800a86c:	b14b      	cbz	r3, 800a882 <__ascii_mbtowc+0x1e>
 800a86e:	7813      	ldrb	r3, [r2, #0]
 800a870:	600b      	str	r3, [r1, #0]
 800a872:	7812      	ldrb	r2, [r2, #0]
 800a874:	1c10      	adds	r0, r2, #0
 800a876:	bf18      	it	ne
 800a878:	2001      	movne	r0, #1
 800a87a:	b002      	add	sp, #8
 800a87c:	4770      	bx	lr
 800a87e:	4610      	mov	r0, r2
 800a880:	e7fb      	b.n	800a87a <__ascii_mbtowc+0x16>
 800a882:	f06f 0001 	mvn.w	r0, #1
 800a886:	e7f8      	b.n	800a87a <__ascii_mbtowc+0x16>

0800a888 <memmove>:
 800a888:	4288      	cmp	r0, r1
 800a88a:	b510      	push	{r4, lr}
 800a88c:	eb01 0302 	add.w	r3, r1, r2
 800a890:	d807      	bhi.n	800a8a2 <memmove+0x1a>
 800a892:	1e42      	subs	r2, r0, #1
 800a894:	4299      	cmp	r1, r3
 800a896:	d00a      	beq.n	800a8ae <memmove+0x26>
 800a898:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a89c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a8a0:	e7f8      	b.n	800a894 <memmove+0xc>
 800a8a2:	4283      	cmp	r3, r0
 800a8a4:	d9f5      	bls.n	800a892 <memmove+0xa>
 800a8a6:	1881      	adds	r1, r0, r2
 800a8a8:	1ad2      	subs	r2, r2, r3
 800a8aa:	42d3      	cmn	r3, r2
 800a8ac:	d100      	bne.n	800a8b0 <memmove+0x28>
 800a8ae:	bd10      	pop	{r4, pc}
 800a8b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a8b8:	e7f7      	b.n	800a8aa <memmove+0x22>

0800a8ba <_realloc_r>:
 800a8ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8bc:	4607      	mov	r7, r0
 800a8be:	4614      	mov	r4, r2
 800a8c0:	460e      	mov	r6, r1
 800a8c2:	b921      	cbnz	r1, 800a8ce <_realloc_r+0x14>
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a8ca:	f7fe b84b 	b.w	8008964 <_malloc_r>
 800a8ce:	b922      	cbnz	r2, 800a8da <_realloc_r+0x20>
 800a8d0:	f7fd fffa 	bl	80088c8 <_free_r>
 800a8d4:	4625      	mov	r5, r4
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8da:	f000 f821 	bl	800a920 <_malloc_usable_size_r>
 800a8de:	42a0      	cmp	r0, r4
 800a8e0:	d20f      	bcs.n	800a902 <_realloc_r+0x48>
 800a8e2:	4621      	mov	r1, r4
 800a8e4:	4638      	mov	r0, r7
 800a8e6:	f7fe f83d 	bl	8008964 <_malloc_r>
 800a8ea:	4605      	mov	r5, r0
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d0f2      	beq.n	800a8d6 <_realloc_r+0x1c>
 800a8f0:	4631      	mov	r1, r6
 800a8f2:	4622      	mov	r2, r4
 800a8f4:	f7ff fb6e 	bl	8009fd4 <memcpy>
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	4638      	mov	r0, r7
 800a8fc:	f7fd ffe4 	bl	80088c8 <_free_r>
 800a900:	e7e9      	b.n	800a8d6 <_realloc_r+0x1c>
 800a902:	4635      	mov	r5, r6
 800a904:	e7e7      	b.n	800a8d6 <_realloc_r+0x1c>

0800a906 <__ascii_wctomb>:
 800a906:	b149      	cbz	r1, 800a91c <__ascii_wctomb+0x16>
 800a908:	2aff      	cmp	r2, #255	; 0xff
 800a90a:	bf85      	ittet	hi
 800a90c:	238a      	movhi	r3, #138	; 0x8a
 800a90e:	6003      	strhi	r3, [r0, #0]
 800a910:	700a      	strbls	r2, [r1, #0]
 800a912:	f04f 30ff 	movhi.w	r0, #4294967295
 800a916:	bf98      	it	ls
 800a918:	2001      	movls	r0, #1
 800a91a:	4770      	bx	lr
 800a91c:	4608      	mov	r0, r1
 800a91e:	4770      	bx	lr

0800a920 <_malloc_usable_size_r>:
 800a920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a924:	1f18      	subs	r0, r3, #4
 800a926:	2b00      	cmp	r3, #0
 800a928:	bfbc      	itt	lt
 800a92a:	580b      	ldrlt	r3, [r1, r0]
 800a92c:	18c0      	addlt	r0, r0, r3
 800a92e:	4770      	bx	lr

0800a930 <_init>:
 800a930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a932:	bf00      	nop
 800a934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a936:	bc08      	pop	{r3}
 800a938:	469e      	mov	lr, r3
 800a93a:	4770      	bx	lr

0800a93c <_fini>:
 800a93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93e:	bf00      	nop
 800a940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a942:	bc08      	pop	{r3}
 800a944:	469e      	mov	lr, r3
 800a946:	4770      	bx	lr
