
Satellite20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a0bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c50  0801a250  0801a250  0002a250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aea0  0801aea0  00030358  2**0
                  CONTENTS
  4 .ARM          00000008  0801aea0  0801aea0  0002aea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aea8  0801aea8  00030358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aea8  0801aea8  0002aea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aeac  0801aeac  0002aeac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0801aeb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008150  20000358  0801b208  00030358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200084a8  0801b208  000384a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b5a3  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006b8c  00000000  00000000  0006b92b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025a8  00000000  00000000  000724b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022d0  00000000  00000000  00074a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000bb2a  00000000  00000000  00076d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026483  00000000  00000000  0008285a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6ff2  00000000  00000000  000a8cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017fccf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000af34  00000000  00000000  0017fd4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  0018ac80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a234 	.word	0x0801a234

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	0801a234 	.word	0x0801a234

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9bd 	b.w	8001044 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f84d 	bl	8000d78 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f840 	bl	8000d78 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f82f 	bl	8000d78 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f821 	bl	8000d78 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b972 	b.w	8001044 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4688      	mov	r8, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14b      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4615      	mov	r5, r2
 8000d8a:	d967      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0720 	rsb	r7, r2, #32
 8000d96:	fa01 f302 	lsl.w	r3, r1, r2
 8000d9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d9e:	4095      	lsls	r5, r2
 8000da0:	ea47 0803 	orr.w	r8, r7, r3
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000db0:	fa1f fc85 	uxth.w	ip, r5
 8000db4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18eb      	adds	r3, r5, r3
 8000dc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dca:	f080 811b 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8118 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000dd4:	3f02      	subs	r7, #2
 8000dd6:	442b      	add	r3, r5
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	192c      	adds	r4, r5, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x290>
 8000e00:	3802      	subs	r0, #2
 8000e02:	442c      	add	r4, r5
 8000e04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e08:	eba4 040c 	sub.w	r4, r4, ip
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	b11e      	cbz	r6, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c6 4300 	strd	r4, r3, [r6]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xbe>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80eb 	beq.w	8000ffe <__udivmoddi4+0x286>
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e2e:	4638      	mov	r0, r7
 8000e30:	4639      	mov	r1, r7
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f783 	clz	r7, r3
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d147      	bne.n	8000ece <__udivmoddi4+0x156>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd0>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80fa 	bhi.w	800103c <__udivmoddi4+0x2c4>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4698      	mov	r8, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000e56:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xe8>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 808f 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e6a:	1b49      	subs	r1, r1, r5
 8000e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e70:	fa1f f885 	uxth.w	r8, r5
 8000e74:	2701      	movs	r7, #1
 8000e76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e7a:	0c23      	lsrs	r3, r4, #16
 8000e7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb08 f10c 	mul.w	r1, r8, ip
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8c:	18eb      	adds	r3, r5, r3
 8000e8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	f200 80cd 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e9a:	4684      	mov	ip, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	b2a3      	uxth	r3, r4
 8000ea0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ea8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eac:	fb08 f800 	mul.w	r8, r8, r0
 8000eb0:	45a0      	cmp	r8, r4
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x14c>
 8000eb4:	192c      	adds	r4, r5, r4
 8000eb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eba:	d202      	bcs.n	8000ec2 <__udivmoddi4+0x14a>
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	f200 80b6 	bhi.w	800102e <__udivmoddi4+0x2b6>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	eba4 0408 	sub.w	r4, r4, r8
 8000ec8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ecc:	e79f      	b.n	8000e0e <__udivmoddi4+0x96>
 8000ece:	f1c7 0c20 	rsb	ip, r7, #32
 8000ed2:	40bb      	lsls	r3, r7
 8000ed4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ed8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000edc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ee0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ee4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ee8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000eec:	4325      	orrs	r5, r4
 8000eee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ef2:	0c2c      	lsrs	r4, r5, #16
 8000ef4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ef8:	fa1f fa8e 	uxth.w	sl, lr
 8000efc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f00:	fb09 f40a 	mul.w	r4, r9, sl
 8000f04:	429c      	cmp	r4, r3
 8000f06:	fa02 f207 	lsl.w	r2, r2, r7
 8000f0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1e 0303 	adds.w	r3, lr, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	f080 8087 	bcs.w	800102a <__udivmoddi4+0x2b2>
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	f240 8084 	bls.w	800102a <__udivmoddi4+0x2b2>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4473      	add	r3, lr
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	b2ad      	uxth	r5, r5
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f3c:	45a2      	cmp	sl, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1e 0404 	adds.w	r4, lr, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f48:	d26b      	bcs.n	8001022 <__udivmoddi4+0x2aa>
 8000f4a:	45a2      	cmp	sl, r4
 8000f4c:	d969      	bls.n	8001022 <__udivmoddi4+0x2aa>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4474      	add	r4, lr
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	eba4 040a 	sub.w	r4, r4, sl
 8000f5e:	454c      	cmp	r4, r9
 8000f60:	46c2      	mov	sl, r8
 8000f62:	464b      	mov	r3, r9
 8000f64:	d354      	bcc.n	8001010 <__udivmoddi4+0x298>
 8000f66:	d051      	beq.n	800100c <__udivmoddi4+0x294>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d069      	beq.n	8001040 <__udivmoddi4+0x2c8>
 8000f6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f70:	eb64 0403 	sbc.w	r4, r4, r3
 8000f74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f78:	40fd      	lsrs	r5, r7
 8000f7a:	40fc      	lsrs	r4, r7
 8000f7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f80:	e9c6 5400 	strd	r5, r4, [r6]
 8000f84:	2700      	movs	r7, #0
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f90:	4095      	lsls	r5, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f9e:	4338      	orrs	r0, r7
 8000fa0:	0c01      	lsrs	r1, r0, #16
 8000fa2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fa6:	fa1f f885 	uxth.w	r8, r5
 8000faa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb07 f308 	mul.w	r3, r7, r8
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x256>
 8000fbe:	1869      	adds	r1, r5, r1
 8000fc0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fc4:	d22f      	bcs.n	8001026 <__udivmoddi4+0x2ae>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d92d      	bls.n	8001026 <__udivmoddi4+0x2ae>
 8000fca:	3f02      	subs	r7, #2
 8000fcc:	4429      	add	r1, r5
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	b281      	uxth	r1, r0
 8000fd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb00 f308 	mul.w	r3, r0, r8
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x27e>
 8000fe6:	1869      	adds	r1, r5, r1
 8000fe8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fec:	d217      	bcs.n	800101e <__udivmoddi4+0x2a6>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d915      	bls.n	800101e <__udivmoddi4+0x2a6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4429      	add	r1, r5
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ffc:	e73b      	b.n	8000e76 <__udivmoddi4+0xfe>
 8000ffe:	4637      	mov	r7, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e709      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001004:	4607      	mov	r7, r0
 8001006:	e6e7      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001008:	4618      	mov	r0, r3
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x8c>
 800100c:	4541      	cmp	r1, r8
 800100e:	d2ab      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001010:	ebb8 0a02 	subs.w	sl, r8, r2
 8001014:	eb69 020e 	sbc.w	r2, r9, lr
 8001018:	3801      	subs	r0, #1
 800101a:	4613      	mov	r3, r2
 800101c:	e7a4      	b.n	8000f68 <__udivmoddi4+0x1f0>
 800101e:	4660      	mov	r0, ip
 8001020:	e7e9      	b.n	8000ff6 <__udivmoddi4+0x27e>
 8001022:	4618      	mov	r0, r3
 8001024:	e795      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001026:	4667      	mov	r7, ip
 8001028:	e7d1      	b.n	8000fce <__udivmoddi4+0x256>
 800102a:	4681      	mov	r9, r0
 800102c:	e77c      	b.n	8000f28 <__udivmoddi4+0x1b0>
 800102e:	3802      	subs	r0, #2
 8001030:	442c      	add	r4, r5
 8001032:	e747      	b.n	8000ec4 <__udivmoddi4+0x14c>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	442b      	add	r3, r5
 800103a:	e72f      	b.n	8000e9c <__udivmoddi4+0x124>
 800103c:	4638      	mov	r0, r7
 800103e:	e708      	b.n	8000e52 <__udivmoddi4+0xda>
 8001040:	4637      	mov	r7, r6
 8001042:	e6e9      	b.n	8000e18 <__udivmoddi4+0xa0>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <SD_init>:
    return FR_OK;
}


FRESULT SD_init()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0

	if (BSP_SD_Init() != MSD_OK) return FR_NOT_READY;
 800104e:	f010 fd01 	bl	8011a54 <BSP_SD_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SD_init+0x14>
 8001058:	2303      	movs	r3, #3
 800105a:	e027      	b.n	80010ac <SD_init+0x64>

	if (FATFS_UnLinkDriver(SDPath) != 0) return FR_NOT_READY;
 800105c:	4815      	ldr	r0, [pc, #84]	; (80010b4 <SD_init+0x6c>)
 800105e:	f010 fceb 	bl	8011a38 <FATFS_UnLinkDriver>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SD_init+0x24>
 8001068:	2303      	movs	r3, #3
 800106a:	e01f      	b.n	80010ac <SD_init+0x64>

	if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0) return FR_NOT_READY;
 800106c:	4911      	ldr	r1, [pc, #68]	; (80010b4 <SD_init+0x6c>)
 800106e:	4812      	ldr	r0, [pc, #72]	; (80010b8 <SD_init+0x70>)
 8001070:	f010 fc9a 	bl	80119a8 <FATFS_LinkDriver>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SD_init+0x36>
 800107a:	2303      	movs	r3, #3
 800107c:	e016      	b.n	80010ac <SD_init+0x64>

	f_mount(0, SDPath, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <SD_init+0x6c>)
 8001082:	2000      	movs	r0, #0
 8001084:	f00f fee8 	bl	8010e58 <f_mount>
	FRESULT mountStatus = f_mount(&fso, SDPath, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	490a      	ldr	r1, [pc, #40]	; (80010b4 <SD_init+0x6c>)
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <SD_init+0x74>)
 800108e:	f00f fee3 	bl	8010e58 <f_mount>
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	if (mountStatus != FR_OK)
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <SD_init+0x62>
	{
		f_mount(0, SDPath, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	4905      	ldr	r1, [pc, #20]	; (80010b4 <SD_init+0x6c>)
 80010a0:	2000      	movs	r0, #0
 80010a2:	f00f fed9 	bl	8010e58 <f_mount>
		return mountStatus;
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	e000      	b.n	80010ac <SD_init+0x64>
	}

	return FR_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20004888 	.word	0x20004888
 80010b8:	0801ab2c 	.word	0x0801ab2c
 80010bc:	200017fc 	.word	0x200017fc

080010c0 <SD_newFile>:

	return FR_OK;
}

FRESULT SD_newFile(char* path)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	stato = f_open(&fileo, path, FA_CREATE_ALWAYS);
 80010c8:	2208      	movs	r2, #8
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <SD_newFile+0x44>)
 80010ce:	f00f ff09 	bl	8010ee4 <f_open>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <SD_newFile+0x48>)
 80010d8:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK)
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <SD_newFile+0x48>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d007      	beq.n	80010f2 <SD_newFile+0x32>
	{
		f_mount(0, SDPath, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	4909      	ldr	r1, [pc, #36]	; (800110c <SD_newFile+0x4c>)
 80010e6:	2000      	movs	r0, #0
 80010e8:	f00f feb6 	bl	8010e58 <f_mount>
		return stato;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <SD_newFile+0x48>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	e004      	b.n	80010fc <SD_newFile+0x3c>


	//DateTime now = getTime();
	//SD_setFileTime(path, &now);

	f_close(&fileo);
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <SD_newFile+0x44>)
 80010f4:	f010 fad4 	bl	80116a0 <f_close>
	return stato;
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <SD_newFile+0x48>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200007cc 	.word	0x200007cc
 8001108:	200007c8 	.word	0x200007c8
 800110c:	20004888 	.word	0x20004888

08001110 <SD_writeToFile>:
{
	return f_unlink(path);
}

FRESULT SD_writeToFile(char* path, char* content)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
	stato = f_open(&fileo, path,  FA_WRITE | FA_OPEN_APPEND);
 800111a:	2232      	movs	r2, #50	; 0x32
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4815      	ldr	r0, [pc, #84]	; (8001174 <SD_writeToFile+0x64>)
 8001120:	f00f fee0 	bl	8010ee4 <f_open>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <SD_writeToFile+0x68>)
 800112a:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <SD_writeToFile+0x68>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <SD_writeToFile+0x2a>
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <SD_writeToFile+0x68>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	e017      	b.n	800116a <SD_writeToFile+0x5a>

	stato = f_write(&fileo, content, strlen(content), &testByteo);
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	f7ff f852 	bl	80001e4 <strlen>
 8001140:	4602      	mov	r2, r0
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <SD_writeToFile+0x6c>)
 8001144:	6839      	ldr	r1, [r7, #0]
 8001146:	480b      	ldr	r0, [pc, #44]	; (8001174 <SD_writeToFile+0x64>)
 8001148:	f010 f898 	bl	801127c <f_write>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <SD_writeToFile+0x68>)
 8001152:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <SD_writeToFile+0x68>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <SD_writeToFile+0x52>
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <SD_writeToFile+0x68>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	e003      	b.n	800116a <SD_writeToFile+0x5a>

	return f_close(&fileo);
 8001162:	4804      	ldr	r0, [pc, #16]	; (8001174 <SD_writeToFile+0x64>)
 8001164:	f010 fa9c 	bl	80116a0 <f_close>
 8001168:	4603      	mov	r3, r0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200007cc 	.word	0x200007cc
 8001178:	200007c8 	.word	0x200007c8
 800117c:	20002830 	.word	0x20002830

08001180 <SD_newDirectory>:
	//########################
	return FR_OK;
}

FRESULT SD_newDirectory(char* path)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ implement: tree -> multiple '/'
	return f_mkdir(path);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f010 fab3 	bl	80116f4 <f_mkdir>
 800118e:	4603      	mov	r3, r0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <read_data>:
#include "bmp280.h"

static inline int read_data(BMP280 *inst, uint8_t addr, uint8_t *value, uint8_t len) {
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b08b      	sub	sp, #44	; 0x2c
 800119c:	af04      	add	r7, sp, #16
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	461a      	mov	r2, r3
 80011a4:	460b      	mov	r3, r1
 80011a6:	72fb      	strb	r3, [r7, #11]
 80011a8:	4613      	mov	r3, r2
 80011aa:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (inst->addr << 1);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	889b      	ldrh	r3, [r3, #4]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK) return 0;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	7afb      	ldrb	r3, [r7, #11]
 80011ba:	b29c      	uxth	r4, r3
 80011bc:	7abb      	ldrb	r3, [r7, #10]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	8af9      	ldrh	r1, [r7, #22]
 80011c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c6:	9202      	str	r2, [sp, #8]
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	4622      	mov	r2, r4
 80011d2:	f005 faeb 	bl	80067ac <HAL_I2C_Mem_Read>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <read_data+0x48>
 80011dc:	2300      	movs	r3, #0
 80011de:	e000      	b.n	80011e2 <read_data+0x4a>
	else return 1;
 80011e0:	2301      	movs	r3, #1
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	371c      	adds	r7, #28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd90      	pop	{r4, r7, pc}

080011ea <write_register8>:

static int write_register8(BMP280 *inst, uint8_t addr, uint8_t value) {
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b088      	sub	sp, #32
 80011ee:	af04      	add	r7, sp, #16
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	70fb      	strb	r3, [r7, #3]
 80011f6:	4613      	mov	r3, r2
 80011f8:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (inst->addr << 1);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	889b      	ldrh	r3, [r3, #4]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(inst->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK) return false;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	b29a      	uxth	r2, r3
 800120a:	89f9      	ldrh	r1, [r7, #14]
 800120c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2301      	movs	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	1cbb      	adds	r3, r7, #2
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	f005 f9cc 	bl	80065b8 <HAL_I2C_Mem_Write>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <write_register8+0x40>
 8001226:	2300      	movs	r3, #0
 8001228:	e000      	b.n	800122c <write_register8+0x42>
	else return true;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <read_register16>:

static bool read_register16(BMP280 *inst, uint8_t addr, uint16_t *value) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af04      	add	r7, sp, #16
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	460b      	mov	r3, r1
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (inst->addr << 1);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	889b      	ldrh	r3, [r3, #4]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, rx_buff, 2, 5000) == HAL_OK)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	7afb      	ldrb	r3, [r7, #11]
 8001250:	b29a      	uxth	r2, r3
 8001252:	8af9      	ldrh	r1, [r7, #22]
 8001254:	f241 3388 	movw	r3, #5000	; 0x1388
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	2302      	movs	r3, #2
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2301      	movs	r3, #1
 8001266:	f005 faa1 	bl	80067ac <HAL_I2C_Mem_Read>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10b      	bne.n	8001288 <read_register16+0x54>
	{
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001270:	7d7b      	ldrb	r3, [r7, #21]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	b21a      	sxth	r2, r3
 8001276:	7d3b      	ldrb	r3, [r7, #20]
 8001278:	b21b      	sxth	r3, r3
 800127a:	4313      	orrs	r3, r2
 800127c:	b21b      	sxth	r3, r3
 800127e:	b29a      	uxth	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	801a      	strh	r2, [r3, #0]
		return true;
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <read_register16+0x56>
	}
	else return false;
 8001288:	2300      	movs	r3, #0

}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <read_calibration_data>:

static bool read_calibration_data(BMP280 *inst)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
	return (read_register16(inst, 0x88, &inst->dig_T1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	330c      	adds	r3, #12
 800129e:	461a      	mov	r2, r3
 80012a0:	2188      	movs	r1, #136	; 0x88
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffc6 	bl	8001234 <read_register16>
 80012a8:	4603      	mov	r3, r0
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d06f      	beq.n	800138e <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8a, (uint16_t *) &inst->dig_T2)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	330e      	adds	r3, #14
 80012b2:	461a      	mov	r2, r3
 80012b4:	218a      	movs	r1, #138	; 0x8a
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffbc 	bl	8001234 <read_register16>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d065      	beq.n	800138e <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8c, (uint16_t *) &inst->dig_T3)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3310      	adds	r3, #16
 80012c6:	461a      	mov	r2, r3
 80012c8:	218c      	movs	r1, #140	; 0x8c
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffb2 	bl	8001234 <read_register16>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d05b      	beq.n	800138e <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8e, &inst->dig_P1)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3312      	adds	r3, #18
 80012da:	461a      	mov	r2, r3
 80012dc:	218e      	movs	r1, #142	; 0x8e
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa8 	bl	8001234 <read_register16>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d051      	beq.n	800138e <read_calibration_data+0xfc>
	&& read_register16(inst, 0x90, (uint16_t *) &inst->dig_P2)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3314      	adds	r3, #20
 80012ee:	461a      	mov	r2, r3
 80012f0:	2190      	movs	r1, #144	; 0x90
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ff9e 	bl	8001234 <read_register16>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d047      	beq.n	800138e <read_calibration_data+0xfc>
	&& read_register16(inst, 0x92, (uint16_t *) &inst->dig_P3)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3316      	adds	r3, #22
 8001302:	461a      	mov	r2, r3
 8001304:	2192      	movs	r1, #146	; 0x92
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ff94 	bl	8001234 <read_register16>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d03d      	beq.n	800138e <read_calibration_data+0xfc>
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3318      	adds	r3, #24
 8001316:	461a      	mov	r2, r3
 8001318:	2194      	movs	r1, #148	; 0x94
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ff8a 	bl	8001234 <read_register16>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d033      	beq.n	800138e <read_calibration_data+0xfc>
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	331a      	adds	r3, #26
 800132a:	461a      	mov	r2, r3
 800132c:	2196      	movs	r1, #150	; 0x96
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ff80 	bl	8001234 <read_register16>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d029      	beq.n	800138e <read_calibration_data+0xfc>
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	331c      	adds	r3, #28
 800133e:	461a      	mov	r2, r3
 8001340:	2198      	movs	r1, #152	; 0x98
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ff76 	bl	8001234 <read_register16>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d01f      	beq.n	800138e <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	331e      	adds	r3, #30
 8001352:	461a      	mov	r2, r3
 8001354:	219a      	movs	r1, #154	; 0x9a
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ff6c 	bl	8001234 <read_register16>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d015      	beq.n	800138e <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3320      	adds	r3, #32
 8001366:	461a      	mov	r2, r3
 8001368:	219c      	movs	r1, #156	; 0x9c
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ff62 	bl	8001234 <read_register16>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00b      	beq.n	800138e <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3322      	adds	r3, #34	; 0x22
 800137a:	461a      	mov	r2, r3
 800137c:	219e      	movs	r1, #158	; 0x9e
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ff58 	bl	8001234 <read_register16>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <read_calibration_data+0xfc>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <read_calibration_data+0xfe>
 800138e:	2300      	movs	r3, #0
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <bmp280_init>:

bool bmp280_init(BMP280 *inst, BMP280_config *params)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
	inst->active = false;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	if (inst->addr != BMP280_I2C_ADDRESS_0 && inst->addr != BMP280_I2C_ADDRESS_1) return false;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	889b      	ldrh	r3, [r3, #4]
 80013b4:	2b76      	cmp	r3, #118	; 0x76
 80013b6:	d005      	beq.n	80013c4 <bmp280_init+0x26>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	889b      	ldrh	r3, [r3, #4]
 80013bc:	2b77      	cmp	r3, #119	; 0x77
 80013be:	d001      	beq.n	80013c4 <bmp280_init+0x26>
 80013c0:	2300      	movs	r3, #0
 80013c2:	e073      	b.n	80014ac <bmp280_init+0x10e>
	if (read_data(inst, BMP280_REG_ID, &inst->id, 1)) return false;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	1d9a      	adds	r2, r3, #6
 80013c8:	2301      	movs	r3, #1
 80013ca:	21d0      	movs	r1, #208	; 0xd0
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fee3 	bl	8001198 <read_data>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <bmp280_init+0x3e>
 80013d8:	2300      	movs	r3, #0
 80013da:	e067      	b.n	80014ac <bmp280_init+0x10e>
	if (inst->id != BMP280_CHIP_ID) return false;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	799b      	ldrb	r3, [r3, #6]
 80013e0:	2b58      	cmp	r3, #88	; 0x58
 80013e2:	d001      	beq.n	80013e8 <bmp280_init+0x4a>
 80013e4:	2300      	movs	r3, #0
 80013e6:	e061      	b.n	80014ac <bmp280_init+0x10e>

	// Soft reset.
	if (write_register8(inst, BMP280_REG_RESET, BMP280_RESET_VALUE)) return false;
 80013e8:	22b6      	movs	r2, #182	; 0xb6
 80013ea:	21e0      	movs	r1, #224	; 0xe0
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff fefc 	bl	80011ea <write_register8>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <bmp280_init+0x5e>
 80013f8:	2300      	movs	r3, #0
 80013fa:	e057      	b.n	80014ac <bmp280_init+0x10e>

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(inst, BMP280_REG_STATUS, &status, 1) && (status & 1) == 0) break;
 80013fc:	f107 020d 	add.w	r2, r7, #13
 8001400:	2301      	movs	r3, #1
 8001402:	21f3      	movs	r1, #243	; 0xf3
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fec7 	bl	8001198 <read_data>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f5      	bne.n	80013fc <bmp280_init+0x5e>
 8001410:	7b7b      	ldrb	r3, [r7, #13]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <bmp280_init+0x5e>
	}

	if (!read_calibration_data(inst)) return false;
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ff39 	bl	8001292 <read_calibration_data>
 8001420:	4603      	mov	r3, r0
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d100      	bne.n	800142e <bmp280_init+0x90>
 800142c:	e001      	b.n	8001432 <bmp280_init+0x94>
 800142e:	2300      	movs	r3, #0
 8001430:	e03c      	b.n	80014ac <bmp280_init+0x10e>

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	791b      	ldrb	r3, [r3, #4]
 8001436:	015b      	lsls	r3, r3, #5
 8001438:	b25a      	sxtb	r2, r3
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	785b      	ldrb	r3, [r3, #1]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	b25b      	sxtb	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b25b      	sxtb	r3, r3
 8001446:	73fb      	strb	r3, [r7, #15]
	if (write_register8(inst, BMP280_REG_CONFIG, config)) return false;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	461a      	mov	r2, r3
 800144c:	21f5      	movs	r1, #245	; 0xf5
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fecb 	bl	80011ea <write_register8>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <bmp280_init+0xc0>
 800145a:	2300      	movs	r3, #0
 800145c:	e026      	b.n	80014ac <bmp280_init+0x10e>

	if (params->mode == BMP280_MODE_FORCED) {
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d102      	bne.n	800146c <bmp280_init+0xce>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5) | (params->oversampling_pressure << 2) | (params->mode);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	78db      	ldrb	r3, [r3, #3]
 8001470:	015b      	lsls	r3, r3, #5
 8001472:	b25a      	sxtb	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	789b      	ldrb	r3, [r3, #2]
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	b25b      	sxtb	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b25a      	sxtb	r2, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b25b      	sxtb	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b25b      	sxtb	r3, r3
 800148a:	73bb      	strb	r3, [r7, #14]

	if (write_register8(inst, BMP280_REG_CTRL, ctrl)) return false;
 800148c:	7bbb      	ldrb	r3, [r7, #14]
 800148e:	461a      	mov	r2, r3
 8001490:	21f4      	movs	r1, #244	; 0xf4
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fea9 	bl	80011ea <write_register8>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <bmp280_init+0x104>
 800149e:	2300      	movs	r3, #0
 80014a0:	e004      	b.n	80014ac <bmp280_init+0x10e>

	inst->active = true;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	return true;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280 *inst, int32_t adc_temp,
		int32_t *fine_temp) {
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	10da      	asrs	r2, r3, #3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	899b      	ldrh	r3, [r3, #12]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	1ad3      	subs	r3, r2, r3
			* (int32_t) inst->dig_T2) >> 11;
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 80014d6:	12db      	asrs	r3, r3, #11
 80014d8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	111b      	asrs	r3, r3, #4
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	8992      	ldrh	r2, [r2, #12]
 80014e2:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) inst->dig_T1)) >> 12)
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	1112      	asrs	r2, r2, #4
 80014e8:	68f9      	ldr	r1, [r7, #12]
 80014ea:	8989      	ldrh	r1, [r1, #12]
 80014ec:	1a52      	subs	r2, r2, r1
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	131b      	asrs	r3, r3, #12
			* (int32_t) inst->dig_T3) >> 14;
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 80014fe:	139b      	asrs	r3, r3, #14
 8001500:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	441a      	add	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	3380      	adds	r3, #128	; 0x80
 8001518:	121b      	asrs	r3, r3, #8
}
 800151a:	4618      	mov	r0, r3
 800151c:	371c      	adds	r7, #28
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280 *inst, int32_t adc_press,
		int32_t fine_temp) {
 8001526:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4619      	mov	r1, r3
 8001538:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800153c:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001540:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001544:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) inst->dig_P6;
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	6a3a      	ldr	r2, [r7, #32]
 800154c:	fb02 f203 	mul.w	r2, r2, r3
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	6a39      	ldr	r1, [r7, #32]
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	441a      	add	r2, r3
 800155a:	6a39      	ldr	r1, [r7, #32]
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	fba1 3403 	umull	r3, r4, r1, r3
 8001562:	4422      	add	r2, r4
 8001564:	4614      	mov	r4, r2
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 800156c:	b211      	sxth	r1, r2
 800156e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001572:	fb01 f504 	mul.w	r5, r1, r4
 8001576:	fb03 f002 	mul.w	r0, r3, r2
 800157a:	4428      	add	r0, r5
 800157c:	fba3 3401 	umull	r3, r4, r3, r1
 8001580:	1902      	adds	r2, r0, r4
 8001582:	4614      	mov	r4, r2
 8001584:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001588:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) inst->dig_P5) << 17);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001592:	b21b      	sxth	r3, r3
 8001594:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001598:	6a3a      	ldr	r2, [r7, #32]
 800159a:	fb04 f102 	mul.w	r1, r4, r2
 800159e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a0:	fb03 f202 	mul.w	r2, r3, r2
 80015a4:	1888      	adds	r0, r1, r2
 80015a6:	6a3a      	ldr	r2, [r7, #32]
 80015a8:	fba2 1203 	umull	r1, r2, r2, r3
 80015ac:	1883      	adds	r3, r0, r2
 80015ae:	461a      	mov	r2, r3
 80015b0:	f04f 0500 	mov.w	r5, #0
 80015b4:	f04f 0600 	mov.w	r6, #0
 80015b8:	0456      	lsls	r6, r2, #17
 80015ba:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80015be:	044d      	lsls	r5, r1, #17
 80015c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80015c4:	186b      	adds	r3, r5, r1
 80015c6:	eb46 0402 	adc.w	r4, r6, r2
 80015ca:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) inst->dig_P4) << 35);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80015d4:	b219      	sxth	r1, r3
 80015d6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80015da:	f04f 0500 	mov.w	r5, #0
 80015de:	f04f 0600 	mov.w	r6, #0
 80015e2:	00ce      	lsls	r6, r1, #3
 80015e4:	2500      	movs	r5, #0
 80015e6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80015ea:	186b      	adds	r3, r5, r1
 80015ec:	eb46 0402 	adc.w	r4, r6, r2
 80015f0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	6a3a      	ldr	r2, [r7, #32]
 80015f8:	fb02 f203 	mul.w	r2, r2, r3
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	6a39      	ldr	r1, [r7, #32]
 8001600:	fb01 f303 	mul.w	r3, r1, r3
 8001604:	441a      	add	r2, r3
 8001606:	6a39      	ldr	r1, [r7, #32]
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	fba1 3403 	umull	r3, r4, r1, r3
 800160e:	4422      	add	r2, r4
 8001610:	4614      	mov	r4, r2
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8001618:	b211      	sxth	r1, r2
 800161a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800161e:	fb01 f504 	mul.w	r5, r1, r4
 8001622:	fb03 f002 	mul.w	r0, r3, r2
 8001626:	4428      	add	r0, r5
 8001628:	fba3 3401 	umull	r3, r4, r3, r1
 800162c:	1902      	adds	r2, r0, r4
 800162e:	4614      	mov	r4, r2
 8001630:	f04f 0100 	mov.w	r1, #0
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	0a19      	lsrs	r1, r3, #8
 800163a:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800163e:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) inst->dig_P2) << 12);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001646:	b21b      	sxth	r3, r3
 8001648:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800164c:	6a38      	ldr	r0, [r7, #32]
 800164e:	fb04 f500 	mul.w	r5, r4, r0
 8001652:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001654:	fb03 f000 	mul.w	r0, r3, r0
 8001658:	4428      	add	r0, r5
 800165a:	6a3d      	ldr	r5, [r7, #32]
 800165c:	fba5 5603 	umull	r5, r6, r5, r3
 8001660:	1983      	adds	r3, r0, r6
 8001662:	461e      	mov	r6, r3
 8001664:	f04f 0b00 	mov.w	fp, #0
 8001668:	f04f 0c00 	mov.w	ip, #0
 800166c:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001670:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001674:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8001678:	eb1b 0301 	adds.w	r3, fp, r1
 800167c:	eb4c 0402 	adc.w	r4, ip, r2
 8001680:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) inst->dig_P1) >> 33;
 8001684:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001688:	1c19      	adds	r1, r3, #0
 800168a:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	8a5b      	ldrh	r3, [r3, #18]
 8001692:	b29b      	uxth	r3, r3
 8001694:	f04f 0400 	mov.w	r4, #0
 8001698:	fb03 f502 	mul.w	r5, r3, r2
 800169c:	fb01 f004 	mul.w	r0, r1, r4
 80016a0:	4428      	add	r0, r5
 80016a2:	fba1 3403 	umull	r3, r4, r1, r3
 80016a6:	1902      	adds	r2, r0, r4
 80016a8:	4614      	mov	r4, r2
 80016aa:	f04f 0100 	mov.w	r1, #0
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	1061      	asrs	r1, r4, #1
 80016b4:	17e2      	asrs	r2, r4, #31
 80016b6:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 80016ba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80016be:	4323      	orrs	r3, r4
 80016c0:	d101      	bne.n	80016c6 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 80016c2:	2300      	movs	r3, #0
 80016c4:	e0d4      	b.n	8001870 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80016cc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80016d0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	ea4f 0963 	mov.w	r9, r3, asr #1
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80016e0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80016e4:	4645      	mov	r5, r8
 80016e6:	464e      	mov	r6, r9
 80016e8:	1aed      	subs	r5, r5, r3
 80016ea:	eb66 0604 	sbc.w	r6, r6, r4
 80016ee:	46a8      	mov	r8, r5
 80016f0:	46b1      	mov	r9, r6
 80016f2:	eb18 0308 	adds.w	r3, r8, r8
 80016f6:	eb49 0409 	adc.w	r4, r9, r9
 80016fa:	4698      	mov	r8, r3
 80016fc:	46a1      	mov	r9, r4
 80016fe:	eb18 0805 	adds.w	r8, r8, r5
 8001702:	eb49 0906 	adc.w	r9, r9, r6
 8001706:	f04f 0100 	mov.w	r1, #0
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8001712:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001716:	ea4f 1188 	mov.w	r1, r8, lsl #6
 800171a:	eb18 0801 	adds.w	r8, r8, r1
 800171e:	eb49 0902 	adc.w	r9, r9, r2
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800172e:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001732:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001736:	4688      	mov	r8, r1
 8001738:	4691      	mov	r9, r2
 800173a:	eb18 0805 	adds.w	r8, r8, r5
 800173e:	eb49 0906 	adc.w	r9, r9, r6
 8001742:	f04f 0100 	mov.w	r1, #0
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800174e:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001752:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001756:	4688      	mov	r8, r1
 8001758:	4691      	mov	r9, r2
 800175a:	eb18 0005 	adds.w	r0, r8, r5
 800175e:	eb49 0106 	adc.w	r1, r9, r6
 8001762:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001766:	f7ff fa9f 	bl	8000ca8 <__aeabi_ldivmod>
 800176a:	4603      	mov	r3, r0
 800176c:	460c      	mov	r4, r1
 800176e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) inst->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001778:	b219      	sxth	r1, r3
 800177a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800177e:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	f04f 0400 	mov.w	r4, #0
 800178a:	0b6b      	lsrs	r3, r5, #13
 800178c:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001790:	1374      	asrs	r4, r6, #13
 8001792:	fb03 f502 	mul.w	r5, r3, r2
 8001796:	fb01 f004 	mul.w	r0, r1, r4
 800179a:	4428      	add	r0, r5
 800179c:	fba1 1203 	umull	r1, r2, r1, r3
 80017a0:	1883      	adds	r3, r0, r2
 80017a2:	461a      	mov	r2, r3
 80017a4:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	f04f 0400 	mov.w	r4, #0
 80017b0:	0b6b      	lsrs	r3, r5, #13
 80017b2:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80017b6:	1374      	asrs	r4, r6, #13
 80017b8:	fb03 f502 	mul.w	r5, r3, r2
 80017bc:	fb01 f004 	mul.w	r0, r1, r4
 80017c0:	4428      	add	r0, r5
 80017c2:	fba1 1203 	umull	r1, r2, r1, r3
 80017c6:	1883      	adds	r3, r0, r2
 80017c8:	461a      	mov	r2, r3
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	f04f 0400 	mov.w	r4, #0
 80017d2:	0e4b      	lsrs	r3, r1, #25
 80017d4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80017d8:	1654      	asrs	r4, r2, #25
 80017da:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) inst->dig_P8 * p) >> 19;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	fb04 f102 	mul.w	r1, r4, r2
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	fb03 f202 	mul.w	r2, r3, r2
 80017f6:	1888      	adds	r0, r1, r2
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	fba2 1203 	umull	r1, r2, r2, r3
 80017fe:	1883      	adds	r3, r0, r2
 8001800:	461a      	mov	r2, r3
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	f04f 0400 	mov.w	r4, #0
 800180a:	0ccb      	lsrs	r3, r1, #19
 800180c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001810:	14d4      	asrs	r4, r2, #19
 8001812:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) inst->dig_P7 << 4);
 8001816:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800181a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800181e:	eb11 0803 	adds.w	r8, r1, r3
 8001822:	eb42 0904 	adc.w	r9, r2, r4
 8001826:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800182a:	eb13 0508 	adds.w	r5, r3, r8
 800182e:	eb44 0609 	adc.w	r6, r4, r9
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	0a29      	lsrs	r1, r5, #8
 800183c:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001840:	1232      	asrs	r2, r6, #8
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001848:	b21d      	sxth	r5, r3
 800184a:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800184e:	f04f 0800 	mov.w	r8, #0
 8001852:	f04f 0900 	mov.w	r9, #0
 8001856:	ea4f 1906 	mov.w	r9, r6, lsl #4
 800185a:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 800185e:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001862:	eb18 0301 	adds.w	r3, r8, r1
 8001866:	eb49 0402 	adc.w	r4, r9, r2
 800186a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 800186e:	693b      	ldr	r3, [r7, #16]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3728      	adds	r7, #40	; 0x28
 8001874:	46bd      	mov	sp, r7
 8001876:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0800187a <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280 *inst, int32_t *temperature, uint32_t *pressure) {
 800187a:	b580      	push	{r7, lr}
 800187c:	b08a      	sub	sp, #40	; 0x28
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[6];

	// Need to read in one sequence to ensure they match.
	size_t size = 6;
 8001886:	2306      	movs	r3, #6
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
	if (read_data(inst, 0xf7, data, size)) return false;
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	b2db      	uxtb	r3, r3
 800188e:	f107 0214 	add.w	r2, r7, #20
 8001892:	21f7      	movs	r1, #247	; 0xf7
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f7ff fc7f 	bl	8001198 <read_data>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <bmp280_read_fixed+0x2a>
 80018a0:	2300      	movs	r3, #0
 80018a2:	e027      	b.n	80018f4 <bmp280_read_fixed+0x7a>

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80018a4:	7d3b      	ldrb	r3, [r7, #20]
 80018a6:	031a      	lsls	r2, r3, #12
 80018a8:	7d7b      	ldrb	r3, [r7, #21]
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	4313      	orrs	r3, r2
 80018ae:	7dba      	ldrb	r2, [r7, #22]
 80018b0:	0912      	lsrs	r2, r2, #4
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	4313      	orrs	r3, r2
 80018b6:	623b      	str	r3, [r7, #32]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	031a      	lsls	r2, r3, #12
 80018bc:	7e3b      	ldrb	r3, [r7, #24]
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	4313      	orrs	r3, r2
 80018c2:	7e7a      	ldrb	r2, [r7, #25]
 80018c4:	0912      	lsrs	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61fb      	str	r3, [r7, #28]

	int32_t fine_temp;
	*temperature = compensate_temperature(inst, adc_temp, &fine_temp);
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	461a      	mov	r2, r3
 80018d2:	69f9      	ldr	r1, [r7, #28]
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7ff fded 	bl	80014b4 <compensate_temperature>
 80018da:	4602      	mov	r2, r0
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(inst, adc_pressure, fine_temp);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	461a      	mov	r2, r3
 80018e4:	6a39      	ldr	r1, [r7, #32]
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f7ff fe1d 	bl	8001526 <compensate_pressure>
 80018ec:	4602      	mov	r2, r0
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	601a      	str	r2, [r3, #0]

	return true;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3728      	adds	r7, #40	; 0x28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <bmp280_read_float>:

bool bmp280_read_float(BMP280 *inst, float *temperature, float *pressure)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	if (bmp280_read_fixed(inst, &fixed_temperature, &fixed_pressure))
 8001908:	f107 0210 	add.w	r2, r7, #16
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f7ff ffb1 	bl	800187a <bmp280_read_fixed>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d021      	beq.n	8001962 <bmp280_read_float+0x66>
	{
		*temperature = (float) fixed_temperature / 100;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	ee07 3a90 	vmov	s15, r3
 8001924:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001928:	eddf 6a10 	vldr	s13, [pc, #64]	; 800196c <bmp280_read_float+0x70>
 800192c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	ee07 3a90 	vmov	s15, r3
 800193c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001940:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001970 <bmp280_read_float+0x74>
 8001944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	edc3 7a00 	vstr	s15, [r3]

		inst->temperature = *temperature;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	62da      	str	r2, [r3, #44]	; 0x2c
		inst->pressure = *pressure;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	629a      	str	r2, [r3, #40]	; 0x28
		return true;
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <bmp280_read_float+0x68>
	}

	return false;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	42c80000 	.word	0x42c80000
 8001970:	43800000 	.word	0x43800000

08001974 <bmp280_update>:

bool bmp280_update(BMP280 *inst)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	// uneccessary, to change
	float te;
	float pre;
	return bmp280_read_float(inst, &te, &pre);
 800197c:	f107 0208 	add.w	r2, r7, #8
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4619      	mov	r1, r3
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffb8 	bl	80018fc <bmp280_read_float>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <millis>:
#include "main.h"
#include "run.h"

// TIM5 has 32-bit counter -> takes longer to overflow
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
 800199c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <millis+0x1c>)
 80019a4:	fba2 2303 	umull	r2, r3, r2, r3
 80019a8:	099b      	lsrs	r3, r3, #6
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	10624dd3 	.word	0x10624dd3

080019b8 <GPS_read>:
		@brief Read one character from the GPS device
		@return The character that we received, or 0 if nothing was available
*/
/**************************************************************************/
char GPS_read(GPS* inst)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	////println("[GPS] read()");
	static uint32_t firstChar = 0; // first character received in current sentence
	uint32_t tStart = millis();		// as close as we can get to time char was sent
 80019c0:	f7ff ffea 	bl	8001998 <millis>
 80019c4:	60f8      	str	r0, [r7, #12]
	char c = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	72fb      	strb	r3, [r7, #11]
	uint8_t ca[1] = {0};
 80019ca:	2300      	movs	r3, #0
 80019cc:	723b      	strb	r3, [r7, #8]

	if (inst->paused) return c;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <GPS_read+0x24>
 80019d8:	7afb      	ldrb	r3, [r7, #11]
 80019da:	e07e      	b.n	8001ada <GPS_read+0x122>

	HAL_StatusTypeDef status = HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	72bb      	strb	r3, [r7, #10]
	status = HAL_UART_Receive(inst->uart, ca, 1, 50);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 80019e6:	f107 0108 	add.w	r1, r7, #8
 80019ea:	2332      	movs	r3, #50	; 0x32
 80019ec:	2201      	movs	r2, #1
 80019ee:	f009 fdbc 	bl	800b56a <HAL_UART_Receive>
 80019f2:	4603      	mov	r3, r0
 80019f4:	72bb      	strb	r3, [r7, #10]
	//print("Status: ");
	//print_int(status);
	//println("");
	c = (char)ca[0];
 80019f6:	7a3b      	ldrb	r3, [r7, #8]
 80019f8:	72fb      	strb	r3, [r7, #11]

	inst->currentline[inst->lineidx++] = c;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	1c59      	adds	r1, r3, #1
 8001a0a:	b2c8      	uxtb	r0, r1
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	f881 01c8 	strb.w	r0, [r1, #456]	; 0x1c8
 8001a12:	4413      	add	r3, r2
 8001a14:	7afa      	ldrb	r2, [r7, #11]
 8001a16:	701a      	strb	r2, [r3, #0]
	if (inst->lineidx >= MAXLINELENGTH) inst->lineidx = MAXLINELENGTH - 1; // ensure there is someplace to put the next received character
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b77      	cmp	r3, #119	; 0x77
 8001a22:	d903      	bls.n	8001a2c <GPS_read+0x74>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2277      	movs	r2, #119	; 0x77
 8001a28:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	if (c == '\n')
 8001a2c:	7afb      	ldrb	r3, [r7, #11]
 8001a2e:	2b0a      	cmp	r3, #10
 8001a30:	d141      	bne.n	8001ab6 <GPS_read+0xfe>
	{
		inst->currentline[inst->lineidx] = 0;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	4413      	add	r3, r2
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]

		if (inst->currentline == inst->line1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	33d8      	adds	r3, #216	; 0xd8
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d10c      	bne.n	8001a6e <GPS_read+0xb6>
		{
			inst->currentline = inst->line2;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			inst->lastline = inst->line1;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 8001a6c:	e00b      	b.n	8001a86 <GPS_read+0xce>
		}
		else
		{
			inst->currentline = inst->line1;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
			inst->lastline = inst->line2;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		}

		// Serial.//println("----");
		// Serial.//println((char* )lastline);
		// Serial.//println("----");
		inst->lineidx = 0;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
		inst->recvdflag = true;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		inst->recvdTime = millis(); // time we got the end of the string
 8001a96:	f7ff ff7f 	bl	8001998 <millis>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		inst->sentTime = firstChar;
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <GPS_read+0x12c>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		firstChar = 0; // there are no characters yet
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <GPS_read+0x12c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
		return c;			// wait until next character to set time
 8001ab2:	7afb      	ldrb	r3, [r7, #11]
 8001ab4:	e011      	b.n	8001ada <GPS_read+0x122>
	}

	if (firstChar == 0) firstChar = tStart;
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <GPS_read+0x12c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <GPS_read+0x10c>
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <GPS_read+0x12c>)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6013      	str	r3, [r2, #0]

	//wait for finished transmission
	////println("[GPS] read() ... waiting");
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);
 8001ac4:	bf00      	nop
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001acc:	4618      	mov	r0, r3
 8001ace:	f009 fdf2 	bl	800b6b6 <HAL_UART_GetState>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b20      	cmp	r3, #32
 8001ad6:	d1f6      	bne.n	8001ac6 <GPS_read+0x10e>
	////println("[GPS] finished");
	return c;
 8001ad8:	7afb      	ldrb	r3, [r7, #11]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000374 	.word	0x20000374

08001ae8 <GPS_init>:
/*!
		@brief Initialization code used by all constructor types
*/
/**************************************************************************/
bool GPS_init(GPS* inst)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	// UART instance, code ##########################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@@@@@@@@@@@@@@
	//println("[GPS] init()");
	inst->active = false;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	inst->recvdflag = false;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	inst->inStandbyMode = false;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	inst->paused = false;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	inst->lineidx = 0;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	inst->currentline = inst->line1;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	inst->lastline = inst->line2;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

	// uint8_t
	inst->gpsTime.hour = 0;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = 0;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = 0;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->gpsTime.year = 0;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	inst->gpsTime.month = 0;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->gpsTime.dayM = 0;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->fixquality = 0;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	inst->fixquality_3d = 0;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	inst->satellites = 0;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	// bool
	inst->fix = false;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	// char
	inst->lat = 0;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 0;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 0;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	// uint16_t
	inst->gpsTime.msecond = 0;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	875a      	strh	r2, [r3, #58]	; 0x3a
	// float
	inst->latitude = 0.0;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	63da      	str	r2, [r3, #60]	; 0x3c
	inst->longitude = 0.0;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
	inst->geoidheight = 0.0;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54
	inst->altitude = 0.0;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	659a      	str	r2, [r3, #88]	; 0x58
	inst->speed = 0.0;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	65da      	str	r2, [r3, #92]	; 0x5c
	inst->angle = 0.0;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	661a      	str	r2, [r3, #96]	; 0x60
	inst->magvariation = 0.0;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	665a      	str	r2, [r3, #100]	; 0x64
	inst->HDOP = 0.0;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	669a      	str	r2, [r3, #104]	; 0x68
	inst->VDOP = 0.0;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	66da      	str	r2, [r3, #108]	; 0x6c
	inst->PDOP = 0.0;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	671a      	str	r2, [r3, #112]	; 0x70

	inst->lastUpdate = 0; // millis() when last full sentence successfully parsed
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	inst->lastFix = 0;  // millis() when last fix received
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	inst->lastTime = 0; // millis() when last time received
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	inst->lastDate = 0; // millis() when last date received
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	inst->recvdTime = 0; // millis() when last full sentence received
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	inst->sentTime = 0; // millis() when first character of last full sentence received
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	inst->lat = 'X';
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2258      	movs	r2, #88	; 0x58
 8001c22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 'X';
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2258      	movs	r2, #88	; 0x58
 8001c2a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 'X';
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2258      	movs	r2, #88	; 0x58
 8001c32:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

	inst->thisCheck = 0;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
	memset(inst->thisSource, 0x00, NMEA_MAX_SOURCE_ID);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	2203      	movs	r2, #3
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f012 ffd0 	bl	8014bea <memset>
	memset(inst->thisSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3307      	adds	r3, #7
 8001c4e:	2214      	movs	r2, #20
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f012 ffc9 	bl	8014bea <memset>
	memset(inst->lastSource, 0x00, NMEA_MAX_SOURCE_ID);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	331b      	adds	r3, #27
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f012 ffc2 	bl	8014bea <memset>
	memset(inst->lastSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	331e      	adds	r3, #30
 8001c6a:	2214      	movs	r2, #20
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f012 ffbb 	bl	8014bea <memset>

	memset(inst->txtTXT, 0x00, 63);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3388      	adds	r3, #136	; 0x88
 8001c78:	223f      	movs	r2, #63	; 0x3f
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f012 ffb4 	bl	8014bea <memset>
	inst->txtTot = 0;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	inst->txtID = 0;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	inst->txtN = 0;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	inst->sources[0] = "II";
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a3a      	ldr	r2, [pc, #232]	; (8001d88 <GPS_init+0x2a0>)
 8001c9e:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	inst->sources[1] = "WI";
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a39      	ldr	r2, [pc, #228]	; (8001d8c <GPS_init+0x2a4>)
 8001ca6:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	inst->sources[2] = "GP";
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a38      	ldr	r2, [pc, #224]	; (8001d90 <GPS_init+0x2a8>)
 8001cae:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	inst->sources[3] = "GN";
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a37      	ldr	r2, [pc, #220]	; (8001d94 <GPS_init+0x2ac>)
 8001cb6:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	inst->sources[4] = "ZZZ";
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a36      	ldr	r2, [pc, #216]	; (8001d98 <GPS_init+0x2b0>)
 8001cbe:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	inst->sentences_parsed[0] = "GGA";
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a35      	ldr	r2, [pc, #212]	; (8001d9c <GPS_init+0x2b4>)
 8001cc6:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	inst->sentences_parsed[1] = "GLL";
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a34      	ldr	r2, [pc, #208]	; (8001da0 <GPS_init+0x2b8>)
 8001cce:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	inst->sentences_parsed[2] = "GSA";
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a33      	ldr	r2, [pc, #204]	; (8001da4 <GPS_init+0x2bc>)
 8001cd6:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	inst->sentences_parsed[3] = "RMC";
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a32      	ldr	r2, [pc, #200]	; (8001da8 <GPS_init+0x2c0>)
 8001cde:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	inst->sentences_parsed[4] = "ZZZ";
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a2c      	ldr	r2, [pc, #176]	; (8001d98 <GPS_init+0x2b0>)
 8001ce6:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	inst->sentences_known[0] = "ZZZ";
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a2a      	ldr	r2, [pc, #168]	; (8001d98 <GPS_init+0x2b0>)
 8001cee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	//GPS_standby(inst);
	//GPS_wakeup(inst);

	GPS_sendCommand(inst, PMTK_SET_NMEA_OUTPUT_ALLDATA);
 8001cf2:	492e      	ldr	r1, [pc, #184]	; (8001dac <GPS_init+0x2c4>)
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f85f 	bl	8001db8 <GPS_sendCommand>
	GPS_sendCommand(inst, PMTK_SET_NMEA_UPDATE_5HZ);
 8001cfa:	492d      	ldr	r1, [pc, #180]	; (8001db0 <GPS_init+0x2c8>)
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f85b 	bl	8001db8 <GPS_sendCommand>

	HAL_Delay(1000);
 8001d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d06:	f003 fc97 	bl	8005638 <HAL_Delay>

	GPS_sendCommand(inst, PMTK_Q_RELEASE);
 8001d0a:	492a      	ldr	r1, [pc, #168]	; (8001db4 <GPS_init+0x2cc>)
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f853 	bl	8001db8 <GPS_sendCommand>
	HAL_Delay(10);
 8001d12:	200a      	movs	r0, #10
 8001d14:	f003 fc90 	bl	8005638 <HAL_Delay>

	uint32_t timeout = millis();
 8001d18:	f7ff fe3e 	bl	8001998 <millis>
 8001d1c:	60f8      	str	r0, [r7, #12]

	while (millis() - timeout <= 1000)
 8001d1e:	e025      	b.n	8001d6c <GPS_init+0x284>
	{
		GPS_read(inst);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff fe49 	bl	80019b8 <GPS_read>
		if (GPS_newNMEAreceived(inst))
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 ffb3 	bl	8002c92 <GPS_newNMEAreceived>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01c      	beq.n	8001d6c <GPS_init+0x284>
		{
			// not exact, but works now
			if (GPS_lastNMEA(inst)[0] == '$' && GPS_lastNMEA(inst)[1] == 'G')
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 ffbb 	bl	8002cae <GPS_lastNMEA>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b24      	cmp	r3, #36	; 0x24
 8001d3e:	d115      	bne.n	8001d6c <GPS_init+0x284>
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 ffb4 	bl	8002cae <GPS_lastNMEA>
 8001d46:	4603      	mov	r3, r0
 8001d48:	3301      	adds	r3, #1
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b47      	cmp	r3, #71	; 0x47
 8001d4e:	d10d      	bne.n	8001d6c <GPS_init+0x284>
			{
				inst->active = true;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

				GPS_sendCommand(inst, PMTK_SET_NMEA_OUTPUT_ALLDATA);
 8001d58:	4914      	ldr	r1, [pc, #80]	; (8001dac <GPS_init+0x2c4>)
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f82c 	bl	8001db8 <GPS_sendCommand>
				GPS_sendCommand(inst, PMTK_SET_NMEA_UPDATE_5HZ);
 8001d60:	4913      	ldr	r1, [pc, #76]	; (8001db0 <GPS_init+0x2c8>)
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f828 	bl	8001db8 <GPS_sendCommand>
				return true;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e008      	b.n	8001d7e <GPS_init+0x296>
	while (millis() - timeout <= 1000)
 8001d6c:	f7ff fe14 	bl	8001998 <millis>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d7a:	d9d1      	bls.n	8001d20 <GPS_init+0x238>
			}
		}
	}
	return false;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	0801a250 	.word	0x0801a250
 8001d8c:	0801a254 	.word	0x0801a254
 8001d90:	0801a258 	.word	0x0801a258
 8001d94:	0801a25c 	.word	0x0801a25c
 8001d98:	0801a260 	.word	0x0801a260
 8001d9c:	0801a264 	.word	0x0801a264
 8001da0:	0801a268 	.word	0x0801a268
 8001da4:	0801a26c 	.word	0x0801a26c
 8001da8:	0801a270 	.word	0x0801a270
 8001dac:	0801a274 	.word	0x0801a274
 8001db0:	0801a2a8 	.word	0x0801a2a8
 8001db4:	0801a2b8 	.word	0x0801a2b8

08001db8 <GPS_sendCommand>:
		@brief Send a command to the GPS device
		@param str Pointer to a string holding the command to send
*/
/**************************************************************************/
void GPS_sendCommand(GPS* inst, char* str)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
	//println("[GPS] sendCommand()");
	// NOT THIS //printLN, code !!!!!!!!!!!!!!@@@@@@@@@@@@@@@@@@@#################$$$$$$$$$$$$$$$$$$$$$$$$$$
	HAL_UART_Transmit(inst->uart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 8001dc8:	6838      	ldr	r0, [r7, #0]
 8001dca:	f7fe fa0b 	bl	80001e4 <strlen>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f009 fb2d 	bl	800b438 <HAL_UART_Transmit>
	//println("[GPS] sendCommand()... waiting");
	// wait for finished transmission
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);
 8001dde:	bf00      	nop
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001de6:	4618      	mov	r0, r3
 8001de8:	f009 fc65 	bl	800b6b6 <HAL_UART_GetState>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	d1f6      	bne.n	8001de0 <GPS_sendCommand+0x28>
	//println("[GPS] finished");
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd90      	pop	{r4, r7, pc}
	...

08001dfc <GPS_parse>:
		@return True if we parsed it, false if it has an invalid checksum or invalid
	 data
*/
/**************************************************************************/
bool GPS_parse(GPS* inst, char* nmea)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
	// do checksum check
	if (!GPS_check(inst, nmea)) return false;
 8001e06:	6839      	ldr	r1, [r7, #0]
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 fb65 	bl	80024d8 <GPS_check>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f083 0301 	eor.w	r3, r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <GPS_parse+0x22>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e355      	b.n	80024ca <GPS_parse+0x6ce>
	// passed the check, so there's a valid source in thisSource and a valid
	// sentence in thisSentence

	// look for a few common sentences
	char* p = nmea; // Pointer to move through the sentence -- good parsers are
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	617b      	str	r3, [r7, #20]
									// non-destructive
	p = strchr(p, ',') + 1; // Skip to the character after the next comma, then check sentence.
 8001e22:	212c      	movs	r1, #44	; 0x2c
 8001e24:	6978      	ldr	r0, [r7, #20]
 8001e26:	f013 fe14 	bl	8015a52 <strchr>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]

	if (!strcmp(inst->thisSentence, "GGA"))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3307      	adds	r3, #7
 8001e34:	49a5      	ldr	r1, [pc, #660]	; (80020cc <GPS_parse+0x2d0>)
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe f9ca 	bl	80001d0 <strcmp>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f040 80e6 	bne.w	8002010 <GPS_parse+0x214>
	{
		// found GGA
		// get time
		GPS_parseTime(inst, p);
 8001e44:	6979      	ldr	r1, [r7, #20]
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 fcc6 	bl	80027d8 <GPS_parseTime>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8001e4c:	212c      	movs	r1, #44	; 0x2c
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f013 fdff 	bl	8015a52 <strchr>
 8001e54:	4603      	mov	r3, r0
 8001e56:	3301      	adds	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8001e5a:	6979      	ldr	r1, [r7, #20]
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 fd0b 	bl	8002878 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8001e62:	212c      	movs	r1, #44	; 0x2c
 8001e64:	6978      	ldr	r0, [r7, #20]
 8001e66:	f013 fdf4 	bl	8015a52 <strchr>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8001e70:	6979      	ldr	r1, [r7, #20]
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fdb6 	bl	80029e4 <GPS_parseLatDir>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f083 0301 	eor.w	r3, r3, #1
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <GPS_parse+0x8c>
 8001e84:	2300      	movs	r3, #0
 8001e86:	e320      	b.n	80024ca <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8001e88:	212c      	movs	r1, #44	; 0x2c
 8001e8a:	6978      	ldr	r0, [r7, #20]
 8001e8c:	f013 fde1 	bl	8015a52 <strchr>
 8001e90:	4603      	mov	r3, r0
 8001e92:	3301      	adds	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8001e96:	6979      	ldr	r1, [r7, #20]
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fde3 	bl	8002a64 <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8001e9e:	212c      	movs	r1, #44	; 0x2c
 8001ea0:	6978      	ldr	r0, [r7, #20]
 8001ea2:	f013 fdd6 	bl	8015a52 <strchr>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8001eac:	6979      	ldr	r1, [r7, #20]
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fe80 	bl	8002bb4 <GPS_parseLonDir>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f083 0301 	eor.w	r3, r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <GPS_parse+0xc8>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e302      	b.n	80024ca <GPS_parse+0x6ce>

		p = strchr(p, ',') + 1;
 8001ec4:	212c      	movs	r1, #44	; 0x2c
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f013 fdc3 	bl	8015a52 <strchr>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	3301      	adds	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8001ed2:	6979      	ldr	r1, [r7, #20]
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 fc66 	bl	80027a6 <GPS_isEmpty>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f083 0301 	eor.w	r3, r3, #1
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d01b      	beq.n	8001f1e <GPS_parse+0x122>
		{
			inst->fixquality = atoi(p);
 8001ee6:	6978      	ldr	r0, [r7, #20]
 8001ee8:	f012 fe32 	bl	8014b50 <atoi>
 8001eec:	4603      	mov	r3, r0
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			if (inst->fixquality > 0)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00a      	beq.n	8001f16 <GPS_parse+0x11a>
			{
				inst->fix = true;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
				inst->lastFix = inst->sentTime;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8001f14:	e003      	b.n	8001f1e <GPS_parse+0x122>
			}
			else inst->fix = false;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		}

		p = strchr(p, ',') + 1;
 8001f1e:	212c      	movs	r1, #44	; 0x2c
 8001f20:	6978      	ldr	r0, [r7, #20]
 8001f22:	f013 fd96 	bl	8015a52 <strchr>
 8001f26:	4603      	mov	r3, r0
 8001f28:	3301      	adds	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->satellites = atoi(p);
 8001f2c:	6979      	ldr	r1, [r7, #20]
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 fc39 	bl	80027a6 <GPS_isEmpty>
 8001f34:	4603      	mov	r3, r0
 8001f36:	f083 0301 	eor.w	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d007      	beq.n	8001f50 <GPS_parse+0x154>
 8001f40:	6978      	ldr	r0, [r7, #20]
 8001f42:	f012 fe05 	bl	8014b50 <atoi>
 8001f46:	4603      	mov	r3, r0
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

		p = strchr(p, ',') + 1;
 8001f50:	212c      	movs	r1, #44	; 0x2c
 8001f52:	6978      	ldr	r0, [r7, #20]
 8001f54:	f013 fd7d 	bl	8015a52 <strchr>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 8001f5e:	6979      	ldr	r1, [r7, #20]
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fc20 	bl	80027a6 <GPS_isEmpty>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f083 0301 	eor.w	r3, r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <GPS_parse+0x18e>
 8001f72:	6978      	ldr	r0, [r7, #20]
 8001f74:	f012 fde9 	bl	8014b4a <atof>
 8001f78:	ec54 3b10 	vmov	r3, r4, d0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	4621      	mov	r1, r4
 8001f80:	f7fe fe42 	bl	8000c08 <__aeabi_d2f>
 8001f84:	4602      	mov	r2, r0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	669a      	str	r2, [r3, #104]	; 0x68

		p = strchr(p, ',') + 1;
 8001f8a:	212c      	movs	r1, #44	; 0x2c
 8001f8c:	6978      	ldr	r0, [r7, #20]
 8001f8e:	f013 fd60 	bl	8015a52 <strchr>
 8001f92:	4603      	mov	r3, r0
 8001f94:	3301      	adds	r3, #1
 8001f96:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->altitude = (float)atof(p);
 8001f98:	6979      	ldr	r1, [r7, #20]
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fc03 	bl	80027a6 <GPS_isEmpty>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f083 0301 	eor.w	r3, r3, #1
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00b      	beq.n	8001fc4 <GPS_parse+0x1c8>
 8001fac:	6978      	ldr	r0, [r7, #20]
 8001fae:	f012 fdcc 	bl	8014b4a <atof>
 8001fb2:	ec54 3b10 	vmov	r3, r4, d0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	4621      	mov	r1, r4
 8001fba:	f7fe fe25 	bl	8000c08 <__aeabi_d2f>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	659a      	str	r2, [r3, #88]	; 0x58

		p = strchr(p, ',') + 1;
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	6978      	ldr	r0, [r7, #20]
 8001fc8:	f013 fd43 	bl	8015a52 <strchr>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	3301      	adds	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
		p = strchr(p, ',') + 1;
 8001fd2:	212c      	movs	r1, #44	; 0x2c
 8001fd4:	6978      	ldr	r0, [r7, #20]
 8001fd6:	f013 fd3c 	bl	8015a52 <strchr>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	3301      	adds	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->geoidheight = (float)atof(p);
 8001fe0:	6979      	ldr	r1, [r7, #20]
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fbdf 	bl	80027a6 <GPS_isEmpty>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f083 0301 	eor.w	r3, r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8251 	beq.w	8002498 <GPS_parse+0x69c>
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	f012 fda7 	bl	8014b4a <atof>
 8001ffc:	ec54 3b10 	vmov	r3, r4, d0
 8002000:	4618      	mov	r0, r3
 8002002:	4621      	mov	r1, r4
 8002004:	f7fe fe00 	bl	8000c08 <__aeabi_d2f>
 8002008:	4602      	mov	r2, r0
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
 800200e:	e243      	b.n	8002498 <GPS_parse+0x69c>
	}

	else if (!strcmp(inst->thisSentence, "RMC"))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3307      	adds	r3, #7
 8002014:	492e      	ldr	r1, [pc, #184]	; (80020d0 <GPS_parse+0x2d4>)
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe f8da 	bl	80001d0 <strcmp>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 80e3 	bne.w	80021ea <GPS_parse+0x3ee>
	{
		// found RMC
		// get time
		GPS_parseTime(inst, p);
 8002024:	6979      	ldr	r1, [r7, #20]
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fbd6 	bl	80027d8 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 800202c:	212c      	movs	r1, #44	; 0x2c
 800202e:	6978      	ldr	r0, [r7, #20]
 8002030:	f013 fd0f 	bl	8015a52 <strchr>
 8002034:	4603      	mov	r3, r0
 8002036:	3301      	adds	r3, #1
 8002038:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 800203a:	6979      	ldr	r1, [r7, #20]
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fe02 	bl	8002c46 <GPS_parseFix>
 8002042:	4603      	mov	r3, r0
 8002044:	f083 0301 	eor.w	r3, r3, #1
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <GPS_parse+0x256>
 800204e:	2300      	movs	r3, #0
 8002050:	e23b      	b.n	80024ca <GPS_parse+0x6ce>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	6978      	ldr	r0, [r7, #20]
 8002056:	f013 fcfc 	bl	8015a52 <strchr>
 800205a:	4603      	mov	r3, r0
 800205c:	3301      	adds	r3, #1
 800205e:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8002060:	6979      	ldr	r1, [r7, #20]
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fc08 	bl	8002878 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	6978      	ldr	r0, [r7, #20]
 800206c:	f013 fcf1 	bl	8015a52 <strchr>
 8002070:	4603      	mov	r3, r0
 8002072:	3301      	adds	r3, #1
 8002074:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002076:	6979      	ldr	r1, [r7, #20]
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fcb3 	bl	80029e4 <GPS_parseLatDir>
 800207e:	4603      	mov	r3, r0
 8002080:	f083 0301 	eor.w	r3, r3, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <GPS_parse+0x292>
 800208a:	2300      	movs	r3, #0
 800208c:	e21d      	b.n	80024ca <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	6978      	ldr	r0, [r7, #20]
 8002092:	f013 fcde 	bl	8015a52 <strchr>
 8002096:	4603      	mov	r3, r0
 8002098:	3301      	adds	r3, #1
 800209a:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 800209c:	6979      	ldr	r1, [r7, #20]
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fce0 	bl	8002a64 <GPS_parseLon>
		p = strchr(p, ',') + 1;
 80020a4:	212c      	movs	r1, #44	; 0x2c
 80020a6:	6978      	ldr	r0, [r7, #20]
 80020a8:	f013 fcd3 	bl	8015a52 <strchr>
 80020ac:	4603      	mov	r3, r0
 80020ae:	3301      	adds	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 80020b2:	6979      	ldr	r1, [r7, #20]
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fd7d 	bl	8002bb4 <GPS_parseLonDir>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f083 0301 	eor.w	r3, r3, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d006      	beq.n	80020d4 <GPS_parse+0x2d8>
 80020c6:	2300      	movs	r3, #0
 80020c8:	e1ff      	b.n	80024ca <GPS_parse+0x6ce>
 80020ca:	bf00      	nop
 80020cc:	0801a264 	.word	0x0801a264
 80020d0:	0801a270 	.word	0x0801a270

		// speed
		p = strchr(p, ',') + 1;
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	6978      	ldr	r0, [r7, #20]
 80020d8:	f013 fcbb 	bl	8015a52 <strchr>
 80020dc:	4603      	mov	r3, r0
 80020de:	3301      	adds	r3, #1
 80020e0:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->speed = (float)atof(p);
 80020e2:	6979      	ldr	r1, [r7, #20]
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 fb5e 	bl	80027a6 <GPS_isEmpty>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f083 0301 	eor.w	r3, r3, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00b      	beq.n	800210e <GPS_parse+0x312>
 80020f6:	6978      	ldr	r0, [r7, #20]
 80020f8:	f012 fd27 	bl	8014b4a <atof>
 80020fc:	ec54 3b10 	vmov	r3, r4, d0
 8002100:	4618      	mov	r0, r3
 8002102:	4621      	mov	r1, r4
 8002104:	f7fe fd80 	bl	8000c08 <__aeabi_d2f>
 8002108:	4602      	mov	r2, r0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	65da      	str	r2, [r3, #92]	; 0x5c

		// angle
		p = strchr(p, ',') + 1;
 800210e:	212c      	movs	r1, #44	; 0x2c
 8002110:	6978      	ldr	r0, [r7, #20]
 8002112:	f013 fc9e 	bl	8015a52 <strchr>
 8002116:	4603      	mov	r3, r0
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->angle = (float)atof(p);
 800211c:	6979      	ldr	r1, [r7, #20]
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fb41 	bl	80027a6 <GPS_isEmpty>
 8002124:	4603      	mov	r3, r0
 8002126:	f083 0301 	eor.w	r3, r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <GPS_parse+0x34c>
 8002130:	6978      	ldr	r0, [r7, #20]
 8002132:	f012 fd0a 	bl	8014b4a <atof>
 8002136:	ec54 3b10 	vmov	r3, r4, d0
 800213a:	4618      	mov	r0, r3
 800213c:	4621      	mov	r1, r4
 800213e:	f7fe fd63 	bl	8000c08 <__aeabi_d2f>
 8002142:	4602      	mov	r2, r0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	661a      	str	r2, [r3, #96]	; 0x60

		p = strchr(p, ',') + 1;
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f013 fc81 	bl	8015a52 <strchr>
 8002150:	4603      	mov	r3, r0
 8002152:	3301      	adds	r3, #1
 8002154:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8002156:	6979      	ldr	r1, [r7, #20]
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 fb24 	bl	80027a6 <GPS_isEmpty>
 800215e:	4603      	mov	r3, r0
 8002160:	f083 0301 	eor.w	r3, r3, #1
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 8196 	beq.w	8002498 <GPS_parse+0x69c>
		{
			uint32_t fulldate = (float)atof(p);
 800216c:	6978      	ldr	r0, [r7, #20]
 800216e:	f012 fcec 	bl	8014b4a <atof>
 8002172:	ec54 3b10 	vmov	r3, r4, d0
 8002176:	4618      	mov	r0, r3
 8002178:	4621      	mov	r1, r4
 800217a:	f7fe fd45 	bl	8000c08 <__aeabi_d2f>
 800217e:	ee07 0a90 	vmov	s15, r0
 8002182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002186:	ee17 3a90 	vmov	r3, s15
 800218a:	60fb      	str	r3, [r7, #12]
			inst->gpsTime.dayM = fulldate / 10000;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4a8b      	ldr	r2, [pc, #556]	; (80023bc <GPS_parse+0x5c0>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	0b5b      	lsrs	r3, r3, #13
 8002196:	b2da      	uxtb	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			inst->gpsTime.month = (fulldate % 10000) / 100;
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4b86      	ldr	r3, [pc, #536]	; (80023bc <GPS_parse+0x5c0>)
 80021a2:	fba3 1302 	umull	r1, r3, r3, r2
 80021a6:	0b5b      	lsrs	r3, r3, #13
 80021a8:	f242 7110 	movw	r1, #10000	; 0x2710
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	4a83      	ldr	r2, [pc, #524]	; (80023c0 <GPS_parse+0x5c4>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			inst->gpsTime.year = (fulldate % 100);
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4b7e      	ldr	r3, [pc, #504]	; (80023c0 <GPS_parse+0x5c4>)
 80021c6:	fba3 1302 	umull	r1, r3, r3, r2
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	2164      	movs	r1, #100	; 0x64
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			inst->lastDate = inst->sentTime;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80021e8:	e156      	b.n	8002498 <GPS_parse+0x69c>
		}
	}

	else if (!strcmp(inst->thisSentence, "GLL"))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3307      	adds	r3, #7
 80021ee:	4975      	ldr	r1, [pc, #468]	; (80023c4 <GPS_parse+0x5c8>)
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fd ffed 	bl	80001d0 <strcmp>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d153      	bne.n	80022a4 <GPS_parse+0x4a8>
	{
		// found GLL
		// parse out latitude
		GPS_parseLat(inst, p);
 80021fc:	6979      	ldr	r1, [r7, #20]
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fb3a 	bl	8002878 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	6978      	ldr	r0, [r7, #20]
 8002208:	f013 fc23 	bl	8015a52 <strchr>
 800220c:	4603      	mov	r3, r0
 800220e:	3301      	adds	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002212:	6979      	ldr	r1, [r7, #20]
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 fbe5 	bl	80029e4 <GPS_parseLatDir>
 800221a:	4603      	mov	r3, r0
 800221c:	f083 0301 	eor.w	r3, r3, #1
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <GPS_parse+0x42e>
 8002226:	2300      	movs	r3, #0
 8002228:	e14f      	b.n	80024ca <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 800222a:	212c      	movs	r1, #44	; 0x2c
 800222c:	6978      	ldr	r0, [r7, #20]
 800222e:	f013 fc10 	bl	8015a52 <strchr>
 8002232:	4603      	mov	r3, r0
 8002234:	3301      	adds	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002238:	6979      	ldr	r1, [r7, #20]
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fc12 	bl	8002a64 <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	6978      	ldr	r0, [r7, #20]
 8002244:	f013 fc05 	bl	8015a52 <strchr>
 8002248:	4603      	mov	r3, r0
 800224a:	3301      	adds	r3, #1
 800224c:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 800224e:	6979      	ldr	r1, [r7, #20]
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fcaf 	bl	8002bb4 <GPS_parseLonDir>
 8002256:	4603      	mov	r3, r0
 8002258:	f083 0301 	eor.w	r3, r3, #1
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <GPS_parse+0x46a>
 8002262:	2300      	movs	r3, #0
 8002264:	e131      	b.n	80024ca <GPS_parse+0x6ce>

		// get time
		p = strchr(p, ',') + 1;
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	6978      	ldr	r0, [r7, #20]
 800226a:	f013 fbf2 	bl	8015a52 <strchr>
 800226e:	4603      	mov	r3, r0
 8002270:	3301      	adds	r3, #1
 8002272:	617b      	str	r3, [r7, #20]
		GPS_parseTime(inst, p);
 8002274:	6979      	ldr	r1, [r7, #20]
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 faae 	bl	80027d8 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 800227c:	212c      	movs	r1, #44	; 0x2c
 800227e:	6978      	ldr	r0, [r7, #20]
 8002280:	f013 fbe7 	bl	8015a52 <strchr>
 8002284:	4603      	mov	r3, r0
 8002286:	3301      	adds	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 800228a:	6979      	ldr	r1, [r7, #20]
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fcda 	bl	8002c46 <GPS_parseFix>
 8002292:	4603      	mov	r3, r0
 8002294:	f083 0301 	eor.w	r3, r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 80fc 	beq.w	8002498 <GPS_parse+0x69c>
 80022a0:	2300      	movs	r3, #0
 80022a2:	e112      	b.n	80024ca <GPS_parse+0x6ce>
	}

	else if (!strcmp(inst->thisSentence, "GSA"))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3307      	adds	r3, #7
 80022a8:	4947      	ldr	r1, [pc, #284]	; (80023c8 <GPS_parse+0x5cc>)
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fd ff90 	bl	80001d0 <strcmp>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 808a 	bne.w	80023cc <GPS_parse+0x5d0>
	{
		// found GSA
		// parse out Auto selection, but ignore them
		// parse out 3d fixquality
		p = strchr(p, ',') + 1;
 80022b8:	212c      	movs	r1, #44	; 0x2c
 80022ba:	6978      	ldr	r0, [r7, #20]
 80022bc:	f013 fbc9 	bl	8015a52 <strchr>
 80022c0:	4603      	mov	r3, r0
 80022c2:	3301      	adds	r3, #1
 80022c4:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->fixquality_3d = atoi(p);
 80022c6:	6979      	ldr	r1, [r7, #20]
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fa6c 	bl	80027a6 <GPS_isEmpty>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f083 0301 	eor.w	r3, r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d007      	beq.n	80022ea <GPS_parse+0x4ee>
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f012 fc38 	bl	8014b50 <atoi>
 80022e0:	4603      	mov	r3, r0
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		// skip 12 Satellite PDNs without interpreting them
		for (int i = 0; i < 12; i++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	e009      	b.n	8002304 <GPS_parse+0x508>
		{
			p = strchr(p, ',') + 1;
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	6978      	ldr	r0, [r7, #20]
 80022f4:	f013 fbad 	bl	8015a52 <strchr>
 80022f8:	4603      	mov	r3, r0
 80022fa:	3301      	adds	r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 12; i++)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	3301      	adds	r3, #1
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b0b      	cmp	r3, #11
 8002308:	ddf2      	ble.n	80022f0 <GPS_parse+0x4f4>
		}
		
		// parse out PDOP
		p = strchr(p, ',') + 1;
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	6978      	ldr	r0, [r7, #20]
 800230e:	f013 fba0 	bl	8015a52 <strchr>
 8002312:	4603      	mov	r3, r0
 8002314:	3301      	adds	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->PDOP = (float)atof(p);
 8002318:	6979      	ldr	r1, [r7, #20]
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fa43 	bl	80027a6 <GPS_isEmpty>
 8002320:	4603      	mov	r3, r0
 8002322:	f083 0301 	eor.w	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00b      	beq.n	8002344 <GPS_parse+0x548>
 800232c:	6978      	ldr	r0, [r7, #20]
 800232e:	f012 fc0c 	bl	8014b4a <atof>
 8002332:	ec54 3b10 	vmov	r3, r4, d0
 8002336:	4618      	mov	r0, r3
 8002338:	4621      	mov	r1, r4
 800233a:	f7fe fc65 	bl	8000c08 <__aeabi_d2f>
 800233e:	4602      	mov	r2, r0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	671a      	str	r2, [r3, #112]	; 0x70
		
		// parse out HDOP, we also parse this from the GGA sentence. Chipset should
		// report the same for both
		p = strchr(p, ',') + 1;
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	6978      	ldr	r0, [r7, #20]
 8002348:	f013 fb83 	bl	8015a52 <strchr>
 800234c:	4603      	mov	r3, r0
 800234e:	3301      	adds	r3, #1
 8002350:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 8002352:	6979      	ldr	r1, [r7, #20]
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 fa26 	bl	80027a6 <GPS_isEmpty>
 800235a:	4603      	mov	r3, r0
 800235c:	f083 0301 	eor.w	r3, r3, #1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <GPS_parse+0x582>
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f012 fbef 	bl	8014b4a <atof>
 800236c:	ec54 3b10 	vmov	r3, r4, d0
 8002370:	4618      	mov	r0, r3
 8002372:	4621      	mov	r1, r4
 8002374:	f7fe fc48 	bl	8000c08 <__aeabi_d2f>
 8002378:	4602      	mov	r2, r0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	669a      	str	r2, [r3, #104]	; 0x68
		
		// parse out VDOP
		p = strchr(p, ',') + 1;
 800237e:	212c      	movs	r1, #44	; 0x2c
 8002380:	6978      	ldr	r0, [r7, #20]
 8002382:	f013 fb66 	bl	8015a52 <strchr>
 8002386:	4603      	mov	r3, r0
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->VDOP = (float)atof(p);
 800238c:	6979      	ldr	r1, [r7, #20]
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fa09 	bl	80027a6 <GPS_isEmpty>
 8002394:	4603      	mov	r3, r0
 8002396:	f083 0301 	eor.w	r3, r3, #1
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d07b      	beq.n	8002498 <GPS_parse+0x69c>
 80023a0:	6978      	ldr	r0, [r7, #20]
 80023a2:	f012 fbd2 	bl	8014b4a <atof>
 80023a6:	ec54 3b10 	vmov	r3, r4, d0
 80023aa:	4618      	mov	r0, r3
 80023ac:	4621      	mov	r1, r4
 80023ae:	f7fe fc2b 	bl	8000c08 <__aeabi_d2f>
 80023b2:	4602      	mov	r2, r0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	66da      	str	r2, [r3, #108]	; 0x6c
 80023b8:	e06e      	b.n	8002498 <GPS_parse+0x69c>
 80023ba:	bf00      	nop
 80023bc:	d1b71759 	.word	0xd1b71759
 80023c0:	51eb851f 	.word	0x51eb851f
 80023c4:	0801a268 	.word	0x0801a268
 80023c8:	0801a26c 	.word	0x0801a26c
	}

#ifdef NMEA_EXTENSIONS // Sentences not required for basic GPS functionality
	else if (!strcmp(inst->thisSentence, "TXT"))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3307      	adds	r3, #7
 80023d0:	4940      	ldr	r1, [pc, #256]	; (80024d4 <GPS_parse+0x6d8>)
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fd fefc 	bl	80001d0 <strcmp>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d15a      	bne.n	8002494 <GPS_parse+0x698>
	{ //*******************************TXT
		if (!GPS_isEmpty(inst, p)) inst->txtTot = atoi(p);
 80023de:	6979      	ldr	r1, [r7, #20]
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f9e0 	bl	80027a6 <GPS_isEmpty>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f083 0301 	eor.w	r3, r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d006      	beq.n	8002400 <GPS_parse+0x604>
 80023f2:	6978      	ldr	r0, [r7, #20]
 80023f4:	f012 fbac 	bl	8014b50 <atoi>
 80023f8:	4602      	mov	r2, r0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		p = strchr(p, ',') + 1;
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	6978      	ldr	r0, [r7, #20]
 8002404:	f013 fb25 	bl	8015a52 <strchr>
 8002408:	4603      	mov	r3, r0
 800240a:	3301      	adds	r3, #1
 800240c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtN = atoi(p);
 800240e:	6979      	ldr	r1, [r7, #20]
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f9c8 	bl	80027a6 <GPS_isEmpty>
 8002416:	4603      	mov	r3, r0
 8002418:	f083 0301 	eor.w	r3, r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <GPS_parse+0x634>
 8002422:	6978      	ldr	r0, [r7, #20]
 8002424:	f012 fb94 	bl	8014b50 <atoi>
 8002428:	4602      	mov	r2, r0
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		p = strchr(p, ',') + 1;
 8002430:	212c      	movs	r1, #44	; 0x2c
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f013 fb0d 	bl	8015a52 <strchr>
 8002438:	4603      	mov	r3, r0
 800243a:	3301      	adds	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtID = atoi(p);
 800243e:	6979      	ldr	r1, [r7, #20]
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f9b0 	bl	80027a6 <GPS_isEmpty>
 8002446:	4603      	mov	r3, r0
 8002448:	f083 0301 	eor.w	r3, r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <GPS_parse+0x664>
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f012 fb7c 	bl	8014b50 <atoi>
 8002458:	4602      	mov	r2, r0
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		p = strchr(p, ',') + 1;
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f013 faf5 	bl	8015a52 <strchr>
 8002468:	4603      	mov	r3, r0
 800246a:	3301      	adds	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) GPS_parseStr(inst, inst->txtTXT, p, 61); // copy the text to NMEA TXT max of 61 characters
 800246e:	6979      	ldr	r1, [r7, #20]
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f998 	bl	80027a6 <GPS_isEmpty>
 8002476:	4603      	mov	r3, r0
 8002478:	f083 0301 	eor.w	r3, r3, #1
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <GPS_parse+0x69c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8002488:	233d      	movs	r3, #61	; 0x3d
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f923 	bl	80026d8 <GPS_parseStr>
 8002492:	e001      	b.n	8002498 <GPS_parse+0x69c>
	}
#endif // NMEA_EXTENSIONS

	// we dont parse the remaining, yet!
	else return false;
 8002494:	2300      	movs	r3, #0
 8002496:	e018      	b.n	80024ca <GPS_parse+0x6ce>

	// Record the successful parsing of where the last data came from and when
	strcpy(inst->lastSource, inst->thisSource);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f103 021b 	add.w	r2, r3, #27
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3304      	adds	r3, #4
 80024a2:	4619      	mov	r1, r3
 80024a4:	4610      	mov	r0, r2
 80024a6:	f013 fae1 	bl	8015a6c <strcpy>
	strcpy(inst->lastSentence, inst->thisSentence);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f103 021e 	add.w	r2, r3, #30
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3307      	adds	r3, #7
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f013 fad8 	bl	8015a6c <strcpy>
	inst->lastUpdate = millis();
 80024bc:	f7ff fa6c 	bl	8001998 <millis>
 80024c0:	4602      	mov	r2, r0
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	return true;
 80024c8:	2301      	movs	r3, #1
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	371c      	adds	r7, #28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd90      	pop	{r4, r7, pc}
 80024d2:	bf00      	nop
 80024d4:	0801a2c4 	.word	0x0801a2c4

080024d8 <GPS_check>:
		@param nmea Pointer to the NMEA string
		@return True if well formed, false if it has problems
*/
/**************************************************************************/
bool GPS_check(GPS* inst, char* nmea)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
	inst->thisCheck = 0; // new check
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
	if (*nmea != '$') return false; // doesn't start with $
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b24      	cmp	r3, #36	; 0x24
 80024ee:	d001      	beq.n	80024f4 <GPS_check+0x1c>
 80024f0:	2300      	movs	r3, #0
 80024f2:	e0ad      	b.n	8002650 <GPS_check+0x178>
	else inst->thisCheck += NMEA_HAS_DOLLAR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	601a      	str	r2, [r3, #0]
	// do checksum check -- first look if we even have one -- ignore all but last
	//* 
	char* ast = nmea; // not strchr(nmea,'*'); for first* 
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
	while (*ast) ast++; // go to the end
 8002502:	e002      	b.n	800250a <GPS_check+0x32>
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	3301      	adds	r3, #1
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f8      	bne.n	8002504 <GPS_check+0x2c>
	while (*ast != '*' && ast > nmea) ast--; // then back to*	if it's there
 8002512:	e002      	b.n	800251a <GPS_check+0x42>
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	3b01      	subs	r3, #1
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b2a      	cmp	r3, #42	; 0x2a
 8002520:	d003      	beq.n	800252a <GPS_check+0x52>
 8002522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d8f4      	bhi.n	8002514 <GPS_check+0x3c>
	if (*ast != '*') return false; // there is no asterisk
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b2a      	cmp	r3, #42	; 0x2a
 8002530:	d001      	beq.n	8002536 <GPS_check+0x5e>
 8002532:	2300      	movs	r3, #0
 8002534:	e08c      	b.n	8002650 <GPS_check+0x178>
	else
	{
		uint16_t sum = GPS_parseHex(inst, *(ast + 1)) * 16; // extract checksum
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	3301      	adds	r3, #1
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4619      	mov	r1, r3
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fbc6 	bl	8002cd0 <GPS_parseHex>
 8002544:	4603      	mov	r3, r0
 8002546:	b29b      	uxth	r3, r3
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	847b      	strh	r3, [r7, #34]	; 0x22
		sum += GPS_parseHex(inst, *(ast + 2));
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	3302      	adds	r3, #2
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	4619      	mov	r1, r3
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fbbb 	bl	8002cd0 <GPS_parseHex>
 800255a:	4603      	mov	r3, r0
 800255c:	b29a      	uxth	r2, r3
 800255e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002560:	4413      	add	r3, r2
 8002562:	847b      	strh	r3, [r7, #34]	; 0x22
		char* p = nmea; // check checksum
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	61bb      	str	r3, [r7, #24]
		for (char* p1 = p + 1; p1 < ast; p1++)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	3301      	adds	r3, #1
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e008      	b.n	8002582 <GPS_check+0xaa>
		{
			sum ^=* p1;
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b29a      	uxth	r2, r3
 8002576:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002578:	4053      	eors	r3, r2
 800257a:	847b      	strh	r3, [r7, #34]	; 0x22
		for (char* p1 = p + 1; p1 < ast; p1++)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	3301      	adds	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	429a      	cmp	r2, r3
 8002588:	d3f2      	bcc.n	8002570 <GPS_check+0x98>
		}
		if (sum != 0) return false; // bad checksum :(
 800258a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <GPS_check+0xbc>
 8002590:	2300      	movs	r3, #0
 8002592:	e05d      	b.n	8002650 <GPS_check+0x178>
		else inst->thisCheck += NMEA_HAS_CHECKSUM;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	1c9a      	adds	r2, r3, #2
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	601a      	str	r2, [r3, #0]
	}
	// extract source of variable length
	char* p = nmea + 1;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	3301      	adds	r3, #1
 80025a2:	617b      	str	r3, [r7, #20]
	const char* src = GPS_tokenOnList(inst, p, inst->sources);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80025aa:	461a      	mov	r2, r3
 80025ac:	6979      	ldr	r1, [r7, #20]
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f852 	bl	8002658 <GPS_tokenOnList>
 80025b4:	6138      	str	r0, [r7, #16]
	if (src)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01f      	beq.n	80025fc <GPS_check+0x124>
	{
		strcpy(inst->thisSource, src);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3304      	adds	r3, #4
 80025c0:	6939      	ldr	r1, [r7, #16]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f013 fa52 	bl	8015a6c <strcpy>
		inst->thisCheck += NMEA_HAS_SOURCE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f103 020a 	add.w	r2, r3, #10
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	601a      	str	r2, [r3, #0]
	}
	else return false;
	p += strlen(src);
 80025d4:	6938      	ldr	r0, [r7, #16]
 80025d6:	f7fd fe05 	bl	80001e4 <strlen>
 80025da:	4602      	mov	r2, r0
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	4413      	add	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]
	// extract sentence id and check if parsed
	const char* snc = GPS_tokenOnList(inst, p, inst->sentences_parsed);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80025e8:	461a      	mov	r2, r3
 80025ea:	6979      	ldr	r1, [r7, #20]
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f833 	bl	8002658 <GPS_tokenOnList>
 80025f2:	60f8      	str	r0, [r7, #12]
	if (snc)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00f      	beq.n	800261a <GPS_check+0x142>
 80025fa:	e001      	b.n	8002600 <GPS_check+0x128>
	else return false;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e027      	b.n	8002650 <GPS_check+0x178>
	{
		strcpy(inst->thisSentence, snc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3307      	adds	r3, #7
 8002604:	68f9      	ldr	r1, [r7, #12]
 8002606:	4618      	mov	r0, r3
 8002608:	f013 fa30 	bl	8015a6c <strcpy>
		inst->thisCheck += NMEA_HAS_SENTENCE_P + NMEA_HAS_SENTENCE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	e019      	b.n	800264e <GPS_check+0x176>
	}
	else
	{ // check if known
		snc = GPS_tokenOnList(inst, p, inst->sentences_known);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002620:	461a      	mov	r2, r3
 8002622:	6979      	ldr	r1, [r7, #20]
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f817 	bl	8002658 <GPS_tokenOnList>
 800262a:	60f8      	str	r0, [r7, #12]
		if (snc)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00d      	beq.n	800264e <GPS_check+0x176>
		{
			strcpy(inst->thisSentence, snc);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3307      	adds	r3, #7
 8002636:	68f9      	ldr	r1, [r7, #12]
 8002638:	4618      	mov	r0, r3
 800263a:	f013 fa17 	bl	8015a6c <strcpy>
			inst->thisCheck += NMEA_HAS_SENTENCE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f103 0214 	add.w	r2, r3, #20
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	601a      	str	r2, [r3, #0]
			return false;
 800264a:	2300      	movs	r3, #0
 800264c:	e000      	b.n	8002650 <GPS_check+0x178>
		}
	}
	return true; // passed all the tests
 800264e:	2301      	movs	r3, #1
}
 8002650:	4618      	mov	r0, r3
 8002652:	3728      	adds	r7, #40	; 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <GPS_tokenOnList>:
		@param list A list of strings, with the final entry starting "ZZ"
		@return Pointer to the found token, or NULL if it fails
*/
/**************************************************************************/
const char* GPS_tokenOnList(GPS* inst, char* token, const char* *list)
{
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
	int i = 0; // index in the list
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 8002668:	e01e      	b.n	80026a8 <GPS_tokenOnList+0x50>
	{ // stop at terminator and don't crash without it
		// test for a match on the sentence name
		if (!strncmp((const char* )list[i], (const char* )token, strlen(list[i]))) return list[i];
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	681c      	ldr	r4, [r3, #0]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	4413      	add	r3, r2
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7fd fdb0 	bl	80001e4 <strlen>
 8002684:	4603      	mov	r3, r0
 8002686:	461a      	mov	r2, r3
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	4620      	mov	r0, r4
 800268c:	f013 f9f6 	bl	8015a7c <strncmp>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d105      	bne.n	80026a2 <GPS_tokenOnList+0x4a>
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	e014      	b.n	80026cc <GPS_tokenOnList+0x74>
		i++;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3301      	adds	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	4413      	add	r3, r2
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2202      	movs	r2, #2
 80026b4:	4907      	ldr	r1, [pc, #28]	; (80026d4 <GPS_tokenOnList+0x7c>)
 80026b6:	4618      	mov	r0, r3
 80026b8:	f013 f9e0 	bl	8015a7c <strncmp>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <GPS_tokenOnList+0x72>
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026c8:	dbcf      	blt.n	800266a <GPS_tokenOnList+0x12>
	}
	return NULL; // couldn't find a match
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd90      	pop	{r4, r7, pc}
 80026d4:	0801a2c8 	.word	0x0801a2c8

080026d8 <GPS_parseStr>:
		@param n Max permitted size of string including terminating 0
		@return Pointer to the string buffer
*/
/**************************************************************************/
char* GPS_parseStr(GPS* inst, char* buff, char* p, int n)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08c      	sub	sp, #48	; 0x30
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	603b      	str	r3, [r7, #0]
	char* e = strchr(p, ',');
 80026e6:	212c      	movs	r1, #44	; 0x2c
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f013 f9b2 	bl	8015a52 <strchr>
 80026ee:	62f8      	str	r0, [r7, #44]	; 0x2c
	int len = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (e) 
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d018      	beq.n	800272c <GPS_parseStr+0x54>
	{
		len = min(e - p, n - 1);
 80026fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	3b01      	subs	r3, #1
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	4293      	cmp	r3, r2
 800270e:	bfa8      	it	ge
 8002710:	4613      	movge	r3, r2
 8002712:	62bb      	str	r3, [r7, #40]	; 0x28
		strncpy(buff, p, len); // copy up to the comma
 8002714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002716:	461a      	mov	r2, r3
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	68b8      	ldr	r0, [r7, #8]
 800271c:	f013 f9c0 	bl	8015aa0 <strncpy>
		buff[len] = 0;
 8002720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	4413      	add	r3, r2
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	e037      	b.n	800279c <GPS_parseStr+0xc4>
	}
	else
	{
		e = strchr(p, '*');
 800272c:	212a      	movs	r1, #42	; 0x2a
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f013 f98f 	bl	8015a52 <strchr>
 8002734:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (e)
 8002736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01b      	beq.n	8002774 <GPS_parseStr+0x9c>
		{
			len = min(e - p, n - 1);
 800273c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	61fb      	str	r3, [r7, #28]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	3b01      	subs	r3, #1
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	4293      	cmp	r3, r2
 8002750:	bfa8      	it	ge
 8002752:	4613      	movge	r3, r2
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or up to the* 
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	461a      	mov	r2, r3
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	68b8      	ldr	r0, [r7, #8]
 800275e:	f013 f99f 	bl	8015aa0 <strncpy>
			buff[e - p] = 0;
 8002762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	461a      	mov	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	4413      	add	r3, r2
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	e013      	b.n	800279c <GPS_parseStr+0xc4>
		}
		else
		{
			len = min((int)strlen(p), n - 1);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7fd fd35 	bl	80001e4 <strlen>
 800277a:	4603      	mov	r3, r0
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	3b01      	subs	r3, #1
 8002782:	623b      	str	r3, [r7, #32]
 8002784:	6a3a      	ldr	r2, [r7, #32]
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	4293      	cmp	r3, r2
 800278a:	bfa8      	it	ge
 800278c:	4613      	movge	r3, r2
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or to the end or max capacity
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	461a      	mov	r2, r3
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	68b8      	ldr	r0, [r7, #8]
 8002798:	f013 f982 	bl	8015aa0 <strncpy>
		}
	}
	return buff;
 800279c:	68bb      	ldr	r3, [r7, #8]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3730      	adds	r7, #48	; 0x30
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <GPS_isEmpty>:
		@param pStart Pointer to the location of the token in the NMEA string
		@return true if empty field, false if something there
*/
/**************************************************************************/
bool GPS_isEmpty(GPS* inst, char* pStart)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
	if (',' !=* pStart && '*' !=* pStart && pStart != NULL) return false;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b2c      	cmp	r3, #44	; 0x2c
 80027b6:	d008      	beq.n	80027ca <GPS_isEmpty+0x24>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b2a      	cmp	r3, #42	; 0x2a
 80027be:	d004      	beq.n	80027ca <GPS_isEmpty+0x24>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <GPS_isEmpty+0x24>
 80027c6:	2300      	movs	r3, #0
 80027c8:	e000      	b.n	80027cc <GPS_isEmpty+0x26>
	else return true;
 80027ca:	2301      	movs	r3, #1
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <GPS_parseTime>:
		@brief Parse a part of an NMEA string for time
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseTime(GPS* inst, char* p)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
	// get time
	uint32_t time = atol(p);
 80027e2:	6838      	ldr	r0, [r7, #0]
 80027e4:	f012 f9b8 	bl	8014b58 <atol>
 80027e8:	4603      	mov	r3, r0
 80027ea:	60fb      	str	r3, [r7, #12]
	inst->gpsTime.hour = time / 10000;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4a1f      	ldr	r2, [pc, #124]	; (800286c <GPS_parseTime+0x94>)
 80027f0:	fba2 2303 	umull	r2, r3, r2, r3
 80027f4:	0b5b      	lsrs	r3, r3, #13
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = (time % 10000) / 100;
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4b1a      	ldr	r3, [pc, #104]	; (800286c <GPS_parseTime+0x94>)
 8002802:	fba3 1302 	umull	r1, r3, r3, r2
 8002806:	0b5b      	lsrs	r3, r3, #13
 8002808:	f242 7110 	movw	r1, #10000	; 0x2710
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	4a17      	ldr	r2, [pc, #92]	; (8002870 <GPS_parseTime+0x98>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	b2da      	uxtb	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = (time % 100);
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4b12      	ldr	r3, [pc, #72]	; (8002870 <GPS_parseTime+0x98>)
 8002826:	fba3 1302 	umull	r1, r3, r3, r2
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	2164      	movs	r1, #100	; 0x64
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	b2da      	uxtb	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	p = strchr(p, '.') + 1;
 800283c:	212e      	movs	r1, #46	; 0x2e
 800283e:	6838      	ldr	r0, [r7, #0]
 8002840:	f013 f907 	bl	8015a52 <strchr>
 8002844:	4603      	mov	r3, r0
 8002846:	3301      	adds	r3, #1
 8002848:	603b      	str	r3, [r7, #0]
	inst->gpsTime.msecond = (uint32_t)atoi(p);
 800284a:	6838      	ldr	r0, [r7, #0]
 800284c:	f012 f980 	bl	8014b50 <atoi>
 8002850:	4603      	mov	r3, r0
 8002852:	b29a      	uxth	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	875a      	strh	r2, [r3, #58]	; 0x3a
	inst->lastTime = inst->sentTime;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	d1b71759 	.word	0xd1b71759
 8002870:	51eb851f 	.word	0x51eb851f
 8002874:	00000000 	.word	0x00000000

08002878 <GPS_parseLat>:
		@brief Parse a part of an NMEA string for latitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLat(GPS* inst, char* p)
{
 8002878:	b5b0      	push	{r4, r5, r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
	//int32_t degree;
	//long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 8002882:	6839      	ldr	r1, [r7, #0]
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff8e 	bl	80027a6 <GPS_isEmpty>
 800288a:	4603      	mov	r3, r0
 800288c:	f083 0301 	eor.w	r3, r3, #1
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 8092 	beq.w	80029bc <GPS_parseLat+0x144>
	{
		strncpy(degreebuff, p, 2);
 8002898:	f107 030c 	add.w	r3, r7, #12
 800289c:	2202      	movs	r2, #2
 800289e:	6839      	ldr	r1, [r7, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f013 f8fd 	bl	8015aa0 <strncpy>
		p += 2;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	3302      	adds	r3, #2
 80028aa:	603b      	str	r3, [r7, #0]
		degreebuff[2] = '\0';
 80028ac:	2300      	movs	r3, #0
 80028ae:	73bb      	strb	r3, [r7, #14]
		long degree = atol(degreebuff) * 10000000;
 80028b0:	f107 030c 	add.w	r3, r7, #12
 80028b4:	4618      	mov	r0, r3
 80028b6:	f012 f94f 	bl	8014b58 <atol>
 80028ba:	4602      	mov	r2, r0
 80028bc:	4b44      	ldr	r3, [pc, #272]	; (80029d0 <GPS_parseLat+0x158>)
 80028be:	fb03 f302 	mul.w	r3, r3, r2
 80028c2:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 80028c4:	f107 030c 	add.w	r3, r7, #12
 80028c8:	2202      	movs	r2, #2
 80028ca:	6839      	ldr	r1, [r7, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f013 f8e7 	bl	8015aa0 <strncpy>
		p += 3;										// skip decimal point
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	3303      	adds	r3, #3
 80028d6:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 80028d8:	f107 030c 	add.w	r3, r7, #12
 80028dc:	3302      	adds	r3, #2
 80028de:	2204      	movs	r2, #4
 80028e0:	6839      	ldr	r1, [r7, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f013 f8dc 	bl	8015aa0 <strncpy>
		degreebuff[6] = '\0';
 80028e8:	2300      	movs	r3, #0
 80028ea:	74bb      	strb	r3, [r7, #18]
		long minutes = 50*	atol(degreebuff) / 3;
 80028ec:	f107 030c 	add.w	r3, r7, #12
 80028f0:	4618      	mov	r0, r3
 80028f2:	f012 f931 	bl	8014b58 <atol>
 80028f6:	4602      	mov	r2, r0
 80028f8:	2332      	movs	r3, #50	; 0x32
 80028fa:	fb03 f302 	mul.w	r3, r3, r2
 80028fe:	4a35      	ldr	r2, [pc, #212]	; (80029d4 <GPS_parseLat+0x15c>)
 8002900:	fb82 1203 	smull	r1, r2, r2, r3
 8002904:	17db      	asrs	r3, r3, #31
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	61bb      	str	r3, [r7, #24]
		inst->latitude_fixed = degree + minutes;
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	441a      	add	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
		inst->latitude = degree / 100000 + minutes * 0.000006;
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	4a30      	ldr	r2, [pc, #192]	; (80029d8 <GPS_parseLat+0x160>)
 8002918:	fb82 1203 	smull	r1, r2, r2, r3
 800291c:	1352      	asrs	r2, r2, #13
 800291e:	17db      	asrs	r3, r3, #31
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fe0e 	bl	8000544 <__aeabi_i2d>
 8002928:	4604      	mov	r4, r0
 800292a:	460d      	mov	r5, r1
 800292c:	69b8      	ldr	r0, [r7, #24]
 800292e:	f7fd fe09 	bl	8000544 <__aeabi_i2d>
 8002932:	a325      	add	r3, pc, #148	; (adr r3, 80029c8 <GPS_parseLat+0x150>)
 8002934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002938:	f7fd fe6e 	bl	8000618 <__aeabi_dmul>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4620      	mov	r0, r4
 8002942:	4629      	mov	r1, r5
 8002944:	f7fd fcb2 	bl	80002ac <__adddf3>
 8002948:	4603      	mov	r3, r0
 800294a:	460c      	mov	r4, r1
 800294c:	4618      	mov	r0, r3
 800294e:	4621      	mov	r1, r4
 8002950:	f7fe f95a 	bl	8000c08 <__aeabi_d2f>
 8002954:	4602      	mov	r2, r0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	63da      	str	r2, [r3, #60]	; 0x3c
		inst->latitudeDegrees = (inst->latitude - 100 * (int)(inst->latitude / 100)) / 60.0;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002966:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80029dc <GPS_parseLat+0x164>
 800296a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800296e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002972:	ee17 2a90 	vmov	r2, s15
 8002976:	2364      	movs	r3, #100	; 0x64
 8002978:	fb03 f302 	mul.w	r3, r3, r2
 800297c:	ee07 3a90 	vmov	s15, r3
 8002980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002984:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002988:	eddf 6a15 	vldr	s13, [pc, #84]	; 80029e0 <GPS_parseLat+0x168>
 800298c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitudeDegrees += (int)(inst->latitude / 100);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80029a2:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 80029dc <GPS_parseLat+0x164>
 80029a6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	}
}
 80029bc:	bf00      	nop
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bdb0      	pop	{r4, r5, r7, pc}
 80029c4:	f3af 8000 	nop.w
 80029c8:	7110e454 	.word	0x7110e454
 80029cc:	3ed92a73 	.word	0x3ed92a73
 80029d0:	00989680 	.word	0x00989680
 80029d4:	55555556 	.word	0x55555556
 80029d8:	14f8b589 	.word	0x14f8b589
 80029dc:	42c80000 	.word	0x42c80000
 80029e0:	42700000 	.word	0x42700000

080029e4 <GPS_parseLatDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLatDir(GPS* inst, char* p)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
	if (p[0] == 'S')
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b53      	cmp	r3, #83	; 0x53
 80029f4:	d11c      	bne.n	8002a30 <GPS_parseLatDir+0x4c>
	{
		inst->lat = 'S';
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2253      	movs	r2, #83	; 0x53
 80029fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		inst->latitudeDegrees *= -1.0;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fd fdb0 	bl	8000568 <__aeabi_f2d>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	460c      	mov	r4, r1
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	4621      	mov	r1, r4
 8002a10:	f7fe f8fa 	bl	8000c08 <__aeabi_d2f>
 8002a14:	4603      	mov	r3, r0
 8002a16:	ee07 3a90 	vmov	s15, r3
 8002a1a:	eef1 7a67 	vneg.f32	s15, s15
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitude_fixed *= -1;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	425a      	negs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	645a      	str	r2, [r3, #68]	; 0x44
 8002a2e:	e013      	b.n	8002a58 <GPS_parseLatDir+0x74>
	}
	else if (p[0] == 'N') inst->lat = 'N';
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b4e      	cmp	r3, #78	; 0x4e
 8002a36:	d104      	bne.n	8002a42 <GPS_parseLatDir+0x5e>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	224e      	movs	r2, #78	; 0x4e
 8002a3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8002a40:	e00a      	b.n	8002a58 <GPS_parseLatDir+0x74>
	else if (p[0] == ',') inst->lat = 0;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b2c      	cmp	r3, #44	; 0x2c
 8002a48:	d104      	bne.n	8002a54 <GPS_parseLatDir+0x70>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8002a52:	e001      	b.n	8002a58 <GPS_parseLatDir+0x74>
	else return false;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e000      	b.n	8002a5a <GPS_parseLatDir+0x76>
	
	return true;
 8002a58:	2301      	movs	r3, #1
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd90      	pop	{r4, r7, pc}
	...

08002a64 <GPS_parseLon>:
		@brief Parse a part of an NMEA string for longitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLon(GPS* inst, char* p)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
	int32_t degree;
	long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 8002a6e:	6839      	ldr	r1, [r7, #0]
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff fe98 	bl	80027a6 <GPS_isEmpty>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f083 0301 	eor.w	r3, r3, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8088 	beq.w	8002b94 <GPS_parseLon+0x130>
	{
		strncpy(degreebuff, p, 3);
 8002a84:	f107 030c 	add.w	r3, r7, #12
 8002a88:	2203      	movs	r2, #3
 8002a8a:	6839      	ldr	r1, [r7, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f013 f807 	bl	8015aa0 <strncpy>
		p += 3;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	3303      	adds	r3, #3
 8002a96:	603b      	str	r3, [r7, #0]
		degreebuff[3] = '\0';
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]
		degree = atol(degreebuff)*	10000000;
 8002a9c:	f107 030c 	add.w	r3, r7, #12
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f012 f859 	bl	8014b58 <atol>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4b3c      	ldr	r3, [pc, #240]	; (8002b9c <GPS_parseLon+0x138>)
 8002aaa:	fb03 f302 	mul.w	r3, r3, r2
 8002aae:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 8002ab0:	f107 030c 	add.w	r3, r7, #12
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	6839      	ldr	r1, [r7, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f012 fff1 	bl	8015aa0 <strncpy>
		p += 3;										// skip decimal point
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	3303      	adds	r3, #3
 8002ac2:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 8002ac4:	f107 030c 	add.w	r3, r7, #12
 8002ac8:	3302      	adds	r3, #2
 8002aca:	2204      	movs	r2, #4
 8002acc:	6839      	ldr	r1, [r7, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f012 ffe6 	bl	8015aa0 <strncpy>
		degreebuff[6] = '\0';
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	74bb      	strb	r3, [r7, #18]
		minutes = 50 * atol(degreebuff) / 3;
 8002ad8:	f107 030c 	add.w	r3, r7, #12
 8002adc:	4618      	mov	r0, r3
 8002ade:	f012 f83b 	bl	8014b58 <atol>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	2332      	movs	r3, #50	; 0x32
 8002ae6:	fb03 f302 	mul.w	r3, r3, r2
 8002aea:	4a2d      	ldr	r2, [pc, #180]	; (8002ba0 <GPS_parseLon+0x13c>)
 8002aec:	fb82 1203 	smull	r1, r2, r2, r3
 8002af0:	17db      	asrs	r3, r3, #31
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	61bb      	str	r3, [r7, #24]
		inst->longitude_fixed = degree + minutes;
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	441a      	add	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	649a      	str	r2, [r3, #72]	; 0x48
		inst->longitude = degree / 100000 + minutes * 0.000006f;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4a28      	ldr	r2, [pc, #160]	; (8002ba4 <GPS_parseLon+0x140>)
 8002b04:	fb82 1203 	smull	r1, r2, r2, r3
 8002b08:	1352      	asrs	r2, r2, #13
 8002b0a:	17db      	asrs	r3, r3, #31
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b20:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002ba8 <GPS_parseLon+0x144>
 8002b24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		inst->longitudeDegrees = (inst->longitude - 100 * (int)(inst->longitude / 100)) / 60.0;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002b3e:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8002bac <GPS_parseLon+0x148>
 8002b42:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b4a:	ee17 2a90 	vmov	r2, s15
 8002b4e:	2364      	movs	r3, #100	; 0x64
 8002b50:	fb03 f302 	mul.w	r3, r3, r2
 8002b54:	ee07 3a90 	vmov	s15, r3
 8002b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b60:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002bb0 <GPS_parseLon+0x14c>
 8002b64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		inst->longitudeDegrees += (int)(inst->longitude / 100);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002b7a:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8002bac <GPS_parseLon+0x148>
 8002b7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	}
}
 8002b94:	bf00      	nop
 8002b96:	3720      	adds	r7, #32
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	00989680 	.word	0x00989680
 8002ba0:	55555556 	.word	0x55555556
 8002ba4:	14f8b589 	.word	0x14f8b589
 8002ba8:	36c9539c 	.word	0x36c9539c
 8002bac:	42c80000 	.word	0x42c80000
 8002bb0:	42700000 	.word	0x42700000

08002bb4 <GPS_parseLonDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLonDir(GPS* inst, char* p)
{
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
	if (!GPS_isEmpty(inst, p))
 8002bbe:	6839      	ldr	r1, [r7, #0]
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff fdf0 	bl	80027a6 <GPS_isEmpty>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f083 0301 	eor.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d034      	beq.n	8002c3c <GPS_parseLonDir+0x88>
	{
		if (p[0] == 'W')
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b57      	cmp	r3, #87	; 0x57
 8002bd8:	d11c      	bne.n	8002c14 <GPS_parseLonDir+0x60>
		{
			inst->lon = 'W';
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2257      	movs	r2, #87	; 0x57
 8002bde:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
			inst->longitudeDegrees *= -1.0;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fcbe 	bl	8000568 <__aeabi_f2d>
 8002bec:	4603      	mov	r3, r0
 8002bee:	460c      	mov	r4, r1
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	f7fe f808 	bl	8000c08 <__aeabi_d2f>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	ee07 3a90 	vmov	s15, r3
 8002bfe:	eef1 7a67 	vneg.f32	s15, s15
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			inst->longitude_fixed *= -1;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0c:	425a      	negs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	649a      	str	r2, [r3, #72]	; 0x48
 8002c12:	e013      	b.n	8002c3c <GPS_parseLonDir+0x88>
		}
		else if (p[0] == 'E') inst->lon = 'E';
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b45      	cmp	r3, #69	; 0x45
 8002c1a:	d104      	bne.n	8002c26 <GPS_parseLonDir+0x72>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2245      	movs	r2, #69	; 0x45
 8002c20:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8002c24:	e00a      	b.n	8002c3c <GPS_parseLonDir+0x88>
		else if (p[0] == ',') inst->lon = 0;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b2c      	cmp	r3, #44	; 0x2c
 8002c2c:	d104      	bne.n	8002c38 <GPS_parseLonDir+0x84>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8002c36:	e001      	b.n	8002c3c <GPS_parseLonDir+0x88>
		else return false;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	e000      	b.n	8002c3e <GPS_parseLonDir+0x8a>
	}
	return true;
 8002c3c:	2301      	movs	r3, #1
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd90      	pop	{r4, r7, pc}

08002c46 <GPS_parseFix>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseFix(GPS* inst, char* p)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
	if (p[0] == 'A')
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b41      	cmp	r3, #65	; 0x41
 8002c56:	d10a      	bne.n	8002c6e <GPS_parseFix+0x28>
	{
		inst->fix = true;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		inst->lastFix = inst->sentTime;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8002c6c:	e00a      	b.n	8002c84 <GPS_parseFix+0x3e>
	}
	else if (p[0] == 'V') inst->fix = false;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b56      	cmp	r3, #86	; 0x56
 8002c74:	d104      	bne.n	8002c80 <GPS_parseFix+0x3a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8002c7e:	e001      	b.n	8002c84 <GPS_parseFix+0x3e>
	else return false;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e000      	b.n	8002c86 <GPS_parseFix+0x40>
	return true;
 8002c84:	2301      	movs	r3, #1
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <GPS_newNMEAreceived>:
/*!
		@brief Check to see if a new NMEA line has been received
		@return True if received, false if not
*/
/**************************************************************************/
bool GPS_newNMEAreceived(GPS* inst) { return inst->recvdflag; }
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <GPS_lastNMEA>:
		@brief Returns the last NMEA line received and unsets the received flag
		@return Pointer to the last line string
*/
/**************************************************************************/
char* GPS_lastNMEA(GPS* inst)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
	inst->recvdflag = false;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	return (char*)inst->lastline;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <GPS_parseHex>:
	 character
*/
/**************************************************************************/
// read a Hex value and return the decimal equivalent
uint8_t GPS_parseHex(GPS* inst, char c)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	70fb      	strb	r3, [r7, #3]
	if (c < '0') return 0;
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	2b2f      	cmp	r3, #47	; 0x2f
 8002ce0:	d801      	bhi.n	8002ce6 <GPS_parseHex+0x16>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e013      	b.n	8002d0e <GPS_parseHex+0x3e>
	if (c <= '9') return c - '0';
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	2b39      	cmp	r3, #57	; 0x39
 8002cea:	d803      	bhi.n	8002cf4 <GPS_parseHex+0x24>
 8002cec:	78fb      	ldrb	r3, [r7, #3]
 8002cee:	3b30      	subs	r3, #48	; 0x30
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	e00c      	b.n	8002d0e <GPS_parseHex+0x3e>
	if (c < 'A') return 0;
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	2b40      	cmp	r3, #64	; 0x40
 8002cf8:	d801      	bhi.n	8002cfe <GPS_parseHex+0x2e>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e007      	b.n	8002d0e <GPS_parseHex+0x3e>
	if (c <= 'F') return (c - 'A') + 10;
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	2b46      	cmp	r3, #70	; 0x46
 8002d02:	d803      	bhi.n	8002d0c <GPS_parseHex+0x3c>
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	3b37      	subs	r3, #55	; 0x37
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	e000      	b.n	8002d0e <GPS_parseHex+0x3e>
	// if (c > 'F')
	return 0;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <MPU_writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleratio, gyroscope, and temperature data
//===================================================================================================================
void MPU_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af04      	add	r7, sp, #16
 8002d20:	4603      	mov	r3, r0
 8002d22:	71fb      	strb	r3, [r7, #7]
 8002d24:	460b      	mov	r3, r1
 8002d26:	71bb      	strb	r3, [r7, #6]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(Get_I2C1_Instance(), address, subAddress, 1, &data, 1, 1);
 8002d2c:	f010 fbf4 	bl	8013518 <Get_I2C1_Instance>
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	b299      	uxth	r1, r3
 8002d34:	79bb      	ldrb	r3, [r7, #6]
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	2301      	movs	r3, #1
 8002d3a:	9302      	str	r3, [sp, #8]
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	9301      	str	r3, [sp, #4]
 8002d40:	1d7b      	adds	r3, r7, #5
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2301      	movs	r3, #1
 8002d46:	f003 fc37 	bl	80065b8 <HAL_I2C_Mem_Write>
	//while(HAL_I2C_GetState(Get_I2C1_Instance()) != HAL_I2C_STATE_READY);
	/*print("Write:");
	print_int(data);
	println("");*/
	//i2c.write(address, data_write, 2, 0);
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <MPU_readByte>:
char MPU_readByte(uint8_t address, uint8_t subAddress)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b088      	sub	sp, #32
 8002d56:	af04      	add	r7, sp, #16
 8002d58:	4603      	mov	r3, r0
 8002d5a:	460a      	mov	r2, r1
 8002d5c:	71fb      	strb	r3, [r7, #7]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	71bb      	strb	r3, [r7, #6]
	uint8_t data[1]; // `data` will store the register data


	//i2c.write(address, data_write, 1, 1); // no stop
	HAL_I2C_Mem_Read(Get_I2C1_Instance(), address, subAddress, 1, data, 1, 1);
 8002d62:	f010 fbd9 	bl	8013518 <Get_I2C1_Instance>
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	b299      	uxth	r1, r3
 8002d6a:	79bb      	ldrb	r3, [r7, #6]
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	2301      	movs	r3, #1
 8002d70:	9302      	str	r3, [sp, #8]
 8002d72:	2301      	movs	r3, #1
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	f107 030c 	add.w	r3, r7, #12
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f003 fd15 	bl	80067ac <HAL_I2C_Mem_Read>
	/*print("Read:");
	print_int(data[0]);
	println("");*/
	//i2c.read(address, data, 1, 0);

	return (char)data[0];
 8002d82:	7b3b      	ldrb	r3, [r7, #12]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <MPU_readBytes>:
void MPU_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t* dest)
{     
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b08d      	sub	sp, #52	; 0x34
 8002d90:	af04      	add	r7, sp, #16
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	4603      	mov	r3, r0
 8002d96:	71fb      	strb	r3, [r7, #7]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	71bb      	strb	r3, [r7, #6]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	717b      	strb	r3, [r7, #5]
	uint8_t data[14];

	HAL_I2C_Mem_Read(Get_I2C1_Instance(), address, subAddress, 1, data, count, 1);
 8002da0:	f010 fbba 	bl	8013518 <Get_I2C1_Instance>
 8002da4:	4604      	mov	r4, r0
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	b299      	uxth	r1, r3
 8002daa:	79bb      	ldrb	r3, [r7, #6]
 8002dac:	b298      	uxth	r0, r3
 8002dae:	797b      	ldrb	r3, [r7, #5]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2201      	movs	r2, #1
 8002db4:	9202      	str	r2, [sp, #8]
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	f107 030c 	add.w	r3, r7, #12
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f003 fcf2 	bl	80067ac <HAL_I2C_Mem_Read>

	/*
	i2c.write(address, data_write, 1, 1); // no stop
	i2c.read(address, data, count, 0);
	*/
	int ii = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]
	for(ii = 0; ii < count; ii++)
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	e00b      	b.n	8002dea <MPU_readBytes+0x5e>
	{
		dest[ii] = data[ii];
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f107 010c 	add.w	r1, r7, #12
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	440a      	add	r2, r1
 8002de0:	7812      	ldrb	r2, [r2, #0]
 8002de2:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	3301      	adds	r3, #1
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	797b      	ldrb	r3, [r7, #5]
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	dbef      	blt.n	8002dd2 <MPU_readBytes+0x46>
	}
} 
 8002df2:	bf00      	nop
 8002df4:	3724      	adds	r7, #36	; 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd90      	pop	{r4, r7, pc}
	...

08002dfc <MPU_getMres>:
 
void MPU_getMres()
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
	switch (MMscale)
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <MPU_getMres+0x2c>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <MPU_getMres+0x12>
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d004      	beq.n	8002e16 <MPU_getMres+0x1a>
			break;
		case MFS_16BITS:
			mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
			break;
	}
}
 8002e0c:	e007      	b.n	8002e1e <MPU_getMres+0x22>
			mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <MPU_getMres+0x30>)
 8002e10:	4a07      	ldr	r2, [pc, #28]	; (8002e30 <MPU_getMres+0x34>)
 8002e12:	601a      	str	r2, [r3, #0]
			break;
 8002e14:	e003      	b.n	8002e1e <MPU_getMres+0x22>
			mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <MPU_getMres+0x30>)
 8002e18:	4a06      	ldr	r2, [pc, #24]	; (8002e34 <MPU_getMres+0x38>)
 8002e1a:	601a      	str	r2, [r3, #0]
			break;
 8002e1c:	bf00      	nop
}
 8002e1e:	bf00      	nop
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	20002af4 	.word	0x20002af4
 8002e2c:	20002b5c 	.word	0x20002b5c
 8002e30:	40bfebff 	.word	0x40bfebff
 8002e34:	3fbfebff 	.word	0x3fbfebff

08002e38 <MPU_getGres>:
void MPU_getGres()
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
	switch (GGscale)
 8002e3c:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <MPU_getGres+0x50>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d81b      	bhi.n	8002e7c <MPU_getGres+0x44>
 8002e44:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <MPU_getGres+0x14>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002e5d 	.word	0x08002e5d
 8002e50:	08002e65 	.word	0x08002e65
 8002e54:	08002e6d 	.word	0x08002e6d
 8002e58:	08002e75 	.word	0x08002e75
	{
		// Possible gyro scales (and their register bit settings) are:
		// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11). 
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case GFS_250DPS:
			gRes = 250.0/32768.0;
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <MPU_getGres+0x54>)
 8002e5e:	4a0c      	ldr	r2, [pc, #48]	; (8002e90 <MPU_getGres+0x58>)
 8002e60:	601a      	str	r2, [r3, #0]
			break;
 8002e62:	e00b      	b.n	8002e7c <MPU_getGres+0x44>
		case GFS_500DPS:
			gRes = 500.0/32768.0;
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <MPU_getGres+0x54>)
 8002e66:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <MPU_getGres+0x5c>)
 8002e68:	601a      	str	r2, [r3, #0]
			break;
 8002e6a:	e007      	b.n	8002e7c <MPU_getGres+0x44>
		case GFS_1000DPS:
			gRes = 1000.0/32768.0;
 8002e6c:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <MPU_getGres+0x54>)
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <MPU_getGres+0x60>)
 8002e70:	601a      	str	r2, [r3, #0]
			break;
 8002e72:	e003      	b.n	8002e7c <MPU_getGres+0x44>
		case GFS_2000DPS:
			gRes = 2000.0/32768.0;
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <MPU_getGres+0x54>)
 8002e76:	4a09      	ldr	r2, [pc, #36]	; (8002e9c <MPU_getGres+0x64>)
 8002e78:	601a      	str	r2, [r3, #0]
			break;
 8002e7a:	bf00      	nop
	}
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20002a6b 	.word	0x20002a6b
 8002e8c:	20002b28 	.word	0x20002b28
 8002e90:	3bfa0000 	.word	0x3bfa0000
 8002e94:	3c7a0000 	.word	0x3c7a0000
 8002e98:	3cfa0000 	.word	0x3cfa0000
 8002e9c:	3d7a0000 	.word	0x3d7a0000

08002ea0 <MPU_getAres>:
void MPU_getAres()
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
	switch (AAscale)
 8002ea4:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <MPU_getAres+0x58>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d81f      	bhi.n	8002eec <MPU_getAres+0x4c>
 8002eac:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <MPU_getAres+0x14>)
 8002eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb2:	bf00      	nop
 8002eb4:	08002ec5 	.word	0x08002ec5
 8002eb8:	08002ecf 	.word	0x08002ecf
 8002ebc:	08002ed9 	.word	0x08002ed9
 8002ec0:	08002ee3 	.word	0x08002ee3
	{
		// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11). 
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case AFS_2G:
			aRes = 2.0/32768.0;
 8002ec4:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <MPU_getAres+0x5c>)
 8002ec6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8002eca:	601a      	str	r2, [r3, #0]
			break;
 8002ecc:	e00e      	b.n	8002eec <MPU_getAres+0x4c>
		case AFS_4G:
			aRes = 4.0/32768.0;
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <MPU_getAres+0x5c>)
 8002ed0:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8002ed4:	601a      	str	r2, [r3, #0]
			break;
 8002ed6:	e009      	b.n	8002eec <MPU_getAres+0x4c>
		case AFS_8G:
			aRes = 8.0/32768.0;
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <MPU_getAres+0x5c>)
 8002eda:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8002ede:	601a      	str	r2, [r3, #0]
			break;
 8002ee0:	e004      	b.n	8002eec <MPU_getAres+0x4c>
		case AFS_16G:
			aRes = 16.0/32768.0;
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <MPU_getAres+0x5c>)
 8002ee4:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002ee8:	601a      	str	r2, [r3, #0]
			break;
 8002eea:	bf00      	nop
	}
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20002aa4 	.word	0x20002aa4
 8002efc:	20002ae8 	.word	0x20002ae8

08002f00 <MPU_readAccelData>:

void MPU_readAccelData(int16_t* destination)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z accel register data stored here
	MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
 8002f08:	f107 0308 	add.w	r3, r7, #8
 8002f0c:	2206      	movs	r2, #6
 8002f0e:	213b      	movs	r1, #59	; 0x3b
 8002f10:	20d2      	movs	r0, #210	; 0xd2
 8002f12:	f7ff ff3b 	bl	8002d8c <MPU_readBytes>
	destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 8002f16:	7a3b      	ldrb	r3, [r7, #8]
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	b21a      	sxth	r2, r3
 8002f1c:	7a7b      	ldrb	r3, [r7, #9]
 8002f1e:	b21b      	sxth	r3, r3
 8002f20:	4313      	orrs	r3, r2
 8002f22:	b21a      	sxth	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);  
 8002f28:	7abb      	ldrb	r3, [r7, #10]
 8002f2a:	021b      	lsls	r3, r3, #8
 8002f2c:	b219      	sxth	r1, r3
 8002f2e:	7afb      	ldrb	r3, [r7, #11]
 8002f30:	b21a      	sxth	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3302      	adds	r3, #2
 8002f36:	430a      	orrs	r2, r1
 8002f38:	b212      	sxth	r2, r2
 8002f3a:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]); 
 8002f3c:	7b3b      	ldrb	r3, [r7, #12]
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	b219      	sxth	r1, r3
 8002f42:	7b7b      	ldrb	r3, [r7, #13]
 8002f44:	b21a      	sxth	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	b212      	sxth	r2, r2
 8002f4e:	801a      	strh	r2, [r3, #0]
}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <MPU_readGyroData>:
void MPU_readGyroData(int16_t* destination)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 8002f60:	f107 0308 	add.w	r3, r7, #8
 8002f64:	2206      	movs	r2, #6
 8002f66:	2143      	movs	r1, #67	; 0x43
 8002f68:	20d2      	movs	r0, #210	; 0xd2
 8002f6a:	f7ff ff0f 	bl	8002d8c <MPU_readBytes>
	destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 8002f6e:	7a3b      	ldrb	r3, [r7, #8]
 8002f70:	021b      	lsls	r3, r3, #8
 8002f72:	b21a      	sxth	r2, r3
 8002f74:	7a7b      	ldrb	r3, [r7, #9]
 8002f76:	b21b      	sxth	r3, r3
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	b21a      	sxth	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);  
 8002f80:	7abb      	ldrb	r3, [r7, #10]
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	b219      	sxth	r1, r3
 8002f86:	7afb      	ldrb	r3, [r7, #11]
 8002f88:	b21a      	sxth	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	b212      	sxth	r2, r2
 8002f92:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]); 
 8002f94:	7b3b      	ldrb	r3, [r7, #12]
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	b219      	sxth	r1, r3
 8002f9a:	7b7b      	ldrb	r3, [r7, #13]
 8002f9c:	b21a      	sxth	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	b212      	sxth	r2, r2
 8002fa6:	801a      	strh	r2, [r3, #0]
}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <MPU_readMagData>:
void MPU_readMagData(int16_t* destination)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if(MPU_readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01)
 8002fb8:	2102      	movs	r1, #2
 8002fba:	2018      	movs	r0, #24
 8002fbc:	f7ff fec9 	bl	8002d52 <MPU_readByte>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d02a      	beq.n	8003020 <MPU_readMagData+0x70>
	{ // wait for magnetometer data ready bit to be set
		MPU_readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
 8002fca:	f107 0308 	add.w	r3, r7, #8
 8002fce:	2207      	movs	r2, #7
 8002fd0:	2103      	movs	r1, #3
 8002fd2:	2018      	movs	r0, #24
 8002fd4:	f7ff feda 	bl	8002d8c <MPU_readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 8002fd8:	7bbb      	ldrb	r3, [r7, #14]
 8002fda:	73fb      	strb	r3, [r7, #15]
		if(!(c & 0x08))
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d11c      	bne.n	8003020 <MPU_readMagData+0x70>
		{ // Check if magnetic sensor overflow set, if not then report data
			destination[0] = (int16_t)(((int16_t)rawData[1] << 8) | rawData[0]);  // Turn the MSB and LSB into a signed 16-bit value
 8002fe6:	7a7b      	ldrb	r3, [r7, #9]
 8002fe8:	021b      	lsls	r3, r3, #8
 8002fea:	b21a      	sxth	r2, r3
 8002fec:	7a3b      	ldrb	r3, [r7, #8]
 8002fee:	b21b      	sxth	r3, r3
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	b21a      	sxth	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	801a      	strh	r2, [r3, #0]
			destination[1] = (int16_t)(((int16_t)rawData[3] << 8) | rawData[2]);  // Data stored as little Endian
 8002ff8:	7afb      	ldrb	r3, [r7, #11]
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	b219      	sxth	r1, r3
 8002ffe:	7abb      	ldrb	r3, [r7, #10]
 8003000:	b21a      	sxth	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3302      	adds	r3, #2
 8003006:	430a      	orrs	r2, r1
 8003008:	b212      	sxth	r2, r2
 800300a:	801a      	strh	r2, [r3, #0]
			destination[2] = (int16_t)(((int16_t)rawData[5] << 8) | rawData[4]); 
 800300c:	7b7b      	ldrb	r3, [r7, #13]
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	b219      	sxth	r1, r3
 8003012:	7b3b      	ldrb	r3, [r7, #12]
 8003014:	b21a      	sxth	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3304      	adds	r3, #4
 800301a:	430a      	orrs	r2, r1
 800301c:	b212      	sxth	r2, r2
 800301e:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8003020:	bf00      	nop
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <MPU_present>:
	MPU_readBytes(MPU9250_ADDRESS, TEMP_OUT_H, 2, &rawData[0]);  // Read the two raw data registers sequentially into data array 
	return (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]);  // Turn the MSB and LSB into a 16-bit value
}

bool MPU_present()
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
	// 5 trials of getting WHO_AM_I response from MPU
	uint8_t attempts = 0;
 800302e:	2300      	movs	r3, #0
 8003030:	71fb      	strb	r3, [r7, #7]
	do
	{
		MPU_reset();
 8003032:	f000 f977 	bl	8003324 <MPU_reset>
		char who = MPU_readByte(MPU9250_ADDRESS, MPU9250_WHO_AM_I);
 8003036:	2175      	movs	r1, #117	; 0x75
 8003038:	20d2      	movs	r0, #210	; 0xd2
 800303a:	f7ff fe8a 	bl	8002d52 <MPU_readByte>
 800303e:	4603      	mov	r3, r0
 8003040:	71bb      	strb	r3, [r7, #6]
		if (who == 0x71) return true;
 8003042:	79bb      	ldrb	r3, [r7, #6]
 8003044:	2b71      	cmp	r3, #113	; 0x71
 8003046:	d101      	bne.n	800304c <MPU_present+0x24>
 8003048:	2301      	movs	r3, #1
 800304a:	e00a      	b.n	8003062 <MPU_present+0x3a>
		else
		{
			attempts++;
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	3301      	adds	r3, #1
 8003050:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 8003052:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003056:	f002 faef 	bl	8005638 <HAL_Delay>
		}
	} while (attempts <= 5);
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	2b05      	cmp	r3, #5
 800305e:	d9e8      	bls.n	8003032 <MPU_present+0xa>
	return false;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <MPU_init>:
void MPU_init()
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
	AAscale = AFS_2G;
 8003072:	4b64      	ldr	r3, [pc, #400]	; (8003204 <MPU_init+0x198>)
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
	GGscale = GFS_250DPS;
 8003078:	4b63      	ldr	r3, [pc, #396]	; (8003208 <MPU_init+0x19c>)
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
	MMscale = MFS_16BITS;
 800307e:	4b63      	ldr	r3, [pc, #396]	; (800320c <MPU_init+0x1a0>)
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
	Mmode = 0x06;
 8003084:	4b62      	ldr	r3, [pc, #392]	; (8003210 <MPU_init+0x1a4>)
 8003086:	2206      	movs	r2, #6
 8003088:	701a      	strb	r2, [r3, #0]
	magCalibration[0] = 0;
 800308a:	4b62      	ldr	r3, [pc, #392]	; (8003214 <MPU_init+0x1a8>)
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
	magCalibration[1] = 0;
 8003092:	4b60      	ldr	r3, [pc, #384]	; (8003214 <MPU_init+0x1a8>)
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	605a      	str	r2, [r3, #4]
	magCalibration[2] = 0;
 800309a:	4b5e      	ldr	r3, [pc, #376]	; (8003214 <MPU_init+0x1a8>)
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	609a      	str	r2, [r3, #8]
	magbias[0] = 0;
 80030a2:	4b5d      	ldr	r3, [pc, #372]	; (8003218 <MPU_init+0x1ac>)
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
	magbias[1] = 0;
 80030aa:	4b5b      	ldr	r3, [pc, #364]	; (8003218 <MPU_init+0x1ac>)
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	605a      	str	r2, [r3, #4]
	magbias[2] = 0;
 80030b2:	4b59      	ldr	r3, [pc, #356]	; (8003218 <MPU_init+0x1ac>)
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	609a      	str	r2, [r3, #8]
	delt_t = 0;
 80030ba:	4b58      	ldr	r3, [pc, #352]	; (800321c <MPU_init+0x1b0>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
	count = 0;
 80030c0:	4b57      	ldr	r3, [pc, #348]	; (8003220 <MPU_init+0x1b4>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
	deltat = 0.0f;
 80030c6:	4b57      	ldr	r3, [pc, #348]	; (8003224 <MPU_init+0x1b8>)
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
	lastUpdate = 0;
 80030ce:	4b56      	ldr	r3, [pc, #344]	; (8003228 <MPU_init+0x1bc>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
	firstUpdate = 0;
 80030d4:	4b55      	ldr	r3, [pc, #340]	; (800322c <MPU_init+0x1c0>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
	Now = 0;
 80030da:	4b55      	ldr	r3, [pc, #340]	; (8003230 <MPU_init+0x1c4>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
	q[0] = 1.0f;
 80030e0:	4b54      	ldr	r3, [pc, #336]	; (8003234 <MPU_init+0x1c8>)
 80030e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030e6:	601a      	str	r2, [r3, #0]
	q[1] = 0.0f;
 80030e8:	4b52      	ldr	r3, [pc, #328]	; (8003234 <MPU_init+0x1c8>)
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	605a      	str	r2, [r3, #4]
	q[2] = 0.0f;
 80030f0:	4b50      	ldr	r3, [pc, #320]	; (8003234 <MPU_init+0x1c8>)
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	609a      	str	r2, [r3, #8]
	q[3] = 0.0f;
 80030f8:	4b4e      	ldr	r3, [pc, #312]	; (8003234 <MPU_init+0x1c8>)
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	60da      	str	r2, [r3, #12]
	eInt[0] = 0.0f;
 8003100:	4b4d      	ldr	r3, [pc, #308]	; (8003238 <MPU_init+0x1cc>)
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
	eInt[1] = 0.0f;
 8003108:	4b4b      	ldr	r3, [pc, #300]	; (8003238 <MPU_init+0x1cc>)
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	605a      	str	r2, [r3, #4]
	eInt[2] = 0.0f;
 8003110:	4b49      	ldr	r3, [pc, #292]	; (8003238 <MPU_init+0x1cc>)
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	609a      	str	r2, [r3, #8]

	// Initialize MPU9250 device
	// wake up device
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors 
 8003118:	2200      	movs	r2, #0
 800311a:	216b      	movs	r1, #107	; 0x6b
 800311c:	20d2      	movs	r0, #210	; 0xd2
 800311e:	f7ff fdfc 	bl	8002d1a <MPU_writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt  
 8003122:	2064      	movs	r0, #100	; 0x64
 8003124:	f002 fa88 	bl	8005638 <HAL_Delay>

	// get stable time source
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8003128:	2201      	movs	r2, #1
 800312a:	216b      	movs	r1, #107	; 0x6b
 800312c:	20d2      	movs	r0, #210	; 0xd2
 800312e:	f7ff fdf4 	bl	8002d1a <MPU_writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively; 
	// DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	HAL_Delay(100);
 8003132:	2064      	movs	r0, #100	; 0x64
 8003134:	f002 fa80 	bl	8005638 <HAL_Delay>
	//MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 8003138:	2203      	movs	r2, #3
 800313a:	211a      	movs	r1, #26
 800313c:	20d2      	movs	r0, #210	; 0xd2
 800313e:	f7ff fdec 	bl	8002d1a <MPU_writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	HAL_Delay(100);
 8003142:	2064      	movs	r0, #100	; 0x64
 8003144:	f002 fa78 	bl	8005638 <HAL_Delay>
	//MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);
 8003148:	2204      	movs	r2, #4
 800314a:	2119      	movs	r1, #25
 800314c:	20d2      	movs	r0, #210	; 0xd2
 800314e:	f7ff fde4 	bl	8002d1a <MPU_writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = MPU_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 8003152:	211b      	movs	r1, #27
 8003154:	20d2      	movs	r0, #210	; 0xd2
 8003156:	f7ff fdfc 	bl	8002d52 <MPU_readByte>
 800315a:	4603      	mov	r3, r0
 800315c:	71fb      	strb	r3, [r7, #7]
	// c = c & ~0xE0; // Clear self-test bits [7:5] 
	c = c & ~0x03; // Clear Fchoice bits [1:0]
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	f023 0303 	bic.w	r3, r3, #3
 8003164:	71fb      	strb	r3, [r7, #7]
	c = c & ~0x18; // Clear AFS bits [4:3]
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	f023 0318 	bic.w	r3, r3, #24
 800316c:	71fb      	strb	r3, [r7, #7]
	c = c | GGscale << 3; // Set full scale range for the gyro
 800316e:	4b26      	ldr	r3, [pc, #152]	; (8003208 <MPU_init+0x19c>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	b25a      	sxtb	r2, r3
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	4313      	orrs	r3, r2
 800317c:	b25b      	sxtb	r3, r3
 800317e:	71fb      	strb	r3, [r7, #7]
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	461a      	mov	r2, r3
 8003184:	211b      	movs	r1, #27
 8003186:	20d2      	movs	r0, #210	; 0xd2
 8003188:	f7ff fdc7 	bl	8002d1a <MPU_writeByte>

	// Set accelerometer full-scale range configuration
	c = MPU_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 800318c:	211c      	movs	r1, #28
 800318e:	20d2      	movs	r0, #210	; 0xd2
 8003190:	f7ff fddf 	bl	8002d52 <MPU_readByte>
 8003194:	4603      	mov	r3, r0
 8003196:	71fb      	strb	r3, [r7, #7]
	// c = c & ~0xE0; // Clear self-test bits [7:5] 
	c = c & ~0x18;  // Clear AFS bits [4:3]
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	f023 0318 	bic.w	r3, r3, #24
 800319e:	71fb      	strb	r3, [r7, #7]
	c = c | AAscale << 3; // Set full scale range for the accelerometer
 80031a0:	4b18      	ldr	r3, [pc, #96]	; (8003204 <MPU_init+0x198>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	b25a      	sxtb	r2, r3
 80031a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	b25b      	sxtb	r3, r3
 80031b0:	71fb      	strb	r3, [r7, #7]
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	461a      	mov	r2, r3
 80031b6:	211c      	movs	r1, #28
 80031b8:	20d2      	movs	r0, #210	; 0xd2
 80031ba:	f7ff fdae 	bl	8002d1a <MPU_writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = MPU_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 80031be:	211d      	movs	r1, #29
 80031c0:	20d2      	movs	r0, #210	; 0xd2
 80031c2:	f7ff fdc6 	bl	8002d52 <MPU_readByte>
 80031c6:	4603      	mov	r3, r0
 80031c8:	71fb      	strb	r3, [r7, #7]
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])  
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	f023 030f 	bic.w	r3, r3, #15
 80031d0:	71fb      	strb	r3, [r7, #7]
	c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	f043 0303 	orr.w	r3, r3, #3
 80031d8:	71fb      	strb	r3, [r7, #7]
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	461a      	mov	r2, r3
 80031de:	211d      	movs	r1, #29
 80031e0:	20d2      	movs	r0, #210	; 0xd2
 80031e2:	f7ff fd9a 	bl	8002d1a <MPU_writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips 
	// can join the I2C bus and all can be controlled by the Arduino as master
	MPU_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);    
 80031e6:	2222      	movs	r2, #34	; 0x22
 80031e8:	2137      	movs	r1, #55	; 0x37
 80031ea:	20d2      	movs	r0, #210	; 0xd2
 80031ec:	f7ff fd95 	bl	8002d1a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 80031f0:	2201      	movs	r2, #1
 80031f2:	2138      	movs	r1, #56	; 0x38
 80031f4:	20d2      	movs	r0, #210	; 0xd2
 80031f6:	f7ff fd90 	bl	8002d1a <MPU_writeByte>
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20002aa4 	.word	0x20002aa4
 8003208:	20002a6b 	.word	0x20002a6b
 800320c:	20002af4 	.word	0x20002af4
 8003210:	20002acc 	.word	0x20002acc
 8003214:	20002b84 	.word	0x20002b84
 8003218:	20002ad0 	.word	0x20002ad0
 800321c:	20002b1c 	.word	0x20002b1c
 8003220:	20002b14 	.word	0x20002b14
 8003224:	20002b58 	.word	0x20002b58
 8003228:	20002ab0 	.word	0x20002ab0
 800322c:	20002b60 	.word	0x20002b60
 8003230:	20002ae0 	.word	0x20002ae0
 8003234:	20002b70 	.word	0x20002b70
 8003238:	20002ac0 	.word	0x20002ac0

0800323c <AK8963_init>:
void AK8963_init(float * destination)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8003244:	2200      	movs	r2, #0
 8003246:	210a      	movs	r1, #10
 8003248:	2018      	movs	r0, #24
 800324a:	f7ff fd66 	bl	8002d1a <MPU_writeByte>
	HAL_Delay(10);
 800324e:	200a      	movs	r0, #10
 8003250:	f002 f9f2 	bl	8005638 <HAL_Delay>
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8003254:	220f      	movs	r2, #15
 8003256:	210a      	movs	r1, #10
 8003258:	2018      	movs	r0, #24
 800325a:	f7ff fd5e 	bl	8002d1a <MPU_writeByte>
	HAL_Delay(10);
 800325e:	200a      	movs	r0, #10
 8003260:	f002 f9ea 	bl	8005638 <HAL_Delay>
	MPU_readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8003264:	f107 030c 	add.w	r3, r7, #12
 8003268:	2203      	movs	r2, #3
 800326a:	2110      	movs	r1, #16
 800326c:	2018      	movs	r0, #24
 800326e:	f7ff fd8d 	bl	8002d8c <MPU_readBytes>
	destination[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8003272:	7b3b      	ldrb	r3, [r7, #12]
 8003274:	3b80      	subs	r3, #128	; 0x80
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800327e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003318 <AK8963_init+0xdc>
 8003282:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800328a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	edc3 7a00 	vstr	s15, [r3]
	destination[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8003294:	7b7b      	ldrb	r3, [r7, #13]
 8003296:	3b80      	subs	r3, #128	; 0x80
 8003298:	ee07 3a90 	vmov	s15, r3
 800329c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032a0:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8003318 <AK8963_init+0xdc>
 80032a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3304      	adds	r3, #4
 80032ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032b4:	edc3 7a00 	vstr	s15, [r3]
	destination[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 80032b8:	7bbb      	ldrb	r3, [r7, #14]
 80032ba:	3b80      	subs	r3, #128	; 0x80
 80032bc:	ee07 3a90 	vmov	s15, r3
 80032c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032c4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003318 <AK8963_init+0xdc>
 80032c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3308      	adds	r3, #8
 80032d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032d8:	edc3 7a00 	vstr	s15, [r3]
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 80032dc:	2200      	movs	r2, #0
 80032de:	210a      	movs	r1, #10
 80032e0:	2018      	movs	r0, #24
 80032e2:	f7ff fd1a 	bl	8002d1a <MPU_writeByte>
	HAL_Delay(10);
 80032e6:	200a      	movs	r0, #10
 80032e8:	f002 f9a6 	bl	8005638 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU_writeByte(AK8963_ADDRESS, AK8963_CNTL, MMscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <AK8963_init+0xe0>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	b25a      	sxtb	r2, r3
 80032f4:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <AK8963_init+0xe4>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	b25b      	sxtb	r3, r3
 80032fa:	4313      	orrs	r3, r2
 80032fc:	b25b      	sxtb	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	210a      	movs	r1, #10
 8003304:	2018      	movs	r0, #24
 8003306:	f7ff fd08 	bl	8002d1a <MPU_writeByte>
	HAL_Delay(10);
 800330a:	200a      	movs	r0, #10
 800330c:	f002 f994 	bl	8005638 <HAL_Delay>
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	43800000 	.word	0x43800000
 800331c:	20002af4 	.word	0x20002af4
 8003320:	20002acc 	.word	0x20002acc

08003324 <MPU_reset>:

void MPU_reset()
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
	// reset device
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8003328:	2280      	movs	r2, #128	; 0x80
 800332a:	216b      	movs	r1, #107	; 0x6b
 800332c:	20d2      	movs	r0, #210	; 0xd2
 800332e:	f7ff fcf4 	bl	8002d1a <MPU_writeByte>
	HAL_Delay(100);
 8003332:	2064      	movs	r0, #100	; 0x64
 8003334:	f002 f980 	bl	8005638 <HAL_Delay>
}
 8003338:	bf00      	nop
 800333a:	bd80      	pop	{r7, pc}

0800333c <MPU_calibrate>:

void MPU_calibrate(float* dest1, float* dest2)
{  
 800333c:	b580      	push	{r7, lr}
 800333e:	b098      	sub	sp, #96	; 0x60
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
	// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
	// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8003346:	2300      	movs	r3, #0
 8003348:	63bb      	str	r3, [r7, #56]	; 0x38
 800334a:	2300      	movs	r3, #0
 800334c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800334e:	2300      	movs	r3, #0
 8003350:	643b      	str	r3, [r7, #64]	; 0x40
 8003352:	2300      	movs	r3, #0
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003356:	2300      	movs	r3, #0
 8003358:	633b      	str	r3, [r7, #48]	; 0x30
 800335a:	2300      	movs	r3, #0
 800335c:	637b      	str	r3, [r7, #52]	; 0x34

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800335e:	2280      	movs	r2, #128	; 0x80
 8003360:	216b      	movs	r1, #107	; 0x6b
 8003362:	20d2      	movs	r0, #210	; 0xd2
 8003364:	f7ff fcd9 	bl	8002d1a <MPU_writeByte>
	HAL_Delay(100);  
 8003368:	2064      	movs	r0, #100	; 0x64
 800336a:	f002 f965 	bl	8005638 <HAL_Delay>

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  
 800336e:	2201      	movs	r2, #1
 8003370:	216b      	movs	r1, #107	; 0x6b
 8003372:	20d2      	movs	r0, #210	; 0xd2
 8003374:	f7ff fcd1 	bl	8002d1a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00); 
 8003378:	2200      	movs	r2, #0
 800337a:	216c      	movs	r1, #108	; 0x6c
 800337c:	20d2      	movs	r0, #210	; 0xd2
 800337e:	f7ff fccc 	bl	8002d1a <MPU_writeByte>
	HAL_Delay(200);
 8003382:	20c8      	movs	r0, #200	; 0xc8
 8003384:	f002 f958 	bl	8005638 <HAL_Delay>

	// Configure device for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8003388:	2200      	movs	r2, #0
 800338a:	2138      	movs	r1, #56	; 0x38
 800338c:	20d2      	movs	r0, #210	; 0xd2
 800338e:	f7ff fcc4 	bl	8002d1a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8003392:	2200      	movs	r2, #0
 8003394:	2123      	movs	r1, #35	; 0x23
 8003396:	20d2      	movs	r0, #210	; 0xd2
 8003398:	f7ff fcbf 	bl	8002d1a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 800339c:	2200      	movs	r2, #0
 800339e:	216b      	movs	r1, #107	; 0x6b
 80033a0:	20d2      	movs	r0, #210	; 0xd2
 80033a2:	f7ff fcba 	bl	8002d1a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 80033a6:	2200      	movs	r2, #0
 80033a8:	2124      	movs	r1, #36	; 0x24
 80033aa:	20d2      	movs	r0, #210	; 0xd2
 80033ac:	f7ff fcb5 	bl	8002d1a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 80033b0:	2200      	movs	r2, #0
 80033b2:	216a      	movs	r1, #106	; 0x6a
 80033b4:	20d2      	movs	r0, #210	; 0xd2
 80033b6:	f7ff fcb0 	bl	8002d1a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 80033ba:	220c      	movs	r2, #12
 80033bc:	216a      	movs	r1, #106	; 0x6a
 80033be:	20d2      	movs	r0, #210	; 0xd2
 80033c0:	f7ff fcab 	bl	8002d1a <MPU_writeByte>
	HAL_Delay(15);
 80033c4:	200f      	movs	r0, #15
 80033c6:	f002 f937 	bl	8005638 <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 80033ca:	2201      	movs	r2, #1
 80033cc:	211a      	movs	r1, #26
 80033ce:	20d2      	movs	r0, #210	; 0xd2
 80033d0:	f7ff fca3 	bl	8002d1a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 80033d4:	2200      	movs	r2, #0
 80033d6:	2119      	movs	r1, #25
 80033d8:	20d2      	movs	r0, #210	; 0xd2
 80033da:	f7ff fc9e 	bl	8002d1a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 80033de:	2200      	movs	r2, #0
 80033e0:	211b      	movs	r1, #27
 80033e2:	20d2      	movs	r0, #210	; 0xd2
 80033e4:	f7ff fc99 	bl	8002d1a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 80033e8:	2200      	movs	r2, #0
 80033ea:	211c      	movs	r1, #28
 80033ec:	20d2      	movs	r0, #210	; 0xd2
 80033ee:	f7ff fc94 	bl	8002d1a <MPU_writeByte>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 80033f2:	2383      	movs	r3, #131	; 0x83
 80033f4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 80033f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033fc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO  
 8003400:	2240      	movs	r2, #64	; 0x40
 8003402:	216a      	movs	r1, #106	; 0x6a
 8003404:	20d2      	movs	r0, #210	; 0xd2
 8003406:	f7ff fc88 	bl	8002d1a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 800340a:	2278      	movs	r2, #120	; 0x78
 800340c:	2123      	movs	r1, #35	; 0x23
 800340e:	20d2      	movs	r0, #210	; 0xd2
 8003410:	f7ff fc83 	bl	8002d1a <MPU_writeByte>
	HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8003414:	2028      	movs	r0, #40	; 0x28
 8003416:	f002 f90f 	bl	8005638 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 800341a:	2200      	movs	r2, #0
 800341c:	2123      	movs	r1, #35	; 0x23
 800341e:	20d2      	movs	r0, #210	; 0xd2
 8003420:	f7ff fc7b 	bl	8002d1a <MPU_writeByte>
	MPU_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8003424:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003428:	2202      	movs	r2, #2
 800342a:	2172      	movs	r1, #114	; 0x72
 800342c:	20d2      	movs	r0, #210	; 0xd2
 800342e:	f7ff fcad 	bl	8002d8c <MPU_readBytes>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8003432:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	b21a      	sxth	r2, r3
 800343a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800343e:	b21b      	sxth	r3, r3
 8003440:	4313      	orrs	r3, r2
 8003442:	b21b      	sxth	r3, r3
 8003444:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8003448:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800344c:	4ab0      	ldr	r2, [pc, #704]	; (8003710 <MPU_calibrate+0x3d4>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	08db      	lsrs	r3, r3, #3
 8003454:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	for (ii = 0; ii < packet_count; ii++)
 8003458:	2300      	movs	r3, #0
 800345a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800345e:	e071      	b.n	8003544 <MPU_calibrate+0x208>
	{
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8003460:	2300      	movs	r3, #0
 8003462:	82bb      	strh	r3, [r7, #20]
 8003464:	2300      	movs	r3, #0
 8003466:	82fb      	strh	r3, [r7, #22]
 8003468:	2300      	movs	r3, #0
 800346a:	833b      	strh	r3, [r7, #24]
 800346c:	2300      	movs	r3, #0
 800346e:	81bb      	strh	r3, [r7, #12]
 8003470:	2300      	movs	r3, #0
 8003472:	81fb      	strh	r3, [r7, #14]
 8003474:	2300      	movs	r3, #0
 8003476:	823b      	strh	r3, [r7, #16]
		MPU_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 8003478:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800347c:	220c      	movs	r2, #12
 800347e:	2174      	movs	r1, #116	; 0x74
 8003480:	20d2      	movs	r0, #210	; 0xd2
 8003482:	f7ff fc83 	bl	8002d8c <MPU_readBytes>
		accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8003486:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	b21a      	sxth	r2, r3
 800348e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003492:	b21b      	sxth	r3, r3
 8003494:	4313      	orrs	r3, r2
 8003496:	b21b      	sxth	r3, r3
 8003498:	82bb      	strh	r3, [r7, #20]
		accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 800349a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	b21a      	sxth	r2, r3
 80034a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034a6:	b21b      	sxth	r3, r3
 80034a8:	4313      	orrs	r3, r2
 80034aa:	b21b      	sxth	r3, r3
 80034ac:	82fb      	strh	r3, [r7, #22]
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;    
 80034ae:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	b21a      	sxth	r2, r3
 80034b6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80034ba:	b21b      	sxth	r3, r3
 80034bc:	4313      	orrs	r3, r2
 80034be:	b21b      	sxth	r3, r3
 80034c0:	833b      	strh	r3, [r7, #24]
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 80034c2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	b21a      	sxth	r2, r3
 80034ca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80034ce:	b21b      	sxth	r3, r3
 80034d0:	4313      	orrs	r3, r2
 80034d2:	b21b      	sxth	r3, r3
 80034d4:	81bb      	strh	r3, [r7, #12]
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 80034d6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80034da:	021b      	lsls	r3, r3, #8
 80034dc:	b21a      	sxth	r2, r3
 80034de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80034e2:	b21b      	sxth	r3, r3
 80034e4:	4313      	orrs	r3, r2
 80034e6:	b21b      	sxth	r3, r3
 80034e8:	81fb      	strh	r3, [r7, #14]
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 80034ea:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	b21a      	sxth	r2, r3
 80034f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80034f6:	b21b      	sxth	r3, r3
 80034f8:	4313      	orrs	r3, r2
 80034fa:	b21b      	sxth	r3, r3
 80034fc:	823b      	strh	r3, [r7, #16]

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 80034fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003500:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003504:	4413      	add	r3, r2
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c
		accel_bias[1] += (int32_t) accel_temp[1];
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800350e:	4413      	add	r3, r2
 8003510:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[2] += (int32_t) accel_temp[2];
 8003512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003514:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003518:	4413      	add	r3, r2
 800351a:	637b      	str	r3, [r7, #52]	; 0x34
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 800351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003522:	4413      	add	r3, r2
 8003524:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8003526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003528:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800352c:	4413      	add	r3, r2
 800352e:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8003530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003532:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003536:	4413      	add	r3, r2
 8003538:	643b      	str	r3, [r7, #64]	; 0x40
	for (ii = 0; ii < packet_count; ii++)
 800353a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800353e:	3301      	adds	r3, #1
 8003540:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003544:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003548:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800354c:	429a      	cmp	r2, r3
 800354e:	d387      	bcc.n	8003460 <MPU_calibrate+0x124>
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8003550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003552:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003556:	fb92 f3f3 	sdiv	r3, r2, r3
 800355a:	62fb      	str	r3, [r7, #44]	; 0x2c
	accel_bias[1] /= (int32_t) packet_count;
 800355c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003562:	fb92 f3f3 	sdiv	r3, r2, r3
 8003566:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[2] /= (int32_t) packet_count;
 8003568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800356a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800356e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003572:	637b      	str	r3, [r7, #52]	; 0x34
	gyro_bias[0]  /= (int32_t) packet_count;
 8003574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003576:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800357a:	fb92 f3f3 	sdiv	r3, r2, r3
 800357e:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[1]  /= (int32_t) packet_count;
 8003580:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003582:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003586:	fb92 f3f3 	sdiv	r3, r2, r3
 800358a:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[2]  /= (int32_t) packet_count;
 800358c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800358e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003592:	fb92 f3f3 	sdiv	r3, r2, r3
 8003596:	643b      	str	r3, [r7, #64]	; 0x40

	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8003598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359a:	2b00      	cmp	r3, #0
 800359c:	dd05      	ble.n	80035aa <MPU_calibrate+0x26e>
 800359e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035a0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
 80035a8:	e004      	b.n	80035b4 <MPU_calibrate+0x278>
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 80035aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ac:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80035b0:	4413      	add	r3, r2
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80035b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b6:	425b      	negs	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	da00      	bge.n	80035be <MPU_calibrate+0x282>
 80035bc:	3303      	adds	r3, #3
 80035be:	109b      	asrs	r3, r3, #2
 80035c0:	121b      	asrs	r3, r3, #8
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80035c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ca:	425b      	negs	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	da00      	bge.n	80035d2 <MPU_calibrate+0x296>
 80035d0:	3303      	adds	r3, #3
 80035d2:	109b      	asrs	r3, r3, #2
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 80035da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035dc:	425b      	negs	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	da00      	bge.n	80035e4 <MPU_calibrate+0x2a8>
 80035e2:	3303      	adds	r3, #3
 80035e4:	109b      	asrs	r3, r3, #2
 80035e6:	121b      	asrs	r3, r3, #8
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
 80035ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f0:	425b      	negs	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	da00      	bge.n	80035f8 <MPU_calibrate+0x2bc>
 80035f6:	3303      	adds	r3, #3
 80035f8:	109b      	asrs	r3, r3, #2
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8003600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003602:	425b      	negs	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	da00      	bge.n	800360a <MPU_calibrate+0x2ce>
 8003608:	3303      	adds	r3, #3
 800360a:	109b      	asrs	r3, r3, #2
 800360c:	121b      	asrs	r3, r3, #8
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8003614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003616:	425b      	negs	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	da00      	bge.n	800361e <MPU_calibrate+0x2e2>
 800361c:	3303      	adds	r3, #3
 800361e:	109b      	asrs	r3, r3, #2
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	MPU_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
	MPU_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
	MPU_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
	MPU_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
	*/
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8003626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003628:	ee07 3a90 	vmov	s15, r3
 800362c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003630:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003634:	ee07 3a90 	vmov	s15, r3
 8003638:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800363c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8003646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003648:	ee07 3a90 	vmov	s15, r3
 800364c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003650:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003654:	ee07 3a90 	vmov	s15, r3
 8003658:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3304      	adds	r3, #4
 8003660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003664:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8003668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003672:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3308      	adds	r3, #8
 8003682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003686:	edc3 7a00 	vstr	s15, [r3]
	// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 800368a:	2300      	movs	r3, #0
 800368c:	623b      	str	r3, [r7, #32]
 800368e:	2300      	movs	r3, #0
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
 8003692:	2300      	movs	r3, #0
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
	MPU_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 8003696:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800369a:	2202      	movs	r2, #2
 800369c:	2177      	movs	r1, #119	; 0x77
 800369e:	20d2      	movs	r0, #210	; 0xd2
 80036a0:	f7ff fb74 	bl	8002d8c <MPU_readBytes>
	accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 80036a4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	b21b      	sxth	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80036b2:	4313      	orrs	r3, r2
 80036b4:	623b      	str	r3, [r7, #32]
	MPU_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 80036b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80036ba:	2202      	movs	r2, #2
 80036bc:	217a      	movs	r1, #122	; 0x7a
 80036be:	20d2      	movs	r0, #210	; 0xd2
 80036c0:	f7ff fb64 	bl	8002d8c <MPU_readBytes>
	accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 80036c4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	b21b      	sxth	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80036d2:	4313      	orrs	r3, r2
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
	MPU_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 80036d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80036da:	2202      	movs	r2, #2
 80036dc:	217d      	movs	r1, #125	; 0x7d
 80036de:	20d2      	movs	r0, #210	; 0xd2
 80036e0:	f7ff fb54 	bl	8002d8c <MPU_readBytes>
	accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 80036e4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	b21b      	sxth	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80036f2:	4313      	orrs	r3, r2
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 80036f6:	2301      	movs	r3, #1
 80036f8:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 80036fa:	2300      	movs	r3, #0
 80036fc:	773b      	strb	r3, [r7, #28]
 80036fe:	2300      	movs	r3, #0
 8003700:	777b      	strb	r3, [r7, #29]
 8003702:	2300      	movs	r3, #0
 8003704:	77bb      	strb	r3, [r7, #30]

	for(ii = 0; ii < 3; ii++)
 8003706:	2300      	movs	r3, #0
 8003708:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800370c:	e01c      	b.n	8003748 <MPU_calibrate+0x40c>
 800370e:	bf00      	nop
 8003710:	aaaaaaab 	.word	0xaaaaaaab
	{
		if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8003714:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800371e:	4413      	add	r3, r2
 8003720:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003724:	461a      	mov	r2, r3
 8003726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003728:	4013      	ands	r3, r2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d007      	beq.n	800373e <MPU_calibrate+0x402>
 800372e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003732:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003736:	4413      	add	r3, r2
 8003738:	2201      	movs	r2, #1
 800373a:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(ii = 0; ii < 3; ii++)
 800373e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003742:	3301      	adds	r3, #1
 8003744:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003748:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800374c:	2b02      	cmp	r3, #2
 800374e:	d9e1      	bls.n	8003714 <MPU_calibrate+0x3d8>
	}

	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8003750:	6a3a      	ldr	r2, [r7, #32]
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	2b00      	cmp	r3, #0
 8003756:	da00      	bge.n	800375a <MPU_calibrate+0x41e>
 8003758:	3307      	adds	r3, #7
 800375a:	10db      	asrs	r3, r3, #3
 800375c:	425b      	negs	r3, r3
 800375e:	4413      	add	r3, r2
 8003760:	623b      	str	r3, [r7, #32]
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8003762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	2b00      	cmp	r3, #0
 8003768:	da00      	bge.n	800376c <MPU_calibrate+0x430>
 800376a:	3307      	adds	r3, #7
 800376c:	10db      	asrs	r3, r3, #3
 800376e:	425b      	negs	r3, r3
 8003770:	4413      	add	r3, r2
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[2] -= (accel_bias[2]/8);
 8003774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003778:	2b00      	cmp	r3, #0
 800377a:	da00      	bge.n	800377e <MPU_calibrate+0x442>
 800377c:	3307      	adds	r3, #7
 800377e:	10db      	asrs	r3, r3, #3
 8003780:	425b      	negs	r3, r3
 8003782:	4413      	add	r3, r2
 8003784:	62bb      	str	r3, [r7, #40]	; 0x28

	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	121b      	asrs	r3, r3, #8
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	data[1] = (accel_bias_reg[0])      & 0xFF;
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8003798:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800379c:	7f3b      	ldrb	r3, [r7, #28]
 800379e:	4313      	orrs	r3, r2
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	121b      	asrs	r3, r3, #8
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	data[3] = (accel_bias_reg[1])      & 0xFF;
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80037b8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80037bc:	7f7b      	ldrb	r3, [r7, #29]
 80037be:	4313      	orrs	r3, r2
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	121b      	asrs	r3, r3, #8
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	data[5] = (accel_bias_reg[2])      & 0xFF;
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80037d8:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80037dc:	7fbb      	ldrb	r3, [r7, #30]
 80037de:	4313      	orrs	r3, r2
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	MPU_writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
	MPU_writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
	MPU_writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
	*/
	// Output scaled accelerometer biases for manual subtraction in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity; 
 80037e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e8:	ee07 3a90 	vmov	s15, r3
 80037ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037f0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80037f4:	ee07 3a90 	vmov	s15, r3
 80037f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	edc3 7a00 	vstr	s15, [r3]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	ee07 3a90 	vmov	s15, r3
 800380c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003810:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003814:	ee07 3a90 	vmov	s15, r3
 8003818:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	3304      	adds	r3, #4
 8003820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003824:	edc3 7a00 	vstr	s15, [r3]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8003828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003832:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	3308      	adds	r3, #8
 8003842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003846:	edc3 7a00 	vstr	s15, [r3]
}
 800384a:	bf00      	nop
 800384c:	3760      	adds	r7, #96	; 0x60
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	0000      	movs	r0, r0
	...

08003858 <MPU_SelfTest>:
void MPU_SelfTest(float* destination)
{
 8003858:	b5b0      	push	{r4, r5, r7, lr}
 800385a:	b09e      	sub	sp, #120	; 0x78
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	// Accelerometer and gyroscope self test; check calibration wrt factory settings
	 // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
	uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
 8003860:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	809a      	strh	r2, [r3, #4]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 800386a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	605a      	str	r2, [r3, #4]
 8003874:	609a      	str	r2, [r3, #8]
 8003876:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	605a      	str	r2, [r3, #4]
 8003880:	609a      	str	r2, [r3, #8]
 8003882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	605a      	str	r2, [r3, #4]
 800388c:	609a      	str	r2, [r3, #8]
 800388e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 80038a0:	2200      	movs	r2, #0
 80038a2:	2119      	movs	r1, #25
 80038a4:	20d2      	movs	r0, #210	; 0xd2
 80038a6:	f7ff fa38 	bl	8002d1a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80038aa:	2202      	movs	r2, #2
 80038ac:	211a      	movs	r1, #26
 80038ae:	20d2      	movs	r0, #210	; 0xd2
 80038b0:	f7ff fa33 	bl	8002d1a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, FS<<3); // Set full scale range for the gyro to 250 dps
 80038b4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	211b      	movs	r1, #27
 80038c0:	20d2      	movs	r0, #210	; 0xd2
 80038c2:	f7ff fa2a 	bl	8002d1a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80038c6:	2202      	movs	r2, #2
 80038c8:	211d      	movs	r1, #29
 80038ca:	20d2      	movs	r0, #210	; 0xd2
 80038cc:	f7ff fa25 	bl	8002d1a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, FS<<3); // Set full scale range for the accelerometer to 2 g
 80038d0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	211c      	movs	r1, #28
 80038dc:	20d2      	movs	r0, #210	; 0xd2
 80038de:	f7ff fa1c 	bl	8002d1a <MPU_writeByte>

	for( int ii = 0; ii < 200; ii++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	677b      	str	r3, [r7, #116]	; 0x74
 80038e6:	e058      	b.n	800399a <MPU_SelfTest+0x142>
	{ // get average current values of gyro and acclerometer

		MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 80038e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80038ec:	2206      	movs	r2, #6
 80038ee:	213b      	movs	r1, #59	; 0x3b
 80038f0:	20d2      	movs	r0, #210	; 0xd2
 80038f2:	f7ff fa4b 	bl	8002d8c <MPU_readBytes>
		aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80038f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f8:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80038fc:	0212      	lsls	r2, r2, #8
 80038fe:	b211      	sxth	r1, r2
 8003900:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8003904:	b212      	sxth	r2, r2
 8003906:	430a      	orrs	r2, r1
 8003908:	b212      	sxth	r2, r2
 800390a:	4413      	add	r3, r2
 800390c:	63fb      	str	r3, [r7, #60]	; 0x3c
		aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 800390e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003910:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8003914:	0212      	lsls	r2, r2, #8
 8003916:	b211      	sxth	r1, r2
 8003918:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800391c:	b212      	sxth	r2, r2
 800391e:	430a      	orrs	r2, r1
 8003920:	b212      	sxth	r2, r2
 8003922:	4413      	add	r3, r2
 8003924:	643b      	str	r3, [r7, #64]	; 0x40
		aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8003926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003928:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800392c:	0212      	lsls	r2, r2, #8
 800392e:	b211      	sxth	r1, r2
 8003930:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8003934:	b212      	sxth	r2, r2
 8003936:	430a      	orrs	r2, r1
 8003938:	b212      	sxth	r2, r2
 800393a:	4413      	add	r3, r2
 800393c:	647b      	str	r3, [r7, #68]	; 0x44

		MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 800393e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003942:	2206      	movs	r2, #6
 8003944:	2143      	movs	r1, #67	; 0x43
 8003946:	20d2      	movs	r0, #210	; 0xd2
 8003948:	f7ff fa20 	bl	8002d8c <MPU_readBytes>
		gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 800394c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800394e:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8003952:	0212      	lsls	r2, r2, #8
 8003954:	b211      	sxth	r1, r2
 8003956:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800395a:	b212      	sxth	r2, r2
 800395c:	430a      	orrs	r2, r1
 800395e:	b212      	sxth	r2, r2
 8003960:	4413      	add	r3, r2
 8003962:	64bb      	str	r3, [r7, #72]	; 0x48
		gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8003964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003966:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800396a:	0212      	lsls	r2, r2, #8
 800396c:	b211      	sxth	r1, r2
 800396e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8003972:	b212      	sxth	r2, r2
 8003974:	430a      	orrs	r2, r1
 8003976:	b212      	sxth	r2, r2
 8003978:	4413      	add	r3, r2
 800397a:	64fb      	str	r3, [r7, #76]	; 0x4c
		gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 800397c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800397e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8003982:	0212      	lsls	r2, r2, #8
 8003984:	b211      	sxth	r1, r2
 8003986:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800398a:	b212      	sxth	r2, r2
 800398c:	430a      	orrs	r2, r1
 800398e:	b212      	sxth	r2, r2
 8003990:	4413      	add	r3, r2
 8003992:	653b      	str	r3, [r7, #80]	; 0x50
	for( int ii = 0; ii < 200; ii++)
 8003994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003996:	3301      	adds	r3, #1
 8003998:	677b      	str	r3, [r7, #116]	; 0x74
 800399a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800399c:	2bc7      	cmp	r3, #199	; 0xc7
 800399e:	dda3      	ble.n	80038e8 <MPU_SelfTest+0x90>
	}

	for (int ii =0; ii < 3; ii++)
 80039a0:	2300      	movs	r3, #0
 80039a2:	673b      	str	r3, [r7, #112]	; 0x70
 80039a4:	e02a      	b.n	80039fc <MPU_SelfTest+0x1a4>
	{ // Get average of 200 values and store as average current readings
		aAvg[ii] /= 200;
 80039a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80039ae:	4413      	add	r3, r2
 80039b0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80039b4:	4a4a      	ldr	r2, [pc, #296]	; (8003ae0 <MPU_SelfTest+0x288>)
 80039b6:	fb82 1203 	smull	r1, r2, r2, r3
 80039ba:	1192      	asrs	r2, r2, #6
 80039bc:	17db      	asrs	r3, r3, #31
 80039be:	1ad2      	subs	r2, r2, r3
 80039c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80039c8:	440b      	add	r3, r1
 80039ca:	f843 2c3c 	str.w	r2, [r3, #-60]
		gAvg[ii] /= 200;
 80039ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80039d6:	4413      	add	r3, r2
 80039d8:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80039dc:	4a40      	ldr	r2, [pc, #256]	; (8003ae0 <MPU_SelfTest+0x288>)
 80039de:	fb82 1203 	smull	r1, r2, r2, r3
 80039e2:	1192      	asrs	r2, r2, #6
 80039e4:	17db      	asrs	r3, r3, #31
 80039e6:	1ad2      	subs	r2, r2, r3
 80039e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80039f0:	440b      	add	r3, r1
 80039f2:	f843 2c30 	str.w	r2, [r3, #-48]
	for (int ii =0; ii < 3; ii++)
 80039f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039f8:	3301      	adds	r3, #1
 80039fa:	673b      	str	r3, [r7, #112]	; 0x70
 80039fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	ddd1      	ble.n	80039a6 <MPU_SelfTest+0x14e>
	}

	// Configure the accelerometer for self-test
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 8003a02:	22e0      	movs	r2, #224	; 0xe0
 8003a04:	211c      	movs	r1, #28
 8003a06:	20d2      	movs	r0, #210	; 0xd2
 8003a08:	f7ff f987 	bl	8002d1a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8003a0c:	22e0      	movs	r2, #224	; 0xe0
 8003a0e:	211b      	movs	r1, #27
 8003a10:	20d2      	movs	r0, #210	; 0xd2
 8003a12:	f7ff f982 	bl	8002d1a <MPU_writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 8003a16:	2019      	movs	r0, #25
 8003a18:	f001 fe0e 	bl	8005638 <HAL_Delay>

	for( int ii = 0; ii < 200; ii++)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a20:	e058      	b.n	8003ad4 <MPU_SelfTest+0x27c>
	{ // get average self-test values of gyro and acclerometer

		MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 8003a22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003a26:	2206      	movs	r2, #6
 8003a28:	213b      	movs	r1, #59	; 0x3b
 8003a2a:	20d2      	movs	r0, #210	; 0xd2
 8003a2c:	f7ff f9ae 	bl	8002d8c <MPU_readBytes>
		aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8003a36:	0212      	lsls	r2, r2, #8
 8003a38:	b211      	sxth	r1, r2
 8003a3a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8003a3e:	b212      	sxth	r2, r2
 8003a40:	430a      	orrs	r2, r1
 8003a42:	b212      	sxth	r2, r2
 8003a44:	4413      	add	r3, r2
 8003a46:	633b      	str	r3, [r7, #48]	; 0x30
		aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8003a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8003a4e:	0212      	lsls	r2, r2, #8
 8003a50:	b211      	sxth	r1, r2
 8003a52:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8003a56:	b212      	sxth	r2, r2
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	b212      	sxth	r2, r2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	637b      	str	r3, [r7, #52]	; 0x34
		aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8003a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a62:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8003a66:	0212      	lsls	r2, r2, #8
 8003a68:	b211      	sxth	r1, r2
 8003a6a:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8003a6e:	b212      	sxth	r2, r2
 8003a70:	430a      	orrs	r2, r1
 8003a72:	b212      	sxth	r2, r2
 8003a74:	4413      	add	r3, r2
 8003a76:	63bb      	str	r3, [r7, #56]	; 0x38

		MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 8003a78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003a7c:	2206      	movs	r2, #6
 8003a7e:	2143      	movs	r1, #67	; 0x43
 8003a80:	20d2      	movs	r0, #210	; 0xd2
 8003a82:	f7ff f983 	bl	8002d8c <MPU_readBytes>
		gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8003a8c:	0212      	lsls	r2, r2, #8
 8003a8e:	b211      	sxth	r1, r2
 8003a90:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8003a94:	b212      	sxth	r2, r2
 8003a96:	430a      	orrs	r2, r1
 8003a98:	b212      	sxth	r2, r2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
		gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8003aa4:	0212      	lsls	r2, r2, #8
 8003aa6:	b211      	sxth	r1, r2
 8003aa8:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8003aac:	b212      	sxth	r2, r2
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	b212      	sxth	r2, r2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28
		gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8003ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8003abc:	0212      	lsls	r2, r2, #8
 8003abe:	b211      	sxth	r1, r2
 8003ac0:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8003ac4:	b212      	sxth	r2, r2
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	b212      	sxth	r2, r2
 8003aca:	4413      	add	r3, r2
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for( int ii = 0; ii < 200; ii++)
 8003ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad6:	2bc7      	cmp	r3, #199	; 0xc7
 8003ad8:	dda3      	ble.n	8003a22 <MPU_SelfTest+0x1ca>
	}

	for (int ii =0; ii < 3; ii++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ade:	e02c      	b.n	8003b3a <MPU_SelfTest+0x2e2>
 8003ae0:	51eb851f 	.word	0x51eb851f
	{ // Get average of 200 values and store as average self-test readings
		aSTAvg[ii] /= 200;
 8003ae4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003aec:	4413      	add	r3, r2
 8003aee:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8003af2:	4add      	ldr	r2, [pc, #884]	; (8003e68 <MPU_SelfTest+0x610>)
 8003af4:	fb82 1203 	smull	r1, r2, r2, r3
 8003af8:	1192      	asrs	r2, r2, #6
 8003afa:	17db      	asrs	r3, r3, #31
 8003afc:	1ad2      	subs	r2, r2, r3
 8003afe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003b06:	440b      	add	r3, r1
 8003b08:	f843 2c48 	str.w	r2, [r3, #-72]
		gSTAvg[ii] /= 200;
 8003b0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b14:	4413      	add	r3, r2
 8003b16:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003b1a:	4ad3      	ldr	r2, [pc, #844]	; (8003e68 <MPU_SelfTest+0x610>)
 8003b1c:	fb82 1203 	smull	r1, r2, r2, r3
 8003b20:	1192      	asrs	r2, r2, #6
 8003b22:	17db      	asrs	r3, r3, #31
 8003b24:	1ad2      	subs	r2, r2, r3
 8003b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003b2e:	440b      	add	r3, r1
 8003b30:	f843 2c54 	str.w	r2, [r3, #-84]
	for (int ii =0; ii < 3; ii++)
 8003b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b36:	3301      	adds	r3, #1
 8003b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	ddd1      	ble.n	8003ae4 <MPU_SelfTest+0x28c>
	}

	// Configure the gyro and accelerometer for normal operation
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
 8003b40:	2200      	movs	r2, #0
 8003b42:	211c      	movs	r1, #28
 8003b44:	20d2      	movs	r0, #210	; 0xd2
 8003b46:	f7ff f8e8 	bl	8002d1a <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	211b      	movs	r1, #27
 8003b4e:	20d2      	movs	r0, #210	; 0xd2
 8003b50:	f7ff f8e3 	bl	8002d1a <MPU_writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 8003b54:	2019      	movs	r0, #25
 8003b56:	f001 fd6f 	bl	8005638 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
 8003b5a:	210d      	movs	r1, #13
 8003b5c:	20d2      	movs	r0, #210	; 0xd2
 8003b5e:	f7ff f8f8 	bl	8002d52 <MPU_readByte>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	selfTest[1] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
 8003b68:	210e      	movs	r1, #14
 8003b6a:	20d2      	movs	r0, #210	; 0xd2
 8003b6c:	f7ff f8f1 	bl	8002d52 <MPU_readByte>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	selfTest[2] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
 8003b76:	210f      	movs	r1, #15
 8003b78:	20d2      	movs	r0, #210	; 0xd2
 8003b7a:	f7ff f8ea 	bl	8002d52 <MPU_readByte>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	selfTest[3] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO); // X-axis gyro self-test results
 8003b84:	2100      	movs	r1, #0
 8003b86:	20d2      	movs	r0, #210	; 0xd2
 8003b88:	f7ff f8e3 	bl	8002d52 <MPU_readByte>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	selfTest[4] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
 8003b92:	2101      	movs	r1, #1
 8003b94:	20d2      	movs	r0, #210	; 0xd2
 8003b96:	f7ff f8dc 	bl	8002d52 <MPU_readByte>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	selfTest[5] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO); // Z-axis gyro self-test results
 8003ba0:	2102      	movs	r1, #2
 8003ba2:	20d2      	movs	r0, #210	; 0xd2
 8003ba4:	f7ff f8d5 	bl	8002d52 <MPU_readByte>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8003bae:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8003bb2:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bc2:	ee17 0a90 	vmov	r0, s15
 8003bc6:	f7fc fccf 	bl	8000568 <__aeabi_f2d>
 8003bca:	4604      	mov	r4, r0
 8003bcc:	460d      	mov	r5, r1
 8003bce:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bda:	ee17 0a90 	vmov	r0, s15
 8003bde:	f7fc fcc3 	bl	8000568 <__aeabi_f2d>
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	4ba1      	ldr	r3, [pc, #644]	; (8003e6c <MPU_SelfTest+0x614>)
 8003be8:	f7fc fb5e 	bl	80002a8 <__aeabi_dsub>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	ec43 2b17 	vmov	d7, r2, r3
 8003bf4:	eeb0 1a47 	vmov.f32	s2, s14
 8003bf8:	eef0 1a67 	vmov.f32	s3, s15
 8003bfc:	ed9f 0b98 	vldr	d0, [pc, #608]	; 8003e60 <MPU_SelfTest+0x608>
 8003c00:	f014 fdde 	bl	80187c0 <pow>
 8003c04:	ec53 2b10 	vmov	r2, r3, d0
 8003c08:	4620      	mov	r0, r4
 8003c0a:	4629      	mov	r1, r5
 8003c0c:	f7fc fd04 	bl	8000618 <__aeabi_dmul>
 8003c10:	4603      	mov	r3, r0
 8003c12:	460c      	mov	r4, r1
 8003c14:	4618      	mov	r0, r3
 8003c16:	4621      	mov	r1, r4
 8003c18:	f7fc fff6 	bl	8000c08 <__aeabi_d2f>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	60fb      	str	r3, [r7, #12]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 8003c20:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8003c24:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	ee07 3a90 	vmov	s15, r3
 8003c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c34:	ee17 0a90 	vmov	r0, s15
 8003c38:	f7fc fc96 	bl	8000568 <__aeabi_f2d>
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	460d      	mov	r5, r1
 8003c40:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003c44:	ee07 3a90 	vmov	s15, r3
 8003c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4c:	ee17 0a90 	vmov	r0, s15
 8003c50:	f7fc fc8a 	bl	8000568 <__aeabi_f2d>
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	4b84      	ldr	r3, [pc, #528]	; (8003e6c <MPU_SelfTest+0x614>)
 8003c5a:	f7fc fb25 	bl	80002a8 <__aeabi_dsub>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	ec43 2b17 	vmov	d7, r2, r3
 8003c66:	eeb0 1a47 	vmov.f32	s2, s14
 8003c6a:	eef0 1a67 	vmov.f32	s3, s15
 8003c6e:	ed9f 0b7c 	vldr	d0, [pc, #496]	; 8003e60 <MPU_SelfTest+0x608>
 8003c72:	f014 fda5 	bl	80187c0 <pow>
 8003c76:	ec53 2b10 	vmov	r2, r3, d0
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	4629      	mov	r1, r5
 8003c7e:	f7fc fccb 	bl	8000618 <__aeabi_dmul>
 8003c82:	4603      	mov	r3, r0
 8003c84:	460c      	mov	r4, r1
 8003c86:	4618      	mov	r0, r3
 8003c88:	4621      	mov	r1, r4
 8003c8a:	f7fc ffbd 	bl	8000c08 <__aeabi_d2f>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	613b      	str	r3, [r7, #16]
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8003c92:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8003c96:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ca6:	ee17 0a90 	vmov	r0, s15
 8003caa:	f7fc fc5d 	bl	8000568 <__aeabi_f2d>
 8003cae:	4604      	mov	r4, r0
 8003cb0:	460d      	mov	r5, r1
 8003cb2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003cb6:	ee07 3a90 	vmov	s15, r3
 8003cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cbe:	ee17 0a90 	vmov	r0, s15
 8003cc2:	f7fc fc51 	bl	8000568 <__aeabi_f2d>
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	4b68      	ldr	r3, [pc, #416]	; (8003e6c <MPU_SelfTest+0x614>)
 8003ccc:	f7fc faec 	bl	80002a8 <__aeabi_dsub>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	ec43 2b17 	vmov	d7, r2, r3
 8003cd8:	eeb0 1a47 	vmov.f32	s2, s14
 8003cdc:	eef0 1a67 	vmov.f32	s3, s15
 8003ce0:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8003e60 <MPU_SelfTest+0x608>
 8003ce4:	f014 fd6c 	bl	80187c0 <pow>
 8003ce8:	ec53 2b10 	vmov	r2, r3, d0
 8003cec:	4620      	mov	r0, r4
 8003cee:	4629      	mov	r1, r5
 8003cf0:	f7fc fc92 	bl	8000618 <__aeabi_dmul>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	f7fc ff84 	bl	8000c08 <__aeabi_d2f>
 8003d00:	4603      	mov	r3, r0
 8003d02:	617b      	str	r3, [r7, #20]
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 8003d04:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8003d08:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	ee07 3a90 	vmov	s15, r3
 8003d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d18:	ee17 0a90 	vmov	r0, s15
 8003d1c:	f7fc fc24 	bl	8000568 <__aeabi_f2d>
 8003d20:	4604      	mov	r4, r0
 8003d22:	460d      	mov	r5, r1
 8003d24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d28:	ee07 3a90 	vmov	s15, r3
 8003d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d30:	ee17 0a90 	vmov	r0, s15
 8003d34:	f7fc fc18 	bl	8000568 <__aeabi_f2d>
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	4b4b      	ldr	r3, [pc, #300]	; (8003e6c <MPU_SelfTest+0x614>)
 8003d3e:	f7fc fab3 	bl	80002a8 <__aeabi_dsub>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	ec43 2b17 	vmov	d7, r2, r3
 8003d4a:	eeb0 1a47 	vmov.f32	s2, s14
 8003d4e:	eef0 1a67 	vmov.f32	s3, s15
 8003d52:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8003e60 <MPU_SelfTest+0x608>
 8003d56:	f014 fd33 	bl	80187c0 <pow>
 8003d5a:	ec53 2b10 	vmov	r2, r3, d0
 8003d5e:	4620      	mov	r0, r4
 8003d60:	4629      	mov	r1, r5
 8003d62:	f7fc fc59 	bl	8000618 <__aeabi_dmul>
 8003d66:	4603      	mov	r3, r0
 8003d68:	460c      	mov	r4, r1
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	f7fc ff4b 	bl	8000c08 <__aeabi_d2f>
 8003d72:	4603      	mov	r3, r0
 8003d74:	61bb      	str	r3, [r7, #24]
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8003d76:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8003d7a:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8a:	ee17 0a90 	vmov	r0, s15
 8003d8e:	f7fc fbeb 	bl	8000568 <__aeabi_f2d>
 8003d92:	4604      	mov	r4, r0
 8003d94:	460d      	mov	r5, r1
 8003d96:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da2:	ee17 0a90 	vmov	r0, s15
 8003da6:	f7fc fbdf 	bl	8000568 <__aeabi_f2d>
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	4b2f      	ldr	r3, [pc, #188]	; (8003e6c <MPU_SelfTest+0x614>)
 8003db0:	f7fc fa7a 	bl	80002a8 <__aeabi_dsub>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	ec43 2b17 	vmov	d7, r2, r3
 8003dbc:	eeb0 1a47 	vmov.f32	s2, s14
 8003dc0:	eef0 1a67 	vmov.f32	s3, s15
 8003dc4:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8003e60 <MPU_SelfTest+0x608>
 8003dc8:	f014 fcfa 	bl	80187c0 <pow>
 8003dcc:	ec53 2b10 	vmov	r2, r3, d0
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	f7fc fc20 	bl	8000618 <__aeabi_dmul>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	460c      	mov	r4, r1
 8003ddc:	4618      	mov	r0, r3
 8003dde:	4621      	mov	r1, r4
 8003de0:	f7fc ff12 	bl	8000c08 <__aeabi_d2f>
 8003de4:	4603      	mov	r3, r0
 8003de6:	61fb      	str	r3, [r7, #28]
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8003de8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8003dec:	f640 223c 	movw	r2, #2620	; 0xa3c
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	ee07 3a90 	vmov	s15, r3
 8003df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dfc:	ee17 0a90 	vmov	r0, s15
 8003e00:	f7fc fbb2 	bl	8000568 <__aeabi_f2d>
 8003e04:	4604      	mov	r4, r0
 8003e06:	460d      	mov	r5, r1
 8003e08:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e14:	ee17 0a90 	vmov	r0, s15
 8003e18:	f7fc fba6 	bl	8000568 <__aeabi_f2d>
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <MPU_SelfTest+0x614>)
 8003e22:	f7fc fa41 	bl	80002a8 <__aeabi_dsub>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	ec43 2b17 	vmov	d7, r2, r3
 8003e2e:	eeb0 1a47 	vmov.f32	s2, s14
 8003e32:	eef0 1a67 	vmov.f32	s3, s15
 8003e36:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8003e60 <MPU_SelfTest+0x608>
 8003e3a:	f014 fcc1 	bl	80187c0 <pow>
 8003e3e:	ec53 2b10 	vmov	r2, r3, d0
 8003e42:	4620      	mov	r0, r4
 8003e44:	4629      	mov	r1, r5
 8003e46:	f7fc fbe7 	bl	8000618 <__aeabi_dmul>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	4618      	mov	r0, r3
 8003e50:	4621      	mov	r1, r4
 8003e52:	f7fc fed9 	bl	8000c08 <__aeabi_d2f>
 8003e56:	4603      	mov	r3, r0
 8003e58:	623b      	str	r3, [r7, #32]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e5e:	e096      	b.n	8003f8e <MPU_SelfTest+0x736>
 8003e60:	c28f5c29 	.word	0xc28f5c29
 8003e64:	3ff028f5 	.word	0x3ff028f5
 8003e68:	51eb851f 	.word	0x51eb851f
 8003e6c:	3ff00000 	.word	0x3ff00000
	{
		destination[i] = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.; // Report percent differences
 8003e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003e78:	4413      	add	r3, r2
 8003e7a:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8003e7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003e86:	440b      	add	r3, r1
 8003e88:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e96:	ee17 0a90 	vmov	r0, s15
 8003e9a:	f7fc fb65 	bl	8000568 <__aeabi_f2d>
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	4b3f      	ldr	r3, [pc, #252]	; (8003fa0 <MPU_SelfTest+0x748>)
 8003ea4:	f7fc fbb8 	bl	8000618 <__aeabi_dmul>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	460c      	mov	r4, r1
 8003eac:	4625      	mov	r5, r4
 8003eae:	461c      	mov	r4, r3
 8003eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003eb8:	4413      	add	r3, r2
 8003eba:	3b6c      	subs	r3, #108	; 0x6c
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fc fb52 	bl	8000568 <__aeabi_f2d>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4620      	mov	r0, r4
 8003eca:	4629      	mov	r1, r5
 8003ecc:	f7fc fcce 	bl	800086c <__aeabi_ddiv>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	4b30      	ldr	r3, [pc, #192]	; (8003fa0 <MPU_SelfTest+0x748>)
 8003ede:	f7fc f9e3 	bl	80002a8 <__aeabi_dsub>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	460c      	mov	r4, r1
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	4621      	mov	r1, r4
 8003eea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	18d4      	adds	r4, r2, r3
 8003ef2:	f7fc fe89 	bl	8000c08 <__aeabi_d2f>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	6023      	str	r3, [r4, #0]
		destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8003efa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003f02:	4413      	add	r3, r2
 8003f04:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8003f10:	440b      	add	r3, r1
 8003f12:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	ee07 3a90 	vmov	s15, r3
 8003f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f20:	ee17 0a90 	vmov	r0, s15
 8003f24:	f7fc fb20 	bl	8000568 <__aeabi_f2d>
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <MPU_SelfTest+0x748>)
 8003f2e:	f7fc fb73 	bl	8000618 <__aeabi_dmul>
 8003f32:	4603      	mov	r3, r0
 8003f34:	460c      	mov	r4, r1
 8003f36:	4625      	mov	r5, r4
 8003f38:	461c      	mov	r4, r3
 8003f3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f3c:	3303      	adds	r3, #3
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003f44:	4413      	add	r3, r2
 8003f46:	3b6c      	subs	r3, #108	; 0x6c
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fc fb0c 	bl	8000568 <__aeabi_f2d>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4620      	mov	r0, r4
 8003f56:	4629      	mov	r1, r5
 8003f58:	f7fc fc88 	bl	800086c <__aeabi_ddiv>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	460c      	mov	r4, r1
 8003f60:	4618      	mov	r0, r3
 8003f62:	4621      	mov	r1, r4
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <MPU_SelfTest+0x748>)
 8003f6a:	f7fc f99d 	bl	80002a8 <__aeabi_dsub>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	460c      	mov	r4, r1
 8003f72:	4618      	mov	r0, r3
 8003f74:	4621      	mov	r1, r4
 8003f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f78:	3303      	adds	r3, #3
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	18d4      	adds	r4, r2, r3
 8003f80:	f7fc fe42 	bl	8000c08 <__aeabi_d2f>
 8003f84:	4603      	mov	r3, r0
 8003f86:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3; i++)
 8003f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	f77f af6d 	ble.w	8003e70 <MPU_SelfTest+0x618>
	}
}
 8003f96:	bf00      	nop
 8003f98:	3778      	adds	r7, #120	; 0x78
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40590000 	.word	0x40590000

08003fa4 <MPU_calibrateMag>:
void MPU_calibrateMag(float* dest1)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08e      	sub	sp, #56	; 0x38
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	uint16_t ii = 0, jj=0, sample_count = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	867b      	strh	r3, [r7, #50]	; 0x32
	int32_t mag_bias[3] = {0, 0, 0};
 8003fb8:	2300      	movs	r3, #0
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8003fc4:	4a67      	ldr	r2, [pc, #412]	; (8004164 <MPU_calibrateMag+0x1c0>)
 8003fc6:	f107 031c 	add.w	r3, r7, #28
 8003fca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fce:	6018      	str	r0, [r3, #0]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	8019      	strh	r1, [r3, #0]
 8003fd4:	4a64      	ldr	r2, [pc, #400]	; (8004168 <MPU_calibrateMag+0x1c4>)
 8003fd6:	f107 0314 	add.w	r3, r7, #20
 8003fda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fde:	6018      	str	r0, [r3, #0]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	8019      	strh	r1, [r3, #0]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	81bb      	strh	r3, [r7, #12]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	81fb      	strh	r3, [r7, #14]
 8003fec:	2300      	movs	r3, #0
 8003fee:	823b      	strh	r3, [r7, #16]

	HAL_Delay(4000);
 8003ff0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8003ff4:	f001 fb20 	bl	8005638 <HAL_Delay>

	sample_count = 64;
 8003ff8:	2340      	movs	r3, #64	; 0x40
 8003ffa:	867b      	strh	r3, [r7, #50]	; 0x32
	for(ii = 0; ii < sample_count; ii++)
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004000:	e051      	b.n	80040a6 <MPU_calibrateMag+0x102>
	{
		MPU_readMagData(mag_temp);  // Read the mag data
 8004002:	f107 030c 	add.w	r3, r7, #12
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe ffd2 	bl	8002fb0 <MPU_readMagData>
		for (jj = 0; jj < 3; jj++)
 800400c:	2300      	movs	r3, #0
 800400e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004010:	e040      	b.n	8004094 <MPU_calibrateMag+0xf0>
		{
			if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 8004012:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800401a:	4413      	add	r3, r2
 800401c:	f933 2c2c 	ldrsh.w	r2, [r3, #-44]
 8004020:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004028:	440b      	add	r3, r1
 800402a:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 800402e:	429a      	cmp	r2, r3
 8004030:	dd0e      	ble.n	8004050 <MPU_calibrateMag+0xac>
 8004032:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004034:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800403c:	440b      	add	r3, r1
 800403e:	f933 1c2c 	ldrsh.w	r1, [r3, #-44]
 8004042:	0053      	lsls	r3, r2, #1
 8004044:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004048:	4413      	add	r3, r2
 800404a:	460a      	mov	r2, r1
 800404c:	f823 2c1c 	strh.w	r2, [r3, #-28]
			if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 8004050:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004058:	4413      	add	r3, r2
 800405a:	f933 2c2c 	ldrsh.w	r2, [r3, #-44]
 800405e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004066:	440b      	add	r3, r1
 8004068:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800406c:	429a      	cmp	r2, r3
 800406e:	da0e      	bge.n	800408e <MPU_calibrateMag+0xea>
 8004070:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004072:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800407a:	440b      	add	r3, r1
 800407c:	f933 1c2c 	ldrsh.w	r1, [r3, #-44]
 8004080:	0053      	lsls	r3, r2, #1
 8004082:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004086:	4413      	add	r3, r2
 8004088:	460a      	mov	r2, r1
 800408a:	f823 2c24 	strh.w	r2, [r3, #-36]
		for (jj = 0; jj < 3; jj++)
 800408e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004090:	3301      	adds	r3, #1
 8004092:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004094:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004096:	2b02      	cmp	r3, #2
 8004098:	d9bb      	bls.n	8004012 <MPU_calibrateMag+0x6e>
		}
		HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 800409a:	2087      	movs	r0, #135	; 0x87
 800409c:	f001 facc 	bl	8005638 <HAL_Delay>
	for(ii = 0; ii < sample_count; ii++)
 80040a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040a2:	3301      	adds	r3, #1
 80040a4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80040a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80040a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d3a9      	bcc.n	8004002 <MPU_calibrateMag+0x5e>
	}

	mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 80040ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80040b2:	461a      	mov	r2, r3
 80040b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80040b8:	4413      	add	r3, r2
 80040ba:	0fda      	lsrs	r2, r3, #31
 80040bc:	4413      	add	r3, r2
 80040be:	105b      	asrs	r3, r3, #1
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
	mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 80040c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80040c6:	461a      	mov	r2, r3
 80040c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040cc:	4413      	add	r3, r2
 80040ce:	0fda      	lsrs	r2, r3, #31
 80040d0:	4413      	add	r3, r2
 80040d2:	105b      	asrs	r3, r3, #1
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
	mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 80040d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80040da:	461a      	mov	r2, r3
 80040dc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80040e0:	4413      	add	r3, r2
 80040e2:	0fda      	lsrs	r2, r3, #31
 80040e4:	4413      	add	r3, r2
 80040e6:	105b      	asrs	r3, r3, #1
 80040e8:	62fb      	str	r3, [r7, #44]	; 0x2c

	dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	ee07 3a90 	vmov	s15, r3
 80040f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040f4:	4b1d      	ldr	r3, [pc, #116]	; (800416c <MPU_calibrateMag+0x1c8>)
 80040f6:	edd3 7a00 	vldr	s15, [r3]
 80040fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040fe:	4b1c      	ldr	r3, [pc, #112]	; (8004170 <MPU_calibrateMag+0x1cc>)
 8004100:	edd3 7a00 	vldr	s15, [r3]
 8004104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	ee07 3a90 	vmov	s15, r3
 8004114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004118:	4b14      	ldr	r3, [pc, #80]	; (800416c <MPU_calibrateMag+0x1c8>)
 800411a:	edd3 7a00 	vldr	s15, [r3]
 800411e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004122:	4b13      	ldr	r3, [pc, #76]	; (8004170 <MPU_calibrateMag+0x1cc>)
 8004124:	edd3 7a01 	vldr	s15, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3304      	adds	r3, #4
 800412c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004130:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 8004134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004136:	ee07 3a90 	vmov	s15, r3
 800413a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800413e:	4b0b      	ldr	r3, [pc, #44]	; (800416c <MPU_calibrateMag+0x1c8>)
 8004140:	edd3 7a00 	vldr	s15, [r3]
 8004144:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004148:	4b09      	ldr	r3, [pc, #36]	; (8004170 <MPU_calibrateMag+0x1cc>)
 800414a:	edd3 7a02 	vldr	s15, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3308      	adds	r3, #8
 8004152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004156:	edc3 7a00 	vstr	s15, [r3]
}
 800415a:	bf00      	nop
 800415c:	3738      	adds	r7, #56	; 0x38
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	0801a410 	.word	0x0801a410
 8004168:	0801a418 	.word	0x0801a418
 800416c:	20002b5c 	.word	0x20002b5c
 8004170:	20002b84 	.word	0x20002b84

08004174 <MadgwickQuaternionUpdate>:

void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b0b2      	sub	sp, #200	; 0xc8
 8004178:	af00      	add	r7, sp, #0
 800417a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800417e:	edc7 0a08 	vstr	s1, [r7, #32]
 8004182:	ed87 1a07 	vstr	s2, [r7, #28]
 8004186:	edc7 1a06 	vstr	s3, [r7, #24]
 800418a:	ed87 2a05 	vstr	s4, [r7, #20]
 800418e:	edc7 2a04 	vstr	s5, [r7, #16]
 8004192:	ed87 3a03 	vstr	s6, [r7, #12]
 8004196:	edc7 3a02 	vstr	s7, [r7, #8]
 800419a:	ed87 4a01 	vstr	s8, [r7, #4]
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 800419e:	4b7a      	ldr	r3, [pc, #488]	; (8004388 <MadgwickQuaternionUpdate+0x214>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041a6:	4b78      	ldr	r3, [pc, #480]	; (8004388 <MadgwickQuaternionUpdate+0x214>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041ae:	4b76      	ldr	r3, [pc, #472]	; (8004388 <MadgwickQuaternionUpdate+0x214>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80041b6:	4b74      	ldr	r3, [pc, #464]	; (8004388 <MadgwickQuaternionUpdate+0x214>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0f * q1;
 80041be:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80041c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041c6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	float _2q2 = 2.0f * q2;
 80041ca:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80041ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041d2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	float _2q3 = 2.0f * q3;
 80041d6:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80041da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041de:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	float _2q4 = 2.0f * q4;
 80041e2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80041e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041ea:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	float _2q1q3 = 2.0f * q1 * q3;
 80041ee:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80041f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041f6:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80041fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fe:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	float _2q3q4 = 2.0f * q3 * q4;
 8004202:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004206:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800420a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800420e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004212:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	float q1q1 = q1 * q1;
 8004216:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800421a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800421e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004222:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	float q1q2 = q1 * q2;
 8004226:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800422a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800422e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004232:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float q1q3 = q1 * q3;
 8004236:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800423a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800423e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004242:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	float q1q4 = q1 * q4;
 8004246:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800424a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800424e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004252:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float q2q2 = q2 * q2;
 8004256:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 800425a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800425e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004262:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float q2q3 = q2 * q3;
 8004266:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 800426a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800426e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004272:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float q2q4 = q2 * q4;
 8004276:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 800427a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800427e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004282:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float q3q3 = q3 * q3;
 8004286:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800428a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800428e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004292:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float q3q4 = q3 * q4;
 8004296:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800429a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800429e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a2:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float q4q4 = q4 * q4;
 80042a6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80042aa:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80042ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// Normalise accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
 80042b6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80042ba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80042be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042c2:	edd7 6a08 	vldr	s13, [r7, #32]
 80042c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80042ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80042d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80042da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042e2:	eeb0 0a67 	vmov.f32	s0, s15
 80042e6:	f014 fbdb 	bl	8018aa0 <sqrtf>
 80042ea:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	if (norm == 0.0f) return; // handle NaN
 80042ee:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80042f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80042f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fa:	f000 85cc 	beq.w	8004e96 <MadgwickQuaternionUpdate+0xd22>
	norm = 1.0f/norm;
 80042fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004302:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8004306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800430a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	ax *= norm;
 800430e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004312:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800431a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	ay *= norm;
 800431e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004322:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432a:	edc7 7a08 	vstr	s15, [r7, #32]
	az *= norm;
 800432e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004332:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433a:	edc7 7a07 	vstr	s15, [r7, #28]

	// Normalise magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
 800433e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004342:	edd7 7a03 	vldr	s15, [r7, #12]
 8004346:	ee27 7a27 	vmul.f32	s14, s14, s15
 800434a:	edd7 6a02 	vldr	s13, [r7, #8]
 800434e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800435a:	edd7 6a01 	vldr	s13, [r7, #4]
 800435e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800436a:	eeb0 0a67 	vmov.f32	s0, s15
 800436e:	f014 fb97 	bl	8018aa0 <sqrtf>
 8004372:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	if (norm == 0.0f) return; // handle NaN
 8004376:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800437a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800437e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004382:	f000 858a 	beq.w	8004e9a <MadgwickQuaternionUpdate+0xd26>
 8004386:	e001      	b.n	800438c <MadgwickQuaternionUpdate+0x218>
 8004388:	20002b70 	.word	0x20002b70
	norm = 1.0f/norm;
 800438c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004390:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8004394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004398:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	mx *= norm;
 800439c:	ed97 7a03 	vldr	s14, [r7, #12]
 80043a0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80043a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a8:	edc7 7a03 	vstr	s15, [r7, #12]
	my *= norm;
 80043ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80043b0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80043b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b8:	edc7 7a02 	vstr	s15, [r7, #8]
	mz *= norm;
 80043bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80043c0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80043c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c8:	edc7 7a01 	vstr	s15, [r7, #4]

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
 80043cc:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80043d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80043d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80043d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043dc:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	_2q1my = 2.0f * q1 * my;
 80043e0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80043e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80043e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80043ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	_2q1mz = 2.0f * q1 * mz;
 80043f4:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80043f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80043fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8004400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004404:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q2mx = 2.0f * q2 * mx;
 8004408:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800440c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004410:	ed97 7a03 	vldr	s14, [r7, #12]
 8004414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004418:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 800441c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004420:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004424:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004428:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800442c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004434:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004438:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800443c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004444:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004448:	edd7 6a03 	vldr	s13, [r7, #12]
 800444c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004454:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004458:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 800445c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004460:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004464:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800446c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004470:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8004474:	edd7 7a01 	vldr	s15, [r7, #4]
 8004478:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800447c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004480:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004484:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004488:	edd7 6a03 	vldr	s13, [r7, #12]
 800448c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004494:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004498:	edd7 6a03 	vldr	s13, [r7, #12]
 800449c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80044a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044a8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 80044ac:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80044b0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80044b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044b8:	edd7 6a02 	vldr	s13, [r7, #8]
 80044bc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80044c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044c8:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80044cc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80044d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044d8:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80044dc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80044e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044e8:	edd7 6a02 	vldr	s13, [r7, #8]
 80044ec:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80044f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80044fc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004504:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004508:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800450c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004510:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004514:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800451c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004520:	edd7 6a02 	vldr	s13, [r7, #8]
 8004524:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800452c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004530:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_2bx = sqrtf(hx * hx + hy * hy);
 8004534:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004538:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800453c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004540:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8004544:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004548:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800454c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004550:	eeb0 0a67 	vmov.f32	s0, s15
 8004554:	f014 faa4 	bl	8018aa0 <sqrtf>
 8004558:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 800455c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8004560:	eeb1 7a67 	vneg.f32	s14, s15
 8004564:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004568:	ee27 7a27 	vmul.f32	s14, s14, s15
 800456c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8004570:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004578:	ee37 7a27 	vadd.f32	s14, s14, s15
 800457c:	edd7 6a01 	vldr	s13, [r7, #4]
 8004580:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004584:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004588:	ee37 7a27 	vadd.f32	s14, s14, s15
 800458c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8004590:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004598:	ee37 7a27 	vadd.f32	s14, s14, s15
 800459c:	edd7 6a01 	vldr	s13, [r7, #4]
 80045a0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80045a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045ac:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80045b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80045b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80045b8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80045bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045c4:	edd7 6a01 	vldr	s13, [r7, #4]
 80045c8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80045cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045d4:	edd7 6a01 	vldr	s13, [r7, #4]
 80045d8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80045dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4bx = 2.0f * _2bx;
 80045e8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80045ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80045f0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_4bz = 2.0f * _2bz;
 80045f4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80045f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80045fc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8004600:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004604:	eeb1 7a67 	vneg.f32	s14, s15
 8004608:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800460c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004610:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004614:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004618:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800461c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004620:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004624:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8004628:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800462c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004630:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004634:	edd7 7a08 	vldr	s15, [r7, #32]
 8004638:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800463c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004648:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800464c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004650:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004654:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004658:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800465c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004660:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004664:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004668:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800466c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004670:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8004674:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8004678:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800467c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004680:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004684:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004688:	edd7 7a03 	vldr	s15, [r7, #12]
 800468c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004694:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004698:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800469c:	eef1 6a67 	vneg.f32	s13, s15
 80046a0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80046a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80046a8:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80046ac:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80046b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80046b4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80046b8:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80046bc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80046c0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80046c4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80046c8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80046cc:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80046d0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80046d4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80046d8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80046dc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80046e0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80046e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80046e8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80046ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046f4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80046f8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80046fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004700:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8004704:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004708:	ee36 6a27 	vadd.f32	s12, s12, s15
 800470c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004710:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004714:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8004718:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800471c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004720:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004724:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004728:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800472c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004730:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004734:	edd7 7a01 	vldr	s15, [r7, #4]
 8004738:	ee76 7a67 	vsub.f32	s15, s12, s15
 800473c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004744:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8004748:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800474c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004750:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004754:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004758:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800475c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004760:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004764:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004768:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800476c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004770:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004774:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004778:	edd7 7a08 	vldr	s15, [r7, #32]
 800477c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004780:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8004784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004788:	ee37 7a27 	vadd.f32	s14, s14, s15
 800478c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004790:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004794:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004798:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800479c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80047a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80047a4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80047a8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80047ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80047b0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80047b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80047b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80047bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047c4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80047c8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80047cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80047d0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80047d4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80047d8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80047dc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80047e0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80047e4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80047e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80047ec:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 80047f0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80047f4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80047f8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80047fc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004800:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004804:	edd7 7a03 	vldr	s15, [r7, #12]
 8004808:	ee76 7a67 	vsub.f32	s15, s12, s15
 800480c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004810:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004814:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8004818:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800481c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004820:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8004824:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004828:	ee66 7a27 	vmul.f32	s15, s12, s15
 800482c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004830:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8004834:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8004838:	ee36 6a67 	vsub.f32	s12, s12, s15
 800483c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004840:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004844:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8004848:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800484c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8004850:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004854:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004858:	ee36 6a27 	vadd.f32	s12, s12, s15
 800485c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004860:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004868:	ee37 7a27 	vadd.f32	s14, s14, s15
 800486c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8004870:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004874:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004878:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 800487c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004880:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004884:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004888:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 800488c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004890:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004894:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004898:	ee26 6a27 	vmul.f32	s12, s12, s15
 800489c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80048a0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80048a4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80048a8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80048ac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80048b0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80048b4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80048b8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80048bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80048c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80048c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048cc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80048d0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80048d4:	eeb1 7a67 	vneg.f32	s14, s15
 80048d8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80048dc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80048e0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80048e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80048e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80048ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80048f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048f4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80048f8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80048fc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004900:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004904:	edd7 7a08 	vldr	s15, [r7, #32]
 8004908:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800490c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004914:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004918:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800491c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004920:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004924:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004928:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800492c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004930:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004934:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004938:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800493c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004940:	edd7 7a07 	vldr	s15, [r7, #28]
 8004944:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800494c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004950:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004954:	eef1 6a67 	vneg.f32	s13, s15
 8004958:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800495c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004960:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8004964:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004968:	ee66 7a27 	vmul.f32	s15, s12, s15
 800496c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004970:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004974:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004978:	ee36 6a67 	vsub.f32	s12, s12, s15
 800497c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004980:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004984:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004988:	ee26 6a27 	vmul.f32	s12, s12, s15
 800498c:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8004990:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8004994:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004998:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800499c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80049a0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80049a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80049a8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80049ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049b4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80049b8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80049bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80049c0:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80049c4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80049c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80049cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80049d0:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80049d4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80049d8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80049dc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80049e0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80049e4:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80049e8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80049ec:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80049f0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80049f4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80049f8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80049fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a00:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a0c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8004a10:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004a14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004a18:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8004a1c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004a20:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004a24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004a28:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8004a2c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004a30:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004a34:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004a38:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004a3c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8004a40:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004a44:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004a48:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004a4c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004a50:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004a54:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004a58:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004a5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a60:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a6c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8004a70:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004a74:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004a78:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004a7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a80:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004a84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a88:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004a8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a90:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8004a94:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004a98:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004a9c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004aa0:	edd7 7a08 	vldr	s15, [r7, #32]
 8004aa4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004aa8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004aac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ab0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ab4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004ab8:	eef1 6a67 	vneg.f32	s13, s15
 8004abc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004ac0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004ac4:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8004ac8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004acc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004ad0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004ad4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004ad8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004adc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004ae0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004ae4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004ae8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004aec:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004af0:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8004af4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8004af8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004afc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004b00:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004b04:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b0c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b18:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004b1c:	eef1 6a67 	vneg.f32	s13, s15
 8004b20:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004b24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004b28:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8004b2c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004b30:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004b34:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004b38:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8004b3c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8004b40:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004b44:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004b48:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004b4c:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8004b50:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8004b54:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8004b58:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004b5c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004b60:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004b64:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b68:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b74:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8004b78:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004b7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004b80:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8004b84:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004b88:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004b8c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004b90:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004b94:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8004b98:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004b9c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004ba0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004ba4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004ba8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004bac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004bb0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004bb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bb8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bc4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8004bc8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004bcc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bd4:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8004bd8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004be0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004be4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8004be8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004bec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bf4:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8004bf8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c04:	eeb0 0a67 	vmov.f32	s0, s15
 8004c08:	f013 ff4a 	bl	8018aa0 <sqrtf>
 8004c0c:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	norm = 1.0f/norm;
 8004c10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c14:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8004c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c1c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	s1 *= norm;
 8004c20:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004c24:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	s2 *= norm;
 8004c30:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004c34:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s3 *= norm;
 8004c40:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004c44:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s4 *= norm;
 8004c50:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004c54:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Compute rate of change of quaternion
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8004c60:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004c64:	eeb1 7a67 	vneg.f32	s14, s15
 8004c68:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c70:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8004c74:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c80:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8004c84:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004c98:	4b82      	ldr	r3, [pc, #520]	; (8004ea4 <MadgwickQuaternionUpdate+0xd30>)
 8004c9a:	edd3 6a00 	vldr	s13, [r3]
 8004c9e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004ca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004caa:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8004cae:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004cb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8004cb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cba:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8004cbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8004cc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cca:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8004cce:	edd7 7a05 	vldr	s15, [r7, #20]
 8004cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004cde:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ce2:	4b70      	ldr	r3, [pc, #448]	; (8004ea4 <MadgwickQuaternionUpdate+0xd30>)
 8004ce4:	edd3 6a00 	vldr	s13, [r3]
 8004ce8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cf4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8004cf8:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004cfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d04:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8004d08:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d14:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8004d18:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d24:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d2c:	4b5d      	ldr	r3, [pc, #372]	; (8004ea4 <MadgwickQuaternionUpdate+0xd30>)
 8004d2e:	edd3 6a00 	vldr	s13, [r3]
 8004d32:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d3e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8004d42:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004d46:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d4e:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8004d52:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d5e:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8004d62:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d76:	4b4b      	ldr	r3, [pc, #300]	; (8004ea4 <MadgwickQuaternionUpdate+0xd30>)
 8004d78:	edd3 6a00 	vldr	s13, [r3]
 8004d7c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d88:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Integrate to yield quaternion
	q1 += qDot1 * deltat;
 8004d8c:	4b46      	ldr	r3, [pc, #280]	; (8004ea8 <MadgwickQuaternionUpdate+0xd34>)
 8004d8e:	ed93 7a00 	vldr	s14, [r3]
 8004d92:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004da2:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	q2 += qDot2 * deltat;
 8004da6:	4b40      	ldr	r3, [pc, #256]	; (8004ea8 <MadgwickQuaternionUpdate+0xd34>)
 8004da8:	ed93 7a00 	vldr	s14, [r3]
 8004dac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db4:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8004db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dbc:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	q3 += qDot3 * deltat;
 8004dc0:	4b39      	ldr	r3, [pc, #228]	; (8004ea8 <MadgwickQuaternionUpdate+0xd34>)
 8004dc2:	ed93 7a00 	vldr	s14, [r3]
 8004dc6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dce:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8004dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dd6:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	q4 += qDot4 * deltat;
 8004dda:	4b33      	ldr	r3, [pc, #204]	; (8004ea8 <MadgwickQuaternionUpdate+0xd34>)
 8004ddc:	ed93 7a00 	vldr	s14, [r3]
 8004de0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de8:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004df0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8004df4:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004df8:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004dfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e00:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8004e04:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004e08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e10:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8004e14:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004e18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e20:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8004e24:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e30:	eeb0 0a67 	vmov.f32	s0, s15
 8004e34:	f013 fe34 	bl	8018aa0 <sqrtf>
 8004e38:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	norm = 1.0f/norm;
 8004e3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e40:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8004e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e48:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q[0] = q1 * norm;
 8004e4c:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004e50:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e58:	4b14      	ldr	r3, [pc, #80]	; (8004eac <MadgwickQuaternionUpdate+0xd38>)
 8004e5a:	edc3 7a00 	vstr	s15, [r3]
	q[1] = q2 * norm;
 8004e5e:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8004e62:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6a:	4b10      	ldr	r3, [pc, #64]	; (8004eac <MadgwickQuaternionUpdate+0xd38>)
 8004e6c:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] = q3 * norm;
 8004e70:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8004e74:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <MadgwickQuaternionUpdate+0xd38>)
 8004e7e:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] = q4 * norm;
 8004e82:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004e86:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8e:	4b07      	ldr	r3, [pc, #28]	; (8004eac <MadgwickQuaternionUpdate+0xd38>)
 8004e90:	edc3 7a03 	vstr	s15, [r3, #12]
 8004e94:	e002      	b.n	8004e9c <MadgwickQuaternionUpdate+0xd28>
	if (norm == 0.0f) return; // handle NaN
 8004e96:	bf00      	nop
 8004e98:	e000      	b.n	8004e9c <MadgwickQuaternionUpdate+0xd28>
	if (norm == 0.0f) return; // handle NaN
 8004e9a:	bf00      	nop

}
 8004e9c:	37c8      	adds	r7, #200	; 0xc8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20002b24 	.word	0x20002b24
 8004ea8:	20002b58 	.word	0x20002b58
 8004eac:	20002b70 	.word	0x20002b70

08004eb0 <millis>:
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	4a04      	ldr	r2, [pc, #16]	; (8004ecc <millis+0x1c>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	099b      	lsrs	r3, r3, #6
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	10624dd3 	.word	0x10624dd3

08004ed0 <getTime>:
	rtc_date.Date = dateTime->dayM;
	if (HAL_RTC_SetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN) != HAL_OK) return false;
}

static inline DateTime getTime(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08c      	sub	sp, #48	; 0x30
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 8004ed8:	f107 031c 	add.w	r3, r7, #28
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	605a      	str	r2, [r3, #4]
 8004ee2:	609a      	str	r2, [r3, #8]
 8004ee4:	60da      	str	r2, [r3, #12]
 8004ee6:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 8004eec:	f107 030c 	add.w	r3, r7, #12
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	605a      	str	r2, [r3, #4]
 8004ef6:	811a      	strh	r2, [r3, #8]

	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 8004ef8:	f00e fb22 	bl	8013540 <Get_RTC_Instance>
 8004efc:	f107 031c 	add.w	r3, r7, #28
 8004f00:	2200      	movs	r2, #0
 8004f02:	4619      	mov	r1, r3
 8004f04:	f004 f8b7 	bl	8009076 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 8004f08:	f00e fb1a 	bl	8013540 <Get_RTC_Instance>
 8004f0c:	f107 0318 	add.w	r3, r7, #24
 8004f10:	2200      	movs	r2, #0
 8004f12:	4619      	mov	r1, r3
 8004f14:	f004 f90d 	bl	8009132 <HAL_RTC_GetDate>

	toReturn.year = rtc_date.Year;
 8004f18:	7efb      	ldrb	r3, [r7, #27]
 8004f1a:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 8004f1c:	7e7b      	ldrb	r3, [r7, #25]
 8004f1e:	737b      	strb	r3, [r7, #13]
	//toReturn.dayY = rtc_date.
	toReturn.dayM = rtc_date.Date;
 8004f20:	7ebb      	ldrb	r3, [r7, #26]
 8004f22:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8004f24:	7e3b      	ldrb	r3, [r7, #24]
 8004f26:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 8004f28:	7f3b      	ldrb	r3, [r7, #28]
 8004f2a:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 8004f2c:	7f7b      	ldrb	r3, [r7, #29]
 8004f2e:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 8004f30:	7fbb      	ldrb	r3, [r7, #30]
 8004f32:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 8004f34:	f7ff ffbc 	bl	8004eb0 <millis>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <getTime+0x9c>)
 8004f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f40:	099b      	lsrs	r3, r3, #6
 8004f42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f46:	fb01 f303 	mul.w	r3, r1, r3
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	82bb      	strh	r3, [r7, #20]

	return toReturn;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	461a      	mov	r2, r3
 8004f54:	f107 030c 	add.w	r3, r7, #12
 8004f58:	cb03      	ldmia	r3!, {r0, r1}
 8004f5a:	6010      	str	r0, [r2, #0]
 8004f5c:	6051      	str	r1, [r2, #4]
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	8113      	strh	r3, [r2, #8]
}
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	3730      	adds	r7, #48	; 0x30
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	10624dd3 	.word	0x10624dd3

08004f70 <log_new>:
#include "motors.h"
#include "sx1278.h"
#include "run.h"

void log_new()
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af02      	add	r7, sp, #8
	DateTime now = getTime();
 8004f76:	1d3b      	adds	r3, r7, #4
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff ffa9 	bl	8004ed0 <getTime>
	sprintf(directoryName, "/%02d%02d%02d%02d", now.hour, now.minute, now.dayM, now.month);
 8004f7e:	7a3b      	ldrb	r3, [r7, #8]
 8004f80:	4619      	mov	r1, r3
 8004f82:	7a7b      	ldrb	r3, [r7, #9]
 8004f84:	4618      	mov	r0, r3
 8004f86:	79bb      	ldrb	r3, [r7, #6]
 8004f88:	797a      	ldrb	r2, [r7, #5]
 8004f8a:	9201      	str	r2, [sp, #4]
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	4603      	mov	r3, r0
 8004f90:	460a      	mov	r2, r1
 8004f92:	4955      	ldr	r1, [pc, #340]	; (80050e8 <log_new+0x178>)
 8004f94:	4855      	ldr	r0, [pc, #340]	; (80050ec <log_new+0x17c>)
 8004f96:	f010 fd2d 	bl	80159f4 <siprintf>
	sprintf(directoryNameCopy, directoryName);
 8004f9a:	4954      	ldr	r1, [pc, #336]	; (80050ec <log_new+0x17c>)
 8004f9c:	4854      	ldr	r0, [pc, #336]	; (80050f0 <log_new+0x180>)
 8004f9e:	f010 fd29 	bl	80159f4 <siprintf>

	SD_init();
 8004fa2:	f7fc f851 	bl	8001048 <SD_init>
	SD_newDirectory((char*)directoryName);
 8004fa6:	4851      	ldr	r0, [pc, #324]	; (80050ec <log_new+0x17c>)
 8004fa8:	f7fc f8ea 	bl	8001180 <SD_newDirectory>
	SD_newFile(strcat(directoryName, "/LOG.TXT"));
 8004fac:	484f      	ldr	r0, [pc, #316]	; (80050ec <log_new+0x17c>)
 8004fae:	f7fb f919 	bl	80001e4 <strlen>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4b4d      	ldr	r3, [pc, #308]	; (80050ec <log_new+0x17c>)
 8004fb8:	4413      	add	r3, r2
 8004fba:	494e      	ldr	r1, [pc, #312]	; (80050f4 <log_new+0x184>)
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	cb03      	ldmia	r3!, {r0, r1}
 8004fc2:	6010      	str	r0, [r2, #0]
 8004fc4:	6051      	str	r1, [r2, #4]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	7213      	strb	r3, [r2, #8]
 8004fca:	4b48      	ldr	r3, [pc, #288]	; (80050ec <log_new+0x17c>)
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fc f877 	bl	80010c0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8004fd2:	4947      	ldr	r1, [pc, #284]	; (80050f0 <log_new+0x180>)
 8004fd4:	4845      	ldr	r0, [pc, #276]	; (80050ec <log_new+0x17c>)
 8004fd6:	f010 fd0d 	bl	80159f4 <siprintf>
	SD_newFile(strcat(directoryName, "/BMP.TXT"));
 8004fda:	4844      	ldr	r0, [pc, #272]	; (80050ec <log_new+0x17c>)
 8004fdc:	f7fb f902 	bl	80001e4 <strlen>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	4b41      	ldr	r3, [pc, #260]	; (80050ec <log_new+0x17c>)
 8004fe6:	4413      	add	r3, r2
 8004fe8:	4943      	ldr	r1, [pc, #268]	; (80050f8 <log_new+0x188>)
 8004fea:	461a      	mov	r2, r3
 8004fec:	460b      	mov	r3, r1
 8004fee:	cb03      	ldmia	r3!, {r0, r1}
 8004ff0:	6010      	str	r0, [r2, #0]
 8004ff2:	6051      	str	r1, [r2, #4]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	7213      	strb	r3, [r2, #8]
 8004ff8:	4b3c      	ldr	r3, [pc, #240]	; (80050ec <log_new+0x17c>)
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fc f860 	bl	80010c0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8005000:	493b      	ldr	r1, [pc, #236]	; (80050f0 <log_new+0x180>)
 8005002:	483a      	ldr	r0, [pc, #232]	; (80050ec <log_new+0x17c>)
 8005004:	f010 fcf6 	bl	80159f4 <siprintf>
	SD_newFile(strcat(directoryName, "/GPS.TXT"));
 8005008:	4838      	ldr	r0, [pc, #224]	; (80050ec <log_new+0x17c>)
 800500a:	f7fb f8eb 	bl	80001e4 <strlen>
 800500e:	4603      	mov	r3, r0
 8005010:	461a      	mov	r2, r3
 8005012:	4b36      	ldr	r3, [pc, #216]	; (80050ec <log_new+0x17c>)
 8005014:	4413      	add	r3, r2
 8005016:	4939      	ldr	r1, [pc, #228]	; (80050fc <log_new+0x18c>)
 8005018:	461a      	mov	r2, r3
 800501a:	460b      	mov	r3, r1
 800501c:	cb03      	ldmia	r3!, {r0, r1}
 800501e:	6010      	str	r0, [r2, #0]
 8005020:	6051      	str	r1, [r2, #4]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	7213      	strb	r3, [r2, #8]
 8005026:	4b31      	ldr	r3, [pc, #196]	; (80050ec <log_new+0x17c>)
 8005028:	4618      	mov	r0, r3
 800502a:	f7fc f849 	bl	80010c0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 800502e:	4930      	ldr	r1, [pc, #192]	; (80050f0 <log_new+0x180>)
 8005030:	482e      	ldr	r0, [pc, #184]	; (80050ec <log_new+0x17c>)
 8005032:	f010 fcdf 	bl	80159f4 <siprintf>
	SD_newFile(strcat(directoryName, "/IMU.TXT"));
 8005036:	482d      	ldr	r0, [pc, #180]	; (80050ec <log_new+0x17c>)
 8005038:	f7fb f8d4 	bl	80001e4 <strlen>
 800503c:	4603      	mov	r3, r0
 800503e:	461a      	mov	r2, r3
 8005040:	4b2a      	ldr	r3, [pc, #168]	; (80050ec <log_new+0x17c>)
 8005042:	4413      	add	r3, r2
 8005044:	492e      	ldr	r1, [pc, #184]	; (8005100 <log_new+0x190>)
 8005046:	461a      	mov	r2, r3
 8005048:	460b      	mov	r3, r1
 800504a:	cb03      	ldmia	r3!, {r0, r1}
 800504c:	6010      	str	r0, [r2, #0]
 800504e:	6051      	str	r1, [r2, #4]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	7213      	strb	r3, [r2, #8]
 8005054:	4b25      	ldr	r3, [pc, #148]	; (80050ec <log_new+0x17c>)
 8005056:	4618      	mov	r0, r3
 8005058:	f7fc f832 	bl	80010c0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 800505c:	4924      	ldr	r1, [pc, #144]	; (80050f0 <log_new+0x180>)
 800505e:	4823      	ldr	r0, [pc, #140]	; (80050ec <log_new+0x17c>)
 8005060:	f010 fcc8 	bl	80159f4 <siprintf>
	SD_newFile(strcat(directoryName, "/MOT.TXT"));
 8005064:	4821      	ldr	r0, [pc, #132]	; (80050ec <log_new+0x17c>)
 8005066:	f7fb f8bd 	bl	80001e4 <strlen>
 800506a:	4603      	mov	r3, r0
 800506c:	461a      	mov	r2, r3
 800506e:	4b1f      	ldr	r3, [pc, #124]	; (80050ec <log_new+0x17c>)
 8005070:	4413      	add	r3, r2
 8005072:	4924      	ldr	r1, [pc, #144]	; (8005104 <log_new+0x194>)
 8005074:	461a      	mov	r2, r3
 8005076:	460b      	mov	r3, r1
 8005078:	cb03      	ldmia	r3!, {r0, r1}
 800507a:	6010      	str	r0, [r2, #0]
 800507c:	6051      	str	r1, [r2, #4]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	7213      	strb	r3, [r2, #8]
 8005082:	4b1a      	ldr	r3, [pc, #104]	; (80050ec <log_new+0x17c>)
 8005084:	4618      	mov	r0, r3
 8005086:	f7fc f81b 	bl	80010c0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 800508a:	4919      	ldr	r1, [pc, #100]	; (80050f0 <log_new+0x180>)
 800508c:	4817      	ldr	r0, [pc, #92]	; (80050ec <log_new+0x17c>)
 800508e:	f010 fcb1 	bl	80159f4 <siprintf>
	SD_newFile(strcat(directoryName, "/RADIO.TXT"));
 8005092:	4816      	ldr	r0, [pc, #88]	; (80050ec <log_new+0x17c>)
 8005094:	f7fb f8a6 	bl	80001e4 <strlen>
 8005098:	4603      	mov	r3, r0
 800509a:	461a      	mov	r2, r3
 800509c:	4b13      	ldr	r3, [pc, #76]	; (80050ec <log_new+0x17c>)
 800509e:	4413      	add	r3, r2
 80050a0:	4919      	ldr	r1, [pc, #100]	; (8005108 <log_new+0x198>)
 80050a2:	461a      	mov	r2, r3
 80050a4:	460b      	mov	r3, r1
 80050a6:	cb03      	ldmia	r3!, {r0, r1}
 80050a8:	6010      	str	r0, [r2, #0]
 80050aa:	6051      	str	r1, [r2, #4]
 80050ac:	8819      	ldrh	r1, [r3, #0]
 80050ae:	789b      	ldrb	r3, [r3, #2]
 80050b0:	8111      	strh	r1, [r2, #8]
 80050b2:	7293      	strb	r3, [r2, #10]
 80050b4:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <log_new+0x17c>)
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fc f802 	bl	80010c0 <SD_newFile>

	logBufferIndex = 0;
 80050bc:	4b13      	ldr	r3, [pc, #76]	; (800510c <log_new+0x19c>)
 80050be:	2200      	movs	r2, #0
 80050c0:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 80050c2:	4b13      	ldr	r3, [pc, #76]	; (8005110 <log_new+0x1a0>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 80050c8:	4b12      	ldr	r3, [pc, #72]	; (8005114 <log_new+0x1a4>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 80050ce:	4b12      	ldr	r3, [pc, #72]	; (8005118 <log_new+0x1a8>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 80050d4:	4b11      	ldr	r3, [pc, #68]	; (800511c <log_new+0x1ac>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 80050da:	4b11      	ldr	r3, [pc, #68]	; (8005120 <log_new+0x1b0>)
 80050dc:	2200      	movs	r2, #0
 80050de:	801a      	strh	r2, [r3, #0]
}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	0801a420 	.word	0x0801a420
 80050ec:	2000444c 	.word	0x2000444c
 80050f0:	20002fa8 	.word	0x20002fa8
 80050f4:	0801a434 	.word	0x0801a434
 80050f8:	0801a440 	.word	0x0801a440
 80050fc:	0801a44c 	.word	0x0801a44c
 8005100:	0801a458 	.word	0x0801a458
 8005104:	0801a464 	.word	0x0801a464
 8005108:	0801a470 	.word	0x0801a470
 800510c:	2000446e 	.word	0x2000446e
 8005110:	2000446c 	.word	0x2000446c
 8005114:	20003c48 	.word	0x20003c48
 8005118:	20004470 	.word	0x20004470
 800511c:	20003844 	.word	0x20003844
 8005120:	2000381c 	.word	0x2000381c

08005124 <log_save>:

void log_save()
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
	//SD_init();

	if (logBufferIndex > 0)
 8005128:	4b7c      	ldr	r3, [pc, #496]	; (800531c <log_save+0x1f8>)
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01b      	beq.n	8005168 <log_save+0x44>
	{
		sprintf(openedPath, strcat(directoryName, "/LOG.TXT"));
 8005130:	487b      	ldr	r0, [pc, #492]	; (8005320 <log_save+0x1fc>)
 8005132:	f7fb f857 	bl	80001e4 <strlen>
 8005136:	4603      	mov	r3, r0
 8005138:	461a      	mov	r2, r3
 800513a:	4b79      	ldr	r3, [pc, #484]	; (8005320 <log_save+0x1fc>)
 800513c:	4413      	add	r3, r2
 800513e:	4979      	ldr	r1, [pc, #484]	; (8005324 <log_save+0x200>)
 8005140:	461a      	mov	r2, r3
 8005142:	460b      	mov	r3, r1
 8005144:	cb03      	ldmia	r3!, {r0, r1}
 8005146:	6010      	str	r0, [r2, #0]
 8005148:	6051      	str	r1, [r2, #4]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	7213      	strb	r3, [r2, #8]
 800514e:	4b74      	ldr	r3, [pc, #464]	; (8005320 <log_save+0x1fc>)
 8005150:	4619      	mov	r1, r3
 8005152:	4875      	ldr	r0, [pc, #468]	; (8005328 <log_save+0x204>)
 8005154:	f010 fc4e 	bl	80159f4 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005158:	4974      	ldr	r1, [pc, #464]	; (800532c <log_save+0x208>)
 800515a:	4871      	ldr	r0, [pc, #452]	; (8005320 <log_save+0x1fc>)
 800515c:	f010 fc4a 	bl	80159f4 <siprintf>
		SD_writeToFile(openedPath, logBuffer);
 8005160:	4973      	ldr	r1, [pc, #460]	; (8005330 <log_save+0x20c>)
 8005162:	4871      	ldr	r0, [pc, #452]	; (8005328 <log_save+0x204>)
 8005164:	f7fb ffd4 	bl	8001110 <SD_writeToFile>
	}
	if (bmpBufferIndex > 0)
 8005168:	4b72      	ldr	r3, [pc, #456]	; (8005334 <log_save+0x210>)
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01b      	beq.n	80051a8 <log_save+0x84>
	{
		sprintf(openedPath, strcat(directoryName, "/BMP.TXT"));
 8005170:	486b      	ldr	r0, [pc, #428]	; (8005320 <log_save+0x1fc>)
 8005172:	f7fb f837 	bl	80001e4 <strlen>
 8005176:	4603      	mov	r3, r0
 8005178:	461a      	mov	r2, r3
 800517a:	4b69      	ldr	r3, [pc, #420]	; (8005320 <log_save+0x1fc>)
 800517c:	4413      	add	r3, r2
 800517e:	496e      	ldr	r1, [pc, #440]	; (8005338 <log_save+0x214>)
 8005180:	461a      	mov	r2, r3
 8005182:	460b      	mov	r3, r1
 8005184:	cb03      	ldmia	r3!, {r0, r1}
 8005186:	6010      	str	r0, [r2, #0]
 8005188:	6051      	str	r1, [r2, #4]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	7213      	strb	r3, [r2, #8]
 800518e:	4b64      	ldr	r3, [pc, #400]	; (8005320 <log_save+0x1fc>)
 8005190:	4619      	mov	r1, r3
 8005192:	4865      	ldr	r0, [pc, #404]	; (8005328 <log_save+0x204>)
 8005194:	f010 fc2e 	bl	80159f4 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005198:	4964      	ldr	r1, [pc, #400]	; (800532c <log_save+0x208>)
 800519a:	4861      	ldr	r0, [pc, #388]	; (8005320 <log_save+0x1fc>)
 800519c:	f010 fc2a 	bl	80159f4 <siprintf>
		SD_writeToFile(openedPath, bmpBuffer);
 80051a0:	4966      	ldr	r1, [pc, #408]	; (800533c <log_save+0x218>)
 80051a2:	4861      	ldr	r0, [pc, #388]	; (8005328 <log_save+0x204>)
 80051a4:	f7fb ffb4 	bl	8001110 <SD_writeToFile>
	}
	if (gpsBufferIndex > 0)
 80051a8:	4b65      	ldr	r3, [pc, #404]	; (8005340 <log_save+0x21c>)
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01b      	beq.n	80051e8 <log_save+0xc4>
	{
		sprintf(openedPath, strcat(directoryName, "/GPS.TXT"));
 80051b0:	485b      	ldr	r0, [pc, #364]	; (8005320 <log_save+0x1fc>)
 80051b2:	f7fb f817 	bl	80001e4 <strlen>
 80051b6:	4603      	mov	r3, r0
 80051b8:	461a      	mov	r2, r3
 80051ba:	4b59      	ldr	r3, [pc, #356]	; (8005320 <log_save+0x1fc>)
 80051bc:	4413      	add	r3, r2
 80051be:	4961      	ldr	r1, [pc, #388]	; (8005344 <log_save+0x220>)
 80051c0:	461a      	mov	r2, r3
 80051c2:	460b      	mov	r3, r1
 80051c4:	cb03      	ldmia	r3!, {r0, r1}
 80051c6:	6010      	str	r0, [r2, #0]
 80051c8:	6051      	str	r1, [r2, #4]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	7213      	strb	r3, [r2, #8]
 80051ce:	4b54      	ldr	r3, [pc, #336]	; (8005320 <log_save+0x1fc>)
 80051d0:	4619      	mov	r1, r3
 80051d2:	4855      	ldr	r0, [pc, #340]	; (8005328 <log_save+0x204>)
 80051d4:	f010 fc0e 	bl	80159f4 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 80051d8:	4954      	ldr	r1, [pc, #336]	; (800532c <log_save+0x208>)
 80051da:	4851      	ldr	r0, [pc, #324]	; (8005320 <log_save+0x1fc>)
 80051dc:	f010 fc0a 	bl	80159f4 <siprintf>
		SD_writeToFile(openedPath, gpsBuffer);
 80051e0:	4959      	ldr	r1, [pc, #356]	; (8005348 <log_save+0x224>)
 80051e2:	4851      	ldr	r0, [pc, #324]	; (8005328 <log_save+0x204>)
 80051e4:	f7fb ff94 	bl	8001110 <SD_writeToFile>
	}
	if (imuBufferIndex > 0)
 80051e8:	4b58      	ldr	r3, [pc, #352]	; (800534c <log_save+0x228>)
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01b      	beq.n	8005228 <log_save+0x104>
	{
		sprintf(openedPath, strcat(directoryName, "/IMU.TXT"));
 80051f0:	484b      	ldr	r0, [pc, #300]	; (8005320 <log_save+0x1fc>)
 80051f2:	f7fa fff7 	bl	80001e4 <strlen>
 80051f6:	4603      	mov	r3, r0
 80051f8:	461a      	mov	r2, r3
 80051fa:	4b49      	ldr	r3, [pc, #292]	; (8005320 <log_save+0x1fc>)
 80051fc:	4413      	add	r3, r2
 80051fe:	4954      	ldr	r1, [pc, #336]	; (8005350 <log_save+0x22c>)
 8005200:	461a      	mov	r2, r3
 8005202:	460b      	mov	r3, r1
 8005204:	cb03      	ldmia	r3!, {r0, r1}
 8005206:	6010      	str	r0, [r2, #0]
 8005208:	6051      	str	r1, [r2, #4]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	7213      	strb	r3, [r2, #8]
 800520e:	4b44      	ldr	r3, [pc, #272]	; (8005320 <log_save+0x1fc>)
 8005210:	4619      	mov	r1, r3
 8005212:	4845      	ldr	r0, [pc, #276]	; (8005328 <log_save+0x204>)
 8005214:	f010 fbee 	bl	80159f4 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005218:	4944      	ldr	r1, [pc, #272]	; (800532c <log_save+0x208>)
 800521a:	4841      	ldr	r0, [pc, #260]	; (8005320 <log_save+0x1fc>)
 800521c:	f010 fbea 	bl	80159f4 <siprintf>
		SD_writeToFile(openedPath, imuBuffer);
 8005220:	494c      	ldr	r1, [pc, #304]	; (8005354 <log_save+0x230>)
 8005222:	4841      	ldr	r0, [pc, #260]	; (8005328 <log_save+0x204>)
 8005224:	f7fb ff74 	bl	8001110 <SD_writeToFile>
	}
	if (motBufferIndex > 0)
 8005228:	4b4b      	ldr	r3, [pc, #300]	; (8005358 <log_save+0x234>)
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d01b      	beq.n	8005268 <log_save+0x144>
	{
		sprintf(openedPath, strcat(directoryName, "/MOT.TXT"));
 8005230:	483b      	ldr	r0, [pc, #236]	; (8005320 <log_save+0x1fc>)
 8005232:	f7fa ffd7 	bl	80001e4 <strlen>
 8005236:	4603      	mov	r3, r0
 8005238:	461a      	mov	r2, r3
 800523a:	4b39      	ldr	r3, [pc, #228]	; (8005320 <log_save+0x1fc>)
 800523c:	4413      	add	r3, r2
 800523e:	4947      	ldr	r1, [pc, #284]	; (800535c <log_save+0x238>)
 8005240:	461a      	mov	r2, r3
 8005242:	460b      	mov	r3, r1
 8005244:	cb03      	ldmia	r3!, {r0, r1}
 8005246:	6010      	str	r0, [r2, #0]
 8005248:	6051      	str	r1, [r2, #4]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	7213      	strb	r3, [r2, #8]
 800524e:	4b34      	ldr	r3, [pc, #208]	; (8005320 <log_save+0x1fc>)
 8005250:	4619      	mov	r1, r3
 8005252:	4835      	ldr	r0, [pc, #212]	; (8005328 <log_save+0x204>)
 8005254:	f010 fbce 	bl	80159f4 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8005258:	4934      	ldr	r1, [pc, #208]	; (800532c <log_save+0x208>)
 800525a:	4831      	ldr	r0, [pc, #196]	; (8005320 <log_save+0x1fc>)
 800525c:	f010 fbca 	bl	80159f4 <siprintf>
		SD_writeToFile(openedPath, motBuffer);
 8005260:	493f      	ldr	r1, [pc, #252]	; (8005360 <log_save+0x23c>)
 8005262:	4831      	ldr	r0, [pc, #196]	; (8005328 <log_save+0x204>)
 8005264:	f7fb ff54 	bl	8001110 <SD_writeToFile>
	}
	if (radioBufferIndex > 0)
 8005268:	4b3e      	ldr	r3, [pc, #248]	; (8005364 <log_save+0x240>)
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01d      	beq.n	80052ac <log_save+0x188>
	{
		sprintf(openedPath, strcat(directoryName, "/RADIO.TXT"));
 8005270:	482b      	ldr	r0, [pc, #172]	; (8005320 <log_save+0x1fc>)
 8005272:	f7fa ffb7 	bl	80001e4 <strlen>
 8005276:	4603      	mov	r3, r0
 8005278:	461a      	mov	r2, r3
 800527a:	4b29      	ldr	r3, [pc, #164]	; (8005320 <log_save+0x1fc>)
 800527c:	4413      	add	r3, r2
 800527e:	493a      	ldr	r1, [pc, #232]	; (8005368 <log_save+0x244>)
 8005280:	461a      	mov	r2, r3
 8005282:	460b      	mov	r3, r1
 8005284:	cb03      	ldmia	r3!, {r0, r1}
 8005286:	6010      	str	r0, [r2, #0]
 8005288:	6051      	str	r1, [r2, #4]
 800528a:	8819      	ldrh	r1, [r3, #0]
 800528c:	789b      	ldrb	r3, [r3, #2]
 800528e:	8111      	strh	r1, [r2, #8]
 8005290:	7293      	strb	r3, [r2, #10]
 8005292:	4b23      	ldr	r3, [pc, #140]	; (8005320 <log_save+0x1fc>)
 8005294:	4619      	mov	r1, r3
 8005296:	4824      	ldr	r0, [pc, #144]	; (8005328 <log_save+0x204>)
 8005298:	f010 fbac 	bl	80159f4 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 800529c:	4923      	ldr	r1, [pc, #140]	; (800532c <log_save+0x208>)
 800529e:	4820      	ldr	r0, [pc, #128]	; (8005320 <log_save+0x1fc>)
 80052a0:	f010 fba8 	bl	80159f4 <siprintf>
		SD_writeToFile(openedPath, radioBuffer);
 80052a4:	4931      	ldr	r1, [pc, #196]	; (800536c <log_save+0x248>)
 80052a6:	4820      	ldr	r0, [pc, #128]	; (8005328 <log_save+0x204>)
 80052a8:	f7fb ff32 	bl	8001110 <SD_writeToFile>
	}


	logBufferIndex = 0;
 80052ac:	4b1b      	ldr	r3, [pc, #108]	; (800531c <log_save+0x1f8>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 80052b2:	4b20      	ldr	r3, [pc, #128]	; (8005334 <log_save+0x210>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 80052b8:	4b21      	ldr	r3, [pc, #132]	; (8005340 <log_save+0x21c>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 80052be:	4b23      	ldr	r3, [pc, #140]	; (800534c <log_save+0x228>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 80052c4:	4b24      	ldr	r3, [pc, #144]	; (8005358 <log_save+0x234>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 80052ca:	4b26      	ldr	r3, [pc, #152]	; (8005364 <log_save+0x240>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	801a      	strh	r2, [r3, #0]
	memset(logBuffer, 0x00, 1024);
 80052d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052d4:	2100      	movs	r1, #0
 80052d6:	4816      	ldr	r0, [pc, #88]	; (8005330 <log_save+0x20c>)
 80052d8:	f00f fc87 	bl	8014bea <memset>
	memset(bmpBuffer, 0x00, 1024);
 80052dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052e0:	2100      	movs	r1, #0
 80052e2:	4816      	ldr	r0, [pc, #88]	; (800533c <log_save+0x218>)
 80052e4:	f00f fc81 	bl	8014bea <memset>
	memset(gpsBuffer, 0x00, 1024);
 80052e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052ec:	2100      	movs	r1, #0
 80052ee:	4816      	ldr	r0, [pc, #88]	; (8005348 <log_save+0x224>)
 80052f0:	f00f fc7b 	bl	8014bea <memset>
	memset(imuBuffer, 0x00, 1024);
 80052f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052f8:	2100      	movs	r1, #0
 80052fa:	4816      	ldr	r0, [pc, #88]	; (8005354 <log_save+0x230>)
 80052fc:	f00f fc75 	bl	8014bea <memset>
	memset(motBuffer, 0x00, 1024);
 8005300:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005304:	2100      	movs	r1, #0
 8005306:	4816      	ldr	r0, [pc, #88]	; (8005360 <log_save+0x23c>)
 8005308:	f00f fc6f 	bl	8014bea <memset>
	memset(radioBuffer, 0x00, 1024);
 800530c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005310:	2100      	movs	r1, #0
 8005312:	4816      	ldr	r0, [pc, #88]	; (800536c <log_save+0x248>)
 8005314:	f00f fc69 	bl	8014bea <memset>
}
 8005318:	bf00      	nop
 800531a:	bd80      	pop	{r7, pc}
 800531c:	2000446e 	.word	0x2000446e
 8005320:	2000444c 	.word	0x2000444c
 8005324:	0801a434 	.word	0x0801a434
 8005328:	200033c8 	.word	0x200033c8
 800532c:	20002fa8 	.word	0x20002fa8
 8005330:	2000404c 	.word	0x2000404c
 8005334:	2000446c 	.word	0x2000446c
 8005338:	0801a440 	.word	0x0801a440
 800533c:	20004478 	.word	0x20004478
 8005340:	20003c48 	.word	0x20003c48
 8005344:	0801a44c 	.word	0x0801a44c
 8005348:	20002fc8 	.word	0x20002fc8
 800534c:	20004470 	.word	0x20004470
 8005350:	0801a458 	.word	0x0801a458
 8005354:	20003848 	.word	0x20003848
 8005358:	20003844 	.word	0x20003844
 800535c:	0801a464 	.word	0x0801a464
 8005360:	2000341c 	.word	0x2000341c
 8005364:	2000381c 	.word	0x2000381c
 8005368:	0801a470 	.word	0x0801a470
 800536c:	20002ba8 	.word	0x20002ba8

08005370 <log_bmp>:
		logBufferIndex = strlen(logBuffer);
	}
}

void log_bmp(BMP280* bmp)
{
 8005370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005372:	b085      	sub	sp, #20
 8005374:	af02      	add	r7, sp, #8
 8005376:	6078      	str	r0, [r7, #4]
	if (bmpBufferIndex < 1024)
 8005378:	4b1d      	ldr	r3, [pc, #116]	; (80053f0 <log_bmp+0x80>)
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005380:	d232      	bcs.n	80053e8 <log_bmp+0x78>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 8005382:	f7ff fd95 	bl	8004eb0 <millis>
 8005386:	4603      	mov	r3, r0
 8005388:	461a      	mov	r2, r3
 800538a:	491a      	ldr	r1, [pc, #104]	; (80053f4 <log_bmp+0x84>)
 800538c:	481a      	ldr	r0, [pc, #104]	; (80053f8 <log_bmp+0x88>)
 800538e:	f010 fb31 	bl	80159f4 <siprintf>
		sprintf(tempBuffer, "%.02f %.02f", bmp->pressure, bmp->temperature);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005396:	4618      	mov	r0, r3
 8005398:	f7fb f8e6 	bl	8000568 <__aeabi_f2d>
 800539c:	4605      	mov	r5, r0
 800539e:	460e      	mov	r6, r1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fb f8df 	bl	8000568 <__aeabi_f2d>
 80053aa:	4603      	mov	r3, r0
 80053ac:	460c      	mov	r4, r1
 80053ae:	e9cd 3400 	strd	r3, r4, [sp]
 80053b2:	462a      	mov	r2, r5
 80053b4:	4633      	mov	r3, r6
 80053b6:	4911      	ldr	r1, [pc, #68]	; (80053fc <log_bmp+0x8c>)
 80053b8:	4811      	ldr	r0, [pc, #68]	; (8005400 <log_bmp+0x90>)
 80053ba:	f010 fb1b 	bl	80159f4 <siprintf>
		strcat(tempBuffer, timestamp);
 80053be:	490e      	ldr	r1, [pc, #56]	; (80053f8 <log_bmp+0x88>)
 80053c0:	480f      	ldr	r0, [pc, #60]	; (8005400 <log_bmp+0x90>)
 80053c2:	f010 fb37 	bl	8015a34 <strcat>
		strcat(bmpBuffer, tempBuffer);
 80053c6:	490e      	ldr	r1, [pc, #56]	; (8005400 <log_bmp+0x90>)
 80053c8:	480e      	ldr	r0, [pc, #56]	; (8005404 <log_bmp+0x94>)
 80053ca:	f010 fb33 	bl	8015a34 <strcat>
		bmpBufferIndex = strlen(bmpBuffer);
 80053ce:	480d      	ldr	r0, [pc, #52]	; (8005404 <log_bmp+0x94>)
 80053d0:	f7fa ff08 	bl	80001e4 <strlen>
 80053d4:	4603      	mov	r3, r0
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <log_bmp+0x80>)
 80053da:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 80053dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053e0:	2100      	movs	r1, #0
 80053e2:	4807      	ldr	r0, [pc, #28]	; (8005400 <log_bmp+0x90>)
 80053e4:	f00f fc01 	bl	8014bea <memset>
	}
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f0:	2000446c 	.word	0x2000446c
 80053f4:	0801a47c 	.word	0x0801a47c
 80053f8:	20003824 	.word	0x20003824
 80053fc:	0801a484 	.word	0x0801a484
 8005400:	20003c4c 	.word	0x20003c4c
 8005404:	20004478 	.word	0x20004478

08005408 <log_gps>:
void log_gps(GPS* gps)
{
 8005408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800540a:	b085      	sub	sp, #20
 800540c:	af02      	add	r7, sp, #8
 800540e:	6078      	str	r0, [r7, #4]
	if (gpsBufferIndex < 1024)
 8005410:	4b1d      	ldr	r3, [pc, #116]	; (8005488 <log_gps+0x80>)
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005418:	d232      	bcs.n	8005480 <log_gps+0x78>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 800541a:	f7ff fd49 	bl	8004eb0 <millis>
 800541e:	4603      	mov	r3, r0
 8005420:	461a      	mov	r2, r3
 8005422:	491a      	ldr	r1, [pc, #104]	; (800548c <log_gps+0x84>)
 8005424:	481a      	ldr	r0, [pc, #104]	; (8005490 <log_gps+0x88>)
 8005426:	f010 fae5 	bl	80159f4 <siprintf>
		sprintf(tempBuffer, "%.07f %.07f", gps->latitudeDegrees, gps->longitudeDegrees);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542e:	4618      	mov	r0, r3
 8005430:	f7fb f89a 	bl	8000568 <__aeabi_f2d>
 8005434:	4605      	mov	r5, r0
 8005436:	460e      	mov	r6, r1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543c:	4618      	mov	r0, r3
 800543e:	f7fb f893 	bl	8000568 <__aeabi_f2d>
 8005442:	4603      	mov	r3, r0
 8005444:	460c      	mov	r4, r1
 8005446:	e9cd 3400 	strd	r3, r4, [sp]
 800544a:	462a      	mov	r2, r5
 800544c:	4633      	mov	r3, r6
 800544e:	4911      	ldr	r1, [pc, #68]	; (8005494 <log_gps+0x8c>)
 8005450:	4811      	ldr	r0, [pc, #68]	; (8005498 <log_gps+0x90>)
 8005452:	f010 facf 	bl	80159f4 <siprintf>
		strcat(tempBuffer, timestamp);
 8005456:	490e      	ldr	r1, [pc, #56]	; (8005490 <log_gps+0x88>)
 8005458:	480f      	ldr	r0, [pc, #60]	; (8005498 <log_gps+0x90>)
 800545a:	f010 faeb 	bl	8015a34 <strcat>
		strcat(gpsBuffer, tempBuffer);
 800545e:	490e      	ldr	r1, [pc, #56]	; (8005498 <log_gps+0x90>)
 8005460:	480e      	ldr	r0, [pc, #56]	; (800549c <log_gps+0x94>)
 8005462:	f010 fae7 	bl	8015a34 <strcat>
		gpsBufferIndex = strlen(gpsBuffer);
 8005466:	480d      	ldr	r0, [pc, #52]	; (800549c <log_gps+0x94>)
 8005468:	f7fa febc 	bl	80001e4 <strlen>
 800546c:	4603      	mov	r3, r0
 800546e:	b29a      	uxth	r2, r3
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <log_gps+0x80>)
 8005472:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8005474:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005478:	2100      	movs	r1, #0
 800547a:	4807      	ldr	r0, [pc, #28]	; (8005498 <log_gps+0x90>)
 800547c:	f00f fbb5 	bl	8014bea <memset>
	}
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005488:	20003c48 	.word	0x20003c48
 800548c:	0801a47c 	.word	0x0801a47c
 8005490:	20003824 	.word	0x20003824
 8005494:	0801a490 	.word	0x0801a490
 8005498:	20003c4c 	.word	0x20003c4c
 800549c:	20002fc8 	.word	0x20002fc8

080054a0 <log_imu>:
void log_imu(float* eulers)
{
 80054a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80054a4:	b086      	sub	sp, #24
 80054a6:	af04      	add	r7, sp, #16
 80054a8:	6078      	str	r0, [r7, #4]
	if (imuBufferIndex < 1024)
 80054aa:	4b24      	ldr	r3, [pc, #144]	; (800553c <log_imu+0x9c>)
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b2:	d23d      	bcs.n	8005530 <log_imu+0x90>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 80054b4:	f7ff fcfc 	bl	8004eb0 <millis>
 80054b8:	4603      	mov	r3, r0
 80054ba:	461a      	mov	r2, r3
 80054bc:	4920      	ldr	r1, [pc, #128]	; (8005540 <log_imu+0xa0>)
 80054be:	4821      	ldr	r0, [pc, #132]	; (8005544 <log_imu+0xa4>)
 80054c0:	f010 fa98 	bl	80159f4 <siprintf>
		sprintf(tempBuffer, "%.02f %.02f %.02f", eulers[0], eulers[1], eulers[2]);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fb f84d 	bl	8000568 <__aeabi_f2d>
 80054ce:	4680      	mov	r8, r0
 80054d0:	4689      	mov	r9, r1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3304      	adds	r3, #4
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fb f845 	bl	8000568 <__aeabi_f2d>
 80054de:	4604      	mov	r4, r0
 80054e0:	460d      	mov	r5, r1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3308      	adds	r3, #8
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fb f83d 	bl	8000568 <__aeabi_f2d>
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80054f6:	e9cd 4500 	strd	r4, r5, [sp]
 80054fa:	4642      	mov	r2, r8
 80054fc:	464b      	mov	r3, r9
 80054fe:	4912      	ldr	r1, [pc, #72]	; (8005548 <log_imu+0xa8>)
 8005500:	4812      	ldr	r0, [pc, #72]	; (800554c <log_imu+0xac>)
 8005502:	f010 fa77 	bl	80159f4 <siprintf>
		strcat(tempBuffer, timestamp);
 8005506:	490f      	ldr	r1, [pc, #60]	; (8005544 <log_imu+0xa4>)
 8005508:	4810      	ldr	r0, [pc, #64]	; (800554c <log_imu+0xac>)
 800550a:	f010 fa93 	bl	8015a34 <strcat>
		strcat(imuBuffer, tempBuffer);
 800550e:	490f      	ldr	r1, [pc, #60]	; (800554c <log_imu+0xac>)
 8005510:	480f      	ldr	r0, [pc, #60]	; (8005550 <log_imu+0xb0>)
 8005512:	f010 fa8f 	bl	8015a34 <strcat>
		imuBufferIndex = strlen(imuBuffer);
 8005516:	480e      	ldr	r0, [pc, #56]	; (8005550 <log_imu+0xb0>)
 8005518:	f7fa fe64 	bl	80001e4 <strlen>
 800551c:	4603      	mov	r3, r0
 800551e:	b29a      	uxth	r2, r3
 8005520:	4b06      	ldr	r3, [pc, #24]	; (800553c <log_imu+0x9c>)
 8005522:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8005524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005528:	2100      	movs	r1, #0
 800552a:	4808      	ldr	r0, [pc, #32]	; (800554c <log_imu+0xac>)
 800552c:	f00f fb5d 	bl	8014bea <memset>
	}
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800553a:	bf00      	nop
 800553c:	20004470 	.word	0x20004470
 8005540:	0801a47c 	.word	0x0801a47c
 8005544:	20003824 	.word	0x20003824
 8005548:	0801a49c 	.word	0x0801a49c
 800554c:	20003c4c 	.word	0x20003c4c
 8005550:	20003848 	.word	0x20003848

08005554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005558:	4b0e      	ldr	r3, [pc, #56]	; (8005594 <HAL_Init+0x40>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a0d      	ldr	r2, [pc, #52]	; (8005594 <HAL_Init+0x40>)
 800555e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005564:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <HAL_Init+0x40>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a0a      	ldr	r2, [pc, #40]	; (8005594 <HAL_Init+0x40>)
 800556a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800556e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005570:	4b08      	ldr	r3, [pc, #32]	; (8005594 <HAL_Init+0x40>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a07      	ldr	r2, [pc, #28]	; (8005594 <HAL_Init+0x40>)
 8005576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800557a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800557c:	2003      	movs	r0, #3
 800557e:	f000 f94d 	bl	800581c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005582:	2000      	movs	r0, #0
 8005584:	f000 f808 	bl	8005598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005588:	f00e fa10 	bl	80139ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	40023c00 	.word	0x40023c00

08005598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80055a0:	4b12      	ldr	r3, [pc, #72]	; (80055ec <HAL_InitTick+0x54>)
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <HAL_InitTick+0x58>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	4619      	mov	r1, r3
 80055aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80055b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f965 	bl	8005886 <HAL_SYSTICK_Config>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e00e      	b.n	80055e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b0f      	cmp	r3, #15
 80055ca:	d80a      	bhi.n	80055e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055cc:	2200      	movs	r2, #0
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	f04f 30ff 	mov.w	r0, #4294967295
 80055d4:	f000 f92d 	bl	8005832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80055d8:	4a06      	ldr	r2, [pc, #24]	; (80055f4 <HAL_InitTick+0x5c>)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	e000      	b.n	80055e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	20000120 	.word	0x20000120
 80055f0:	20000004 	.word	0x20000004
 80055f4:	20000000 	.word	0x20000000

080055f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055fc:	4b06      	ldr	r3, [pc, #24]	; (8005618 <HAL_IncTick+0x20>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	461a      	mov	r2, r3
 8005602:	4b06      	ldr	r3, [pc, #24]	; (800561c <HAL_IncTick+0x24>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4413      	add	r3, r2
 8005608:	4a04      	ldr	r2, [pc, #16]	; (800561c <HAL_IncTick+0x24>)
 800560a:	6013      	str	r3, [r2, #0]
}
 800560c:	bf00      	nop
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	20000004 	.word	0x20000004
 800561c:	20004880 	.word	0x20004880

08005620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  return uwTick;
 8005624:	4b03      	ldr	r3, [pc, #12]	; (8005634 <HAL_GetTick+0x14>)
 8005626:	681b      	ldr	r3, [r3, #0]
}
 8005628:	4618      	mov	r0, r3
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20004880 	.word	0x20004880

08005638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005640:	f7ff ffee 	bl	8005620 <HAL_GetTick>
 8005644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005650:	d005      	beq.n	800565e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005652:	4b09      	ldr	r3, [pc, #36]	; (8005678 <HAL_Delay+0x40>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800565e:	bf00      	nop
 8005660:	f7ff ffde 	bl	8005620 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	429a      	cmp	r2, r3
 800566e:	d8f7      	bhi.n	8005660 <HAL_Delay+0x28>
  {
  }
}
 8005670:	bf00      	nop
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20000004 	.word	0x20000004

0800567c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800568c:	4b0c      	ldr	r3, [pc, #48]	; (80056c0 <__NVIC_SetPriorityGrouping+0x44>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005698:	4013      	ands	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056ae:	4a04      	ldr	r2, [pc, #16]	; (80056c0 <__NVIC_SetPriorityGrouping+0x44>)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	60d3      	str	r3, [r2, #12]
}
 80056b4:	bf00      	nop
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	e000ed00 	.word	0xe000ed00

080056c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056c8:	4b04      	ldr	r3, [pc, #16]	; (80056dc <__NVIC_GetPriorityGrouping+0x18>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	0a1b      	lsrs	r3, r3, #8
 80056ce:	f003 0307 	and.w	r3, r3, #7
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	e000ed00 	.word	0xe000ed00

080056e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	db0b      	blt.n	800570a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	f003 021f 	and.w	r2, r3, #31
 80056f8:	4907      	ldr	r1, [pc, #28]	; (8005718 <__NVIC_EnableIRQ+0x38>)
 80056fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	2001      	movs	r0, #1
 8005702:	fa00 f202 	lsl.w	r2, r0, r2
 8005706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	e000e100 	.word	0xe000e100

0800571c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	6039      	str	r1, [r7, #0]
 8005726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800572c:	2b00      	cmp	r3, #0
 800572e:	db0a      	blt.n	8005746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	b2da      	uxtb	r2, r3
 8005734:	490c      	ldr	r1, [pc, #48]	; (8005768 <__NVIC_SetPriority+0x4c>)
 8005736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573a:	0112      	lsls	r2, r2, #4
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	440b      	add	r3, r1
 8005740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005744:	e00a      	b.n	800575c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	b2da      	uxtb	r2, r3
 800574a:	4908      	ldr	r1, [pc, #32]	; (800576c <__NVIC_SetPriority+0x50>)
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	3b04      	subs	r3, #4
 8005754:	0112      	lsls	r2, r2, #4
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	440b      	add	r3, r1
 800575a:	761a      	strb	r2, [r3, #24]
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	e000e100 	.word	0xe000e100
 800576c:	e000ed00 	.word	0xe000ed00

08005770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005770:	b480      	push	{r7}
 8005772:	b089      	sub	sp, #36	; 0x24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f1c3 0307 	rsb	r3, r3, #7
 800578a:	2b04      	cmp	r3, #4
 800578c:	bf28      	it	cs
 800578e:	2304      	movcs	r3, #4
 8005790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	3304      	adds	r3, #4
 8005796:	2b06      	cmp	r3, #6
 8005798:	d902      	bls.n	80057a0 <NVIC_EncodePriority+0x30>
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	3b03      	subs	r3, #3
 800579e:	e000      	b.n	80057a2 <NVIC_EncodePriority+0x32>
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a4:	f04f 32ff 	mov.w	r2, #4294967295
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	fa02 f303 	lsl.w	r3, r2, r3
 80057ae:	43da      	mvns	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	401a      	ands	r2, r3
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057b8:	f04f 31ff 	mov.w	r1, #4294967295
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	fa01 f303 	lsl.w	r3, r1, r3
 80057c2:	43d9      	mvns	r1, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057c8:	4313      	orrs	r3, r2
         );
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3724      	adds	r7, #36	; 0x24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057e8:	d301      	bcc.n	80057ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057ea:	2301      	movs	r3, #1
 80057ec:	e00f      	b.n	800580e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057ee:	4a0a      	ldr	r2, [pc, #40]	; (8005818 <SysTick_Config+0x40>)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057f6:	210f      	movs	r1, #15
 80057f8:	f04f 30ff 	mov.w	r0, #4294967295
 80057fc:	f7ff ff8e 	bl	800571c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005800:	4b05      	ldr	r3, [pc, #20]	; (8005818 <SysTick_Config+0x40>)
 8005802:	2200      	movs	r2, #0
 8005804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005806:	4b04      	ldr	r3, [pc, #16]	; (8005818 <SysTick_Config+0x40>)
 8005808:	2207      	movs	r2, #7
 800580a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	e000e010 	.word	0xe000e010

0800581c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7ff ff29 	bl	800567c <__NVIC_SetPriorityGrouping>
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005832:	b580      	push	{r7, lr}
 8005834:	b086      	sub	sp, #24
 8005836:	af00      	add	r7, sp, #0
 8005838:	4603      	mov	r3, r0
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	607a      	str	r2, [r7, #4]
 800583e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005844:	f7ff ff3e 	bl	80056c4 <__NVIC_GetPriorityGrouping>
 8005848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	6978      	ldr	r0, [r7, #20]
 8005850:	f7ff ff8e 	bl	8005770 <NVIC_EncodePriority>
 8005854:	4602      	mov	r2, r0
 8005856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800585a:	4611      	mov	r1, r2
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff ff5d 	bl	800571c <__NVIC_SetPriority>
}
 8005862:	bf00      	nop
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b082      	sub	sp, #8
 800586e:	af00      	add	r7, sp, #0
 8005870:	4603      	mov	r3, r0
 8005872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005878:	4618      	mov	r0, r3
 800587a:	f7ff ff31 	bl	80056e0 <__NVIC_EnableIRQ>
}
 800587e:	bf00      	nop
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b082      	sub	sp, #8
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7ff ffa2 	bl	80057d8 <SysTick_Config>
 8005894:	4603      	mov	r3, r0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80058ac:	f7ff feb8 	bl	8005620 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e099      	b.n	80059f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0201 	bic.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058dc:	e00f      	b.n	80058fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058de:	f7ff fe9f 	bl	8005620 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b05      	cmp	r3, #5
 80058ea:	d908      	bls.n	80058fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2203      	movs	r2, #3
 80058f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e078      	b.n	80059f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e8      	bne.n	80058de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4b38      	ldr	r3, [pc, #224]	; (80059f8 <HAL_DMA_Init+0x158>)
 8005918:	4013      	ands	r3, r2
 800591a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800592a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005936:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005942:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	2b04      	cmp	r3, #4
 8005956:	d107      	bne.n	8005968 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	4313      	orrs	r3, r2
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f023 0307 	bic.w	r3, r3, #7
 800597e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	2b04      	cmp	r3, #4
 8005990:	d117      	bne.n	80059c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	4313      	orrs	r3, r2
 800599a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00e      	beq.n	80059c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fa99 	bl	8005edc <DMA_CheckFifoParam>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2240      	movs	r2, #64	; 0x40
 80059b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80059be:	2301      	movs	r3, #1
 80059c0:	e016      	b.n	80059f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fa50 	bl	8005e70 <DMA_CalcBaseAndBitshift>
 80059d0:	4603      	mov	r3, r0
 80059d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d8:	223f      	movs	r2, #63	; 0x3f
 80059da:	409a      	lsls	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	f010803f 	.word	0xf010803f

080059fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_DMA_Start_IT+0x26>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e048      	b.n	8005ab4 <HAL_DMA_Start_IT+0xb8>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d137      	bne.n	8005aa6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2202      	movs	r2, #2
 8005a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 f9e2 	bl	8005e14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a54:	223f      	movs	r2, #63	; 0x3f
 8005a56:	409a      	lsls	r2, r3
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0216 	orr.w	r2, r2, #22
 8005a6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695a      	ldr	r2, [r3, #20]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a7a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d007      	beq.n	8005a94 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0208 	orr.w	r2, r2, #8
 8005a92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	e005      	b.n	8005ab2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005aae:	2302      	movs	r3, #2
 8005ab0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d004      	beq.n	8005ada <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2280      	movs	r2, #128	; 0x80
 8005ad4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e00c      	b.n	8005af4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2205      	movs	r2, #5
 8005ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0201 	bic.w	r2, r2, #1
 8005af0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b0c:	4b92      	ldr	r3, [pc, #584]	; (8005d58 <HAL_DMA_IRQHandler+0x258>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a92      	ldr	r2, [pc, #584]	; (8005d5c <HAL_DMA_IRQHandler+0x25c>)
 8005b12:	fba2 2303 	umull	r2, r3, r2, r3
 8005b16:	0a9b      	lsrs	r3, r3, #10
 8005b18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2a:	2208      	movs	r2, #8
 8005b2c:	409a      	lsls	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4013      	ands	r3, r2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d01a      	beq.n	8005b6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d013      	beq.n	8005b6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0204 	bic.w	r2, r2, #4
 8005b52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b58:	2208      	movs	r2, #8
 8005b5a:	409a      	lsls	r2, r3
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b64:	f043 0201 	orr.w	r2, r3, #1
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b70:	2201      	movs	r2, #1
 8005b72:	409a      	lsls	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4013      	ands	r3, r2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d012      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00b      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b8e:	2201      	movs	r2, #1
 8005b90:	409a      	lsls	r2, r3
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9a:	f043 0202 	orr.w	r2, r3, #2
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba6:	2204      	movs	r2, #4
 8005ba8:	409a      	lsls	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4013      	ands	r3, r2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d012      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc4:	2204      	movs	r2, #4
 8005bc6:	409a      	lsls	r2, r3
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd0:	f043 0204 	orr.w	r2, r3, #4
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bdc:	2210      	movs	r2, #16
 8005bde:	409a      	lsls	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d043      	beq.n	8005c70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d03c      	beq.n	8005c70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfa:	2210      	movs	r2, #16
 8005bfc:	409a      	lsls	r2, r3
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d018      	beq.n	8005c42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d108      	bne.n	8005c30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d024      	beq.n	8005c70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	4798      	blx	r3
 8005c2e:	e01f      	b.n	8005c70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01b      	beq.n	8005c70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	4798      	blx	r3
 8005c40:	e016      	b.n	8005c70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d107      	bne.n	8005c60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0208 	bic.w	r2, r2, #8
 8005c5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c74:	2220      	movs	r2, #32
 8005c76:	409a      	lsls	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 808e 	beq.w	8005d9e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0310 	and.w	r3, r3, #16
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8086 	beq.w	8005d9e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c96:	2220      	movs	r2, #32
 8005c98:	409a      	lsls	r2, r3
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b05      	cmp	r3, #5
 8005ca8:	d136      	bne.n	8005d18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0216 	bic.w	r2, r2, #22
 8005cb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	695a      	ldr	r2, [r3, #20]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <HAL_DMA_IRQHandler+0x1da>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0208 	bic.w	r2, r2, #8
 8005ce8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cee:	223f      	movs	r2, #63	; 0x3f
 8005cf0:	409a      	lsls	r2, r3
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d07d      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	4798      	blx	r3
        }
        return;
 8005d16:	e078      	b.n	8005e0a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d01c      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d108      	bne.n	8005d46 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d030      	beq.n	8005d9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	4798      	blx	r3
 8005d44:	e02b      	b.n	8005d9e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d027      	beq.n	8005d9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	4798      	blx	r3
 8005d56:	e022      	b.n	8005d9e <HAL_DMA_IRQHandler+0x29e>
 8005d58:	20000120 	.word	0x20000120
 8005d5c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10f      	bne.n	8005d8e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0210 	bic.w	r2, r2, #16
 8005d7c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d032      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d022      	beq.n	8005df8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2205      	movs	r2, #5
 8005db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0201 	bic.w	r2, r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	60bb      	str	r3, [r7, #8]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d307      	bcc.n	8005de6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1f2      	bne.n	8005dca <HAL_DMA_IRQHandler+0x2ca>
 8005de4:	e000      	b.n	8005de8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005de6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	4798      	blx	r3
 8005e08:	e000      	b.n	8005e0c <HAL_DMA_IRQHandler+0x30c>
        return;
 8005e0a:	bf00      	nop
    }
  }
}
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop

08005e14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	2b40      	cmp	r3, #64	; 0x40
 8005e40:	d108      	bne.n	8005e54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e52:	e007      	b.n	8005e64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	60da      	str	r2, [r3, #12]
}
 8005e64:	bf00      	nop
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	3b10      	subs	r3, #16
 8005e80:	4a14      	ldr	r2, [pc, #80]	; (8005ed4 <DMA_CalcBaseAndBitshift+0x64>)
 8005e82:	fba2 2303 	umull	r2, r3, r2, r3
 8005e86:	091b      	lsrs	r3, r3, #4
 8005e88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e8a:	4a13      	ldr	r2, [pc, #76]	; (8005ed8 <DMA_CalcBaseAndBitshift+0x68>)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	461a      	mov	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d909      	bls.n	8005eb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ea6:	f023 0303 	bic.w	r3, r3, #3
 8005eaa:	1d1a      	adds	r2, r3, #4
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	659a      	str	r2, [r3, #88]	; 0x58
 8005eb0:	e007      	b.n	8005ec2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005eba:	f023 0303 	bic.w	r3, r3, #3
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	aaaaaaab 	.word	0xaaaaaaab
 8005ed8:	0801aaa4 	.word	0x0801aaa4

08005edc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d11f      	bne.n	8005f36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d855      	bhi.n	8005fa8 <DMA_CheckFifoParam+0xcc>
 8005efc:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <DMA_CheckFifoParam+0x28>)
 8005efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f02:	bf00      	nop
 8005f04:	08005f15 	.word	0x08005f15
 8005f08:	08005f27 	.word	0x08005f27
 8005f0c:	08005f15 	.word	0x08005f15
 8005f10:	08005fa9 	.word	0x08005fa9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d045      	beq.n	8005fac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f24:	e042      	b.n	8005fac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f2e:	d13f      	bne.n	8005fb0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f34:	e03c      	b.n	8005fb0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f3e:	d121      	bne.n	8005f84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d836      	bhi.n	8005fb4 <DMA_CheckFifoParam+0xd8>
 8005f46:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <DMA_CheckFifoParam+0x70>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005f5d 	.word	0x08005f5d
 8005f50:	08005f63 	.word	0x08005f63
 8005f54:	08005f5d 	.word	0x08005f5d
 8005f58:	08005f75 	.word	0x08005f75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f60:	e02f      	b.n	8005fc2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d024      	beq.n	8005fb8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f72:	e021      	b.n	8005fb8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f7c:	d11e      	bne.n	8005fbc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005f82:	e01b      	b.n	8005fbc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d902      	bls.n	8005f90 <DMA_CheckFifoParam+0xb4>
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d003      	beq.n	8005f96 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005f8e:	e018      	b.n	8005fc2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	73fb      	strb	r3, [r7, #15]
      break;
 8005f94:	e015      	b.n	8005fc2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00e      	beq.n	8005fc0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa6:	e00b      	b.n	8005fc0 <DMA_CheckFifoParam+0xe4>
      break;
 8005fa8:	bf00      	nop
 8005faa:	e00a      	b.n	8005fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8005fac:	bf00      	nop
 8005fae:	e008      	b.n	8005fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8005fb0:	bf00      	nop
 8005fb2:	e006      	b.n	8005fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8005fb4:	bf00      	nop
 8005fb6:	e004      	b.n	8005fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8005fb8:	bf00      	nop
 8005fba:	e002      	b.n	8005fc2 <DMA_CheckFifoParam+0xe6>
      break;   
 8005fbc:	bf00      	nop
 8005fbe:	e000      	b.n	8005fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8005fc0:	bf00      	nop
    }
  } 
  
  return status; 
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b089      	sub	sp, #36	; 0x24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	61fb      	str	r3, [r7, #28]
 8005fea:	e16b      	b.n	80062c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005fec:	2201      	movs	r2, #1
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	429a      	cmp	r2, r3
 8006006:	f040 815a 	bne.w	80062be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2b02      	cmp	r3, #2
 8006010:	d003      	beq.n	800601a <HAL_GPIO_Init+0x4a>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2b12      	cmp	r3, #18
 8006018:	d123      	bne.n	8006062 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	08da      	lsrs	r2, r3, #3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3208      	adds	r2, #8
 8006022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	220f      	movs	r2, #15
 8006032:	fa02 f303 	lsl.w	r3, r2, r3
 8006036:	43db      	mvns	r3, r3
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	4013      	ands	r3, r2
 800603c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	691a      	ldr	r2, [r3, #16]
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	fa02 f303 	lsl.w	r3, r2, r3
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	4313      	orrs	r3, r2
 8006052:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	08da      	lsrs	r2, r3, #3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3208      	adds	r2, #8
 800605c:	69b9      	ldr	r1, [r7, #24]
 800605e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	2203      	movs	r2, #3
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	43db      	mvns	r3, r3
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	4013      	ands	r3, r2
 8006078:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f003 0203 	and.w	r2, r3, #3
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	fa02 f303 	lsl.w	r3, r2, r3
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	4313      	orrs	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d00b      	beq.n	80060b6 <HAL_GPIO_Init+0xe6>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d007      	beq.n	80060b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80060aa:	2b11      	cmp	r3, #17
 80060ac:	d003      	beq.n	80060b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	2b12      	cmp	r3, #18
 80060b4:	d130      	bne.n	8006118 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	2203      	movs	r2, #3
 80060c2:	fa02 f303 	lsl.w	r3, r2, r3
 80060c6:	43db      	mvns	r3, r3
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	4013      	ands	r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	fa02 f303 	lsl.w	r3, r2, r3
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	4313      	orrs	r3, r2
 80060de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060ec:	2201      	movs	r2, #1
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	fa02 f303 	lsl.w	r3, r2, r3
 80060f4:	43db      	mvns	r3, r3
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	4013      	ands	r3, r2
 80060fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	091b      	lsrs	r3, r3, #4
 8006102:	f003 0201 	and.w	r2, r3, #1
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	4313      	orrs	r3, r2
 8006110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	2203      	movs	r2, #3
 8006124:	fa02 f303 	lsl.w	r3, r2, r3
 8006128:	43db      	mvns	r3, r3
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	4013      	ands	r3, r2
 800612e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	fa02 f303 	lsl.w	r3, r2, r3
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	4313      	orrs	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80b4 	beq.w	80062be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	4b5f      	ldr	r3, [pc, #380]	; (80062d8 <HAL_GPIO_Init+0x308>)
 800615c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615e:	4a5e      	ldr	r2, [pc, #376]	; (80062d8 <HAL_GPIO_Init+0x308>)
 8006160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006164:	6453      	str	r3, [r2, #68]	; 0x44
 8006166:	4b5c      	ldr	r3, [pc, #368]	; (80062d8 <HAL_GPIO_Init+0x308>)
 8006168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006172:	4a5a      	ldr	r2, [pc, #360]	; (80062dc <HAL_GPIO_Init+0x30c>)
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	089b      	lsrs	r3, r3, #2
 8006178:	3302      	adds	r3, #2
 800617a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800617e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	220f      	movs	r2, #15
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	43db      	mvns	r3, r3
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	4013      	ands	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a51      	ldr	r2, [pc, #324]	; (80062e0 <HAL_GPIO_Init+0x310>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d02b      	beq.n	80061f6 <HAL_GPIO_Init+0x226>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a50      	ldr	r2, [pc, #320]	; (80062e4 <HAL_GPIO_Init+0x314>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d025      	beq.n	80061f2 <HAL_GPIO_Init+0x222>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a4f      	ldr	r2, [pc, #316]	; (80062e8 <HAL_GPIO_Init+0x318>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d01f      	beq.n	80061ee <HAL_GPIO_Init+0x21e>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a4e      	ldr	r2, [pc, #312]	; (80062ec <HAL_GPIO_Init+0x31c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d019      	beq.n	80061ea <HAL_GPIO_Init+0x21a>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a4d      	ldr	r2, [pc, #308]	; (80062f0 <HAL_GPIO_Init+0x320>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d013      	beq.n	80061e6 <HAL_GPIO_Init+0x216>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a4c      	ldr	r2, [pc, #304]	; (80062f4 <HAL_GPIO_Init+0x324>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00d      	beq.n	80061e2 <HAL_GPIO_Init+0x212>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a4b      	ldr	r2, [pc, #300]	; (80062f8 <HAL_GPIO_Init+0x328>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d007      	beq.n	80061de <HAL_GPIO_Init+0x20e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a4a      	ldr	r2, [pc, #296]	; (80062fc <HAL_GPIO_Init+0x32c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d101      	bne.n	80061da <HAL_GPIO_Init+0x20a>
 80061d6:	2307      	movs	r3, #7
 80061d8:	e00e      	b.n	80061f8 <HAL_GPIO_Init+0x228>
 80061da:	2308      	movs	r3, #8
 80061dc:	e00c      	b.n	80061f8 <HAL_GPIO_Init+0x228>
 80061de:	2306      	movs	r3, #6
 80061e0:	e00a      	b.n	80061f8 <HAL_GPIO_Init+0x228>
 80061e2:	2305      	movs	r3, #5
 80061e4:	e008      	b.n	80061f8 <HAL_GPIO_Init+0x228>
 80061e6:	2304      	movs	r3, #4
 80061e8:	e006      	b.n	80061f8 <HAL_GPIO_Init+0x228>
 80061ea:	2303      	movs	r3, #3
 80061ec:	e004      	b.n	80061f8 <HAL_GPIO_Init+0x228>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e002      	b.n	80061f8 <HAL_GPIO_Init+0x228>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <HAL_GPIO_Init+0x228>
 80061f6:	2300      	movs	r3, #0
 80061f8:	69fa      	ldr	r2, [r7, #28]
 80061fa:	f002 0203 	and.w	r2, r2, #3
 80061fe:	0092      	lsls	r2, r2, #2
 8006200:	4093      	lsls	r3, r2
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	4313      	orrs	r3, r2
 8006206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006208:	4934      	ldr	r1, [pc, #208]	; (80062dc <HAL_GPIO_Init+0x30c>)
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	089b      	lsrs	r3, r3, #2
 800620e:	3302      	adds	r3, #2
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006216:	4b3a      	ldr	r3, [pc, #232]	; (8006300 <HAL_GPIO_Init+0x330>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	43db      	mvns	r3, r3
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	4013      	ands	r3, r2
 8006224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800623a:	4a31      	ldr	r2, [pc, #196]	; (8006300 <HAL_GPIO_Init+0x330>)
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006240:	4b2f      	ldr	r3, [pc, #188]	; (8006300 <HAL_GPIO_Init+0x330>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	43db      	mvns	r3, r3
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	4013      	ands	r3, r2
 800624e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006264:	4a26      	ldr	r2, [pc, #152]	; (8006300 <HAL_GPIO_Init+0x330>)
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800626a:	4b25      	ldr	r3, [pc, #148]	; (8006300 <HAL_GPIO_Init+0x330>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	43db      	mvns	r3, r3
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4013      	ands	r3, r2
 8006278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800628e:	4a1c      	ldr	r2, [pc, #112]	; (8006300 <HAL_GPIO_Init+0x330>)
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006294:	4b1a      	ldr	r3, [pc, #104]	; (8006300 <HAL_GPIO_Init+0x330>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	43db      	mvns	r3, r3
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	4013      	ands	r3, r2
 80062a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062b8:	4a11      	ldr	r2, [pc, #68]	; (8006300 <HAL_GPIO_Init+0x330>)
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	3301      	adds	r3, #1
 80062c2:	61fb      	str	r3, [r7, #28]
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	2b0f      	cmp	r3, #15
 80062c8:	f67f ae90 	bls.w	8005fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80062cc:	bf00      	nop
 80062ce:	3724      	adds	r7, #36	; 0x24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	40023800 	.word	0x40023800
 80062dc:	40013800 	.word	0x40013800
 80062e0:	40020000 	.word	0x40020000
 80062e4:	40020400 	.word	0x40020400
 80062e8:	40020800 	.word	0x40020800
 80062ec:	40020c00 	.word	0x40020c00
 80062f0:	40021000 	.word	0x40021000
 80062f4:	40021400 	.word	0x40021400
 80062f8:	40021800 	.word	0x40021800
 80062fc:	40021c00 	.word	0x40021c00
 8006300:	40013c00 	.word	0x40013c00

08006304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	887b      	ldrh	r3, [r7, #2]
 8006316:	4013      	ands	r3, r2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]
 8006320:	e001      	b.n	8006326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	807b      	strh	r3, [r7, #2]
 8006340:	4613      	mov	r3, r2
 8006342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006344:	787b      	ldrb	r3, [r7, #1]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800634a:	887a      	ldrh	r2, [r7, #2]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006350:	e003      	b.n	800635a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006352:	887b      	ldrh	r3, [r7, #2]
 8006354:	041a      	lsls	r2, r3, #16
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	619a      	str	r2, [r3, #24]
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
	...

08006368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e10f      	b.n	800659a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f00d fb34 	bl	80139fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2224      	movs	r2, #36	; 0x24
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0201 	bic.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80063ac:	f002 fcc8 	bl	8008d40 <HAL_RCC_GetPCLK1Freq>
 80063b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	4a7b      	ldr	r2, [pc, #492]	; (80065a4 <HAL_I2C_Init+0x23c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d807      	bhi.n	80063cc <HAL_I2C_Init+0x64>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4a7a      	ldr	r2, [pc, #488]	; (80065a8 <HAL_I2C_Init+0x240>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	bf94      	ite	ls
 80063c4:	2301      	movls	r3, #1
 80063c6:	2300      	movhi	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	e006      	b.n	80063da <HAL_I2C_Init+0x72>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4a77      	ldr	r2, [pc, #476]	; (80065ac <HAL_I2C_Init+0x244>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	bf94      	ite	ls
 80063d4:	2301      	movls	r3, #1
 80063d6:	2300      	movhi	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e0db      	b.n	800659a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4a72      	ldr	r2, [pc, #456]	; (80065b0 <HAL_I2C_Init+0x248>)
 80063e6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ea:	0c9b      	lsrs	r3, r3, #18
 80063ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	430a      	orrs	r2, r1
 8006400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6a1b      	ldr	r3, [r3, #32]
 8006408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	4a64      	ldr	r2, [pc, #400]	; (80065a4 <HAL_I2C_Init+0x23c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d802      	bhi.n	800641c <HAL_I2C_Init+0xb4>
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	3301      	adds	r3, #1
 800641a:	e009      	b.n	8006430 <HAL_I2C_Init+0xc8>
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006422:	fb02 f303 	mul.w	r3, r2, r3
 8006426:	4a63      	ldr	r2, [pc, #396]	; (80065b4 <HAL_I2C_Init+0x24c>)
 8006428:	fba2 2303 	umull	r2, r3, r2, r3
 800642c:	099b      	lsrs	r3, r3, #6
 800642e:	3301      	adds	r3, #1
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6812      	ldr	r2, [r2, #0]
 8006434:	430b      	orrs	r3, r1
 8006436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006442:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	4956      	ldr	r1, [pc, #344]	; (80065a4 <HAL_I2C_Init+0x23c>)
 800644c:	428b      	cmp	r3, r1
 800644e:	d80d      	bhi.n	800646c <HAL_I2C_Init+0x104>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	1e59      	subs	r1, r3, #1
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	fbb1 f3f3 	udiv	r3, r1, r3
 800645e:	3301      	adds	r3, #1
 8006460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006464:	2b04      	cmp	r3, #4
 8006466:	bf38      	it	cc
 8006468:	2304      	movcc	r3, #4
 800646a:	e04f      	b.n	800650c <HAL_I2C_Init+0x1a4>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d111      	bne.n	8006498 <HAL_I2C_Init+0x130>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	1e58      	subs	r0, r3, #1
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6859      	ldr	r1, [r3, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	440b      	add	r3, r1
 8006482:	fbb0 f3f3 	udiv	r3, r0, r3
 8006486:	3301      	adds	r3, #1
 8006488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800648c:	2b00      	cmp	r3, #0
 800648e:	bf0c      	ite	eq
 8006490:	2301      	moveq	r3, #1
 8006492:	2300      	movne	r3, #0
 8006494:	b2db      	uxtb	r3, r3
 8006496:	e012      	b.n	80064be <HAL_I2C_Init+0x156>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	1e58      	subs	r0, r3, #1
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6859      	ldr	r1, [r3, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	440b      	add	r3, r1
 80064a6:	0099      	lsls	r1, r3, #2
 80064a8:	440b      	add	r3, r1
 80064aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80064ae:	3301      	adds	r3, #1
 80064b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	bf0c      	ite	eq
 80064b8:	2301      	moveq	r3, #1
 80064ba:	2300      	movne	r3, #0
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <HAL_I2C_Init+0x15e>
 80064c2:	2301      	movs	r3, #1
 80064c4:	e022      	b.n	800650c <HAL_I2C_Init+0x1a4>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10e      	bne.n	80064ec <HAL_I2C_Init+0x184>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	1e58      	subs	r0, r3, #1
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6859      	ldr	r1, [r3, #4]
 80064d6:	460b      	mov	r3, r1
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	440b      	add	r3, r1
 80064dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80064e0:	3301      	adds	r3, #1
 80064e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ea:	e00f      	b.n	800650c <HAL_I2C_Init+0x1a4>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	1e58      	subs	r0, r3, #1
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6859      	ldr	r1, [r3, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	440b      	add	r3, r1
 80064fa:	0099      	lsls	r1, r3, #2
 80064fc:	440b      	add	r3, r1
 80064fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006502:	3301      	adds	r3, #1
 8006504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	6809      	ldr	r1, [r1, #0]
 8006510:	4313      	orrs	r3, r2
 8006512:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69da      	ldr	r2, [r3, #28]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	431a      	orrs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800653a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6911      	ldr	r1, [r2, #16]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	68d2      	ldr	r2, [r2, #12]
 8006546:	4311      	orrs	r1, r2
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	430b      	orrs	r3, r1
 800654e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695a      	ldr	r2, [r3, #20]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0201 	orr.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2220      	movs	r2, #32
 8006586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	000186a0 	.word	0x000186a0
 80065a8:	001e847f 	.word	0x001e847f
 80065ac:	003d08ff 	.word	0x003d08ff
 80065b0:	431bde83 	.word	0x431bde83
 80065b4:	10624dd3 	.word	0x10624dd3

080065b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b088      	sub	sp, #32
 80065bc:	af02      	add	r7, sp, #8
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	4608      	mov	r0, r1
 80065c2:	4611      	mov	r1, r2
 80065c4:	461a      	mov	r2, r3
 80065c6:	4603      	mov	r3, r0
 80065c8:	817b      	strh	r3, [r7, #10]
 80065ca:	460b      	mov	r3, r1
 80065cc:	813b      	strh	r3, [r7, #8]
 80065ce:	4613      	mov	r3, r2
 80065d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065d2:	f7ff f825 	bl	8005620 <HAL_GetTick>
 80065d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	f040 80d9 	bne.w	8006798 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	2319      	movs	r3, #25
 80065ec:	2201      	movs	r2, #1
 80065ee:	496d      	ldr	r1, [pc, #436]	; (80067a4 <HAL_I2C_Mem_Write+0x1ec>)
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 fc5b 	bl	8006eac <I2C_WaitOnFlagUntilTimeout>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80065fc:	2302      	movs	r3, #2
 80065fe:	e0cc      	b.n	800679a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_I2C_Mem_Write+0x56>
 800660a:	2302      	movs	r3, #2
 800660c:	e0c5      	b.n	800679a <HAL_I2C_Mem_Write+0x1e2>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b01      	cmp	r3, #1
 8006622:	d007      	beq.n	8006634 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006642:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2221      	movs	r2, #33	; 0x21
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2240      	movs	r2, #64	; 0x40
 8006650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6a3a      	ldr	r2, [r7, #32]
 800665e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006664:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666a:	b29a      	uxth	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4a4d      	ldr	r2, [pc, #308]	; (80067a8 <HAL_I2C_Mem_Write+0x1f0>)
 8006674:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006676:	88f8      	ldrh	r0, [r7, #6]
 8006678:	893a      	ldrh	r2, [r7, #8]
 800667a:	8979      	ldrh	r1, [r7, #10]
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	4603      	mov	r3, r0
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f000 fab6 	bl	8006bf8 <I2C_RequestMemoryWrite>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d052      	beq.n	8006738 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e081      	b.n	800679a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 fcdc 	bl	8007058 <I2C_WaitOnTXEFlagUntilTimeout>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00d      	beq.n	80066c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d107      	bne.n	80066be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e06b      	b.n	800679a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	781a      	ldrb	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066dc:	3b01      	subs	r3, #1
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	3b01      	subs	r3, #1
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	d11b      	bne.n	8006738 <HAL_I2C_Mem_Write+0x180>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006704:	2b00      	cmp	r3, #0
 8006706:	d017      	beq.n	8006738 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	781a      	ldrb	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006722:	3b01      	subs	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800672e:	b29b      	uxth	r3, r3
 8006730:	3b01      	subs	r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1aa      	bne.n	8006696 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 fcc8 	bl	80070da <I2C_WaitOnBTFFlagUntilTimeout>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00d      	beq.n	800676c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006754:	2b04      	cmp	r3, #4
 8006756:	d107      	bne.n	8006768 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006766:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e016      	b.n	800679a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800677a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2220      	movs	r2, #32
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	e000      	b.n	800679a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006798:	2302      	movs	r3, #2
  }
}
 800679a:	4618      	mov	r0, r3
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	00100002 	.word	0x00100002
 80067a8:	ffff0000 	.word	0xffff0000

080067ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08c      	sub	sp, #48	; 0x30
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	4608      	mov	r0, r1
 80067b6:	4611      	mov	r1, r2
 80067b8:	461a      	mov	r2, r3
 80067ba:	4603      	mov	r3, r0
 80067bc:	817b      	strh	r3, [r7, #10]
 80067be:	460b      	mov	r3, r1
 80067c0:	813b      	strh	r3, [r7, #8]
 80067c2:	4613      	mov	r3, r2
 80067c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067c6:	f7fe ff2b 	bl	8005620 <HAL_GetTick>
 80067ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	f040 8208 	bne.w	8006bea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	2319      	movs	r3, #25
 80067e0:	2201      	movs	r2, #1
 80067e2:	497b      	ldr	r1, [pc, #492]	; (80069d0 <HAL_I2C_Mem_Read+0x224>)
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 fb61 	bl	8006eac <I2C_WaitOnFlagUntilTimeout>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80067f0:	2302      	movs	r3, #2
 80067f2:	e1fb      	b.n	8006bec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d101      	bne.n	8006802 <HAL_I2C_Mem_Read+0x56>
 80067fe:	2302      	movs	r3, #2
 8006800:	e1f4      	b.n	8006bec <HAL_I2C_Mem_Read+0x440>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b01      	cmp	r3, #1
 8006816:	d007      	beq.n	8006828 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0201 	orr.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006836:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2222      	movs	r2, #34	; 0x22
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2240      	movs	r2, #64	; 0x40
 8006844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006852:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006858:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685e:	b29a      	uxth	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4a5b      	ldr	r2, [pc, #364]	; (80069d4 <HAL_I2C_Mem_Read+0x228>)
 8006868:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800686a:	88f8      	ldrh	r0, [r7, #6]
 800686c:	893a      	ldrh	r2, [r7, #8]
 800686e:	8979      	ldrh	r1, [r7, #10]
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	9301      	str	r3, [sp, #4]
 8006874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	4603      	mov	r3, r0
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 fa46 	bl	8006d0c <I2C_RequestMemoryRead>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e1b0      	b.n	8006bec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800688e:	2b00      	cmp	r3, #0
 8006890:	d113      	bne.n	80068ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006892:	2300      	movs	r3, #0
 8006894:	623b      	str	r3, [r7, #32]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	623b      	str	r3, [r7, #32]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	623b      	str	r3, [r7, #32]
 80068a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	e184      	b.n	8006bc4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d11b      	bne.n	80068fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	61fb      	str	r3, [r7, #28]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	e164      	b.n	8006bc4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d11b      	bne.n	800693a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006910:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006920:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006922:	2300      	movs	r3, #0
 8006924:	61bb      	str	r3, [r7, #24]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	61bb      	str	r3, [r7, #24]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	61bb      	str	r3, [r7, #24]
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	e144      	b.n	8006bc4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800693a:	2300      	movs	r3, #0
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	617b      	str	r3, [r7, #20]
 800694e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006950:	e138      	b.n	8006bc4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006956:	2b03      	cmp	r3, #3
 8006958:	f200 80f1 	bhi.w	8006b3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006960:	2b01      	cmp	r3, #1
 8006962:	d123      	bne.n	80069ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006966:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 fbf7 	bl	800715c <I2C_WaitOnRXNEFlagUntilTimeout>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e139      	b.n	8006bec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691a      	ldr	r2, [r3, #16]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069aa:	e10b      	b.n	8006bc4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d14e      	bne.n	8006a52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	2200      	movs	r2, #0
 80069bc:	4906      	ldr	r1, [pc, #24]	; (80069d8 <HAL_I2C_Mem_Read+0x22c>)
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 fa74 	bl	8006eac <I2C_WaitOnFlagUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d008      	beq.n	80069dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e10e      	b.n	8006bec <HAL_I2C_Mem_Read+0x440>
 80069ce:	bf00      	nop
 80069d0:	00100002 	.word	0x00100002
 80069d4:	ffff0000 	.word	0xffff0000
 80069d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	691a      	ldr	r2, [r3, #16]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	691a      	ldr	r2, [r3, #16]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a50:	e0b8      	b.n	8006bc4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a58:	2200      	movs	r2, #0
 8006a5a:	4966      	ldr	r1, [pc, #408]	; (8006bf4 <HAL_I2C_Mem_Read+0x448>)
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 fa25 	bl	8006eac <I2C_WaitOnFlagUntilTimeout>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e0bf      	b.n	8006bec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691a      	ldr	r2, [r3, #16]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	1c5a      	adds	r2, r3, #1
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	494f      	ldr	r1, [pc, #316]	; (8006bf4 <HAL_I2C_Mem_Read+0x448>)
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 f9f7 	bl	8006eac <I2C_WaitOnFlagUntilTimeout>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e091      	b.n	8006bec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691a      	ldr	r2, [r3, #16]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	691a      	ldr	r2, [r3, #16]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	b2d2      	uxtb	r2, r2
 8006b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b3c:	e042      	b.n	8006bc4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 fb0a 	bl	800715c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e04c      	b.n	8006bec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	b2d2      	uxtb	r2, r2
 8006b5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d118      	bne.n	8006bc4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	691a      	ldr	r2, [r3, #16]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	b2d2      	uxtb	r2, r2
 8006b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f47f aec2 	bne.w	8006952 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	e000      	b.n	8006bec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006bea:	2302      	movs	r3, #2
  }
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3728      	adds	r7, #40	; 0x28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	00010004 	.word	0x00010004

08006bf8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b088      	sub	sp, #32
 8006bfc:	af02      	add	r7, sp, #8
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	4608      	mov	r0, r1
 8006c02:	4611      	mov	r1, r2
 8006c04:	461a      	mov	r2, r3
 8006c06:	4603      	mov	r3, r0
 8006c08:	817b      	strh	r3, [r7, #10]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	813b      	strh	r3, [r7, #8]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f93c 	bl	8006eac <I2C_WaitOnFlagUntilTimeout>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e05f      	b.n	8006cfe <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c3e:	897b      	ldrh	r3, [r7, #10]
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	461a      	mov	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	6a3a      	ldr	r2, [r7, #32]
 8006c52:	492d      	ldr	r1, [pc, #180]	; (8006d08 <I2C_RequestMemoryWrite+0x110>)
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 f980 	bl	8006f5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e04c      	b.n	8006cfe <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c64:	2300      	movs	r3, #0
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	617b      	str	r3, [r7, #20]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7c:	6a39      	ldr	r1, [r7, #32]
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 f9ea 	bl	8007058 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00d      	beq.n	8006ca6 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	d107      	bne.n	8006ca2 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ca0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e02b      	b.n	8006cfe <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ca6:	88fb      	ldrh	r3, [r7, #6]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d105      	bne.n	8006cb8 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cac:	893b      	ldrh	r3, [r7, #8]
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	611a      	str	r2, [r3, #16]
 8006cb6:	e021      	b.n	8006cfc <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006cb8:	893b      	ldrh	r3, [r7, #8]
 8006cba:	0a1b      	lsrs	r3, r3, #8
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc8:	6a39      	ldr	r1, [r7, #32]
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 f9c4 	bl	8007058 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00d      	beq.n	8006cf2 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d107      	bne.n	8006cee <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e005      	b.n	8006cfe <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cf2:	893b      	ldrh	r3, [r7, #8]
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	00010002 	.word	0x00010002

08006d0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	4608      	mov	r0, r1
 8006d16:	4611      	mov	r1, r2
 8006d18:	461a      	mov	r2, r3
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	817b      	strh	r3, [r7, #10]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	813b      	strh	r3, [r7, #8]
 8006d22:	4613      	mov	r3, r2
 8006d24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 f8aa 	bl	8006eac <I2C_WaitOnFlagUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e09e      	b.n	8006ea0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d62:	897b      	ldrh	r3, [r7, #10]
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	461a      	mov	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	6a3a      	ldr	r2, [r7, #32]
 8006d76:	494c      	ldr	r1, [pc, #304]	; (8006ea8 <I2C_RequestMemoryRead+0x19c>)
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 f8ee 	bl	8006f5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e08b      	b.n	8006ea0 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d88:	2300      	movs	r3, #0
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da0:	6a39      	ldr	r1, [r7, #32]
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 f958 	bl	8007058 <I2C_WaitOnTXEFlagUntilTimeout>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00d      	beq.n	8006dca <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d107      	bne.n	8006dc6 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e06a      	b.n	8006ea0 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006dca:	88fb      	ldrh	r3, [r7, #6]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d105      	bne.n	8006ddc <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006dd0:	893b      	ldrh	r3, [r7, #8]
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	611a      	str	r2, [r3, #16]
 8006dda:	e021      	b.n	8006e20 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ddc:	893b      	ldrh	r3, [r7, #8]
 8006dde:	0a1b      	lsrs	r3, r3, #8
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dec:	6a39      	ldr	r1, [r7, #32]
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 f932 	bl	8007058 <I2C_WaitOnTXEFlagUntilTimeout>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00d      	beq.n	8006e16 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d107      	bne.n	8006e12 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e044      	b.n	8006ea0 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e16:	893b      	ldrh	r3, [r7, #8]
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e22:	6a39      	ldr	r1, [r7, #32]
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 f917 	bl	8007058 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00d      	beq.n	8006e4c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	d107      	bne.n	8006e48 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e029      	b.n	8006ea0 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 f81f 	bl	8006eac <I2C_WaitOnFlagUntilTimeout>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e013      	b.n	8006ea0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e78:	897b      	ldrh	r3, [r7, #10]
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	f043 0301 	orr.w	r3, r3, #1
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	6a3a      	ldr	r2, [r7, #32]
 8006e8c:	4906      	ldr	r1, [pc, #24]	; (8006ea8 <I2C_RequestMemoryRead+0x19c>)
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 f863 	bl	8006f5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e000      	b.n	8006ea0 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	00010002 	.word	0x00010002

08006eac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ebc:	e025      	b.n	8006f0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec4:	d021      	beq.n	8006f0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec6:	f7fe fbab 	bl	8005620 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d302      	bcc.n	8006edc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d116      	bne.n	8006f0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	f043 0220 	orr.w	r2, r3, #32
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e023      	b.n	8006f52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	0c1b      	lsrs	r3, r3, #16
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d10d      	bne.n	8006f30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	43da      	mvns	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	4013      	ands	r3, r2
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	bf0c      	ite	eq
 8006f26:	2301      	moveq	r3, #1
 8006f28:	2300      	movne	r3, #0
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	e00c      	b.n	8006f4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	43da      	mvns	r2, r3
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	bf0c      	ite	eq
 8006f42:	2301      	moveq	r3, #1
 8006f44:	2300      	movne	r3, #0
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	79fb      	ldrb	r3, [r7, #7]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d0b6      	beq.n	8006ebe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	60f8      	str	r0, [r7, #12]
 8006f62:	60b9      	str	r1, [r7, #8]
 8006f64:	607a      	str	r2, [r7, #4]
 8006f66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f68:	e051      	b.n	800700e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f78:	d123      	bne.n	8006fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	f043 0204 	orr.w	r2, r3, #4
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e046      	b.n	8007050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc8:	d021      	beq.n	800700e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fca:	f7fe fb29 	bl	8005620 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d302      	bcc.n	8006fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d116      	bne.n	800700e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	f043 0220 	orr.w	r2, r3, #32
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e020      	b.n	8007050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	0c1b      	lsrs	r3, r3, #16
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b01      	cmp	r3, #1
 8007016:	d10c      	bne.n	8007032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	43da      	mvns	r2, r3
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4013      	ands	r3, r2
 8007024:	b29b      	uxth	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	bf14      	ite	ne
 800702a:	2301      	movne	r3, #1
 800702c:	2300      	moveq	r3, #0
 800702e:	b2db      	uxtb	r3, r3
 8007030:	e00b      	b.n	800704a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	43da      	mvns	r2, r3
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	4013      	ands	r3, r2
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	bf14      	ite	ne
 8007044:	2301      	movne	r3, #1
 8007046:	2300      	moveq	r3, #0
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d18d      	bne.n	8006f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007064:	e02d      	b.n	80070c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 f8ce 	bl	8007208 <I2C_IsAcknowledgeFailed>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e02d      	b.n	80070d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707c:	d021      	beq.n	80070c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800707e:	f7fe facf 	bl	8005620 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	429a      	cmp	r2, r3
 800708c:	d302      	bcc.n	8007094 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d116      	bne.n	80070c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	f043 0220 	orr.w	r2, r3, #32
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e007      	b.n	80070d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070cc:	2b80      	cmp	r3, #128	; 0x80
 80070ce:	d1ca      	bne.n	8007066 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070e6:	e02d      	b.n	8007144 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 f88d 	bl	8007208 <I2C_IsAcknowledgeFailed>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e02d      	b.n	8007154 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fe:	d021      	beq.n	8007144 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007100:	f7fe fa8e 	bl	8005620 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	429a      	cmp	r2, r3
 800710e:	d302      	bcc.n	8007116 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d116      	bne.n	8007144 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2220      	movs	r2, #32
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007130:	f043 0220 	orr.w	r2, r3, #32
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e007      	b.n	8007154 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	f003 0304 	and.w	r3, r3, #4
 800714e:	2b04      	cmp	r3, #4
 8007150:	d1ca      	bne.n	80070e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007168:	e042      	b.n	80071f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	f003 0310 	and.w	r3, r3, #16
 8007174:	2b10      	cmp	r3, #16
 8007176:	d119      	bne.n	80071ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f06f 0210 	mvn.w	r2, #16
 8007180:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2220      	movs	r2, #32
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e029      	b.n	8007200 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ac:	f7fe fa38 	bl	8005620 <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d302      	bcc.n	80071c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d116      	bne.n	80071f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2220      	movs	r2, #32
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071dc:	f043 0220 	orr.w	r2, r3, #32
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e007      	b.n	8007200 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fa:	2b40      	cmp	r3, #64	; 0x40
 80071fc:	d1b5      	bne.n	800716a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800721a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800721e:	d11b      	bne.n	8007258 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007228:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007244:	f043 0204 	orr.w	r2, r3, #4
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e000      	b.n	800725a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007266:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007268:	b08f      	sub	sp, #60	; 0x3c
 800726a:	af0a      	add	r7, sp, #40	; 0x28
 800726c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e10f      	b.n	8007498 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d106      	bne.n	8007298 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f00d f822 	bl	80142dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2203      	movs	r2, #3
 800729c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d102      	bne.n	80072b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f005 fae5 	bl	800c886 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	603b      	str	r3, [r7, #0]
 80072c2:	687e      	ldr	r6, [r7, #4]
 80072c4:	466d      	mov	r5, sp
 80072c6:	f106 0410 	add.w	r4, r6, #16
 80072ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80072d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80072da:	1d33      	adds	r3, r6, #4
 80072dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072de:	6838      	ldr	r0, [r7, #0]
 80072e0:	f005 f9bc 	bl	800c65c <USB_CoreInit>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2202      	movs	r2, #2
 80072ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e0d0      	b.n	8007498 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2100      	movs	r1, #0
 80072fc:	4618      	mov	r0, r3
 80072fe:	f005 fad3 	bl	800c8a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007302:	2300      	movs	r3, #0
 8007304:	73fb      	strb	r3, [r7, #15]
 8007306:	e04a      	b.n	800739e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007308:	7bfa      	ldrb	r2, [r7, #15]
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	4613      	mov	r3, r2
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	1a9b      	subs	r3, r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	440b      	add	r3, r1
 8007316:	333d      	adds	r3, #61	; 0x3d
 8007318:	2201      	movs	r2, #1
 800731a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800731c:	7bfa      	ldrb	r2, [r7, #15]
 800731e:	6879      	ldr	r1, [r7, #4]
 8007320:	4613      	mov	r3, r2
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	1a9b      	subs	r3, r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	440b      	add	r3, r1
 800732a:	333c      	adds	r3, #60	; 0x3c
 800732c:	7bfa      	ldrb	r2, [r7, #15]
 800732e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007330:	7bfa      	ldrb	r2, [r7, #15]
 8007332:	7bfb      	ldrb	r3, [r7, #15]
 8007334:	b298      	uxth	r0, r3
 8007336:	6879      	ldr	r1, [r7, #4]
 8007338:	4613      	mov	r3, r2
 800733a:	00db      	lsls	r3, r3, #3
 800733c:	1a9b      	subs	r3, r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	440b      	add	r3, r1
 8007342:	3342      	adds	r3, #66	; 0x42
 8007344:	4602      	mov	r2, r0
 8007346:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007348:	7bfa      	ldrb	r2, [r7, #15]
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	4613      	mov	r3, r2
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	1a9b      	subs	r3, r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	440b      	add	r3, r1
 8007356:	333f      	adds	r3, #63	; 0x3f
 8007358:	2200      	movs	r2, #0
 800735a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800735c:	7bfa      	ldrb	r2, [r7, #15]
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	4613      	mov	r3, r2
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	1a9b      	subs	r3, r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	440b      	add	r3, r1
 800736a:	3344      	adds	r3, #68	; 0x44
 800736c:	2200      	movs	r2, #0
 800736e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007370:	7bfa      	ldrb	r2, [r7, #15]
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	4613      	mov	r3, r2
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	1a9b      	subs	r3, r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	440b      	add	r3, r1
 800737e:	3348      	adds	r3, #72	; 0x48
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007384:	7bfa      	ldrb	r2, [r7, #15]
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	4613      	mov	r3, r2
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	1a9b      	subs	r3, r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	440b      	add	r3, r1
 8007392:	3350      	adds	r3, #80	; 0x50
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	3301      	adds	r3, #1
 800739c:	73fb      	strb	r3, [r7, #15]
 800739e:	7bfa      	ldrb	r2, [r7, #15]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d3af      	bcc.n	8007308 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073a8:	2300      	movs	r3, #0
 80073aa:	73fb      	strb	r3, [r7, #15]
 80073ac:	e044      	b.n	8007438 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80073ae:	7bfa      	ldrb	r2, [r7, #15]
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	4613      	mov	r3, r2
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	1a9b      	subs	r3, r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	440b      	add	r3, r1
 80073bc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80073c0:	2200      	movs	r2, #0
 80073c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80073c4:	7bfa      	ldrb	r2, [r7, #15]
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	4613      	mov	r3, r2
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	1a9b      	subs	r3, r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80073d6:	7bfa      	ldrb	r2, [r7, #15]
 80073d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80073da:	7bfa      	ldrb	r2, [r7, #15]
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	4613      	mov	r3, r2
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	1a9b      	subs	r3, r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	440b      	add	r3, r1
 80073e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80073ec:	2200      	movs	r2, #0
 80073ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80073f0:	7bfa      	ldrb	r2, [r7, #15]
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	4613      	mov	r3, r2
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	1a9b      	subs	r3, r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	440b      	add	r3, r1
 80073fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007402:	2200      	movs	r2, #0
 8007404:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007406:	7bfa      	ldrb	r2, [r7, #15]
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	4613      	mov	r3, r2
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	1a9b      	subs	r3, r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	440b      	add	r3, r1
 8007414:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800741c:	7bfa      	ldrb	r2, [r7, #15]
 800741e:	6879      	ldr	r1, [r7, #4]
 8007420:	4613      	mov	r3, r2
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	1a9b      	subs	r3, r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	440b      	add	r3, r1
 800742a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	3301      	adds	r3, #1
 8007436:	73fb      	strb	r3, [r7, #15]
 8007438:	7bfa      	ldrb	r2, [r7, #15]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	429a      	cmp	r2, r3
 8007440:	d3b5      	bcc.n	80073ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	603b      	str	r3, [r7, #0]
 8007448:	687e      	ldr	r6, [r7, #4]
 800744a:	466d      	mov	r5, sp
 800744c:	f106 0410 	add.w	r4, r6, #16
 8007450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007458:	e894 0003 	ldmia.w	r4, {r0, r1}
 800745c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007460:	1d33      	adds	r3, r6, #4
 8007462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007464:	6838      	ldr	r0, [r7, #0]
 8007466:	f005 fa49 	bl	800c8fc <USB_DevInit>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d005      	beq.n	800747c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e00d      	b.n	8007498 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4618      	mov	r0, r3
 8007492:	f006 fa3e 	bl	800d912 <USB_DevDisconnect>

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_PCD_Start+0x1c>
 80074b8:	2302      	movs	r3, #2
 80074ba:	e020      	b.n	80074fe <HAL_PCD_Start+0x5e>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d109      	bne.n	80074e0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d005      	beq.n	80074e0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f006 f9fc 	bl	800d8e2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f005 f9b8 	bl	800c864 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007506:	b590      	push	{r4, r7, lr}
 8007508:	b08d      	sub	sp, #52	; 0x34
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4618      	mov	r0, r3
 800751e:	f006 faa3 	bl	800da68 <USB_GetMode>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	f040 838e 	bne.w	8007c46 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4618      	mov	r0, r3
 8007530:	f006 fa07 	bl	800d942 <USB_ReadInterrupts>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 8384 	beq.w	8007c44 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4618      	mov	r0, r3
 8007542:	f006 f9fe 	bl	800d942 <USB_ReadInterrupts>
 8007546:	4603      	mov	r3, r0
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b02      	cmp	r3, #2
 800754e:	d107      	bne.n	8007560 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	695a      	ldr	r2, [r3, #20]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f002 0202 	and.w	r2, r2, #2
 800755e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4618      	mov	r0, r3
 8007566:	f006 f9ec 	bl	800d942 <USB_ReadInterrupts>
 800756a:	4603      	mov	r3, r0
 800756c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007570:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007574:	d17b      	bne.n	800766e <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4618      	mov	r0, r3
 8007580:	f006 f9f2 	bl	800d968 <USB_ReadDevAllOutEpInterrupt>
 8007584:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007586:	e06f      	b.n	8007668 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	d064      	beq.n	800765c <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007598:	b2d2      	uxtb	r2, r2
 800759a:	4611      	mov	r1, r2
 800759c:	4618      	mov	r0, r3
 800759e:	f006 fa17 	bl	800d9d0 <USB_ReadDevOutEPInterrupt>
 80075a2:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00c      	beq.n	80075c8 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ba:	461a      	mov	r2, r3
 80075bc:	2301      	movs	r3, #1
 80075be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80075c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fe0e 	bl	80081e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	f003 0308 	and.w	r3, r3, #8
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00c      	beq.n	80075ec <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80075d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 ff0d 	bl	80083f4 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e6:	461a      	mov	r2, r3
 80075e8:	2308      	movs	r3, #8
 80075ea:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	f003 0310 	and.w	r3, r3, #16
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d008      	beq.n	8007608 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007602:	461a      	mov	r2, r3
 8007604:	2310      	movs	r3, #16
 8007606:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	f003 0320 	and.w	r3, r3, #32
 800760e:	2b00      	cmp	r3, #0
 8007610:	d015      	beq.n	800763e <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d108      	bne.n	800762c <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6818      	ldr	r0, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007624:	461a      	mov	r2, r3
 8007626:	2101      	movs	r1, #1
 8007628:	f006 fa62 	bl	800daf0 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007638:	461a      	mov	r2, r3
 800763a:	2320      	movs	r3, #32
 800763c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d009      	beq.n	800765c <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	4413      	add	r3, r2
 8007650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007654:	461a      	mov	r2, r3
 8007656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800765a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	3301      	adds	r3, #1
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	085b      	lsrs	r3, r3, #1
 8007666:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	2b00      	cmp	r3, #0
 800766c:	d18c      	bne.n	8007588 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	f006 f965 	bl	800d942 <USB_ReadInterrupts>
 8007678:	4603      	mov	r3, r0
 800767a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800767e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007682:	f040 80c4 	bne.w	800780e <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4618      	mov	r0, r3
 800768c:	f006 f986 	bl	800d99c <USB_ReadDevAllInEpInterrupt>
 8007690:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007696:	e0b6      	b.n	8007806 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 80ab 	beq.w	80077fa <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	4611      	mov	r1, r2
 80076ae:	4618      	mov	r0, r3
 80076b0:	f006 f9ac 	bl	800da0c <USB_ReadDevInEPInterrupt>
 80076b4:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d05b      	beq.n	8007778 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	f003 030f 	and.w	r3, r3, #15
 80076c6:	2201      	movs	r2, #1
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	43db      	mvns	r3, r3
 80076da:	69f9      	ldr	r1, [r7, #28]
 80076dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076e0:	4013      	ands	r3, r2
 80076e2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f0:	461a      	mov	r2, r3
 80076f2:	2301      	movs	r3, #1
 80076f4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d11b      	bne.n	8007736 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80076fe:	6879      	ldr	r1, [r7, #4]
 8007700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007702:	4613      	mov	r3, r2
 8007704:	00db      	lsls	r3, r3, #3
 8007706:	1a9b      	subs	r3, r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	440b      	add	r3, r1
 800770c:	3348      	adds	r3, #72	; 0x48
 800770e:	6819      	ldr	r1, [r3, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007714:	4613      	mov	r3, r2
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	1a9b      	subs	r3, r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4403      	add	r3, r0
 800771e:	3344      	adds	r3, #68	; 0x44
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4419      	add	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007728:	4613      	mov	r3, r2
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	1a9b      	subs	r3, r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4403      	add	r3, r0
 8007732:	3348      	adds	r3, #72	; 0x48
 8007734:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	b2db      	uxtb	r3, r3
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f00c fe4e 	bl	80143de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d116      	bne.n	8007778 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	2b00      	cmp	r3, #0
 800774e:	d113      	bne.n	8007778 <HAL_PCD_IRQHandler+0x272>
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007754:	4613      	mov	r3, r2
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	1a9b      	subs	r3, r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	440b      	add	r3, r1
 800775e:	3350      	adds	r3, #80	; 0x50
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d108      	bne.n	8007778 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007770:	461a      	mov	r2, r3
 8007772:	2101      	movs	r1, #1
 8007774:	f006 f9bc 	bl	800daf0 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	f003 0308 	and.w	r3, r3, #8
 800777e:	2b00      	cmp	r3, #0
 8007780:	d008      	beq.n	8007794 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	4413      	add	r3, r2
 800778a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800778e:	461a      	mov	r2, r3
 8007790:	2308      	movs	r3, #8
 8007792:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	f003 0310 	and.w	r3, r3, #16
 800779a:	2b00      	cmp	r3, #0
 800779c:	d008      	beq.n	80077b0 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800779e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077aa:	461a      	mov	r2, r3
 80077ac:	2310      	movs	r3, #16
 80077ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d008      	beq.n	80077cc <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	015a      	lsls	r2, r3, #5
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c6:	461a      	mov	r2, r3
 80077c8:	2340      	movs	r3, #64	; 0x40
 80077ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d008      	beq.n	80077e8 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80077d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e2:	461a      	mov	r2, r3
 80077e4:	2302      	movs	r3, #2
 80077e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80077f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fc67 	bl	80080c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	3301      	adds	r3, #1
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	085b      	lsrs	r3, r3, #1
 8007804:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007808:	2b00      	cmp	r3, #0
 800780a:	f47f af45 	bne.w	8007698 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4618      	mov	r0, r3
 8007814:	f006 f895 	bl	800d942 <USB_ReadInterrupts>
 8007818:	4603      	mov	r3, r0
 800781a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800781e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007822:	d122      	bne.n	800786a <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007832:	f023 0301 	bic.w	r3, r3, #1
 8007836:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800783e:	2b01      	cmp	r3, #1
 8007840:	d108      	bne.n	8007854 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800784a:	2100      	movs	r1, #0
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fe89 	bl	8008564 <HAL_PCDEx_LPM_Callback>
 8007852:	e002      	b.n	800785a <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f00c fe39 	bl	80144cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	695a      	ldr	r2, [r3, #20]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007868:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4618      	mov	r0, r3
 8007870:	f006 f867 	bl	800d942 <USB_ReadInterrupts>
 8007874:	4603      	mov	r3, r0
 8007876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800787a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800787e:	d112      	bne.n	80078a6 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b01      	cmp	r3, #1
 800788e:	d102      	bne.n	8007896 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f00c fdf5 	bl	8014480 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	695a      	ldr	r2, [r3, #20]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80078a4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f006 f849 	bl	800d942 <USB_ReadInterrupts>
 80078b0:	4603      	mov	r3, r0
 80078b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ba:	f040 80a7 	bne.w	8007a0c <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	69fa      	ldr	r2, [r7, #28]
 80078c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078cc:	f023 0301 	bic.w	r3, r3, #1
 80078d0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2110      	movs	r1, #16
 80078d8:	4618      	mov	r0, r3
 80078da:	f005 f981 	bl	800cbe0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078de:	2300      	movs	r3, #0
 80078e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078e2:	e036      	b.n	8007952 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80078e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f0:	461a      	mov	r2, r3
 80078f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078f6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80078f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007908:	0151      	lsls	r1, r2, #5
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	440a      	add	r2, r1
 800790e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007912:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007916:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007924:	461a      	mov	r2, r3
 8007926:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800792a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800792c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800793c:	0151      	lsls	r1, r2, #5
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	440a      	add	r2, r1
 8007942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007946:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800794a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800794c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794e:	3301      	adds	r3, #1
 8007950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007958:	429a      	cmp	r2, r3
 800795a:	d3c3      	bcc.n	80078e4 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007962:	69db      	ldr	r3, [r3, #28]
 8007964:	69fa      	ldr	r2, [r7, #28]
 8007966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800796a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800796e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007974:	2b00      	cmp	r3, #0
 8007976:	d016      	beq.n	80079a6 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800797e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007988:	f043 030b 	orr.w	r3, r3, #11
 800798c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800799e:	f043 030b 	orr.w	r3, r3, #11
 80079a2:	6453      	str	r3, [r2, #68]	; 0x44
 80079a4:	e015      	b.n	80079d2 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	69fa      	ldr	r2, [r7, #28]
 80079b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80079b8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80079bc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079cc:	f043 030b 	orr.w	r3, r3, #11
 80079d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80079e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80079f6:	461a      	mov	r2, r3
 80079f8:	f006 f87a 	bl	800daf0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	695a      	ldr	r2, [r3, #20]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f005 ff96 	bl	800d942 <USB_ReadInterrupts>
 8007a16:	4603      	mov	r3, r0
 8007a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a20:	d124      	bne.n	8007a6c <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f006 f82c 	bl	800da84 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f005 f936 	bl	800cca2 <USB_GetDevSpeed>
 8007a36:	4603      	mov	r3, r0
 8007a38:	461a      	mov	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681c      	ldr	r4, [r3, #0]
 8007a42:	f001 f971 	bl	8008d28 <HAL_RCC_GetHCLKFreq>
 8007a46:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	461a      	mov	r2, r3
 8007a50:	4620      	mov	r0, r4
 8007a52:	f004 fe65 	bl	800c720 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f00c fce9 	bl	801442e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	695a      	ldr	r2, [r3, #20]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007a6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f005 ff66 	bl	800d942 <USB_ReadInterrupts>
 8007a76:	4603      	mov	r3, r0
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b10      	cmp	r3, #16
 8007a7e:	d161      	bne.n	8007b44 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699a      	ldr	r2, [r3, #24]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0210 	bic.w	r2, r2, #16
 8007a8e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	f003 020f 	and.w	r2, r3, #15
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	1a9b      	subs	r3, r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	4413      	add	r3, r2
 8007aac:	3304      	adds	r3, #4
 8007aae:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	0c5b      	lsrs	r3, r3, #17
 8007ab4:	f003 030f 	and.w	r3, r3, #15
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d124      	bne.n	8007b06 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d035      	beq.n	8007b34 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	091b      	lsrs	r3, r3, #4
 8007ad0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007ad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	461a      	mov	r2, r3
 8007ada:	6a38      	ldr	r0, [r7, #32]
 8007adc:	f005 fdde 	bl	800d69c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	091b      	lsrs	r3, r3, #4
 8007ae8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007aec:	441a      	add	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	699a      	ldr	r2, [r3, #24]
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	091b      	lsrs	r3, r3, #4
 8007afa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007afe:	441a      	add	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	619a      	str	r2, [r3, #24]
 8007b04:	e016      	b.n	8007b34 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	0c5b      	lsrs	r3, r3, #17
 8007b0a:	f003 030f 	and.w	r3, r3, #15
 8007b0e:	2b06      	cmp	r3, #6
 8007b10:	d110      	bne.n	8007b34 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b18:	2208      	movs	r2, #8
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6a38      	ldr	r0, [r7, #32]
 8007b1e:	f005 fdbd 	bl	800d69c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	699a      	ldr	r2, [r3, #24]
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	091b      	lsrs	r3, r3, #4
 8007b2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b2e:	441a      	add	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	699a      	ldr	r2, [r3, #24]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f042 0210 	orr.w	r2, r2, #16
 8007b42:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f005 fefa 	bl	800d942 <USB_ReadInterrupts>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f003 0308 	and.w	r3, r3, #8
 8007b54:	2b08      	cmp	r3, #8
 8007b56:	d10a      	bne.n	8007b6e <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f00c fc5a 	bl	8014412 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	695a      	ldr	r2, [r3, #20]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f002 0208 	and.w	r2, r2, #8
 8007b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f005 fee5 	bl	800d942 <USB_ReadInterrupts>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b82:	d10f      	bne.n	8007ba4 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f00c fcbc 	bl	801450c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	695a      	ldr	r2, [r3, #20]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007ba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f005 feca 	bl	800d942 <USB_ReadInterrupts>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bb8:	d10f      	bne.n	8007bda <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f00c fc8f 	bl	80144e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	695a      	ldr	r2, [r3, #20]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f005 feaf 	bl	800d942 <USB_ReadInterrupts>
 8007be4:	4603      	mov	r3, r0
 8007be6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bee:	d10a      	bne.n	8007c06 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f00c fc9d 	bl	8014530 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	695a      	ldr	r2, [r3, #20]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f005 fe99 	bl	800d942 <USB_ReadInterrupts>
 8007c10:	4603      	mov	r3, r0
 8007c12:	f003 0304 	and.w	r3, r3, #4
 8007c16:	2b04      	cmp	r3, #4
 8007c18:	d115      	bne.n	8007c46 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	f003 0304 	and.w	r3, r3, #4
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f00c fc8d 	bl	801454c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6859      	ldr	r1, [r3, #4]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	605a      	str	r2, [r3, #4]
 8007c42:	e000      	b.n	8007c46 <HAL_PCD_IRQHandler+0x740>
      return;
 8007c44:	bf00      	nop
    }
  }
}
 8007c46:	3734      	adds	r7, #52	; 0x34
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd90      	pop	{r4, r7, pc}

08007c4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d101      	bne.n	8007c66 <HAL_PCD_SetAddress+0x1a>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e013      	b.n	8007c8e <HAL_PCD_SetAddress+0x42>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	78fa      	ldrb	r2, [r7, #3]
 8007c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	78fa      	ldrb	r2, [r7, #3]
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f005 fe09 	bl	800d896 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	4608      	mov	r0, r1
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	70fb      	strb	r3, [r7, #3]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	803b      	strh	r3, [r7, #0]
 8007cac:	4613      	mov	r3, r2
 8007cae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	da0f      	bge.n	8007cdc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cbc:	78fb      	ldrb	r3, [r7, #3]
 8007cbe:	f003 020f 	and.w	r2, r3, #15
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	00db      	lsls	r3, r3, #3
 8007cc6:	1a9b      	subs	r3, r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	3338      	adds	r3, #56	; 0x38
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	4413      	add	r3, r2
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	705a      	strb	r2, [r3, #1]
 8007cda:	e00f      	b.n	8007cfc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007cdc:	78fb      	ldrb	r3, [r7, #3]
 8007cde:	f003 020f 	and.w	r2, r3, #15
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	1a9b      	subs	r3, r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007cfc:	78fb      	ldrb	r3, [r7, #3]
 8007cfe:	f003 030f 	and.w	r3, r3, #15
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007d08:	883a      	ldrh	r2, [r7, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	78ba      	ldrb	r2, [r7, #2]
 8007d12:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d004      	beq.n	8007d26 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007d26:	78bb      	ldrb	r3, [r7, #2]
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d102      	bne.n	8007d32 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_PCD_EP_Open+0xaa>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e00e      	b.n	8007d5e <HAL_PCD_EP_Open+0xc8>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68f9      	ldr	r1, [r7, #12]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f004 ffcc 	bl	800ccec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007d5c:	7afb      	ldrb	r3, [r7, #11]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007d72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	da0f      	bge.n	8007d9a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	f003 020f 	and.w	r2, r3, #15
 8007d80:	4613      	mov	r3, r2
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	3338      	adds	r3, #56	; 0x38
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	3304      	adds	r3, #4
 8007d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	705a      	strb	r2, [r3, #1]
 8007d98:	e00f      	b.n	8007dba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d9a:	78fb      	ldrb	r3, [r7, #3]
 8007d9c:	f003 020f 	and.w	r2, r3, #15
 8007da0:	4613      	mov	r3, r2
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	1a9b      	subs	r3, r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	4413      	add	r3, r2
 8007db0:	3304      	adds	r3, #4
 8007db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	f003 030f 	and.w	r3, r3, #15
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d101      	bne.n	8007dd4 <HAL_PCD_EP_Close+0x6e>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e00e      	b.n	8007df2 <HAL_PCD_EP_Close+0x8c>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68f9      	ldr	r1, [r7, #12]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f005 f80a 	bl	800cdfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b086      	sub	sp, #24
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	603b      	str	r3, [r7, #0]
 8007e06:	460b      	mov	r3, r1
 8007e08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e0a:	7afb      	ldrb	r3, [r7, #11]
 8007e0c:	f003 020f 	and.w	r2, r3, #15
 8007e10:	4613      	mov	r3, r2
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	1a9b      	subs	r3, r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	4413      	add	r3, r2
 8007e20:	3304      	adds	r3, #4
 8007e22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	2200      	movs	r2, #0
 8007e34:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	f003 030f 	and.w	r3, r3, #15
 8007e42:	b2da      	uxtb	r2, r3
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d102      	bne.n	8007e56 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e56:	7afb      	ldrb	r3, [r7, #11]
 8007e58:	f003 030f 	and.w	r3, r3, #15
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d109      	bne.n	8007e74 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	6979      	ldr	r1, [r7, #20]
 8007e6e:	f005 fa8d 	bl	800d38c <USB_EP0StartXfer>
 8007e72:	e008      	b.n	8007e86 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6818      	ldr	r0, [r3, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	461a      	mov	r2, r3
 8007e80:	6979      	ldr	r1, [r7, #20]
 8007e82:	f005 f83f 	bl	800cf04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	f003 020f 	and.w	r2, r3, #15
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	00db      	lsls	r3, r3, #3
 8007ea8:	1a9b      	subs	r3, r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	440b      	add	r3, r1
 8007eae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007eb2:	681b      	ldr	r3, [r3, #0]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	607a      	str	r2, [r7, #4]
 8007eca:	603b      	str	r3, [r7, #0]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ed0:	7afb      	ldrb	r3, [r7, #11]
 8007ed2:	f003 020f 	and.w	r2, r3, #15
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	00db      	lsls	r3, r3, #3
 8007eda:	1a9b      	subs	r3, r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	3338      	adds	r3, #56	; 0x38
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2201      	movs	r2, #1
 8007efe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f00:	7afb      	ldrb	r3, [r7, #11]
 8007f02:	f003 030f 	and.w	r3, r3, #15
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d102      	bne.n	8007f1a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007f1a:	7afb      	ldrb	r3, [r7, #11]
 8007f1c:	f003 030f 	and.w	r3, r3, #15
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d109      	bne.n	8007f38 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6818      	ldr	r0, [r3, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	461a      	mov	r2, r3
 8007f30:	6979      	ldr	r1, [r7, #20]
 8007f32:	f005 fa2b 	bl	800d38c <USB_EP0StartXfer>
 8007f36:	e008      	b.n	8007f4a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6818      	ldr	r0, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	461a      	mov	r2, r3
 8007f44:	6979      	ldr	r1, [r7, #20]
 8007f46:	f004 ffdd 	bl	800cf04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3718      	adds	r7, #24
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007f60:	78fb      	ldrb	r3, [r7, #3]
 8007f62:	f003 020f 	and.w	r2, r3, #15
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d901      	bls.n	8007f72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e050      	b.n	8008014 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	da0f      	bge.n	8007f9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	f003 020f 	and.w	r2, r3, #15
 8007f80:	4613      	mov	r3, r2
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	1a9b      	subs	r3, r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	3338      	adds	r3, #56	; 0x38
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	3304      	adds	r3, #4
 8007f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2201      	movs	r2, #1
 8007f96:	705a      	strb	r2, [r3, #1]
 8007f98:	e00d      	b.n	8007fb6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007f9a:	78fa      	ldrb	r2, [r7, #3]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	1a9b      	subs	r3, r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	4413      	add	r3, r2
 8007fac:	3304      	adds	r3, #4
 8007fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	f003 030f 	and.w	r3, r3, #15
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d101      	bne.n	8007fd6 <HAL_PCD_EP_SetStall+0x82>
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	e01e      	b.n	8008014 <HAL_PCD_EP_SetStall+0xc0>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68f9      	ldr	r1, [r7, #12]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f005 fb82 	bl	800d6ee <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007fea:	78fb      	ldrb	r3, [r7, #3]
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10a      	bne.n	800800a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6818      	ldr	r0, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	b2d9      	uxtb	r1, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008004:	461a      	mov	r2, r3
 8008006:	f005 fd73 	bl	800daf0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008028:	78fb      	ldrb	r3, [r7, #3]
 800802a:	f003 020f 	and.w	r2, r3, #15
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	429a      	cmp	r2, r3
 8008034:	d901      	bls.n	800803a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e042      	b.n	80080c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800803a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800803e:	2b00      	cmp	r3, #0
 8008040:	da0f      	bge.n	8008062 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008042:	78fb      	ldrb	r3, [r7, #3]
 8008044:	f003 020f 	and.w	r2, r3, #15
 8008048:	4613      	mov	r3, r2
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	1a9b      	subs	r3, r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	3338      	adds	r3, #56	; 0x38
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	4413      	add	r3, r2
 8008056:	3304      	adds	r3, #4
 8008058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2201      	movs	r2, #1
 800805e:	705a      	strb	r2, [r3, #1]
 8008060:	e00f      	b.n	8008082 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008062:	78fb      	ldrb	r3, [r7, #3]
 8008064:	f003 020f 	and.w	r2, r3, #15
 8008068:	4613      	mov	r3, r2
 800806a:	00db      	lsls	r3, r3, #3
 800806c:	1a9b      	subs	r3, r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	4413      	add	r3, r2
 8008078:	3304      	adds	r3, #4
 800807a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008088:	78fb      	ldrb	r3, [r7, #3]
 800808a:	f003 030f 	and.w	r3, r3, #15
 800808e:	b2da      	uxtb	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800809a:	2b01      	cmp	r3, #1
 800809c:	d101      	bne.n	80080a2 <HAL_PCD_EP_ClrStall+0x86>
 800809e:	2302      	movs	r3, #2
 80080a0:	e00e      	b.n	80080c0 <HAL_PCD_EP_ClrStall+0xa4>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68f9      	ldr	r1, [r7, #12]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f005 fb8a 	bl	800d7ca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b08a      	sub	sp, #40	; 0x28
 80080cc:	af02      	add	r7, sp, #8
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	4613      	mov	r3, r2
 80080e0:	00db      	lsls	r3, r3, #3
 80080e2:	1a9b      	subs	r3, r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	3338      	adds	r3, #56	; 0x38
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	4413      	add	r3, r2
 80080ec:	3304      	adds	r3, #4
 80080ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	699a      	ldr	r2, [r3, #24]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d901      	bls.n	8008100 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e06c      	b.n	80081da <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	695a      	ldr	r2, [r3, #20]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	69fa      	ldr	r2, [r7, #28]
 8008112:	429a      	cmp	r2, r3
 8008114:	d902      	bls.n	800811c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	3303      	adds	r3, #3
 8008120:	089b      	lsrs	r3, r3, #2
 8008122:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008124:	e02b      	b.n	800817e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	695a      	ldr	r2, [r3, #20]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	69fa      	ldr	r2, [r7, #28]
 8008138:	429a      	cmp	r2, r3
 800813a:	d902      	bls.n	8008142 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	3303      	adds	r3, #3
 8008146:	089b      	lsrs	r3, r3, #2
 8008148:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	68d9      	ldr	r1, [r3, #12]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	b2da      	uxtb	r2, r3
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800815a:	b2db      	uxtb	r3, r3
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	4603      	mov	r3, r0
 8008160:	6978      	ldr	r0, [r7, #20]
 8008162:	f005 fa66 	bl	800d632 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	68da      	ldr	r2, [r3, #12]
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	441a      	add	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	699a      	ldr	r2, [r3, #24]
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	441a      	add	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	015a      	lsls	r2, r3, #5
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	4413      	add	r3, r2
 8008186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	b29b      	uxth	r3, r3
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	429a      	cmp	r2, r3
 8008192:	d809      	bhi.n	80081a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	699a      	ldr	r2, [r3, #24]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800819c:	429a      	cmp	r2, r3
 800819e:	d203      	bcs.n	80081a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1be      	bne.n	8008126 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	695a      	ldr	r2, [r3, #20]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d811      	bhi.n	80081d8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	f003 030f 	and.w	r3, r3, #15
 80081ba:	2201      	movs	r2, #1
 80081bc:	fa02 f303 	lsl.w	r3, r2, r3
 80081c0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	43db      	mvns	r3, r3
 80081ce:	6939      	ldr	r1, [r7, #16]
 80081d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081d4:	4013      	ands	r3, r2
 80081d6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3720      	adds	r7, #32
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	333c      	adds	r3, #60	; 0x3c
 80081fc:	3304      	adds	r3, #4
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	2b01      	cmp	r3, #1
 8008218:	f040 80b3 	bne.w	8008382 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f003 0308 	and.w	r3, r3, #8
 8008222:	2b00      	cmp	r3, #0
 8008224:	d028      	beq.n	8008278 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	4a70      	ldr	r2, [pc, #448]	; (80083ec <PCD_EP_OutXfrComplete_int+0x208>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d90e      	bls.n	800824c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008234:	2b00      	cmp	r3, #0
 8008236:	d009      	beq.n	800824c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	4413      	add	r3, r2
 8008240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008244:	461a      	mov	r2, r3
 8008246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800824a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f00c f899 	bl	8014384 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6818      	ldr	r0, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800825c:	461a      	mov	r2, r3
 800825e:	2101      	movs	r1, #1
 8008260:	f005 fc46 	bl	800daf0 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008270:	461a      	mov	r2, r3
 8008272:	2308      	movs	r3, #8
 8008274:	6093      	str	r3, [r2, #8]
 8008276:	e0b3      	b.n	80083e0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f003 0320 	and.w	r3, r3, #32
 800827e:	2b00      	cmp	r3, #0
 8008280:	d009      	beq.n	8008296 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828e:	461a      	mov	r2, r3
 8008290:	2320      	movs	r3, #32
 8008292:	6093      	str	r3, [r2, #8]
 8008294:	e0a4      	b.n	80083e0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800829c:	2b00      	cmp	r3, #0
 800829e:	f040 809f 	bne.w	80083e0 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	4a51      	ldr	r2, [pc, #324]	; (80083ec <PCD_EP_OutXfrComplete_int+0x208>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d90f      	bls.n	80082ca <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00a      	beq.n	80082ca <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	015a      	lsls	r2, r3, #5
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	4413      	add	r3, r2
 80082bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c0:	461a      	mov	r2, r3
 80082c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082c6:	6093      	str	r3, [r2, #8]
 80082c8:	e08a      	b.n	80083e0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80082ca:	6879      	ldr	r1, [r7, #4]
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	4613      	mov	r3, r2
 80082d0:	00db      	lsls	r3, r3, #3
 80082d2:	1a9b      	subs	r3, r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	440b      	add	r3, r1
 80082d8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80082dc:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	0159      	lsls	r1, r3, #5
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	440b      	add	r3, r1
 80082e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80082f0:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	4613      	mov	r3, r2
 80082f8:	00db      	lsls	r3, r3, #3
 80082fa:	1a9b      	subs	r3, r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4403      	add	r3, r0
 8008300:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008304:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008306:	6879      	ldr	r1, [r7, #4]
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	4613      	mov	r3, r2
 800830c:	00db      	lsls	r3, r3, #3
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	440b      	add	r3, r1
 8008314:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008318:	6819      	ldr	r1, [r3, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	4613      	mov	r3, r2
 8008320:	00db      	lsls	r3, r3, #3
 8008322:	1a9b      	subs	r3, r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4403      	add	r3, r0
 8008328:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4419      	add	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	4613      	mov	r3, r2
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	1a9b      	subs	r3, r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4403      	add	r3, r0
 800833e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008342:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	b2db      	uxtb	r3, r3
 8008348:	4619      	mov	r1, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f00c f82c 	bl	80143a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d144      	bne.n	80083e0 <PCD_EP_OutXfrComplete_int+0x1fc>
 8008356:	6879      	ldr	r1, [r7, #4]
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	4613      	mov	r3, r2
 800835c:	00db      	lsls	r3, r3, #3
 800835e:	1a9b      	subs	r3, r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	440b      	add	r3, r1
 8008364:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d138      	bne.n	80083e0 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008378:	461a      	mov	r2, r3
 800837a:	2101      	movs	r1, #1
 800837c:	f005 fbb8 	bl	800daf0 <USB_EP0_OutStart>
 8008380:	e02e      	b.n	80083e0 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4a1a      	ldr	r2, [pc, #104]	; (80083f0 <PCD_EP_OutXfrComplete_int+0x20c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d124      	bne.n	80083d4 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00a      	beq.n	80083aa <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	4413      	add	r3, r2
 800839c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a0:	461a      	mov	r2, r3
 80083a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083a6:	6093      	str	r3, [r2, #8]
 80083a8:	e01a      	b.n	80083e0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	f003 0320 	and.w	r3, r3, #32
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d008      	beq.n	80083c6 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	015a      	lsls	r2, r3, #5
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c0:	461a      	mov	r2, r3
 80083c2:	2320      	movs	r3, #32
 80083c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f00b ffeb 	bl	80143a8 <HAL_PCD_DataOutStageCallback>
 80083d2:	e005      	b.n	80083e0 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	4619      	mov	r1, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f00b ffe4 	bl	80143a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	4f54300a 	.word	0x4f54300a
 80083f0:	4f54310a 	.word	0x4f54310a

080083f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	333c      	adds	r3, #60	; 0x3c
 800840c:	3304      	adds	r3, #4
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	4413      	add	r3, r2
 800841a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d113      	bne.n	8008452 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	4a1f      	ldr	r2, [pc, #124]	; (80084ac <PCD_EP_OutSetupPacket_int+0xb8>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d922      	bls.n	8008478 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008438:	2b00      	cmp	r3, #0
 800843a:	d01d      	beq.n	8008478 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	015a      	lsls	r2, r3, #5
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	4413      	add	r3, r2
 8008444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008448:	461a      	mov	r2, r3
 800844a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800844e:	6093      	str	r3, [r2, #8]
 8008450:	e012      	b.n	8008478 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	4a16      	ldr	r2, [pc, #88]	; (80084b0 <PCD_EP_OutSetupPacket_int+0xbc>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d10e      	bne.n	8008478 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8008460:	2b00      	cmp	r3, #0
 8008462:	d009      	beq.n	8008478 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	4413      	add	r3, r2
 800846c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008470:	461a      	mov	r2, r3
 8008472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008476:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f00b ff83 	bl	8014384 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	4a0a      	ldr	r2, [pc, #40]	; (80084ac <PCD_EP_OutSetupPacket_int+0xb8>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d90c      	bls.n	80084a0 <PCD_EP_OutSetupPacket_int+0xac>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d108      	bne.n	80084a0 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6818      	ldr	r0, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008498:	461a      	mov	r2, r3
 800849a:	2101      	movs	r1, #1
 800849c:	f005 fb28 	bl	800daf0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	4f54300a 	.word	0x4f54300a
 80084b0:	4f54310a 	.word	0x4f54310a

080084b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	70fb      	strb	r3, [r7, #3]
 80084c0:	4613      	mov	r3, r2
 80084c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80084cc:	78fb      	ldrb	r3, [r7, #3]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d107      	bne.n	80084e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80084d2:	883b      	ldrh	r3, [r7, #0]
 80084d4:	0419      	lsls	r1, r3, #16
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	430a      	orrs	r2, r1
 80084de:	629a      	str	r2, [r3, #40]	; 0x28
 80084e0:	e028      	b.n	8008534 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e8:	0c1b      	lsrs	r3, r3, #16
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	4413      	add	r3, r2
 80084ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80084f0:	2300      	movs	r3, #0
 80084f2:	73fb      	strb	r3, [r7, #15]
 80084f4:	e00d      	b.n	8008512 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	3340      	adds	r3, #64	; 0x40
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	0c1b      	lsrs	r3, r3, #16
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	4413      	add	r3, r2
 800850a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	3301      	adds	r3, #1
 8008510:	73fb      	strb	r3, [r7, #15]
 8008512:	7bfa      	ldrb	r2, [r7, #15]
 8008514:	78fb      	ldrb	r3, [r7, #3]
 8008516:	3b01      	subs	r3, #1
 8008518:	429a      	cmp	r2, r3
 800851a:	d3ec      	bcc.n	80084f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800851c:	883b      	ldrh	r3, [r7, #0]
 800851e:	0418      	lsls	r0, r3, #16
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6819      	ldr	r1, [r3, #0]
 8008524:	78fb      	ldrb	r3, [r7, #3]
 8008526:	3b01      	subs	r3, #1
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	4302      	orrs	r2, r0
 800852c:	3340      	adds	r3, #64	; 0x40
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	440b      	add	r3, r1
 8008532:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008542:	b480      	push	{r7}
 8008544:	b083      	sub	sp, #12
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	460b      	mov	r3, r1
 800854c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	887a      	ldrh	r2, [r7, #2]
 8008554:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e22d      	b.n	80089ea <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	d075      	beq.n	8008686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800859a:	4ba3      	ldr	r3, [pc, #652]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f003 030c 	and.w	r3, r3, #12
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	d00c      	beq.n	80085c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085a6:	4ba0      	ldr	r3, [pc, #640]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80085ae:	2b08      	cmp	r3, #8
 80085b0:	d112      	bne.n	80085d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085b2:	4b9d      	ldr	r3, [pc, #628]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085be:	d10b      	bne.n	80085d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085c0:	4b99      	ldr	r3, [pc, #612]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d05b      	beq.n	8008684 <HAL_RCC_OscConfig+0x108>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d157      	bne.n	8008684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e208      	b.n	80089ea <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085e0:	d106      	bne.n	80085f0 <HAL_RCC_OscConfig+0x74>
 80085e2:	4b91      	ldr	r3, [pc, #580]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a90      	ldr	r2, [pc, #576]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 80085e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	e01d      	b.n	800862c <HAL_RCC_OscConfig+0xb0>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085f8:	d10c      	bne.n	8008614 <HAL_RCC_OscConfig+0x98>
 80085fa:	4b8b      	ldr	r3, [pc, #556]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a8a      	ldr	r2, [pc, #552]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 8008600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	4b88      	ldr	r3, [pc, #544]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a87      	ldr	r2, [pc, #540]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 800860c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	e00b      	b.n	800862c <HAL_RCC_OscConfig+0xb0>
 8008614:	4b84      	ldr	r3, [pc, #528]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a83      	ldr	r2, [pc, #524]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 800861a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800861e:	6013      	str	r3, [r2, #0]
 8008620:	4b81      	ldr	r3, [pc, #516]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a80      	ldr	r2, [pc, #512]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 8008626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800862a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d013      	beq.n	800865c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008634:	f7fc fff4 	bl	8005620 <HAL_GetTick>
 8008638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800863a:	e008      	b.n	800864e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800863c:	f7fc fff0 	bl	8005620 <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	2b64      	cmp	r3, #100	; 0x64
 8008648:	d901      	bls.n	800864e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e1cd      	b.n	80089ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800864e:	4b76      	ldr	r3, [pc, #472]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d0f0      	beq.n	800863c <HAL_RCC_OscConfig+0xc0>
 800865a:	e014      	b.n	8008686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800865c:	f7fc ffe0 	bl	8005620 <HAL_GetTick>
 8008660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008662:	e008      	b.n	8008676 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008664:	f7fc ffdc 	bl	8005620 <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	2b64      	cmp	r3, #100	; 0x64
 8008670:	d901      	bls.n	8008676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e1b9      	b.n	80089ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008676:	4b6c      	ldr	r3, [pc, #432]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1f0      	bne.n	8008664 <HAL_RCC_OscConfig+0xe8>
 8008682:	e000      	b.n	8008686 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	2b00      	cmp	r3, #0
 8008690:	d063      	beq.n	800875a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008692:	4b65      	ldr	r3, [pc, #404]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f003 030c 	and.w	r3, r3, #12
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00b      	beq.n	80086b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800869e:	4b62      	ldr	r3, [pc, #392]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80086a6:	2b08      	cmp	r3, #8
 80086a8:	d11c      	bne.n	80086e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086aa:	4b5f      	ldr	r3, [pc, #380]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d116      	bne.n	80086e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086b6:	4b5c      	ldr	r3, [pc, #368]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0302 	and.w	r3, r3, #2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d005      	beq.n	80086ce <HAL_RCC_OscConfig+0x152>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d001      	beq.n	80086ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e18d      	b.n	80089ea <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086ce:	4b56      	ldr	r3, [pc, #344]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	4952      	ldr	r1, [pc, #328]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086e2:	e03a      	b.n	800875a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d020      	beq.n	800872e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086ec:	4b4f      	ldr	r3, [pc, #316]	; (800882c <HAL_RCC_OscConfig+0x2b0>)
 80086ee:	2201      	movs	r2, #1
 80086f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f2:	f7fc ff95 	bl	8005620 <HAL_GetTick>
 80086f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086f8:	e008      	b.n	800870c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086fa:	f7fc ff91 	bl	8005620 <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	2b02      	cmp	r3, #2
 8008706:	d901      	bls.n	800870c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e16e      	b.n	80089ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800870c:	4b46      	ldr	r3, [pc, #280]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0302 	and.w	r3, r3, #2
 8008714:	2b00      	cmp	r3, #0
 8008716:	d0f0      	beq.n	80086fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008718:	4b43      	ldr	r3, [pc, #268]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	00db      	lsls	r3, r3, #3
 8008726:	4940      	ldr	r1, [pc, #256]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 8008728:	4313      	orrs	r3, r2
 800872a:	600b      	str	r3, [r1, #0]
 800872c:	e015      	b.n	800875a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800872e:	4b3f      	ldr	r3, [pc, #252]	; (800882c <HAL_RCC_OscConfig+0x2b0>)
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008734:	f7fc ff74 	bl	8005620 <HAL_GetTick>
 8008738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800873a:	e008      	b.n	800874e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800873c:	f7fc ff70 	bl	8005620 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b02      	cmp	r3, #2
 8008748:	d901      	bls.n	800874e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e14d      	b.n	80089ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800874e:	4b36      	ldr	r3, [pc, #216]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1f0      	bne.n	800873c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0308 	and.w	r3, r3, #8
 8008762:	2b00      	cmp	r3, #0
 8008764:	d030      	beq.n	80087c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d016      	beq.n	800879c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800876e:	4b30      	ldr	r3, [pc, #192]	; (8008830 <HAL_RCC_OscConfig+0x2b4>)
 8008770:	2201      	movs	r2, #1
 8008772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008774:	f7fc ff54 	bl	8005620 <HAL_GetTick>
 8008778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800877a:	e008      	b.n	800878e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800877c:	f7fc ff50 	bl	8005620 <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	2b02      	cmp	r3, #2
 8008788:	d901      	bls.n	800878e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e12d      	b.n	80089ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800878e:	4b26      	ldr	r3, [pc, #152]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 8008790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0f0      	beq.n	800877c <HAL_RCC_OscConfig+0x200>
 800879a:	e015      	b.n	80087c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800879c:	4b24      	ldr	r3, [pc, #144]	; (8008830 <HAL_RCC_OscConfig+0x2b4>)
 800879e:	2200      	movs	r2, #0
 80087a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087a2:	f7fc ff3d 	bl	8005620 <HAL_GetTick>
 80087a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087a8:	e008      	b.n	80087bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087aa:	f7fc ff39 	bl	8005620 <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d901      	bls.n	80087bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e116      	b.n	80089ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087bc:	4b1a      	ldr	r3, [pc, #104]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 80087be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087c0:	f003 0302 	and.w	r3, r3, #2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1f0      	bne.n	80087aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 0304 	and.w	r3, r3, #4
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 80a0 	beq.w	8008916 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087d6:	2300      	movs	r3, #0
 80087d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087da:	4b13      	ldr	r3, [pc, #76]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 80087dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10f      	bne.n	8008806 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087e6:	2300      	movs	r3, #0
 80087e8:	60fb      	str	r3, [r7, #12]
 80087ea:	4b0f      	ldr	r3, [pc, #60]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 80087ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ee:	4a0e      	ldr	r2, [pc, #56]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 80087f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087f4:	6413      	str	r3, [r2, #64]	; 0x40
 80087f6:	4b0c      	ldr	r3, [pc, #48]	; (8008828 <HAL_RCC_OscConfig+0x2ac>)
 80087f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008802:	2301      	movs	r3, #1
 8008804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008806:	4b0b      	ldr	r3, [pc, #44]	; (8008834 <HAL_RCC_OscConfig+0x2b8>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800880e:	2b00      	cmp	r3, #0
 8008810:	d121      	bne.n	8008856 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008812:	4b08      	ldr	r3, [pc, #32]	; (8008834 <HAL_RCC_OscConfig+0x2b8>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a07      	ldr	r2, [pc, #28]	; (8008834 <HAL_RCC_OscConfig+0x2b8>)
 8008818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800881c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800881e:	f7fc feff 	bl	8005620 <HAL_GetTick>
 8008822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008824:	e011      	b.n	800884a <HAL_RCC_OscConfig+0x2ce>
 8008826:	bf00      	nop
 8008828:	40023800 	.word	0x40023800
 800882c:	42470000 	.word	0x42470000
 8008830:	42470e80 	.word	0x42470e80
 8008834:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008838:	f7fc fef2 	bl	8005620 <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	2b02      	cmp	r3, #2
 8008844:	d901      	bls.n	800884a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e0cf      	b.n	80089ea <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800884a:	4b6a      	ldr	r3, [pc, #424]	; (80089f4 <HAL_RCC_OscConfig+0x478>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008852:	2b00      	cmp	r3, #0
 8008854:	d0f0      	beq.n	8008838 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d106      	bne.n	800886c <HAL_RCC_OscConfig+0x2f0>
 800885e:	4b66      	ldr	r3, [pc, #408]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 8008860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008862:	4a65      	ldr	r2, [pc, #404]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 8008864:	f043 0301 	orr.w	r3, r3, #1
 8008868:	6713      	str	r3, [r2, #112]	; 0x70
 800886a:	e01c      	b.n	80088a6 <HAL_RCC_OscConfig+0x32a>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	2b05      	cmp	r3, #5
 8008872:	d10c      	bne.n	800888e <HAL_RCC_OscConfig+0x312>
 8008874:	4b60      	ldr	r3, [pc, #384]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 8008876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008878:	4a5f      	ldr	r2, [pc, #380]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 800887a:	f043 0304 	orr.w	r3, r3, #4
 800887e:	6713      	str	r3, [r2, #112]	; 0x70
 8008880:	4b5d      	ldr	r3, [pc, #372]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 8008882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008884:	4a5c      	ldr	r2, [pc, #368]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 8008886:	f043 0301 	orr.w	r3, r3, #1
 800888a:	6713      	str	r3, [r2, #112]	; 0x70
 800888c:	e00b      	b.n	80088a6 <HAL_RCC_OscConfig+0x32a>
 800888e:	4b5a      	ldr	r3, [pc, #360]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 8008890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008892:	4a59      	ldr	r2, [pc, #356]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 8008894:	f023 0301 	bic.w	r3, r3, #1
 8008898:	6713      	str	r3, [r2, #112]	; 0x70
 800889a:	4b57      	ldr	r3, [pc, #348]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 800889c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800889e:	4a56      	ldr	r2, [pc, #344]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 80088a0:	f023 0304 	bic.w	r3, r3, #4
 80088a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d015      	beq.n	80088da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088ae:	f7fc feb7 	bl	8005620 <HAL_GetTick>
 80088b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088b4:	e00a      	b.n	80088cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088b6:	f7fc feb3 	bl	8005620 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d901      	bls.n	80088cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e08e      	b.n	80089ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088cc:	4b4a      	ldr	r3, [pc, #296]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 80088ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d0:	f003 0302 	and.w	r3, r3, #2
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d0ee      	beq.n	80088b6 <HAL_RCC_OscConfig+0x33a>
 80088d8:	e014      	b.n	8008904 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088da:	f7fc fea1 	bl	8005620 <HAL_GetTick>
 80088de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088e0:	e00a      	b.n	80088f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088e2:	f7fc fe9d 	bl	8005620 <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d901      	bls.n	80088f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e078      	b.n	80089ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088f8:	4b3f      	ldr	r3, [pc, #252]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 80088fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fc:	f003 0302 	and.w	r3, r3, #2
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1ee      	bne.n	80088e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008904:	7dfb      	ldrb	r3, [r7, #23]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d105      	bne.n	8008916 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800890a:	4b3b      	ldr	r3, [pc, #236]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 800890c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890e:	4a3a      	ldr	r2, [pc, #232]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 8008910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008914:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d064      	beq.n	80089e8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800891e:	4b36      	ldr	r3, [pc, #216]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f003 030c 	and.w	r3, r3, #12
 8008926:	2b08      	cmp	r3, #8
 8008928:	d05c      	beq.n	80089e4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	2b02      	cmp	r3, #2
 8008930:	d141      	bne.n	80089b6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008932:	4b32      	ldr	r3, [pc, #200]	; (80089fc <HAL_RCC_OscConfig+0x480>)
 8008934:	2200      	movs	r2, #0
 8008936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008938:	f7fc fe72 	bl	8005620 <HAL_GetTick>
 800893c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800893e:	e008      	b.n	8008952 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008940:	f7fc fe6e 	bl	8005620 <HAL_GetTick>
 8008944:	4602      	mov	r2, r0
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	2b02      	cmp	r3, #2
 800894c:	d901      	bls.n	8008952 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e04b      	b.n	80089ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008952:	4b29      	ldr	r3, [pc, #164]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1f0      	bne.n	8008940 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	69da      	ldr	r2, [r3, #28]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	431a      	orrs	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	019b      	lsls	r3, r3, #6
 800896e:	431a      	orrs	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008974:	085b      	lsrs	r3, r3, #1
 8008976:	3b01      	subs	r3, #1
 8008978:	041b      	lsls	r3, r3, #16
 800897a:	431a      	orrs	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008980:	061b      	lsls	r3, r3, #24
 8008982:	491d      	ldr	r1, [pc, #116]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 8008984:	4313      	orrs	r3, r2
 8008986:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008988:	4b1c      	ldr	r3, [pc, #112]	; (80089fc <HAL_RCC_OscConfig+0x480>)
 800898a:	2201      	movs	r2, #1
 800898c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800898e:	f7fc fe47 	bl	8005620 <HAL_GetTick>
 8008992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008994:	e008      	b.n	80089a8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008996:	f7fc fe43 	bl	8005620 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d901      	bls.n	80089a8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e020      	b.n	80089ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089a8:	4b13      	ldr	r3, [pc, #76]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0f0      	beq.n	8008996 <HAL_RCC_OscConfig+0x41a>
 80089b4:	e018      	b.n	80089e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089b6:	4b11      	ldr	r3, [pc, #68]	; (80089fc <HAL_RCC_OscConfig+0x480>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089bc:	f7fc fe30 	bl	8005620 <HAL_GetTick>
 80089c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089c2:	e008      	b.n	80089d6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089c4:	f7fc fe2c 	bl	8005620 <HAL_GetTick>
 80089c8:	4602      	mov	r2, r0
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d901      	bls.n	80089d6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e009      	b.n	80089ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089d6:	4b08      	ldr	r3, [pc, #32]	; (80089f8 <HAL_RCC_OscConfig+0x47c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1f0      	bne.n	80089c4 <HAL_RCC_OscConfig+0x448>
 80089e2:	e001      	b.n	80089e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e000      	b.n	80089ea <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3718      	adds	r7, #24
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	40007000 	.word	0x40007000
 80089f8:	40023800 	.word	0x40023800
 80089fc:	42470060 	.word	0x42470060

08008a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e0ca      	b.n	8008baa <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a14:	4b67      	ldr	r3, [pc, #412]	; (8008bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 030f 	and.w	r3, r3, #15
 8008a1c:	683a      	ldr	r2, [r7, #0]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d90c      	bls.n	8008a3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a22:	4b64      	ldr	r3, [pc, #400]	; (8008bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	b2d2      	uxtb	r2, r2
 8008a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a2a:	4b62      	ldr	r3, [pc, #392]	; (8008bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 030f 	and.w	r3, r3, #15
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d001      	beq.n	8008a3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e0b6      	b.n	8008baa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0302 	and.w	r3, r3, #2
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d020      	beq.n	8008a8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0304 	and.w	r3, r3, #4
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d005      	beq.n	8008a60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a54:	4b58      	ldr	r3, [pc, #352]	; (8008bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	4a57      	ldr	r2, [pc, #348]	; (8008bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8008a5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0308 	and.w	r3, r3, #8
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d005      	beq.n	8008a78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a6c:	4b52      	ldr	r3, [pc, #328]	; (8008bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	4a51      	ldr	r2, [pc, #324]	; (8008bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8008a72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a78:	4b4f      	ldr	r3, [pc, #316]	; (8008bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	494c      	ldr	r1, [pc, #304]	; (8008bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d044      	beq.n	8008b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d107      	bne.n	8008aae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a9e:	4b46      	ldr	r3, [pc, #280]	; (8008bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d119      	bne.n	8008ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e07d      	b.n	8008baa <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d003      	beq.n	8008abe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d107      	bne.n	8008ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008abe:	4b3e      	ldr	r3, [pc, #248]	; (8008bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d109      	bne.n	8008ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e06d      	b.n	8008baa <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ace:	4b3a      	ldr	r3, [pc, #232]	; (8008bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0302 	and.w	r3, r3, #2
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d101      	bne.n	8008ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e065      	b.n	8008baa <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ade:	4b36      	ldr	r3, [pc, #216]	; (8008bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f023 0203 	bic.w	r2, r3, #3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	4933      	ldr	r1, [pc, #204]	; (8008bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008af0:	f7fc fd96 	bl	8005620 <HAL_GetTick>
 8008af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008af6:	e00a      	b.n	8008b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008af8:	f7fc fd92 	bl	8005620 <HAL_GetTick>
 8008afc:	4602      	mov	r2, r0
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d901      	bls.n	8008b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e04d      	b.n	8008baa <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b0e:	4b2a      	ldr	r3, [pc, #168]	; (8008bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	f003 020c 	and.w	r2, r3, #12
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d1eb      	bne.n	8008af8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b20:	4b24      	ldr	r3, [pc, #144]	; (8008bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 030f 	and.w	r3, r3, #15
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d20c      	bcs.n	8008b48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b2e:	4b21      	ldr	r3, [pc, #132]	; (8008bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	b2d2      	uxtb	r2, r2
 8008b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b36:	4b1f      	ldr	r3, [pc, #124]	; (8008bb4 <HAL_RCC_ClockConfig+0x1b4>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 030f 	and.w	r3, r3, #15
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d001      	beq.n	8008b48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e030      	b.n	8008baa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0304 	and.w	r3, r3, #4
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d008      	beq.n	8008b66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b54:	4b18      	ldr	r3, [pc, #96]	; (8008bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	4915      	ldr	r1, [pc, #84]	; (8008bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0308 	and.w	r3, r3, #8
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d009      	beq.n	8008b86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b72:	4b11      	ldr	r3, [pc, #68]	; (8008bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	00db      	lsls	r3, r3, #3
 8008b80:	490d      	ldr	r1, [pc, #52]	; (8008bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b86:	f000 f81d 	bl	8008bc4 <HAL_RCC_GetSysClockFreq>
 8008b8a:	4601      	mov	r1, r0
 8008b8c:	4b0a      	ldr	r3, [pc, #40]	; (8008bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	091b      	lsrs	r3, r3, #4
 8008b92:	f003 030f 	and.w	r3, r3, #15
 8008b96:	4a09      	ldr	r2, [pc, #36]	; (8008bbc <HAL_RCC_ClockConfig+0x1bc>)
 8008b98:	5cd3      	ldrb	r3, [r2, r3]
 8008b9a:	fa21 f303 	lsr.w	r3, r1, r3
 8008b9e:	4a08      	ldr	r2, [pc, #32]	; (8008bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8008ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	f7fc fcf8 	bl	8005598 <HAL_InitTick>

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	40023c00 	.word	0x40023c00
 8008bb8:	40023800 	.word	0x40023800
 8008bbc:	0801ab40 	.word	0x0801ab40
 8008bc0:	20000120 	.word	0x20000120

08008bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	607b      	str	r3, [r7, #4]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bda:	4b50      	ldr	r3, [pc, #320]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f003 030c 	and.w	r3, r3, #12
 8008be2:	2b04      	cmp	r3, #4
 8008be4:	d007      	beq.n	8008bf6 <HAL_RCC_GetSysClockFreq+0x32>
 8008be6:	2b08      	cmp	r3, #8
 8008be8:	d008      	beq.n	8008bfc <HAL_RCC_GetSysClockFreq+0x38>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f040 808d 	bne.w	8008d0a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008bf0:	4b4b      	ldr	r3, [pc, #300]	; (8008d20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008bf2:	60bb      	str	r3, [r7, #8]
       break;
 8008bf4:	e08c      	b.n	8008d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008bf6:	4b4b      	ldr	r3, [pc, #300]	; (8008d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8008bf8:	60bb      	str	r3, [r7, #8]
      break;
 8008bfa:	e089      	b.n	8008d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bfc:	4b47      	ldr	r3, [pc, #284]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c06:	4b45      	ldr	r3, [pc, #276]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d023      	beq.n	8008c5a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c12:	4b42      	ldr	r3, [pc, #264]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	099b      	lsrs	r3, r3, #6
 8008c18:	f04f 0400 	mov.w	r4, #0
 8008c1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008c20:	f04f 0200 	mov.w	r2, #0
 8008c24:	ea03 0501 	and.w	r5, r3, r1
 8008c28:	ea04 0602 	and.w	r6, r4, r2
 8008c2c:	4a3d      	ldr	r2, [pc, #244]	; (8008d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8008c2e:	fb02 f106 	mul.w	r1, r2, r6
 8008c32:	2200      	movs	r2, #0
 8008c34:	fb02 f205 	mul.w	r2, r2, r5
 8008c38:	440a      	add	r2, r1
 8008c3a:	493a      	ldr	r1, [pc, #232]	; (8008d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8008c3c:	fba5 0101 	umull	r0, r1, r5, r1
 8008c40:	1853      	adds	r3, r2, r1
 8008c42:	4619      	mov	r1, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f04f 0400 	mov.w	r4, #0
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	4623      	mov	r3, r4
 8008c4e:	f7f8 f87b 	bl	8000d48 <__aeabi_uldivmod>
 8008c52:	4603      	mov	r3, r0
 8008c54:	460c      	mov	r4, r1
 8008c56:	60fb      	str	r3, [r7, #12]
 8008c58:	e049      	b.n	8008cee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c5a:	4b30      	ldr	r3, [pc, #192]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	099b      	lsrs	r3, r3, #6
 8008c60:	f04f 0400 	mov.w	r4, #0
 8008c64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008c68:	f04f 0200 	mov.w	r2, #0
 8008c6c:	ea03 0501 	and.w	r5, r3, r1
 8008c70:	ea04 0602 	and.w	r6, r4, r2
 8008c74:	4629      	mov	r1, r5
 8008c76:	4632      	mov	r2, r6
 8008c78:	f04f 0300 	mov.w	r3, #0
 8008c7c:	f04f 0400 	mov.w	r4, #0
 8008c80:	0154      	lsls	r4, r2, #5
 8008c82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008c86:	014b      	lsls	r3, r1, #5
 8008c88:	4619      	mov	r1, r3
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	1b49      	subs	r1, r1, r5
 8008c8e:	eb62 0206 	sbc.w	r2, r2, r6
 8008c92:	f04f 0300 	mov.w	r3, #0
 8008c96:	f04f 0400 	mov.w	r4, #0
 8008c9a:	0194      	lsls	r4, r2, #6
 8008c9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008ca0:	018b      	lsls	r3, r1, #6
 8008ca2:	1a5b      	subs	r3, r3, r1
 8008ca4:	eb64 0402 	sbc.w	r4, r4, r2
 8008ca8:	f04f 0100 	mov.w	r1, #0
 8008cac:	f04f 0200 	mov.w	r2, #0
 8008cb0:	00e2      	lsls	r2, r4, #3
 8008cb2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008cb6:	00d9      	lsls	r1, r3, #3
 8008cb8:	460b      	mov	r3, r1
 8008cba:	4614      	mov	r4, r2
 8008cbc:	195b      	adds	r3, r3, r5
 8008cbe:	eb44 0406 	adc.w	r4, r4, r6
 8008cc2:	f04f 0100 	mov.w	r1, #0
 8008cc6:	f04f 0200 	mov.w	r2, #0
 8008cca:	02a2      	lsls	r2, r4, #10
 8008ccc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008cd0:	0299      	lsls	r1, r3, #10
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4614      	mov	r4, r2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	4621      	mov	r1, r4
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f04f 0400 	mov.w	r4, #0
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	4623      	mov	r3, r4
 8008ce4:	f7f8 f830 	bl	8000d48 <__aeabi_uldivmod>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	460c      	mov	r4, r1
 8008cec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008cee:	4b0b      	ldr	r3, [pc, #44]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	0c1b      	lsrs	r3, r3, #16
 8008cf4:	f003 0303 	and.w	r3, r3, #3
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	005b      	lsls	r3, r3, #1
 8008cfc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d06:	60bb      	str	r3, [r7, #8]
      break;
 8008d08:	e002      	b.n	8008d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d0a:	4b05      	ldr	r3, [pc, #20]	; (8008d20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008d0c:	60bb      	str	r3, [r7, #8]
      break;
 8008d0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d10:	68bb      	ldr	r3, [r7, #8]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	40023800 	.word	0x40023800
 8008d20:	00f42400 	.word	0x00f42400
 8008d24:	00b71b00 	.word	0x00b71b00

08008d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d2c:	4b03      	ldr	r3, [pc, #12]	; (8008d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	20000120 	.word	0x20000120

08008d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d44:	f7ff fff0 	bl	8008d28 <HAL_RCC_GetHCLKFreq>
 8008d48:	4601      	mov	r1, r0
 8008d4a:	4b05      	ldr	r3, [pc, #20]	; (8008d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	0a9b      	lsrs	r3, r3, #10
 8008d50:	f003 0307 	and.w	r3, r3, #7
 8008d54:	4a03      	ldr	r2, [pc, #12]	; (8008d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d56:	5cd3      	ldrb	r3, [r2, r3]
 8008d58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	40023800 	.word	0x40023800
 8008d64:	0801ab50 	.word	0x0801ab50

08008d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008d6c:	f7ff ffdc 	bl	8008d28 <HAL_RCC_GetHCLKFreq>
 8008d70:	4601      	mov	r1, r0
 8008d72:	4b05      	ldr	r3, [pc, #20]	; (8008d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	0b5b      	lsrs	r3, r3, #13
 8008d78:	f003 0307 	and.w	r3, r3, #7
 8008d7c:	4a03      	ldr	r2, [pc, #12]	; (8008d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d7e:	5cd3      	ldrb	r3, [r2, r3]
 8008d80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	40023800 	.word	0x40023800
 8008d8c:	0801ab50 	.word	0x0801ab50

08008d90 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0301 	and.w	r3, r3, #1
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d105      	bne.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d035      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008db8:	4b62      	ldr	r3, [pc, #392]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008dbe:	f7fc fc2f 	bl	8005620 <HAL_GetTick>
 8008dc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008dc4:	e008      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008dc6:	f7fc fc2b 	bl	8005620 <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	d901      	bls.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e0b0      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008dd8:	4b5b      	ldr	r3, [pc, #364]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1f0      	bne.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	019a      	lsls	r2, r3, #6
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	071b      	lsls	r3, r3, #28
 8008df0:	4955      	ldr	r1, [pc, #340]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008df8:	4b52      	ldr	r3, [pc, #328]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008dfe:	f7fc fc0f 	bl	8005620 <HAL_GetTick>
 8008e02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008e04:	e008      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008e06:	f7fc fc0b 	bl	8005620 <HAL_GetTick>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d901      	bls.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e14:	2303      	movs	r3, #3
 8008e16:	e090      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008e18:	4b4b      	ldr	r3, [pc, #300]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d0f0      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 0302 	and.w	r3, r3, #2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 8083 	beq.w	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e32:	2300      	movs	r3, #0
 8008e34:	60fb      	str	r3, [r7, #12]
 8008e36:	4b44      	ldr	r3, [pc, #272]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3a:	4a43      	ldr	r2, [pc, #268]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e40:	6413      	str	r3, [r2, #64]	; 0x40
 8008e42:	4b41      	ldr	r3, [pc, #260]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008e4e:	4b3f      	ldr	r3, [pc, #252]	; (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a3e      	ldr	r2, [pc, #248]	; (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e5a:	f7fc fbe1 	bl	8005620 <HAL_GetTick>
 8008e5e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008e60:	e008      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008e62:	f7fc fbdd 	bl	8005620 <HAL_GetTick>
 8008e66:	4602      	mov	r2, r0
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d901      	bls.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e062      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008e74:	4b35      	ldr	r3, [pc, #212]	; (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d0f0      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e80:	4b31      	ldr	r3, [pc, #196]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e88:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d02f      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d028      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e9e:	4b2a      	ldr	r3, [pc, #168]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ea6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008ea8:	4b29      	ldr	r3, [pc, #164]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008eaa:	2201      	movs	r2, #1
 8008eac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008eae:	4b28      	ldr	r3, [pc, #160]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008eb4:	4a24      	ldr	r2, [pc, #144]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008eba:	4b23      	ldr	r3, [pc, #140]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d114      	bne.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008ec6:	f7fc fbab 	bl	8005620 <HAL_GetTick>
 8008eca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ecc:	e00a      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ece:	f7fc fba7 	bl	8005620 <HAL_GetTick>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d901      	bls.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e02a      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ee4:	4b18      	ldr	r3, [pc, #96]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee8:	f003 0302 	and.w	r3, r3, #2
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d0ee      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ef8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008efc:	d10d      	bne.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008efe:	4b12      	ldr	r3, [pc, #72]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f12:	490d      	ldr	r1, [pc, #52]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	608b      	str	r3, [r1, #8]
 8008f18:	e005      	b.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008f1a:	4b0b      	ldr	r3, [pc, #44]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	4a0a      	ldr	r2, [pc, #40]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008f20:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008f24:	6093      	str	r3, [r2, #8]
 8008f26:	4b08      	ldr	r3, [pc, #32]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008f28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f32:	4905      	ldr	r1, [pc, #20]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008f34:	4313      	orrs	r3, r2
 8008f36:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3718      	adds	r7, #24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	42470068 	.word	0x42470068
 8008f48:	40023800 	.word	0x40023800
 8008f4c:	40007000 	.word	0x40007000
 8008f50:	42470e40 	.word	0x42470e40

08008f54 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e083      	b.n	800906e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	7f5b      	ldrb	r3, [r3, #29]
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d105      	bne.n	8008f7c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f00a fd88 	bl	8013a8c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	22ca      	movs	r2, #202	; 0xca
 8008f88:	625a      	str	r2, [r3, #36]	; 0x24
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2253      	movs	r2, #83	; 0x53
 8008f90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f944 	bl	8009220 <RTC_EnterInitMode>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d008      	beq.n	8008fb0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	22ff      	movs	r2, #255	; 0xff
 8008fa4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2204      	movs	r2, #4
 8008faa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e05e      	b.n	800906e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	6812      	ldr	r2, [r2, #0]
 8008fba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fc2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6899      	ldr	r1, [r3, #8]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	431a      	orrs	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	695b      	ldr	r3, [r3, #20]
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	68d2      	ldr	r2, [r2, #12]
 8008fea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6919      	ldr	r1, [r3, #16]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	041a      	lsls	r2, r3, #16
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68da      	ldr	r2, [r3, #12]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800900e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10e      	bne.n	800903c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f8d6 	bl	80091d0 <HAL_RTC_WaitForSynchro>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d008      	beq.n	800903c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	22ff      	movs	r2, #255	; 0xff
 8009030:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2204      	movs	r2, #4
 8009036:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	e018      	b.n	800906e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800904a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	699a      	ldr	r2, [r3, #24]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	430a      	orrs	r2, r1
 800905c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	22ff      	movs	r2, #255	; 0xff
 8009064:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2201      	movs	r2, #1
 800906a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800906c:	2300      	movs	r3, #0
  }
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b086      	sub	sp, #24
 800907a:	af00      	add	r7, sp, #0
 800907c:	60f8      	str	r0, [r7, #12]
 800907e:	60b9      	str	r1, [r7, #8]
 8009080:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009082:	2300      	movs	r3, #0
 8009084:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80090a8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80090ac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	0c1b      	lsrs	r3, r3, #16
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	0a1b      	lsrs	r3, r3, #8
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090c8:	b2da      	uxtb	r2, r3
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	0c1b      	lsrs	r3, r3, #16
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d11a      	bne.n	8009128 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 f8be 	bl	8009278 <RTC_Bcd2ToByte>
 80090fc:	4603      	mov	r3, r0
 80090fe:	461a      	mov	r2, r3
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	785b      	ldrb	r3, [r3, #1]
 8009108:	4618      	mov	r0, r3
 800910a:	f000 f8b5 	bl	8009278 <RTC_Bcd2ToByte>
 800910e:	4603      	mov	r3, r0
 8009110:	461a      	mov	r2, r3
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	789b      	ldrb	r3, [r3, #2]
 800911a:	4618      	mov	r0, r3
 800911c:	f000 f8ac 	bl	8009278 <RTC_Bcd2ToByte>
 8009120:	4603      	mov	r3, r0
 8009122:	461a      	mov	r2, r3
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b086      	sub	sp, #24
 8009136:	af00      	add	r7, sp, #0
 8009138:	60f8      	str	r0, [r7, #12]
 800913a:	60b9      	str	r1, [r7, #8]
 800913c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800914c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009150:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	0c1b      	lsrs	r3, r3, #16
 8009156:	b2da      	uxtb	r2, r3
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	0a1b      	lsrs	r3, r3, #8
 8009160:	b2db      	uxtb	r3, r3
 8009162:	f003 031f 	and.w	r3, r3, #31
 8009166:	b2da      	uxtb	r2, r3
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	b2db      	uxtb	r3, r3
 8009170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009174:	b2da      	uxtb	r2, r3
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	0b5b      	lsrs	r3, r3, #13
 800917e:	b2db      	uxtb	r3, r3
 8009180:	f003 0307 	and.w	r3, r3, #7
 8009184:	b2da      	uxtb	r2, r3
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d11a      	bne.n	80091c6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	78db      	ldrb	r3, [r3, #3]
 8009194:	4618      	mov	r0, r3
 8009196:	f000 f86f 	bl	8009278 <RTC_Bcd2ToByte>
 800919a:	4603      	mov	r3, r0
 800919c:	461a      	mov	r2, r3
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	785b      	ldrb	r3, [r3, #1]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 f866 	bl	8009278 <RTC_Bcd2ToByte>
 80091ac:	4603      	mov	r3, r0
 80091ae:	461a      	mov	r2, r3
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	789b      	ldrb	r3, [r3, #2]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 f85d 	bl	8009278 <RTC_Bcd2ToByte>
 80091be:	4603      	mov	r3, r0
 80091c0:	461a      	mov	r2, r3
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3718      	adds	r7, #24
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68da      	ldr	r2, [r3, #12]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80091ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091ec:	f7fc fa18 	bl	8005620 <HAL_GetTick>
 80091f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80091f2:	e009      	b.n	8009208 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80091f4:	f7fc fa14 	bl	8005620 <HAL_GetTick>
 80091f8:	4602      	mov	r2, r0
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009202:	d901      	bls.n	8009208 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	e007      	b.n	8009218 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	f003 0320 	and.w	r3, r3, #32
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0ee      	beq.n	80091f4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009228:	2300      	movs	r3, #0
 800922a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009236:	2b00      	cmp	r3, #0
 8009238:	d119      	bne.n	800926e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f04f 32ff 	mov.w	r2, #4294967295
 8009242:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009244:	f7fc f9ec 	bl	8005620 <HAL_GetTick>
 8009248:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800924a:	e009      	b.n	8009260 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800924c:	f7fc f9e8 	bl	8005620 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800925a:	d901      	bls.n	8009260 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e007      	b.n	8009270 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0ee      	beq.n	800924c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8009282:	2300      	movs	r3, #0
 8009284:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009286:	79fb      	ldrb	r3, [r7, #7]
 8009288:	091b      	lsrs	r3, r3, #4
 800928a:	b2db      	uxtb	r3, r3
 800928c:	461a      	mov	r2, r3
 800928e:	4613      	mov	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	f003 030f 	and.w	r3, r3, #15
 800929e:	b2da      	uxtb	r2, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	4413      	add	r3, r2
 80092a6:	b2db      	uxtb	r3, r3
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3714      	adds	r7, #20
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d101      	bne.n	80092c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e01d      	b.n	8009302 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d105      	bne.n	80092de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f00a fbed 	bl	8013ab8 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2203      	movs	r2, #3
 80092e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f810 	bl	800930c <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
	...

0800930c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800930c:	b5b0      	push	{r4, r5, r7, lr}
 800930e:	b08e      	sub	sp, #56	; 0x38
 8009310:	af04      	add	r7, sp, #16
 8009312:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009314:	2300      	movs	r3, #0
 8009316:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009318:	2300      	movs	r3, #0
 800931a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800931c:	2300      	movs	r3, #0
 800931e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009320:	2300      	movs	r3, #0
 8009322:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009324:	2300      	movs	r3, #0
 8009326:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009328:	2300      	movs	r3, #0
 800932a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800932c:	2376      	movs	r3, #118	; 0x76
 800932e:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681d      	ldr	r5, [r3, #0]
 8009334:	466c      	mov	r4, sp
 8009336:	f107 0318 	add.w	r3, r7, #24
 800933a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800933e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009342:	f107 030c 	add.w	r3, r7, #12
 8009346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009348:	4628      	mov	r0, r5
 800934a:	f002 fc27 	bl	800bb9c <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 800934e:	4b1c      	ldr	r3, [pc, #112]	; (80093c0 <HAL_SD_InitCard+0xb4>)
 8009350:	2200      	movs	r2, #0
 8009352:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4618      	mov	r0, r3
 800935a:	f002 fc68 	bl	800bc2e <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800935e:	4b18      	ldr	r3, [pc, #96]	; (80093c0 <HAL_SD_InitCard+0xb4>)
 8009360:	2201      	movs	r2, #1
 8009362:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8009364:	2002      	movs	r0, #2
 8009366:	f7fc f967 	bl	8005638 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fffe 	bl	800a36c <SD_PowerON>
 8009370:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00b      	beq.n	8009390 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	431a      	orrs	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e013      	b.n	80093b8 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 ff22 	bl	800a1da <SD_InitCard>
 8009396:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00b      	beq.n	80093b6 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	431a      	orrs	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e000      	b.n	80093b8 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3728      	adds	r7, #40	; 0x28
 80093bc:	46bd      	mov	sp, r7
 80093be:	bdb0      	pop	{r4, r5, r7, pc}
 80093c0:	422580a0 	.word	0x422580a0

080093c4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08c      	sub	sp, #48	; 0x30
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80093d2:	2300      	movs	r3, #0
 80093d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d107      	bne.n	80093ec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e0ad      	b.n	8009548 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	f040 80a6 	bne.w	8009546 <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	441a      	add	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800940a:	429a      	cmp	r2, r3
 800940c:	d907      	bls.n	800941e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009412:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e094      	b.n	8009548 <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2203      	movs	r2, #3
 8009422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2200      	movs	r2, #0
 800942c:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	6812      	ldr	r2, [r2, #0]
 8009438:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800943c:	f043 0302 	orr.w	r3, r3, #2
 8009440:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009446:	4a42      	ldr	r2, [pc, #264]	; (8009550 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8009448:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800944e:	4a41      	ldr	r2, [pc, #260]	; (8009554 <HAL_SD_ReadBlocks_DMA+0x190>)
 8009450:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009456:	2200      	movs	r2, #0
 8009458:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3380      	adds	r3, #128	; 0x80
 8009464:	4619      	mov	r1, r3
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	025b      	lsls	r3, r3, #9
 800946c:	089b      	lsrs	r3, r3, #2
 800946e:	f7fc fac5 	bl	80059fc <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009472:	4b39      	ldr	r3, [pc, #228]	; (8009558 <HAL_SD_ReadBlocks_DMA+0x194>)
 8009474:	2201      	movs	r2, #1
 8009476:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800947c:	2b01      	cmp	r3, #1
 800947e:	d002      	beq.n	8009486 <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	025b      	lsls	r3, r3, #9
 8009484:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009486:	f04f 33ff 	mov.w	r3, #4294967295
 800948a:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	025b      	lsls	r3, r3, #9
 8009490:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009492:	2390      	movs	r3, #144	; 0x90
 8009494:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009496:	2302      	movs	r3, #2
 8009498:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800949a:	2300      	movs	r3, #0
 800949c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800949e:	2301      	movs	r3, #1
 80094a0:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f107 0214 	add.w	r2, r7, #20
 80094aa:	4611      	mov	r1, r2
 80094ac:	4618      	mov	r0, r3
 80094ae:	f002 fc26 	bl	800bcfe <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80094ba:	4618      	mov	r0, r3
 80094bc:	f002 fc4b 	bl	800bd56 <SDMMC_CmdBlockLength>
 80094c0:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80094c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d010      	beq.n	80094ea <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80094d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d8:	431a      	orrs	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e02e      	b.n	8009548 <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d90a      	bls.n	8009506 <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2282      	movs	r2, #130	; 0x82
 80094f4:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f002 fc72 	bl	800bde6 <SDMMC_CmdReadMultiBlock>
 8009502:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009504:	e009      	b.n	800951a <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2281      	movs	r2, #129	; 0x81
 800950a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6879      	ldr	r1, [r7, #4]
 8009512:	4618      	mov	r0, r3
 8009514:	f002 fc43 	bl	800bd9e <SDMMC_CmdReadSingleBlock>
 8009518:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d010      	beq.n	8009542 <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009528:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009530:	431a      	orrs	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e002      	b.n	8009548 <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	e000      	b.n	8009548 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 8009546:	2302      	movs	r3, #2
  }
}
 8009548:	4618      	mov	r0, r3
 800954a:	3730      	adds	r7, #48	; 0x30
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	08009feb 	.word	0x08009feb
 8009554:	0800a059 	.word	0x0800a059
 8009558:	4225858c 	.word	0x4225858c

0800955c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b08c      	sub	sp, #48	; 0x30
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
 8009568:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800956a:	2300      	movs	r3, #0
 800956c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d107      	bne.n	8009584 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009578:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e0ad      	b.n	80096e0 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b01      	cmp	r3, #1
 800958e:	f040 80a6 	bne.w	80096de <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	441a      	add	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d907      	bls.n	80095b6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e094      	b.n	80096e0 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2203      	movs	r2, #3
 80095ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2200      	movs	r2, #0
 80095c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	6812      	ldr	r2, [r2, #0]
 80095d0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80095d4:	f043 0302 	orr.w	r3, r3, #2
 80095d8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095de:	4a42      	ldr	r2, [pc, #264]	; (80096e8 <HAL_SD_WriteBlocks_DMA+0x18c>)
 80095e0:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e6:	4a41      	ldr	r2, [pc, #260]	; (80096ec <HAL_SD_WriteBlocks_DMA+0x190>)
 80095e8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	2200      	movs	r2, #0
 80095f0:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d002      	beq.n	8009600 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	025b      	lsls	r3, r3, #9
 80095fe:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009608:	4618      	mov	r0, r3
 800960a:	f002 fba4 	bl	800bd56 <SDMMC_CmdBlockLength>
 800960e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009612:	2b00      	cmp	r3, #0
 8009614:	d010      	beq.n	8009638 <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800961e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009626:	431a      	orrs	r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e053      	b.n	80096e0 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d90a      	bls.n	8009654 <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	22a0      	movs	r2, #160	; 0xa0
 8009642:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6879      	ldr	r1, [r7, #4]
 800964a:	4618      	mov	r0, r3
 800964c:	f002 fc13 	bl	800be76 <SDMMC_CmdWriteMultiBlock>
 8009650:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009652:	e009      	b.n	8009668 <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2290      	movs	r2, #144	; 0x90
 8009658:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	6879      	ldr	r1, [r7, #4]
 8009660:	4618      	mov	r0, r3
 8009662:	f002 fbe4 	bl	800be2e <SDMMC_CmdWriteSingleBlock>
 8009666:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966a:	2b00      	cmp	r3, #0
 800966c:	d010      	beq.n	8009690 <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009676:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800967c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967e:	431a      	orrs	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e027      	b.n	80096e0 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009690:	4b17      	ldr	r3, [pc, #92]	; (80096f0 <HAL_SD_WriteBlocks_DMA+0x194>)
 8009692:	2201      	movs	r2, #1
 8009694:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800969a:	68b9      	ldr	r1, [r7, #8]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	3380      	adds	r3, #128	; 0x80
 80096a2:	461a      	mov	r2, r3
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	025b      	lsls	r3, r3, #9
 80096a8:	089b      	lsrs	r3, r3, #2
 80096aa:	f7fc f9a7 	bl	80059fc <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80096ae:	f04f 33ff 	mov.w	r3, #4294967295
 80096b2:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	025b      	lsls	r3, r3, #9
 80096b8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80096ba:	2390      	movs	r3, #144	; 0x90
 80096bc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80096be:	2300      	movs	r3, #0
 80096c0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80096c6:	2301      	movs	r3, #1
 80096c8:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f107 0214 	add.w	r2, r7, #20
 80096d2:	4611      	mov	r1, r2
 80096d4:	4618      	mov	r0, r3
 80096d6:	f002 fb12 	bl	800bcfe <SDIO_ConfigData>
    
    return HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	e000      	b.n	80096e0 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 80096de:	2302      	movs	r3, #2
  }
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3730      	adds	r7, #48	; 0x30
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	08009fc1 	.word	0x08009fc1
 80096ec:	0800a059 	.word	0x0800a059
 80096f0:	4225858c 	.word	0x4225858c

080096f4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80096fc:	2300      	movs	r3, #0
 80096fe:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 808d 	beq.w	800982a <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009718:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	6812      	ldr	r2, [r2, #0]
 8009724:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8009728:	f023 0302 	bic.w	r3, r3, #2
 800972c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009732:	f003 0308 	and.w	r3, r3, #8
 8009736:	2b00      	cmp	r3, #0
 8009738:	d03a      	beq.n	80097b0 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800973e:	f003 0302 	and.w	r3, r3, #2
 8009742:	2b00      	cmp	r3, #0
 8009744:	d105      	bne.n	8009752 <HAL_SD_IRQHandler+0x5e>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974a:	f003 0320 	and.w	r3, r3, #32
 800974e:	2b00      	cmp	r3, #0
 8009750:	d011      	beq.n	8009776 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4618      	mov	r0, r3
 8009758:	f002 fbb2 	bl	800bec0 <SDMMC_CmdStopTransfer>
 800975c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d008      	beq.n	8009776 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	431a      	orrs	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f925 	bl	80099c0 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800977e:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978c:	f003 0301 	and.w	r3, r3, #1
 8009790:	2b00      	cmp	r3, #0
 8009792:	d105      	bne.n	80097a0 <HAL_SD_IRQHandler+0xac>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009798:	f003 0302 	and.w	r3, r3, #2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d003      	beq.n	80097a8 <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f008 f9e3 	bl	8011b6c <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 80097a6:	e103      	b.n	80099b0 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f008 f9d5 	bl	8011b58 <HAL_SD_TxCpltCallback>
}
 80097ae:	e0ff      	b.n	80099b0 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 80f9 	beq.w	80099b0 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c2:	f003 0320 	and.w	r3, r3, #32
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d011      	beq.n	80097ee <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f002 fb76 	bl	800bec0 <SDMMC_CmdStopTransfer>
 80097d4:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d008      	beq.n	80097ee <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	431a      	orrs	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f8e9 	bl	80099c0 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f040 80da 	bne.w	80099b0 <HAL_SD_IRQHandler+0x2bc>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009800:	f003 0302 	and.w	r3, r3, #2
 8009804:	2b00      	cmp	r3, #0
 8009806:	f040 80d3 	bne.w	80099b0 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f022 0208 	bic.w	r2, r2, #8
 8009818:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f008 f998 	bl	8011b58 <HAL_SD_TxCpltCallback>
}
 8009828:	e0c2      	b.n	80099b0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d008      	beq.n	800984a <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009840:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 ffef 	bl	800a826 <SD_Write_IT>
}
 8009848:	e0b2      	b.n	80099b0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d008      	beq.n	800986a <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009860:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 ffb7 	bl	800a7d6 <SD_Read_IT>
}
 8009868:	e0a2      	b.n	80099b0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009870:	f240 233a 	movw	r3, #570	; 0x23a
 8009874:	4013      	ands	r3, r2
 8009876:	2b00      	cmp	r3, #0
 8009878:	f000 809a 	beq.w	80099b0 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009882:	f003 0302 	and.w	r3, r3, #2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d005      	beq.n	8009896 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988e:	f043 0202 	orr.w	r2, r3, #2
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800989c:	f003 0308 	and.w	r3, r3, #8
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d005      	beq.n	80098b0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a8:	f043 0208 	orr.w	r2, r3, #8
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b6:	f003 0320 	and.w	r3, r3, #32
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d005      	beq.n	80098ca <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c2:	f043 0220 	orr.w	r2, r3, #32
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098d0:	f003 0310 	and.w	r3, r3, #16
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d005      	beq.n	80098e4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098dc:	f043 0210 	orr.w	r2, r3, #16
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d005      	beq.n	80098fe <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f6:	f043 0208 	orr.w	r2, r3, #8
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009906:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	6812      	ldr	r2, [r2, #0]
 8009912:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8009916:	f023 0302 	bic.w	r3, r3, #2
 800991a:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009924:	2b00      	cmp	r3, #0
 8009926:	d036      	beq.n	8009996 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992c:	2b00      	cmp	r3, #0
 800992e:	d011      	beq.n	8009954 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009934:	4a20      	ldr	r2, [pc, #128]	; (80099b8 <HAL_SD_IRQHandler+0x2c4>)
 8009936:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993c:	4618      	mov	r0, r3
 800993e:	f7fc f8bd 	bl	8005abc <HAL_DMA_Abort_IT>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d033      	beq.n	80099b0 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994c:	4618      	mov	r0, r3
 800994e:	f000 fbc8 	bl	800a0e2 <SD_DMATxAbort>
}
 8009952:	e02d      	b.n	80099b0 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009958:	2b00      	cmp	r3, #0
 800995a:	d011      	beq.n	8009980 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009960:	4a16      	ldr	r2, [pc, #88]	; (80099bc <HAL_SD_IRQHandler+0x2c8>)
 8009962:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009968:	4618      	mov	r0, r3
 800996a:	f7fc f8a7 	bl	8005abc <HAL_DMA_Abort_IT>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d01d      	beq.n	80099b0 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009978:	4618      	mov	r0, r3
 800997a:	f000 fbf0 	bl	800a15e <SD_DMARxAbort>
}
 800997e:	e017      	b.n	80099b0 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f008 f8d8 	bl	8011b44 <HAL_SD_AbortCallback>
}
 8009994:	e00c      	b.n	80099b0 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999a:	f003 0308 	and.w	r3, r3, #8
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d006      	beq.n	80099b0 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f808 	bl	80099c0 <HAL_SD_ErrorCallback>
}
 80099b0:	bf00      	nop
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	0800a0e3 	.word	0x0800a0e3
 80099bc:	0800a15f 	.word	0x0800a15f

080099c0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80099de:	2300      	movs	r3, #0
 80099e0:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099e6:	0e1b      	lsrs	r3, r3, #24
 80099e8:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	099b      	lsrs	r3, r3, #6
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	f003 0303 	and.w	r3, r3, #3
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	089b      	lsrs	r3, r3, #2
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	f003 030f 	and.w	r3, r3, #15
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	f003 0303 	and.w	r3, r3, #3
 8009a12:	b2da      	uxtb	r2, r3
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a1c:	0c1b      	lsrs	r3, r3, #16
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	b2da      	uxtb	r2, r3
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a2e:	0a1b      	lsrs	r3, r3, #8
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a50:	0e1b      	lsrs	r3, r3, #24
 8009a52:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	011b      	lsls	r3, r3, #4
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a64:	0c1b      	lsrs	r3, r3, #16
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	88db      	ldrh	r3, [r3, #6]
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	091b      	lsrs	r3, r3, #4
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	f003 030f 	and.w	r3, r3, #15
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	f003 030f 	and.w	r3, r3, #15
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a96:	0a1b      	lsrs	r3, r3, #8
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	09db      	lsrs	r3, r3, #7
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	099b      	lsrs	r3, r3, #6
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	095b      	lsrs	r3, r3, #5
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	f003 0301 	and.w	r3, r3, #1
 8009ac6:	b2da      	uxtb	r2, r3
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	091b      	lsrs	r3, r3, #4
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	b2da      	uxtb	r2, r3
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f040 8087 	bne.w	8009bfa <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	029b      	lsls	r3, r3, #10
 8009af0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	691a      	ldr	r2, [r3, #16]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	431a      	orrs	r2, r3
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b12:	0e1b      	lsrs	r3, r3, #24
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	691a      	ldr	r2, [r3, #16]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	099b      	lsrs	r3, r3, #6
 8009b20:	f003 0303 	and.w	r3, r3, #3
 8009b24:	431a      	orrs	r2, r3
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	08db      	lsrs	r3, r3, #3
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	f003 0307 	and.w	r3, r3, #7
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	f003 0307 	and.w	r3, r3, #7
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b4c:	0c1b      	lsrs	r3, r3, #16
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	095b      	lsrs	r3, r3, #5
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	f003 0307 	and.w	r3, r3, #7
 8009b5c:	b2da      	uxtb	r2, r3
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	089b      	lsrs	r3, r3, #2
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	f003 0307 	and.w	r3, r3, #7
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	005b      	lsls	r3, r3, #1
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	f003 0306 	and.w	r3, r3, #6
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b88:	0a1b      	lsrs	r3, r3, #8
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	7e1b      	ldrb	r3, [r3, #24]
 8009b92:	b2da      	uxtb	r2, r3
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	09db      	lsrs	r3, r3, #7
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	1c5a      	adds	r2, r3, #1
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	7e1b      	ldrb	r3, [r3, #24]
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	3302      	adds	r3, #2
 8009bba:	2201      	movs	r2, #1
 8009bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009bc4:	fb02 f203 	mul.w	r2, r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	7a1b      	ldrb	r3, [r3, #8]
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	fa03 f202 	lsl.w	r2, r3, r2
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009be6:	0a52      	lsrs	r2, r2, #9
 8009be8:	fb02 f203 	mul.w	r2, r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bf6:	661a      	str	r2, [r3, #96]	; 0x60
 8009bf8:	e04d      	b.n	8009c96 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d138      	bne.n	8009c74 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	041b      	lsls	r3, r3, #16
 8009c0e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c1a:	0e1b      	lsrs	r3, r3, #24
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	691a      	ldr	r2, [r3, #16]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	021b      	lsls	r3, r3, #8
 8009c28:	431a      	orrs	r2, r3
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c32:	0c1b      	lsrs	r3, r3, #16
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	691a      	ldr	r2, [r3, #16]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	431a      	orrs	r2, r3
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c48:	0a1b      	lsrs	r3, r3, #8
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	3301      	adds	r3, #1
 8009c54:	029a      	lsls	r2, r3, #10
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	655a      	str	r2, [r3, #84]	; 0x54
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c68:	659a      	str	r2, [r3, #88]	; 0x58
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	661a      	str	r2, [r3, #96]	; 0x60
 8009c72:	e010      	b.n	8009c96 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009c7c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e0c1      	b.n	8009e1a <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	099b      	lsrs	r3, r3, #6
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	f003 0301 	and.w	r3, r3, #1
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	005b      	lsls	r3, r3, #1
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009cb2:	b2da      	uxtb	r2, r3
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	7e9b      	ldrb	r3, [r3, #26]
 8009cc4:	b2da      	uxtb	r2, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	09db      	lsrs	r3, r3, #7
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cec:	0e1b      	lsrs	r3, r3, #24
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	09db      	lsrs	r3, r3, #7
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	f003 0301 	and.w	r3, r3, #1
 8009cfc:	b2da      	uxtb	r2, r3
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	095b      	lsrs	r3, r3, #5
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	f003 0303 	and.w	r3, r3, #3
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	089b      	lsrs	r3, r3, #2
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	f003 0307 	and.w	r3, r3, #7
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	f003 030c 	and.w	r3, r3, #12
 8009d2e:	b2da      	uxtb	r2, r3
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d38:	0c1b      	lsrs	r3, r3, #16
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	7fdb      	ldrb	r3, [r3, #31]
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	099b      	lsrs	r3, r3, #6
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	f003 0303 	and.w	r3, r3, #3
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	4313      	orrs	r3, r2
 8009d52:	b2da      	uxtb	r2, r3
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	095b      	lsrs	r3, r3, #5
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	f003 0301 	and.w	r3, r3, #1
 8009d62:	b2da      	uxtb	r2, r3
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	b2da      	uxtb	r2, r3
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d86:	0a1b      	lsrs	r3, r3, #8
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	09db      	lsrs	r3, r3, #7
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	f003 0301 	and.w	r3, r3, #1
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	099b      	lsrs	r3, r3, #6
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f003 0301 	and.w	r3, r3, #1
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	095b      	lsrs	r3, r3, #5
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	f003 0301 	and.w	r3, r3, #1
 8009dba:	b2da      	uxtb	r2, r3
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	091b      	lsrs	r3, r3, #4
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	f003 0301 	and.w	r3, r3, #1
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	089b      	lsrs	r3, r3, #2
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	f003 0303 	and.w	r3, r3, #3
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	f003 0303 	and.w	r3, r3, #3
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	085b      	lsrs	r3, r3, #1
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3714      	adds	r7, #20
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b083      	sub	sp, #12
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009e7e:	b5b0      	push	{r4, r5, r7, lr}
 8009e80:	b08e      	sub	sp, #56	; 0x38
 8009e82:	af04      	add	r7, sp, #16
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2203      	movs	r2, #3
 8009e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e98:	2b03      	cmp	r3, #3
 8009e9a:	d02e      	beq.n	8009efa <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ea2:	d106      	bne.n	8009eb2 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	639a      	str	r2, [r3, #56]	; 0x38
 8009eb0:	e029      	b.n	8009f06 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009eb8:	d10a      	bne.n	8009ed0 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fb28 	bl	800a510 <SD_WideBus_Enable>
 8009ec0:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	431a      	orrs	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	639a      	str	r2, [r3, #56]	; 0x38
 8009ece:	e01a      	b.n	8009f06 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d10a      	bne.n	8009eec <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fb67 	bl	800a5aa <SD_WideBus_Disable>
 8009edc:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	431a      	orrs	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	639a      	str	r2, [r3, #56]	; 0x38
 8009eea:	e00c      	b.n	8009f06 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	639a      	str	r2, [r3, #56]	; 0x38
 8009ef8:	e005      	b.n	8009f06 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00a      	beq.n	8009f24 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009f16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	e024      	b.n	8009f6e <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681d      	ldr	r5, [r3, #0]
 8009f4a:	466c      	mov	r4, sp
 8009f4c:	f107 0318 	add.w	r3, r7, #24
 8009f50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f58:	f107 030c 	add.w	r3, r7, #12
 8009f5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f001 fe1c 	bl	800bb9c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3728      	adds	r7, #40	; 0x28
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bdb0      	pop	{r4, r5, r7, pc}

08009f76 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b086      	sub	sp, #24
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8009f7e:	2304      	movs	r3, #4
 8009f80:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009f82:	2300      	movs	r3, #0
 8009f84:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8009f86:	2300      	movs	r3, #0
 8009f88:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8009f8a:	f107 030c 	add.w	r3, r7, #12
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fa93 	bl	800a4bc <SD_SendStatus>
 8009f96:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d005      	beq.n	8009faa <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	431a      	orrs	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	0a5b      	lsrs	r3, r3, #9
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	f003 030f 	and.w	r3, r3, #15
 8009fb4:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8009fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fcc:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fdc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009fde:	bf00      	nop
 8009fe0:	3714      	adds	r7, #20
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a000:	2b82      	cmp	r3, #130	; 0x82
 800a002:	d111      	bne.n	800a028 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4618      	mov	r0, r3
 800a00a:	f001 ff59 	bl	800bec0 <SDMMC_CmdStopTransfer>
 800a00e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d008      	beq.n	800a028 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	431a      	orrs	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f7ff fccc 	bl	80099c0 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f022 0208 	bic.w	r2, r2, #8
 800a036:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a040:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f007 fd8e 	bl	8011b6c <HAL_SD_RxCpltCallback>
#endif
}
 800a050:	bf00      	nop
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a064:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a06a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d004      	beq.n	800a07a <SD_DMAError+0x22>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a076:	2b01      	cmp	r3, #1
 800a078:	d12c      	bne.n	800a0d4 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a082:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a092:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a098:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f7ff ff68 	bl	8009f76 <HAL_SD_GetCardState>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a0aa:	7afb      	ldrb	r3, [r7, #11]
 800a0ac:	2b06      	cmp	r3, #6
 800a0ae:	d002      	beq.n	800a0b6 <SD_DMAError+0x5e>
 800a0b0:	7afb      	ldrb	r3, [r7, #11]
 800a0b2:	2b05      	cmp	r3, #5
 800a0b4:	d10a      	bne.n	800a0cc <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f001 ff00 	bl	800bec0 <SDMMC_CmdStopTransfer>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c6:	431a      	orrs	r2, r3
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f7ff fc73 	bl	80099c0 <HAL_SD_ErrorCallback>
#endif
}
 800a0da:	bf00      	nop
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ee:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d002      	beq.n	800a0fe <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a102:	2b00      	cmp	r3, #0
 800a104:	d127      	bne.n	800a156 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f7ff ff35 	bl	8009f76 <HAL_SD_GetCardState>
 800a10c:	4603      	mov	r3, r0
 800a10e:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a11e:	7afb      	ldrb	r3, [r7, #11]
 800a120:	2b06      	cmp	r3, #6
 800a122:	d002      	beq.n	800a12a <SD_DMATxAbort+0x48>
 800a124:	7afb      	ldrb	r3, [r7, #11]
 800a126:	2b05      	cmp	r3, #5
 800a128:	d115      	bne.n	800a156 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4618      	mov	r0, r3
 800a130:	f001 fec6 	bl	800bec0 <SDMMC_CmdStopTransfer>
 800a134:	4602      	mov	r2, r0
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13a:	431a      	orrs	r2, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a144:	2b00      	cmp	r3, #0
 800a146:	d003      	beq.n	800a150 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f007 fcfb 	bl	8011b44 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800a14e:	e002      	b.n	800a156 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f7ff fc35 	bl	80099c0 <HAL_SD_ErrorCallback>
}
 800a156:	bf00      	nop
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a16a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a170:	2b00      	cmp	r3, #0
 800a172:	d002      	beq.n	800a17a <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d127      	bne.n	800a1d2 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f7ff fef7 	bl	8009f76 <HAL_SD_GetCardState>
 800a188:	4603      	mov	r3, r0
 800a18a:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a19a:	7afb      	ldrb	r3, [r7, #11]
 800a19c:	2b06      	cmp	r3, #6
 800a19e:	d002      	beq.n	800a1a6 <SD_DMARxAbort+0x48>
 800a1a0:	7afb      	ldrb	r3, [r7, #11]
 800a1a2:	2b05      	cmp	r3, #5
 800a1a4:	d115      	bne.n	800a1d2 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f001 fe88 	bl	800bec0 <SDMMC_CmdStopTransfer>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b6:	431a      	orrs	r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d003      	beq.n	800a1cc <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f007 fcbd 	bl	8011b44 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800a1ca:	e002      	b.n	800a1d2 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f7ff fbf7 	bl	80099c0 <HAL_SD_ErrorCallback>
}
 800a1d2:	bf00      	nop
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a1da:	b5b0      	push	{r4, r5, r7, lr}
 800a1dc:	b094      	sub	sp, #80	; 0x50
 800a1de:	af04      	add	r7, sp, #16
 800a1e0:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f001 fd2b 	bl	800bc4a <SDIO_GetPowerState>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d102      	bne.n	800a200 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a1fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a1fe:	e0b1      	b.n	800a364 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a204:	2b03      	cmp	r3, #3
 800a206:	d02f      	beq.n	800a268 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f001 ff71 	bl	800c0f4 <SDMMC_CmdSendCID>
 800a212:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d001      	beq.n	800a21e <SD_InitCard+0x44>
    {
      return errorstate;
 800a21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a21c:	e0a2      	b.n	800a364 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2100      	movs	r1, #0
 800a224:	4618      	mov	r0, r3
 800a226:	f001 fd55 	bl	800bcd4 <SDIO_GetResponse>
 800a22a:	4602      	mov	r2, r0
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2104      	movs	r1, #4
 800a236:	4618      	mov	r0, r3
 800a238:	f001 fd4c 	bl	800bcd4 <SDIO_GetResponse>
 800a23c:	4602      	mov	r2, r0
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2108      	movs	r1, #8
 800a248:	4618      	mov	r0, r3
 800a24a:	f001 fd43 	bl	800bcd4 <SDIO_GetResponse>
 800a24e:	4602      	mov	r2, r0
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	210c      	movs	r1, #12
 800a25a:	4618      	mov	r0, r3
 800a25c:	f001 fd3a 	bl	800bcd4 <SDIO_GetResponse>
 800a260:	4602      	mov	r2, r0
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a26c:	2b03      	cmp	r3, #3
 800a26e:	d00d      	beq.n	800a28c <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f107 020e 	add.w	r2, r7, #14
 800a278:	4611      	mov	r1, r2
 800a27a:	4618      	mov	r0, r3
 800a27c:	f001 ff7b 	bl	800c176 <SDMMC_CmdSetRelAdd>
 800a280:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <SD_InitCard+0xb2>
    {
      return errorstate;
 800a288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a28a:	e06b      	b.n	800a364 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a290:	2b03      	cmp	r3, #3
 800a292:	d036      	beq.n	800a302 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a294:	89fb      	ldrh	r3, [r7, #14]
 800a296:	461a      	mov	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2a4:	041b      	lsls	r3, r3, #16
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	f001 ff43 	bl	800c134 <SDMMC_CmdSendCSD>
 800a2ae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d001      	beq.n	800a2ba <SD_InitCard+0xe0>
    {
      return errorstate;
 800a2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2b8:	e054      	b.n	800a364 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2100      	movs	r1, #0
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f001 fd07 	bl	800bcd4 <SDIO_GetResponse>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2104      	movs	r1, #4
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f001 fcfe 	bl	800bcd4 <SDIO_GetResponse>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2108      	movs	r1, #8
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f001 fcf5 	bl	800bcd4 <SDIO_GetResponse>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	210c      	movs	r1, #12
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f001 fcec 	bl	800bcd4 <SDIO_GetResponse>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2104      	movs	r1, #4
 800a308:	4618      	mov	r0, r3
 800a30a:	f001 fce3 	bl	800bcd4 <SDIO_GetResponse>
 800a30e:	4603      	mov	r3, r0
 800a310:	0d1a      	lsrs	r2, r3, #20
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800a316:	f107 0310 	add.w	r3, r7, #16
 800a31a:	4619      	mov	r1, r3
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f7ff fb59 	bl	80099d4 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6819      	ldr	r1, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a32a:	041b      	lsls	r3, r3, #16
 800a32c:	f04f 0400 	mov.w	r4, #0
 800a330:	461a      	mov	r2, r3
 800a332:	4623      	mov	r3, r4
 800a334:	4608      	mov	r0, r1
 800a336:	f001 fde7 	bl	800bf08 <SDMMC_CmdSelDesel>
 800a33a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d001      	beq.n	800a346 <SD_InitCard+0x16c>
  {
    return errorstate;
 800a342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a344:	e00e      	b.n	800a364 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681d      	ldr	r5, [r3, #0]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	466c      	mov	r4, sp
 800a34e:	f103 0210 	add.w	r2, r3, #16
 800a352:	ca07      	ldmia	r2, {r0, r1, r2}
 800a354:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a358:	3304      	adds	r3, #4
 800a35a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a35c:	4628      	mov	r0, r5
 800a35e:	f001 fc1d 	bl	800bb9c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3740      	adds	r7, #64	; 0x40
 800a368:	46bd      	mov	sp, r7
 800a36a:	bdb0      	pop	{r4, r5, r7, pc}

0800a36c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b086      	sub	sp, #24
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a374:	2300      	movs	r3, #0
 800a376:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a378:	2300      	movs	r3, #0
 800a37a:	617b      	str	r3, [r7, #20]
 800a37c:	2300      	movs	r3, #0
 800a37e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a380:	2300      	movs	r3, #0
 800a382:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4618      	mov	r0, r3
 800a38a:	f001 fde2 	bl	800bf52 <SDMMC_CmdGoIdleState>
 800a38e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <SD_PowerON+0x2e>
  {
    return errorstate;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	e08c      	b.n	800a4b4 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f001 fdf7 	bl	800bf92 <SDMMC_CmdOperCond>
 800a3a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d03d      	beq.n	800a428 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800a3b2:	e032      	b.n	800a41a <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	1c5a      	adds	r2, r3, #1
 800a3b8:	60ba      	str	r2, [r7, #8]
 800a3ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d102      	bne.n	800a3c8 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a3c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a3c6:	e075      	b.n	800a4b4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f001 fe00 	bl	800bfd4 <SDMMC_CmdAppCommand>
 800a3d4:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a3e0:	e068      	b.n	800a4b4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f001 fe17 	bl	800c01c <SDMMC_CmdAppOperCommand>
 800a3ee:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d002      	beq.n	800a3fc <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a3fa:	e05b      	b.n	800a4b4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2100      	movs	r1, #0
 800a402:	4618      	mov	r0, r3
 800a404:	f001 fc66 	bl	800bcd4 <SDIO_GetResponse>
 800a408:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	0fdb      	lsrs	r3, r3, #31
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d101      	bne.n	800a416 <SD_PowerON+0xaa>
 800a412:	2301      	movs	r3, #1
 800a414:	e000      	b.n	800a418 <SD_PowerON+0xac>
 800a416:	2300      	movs	r3, #0
 800a418:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d0c9      	beq.n	800a3b4 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	645a      	str	r2, [r3, #68]	; 0x44
 800a426:	e044      	b.n	800a4b2 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800a42e:	e031      	b.n	800a494 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	60ba      	str	r2, [r7, #8]
 800a436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d102      	bne.n	800a444 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a43e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a442:	e037      	b.n	800a4b4 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2100      	movs	r1, #0
 800a44a:	4618      	mov	r0, r3
 800a44c:	f001 fdc2 	bl	800bfd4 <SDMMC_CmdAppCommand>
 800a450:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <SD_PowerON+0xf0>
      {
        return errorstate;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	e02b      	b.n	800a4b4 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a464:	4618      	mov	r0, r3
 800a466:	f001 fdd9 	bl	800c01c <SDMMC_CmdAppOperCommand>
 800a46a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <SD_PowerON+0x10a>
      {
        return errorstate;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	e01e      	b.n	800a4b4 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2100      	movs	r1, #0
 800a47c:	4618      	mov	r0, r3
 800a47e:	f001 fc29 	bl	800bcd4 <SDIO_GetResponse>
 800a482:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	0fdb      	lsrs	r3, r3, #31
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d101      	bne.n	800a490 <SD_PowerON+0x124>
 800a48c:	2301      	movs	r3, #1
 800a48e:	e000      	b.n	800a492 <SD_PowerON+0x126>
 800a490:	2300      	movs	r3, #0
 800a492:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d0ca      	beq.n	800a430 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d003      	beq.n	800a4ac <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	645a      	str	r2, [r3, #68]	; 0x44
 800a4aa:	e002      	b.n	800a4b2 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3718      	adds	r7, #24
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d102      	bne.n	800a4d6 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800a4d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a4d4:	e018      	b.n	800a508 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4de:	041b      	lsls	r3, r3, #16
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	4610      	mov	r0, r2
 800a4e4:	f001 fe6a 	bl	800c1bc <SDMMC_CmdSendStatus>
 800a4e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d001      	beq.n	800a4f4 <SD_SendStatus+0x38>
  {
    return errorstate;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	e009      	b.n	800a508 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f001 fbea 	bl	800bcd4 <SDIO_GetResponse>
 800a500:	4602      	mov	r2, r0
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b086      	sub	sp, #24
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a518:	2300      	movs	r3, #0
 800a51a:	60fb      	str	r3, [r7, #12]
 800a51c:	2300      	movs	r3, #0
 800a51e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a520:	2300      	movs	r3, #0
 800a522:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2100      	movs	r1, #0
 800a52a:	4618      	mov	r0, r3
 800a52c:	f001 fbd2 	bl	800bcd4 <SDIO_GetResponse>
 800a530:	4603      	mov	r3, r0
 800a532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a536:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a53a:	d102      	bne.n	800a542 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a53c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a540:	e02f      	b.n	800a5a2 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a542:	f107 030c 	add.w	r3, r7, #12
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 f87b 	bl	800a644 <SD_FindSCR>
 800a54e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d001      	beq.n	800a55a <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	e023      	b.n	800a5a2 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a560:	2b00      	cmp	r3, #0
 800a562:	d01c      	beq.n	800a59e <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a56c:	041b      	lsls	r3, r3, #16
 800a56e:	4619      	mov	r1, r3
 800a570:	4610      	mov	r0, r2
 800a572:	f001 fd2f 	bl	800bfd4 <SDMMC_CmdAppCommand>
 800a576:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d001      	beq.n	800a582 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	e00f      	b.n	800a5a2 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2102      	movs	r1, #2
 800a588:	4618      	mov	r0, r3
 800a58a:	f001 fd6c 	bl	800c066 <SDMMC_CmdBusWidth>
 800a58e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	e003      	b.n	800a5a2 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800a59a:	2300      	movs	r3, #0
 800a59c:	e001      	b.n	800a5a2 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a59e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3718      	adds	r7, #24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b086      	sub	sp, #24
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60fb      	str	r3, [r7, #12]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f001 fb85 	bl	800bcd4 <SDIO_GetResponse>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5d4:	d102      	bne.n	800a5dc <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a5d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5da:	e02f      	b.n	800a63c <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a5dc:	f107 030c 	add.w	r3, r7, #12
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f82e 	bl	800a644 <SD_FindSCR>
 800a5e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d001      	beq.n	800a5f4 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	e023      	b.n	800a63c <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d01c      	beq.n	800a638 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a606:	041b      	lsls	r3, r3, #16
 800a608:	4619      	mov	r1, r3
 800a60a:	4610      	mov	r0, r2
 800a60c:	f001 fce2 	bl	800bfd4 <SDMMC_CmdAppCommand>
 800a610:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	e00f      	b.n	800a63c <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2100      	movs	r1, #0
 800a622:	4618      	mov	r0, r3
 800a624:	f001 fd1f 	bl	800c066 <SDMMC_CmdBusWidth>
 800a628:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d001      	beq.n	800a634 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	e003      	b.n	800a63c <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 800a634:	2300      	movs	r3, #0
 800a636:	e001      	b.n	800a63c <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a638:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3718      	adds	r7, #24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a644:	b590      	push	{r4, r7, lr}
 800a646:	b08f      	sub	sp, #60	; 0x3c
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a64e:	2300      	movs	r3, #0
 800a650:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800a652:	f7fa ffe5 	bl	8005620 <HAL_GetTick>
 800a656:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 800a658:	2300      	movs	r3, #0
 800a65a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a65c:	2300      	movs	r3, #0
 800a65e:	60fb      	str	r3, [r7, #12]
 800a660:	2300      	movs	r3, #0
 800a662:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2108      	movs	r1, #8
 800a66a:	4618      	mov	r0, r3
 800a66c:	f001 fb73 	bl	800bd56 <SDMMC_CmdBlockLength>
 800a670:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800a672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a674:	2b00      	cmp	r3, #0
 800a676:	d001      	beq.n	800a67c <SD_FindSCR+0x38>
  {
    return errorstate;
 800a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67a:	e0a8      	b.n	800a7ce <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a684:	041b      	lsls	r3, r3, #16
 800a686:	4619      	mov	r1, r3
 800a688:	4610      	mov	r0, r2
 800a68a:	f001 fca3 	bl	800bfd4 <SDMMC_CmdAppCommand>
 800a68e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800a690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <SD_FindSCR+0x56>
  {
    return errorstate;
 800a696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a698:	e099      	b.n	800a7ce <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a69a:	f04f 33ff 	mov.w	r3, #4294967295
 800a69e:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 800a6a0:	2308      	movs	r3, #8
 800a6a2:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a6a4:	2330      	movs	r3, #48	; 0x30
 800a6a6:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f107 0214 	add.w	r2, r7, #20
 800a6bc:	4611      	mov	r1, r2
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f001 fb1d 	bl	800bcfe <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f001 fcf0 	bl	800c0ae <SDMMC_CmdSendSCR>
 800a6ce:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800a6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d022      	beq.n	800a71c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d8:	e079      	b.n	800a7ce <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00e      	beq.n	800a706 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6819      	ldr	r1, [r3, #0]
 800a6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	f107 020c 	add.w	r2, r7, #12
 800a6f4:	18d4      	adds	r4, r2, r3
 800a6f6:	4608      	mov	r0, r1
 800a6f8:	f001 fa7b 	bl	800bbf2 <SDIO_ReadFIFO>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	6023      	str	r3, [r4, #0]
      index++;
 800a700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a702:	3301      	adds	r3, #1
 800a704:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a706:	f7fa ff8b 	bl	8005620 <HAL_GetTick>
 800a70a:	4602      	mov	r2, r0
 800a70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a714:	d102      	bne.n	800a71c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a716:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a71a:	e058      	b.n	800a7ce <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a722:	f240 432a 	movw	r3, #1066	; 0x42a
 800a726:	4013      	ands	r3, r2
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d0d6      	beq.n	800a6da <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a732:	f003 0308 	and.w	r3, r3, #8
 800a736:	2b00      	cmp	r3, #0
 800a738:	d005      	beq.n	800a746 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2208      	movs	r2, #8
 800a740:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a742:	2308      	movs	r3, #8
 800a744:	e043      	b.n	800a7ce <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a74c:	f003 0302 	and.w	r3, r3, #2
 800a750:	2b00      	cmp	r3, #0
 800a752:	d005      	beq.n	800a760 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2202      	movs	r2, #2
 800a75a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a75c:	2302      	movs	r3, #2
 800a75e:	e036      	b.n	800a7ce <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a766:	f003 0320 	and.w	r3, r3, #32
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d005      	beq.n	800a77a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2220      	movs	r2, #32
 800a774:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800a776:	2320      	movs	r3, #32
 800a778:	e029      	b.n	800a7ce <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a782:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	061a      	lsls	r2, r3, #24
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	021b      	lsls	r3, r3, #8
 800a78c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a790:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	0a1b      	lsrs	r3, r3, #8
 800a796:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800a79a:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800a7a6:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800a7a8:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	061a      	lsls	r2, r3, #24
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	021b      	lsls	r3, r3, #8
 800a7b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a7b6:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	0a1b      	lsrs	r3, r3, #8
 800a7bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800a7c0:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	0e1b      	lsrs	r3, r3, #24
 800a7c6:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	373c      	adds	r7, #60	; 0x3c
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd90      	pop	{r4, r7, pc}

0800a7d6 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a7d6:	b590      	push	{r4, r7, lr}
 800a7d8:	b085      	sub	sp, #20
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e6:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	e00d      	b.n	800a80a <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6819      	ldr	r1, [r3, #0]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	18d4      	adds	r4, r2, r3
 800a7fa:	4608      	mov	r0, r1
 800a7fc:	f001 f9f9 	bl	800bbf2 <SDIO_ReadFIFO>
 800a800:	4603      	mov	r3, r0
 800a802:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	3301      	adds	r3, #1
 800a808:	60fb      	str	r3, [r7, #12]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2b07      	cmp	r3, #7
 800a80e:	d9ee      	bls.n	800a7ee <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a814:	f103 0220 	add.w	r2, r3, #32
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3714      	adds	r7, #20
 800a822:	46bd      	mov	sp, r7
 800a824:	bd90      	pop	{r4, r7, pc}

0800a826 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b084      	sub	sp, #16
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a82e:	2300      	movs	r3, #0
 800a830:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a1b      	ldr	r3, [r3, #32]
 800a836:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 800a838:	2300      	movs	r3, #0
 800a83a:	60fb      	str	r3, [r7, #12]
 800a83c:	e00b      	b.n	800a856 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	4413      	add	r3, r2
 800a84a:	4619      	mov	r1, r3
 800a84c:	f001 f9de 	bl	800bc0c <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	3301      	adds	r3, #1
 800a854:	60fb      	str	r3, [r7, #12]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2b07      	cmp	r3, #7
 800a85a:	d9f0      	bls.n	800a83e <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a1b      	ldr	r3, [r3, #32]
 800a860:	f103 0220 	add.w	r2, r3, #32
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b082      	sub	sp, #8
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d101      	bne.n	800a884 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	e056      	b.n	800a932 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b00      	cmp	r3, #0
 800a894:	d106      	bne.n	800a8a4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f009 fa0a 	bl	8013cb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2202      	movs	r2, #2
 800a8a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685a      	ldr	r2, [r3, #4]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	431a      	orrs	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	431a      	orrs	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	431a      	orrs	r2, r3
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	431a      	orrs	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	699b      	ldr	r3, [r3, #24]
 800a8dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a8e0:	431a      	orrs	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	69db      	ldr	r3, [r3, #28]
 800a8e6:	431a      	orrs	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6a1b      	ldr	r3, [r3, #32]
 800a8ec:	ea42 0103 	orr.w	r1, r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	430a      	orrs	r2, r1
 800a8fa:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	699b      	ldr	r3, [r3, #24]
 800a900:	0c1b      	lsrs	r3, r3, #16
 800a902:	f003 0104 	and.w	r1, r3, #4
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	430a      	orrs	r2, r1
 800a910:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	69da      	ldr	r2, [r3, #28]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a920:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3708      	adds	r7, #8
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b082      	sub	sp, #8
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d101      	bne.n	800a94c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	e01d      	b.n	800a988 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a952:	b2db      	uxtb	r3, r3
 800a954:	2b00      	cmp	r3, #0
 800a956:	d106      	bne.n	800a966 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f009 f9f1 	bl	8013d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2202      	movs	r2, #2
 800a96a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	3304      	adds	r3, #4
 800a976:	4619      	mov	r1, r3
 800a978:	4610      	mov	r0, r2
 800a97a:	f000 f9e1 	bl	800ad40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2201      	movs	r2, #1
 800a982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2202      	movs	r2, #2
 800a99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	f003 0307 	and.w	r3, r3, #7
 800a9aa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2b06      	cmp	r3, #6
 800a9b0:	d007      	beq.n	800a9c2 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f042 0201 	orr.w	r2, r2, #1
 800a9c0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3714      	adds	r7, #20
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d101      	bne.n	800a9ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e01d      	b.n	800aa26 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d106      	bne.n	800aa04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f815 	bl	800aa2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2202      	movs	r2, #2
 800aa08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	3304      	adds	r3, #4
 800aa14:	4619      	mov	r1, r3
 800aa16:	4610      	mov	r0, r2
 800aa18:	f000 f992 	bl	800ad40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b083      	sub	sp, #12
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aa36:	bf00      	nop
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
	...

0800aa44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d101      	bne.n	800aa5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800aa5a:	2302      	movs	r3, #2
 800aa5c:	e0b4      	b.n	800abc8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2201      	movs	r2, #1
 800aa62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2202      	movs	r2, #2
 800aa6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2b0c      	cmp	r3, #12
 800aa72:	f200 809f 	bhi.w	800abb4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800aa76:	a201      	add	r2, pc, #4	; (adr r2, 800aa7c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800aa78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7c:	0800aab1 	.word	0x0800aab1
 800aa80:	0800abb5 	.word	0x0800abb5
 800aa84:	0800abb5 	.word	0x0800abb5
 800aa88:	0800abb5 	.word	0x0800abb5
 800aa8c:	0800aaf1 	.word	0x0800aaf1
 800aa90:	0800abb5 	.word	0x0800abb5
 800aa94:	0800abb5 	.word	0x0800abb5
 800aa98:	0800abb5 	.word	0x0800abb5
 800aa9c:	0800ab33 	.word	0x0800ab33
 800aaa0:	0800abb5 	.word	0x0800abb5
 800aaa4:	0800abb5 	.word	0x0800abb5
 800aaa8:	0800abb5 	.word	0x0800abb5
 800aaac:	0800ab73 	.word	0x0800ab73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68b9      	ldr	r1, [r7, #8]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f000 f9e2 	bl	800ae80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	699a      	ldr	r2, [r3, #24]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f042 0208 	orr.w	r2, r2, #8
 800aaca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	699a      	ldr	r2, [r3, #24]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f022 0204 	bic.w	r2, r2, #4
 800aada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6999      	ldr	r1, [r3, #24]
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	691a      	ldr	r2, [r3, #16]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	619a      	str	r2, [r3, #24]
      break;
 800aaee:	e062      	b.n	800abb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68b9      	ldr	r1, [r7, #8]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f000 fa32 	bl	800af60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	699a      	ldr	r2, [r3, #24]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	699a      	ldr	r2, [r3, #24]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6999      	ldr	r1, [r3, #24]
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	021a      	lsls	r2, r3, #8
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	430a      	orrs	r2, r1
 800ab2e:	619a      	str	r2, [r3, #24]
      break;
 800ab30:	e041      	b.n	800abb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	68b9      	ldr	r1, [r7, #8]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f000 fa87 	bl	800b04c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	69da      	ldr	r2, [r3, #28]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f042 0208 	orr.w	r2, r2, #8
 800ab4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	69da      	ldr	r2, [r3, #28]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f022 0204 	bic.w	r2, r2, #4
 800ab5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	69d9      	ldr	r1, [r3, #28]
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	691a      	ldr	r2, [r3, #16]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	430a      	orrs	r2, r1
 800ab6e:	61da      	str	r2, [r3, #28]
      break;
 800ab70:	e021      	b.n	800abb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	68b9      	ldr	r1, [r7, #8]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f000 fadb 	bl	800b134 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	69da      	ldr	r2, [r3, #28]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	69da      	ldr	r2, [r3, #28]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	69d9      	ldr	r1, [r3, #28]
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	021a      	lsls	r2, r3, #8
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	430a      	orrs	r2, r1
 800abb0:	61da      	str	r2, [r3, #28]
      break;
 800abb2:	e000      	b.n	800abb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800abb4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d101      	bne.n	800abe8 <HAL_TIM_ConfigClockSource+0x18>
 800abe4:	2302      	movs	r3, #2
 800abe6:	e0a6      	b.n	800ad36 <HAL_TIM_ConfigClockSource+0x166>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2202      	movs	r2, #2
 800abf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ac06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b40      	cmp	r3, #64	; 0x40
 800ac1e:	d067      	beq.n	800acf0 <HAL_TIM_ConfigClockSource+0x120>
 800ac20:	2b40      	cmp	r3, #64	; 0x40
 800ac22:	d80b      	bhi.n	800ac3c <HAL_TIM_ConfigClockSource+0x6c>
 800ac24:	2b10      	cmp	r3, #16
 800ac26:	d073      	beq.n	800ad10 <HAL_TIM_ConfigClockSource+0x140>
 800ac28:	2b10      	cmp	r3, #16
 800ac2a:	d802      	bhi.n	800ac32 <HAL_TIM_ConfigClockSource+0x62>
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d06f      	beq.n	800ad10 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ac30:	e078      	b.n	800ad24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ac32:	2b20      	cmp	r3, #32
 800ac34:	d06c      	beq.n	800ad10 <HAL_TIM_ConfigClockSource+0x140>
 800ac36:	2b30      	cmp	r3, #48	; 0x30
 800ac38:	d06a      	beq.n	800ad10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800ac3a:	e073      	b.n	800ad24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ac3c:	2b70      	cmp	r3, #112	; 0x70
 800ac3e:	d00d      	beq.n	800ac5c <HAL_TIM_ConfigClockSource+0x8c>
 800ac40:	2b70      	cmp	r3, #112	; 0x70
 800ac42:	d804      	bhi.n	800ac4e <HAL_TIM_ConfigClockSource+0x7e>
 800ac44:	2b50      	cmp	r3, #80	; 0x50
 800ac46:	d033      	beq.n	800acb0 <HAL_TIM_ConfigClockSource+0xe0>
 800ac48:	2b60      	cmp	r3, #96	; 0x60
 800ac4a:	d041      	beq.n	800acd0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800ac4c:	e06a      	b.n	800ad24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ac4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac52:	d066      	beq.n	800ad22 <HAL_TIM_ConfigClockSource+0x152>
 800ac54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac58:	d017      	beq.n	800ac8a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800ac5a:	e063      	b.n	800ad24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6818      	ldr	r0, [r3, #0]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	6899      	ldr	r1, [r3, #8]
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	685a      	ldr	r2, [r3, #4]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	f000 fb32 	bl	800b2d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ac7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	609a      	str	r2, [r3, #8]
      break;
 800ac88:	e04c      	b.n	800ad24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6818      	ldr	r0, [r3, #0]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	6899      	ldr	r1, [r3, #8]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	685a      	ldr	r2, [r3, #4]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	f000 fb1b 	bl	800b2d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	689a      	ldr	r2, [r3, #8]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800acac:	609a      	str	r2, [r3, #8]
      break;
 800acae:	e039      	b.n	800ad24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6818      	ldr	r0, [r3, #0]
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	6859      	ldr	r1, [r3, #4]
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	461a      	mov	r2, r3
 800acbe:	f000 fa8f 	bl	800b1e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2150      	movs	r1, #80	; 0x50
 800acc8:	4618      	mov	r0, r3
 800acca:	f000 fae8 	bl	800b29e <TIM_ITRx_SetConfig>
      break;
 800acce:	e029      	b.n	800ad24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6818      	ldr	r0, [r3, #0]
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	6859      	ldr	r1, [r3, #4]
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	461a      	mov	r2, r3
 800acde:	f000 faae 	bl	800b23e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2160      	movs	r1, #96	; 0x60
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 fad8 	bl	800b29e <TIM_ITRx_SetConfig>
      break;
 800acee:	e019      	b.n	800ad24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6818      	ldr	r0, [r3, #0]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	6859      	ldr	r1, [r3, #4]
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	461a      	mov	r2, r3
 800acfe:	f000 fa6f 	bl	800b1e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2140      	movs	r1, #64	; 0x40
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f000 fac8 	bl	800b29e <TIM_ITRx_SetConfig>
      break;
 800ad0e:	e009      	b.n	800ad24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4619      	mov	r1, r3
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	f000 fabf 	bl	800b29e <TIM_ITRx_SetConfig>
      break;
 800ad20:	e000      	b.n	800ad24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800ad22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
	...

0800ad40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b085      	sub	sp, #20
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a40      	ldr	r2, [pc, #256]	; (800ae54 <TIM_Base_SetConfig+0x114>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d013      	beq.n	800ad80 <TIM_Base_SetConfig+0x40>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad5e:	d00f      	beq.n	800ad80 <TIM_Base_SetConfig+0x40>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a3d      	ldr	r2, [pc, #244]	; (800ae58 <TIM_Base_SetConfig+0x118>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d00b      	beq.n	800ad80 <TIM_Base_SetConfig+0x40>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a3c      	ldr	r2, [pc, #240]	; (800ae5c <TIM_Base_SetConfig+0x11c>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d007      	beq.n	800ad80 <TIM_Base_SetConfig+0x40>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a3b      	ldr	r2, [pc, #236]	; (800ae60 <TIM_Base_SetConfig+0x120>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d003      	beq.n	800ad80 <TIM_Base_SetConfig+0x40>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a3a      	ldr	r2, [pc, #232]	; (800ae64 <TIM_Base_SetConfig+0x124>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d108      	bne.n	800ad92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a2f      	ldr	r2, [pc, #188]	; (800ae54 <TIM_Base_SetConfig+0x114>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d02b      	beq.n	800adf2 <TIM_Base_SetConfig+0xb2>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ada0:	d027      	beq.n	800adf2 <TIM_Base_SetConfig+0xb2>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a2c      	ldr	r2, [pc, #176]	; (800ae58 <TIM_Base_SetConfig+0x118>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d023      	beq.n	800adf2 <TIM_Base_SetConfig+0xb2>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a2b      	ldr	r2, [pc, #172]	; (800ae5c <TIM_Base_SetConfig+0x11c>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d01f      	beq.n	800adf2 <TIM_Base_SetConfig+0xb2>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a2a      	ldr	r2, [pc, #168]	; (800ae60 <TIM_Base_SetConfig+0x120>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d01b      	beq.n	800adf2 <TIM_Base_SetConfig+0xb2>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a29      	ldr	r2, [pc, #164]	; (800ae64 <TIM_Base_SetConfig+0x124>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d017      	beq.n	800adf2 <TIM_Base_SetConfig+0xb2>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a28      	ldr	r2, [pc, #160]	; (800ae68 <TIM_Base_SetConfig+0x128>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d013      	beq.n	800adf2 <TIM_Base_SetConfig+0xb2>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a27      	ldr	r2, [pc, #156]	; (800ae6c <TIM_Base_SetConfig+0x12c>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d00f      	beq.n	800adf2 <TIM_Base_SetConfig+0xb2>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4a26      	ldr	r2, [pc, #152]	; (800ae70 <TIM_Base_SetConfig+0x130>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d00b      	beq.n	800adf2 <TIM_Base_SetConfig+0xb2>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a25      	ldr	r2, [pc, #148]	; (800ae74 <TIM_Base_SetConfig+0x134>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d007      	beq.n	800adf2 <TIM_Base_SetConfig+0xb2>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	4a24      	ldr	r2, [pc, #144]	; (800ae78 <TIM_Base_SetConfig+0x138>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d003      	beq.n	800adf2 <TIM_Base_SetConfig+0xb2>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	4a23      	ldr	r2, [pc, #140]	; (800ae7c <TIM_Base_SetConfig+0x13c>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d108      	bne.n	800ae04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	4313      	orrs	r3, r2
 800ae02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	695b      	ldr	r3, [r3, #20]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	689a      	ldr	r2, [r3, #8]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a0a      	ldr	r2, [pc, #40]	; (800ae54 <TIM_Base_SetConfig+0x114>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d003      	beq.n	800ae38 <TIM_Base_SetConfig+0xf8>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a0c      	ldr	r2, [pc, #48]	; (800ae64 <TIM_Base_SetConfig+0x124>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d103      	bne.n	800ae40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	691a      	ldr	r2, [r3, #16]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	615a      	str	r2, [r3, #20]
}
 800ae46:	bf00      	nop
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	40010000 	.word	0x40010000
 800ae58:	40000400 	.word	0x40000400
 800ae5c:	40000800 	.word	0x40000800
 800ae60:	40000c00 	.word	0x40000c00
 800ae64:	40010400 	.word	0x40010400
 800ae68:	40014000 	.word	0x40014000
 800ae6c:	40014400 	.word	0x40014400
 800ae70:	40014800 	.word	0x40014800
 800ae74:	40001800 	.word	0x40001800
 800ae78:	40001c00 	.word	0x40001c00
 800ae7c:	40002000 	.word	0x40002000

0800ae80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b087      	sub	sp, #28
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a1b      	ldr	r3, [r3, #32]
 800ae8e:	f023 0201 	bic.w	r2, r3, #1
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f023 0303 	bic.w	r3, r3, #3
 800aeb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	f023 0302 	bic.w	r3, r3, #2
 800aec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a20      	ldr	r2, [pc, #128]	; (800af58 <TIM_OC1_SetConfig+0xd8>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d003      	beq.n	800aee4 <TIM_OC1_SetConfig+0x64>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a1f      	ldr	r2, [pc, #124]	; (800af5c <TIM_OC1_SetConfig+0xdc>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d10c      	bne.n	800aefe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	f023 0308 	bic.w	r3, r3, #8
 800aeea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	697a      	ldr	r2, [r7, #20]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	f023 0304 	bic.w	r3, r3, #4
 800aefc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a15      	ldr	r2, [pc, #84]	; (800af58 <TIM_OC1_SetConfig+0xd8>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d003      	beq.n	800af0e <TIM_OC1_SetConfig+0x8e>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4a14      	ldr	r2, [pc, #80]	; (800af5c <TIM_OC1_SetConfig+0xdc>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d111      	bne.n	800af32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	695b      	ldr	r3, [r3, #20]
 800af22:	693a      	ldr	r2, [r7, #16]
 800af24:	4313      	orrs	r3, r2
 800af26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	699b      	ldr	r3, [r3, #24]
 800af2c:	693a      	ldr	r2, [r7, #16]
 800af2e:	4313      	orrs	r3, r2
 800af30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	693a      	ldr	r2, [r7, #16]
 800af36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	685a      	ldr	r2, [r3, #4]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	621a      	str	r2, [r3, #32]
}
 800af4c:	bf00      	nop
 800af4e:	371c      	adds	r7, #28
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr
 800af58:	40010000 	.word	0x40010000
 800af5c:	40010400 	.word	0x40010400

0800af60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af60:	b480      	push	{r7}
 800af62:	b087      	sub	sp, #28
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a1b      	ldr	r3, [r3, #32]
 800af6e:	f023 0210 	bic.w	r2, r3, #16
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	021b      	lsls	r3, r3, #8
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	4313      	orrs	r3, r2
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	f023 0320 	bic.w	r3, r3, #32
 800afaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	011b      	lsls	r3, r3, #4
 800afb2:	697a      	ldr	r2, [r7, #20]
 800afb4:	4313      	orrs	r3, r2
 800afb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a22      	ldr	r2, [pc, #136]	; (800b044 <TIM_OC2_SetConfig+0xe4>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d003      	beq.n	800afc8 <TIM_OC2_SetConfig+0x68>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a21      	ldr	r2, [pc, #132]	; (800b048 <TIM_OC2_SetConfig+0xe8>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d10d      	bne.n	800afe4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	011b      	lsls	r3, r3, #4
 800afd6:	697a      	ldr	r2, [r7, #20]
 800afd8:	4313      	orrs	r3, r2
 800afda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afe2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a17      	ldr	r2, [pc, #92]	; (800b044 <TIM_OC2_SetConfig+0xe4>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d003      	beq.n	800aff4 <TIM_OC2_SetConfig+0x94>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	4a16      	ldr	r2, [pc, #88]	; (800b048 <TIM_OC2_SetConfig+0xe8>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d113      	bne.n	800b01c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800affa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b002:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	695b      	ldr	r3, [r3, #20]
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	699b      	ldr	r3, [r3, #24]
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	693a      	ldr	r2, [r7, #16]
 800b018:	4313      	orrs	r3, r2
 800b01a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	693a      	ldr	r2, [r7, #16]
 800b020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	685a      	ldr	r2, [r3, #4]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	697a      	ldr	r2, [r7, #20]
 800b034:	621a      	str	r2, [r3, #32]
}
 800b036:	bf00      	nop
 800b038:	371c      	adds	r7, #28
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	40010000 	.word	0x40010000
 800b048:	40010400 	.word	0x40010400

0800b04c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b087      	sub	sp, #28
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a1b      	ldr	r3, [r3, #32]
 800b05a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a1b      	ldr	r3, [r3, #32]
 800b066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	69db      	ldr	r3, [r3, #28]
 800b072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b07a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f023 0303 	bic.w	r3, r3, #3
 800b082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	4313      	orrs	r3, r2
 800b08c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	021b      	lsls	r3, r3, #8
 800b09c:	697a      	ldr	r2, [r7, #20]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4a21      	ldr	r2, [pc, #132]	; (800b12c <TIM_OC3_SetConfig+0xe0>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d003      	beq.n	800b0b2 <TIM_OC3_SetConfig+0x66>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4a20      	ldr	r2, [pc, #128]	; (800b130 <TIM_OC3_SetConfig+0xe4>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d10d      	bne.n	800b0ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	021b      	lsls	r3, r3, #8
 800b0c0:	697a      	ldr	r2, [r7, #20]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a16      	ldr	r2, [pc, #88]	; (800b12c <TIM_OC3_SetConfig+0xe0>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d003      	beq.n	800b0de <TIM_OC3_SetConfig+0x92>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a15      	ldr	r2, [pc, #84]	; (800b130 <TIM_OC3_SetConfig+0xe4>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d113      	bne.n	800b106 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	695b      	ldr	r3, [r3, #20]
 800b0f2:	011b      	lsls	r3, r3, #4
 800b0f4:	693a      	ldr	r2, [r7, #16]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	699b      	ldr	r3, [r3, #24]
 800b0fe:	011b      	lsls	r3, r3, #4
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	4313      	orrs	r3, r2
 800b104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	685a      	ldr	r2, [r3, #4]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	697a      	ldr	r2, [r7, #20]
 800b11e:	621a      	str	r2, [r3, #32]
}
 800b120:	bf00      	nop
 800b122:	371c      	adds	r7, #28
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr
 800b12c:	40010000 	.word	0x40010000
 800b130:	40010400 	.word	0x40010400

0800b134 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b134:	b480      	push	{r7}
 800b136:	b087      	sub	sp, #28
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a1b      	ldr	r3, [r3, #32]
 800b142:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a1b      	ldr	r3, [r3, #32]
 800b14e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	69db      	ldr	r3, [r3, #28]
 800b15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b16a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	021b      	lsls	r3, r3, #8
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	4313      	orrs	r3, r2
 800b176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b17e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	031b      	lsls	r3, r3, #12
 800b186:	693a      	ldr	r2, [r7, #16]
 800b188:	4313      	orrs	r3, r2
 800b18a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4a12      	ldr	r2, [pc, #72]	; (800b1d8 <TIM_OC4_SetConfig+0xa4>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d003      	beq.n	800b19c <TIM_OC4_SetConfig+0x68>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	4a11      	ldr	r2, [pc, #68]	; (800b1dc <TIM_OC4_SetConfig+0xa8>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d109      	bne.n	800b1b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	695b      	ldr	r3, [r3, #20]
 800b1a8:	019b      	lsls	r3, r3, #6
 800b1aa:	697a      	ldr	r2, [r7, #20]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	685a      	ldr	r2, [r3, #4]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	693a      	ldr	r2, [r7, #16]
 800b1c8:	621a      	str	r2, [r3, #32]
}
 800b1ca:	bf00      	nop
 800b1cc:	371c      	adds	r7, #28
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop
 800b1d8:	40010000 	.word	0x40010000
 800b1dc:	40010400 	.word	0x40010400

0800b1e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b087      	sub	sp, #28
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6a1b      	ldr	r3, [r3, #32]
 800b1f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6a1b      	ldr	r3, [r3, #32]
 800b1f6:	f023 0201 	bic.w	r2, r3, #1
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	699b      	ldr	r3, [r3, #24]
 800b202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b20a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	011b      	lsls	r3, r3, #4
 800b210:	693a      	ldr	r2, [r7, #16]
 800b212:	4313      	orrs	r3, r2
 800b214:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	f023 030a 	bic.w	r3, r3, #10
 800b21c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b21e:	697a      	ldr	r2, [r7, #20]
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	4313      	orrs	r3, r2
 800b224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	693a      	ldr	r2, [r7, #16]
 800b22a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	697a      	ldr	r2, [r7, #20]
 800b230:	621a      	str	r2, [r3, #32]
}
 800b232:	bf00      	nop
 800b234:	371c      	adds	r7, #28
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b23e:	b480      	push	{r7}
 800b240:	b087      	sub	sp, #28
 800b242:	af00      	add	r7, sp, #0
 800b244:	60f8      	str	r0, [r7, #12]
 800b246:	60b9      	str	r1, [r7, #8]
 800b248:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	6a1b      	ldr	r3, [r3, #32]
 800b24e:	f023 0210 	bic.w	r2, r3, #16
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	699b      	ldr	r3, [r3, #24]
 800b25a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6a1b      	ldr	r3, [r3, #32]
 800b260:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b268:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	031b      	lsls	r3, r3, #12
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	4313      	orrs	r3, r2
 800b272:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b27a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	011b      	lsls	r3, r3, #4
 800b280:	693a      	ldr	r2, [r7, #16]
 800b282:	4313      	orrs	r3, r2
 800b284:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	697a      	ldr	r2, [r7, #20]
 800b28a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	621a      	str	r2, [r3, #32]
}
 800b292:	bf00      	nop
 800b294:	371c      	adds	r7, #28
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr

0800b29e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b29e:	b480      	push	{r7}
 800b2a0:	b085      	sub	sp, #20
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
 800b2a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b2b6:	683a      	ldr	r2, [r7, #0]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	f043 0307 	orr.w	r3, r3, #7
 800b2c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	609a      	str	r2, [r3, #8]
}
 800b2c8:	bf00      	nop
 800b2ca:	3714      	adds	r7, #20
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b087      	sub	sp, #28
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
 800b2e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	689b      	ldr	r3, [r3, #8]
 800b2e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	021a      	lsls	r2, r3, #8
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	431a      	orrs	r2, r3
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	697a      	ldr	r2, [r7, #20]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	697a      	ldr	r2, [r7, #20]
 800b306:	609a      	str	r2, [r3, #8]
}
 800b308:	bf00      	nop
 800b30a:	371c      	adds	r7, #28
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b324:	2b01      	cmp	r3, #1
 800b326:	d101      	bne.n	800b32c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b328:	2302      	movs	r3, #2
 800b32a:	e032      	b.n	800b392 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2202      	movs	r2, #2
 800b338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	689b      	ldr	r3, [r3, #8]
 800b34a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b364:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	4313      	orrs	r3, r2
 800b36e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	3714      	adds	r7, #20
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b082      	sub	sp, #8
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d101      	bne.n	800b3b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e03f      	b.n	800b430 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d106      	bne.n	800b3ca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f008 fd6d 	bl	8013ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2224      	movs	r2, #36	; 0x24
 800b3ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	68da      	ldr	r2, [r3, #12]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3e0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 f9d0 	bl	800b788 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	691a      	ldr	r2, [r3, #16]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	695a      	ldr	r2, [r3, #20]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b406:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68da      	ldr	r2, [r3, #12]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b416:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2220      	movs	r2, #32
 800b422:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2220      	movs	r2, #32
 800b42a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b42e:	2300      	movs	r3, #0
}
 800b430:	4618      	mov	r0, r3
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b088      	sub	sp, #32
 800b43c:	af02      	add	r7, sp, #8
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	603b      	str	r3, [r7, #0]
 800b444:	4613      	mov	r3, r2
 800b446:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800b448:	2300      	movs	r3, #0
 800b44a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b20      	cmp	r3, #32
 800b456:	f040 8083 	bne.w	800b560 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d002      	beq.n	800b466 <HAL_UART_Transmit+0x2e>
 800b460:	88fb      	ldrh	r3, [r7, #6]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	e07b      	b.n	800b562 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b470:	2b01      	cmp	r3, #1
 800b472:	d101      	bne.n	800b478 <HAL_UART_Transmit+0x40>
 800b474:	2302      	movs	r3, #2
 800b476:	e074      	b.n	800b562 <HAL_UART_Transmit+0x12a>
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2221      	movs	r2, #33	; 0x21
 800b48a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b48e:	f7fa f8c7 	bl	8005620 <HAL_GetTick>
 800b492:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	88fa      	ldrh	r2, [r7, #6]
 800b498:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	88fa      	ldrh	r2, [r7, #6]
 800b49e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b4a0:	e042      	b.n	800b528 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	b29a      	uxth	r2, r3
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4b8:	d122      	bne.n	800b500 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	2180      	movs	r1, #128	; 0x80
 800b4c4:	68f8      	ldr	r0, [r7, #12]
 800b4c6:	f000 f914 	bl	800b6f2 <UART_WaitOnFlagUntilTimeout>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d001      	beq.n	800b4d4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	e046      	b.n	800b562 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	881b      	ldrh	r3, [r3, #0]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4e6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d103      	bne.n	800b4f8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	3302      	adds	r3, #2
 800b4f4:	60bb      	str	r3, [r7, #8]
 800b4f6:	e017      	b.n	800b528 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	60bb      	str	r3, [r7, #8]
 800b4fe:	e013      	b.n	800b528 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	2200      	movs	r2, #0
 800b508:	2180      	movs	r1, #128	; 0x80
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f000 f8f1 	bl	800b6f2 <UART_WaitOnFlagUntilTimeout>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d001      	beq.n	800b51a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800b516:	2303      	movs	r3, #3
 800b518:	e023      	b.n	800b562 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	1c5a      	adds	r2, r3, #1
 800b51e:	60ba      	str	r2, [r7, #8]
 800b520:	781a      	ldrb	r2, [r3, #0]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1b7      	bne.n	800b4a2 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	2200      	movs	r2, #0
 800b53a:	2140      	movs	r1, #64	; 0x40
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f000 f8d8 	bl	800b6f2 <UART_WaitOnFlagUntilTimeout>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d001      	beq.n	800b54c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800b548:	2303      	movs	r3, #3
 800b54a:	e00a      	b.n	800b562 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2220      	movs	r2, #32
 800b550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2200      	movs	r2, #0
 800b558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800b55c:	2300      	movs	r3, #0
 800b55e:	e000      	b.n	800b562 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800b560:	2302      	movs	r3, #2
  }
}
 800b562:	4618      	mov	r0, r3
 800b564:	3718      	adds	r7, #24
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b088      	sub	sp, #32
 800b56e:	af02      	add	r7, sp, #8
 800b570:	60f8      	str	r0, [r7, #12]
 800b572:	60b9      	str	r1, [r7, #8]
 800b574:	603b      	str	r3, [r7, #0]
 800b576:	4613      	mov	r3, r2
 800b578:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800b57a:	2300      	movs	r3, #0
 800b57c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b584:	b2db      	uxtb	r3, r3
 800b586:	2b20      	cmp	r3, #32
 800b588:	f040 8090 	bne.w	800b6ac <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d002      	beq.n	800b598 <HAL_UART_Receive+0x2e>
 800b592:	88fb      	ldrh	r3, [r7, #6]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d101      	bne.n	800b59c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	e088      	b.n	800b6ae <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d101      	bne.n	800b5aa <HAL_UART_Receive+0x40>
 800b5a6:	2302      	movs	r3, #2
 800b5a8:	e081      	b.n	800b6ae <HAL_UART_Receive+0x144>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2222      	movs	r2, #34	; 0x22
 800b5bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b5c0:	f7fa f82e 	bl	8005620 <HAL_GetTick>
 800b5c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	88fa      	ldrh	r2, [r7, #6]
 800b5ca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	88fa      	ldrh	r2, [r7, #6]
 800b5d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800b5d2:	e05c      	b.n	800b68e <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	3b01      	subs	r3, #1
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5ea:	d12b      	bne.n	800b644 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	2120      	movs	r1, #32
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f000 f87b 	bl	800b6f2 <UART_WaitOnFlagUntilTimeout>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d001      	beq.n	800b606 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800b602:	2303      	movs	r3, #3
 800b604:	e053      	b.n	800b6ae <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d10c      	bne.n	800b62c <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	b29b      	uxth	r3, r3
 800b61a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b61e:	b29a      	uxth	r2, r3
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	3302      	adds	r3, #2
 800b628:	60bb      	str	r3, [r7, #8]
 800b62a:	e030      	b.n	800b68e <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	b29b      	uxth	r3, r3
 800b634:	b2db      	uxtb	r3, r3
 800b636:	b29a      	uxth	r2, r3
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	3301      	adds	r3, #1
 800b640:	60bb      	str	r3, [r7, #8]
 800b642:	e024      	b.n	800b68e <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	9300      	str	r3, [sp, #0]
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	2200      	movs	r2, #0
 800b64c:	2120      	movs	r1, #32
 800b64e:	68f8      	ldr	r0, [r7, #12]
 800b650:	f000 f84f 	bl	800b6f2 <UART_WaitOnFlagUntilTimeout>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d001      	beq.n	800b65e <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800b65a:	2303      	movs	r3, #3
 800b65c:	e027      	b.n	800b6ae <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	691b      	ldr	r3, [r3, #16]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d108      	bne.n	800b678 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	6859      	ldr	r1, [r3, #4]
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	1c5a      	adds	r2, r3, #1
 800b670:	60ba      	str	r2, [r7, #8]
 800b672:	b2ca      	uxtb	r2, r1
 800b674:	701a      	strb	r2, [r3, #0]
 800b676:	e00a      	b.n	800b68e <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	b2da      	uxtb	r2, r3
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	1c59      	adds	r1, r3, #1
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b68a:	b2d2      	uxtb	r2, r2
 800b68c:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b692:	b29b      	uxth	r3, r3
 800b694:	2b00      	cmp	r3, #0
 800b696:	d19d      	bne.n	800b5d4 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2220      	movs	r2, #32
 800b69c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	e000      	b.n	800b6ae <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800b6ac:	2302      	movs	r3, #2
  }
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3718      	adds	r7, #24
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}

0800b6b6 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800b6b6:	b480      	push	{r7}
 800b6b8:	b085      	sub	sp, #20
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	60fb      	str	r3, [r7, #12]
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	b2da      	uxtb	r2, r3
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	b2db      	uxtb	r3, r3
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3714      	adds	r7, #20
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr

0800b6f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b084      	sub	sp, #16
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	60f8      	str	r0, [r7, #12]
 800b6fa:	60b9      	str	r1, [r7, #8]
 800b6fc:	603b      	str	r3, [r7, #0]
 800b6fe:	4613      	mov	r3, r2
 800b700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b702:	e02c      	b.n	800b75e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b70a:	d028      	beq.n	800b75e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d007      	beq.n	800b722 <UART_WaitOnFlagUntilTimeout+0x30>
 800b712:	f7f9 ff85 	bl	8005620 <HAL_GetTick>
 800b716:	4602      	mov	r2, r0
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	1ad3      	subs	r3, r2, r3
 800b71c:	69ba      	ldr	r2, [r7, #24]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d21d      	bcs.n	800b75e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	68da      	ldr	r2, [r3, #12]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b730:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	695a      	ldr	r2, [r3, #20]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f022 0201 	bic.w	r2, r2, #1
 800b740:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2220      	movs	r2, #32
 800b746:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2220      	movs	r2, #32
 800b74e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b75a:	2303      	movs	r3, #3
 800b75c:	e00f      	b.n	800b77e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	4013      	ands	r3, r2
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	bf0c      	ite	eq
 800b76e:	2301      	moveq	r3, #1
 800b770:	2300      	movne	r3, #0
 800b772:	b2db      	uxtb	r3, r3
 800b774:	461a      	mov	r2, r3
 800b776:	79fb      	ldrb	r3, [r7, #7]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d0c3      	beq.n	800b704 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b77c:	2300      	movs	r3, #0
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
	...

0800b788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b788:	b5b0      	push	{r4, r5, r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	68da      	ldr	r2, [r3, #12]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	430a      	orrs	r2, r1
 800b7a4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	689a      	ldr	r2, [r3, #8]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	691b      	ldr	r3, [r3, #16]
 800b7ae:	431a      	orrs	r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	695b      	ldr	r3, [r3, #20]
 800b7b4:	431a      	orrs	r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	69db      	ldr	r3, [r3, #28]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b7c8:	f023 030c 	bic.w	r3, r3, #12
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	6812      	ldr	r2, [r2, #0]
 800b7d0:	68f9      	ldr	r1, [r7, #12]
 800b7d2:	430b      	orrs	r3, r1
 800b7d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	695b      	ldr	r3, [r3, #20]
 800b7dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	699a      	ldr	r2, [r3, #24]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	430a      	orrs	r2, r1
 800b7ea:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	69db      	ldr	r3, [r3, #28]
 800b7f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7f4:	f040 80e4 	bne.w	800b9c0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4aab      	ldr	r2, [pc, #684]	; (800baac <UART_SetConfig+0x324>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d004      	beq.n	800b80c <UART_SetConfig+0x84>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4aaa      	ldr	r2, [pc, #680]	; (800bab0 <UART_SetConfig+0x328>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d16c      	bne.n	800b8e6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800b80c:	f7fd faac 	bl	8008d68 <HAL_RCC_GetPCLK2Freq>
 800b810:	4602      	mov	r2, r0
 800b812:	4613      	mov	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	4413      	add	r3, r2
 800b818:	009a      	lsls	r2, r3, #2
 800b81a:	441a      	add	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	005b      	lsls	r3, r3, #1
 800b822:	fbb2 f3f3 	udiv	r3, r2, r3
 800b826:	4aa3      	ldr	r2, [pc, #652]	; (800bab4 <UART_SetConfig+0x32c>)
 800b828:	fba2 2303 	umull	r2, r3, r2, r3
 800b82c:	095b      	lsrs	r3, r3, #5
 800b82e:	011c      	lsls	r4, r3, #4
 800b830:	f7fd fa9a 	bl	8008d68 <HAL_RCC_GetPCLK2Freq>
 800b834:	4602      	mov	r2, r0
 800b836:	4613      	mov	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	4413      	add	r3, r2
 800b83c:	009a      	lsls	r2, r3, #2
 800b83e:	441a      	add	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	005b      	lsls	r3, r3, #1
 800b846:	fbb2 f5f3 	udiv	r5, r2, r3
 800b84a:	f7fd fa8d 	bl	8008d68 <HAL_RCC_GetPCLK2Freq>
 800b84e:	4602      	mov	r2, r0
 800b850:	4613      	mov	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4413      	add	r3, r2
 800b856:	009a      	lsls	r2, r3, #2
 800b858:	441a      	add	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	005b      	lsls	r3, r3, #1
 800b860:	fbb2 f3f3 	udiv	r3, r2, r3
 800b864:	4a93      	ldr	r2, [pc, #588]	; (800bab4 <UART_SetConfig+0x32c>)
 800b866:	fba2 2303 	umull	r2, r3, r2, r3
 800b86a:	095b      	lsrs	r3, r3, #5
 800b86c:	2264      	movs	r2, #100	; 0x64
 800b86e:	fb02 f303 	mul.w	r3, r2, r3
 800b872:	1aeb      	subs	r3, r5, r3
 800b874:	00db      	lsls	r3, r3, #3
 800b876:	3332      	adds	r3, #50	; 0x32
 800b878:	4a8e      	ldr	r2, [pc, #568]	; (800bab4 <UART_SetConfig+0x32c>)
 800b87a:	fba2 2303 	umull	r2, r3, r2, r3
 800b87e:	095b      	lsrs	r3, r3, #5
 800b880:	005b      	lsls	r3, r3, #1
 800b882:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b886:	441c      	add	r4, r3
 800b888:	f7fd fa6e 	bl	8008d68 <HAL_RCC_GetPCLK2Freq>
 800b88c:	4602      	mov	r2, r0
 800b88e:	4613      	mov	r3, r2
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	4413      	add	r3, r2
 800b894:	009a      	lsls	r2, r3, #2
 800b896:	441a      	add	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	005b      	lsls	r3, r3, #1
 800b89e:	fbb2 f5f3 	udiv	r5, r2, r3
 800b8a2:	f7fd fa61 	bl	8008d68 <HAL_RCC_GetPCLK2Freq>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	4613      	mov	r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	4413      	add	r3, r2
 800b8ae:	009a      	lsls	r2, r3, #2
 800b8b0:	441a      	add	r2, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	005b      	lsls	r3, r3, #1
 800b8b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8bc:	4a7d      	ldr	r2, [pc, #500]	; (800bab4 <UART_SetConfig+0x32c>)
 800b8be:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c2:	095b      	lsrs	r3, r3, #5
 800b8c4:	2264      	movs	r2, #100	; 0x64
 800b8c6:	fb02 f303 	mul.w	r3, r2, r3
 800b8ca:	1aeb      	subs	r3, r5, r3
 800b8cc:	00db      	lsls	r3, r3, #3
 800b8ce:	3332      	adds	r3, #50	; 0x32
 800b8d0:	4a78      	ldr	r2, [pc, #480]	; (800bab4 <UART_SetConfig+0x32c>)
 800b8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8d6:	095b      	lsrs	r3, r3, #5
 800b8d8:	f003 0207 	and.w	r2, r3, #7
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4422      	add	r2, r4
 800b8e2:	609a      	str	r2, [r3, #8]
 800b8e4:	e154      	b.n	800bb90 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800b8e6:	f7fd fa2b 	bl	8008d40 <HAL_RCC_GetPCLK1Freq>
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4413      	add	r3, r2
 800b8f2:	009a      	lsls	r2, r3, #2
 800b8f4:	441a      	add	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	005b      	lsls	r3, r3, #1
 800b8fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b900:	4a6c      	ldr	r2, [pc, #432]	; (800bab4 <UART_SetConfig+0x32c>)
 800b902:	fba2 2303 	umull	r2, r3, r2, r3
 800b906:	095b      	lsrs	r3, r3, #5
 800b908:	011c      	lsls	r4, r3, #4
 800b90a:	f7fd fa19 	bl	8008d40 <HAL_RCC_GetPCLK1Freq>
 800b90e:	4602      	mov	r2, r0
 800b910:	4613      	mov	r3, r2
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4413      	add	r3, r2
 800b916:	009a      	lsls	r2, r3, #2
 800b918:	441a      	add	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	005b      	lsls	r3, r3, #1
 800b920:	fbb2 f5f3 	udiv	r5, r2, r3
 800b924:	f7fd fa0c 	bl	8008d40 <HAL_RCC_GetPCLK1Freq>
 800b928:	4602      	mov	r2, r0
 800b92a:	4613      	mov	r3, r2
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	4413      	add	r3, r2
 800b930:	009a      	lsls	r2, r3, #2
 800b932:	441a      	add	r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	005b      	lsls	r3, r3, #1
 800b93a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b93e:	4a5d      	ldr	r2, [pc, #372]	; (800bab4 <UART_SetConfig+0x32c>)
 800b940:	fba2 2303 	umull	r2, r3, r2, r3
 800b944:	095b      	lsrs	r3, r3, #5
 800b946:	2264      	movs	r2, #100	; 0x64
 800b948:	fb02 f303 	mul.w	r3, r2, r3
 800b94c:	1aeb      	subs	r3, r5, r3
 800b94e:	00db      	lsls	r3, r3, #3
 800b950:	3332      	adds	r3, #50	; 0x32
 800b952:	4a58      	ldr	r2, [pc, #352]	; (800bab4 <UART_SetConfig+0x32c>)
 800b954:	fba2 2303 	umull	r2, r3, r2, r3
 800b958:	095b      	lsrs	r3, r3, #5
 800b95a:	005b      	lsls	r3, r3, #1
 800b95c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b960:	441c      	add	r4, r3
 800b962:	f7fd f9ed 	bl	8008d40 <HAL_RCC_GetPCLK1Freq>
 800b966:	4602      	mov	r2, r0
 800b968:	4613      	mov	r3, r2
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	4413      	add	r3, r2
 800b96e:	009a      	lsls	r2, r3, #2
 800b970:	441a      	add	r2, r3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	005b      	lsls	r3, r3, #1
 800b978:	fbb2 f5f3 	udiv	r5, r2, r3
 800b97c:	f7fd f9e0 	bl	8008d40 <HAL_RCC_GetPCLK1Freq>
 800b980:	4602      	mov	r2, r0
 800b982:	4613      	mov	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	4413      	add	r3, r2
 800b988:	009a      	lsls	r2, r3, #2
 800b98a:	441a      	add	r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	005b      	lsls	r3, r3, #1
 800b992:	fbb2 f3f3 	udiv	r3, r2, r3
 800b996:	4a47      	ldr	r2, [pc, #284]	; (800bab4 <UART_SetConfig+0x32c>)
 800b998:	fba2 2303 	umull	r2, r3, r2, r3
 800b99c:	095b      	lsrs	r3, r3, #5
 800b99e:	2264      	movs	r2, #100	; 0x64
 800b9a0:	fb02 f303 	mul.w	r3, r2, r3
 800b9a4:	1aeb      	subs	r3, r5, r3
 800b9a6:	00db      	lsls	r3, r3, #3
 800b9a8:	3332      	adds	r3, #50	; 0x32
 800b9aa:	4a42      	ldr	r2, [pc, #264]	; (800bab4 <UART_SetConfig+0x32c>)
 800b9ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b9b0:	095b      	lsrs	r3, r3, #5
 800b9b2:	f003 0207 	and.w	r2, r3, #7
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4422      	add	r2, r4
 800b9bc:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800b9be:	e0e7      	b.n	800bb90 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a39      	ldr	r2, [pc, #228]	; (800baac <UART_SetConfig+0x324>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d004      	beq.n	800b9d4 <UART_SetConfig+0x24c>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a38      	ldr	r2, [pc, #224]	; (800bab0 <UART_SetConfig+0x328>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d171      	bne.n	800bab8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800b9d4:	f7fd f9c8 	bl	8008d68 <HAL_RCC_GetPCLK2Freq>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	4613      	mov	r3, r2
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	4413      	add	r3, r2
 800b9e0:	009a      	lsls	r2, r3, #2
 800b9e2:	441a      	add	r2, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9ee:	4a31      	ldr	r2, [pc, #196]	; (800bab4 <UART_SetConfig+0x32c>)
 800b9f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b9f4:	095b      	lsrs	r3, r3, #5
 800b9f6:	011c      	lsls	r4, r3, #4
 800b9f8:	f7fd f9b6 	bl	8008d68 <HAL_RCC_GetPCLK2Freq>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	4613      	mov	r3, r2
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	4413      	add	r3, r2
 800ba04:	009a      	lsls	r2, r3, #2
 800ba06:	441a      	add	r2, r3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	fbb2 f5f3 	udiv	r5, r2, r3
 800ba12:	f7fd f9a9 	bl	8008d68 <HAL_RCC_GetPCLK2Freq>
 800ba16:	4602      	mov	r2, r0
 800ba18:	4613      	mov	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	009a      	lsls	r2, r3, #2
 800ba20:	441a      	add	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba2c:	4a21      	ldr	r2, [pc, #132]	; (800bab4 <UART_SetConfig+0x32c>)
 800ba2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ba32:	095b      	lsrs	r3, r3, #5
 800ba34:	2264      	movs	r2, #100	; 0x64
 800ba36:	fb02 f303 	mul.w	r3, r2, r3
 800ba3a:	1aeb      	subs	r3, r5, r3
 800ba3c:	011b      	lsls	r3, r3, #4
 800ba3e:	3332      	adds	r3, #50	; 0x32
 800ba40:	4a1c      	ldr	r2, [pc, #112]	; (800bab4 <UART_SetConfig+0x32c>)
 800ba42:	fba2 2303 	umull	r2, r3, r2, r3
 800ba46:	095b      	lsrs	r3, r3, #5
 800ba48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba4c:	441c      	add	r4, r3
 800ba4e:	f7fd f98b 	bl	8008d68 <HAL_RCC_GetPCLK2Freq>
 800ba52:	4602      	mov	r2, r0
 800ba54:	4613      	mov	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	4413      	add	r3, r2
 800ba5a:	009a      	lsls	r2, r3, #2
 800ba5c:	441a      	add	r2, r3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	fbb2 f5f3 	udiv	r5, r2, r3
 800ba68:	f7fd f97e 	bl	8008d68 <HAL_RCC_GetPCLK2Freq>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	4613      	mov	r3, r2
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	4413      	add	r3, r2
 800ba74:	009a      	lsls	r2, r3, #2
 800ba76:	441a      	add	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba82:	4a0c      	ldr	r2, [pc, #48]	; (800bab4 <UART_SetConfig+0x32c>)
 800ba84:	fba2 2303 	umull	r2, r3, r2, r3
 800ba88:	095b      	lsrs	r3, r3, #5
 800ba8a:	2264      	movs	r2, #100	; 0x64
 800ba8c:	fb02 f303 	mul.w	r3, r2, r3
 800ba90:	1aeb      	subs	r3, r5, r3
 800ba92:	011b      	lsls	r3, r3, #4
 800ba94:	3332      	adds	r3, #50	; 0x32
 800ba96:	4a07      	ldr	r2, [pc, #28]	; (800bab4 <UART_SetConfig+0x32c>)
 800ba98:	fba2 2303 	umull	r2, r3, r2, r3
 800ba9c:	095b      	lsrs	r3, r3, #5
 800ba9e:	f003 020f 	and.w	r2, r3, #15
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4422      	add	r2, r4
 800baa8:	609a      	str	r2, [r3, #8]
 800baaa:	e071      	b.n	800bb90 <UART_SetConfig+0x408>
 800baac:	40011000 	.word	0x40011000
 800bab0:	40011400 	.word	0x40011400
 800bab4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800bab8:	f7fd f942 	bl	8008d40 <HAL_RCC_GetPCLK1Freq>
 800babc:	4602      	mov	r2, r0
 800babe:	4613      	mov	r3, r2
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	4413      	add	r3, r2
 800bac4:	009a      	lsls	r2, r3, #2
 800bac6:	441a      	add	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	fbb2 f3f3 	udiv	r3, r2, r3
 800bad2:	4a31      	ldr	r2, [pc, #196]	; (800bb98 <UART_SetConfig+0x410>)
 800bad4:	fba2 2303 	umull	r2, r3, r2, r3
 800bad8:	095b      	lsrs	r3, r3, #5
 800bada:	011c      	lsls	r4, r3, #4
 800badc:	f7fd f930 	bl	8008d40 <HAL_RCC_GetPCLK1Freq>
 800bae0:	4602      	mov	r2, r0
 800bae2:	4613      	mov	r3, r2
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	4413      	add	r3, r2
 800bae8:	009a      	lsls	r2, r3, #2
 800baea:	441a      	add	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	fbb2 f5f3 	udiv	r5, r2, r3
 800baf6:	f7fd f923 	bl	8008d40 <HAL_RCC_GetPCLK1Freq>
 800bafa:	4602      	mov	r2, r0
 800bafc:	4613      	mov	r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	4413      	add	r3, r2
 800bb02:	009a      	lsls	r2, r3, #2
 800bb04:	441a      	add	r2, r3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb10:	4a21      	ldr	r2, [pc, #132]	; (800bb98 <UART_SetConfig+0x410>)
 800bb12:	fba2 2303 	umull	r2, r3, r2, r3
 800bb16:	095b      	lsrs	r3, r3, #5
 800bb18:	2264      	movs	r2, #100	; 0x64
 800bb1a:	fb02 f303 	mul.w	r3, r2, r3
 800bb1e:	1aeb      	subs	r3, r5, r3
 800bb20:	011b      	lsls	r3, r3, #4
 800bb22:	3332      	adds	r3, #50	; 0x32
 800bb24:	4a1c      	ldr	r2, [pc, #112]	; (800bb98 <UART_SetConfig+0x410>)
 800bb26:	fba2 2303 	umull	r2, r3, r2, r3
 800bb2a:	095b      	lsrs	r3, r3, #5
 800bb2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb30:	441c      	add	r4, r3
 800bb32:	f7fd f905 	bl	8008d40 <HAL_RCC_GetPCLK1Freq>
 800bb36:	4602      	mov	r2, r0
 800bb38:	4613      	mov	r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4413      	add	r3, r2
 800bb3e:	009a      	lsls	r2, r3, #2
 800bb40:	441a      	add	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	fbb2 f5f3 	udiv	r5, r2, r3
 800bb4c:	f7fd f8f8 	bl	8008d40 <HAL_RCC_GetPCLK1Freq>
 800bb50:	4602      	mov	r2, r0
 800bb52:	4613      	mov	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	4413      	add	r3, r2
 800bb58:	009a      	lsls	r2, r3, #2
 800bb5a:	441a      	add	r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb66:	4a0c      	ldr	r2, [pc, #48]	; (800bb98 <UART_SetConfig+0x410>)
 800bb68:	fba2 2303 	umull	r2, r3, r2, r3
 800bb6c:	095b      	lsrs	r3, r3, #5
 800bb6e:	2264      	movs	r2, #100	; 0x64
 800bb70:	fb02 f303 	mul.w	r3, r2, r3
 800bb74:	1aeb      	subs	r3, r5, r3
 800bb76:	011b      	lsls	r3, r3, #4
 800bb78:	3332      	adds	r3, #50	; 0x32
 800bb7a:	4a07      	ldr	r2, [pc, #28]	; (800bb98 <UART_SetConfig+0x410>)
 800bb7c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb80:	095b      	lsrs	r3, r3, #5
 800bb82:	f003 020f 	and.w	r2, r3, #15
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4422      	add	r2, r4
 800bb8c:	609a      	str	r2, [r3, #8]
}
 800bb8e:	e7ff      	b.n	800bb90 <UART_SetConfig+0x408>
 800bb90:	bf00      	nop
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bdb0      	pop	{r4, r5, r7, pc}
 800bb98:	51eb851f 	.word	0x51eb851f

0800bb9c <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800bb9c:	b084      	sub	sp, #16
 800bb9e:	b480      	push	{r7}
 800bba0:	b085      	sub	sp, #20
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
 800bba6:	f107 001c 	add.w	r0, r7, #28
 800bbaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bbb2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bbb4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bbb6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bbba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bbbe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bbc2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bbc6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800bbd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	431a      	orrs	r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3714      	adds	r7, #20
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	b004      	add	sp, #16
 800bbf0:	4770      	bx	lr

0800bbf2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	b083      	sub	sp, #12
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	370c      	adds	r7, #12
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800bc2e:	b480      	push	{r7}
 800bc30:	b083      	sub	sp, #12
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2203      	movs	r2, #3
 800bc3a:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800bc3c:	2300      	movs	r3, #0
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	370c      	adds	r7, #12
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr

0800bc4a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800bc4a:	b480      	push	{r7}
 800bc4c:	b083      	sub	sp, #12
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f003 0303 	and.w	r3, r3, #3
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	370c      	adds	r7, #12
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr

0800bc66 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800bc66:	b480      	push	{r7}
 800bc68:	b085      	sub	sp, #20
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800bc70:	2300      	movs	r3, #0
 800bc72:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc84:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bc8a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bc90:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	4313      	orrs	r3, r2
 800bc96:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bca0:	f023 030f 	bic.w	r3, r3, #15
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	431a      	orrs	r2, r3
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800bcba:	b480      	push	{r7}
 800bcbc:	b083      	sub	sp, #12
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	691b      	ldr	r3, [r3, #16]
 800bcc6:	b2db      	uxtb	r3, r3
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800bcde:	2300      	movs	r3, #0
 800bce0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	3314      	adds	r3, #20
 800bce6:	461a      	mov	r2, r3
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	4413      	add	r3, r2
 800bcec:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
}  
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3714      	adds	r7, #20
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr

0800bcfe <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800bcfe:	b480      	push	{r7}
 800bd00:	b085      	sub	sp, #20
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
 800bd06:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	685a      	ldr	r2, [r3, #4]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bd24:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bd2a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bd30:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd3c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	431a      	orrs	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bd48:	2300      	movs	r3, #0

}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3714      	adds	r7, #20
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr

0800bd56 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b088      	sub	sp, #32
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800bd60:	2300      	movs	r3, #0
 800bd62:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bd68:	2310      	movs	r3, #16
 800bd6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bd6c:	2340      	movs	r3, #64	; 0x40
 800bd6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd70:	2300      	movs	r3, #0
 800bd72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd78:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd7a:	f107 0308 	add.w	r3, r7, #8
 800bd7e:	4619      	mov	r1, r3
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f7ff ff70 	bl	800bc66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800bd86:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd8a:	2110      	movs	r1, #16
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 fa63 	bl	800c258 <SDMMC_GetCmdResp1>
 800bd92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd94:	69fb      	ldr	r3, [r7, #28]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3720      	adds	r7, #32
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b088      	sub	sp, #32
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bdb0:	2311      	movs	r3, #17
 800bdb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bdb4:	2340      	movs	r3, #64	; 0x40
 800bdb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bdbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdc0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bdc2:	f107 0308 	add.w	r3, r7, #8
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f7ff ff4c 	bl	800bc66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bdce:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdd2:	2111      	movs	r1, #17
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 fa3f 	bl	800c258 <SDMMC_GetCmdResp1>
 800bdda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bddc:	69fb      	ldr	r3, [r7, #28]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3720      	adds	r7, #32
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b088      	sub	sp, #32
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
 800bdee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bdf8:	2312      	movs	r3, #18
 800bdfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bdfc:	2340      	movs	r3, #64	; 0x40
 800bdfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be00:	2300      	movs	r3, #0
 800be02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be08:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be0a:	f107 0308 	add.w	r3, r7, #8
 800be0e:	4619      	mov	r1, r3
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f7ff ff28 	bl	800bc66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800be16:	f241 3288 	movw	r2, #5000	; 0x1388
 800be1a:	2112      	movs	r1, #18
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 fa1b 	bl	800c258 <SDMMC_GetCmdResp1>
 800be22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be24:	69fb      	ldr	r3, [r7, #28]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3720      	adds	r7, #32
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b088      	sub	sp, #32
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800be38:	2300      	movs	r3, #0
 800be3a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800be40:	2318      	movs	r3, #24
 800be42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800be44:	2340      	movs	r3, #64	; 0x40
 800be46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be48:	2300      	movs	r3, #0
 800be4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be50:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be52:	f107 0308 	add.w	r3, r7, #8
 800be56:	4619      	mov	r1, r3
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f7ff ff04 	bl	800bc66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800be5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800be62:	2118      	movs	r1, #24
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 f9f7 	bl	800c258 <SDMMC_GetCmdResp1>
 800be6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be6c:	69fb      	ldr	r3, [r7, #28]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3720      	adds	r7, #32
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b088      	sub	sp, #32
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
 800be7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800be80:	2300      	movs	r3, #0
 800be82:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800be88:	2319      	movs	r3, #25
 800be8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800be8c:	2340      	movs	r3, #64	; 0x40
 800be8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be90:	2300      	movs	r3, #0
 800be92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be98:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be9a:	f107 0308 	add.w	r3, r7, #8
 800be9e:	4619      	mov	r1, r3
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f7ff fee0 	bl	800bc66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800bea6:	f241 3288 	movw	r2, #5000	; 0x1388
 800beaa:	2119      	movs	r1, #25
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 f9d3 	bl	800c258 <SDMMC_GetCmdResp1>
 800beb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800beb4:	69fb      	ldr	r3, [r7, #28]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3720      	adds	r7, #32
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
	...

0800bec0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b088      	sub	sp, #32
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800bec8:	2300      	movs	r3, #0
 800beca:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800becc:	2300      	movs	r3, #0
 800bece:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bed0:	230c      	movs	r3, #12
 800bed2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bed4:	2340      	movs	r3, #64	; 0x40
 800bed6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bed8:	2300      	movs	r3, #0
 800beda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bedc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bee0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bee2:	f107 0308 	add.w	r3, r7, #8
 800bee6:	4619      	mov	r1, r3
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f7ff febc 	bl	800bc66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800beee:	4a05      	ldr	r2, [pc, #20]	; (800bf04 <SDMMC_CmdStopTransfer+0x44>)
 800bef0:	210c      	movs	r1, #12
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 f9b0 	bl	800c258 <SDMMC_GetCmdResp1>
 800bef8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800befa:	69fb      	ldr	r3, [r7, #28]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3720      	adds	r7, #32
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	05f5e100 	.word	0x05f5e100

0800bf08 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b08a      	sub	sp, #40	; 0x28
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800bf14:	2300      	movs	r3, #0
 800bf16:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bf1c:	2307      	movs	r3, #7
 800bf1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf20:	2340      	movs	r3, #64	; 0x40
 800bf22:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf24:	2300      	movs	r3, #0
 800bf26:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf2c:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf2e:	f107 0310 	add.w	r3, r7, #16
 800bf32:	4619      	mov	r1, r3
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f7ff fe96 	bl	800bc66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800bf3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf3e:	2107      	movs	r1, #7
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f000 f989 	bl	800c258 <SDMMC_GetCmdResp1>
 800bf46:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3728      	adds	r7, #40	; 0x28
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b088      	sub	sp, #32
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bf62:	2300      	movs	r3, #0
 800bf64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800bf66:	2300      	movs	r3, #0
 800bf68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf72:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf74:	f107 0308 	add.w	r3, r7, #8
 800bf78:	4619      	mov	r1, r3
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f7ff fe73 	bl	800bc66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 f93f 	bl	800c204 <SDMMC_GetCmdError>
 800bf86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf88:	69fb      	ldr	r3, [r7, #28]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3720      	adds	r7, #32
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800bf92:	b580      	push	{r7, lr}
 800bf94:	b088      	sub	sp, #32
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bf9e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bfa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bfa4:	2308      	movs	r3, #8
 800bfa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bfa8:	2340      	movs	r3, #64	; 0x40
 800bfaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bfac:	2300      	movs	r3, #0
 800bfae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bfb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfb4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bfb6:	f107 0308 	add.w	r3, r7, #8
 800bfba:	4619      	mov	r1, r3
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f7ff fe52 	bl	800bc66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 fb10 	bl	800c5e8 <SDMMC_GetCmdResp7>
 800bfc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfca:	69fb      	ldr	r3, [r7, #28]
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3720      	adds	r7, #32
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b088      	sub	sp, #32
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bfe6:	2337      	movs	r3, #55	; 0x37
 800bfe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bfea:	2340      	movs	r3, #64	; 0x40
 800bfec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bfee:	2300      	movs	r3, #0
 800bff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bff6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bff8:	f107 0308 	add.w	r3, r7, #8
 800bffc:	4619      	mov	r1, r3
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f7ff fe31 	bl	800bc66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c004:	f241 3288 	movw	r2, #5000	; 0x1388
 800c008:	2137      	movs	r1, #55	; 0x37
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 f924 	bl	800c258 <SDMMC_GetCmdResp1>
 800c010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c012:	69fb      	ldr	r3, [r7, #28]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3720      	adds	r7, #32
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b088      	sub	sp, #32
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c026:	2300      	movs	r3, #0
 800c028:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c030:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c036:	2329      	movs	r3, #41	; 0x29
 800c038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c03a:	2340      	movs	r3, #64	; 0x40
 800c03c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c03e:	2300      	movs	r3, #0
 800c040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c046:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c048:	f107 0308 	add.w	r3, r7, #8
 800c04c:	4619      	mov	r1, r3
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f7ff fe09 	bl	800bc66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fa25 	bl	800c4a4 <SDMMC_GetCmdResp3>
 800c05a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c05c:	69fb      	ldr	r3, [r7, #28]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3720      	adds	r7, #32
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b088      	sub	sp, #32
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c070:	2300      	movs	r3, #0
 800c072:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c078:	2306      	movs	r3, #6
 800c07a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c07c:	2340      	movs	r3, #64	; 0x40
 800c07e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c080:	2300      	movs	r3, #0
 800c082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c088:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c08a:	f107 0308 	add.w	r3, r7, #8
 800c08e:	4619      	mov	r1, r3
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f7ff fde8 	bl	800bc66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800c096:	f241 3288 	movw	r2, #5000	; 0x1388
 800c09a:	2106      	movs	r1, #6
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 f8db 	bl	800c258 <SDMMC_GetCmdResp1>
 800c0a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0a4:	69fb      	ldr	r3, [r7, #28]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3720      	adds	r7, #32
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b088      	sub	sp, #32
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c0be:	2333      	movs	r3, #51	; 0x33
 800c0c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c0c2:	2340      	movs	r3, #64	; 0x40
 800c0c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c0ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0ce:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c0d0:	f107 0308 	add.w	r3, r7, #8
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7ff fdc5 	bl	800bc66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800c0dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0e0:	2133      	movs	r1, #51	; 0x33
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 f8b8 	bl	800c258 <SDMMC_GetCmdResp1>
 800c0e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0ea:	69fb      	ldr	r3, [r7, #28]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3720      	adds	r7, #32
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b088      	sub	sp, #32
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c100:	2300      	movs	r3, #0
 800c102:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c104:	2302      	movs	r3, #2
 800c106:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c108:	23c0      	movs	r3, #192	; 0xc0
 800c10a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c10c:	2300      	movs	r3, #0
 800c10e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c114:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c116:	f107 0308 	add.w	r3, r7, #8
 800c11a:	4619      	mov	r1, r3
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f7ff fda2 	bl	800bc66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 f97e 	bl	800c424 <SDMMC_GetCmdResp2>
 800c128:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c12a:	69fb      	ldr	r3, [r7, #28]
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3720      	adds	r7, #32
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b088      	sub	sp, #32
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c13e:	2300      	movs	r3, #0
 800c140:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c146:	2309      	movs	r3, #9
 800c148:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c14a:	23c0      	movs	r3, #192	; 0xc0
 800c14c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c14e:	2300      	movs	r3, #0
 800c150:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c156:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c158:	f107 0308 	add.w	r3, r7, #8
 800c15c:	4619      	mov	r1, r3
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f7ff fd81 	bl	800bc66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 f95d 	bl	800c424 <SDMMC_GetCmdResp2>
 800c16a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c16c:	69fb      	ldr	r3, [r7, #28]
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3720      	adds	r7, #32
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b088      	sub	sp, #32
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
 800c17e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c180:	2300      	movs	r3, #0
 800c182:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c184:	2300      	movs	r3, #0
 800c186:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c188:	2303      	movs	r3, #3
 800c18a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c18c:	2340      	movs	r3, #64	; 0x40
 800c18e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c190:	2300      	movs	r3, #0
 800c192:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c198:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c19a:	f107 0308 	add.w	r3, r7, #8
 800c19e:	4619      	mov	r1, r3
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f7ff fd60 	bl	800bc66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c1a6:	683a      	ldr	r2, [r7, #0]
 800c1a8:	2103      	movs	r1, #3
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 f9ae 	bl	800c50c <SDMMC_GetCmdResp6>
 800c1b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1b2:	69fb      	ldr	r3, [r7, #28]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3720      	adds	r7, #32
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b088      	sub	sp, #32
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c1ce:	230d      	movs	r3, #13
 800c1d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c1d2:	2340      	movs	r3, #64	; 0x40
 800c1d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c1da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1de:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c1e0:	f107 0308 	add.w	r3, r7, #8
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f7ff fd3d 	bl	800bc66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c1ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1f0:	210d      	movs	r1, #13
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 f830 	bl	800c258 <SDMMC_GetCmdResp1>
 800c1f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1fa:	69fb      	ldr	r3, [r7, #28]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3720      	adds	r7, #32
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c204:	b490      	push	{r4, r7}
 800c206:	b082      	sub	sp, #8
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c20c:	4b10      	ldr	r3, [pc, #64]	; (800c250 <SDMMC_GetCmdError+0x4c>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a10      	ldr	r2, [pc, #64]	; (800c254 <SDMMC_GetCmdError+0x50>)
 800c212:	fba2 2303 	umull	r2, r3, r2, r3
 800c216:	0a5b      	lsrs	r3, r3, #9
 800c218:	f241 3288 	movw	r2, #5000	; 0x1388
 800c21c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c220:	4623      	mov	r3, r4
 800c222:	1e5c      	subs	r4, r3, #1
 800c224:	2b00      	cmp	r3, #0
 800c226:	d102      	bne.n	800c22e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c228:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c22c:	e00a      	b.n	800c244 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c236:	2b00      	cmp	r3, #0
 800c238:	d0f2      	beq.n	800c220 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800c240:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bc90      	pop	{r4, r7}
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	20000120 	.word	0x20000120
 800c254:	10624dd3 	.word	0x10624dd3

0800c258 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c258:	b590      	push	{r4, r7, lr}
 800c25a:	b087      	sub	sp, #28
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	460b      	mov	r3, r1
 800c262:	607a      	str	r2, [r7, #4]
 800c264:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c266:	4b6c      	ldr	r3, [pc, #432]	; (800c418 <SDMMC_GetCmdResp1+0x1c0>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a6c      	ldr	r2, [pc, #432]	; (800c41c <SDMMC_GetCmdResp1+0x1c4>)
 800c26c:	fba2 2303 	umull	r2, r3, r2, r3
 800c270:	0a5b      	lsrs	r3, r3, #9
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c278:	4623      	mov	r3, r4
 800c27a:	1e5c      	subs	r4, r3, #1
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d102      	bne.n	800c286 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c284:	e0c3      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c28a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d0f2      	beq.n	800c278 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c296:	f003 0304 	and.w	r3, r3, #4
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d004      	beq.n	800c2a8 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2204      	movs	r2, #4
 800c2a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2a4:	2304      	movs	r3, #4
 800c2a6:	e0b2      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ac:	f003 0301 	and.w	r3, r3, #1
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d004      	beq.n	800c2be <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e0a7      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f7ff fcfb 	bl	800bcba <SDIO_GetCommandResponse>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	7afb      	ldrb	r3, [r7, #11]
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d001      	beq.n	800c2d2 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e09d      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800c2d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c2da:	2100      	movs	r1, #0
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	f7ff fcf9 	bl	800bcd4 <SDIO_GetResponse>
 800c2e2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c2e4:	697a      	ldr	r2, [r7, #20]
 800c2e6:	4b4e      	ldr	r3, [pc, #312]	; (800c420 <SDMMC_GetCmdResp1+0x1c8>)
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d101      	bne.n	800c2f2 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	e08d      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	da02      	bge.n	800c2fe <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c2f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c2fc:	e087      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c304:	2b00      	cmp	r3, #0
 800c306:	d001      	beq.n	800c30c <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c308:	2340      	movs	r3, #64	; 0x40
 800c30a:	e080      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c312:	2b00      	cmp	r3, #0
 800c314:	d001      	beq.n	800c31a <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c316:	2380      	movs	r3, #128	; 0x80
 800c318:	e079      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c320:	2b00      	cmp	r3, #0
 800c322:	d002      	beq.n	800c32a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c324:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c328:	e071      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c330:	2b00      	cmp	r3, #0
 800c332:	d002      	beq.n	800c33a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c334:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c338:	e069      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c340:	2b00      	cmp	r3, #0
 800c342:	d002      	beq.n	800c34a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c348:	e061      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c350:	2b00      	cmp	r3, #0
 800c352:	d002      	beq.n	800c35a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c354:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c358:	e059      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c360:	2b00      	cmp	r3, #0
 800c362:	d002      	beq.n	800c36a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c368:	e051      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c370:	2b00      	cmp	r3, #0
 800c372:	d002      	beq.n	800c37a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c378:	e049      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c380:	2b00      	cmp	r3, #0
 800c382:	d002      	beq.n	800c38a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c384:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c388:	e041      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c390:	2b00      	cmp	r3, #0
 800c392:	d002      	beq.n	800c39a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800c394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c398:	e039      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d002      	beq.n	800c3aa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c3a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c3a8:	e031      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d002      	beq.n	800c3ba <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c3b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c3b8:	e029      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d002      	beq.n	800c3ca <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c3c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c3c8:	e021      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d002      	beq.n	800c3da <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c3d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c3d8:	e019      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d002      	beq.n	800c3ea <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c3e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c3e8:	e011      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d002      	beq.n	800c3fa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c3f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c3f8:	e009      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	f003 0308 	and.w	r3, r3, #8
 800c400:	2b00      	cmp	r3, #0
 800c402:	d002      	beq.n	800c40a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c404:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c408:	e001      	b.n	800c40e <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c40a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c40e:	4618      	mov	r0, r3
 800c410:	371c      	adds	r7, #28
 800c412:	46bd      	mov	sp, r7
 800c414:	bd90      	pop	{r4, r7, pc}
 800c416:	bf00      	nop
 800c418:	20000120 	.word	0x20000120
 800c41c:	10624dd3 	.word	0x10624dd3
 800c420:	fdffe008 	.word	0xfdffe008

0800c424 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c424:	b490      	push	{r4, r7}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c42c:	4b1b      	ldr	r3, [pc, #108]	; (800c49c <SDMMC_GetCmdResp2+0x78>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a1b      	ldr	r2, [pc, #108]	; (800c4a0 <SDMMC_GetCmdResp2+0x7c>)
 800c432:	fba2 2303 	umull	r2, r3, r2, r3
 800c436:	0a5b      	lsrs	r3, r3, #9
 800c438:	f241 3288 	movw	r2, #5000	; 0x1388
 800c43c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c440:	4623      	mov	r3, r4
 800c442:	1e5c      	subs	r4, r3, #1
 800c444:	2b00      	cmp	r3, #0
 800c446:	d102      	bne.n	800c44e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c448:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c44c:	e020      	b.n	800c490 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c452:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c456:	2b00      	cmp	r3, #0
 800c458:	d0f2      	beq.n	800c440 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c45e:	f003 0304 	and.w	r3, r3, #4
 800c462:	2b00      	cmp	r3, #0
 800c464:	d004      	beq.n	800c470 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2204      	movs	r2, #4
 800c46a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c46c:	2304      	movs	r3, #4
 800c46e:	e00f      	b.n	800c490 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c474:	f003 0301 	and.w	r3, r3, #1
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d004      	beq.n	800c486 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2201      	movs	r2, #1
 800c480:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c482:	2301      	movs	r3, #1
 800c484:	e004      	b.n	800c490 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800c48c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c48e:	2300      	movs	r3, #0
}
 800c490:	4618      	mov	r0, r3
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bc90      	pop	{r4, r7}
 800c498:	4770      	bx	lr
 800c49a:	bf00      	nop
 800c49c:	20000120 	.word	0x20000120
 800c4a0:	10624dd3 	.word	0x10624dd3

0800c4a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c4a4:	b490      	push	{r4, r7}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c4ac:	4b15      	ldr	r3, [pc, #84]	; (800c504 <SDMMC_GetCmdResp3+0x60>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a15      	ldr	r2, [pc, #84]	; (800c508 <SDMMC_GetCmdResp3+0x64>)
 800c4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4b6:	0a5b      	lsrs	r3, r3, #9
 800c4b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c4c0:	4623      	mov	r3, r4
 800c4c2:	1e5c      	subs	r4, r3, #1
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d102      	bne.n	800c4ce <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c4c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c4cc:	e015      	b.n	800c4fa <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d0f2      	beq.n	800c4c0 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4de:	f003 0304 	and.w	r3, r3, #4
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d004      	beq.n	800c4f0 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2204      	movs	r2, #4
 800c4ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4ec:	2304      	movs	r3, #4
 800c4ee:	e004      	b.n	800c4fa <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800c4f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bc90      	pop	{r4, r7}
 800c502:	4770      	bx	lr
 800c504:	20000120 	.word	0x20000120
 800c508:	10624dd3 	.word	0x10624dd3

0800c50c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c50c:	b590      	push	{r4, r7, lr}
 800c50e:	b087      	sub	sp, #28
 800c510:	af00      	add	r7, sp, #0
 800c512:	60f8      	str	r0, [r7, #12]
 800c514:	460b      	mov	r3, r1
 800c516:	607a      	str	r2, [r7, #4]
 800c518:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c51a:	4b31      	ldr	r3, [pc, #196]	; (800c5e0 <SDMMC_GetCmdResp6+0xd4>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4a31      	ldr	r2, [pc, #196]	; (800c5e4 <SDMMC_GetCmdResp6+0xd8>)
 800c520:	fba2 2303 	umull	r2, r3, r2, r3
 800c524:	0a5b      	lsrs	r3, r3, #9
 800c526:	f241 3288 	movw	r2, #5000	; 0x1388
 800c52a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c52e:	4623      	mov	r3, r4
 800c530:	1e5c      	subs	r4, r3, #1
 800c532:	2b00      	cmp	r3, #0
 800c534:	d102      	bne.n	800c53c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c536:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c53a:	e04c      	b.n	800c5d6 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c540:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c544:	2b00      	cmp	r3, #0
 800c546:	d0f2      	beq.n	800c52e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c54c:	f003 0304 	and.w	r3, r3, #4
 800c550:	2b00      	cmp	r3, #0
 800c552:	d004      	beq.n	800c55e <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2204      	movs	r2, #4
 800c558:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c55a:	2304      	movs	r3, #4
 800c55c:	e03b      	b.n	800c5d6 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c562:	f003 0301 	and.w	r3, r3, #1
 800c566:	2b00      	cmp	r3, #0
 800c568:	d004      	beq.n	800c574 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2201      	movs	r2, #1
 800c56e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c570:	2301      	movs	r3, #1
 800c572:	e030      	b.n	800c5d6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f7ff fba0 	bl	800bcba <SDIO_GetCommandResponse>
 800c57a:	4603      	mov	r3, r0
 800c57c:	461a      	mov	r2, r3
 800c57e:	7afb      	ldrb	r3, [r7, #11]
 800c580:	4293      	cmp	r3, r2
 800c582:	d001      	beq.n	800c588 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c584:	2301      	movs	r3, #1
 800c586:	e026      	b.n	800c5d6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800c58e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c590:	2100      	movs	r1, #0
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f7ff fb9e 	bl	800bcd4 <SDIO_GetResponse>
 800c598:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d106      	bne.n	800c5b2 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	0c1b      	lsrs	r3, r3, #16
 800c5a8:	b29a      	uxth	r2, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	e011      	b.n	800c5d6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d002      	beq.n	800c5c2 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c5bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c5c0:	e009      	b.n	800c5d6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d002      	beq.n	800c5d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c5cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5d0:	e001      	b.n	800c5d6 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c5d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	371c      	adds	r7, #28
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd90      	pop	{r4, r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	20000120 	.word	0x20000120
 800c5e4:	10624dd3 	.word	0x10624dd3

0800c5e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c5e8:	b490      	push	{r4, r7}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5f0:	4b18      	ldr	r3, [pc, #96]	; (800c654 <SDMMC_GetCmdResp7+0x6c>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a18      	ldr	r2, [pc, #96]	; (800c658 <SDMMC_GetCmdResp7+0x70>)
 800c5f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c5fa:	0a5b      	lsrs	r3, r3, #9
 800c5fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c600:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c604:	4623      	mov	r3, r4
 800c606:	1e5c      	subs	r4, r3, #1
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d102      	bne.n	800c612 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c60c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c610:	e01a      	b.n	800c648 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c616:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d0f2      	beq.n	800c604 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c622:	f003 0304 	and.w	r3, r3, #4
 800c626:	2b00      	cmp	r3, #0
 800c628:	d004      	beq.n	800c634 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2240      	movs	r2, #64	; 0x40
 800c62e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c630:	2304      	movs	r3, #4
 800c632:	e009      	b.n	800c648 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d002      	beq.n	800c646 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2240      	movs	r2, #64	; 0x40
 800c644:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c646:	2300      	movs	r3, #0
  
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3708      	adds	r7, #8
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bc90      	pop	{r4, r7}
 800c650:	4770      	bx	lr
 800c652:	bf00      	nop
 800c654:	20000120 	.word	0x20000120
 800c658:	10624dd3 	.word	0x10624dd3

0800c65c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c65c:	b084      	sub	sp, #16
 800c65e:	b580      	push	{r7, lr}
 800c660:	b084      	sub	sp, #16
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
 800c666:	f107 001c 	add.w	r0, r7, #28
 800c66a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c670:	2b01      	cmp	r3, #1
 800c672:	d122      	bne.n	800c6ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c678:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c69c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d105      	bne.n	800c6ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f001 fa7c 	bl	800dbac <USB_CoreReset>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	73fb      	strb	r3, [r7, #15]
 800c6b8:	e01a      	b.n	800c6f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f001 fa70 	bl	800dbac <USB_CoreReset>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c6d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d106      	bne.n	800c6e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	639a      	str	r2, [r3, #56]	; 0x38
 800c6e2:	e005      	b.n	800c6f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d10b      	bne.n	800c70e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	f043 0206 	orr.w	r2, r3, #6
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	689b      	ldr	r3, [r3, #8]
 800c706:	f043 0220 	orr.w	r2, r3, #32
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c71a:	b004      	add	sp, #16
 800c71c:	4770      	bx	lr
	...

0800c720 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c720:	b480      	push	{r7}
 800c722:	b087      	sub	sp, #28
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	4613      	mov	r3, r2
 800c72c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c72e:	79fb      	ldrb	r3, [r7, #7]
 800c730:	2b02      	cmp	r3, #2
 800c732:	d165      	bne.n	800c800 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	4a41      	ldr	r2, [pc, #260]	; (800c83c <USB_SetTurnaroundTime+0x11c>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d906      	bls.n	800c74a <USB_SetTurnaroundTime+0x2a>
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	4a40      	ldr	r2, [pc, #256]	; (800c840 <USB_SetTurnaroundTime+0x120>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d802      	bhi.n	800c74a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c744:	230f      	movs	r3, #15
 800c746:	617b      	str	r3, [r7, #20]
 800c748:	e062      	b.n	800c810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	4a3c      	ldr	r2, [pc, #240]	; (800c840 <USB_SetTurnaroundTime+0x120>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d906      	bls.n	800c760 <USB_SetTurnaroundTime+0x40>
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	4a3b      	ldr	r2, [pc, #236]	; (800c844 <USB_SetTurnaroundTime+0x124>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d802      	bhi.n	800c760 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c75a:	230e      	movs	r3, #14
 800c75c:	617b      	str	r3, [r7, #20]
 800c75e:	e057      	b.n	800c810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	4a38      	ldr	r2, [pc, #224]	; (800c844 <USB_SetTurnaroundTime+0x124>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d906      	bls.n	800c776 <USB_SetTurnaroundTime+0x56>
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	4a37      	ldr	r2, [pc, #220]	; (800c848 <USB_SetTurnaroundTime+0x128>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d802      	bhi.n	800c776 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c770:	230d      	movs	r3, #13
 800c772:	617b      	str	r3, [r7, #20]
 800c774:	e04c      	b.n	800c810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	4a33      	ldr	r2, [pc, #204]	; (800c848 <USB_SetTurnaroundTime+0x128>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d906      	bls.n	800c78c <USB_SetTurnaroundTime+0x6c>
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	4a32      	ldr	r2, [pc, #200]	; (800c84c <USB_SetTurnaroundTime+0x12c>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d802      	bhi.n	800c78c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c786:	230c      	movs	r3, #12
 800c788:	617b      	str	r3, [r7, #20]
 800c78a:	e041      	b.n	800c810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	4a2f      	ldr	r2, [pc, #188]	; (800c84c <USB_SetTurnaroundTime+0x12c>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d906      	bls.n	800c7a2 <USB_SetTurnaroundTime+0x82>
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	4a2e      	ldr	r2, [pc, #184]	; (800c850 <USB_SetTurnaroundTime+0x130>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d802      	bhi.n	800c7a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c79c:	230b      	movs	r3, #11
 800c79e:	617b      	str	r3, [r7, #20]
 800c7a0:	e036      	b.n	800c810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	4a2a      	ldr	r2, [pc, #168]	; (800c850 <USB_SetTurnaroundTime+0x130>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d906      	bls.n	800c7b8 <USB_SetTurnaroundTime+0x98>
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	4a29      	ldr	r2, [pc, #164]	; (800c854 <USB_SetTurnaroundTime+0x134>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d802      	bhi.n	800c7b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c7b2:	230a      	movs	r3, #10
 800c7b4:	617b      	str	r3, [r7, #20]
 800c7b6:	e02b      	b.n	800c810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	4a26      	ldr	r2, [pc, #152]	; (800c854 <USB_SetTurnaroundTime+0x134>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d906      	bls.n	800c7ce <USB_SetTurnaroundTime+0xae>
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	4a25      	ldr	r2, [pc, #148]	; (800c858 <USB_SetTurnaroundTime+0x138>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d802      	bhi.n	800c7ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c7c8:	2309      	movs	r3, #9
 800c7ca:	617b      	str	r3, [r7, #20]
 800c7cc:	e020      	b.n	800c810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	4a21      	ldr	r2, [pc, #132]	; (800c858 <USB_SetTurnaroundTime+0x138>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d906      	bls.n	800c7e4 <USB_SetTurnaroundTime+0xc4>
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	4a20      	ldr	r2, [pc, #128]	; (800c85c <USB_SetTurnaroundTime+0x13c>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d802      	bhi.n	800c7e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c7de:	2308      	movs	r3, #8
 800c7e0:	617b      	str	r3, [r7, #20]
 800c7e2:	e015      	b.n	800c810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	4a1d      	ldr	r2, [pc, #116]	; (800c85c <USB_SetTurnaroundTime+0x13c>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d906      	bls.n	800c7fa <USB_SetTurnaroundTime+0xda>
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	4a1c      	ldr	r2, [pc, #112]	; (800c860 <USB_SetTurnaroundTime+0x140>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d802      	bhi.n	800c7fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c7f4:	2307      	movs	r3, #7
 800c7f6:	617b      	str	r3, [r7, #20]
 800c7f8:	e00a      	b.n	800c810 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c7fa:	2306      	movs	r3, #6
 800c7fc:	617b      	str	r3, [r7, #20]
 800c7fe:	e007      	b.n	800c810 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c800:	79fb      	ldrb	r3, [r7, #7]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d102      	bne.n	800c80c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c806:	2309      	movs	r3, #9
 800c808:	617b      	str	r3, [r7, #20]
 800c80a:	e001      	b.n	800c810 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c80c:	2309      	movs	r3, #9
 800c80e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	68da      	ldr	r2, [r3, #12]
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	029b      	lsls	r3, r3, #10
 800c824:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c828:	431a      	orrs	r2, r3
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c82e:	2300      	movs	r3, #0
}
 800c830:	4618      	mov	r0, r3
 800c832:	371c      	adds	r7, #28
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr
 800c83c:	00d8acbf 	.word	0x00d8acbf
 800c840:	00e4e1bf 	.word	0x00e4e1bf
 800c844:	00f423ff 	.word	0x00f423ff
 800c848:	0106737f 	.word	0x0106737f
 800c84c:	011a499f 	.word	0x011a499f
 800c850:	01312cff 	.word	0x01312cff
 800c854:	014ca43f 	.word	0x014ca43f
 800c858:	016e35ff 	.word	0x016e35ff
 800c85c:	01a6ab1f 	.word	0x01a6ab1f
 800c860:	01e847ff 	.word	0x01e847ff

0800c864 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c864:	b480      	push	{r7}
 800c866:	b083      	sub	sp, #12
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	f043 0201 	orr.w	r2, r3, #1
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	370c      	adds	r7, #12
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr

0800c886 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c886:	b480      	push	{r7}
 800c888:	b083      	sub	sp, #12
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	f023 0201 	bic.w	r2, r3, #1
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c89a:	2300      	movs	r3, #0
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	370c      	adds	r7, #12
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr

0800c8a8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c8c0:	78fb      	ldrb	r3, [r7, #3]
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d106      	bne.n	800c8d4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	60da      	str	r2, [r3, #12]
 800c8d2:	e00b      	b.n	800c8ec <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c8d4:	78fb      	ldrb	r3, [r7, #3]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d106      	bne.n	800c8e8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	60da      	str	r2, [r3, #12]
 800c8e6:	e001      	b.n	800c8ec <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e003      	b.n	800c8f4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c8ec:	2032      	movs	r0, #50	; 0x32
 800c8ee:	f7f8 fea3 	bl	8005638 <HAL_Delay>

  return HAL_OK;
 800c8f2:	2300      	movs	r3, #0
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c8fc:	b084      	sub	sp, #16
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b086      	sub	sp, #24
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
 800c906:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c90a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c90e:	2300      	movs	r3, #0
 800c910:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c916:	2300      	movs	r3, #0
 800c918:	613b      	str	r3, [r7, #16]
 800c91a:	e009      	b.n	800c930 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	3340      	adds	r3, #64	; 0x40
 800c922:	009b      	lsls	r3, r3, #2
 800c924:	4413      	add	r3, r2
 800c926:	2200      	movs	r2, #0
 800c928:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	3301      	adds	r3, #1
 800c92e:	613b      	str	r3, [r7, #16]
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	2b0e      	cmp	r3, #14
 800c934:	d9f2      	bls.n	800c91c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d112      	bne.n	800c962 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c940:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c94c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c958:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	639a      	str	r2, [r3, #56]	; 0x38
 800c960:	e00b      	b.n	800c97a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c972:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c980:	461a      	mov	r2, r3
 800c982:	2300      	movs	r3, #0
 800c984:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c98c:	4619      	mov	r1, r3
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c994:	461a      	mov	r2, r3
 800c996:	680b      	ldr	r3, [r1, #0]
 800c998:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d10c      	bne.n	800c9ba <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d104      	bne.n	800c9b0 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c9a6:	2100      	movs	r1, #0
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 f961 	bl	800cc70 <USB_SetDevSpeed>
 800c9ae:	e008      	b.n	800c9c2 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c9b0:	2101      	movs	r1, #1
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 f95c 	bl	800cc70 <USB_SetDevSpeed>
 800c9b8:	e003      	b.n	800c9c2 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c9ba:	2103      	movs	r1, #3
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 f957 	bl	800cc70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c9c2:	2110      	movs	r1, #16
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 f90b 	bl	800cbe0 <USB_FlushTxFifo>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d001      	beq.n	800c9d4 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f000 f929 	bl	800cc2c <USB_FlushRxFifo>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d001      	beq.n	800c9e4 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca02:	461a      	mov	r2, r3
 800ca04:	2300      	movs	r3, #0
 800ca06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca08:	2300      	movs	r3, #0
 800ca0a:	613b      	str	r3, [r7, #16]
 800ca0c:	e043      	b.n	800ca96 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	015a      	lsls	r2, r3, #5
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	4413      	add	r3, r2
 800ca16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca24:	d118      	bne.n	800ca58 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d10a      	bne.n	800ca42 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	015a      	lsls	r2, r3, #5
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	4413      	add	r3, r2
 800ca34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca38:	461a      	mov	r2, r3
 800ca3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca3e:	6013      	str	r3, [r2, #0]
 800ca40:	e013      	b.n	800ca6a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	015a      	lsls	r2, r3, #5
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	4413      	add	r3, r2
 800ca4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca4e:	461a      	mov	r2, r3
 800ca50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ca54:	6013      	str	r3, [r2, #0]
 800ca56:	e008      	b.n	800ca6a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	015a      	lsls	r2, r3, #5
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	4413      	add	r3, r2
 800ca60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca64:	461a      	mov	r2, r3
 800ca66:	2300      	movs	r3, #0
 800ca68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	015a      	lsls	r2, r3, #5
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	4413      	add	r3, r2
 800ca72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca76:	461a      	mov	r2, r3
 800ca78:	2300      	movs	r3, #0
 800ca7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	015a      	lsls	r2, r3, #5
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	4413      	add	r3, r2
 800ca84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca88:	461a      	mov	r2, r3
 800ca8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	3301      	adds	r3, #1
 800ca94:	613b      	str	r3, [r7, #16]
 800ca96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca98:	693a      	ldr	r2, [r7, #16]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d3b7      	bcc.n	800ca0e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca9e:	2300      	movs	r3, #0
 800caa0:	613b      	str	r3, [r7, #16]
 800caa2:	e043      	b.n	800cb2c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	015a      	lsls	r2, r3, #5
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	4413      	add	r3, r2
 800caac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800caba:	d118      	bne.n	800caee <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d10a      	bne.n	800cad8 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	015a      	lsls	r2, r3, #5
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	4413      	add	r3, r2
 800caca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cace:	461a      	mov	r2, r3
 800cad0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cad4:	6013      	str	r3, [r2, #0]
 800cad6:	e013      	b.n	800cb00 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	015a      	lsls	r2, r3, #5
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	4413      	add	r3, r2
 800cae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cae4:	461a      	mov	r2, r3
 800cae6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800caea:	6013      	str	r3, [r2, #0]
 800caec:	e008      	b.n	800cb00 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	015a      	lsls	r2, r3, #5
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	4413      	add	r3, r2
 800caf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cafa:	461a      	mov	r2, r3
 800cafc:	2300      	movs	r3, #0
 800cafe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	015a      	lsls	r2, r3, #5
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	4413      	add	r3, r2
 800cb08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	2300      	movs	r3, #0
 800cb10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	015a      	lsls	r2, r3, #5
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	4413      	add	r3, r2
 800cb1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb1e:	461a      	mov	r2, r3
 800cb20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cb24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	613b      	str	r3, [r7, #16]
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2e:	693a      	ldr	r2, [r7, #16]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d3b7      	bcc.n	800caa4 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb3a:	691b      	ldr	r3, [r3, #16]
 800cb3c:	68fa      	ldr	r2, [r7, #12]
 800cb3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb46:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800cb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	d111      	bne.n	800cb72 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb54:	461a      	mov	r2, r3
 800cb56:	4b20      	ldr	r3, [pc, #128]	; (800cbd8 <USB_DevInit+0x2dc>)
 800cb58:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb62:	68fa      	ldr	r2, [r7, #12]
 800cb64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb6c:	f043 0303 	orr.w	r3, r3, #3
 800cb70:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cb7e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d105      	bne.n	800cb92 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	699b      	ldr	r3, [r3, #24]
 800cb8a:	f043 0210 	orr.w	r2, r3, #16
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	699a      	ldr	r2, [r3, #24]
 800cb96:	4b11      	ldr	r3, [pc, #68]	; (800cbdc <USB_DevInit+0x2e0>)
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cb9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d005      	beq.n	800cbb0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	699b      	ldr	r3, [r3, #24]
 800cba8:	f043 0208 	orr.w	r2, r3, #8
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cbb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d107      	bne.n	800cbc6 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cbbe:	f043 0304 	orr.w	r3, r3, #4
 800cbc2:	687a      	ldr	r2, [r7, #4]
 800cbc4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cbc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3718      	adds	r7, #24
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cbd2:	b004      	add	sp, #16
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	00800100 	.word	0x00800100
 800cbdc:	803c3800 	.word	0x803c3800

0800cbe0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cbea:	2300      	movs	r3, #0
 800cbec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	019b      	lsls	r3, r3, #6
 800cbf2:	f043 0220 	orr.w	r2, r3, #32
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	60fb      	str	r3, [r7, #12]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	4a09      	ldr	r2, [pc, #36]	; (800cc28 <USB_FlushTxFifo+0x48>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d901      	bls.n	800cc0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cc08:	2303      	movs	r3, #3
 800cc0a:	e006      	b.n	800cc1a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	691b      	ldr	r3, [r3, #16]
 800cc10:	f003 0320 	and.w	r3, r3, #32
 800cc14:	2b20      	cmp	r3, #32
 800cc16:	d0f0      	beq.n	800cbfa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cc18:	2300      	movs	r3, #0
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3714      	adds	r7, #20
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop
 800cc28:	00030d40 	.word	0x00030d40

0800cc2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b085      	sub	sp, #20
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cc34:	2300      	movs	r3, #0
 800cc36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2210      	movs	r2, #16
 800cc3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	3301      	adds	r3, #1
 800cc42:	60fb      	str	r3, [r7, #12]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	4a09      	ldr	r2, [pc, #36]	; (800cc6c <USB_FlushRxFifo+0x40>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d901      	bls.n	800cc50 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cc4c:	2303      	movs	r3, #3
 800cc4e:	e006      	b.n	800cc5e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	691b      	ldr	r3, [r3, #16]
 800cc54:	f003 0310 	and.w	r3, r3, #16
 800cc58:	2b10      	cmp	r3, #16
 800cc5a:	d0f0      	beq.n	800cc3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3714      	adds	r7, #20
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	00030d40 	.word	0x00030d40

0800cc70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b085      	sub	sp, #20
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc86:	681a      	ldr	r2, [r3, #0]
 800cc88:	78fb      	ldrb	r3, [r7, #3]
 800cc8a:	68f9      	ldr	r1, [r7, #12]
 800cc8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc90:	4313      	orrs	r3, r2
 800cc92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3714      	adds	r7, #20
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr

0800cca2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cca2:	b480      	push	{r7}
 800cca4:	b087      	sub	sp, #28
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccb4:	689b      	ldr	r3, [r3, #8]
 800ccb6:	f003 0306 	and.w	r3, r3, #6
 800ccba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d102      	bne.n	800ccc8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	75fb      	strb	r3, [r7, #23]
 800ccc6:	e00a      	b.n	800ccde <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2b02      	cmp	r3, #2
 800cccc:	d002      	beq.n	800ccd4 <USB_GetDevSpeed+0x32>
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2b06      	cmp	r3, #6
 800ccd2:	d102      	bne.n	800ccda <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ccd4:	2302      	movs	r3, #2
 800ccd6:	75fb      	strb	r3, [r7, #23]
 800ccd8:	e001      	b.n	800ccde <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ccda:	230f      	movs	r3, #15
 800ccdc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ccde:	7dfb      	ldrb	r3, [r7, #23]
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	371c      	adds	r7, #28
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	785b      	ldrb	r3, [r3, #1]
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d13a      	bne.n	800cd7e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd0e:	69da      	ldr	r2, [r3, #28]
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	f003 030f 	and.w	r3, r3, #15
 800cd18:	2101      	movs	r1, #1
 800cd1a:	fa01 f303 	lsl.w	r3, r1, r3
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	68f9      	ldr	r1, [r7, #12]
 800cd22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd26:	4313      	orrs	r3, r2
 800cd28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	015a      	lsls	r2, r3, #5
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	4413      	add	r3, r2
 800cd32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d155      	bne.n	800cdec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	015a      	lsls	r2, r3, #5
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	4413      	add	r3, r2
 800cd48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd4c:	681a      	ldr	r2, [r3, #0]
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	78db      	ldrb	r3, [r3, #3]
 800cd5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	059b      	lsls	r3, r3, #22
 800cd62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cd64:	4313      	orrs	r3, r2
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	0151      	lsls	r1, r2, #5
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	440a      	add	r2, r1
 800cd6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd7a:	6013      	str	r3, [r2, #0]
 800cd7c:	e036      	b.n	800cdec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd84:	69da      	ldr	r2, [r3, #28]
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	f003 030f 	and.w	r3, r3, #15
 800cd8e:	2101      	movs	r1, #1
 800cd90:	fa01 f303 	lsl.w	r3, r1, r3
 800cd94:	041b      	lsls	r3, r3, #16
 800cd96:	68f9      	ldr	r1, [r7, #12]
 800cd98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	015a      	lsls	r2, r3, #5
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	4413      	add	r3, r2
 800cda8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d11a      	bne.n	800cdec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	015a      	lsls	r2, r3, #5
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdc2:	681a      	ldr	r2, [r3, #0]
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	78db      	ldrb	r3, [r3, #3]
 800cdd0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cdd2:	430b      	orrs	r3, r1
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	68ba      	ldr	r2, [r7, #8]
 800cdd8:	0151      	lsls	r1, r2, #5
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	440a      	add	r2, r1
 800cdde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cde2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cde6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
	...

0800cdfc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	785b      	ldrb	r3, [r3, #1]
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d135      	bne.n	800ce84 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	f003 030f 	and.w	r3, r3, #15
 800ce28:	2101      	movs	r1, #1
 800ce2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	43db      	mvns	r3, r3
 800ce32:	68f9      	ldr	r1, [r7, #12]
 800ce34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce38:	4013      	ands	r3, r2
 800ce3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce42:	69da      	ldr	r2, [r3, #28]
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	f003 030f 	and.w	r3, r3, #15
 800ce4c:	2101      	movs	r1, #1
 800ce4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	43db      	mvns	r3, r3
 800ce56:	68f9      	ldr	r1, [r7, #12]
 800ce58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce5c:	4013      	ands	r3, r2
 800ce5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	015a      	lsls	r2, r3, #5
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	4413      	add	r3, r2
 800ce68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	0159      	lsls	r1, r3, #5
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	440b      	add	r3, r1
 800ce76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	4b1f      	ldr	r3, [pc, #124]	; (800cefc <USB_DeactivateEndpoint+0x100>)
 800ce7e:	4013      	ands	r3, r2
 800ce80:	600b      	str	r3, [r1, #0]
 800ce82:	e034      	b.n	800ceee <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	f003 030f 	and.w	r3, r3, #15
 800ce94:	2101      	movs	r1, #1
 800ce96:	fa01 f303 	lsl.w	r3, r1, r3
 800ce9a:	041b      	lsls	r3, r3, #16
 800ce9c:	43db      	mvns	r3, r3
 800ce9e:	68f9      	ldr	r1, [r7, #12]
 800cea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cea4:	4013      	ands	r3, r2
 800cea6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ceae:	69da      	ldr	r2, [r3, #28]
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	f003 030f 	and.w	r3, r3, #15
 800ceb8:	2101      	movs	r1, #1
 800ceba:	fa01 f303 	lsl.w	r3, r1, r3
 800cebe:	041b      	lsls	r3, r3, #16
 800cec0:	43db      	mvns	r3, r3
 800cec2:	68f9      	ldr	r1, [r7, #12]
 800cec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cec8:	4013      	ands	r3, r2
 800ceca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	015a      	lsls	r2, r3, #5
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	4413      	add	r3, r2
 800ced4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	0159      	lsls	r1, r3, #5
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	440b      	add	r3, r1
 800cee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cee6:	4619      	mov	r1, r3
 800cee8:	4b05      	ldr	r3, [pc, #20]	; (800cf00 <USB_DeactivateEndpoint+0x104>)
 800ceea:	4013      	ands	r3, r2
 800ceec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ceee:	2300      	movs	r3, #0
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3714      	adds	r7, #20
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr
 800cefc:	ec337800 	.word	0xec337800
 800cf00:	eff37800 	.word	0xeff37800

0800cf04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b08a      	sub	sp, #40	; 0x28
 800cf08:	af02      	add	r7, sp, #8
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	785b      	ldrb	r3, [r3, #1]
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	f040 815c 	bne.w	800d1de <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	695b      	ldr	r3, [r3, #20]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d132      	bne.n	800cf94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	015a      	lsls	r2, r3, #5
 800cf32:	69fb      	ldr	r3, [r7, #28]
 800cf34:	4413      	add	r3, r2
 800cf36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf3a:	691b      	ldr	r3, [r3, #16]
 800cf3c:	69ba      	ldr	r2, [r7, #24]
 800cf3e:	0151      	lsls	r1, r2, #5
 800cf40:	69fa      	ldr	r2, [r7, #28]
 800cf42:	440a      	add	r2, r1
 800cf44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cf4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cf50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	015a      	lsls	r2, r3, #5
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	4413      	add	r3, r2
 800cf5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	69ba      	ldr	r2, [r7, #24]
 800cf62:	0151      	lsls	r1, r2, #5
 800cf64:	69fa      	ldr	r2, [r7, #28]
 800cf66:	440a      	add	r2, r1
 800cf68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cf72:	69bb      	ldr	r3, [r7, #24]
 800cf74:	015a      	lsls	r2, r3, #5
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	4413      	add	r3, r2
 800cf7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf7e:	691b      	ldr	r3, [r3, #16]
 800cf80:	69ba      	ldr	r2, [r7, #24]
 800cf82:	0151      	lsls	r1, r2, #5
 800cf84:	69fa      	ldr	r2, [r7, #28]
 800cf86:	440a      	add	r2, r1
 800cf88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf8c:	0cdb      	lsrs	r3, r3, #19
 800cf8e:	04db      	lsls	r3, r3, #19
 800cf90:	6113      	str	r3, [r2, #16]
 800cf92:	e074      	b.n	800d07e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cf94:	69bb      	ldr	r3, [r7, #24]
 800cf96:	015a      	lsls	r2, r3, #5
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfa0:	691b      	ldr	r3, [r3, #16]
 800cfa2:	69ba      	ldr	r2, [r7, #24]
 800cfa4:	0151      	lsls	r1, r2, #5
 800cfa6:	69fa      	ldr	r2, [r7, #28]
 800cfa8:	440a      	add	r2, r1
 800cfaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfae:	0cdb      	lsrs	r3, r3, #19
 800cfb0:	04db      	lsls	r3, r3, #19
 800cfb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	015a      	lsls	r2, r3, #5
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	4413      	add	r3, r2
 800cfbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	69ba      	ldr	r2, [r7, #24]
 800cfc4:	0151      	lsls	r1, r2, #5
 800cfc6:	69fa      	ldr	r2, [r7, #28]
 800cfc8:	440a      	add	r2, r1
 800cfca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cfd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cfd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	015a      	lsls	r2, r3, #5
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	4413      	add	r3, r2
 800cfe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfe4:	691a      	ldr	r2, [r3, #16]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	6959      	ldr	r1, [r3, #20]
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	440b      	add	r3, r1
 800cff0:	1e59      	subs	r1, r3, #1
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	fbb1 f3f3 	udiv	r3, r1, r3
 800cffa:	04d9      	lsls	r1, r3, #19
 800cffc:	4b9d      	ldr	r3, [pc, #628]	; (800d274 <USB_EPStartXfer+0x370>)
 800cffe:	400b      	ands	r3, r1
 800d000:	69b9      	ldr	r1, [r7, #24]
 800d002:	0148      	lsls	r0, r1, #5
 800d004:	69f9      	ldr	r1, [r7, #28]
 800d006:	4401      	add	r1, r0
 800d008:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d00c:	4313      	orrs	r3, r2
 800d00e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d010:	69bb      	ldr	r3, [r7, #24]
 800d012:	015a      	lsls	r2, r3, #5
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	4413      	add	r3, r2
 800d018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d01c:	691a      	ldr	r2, [r3, #16]
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	695b      	ldr	r3, [r3, #20]
 800d022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d026:	69b9      	ldr	r1, [r7, #24]
 800d028:	0148      	lsls	r0, r1, #5
 800d02a:	69f9      	ldr	r1, [r7, #28]
 800d02c:	4401      	add	r1, r0
 800d02e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d032:	4313      	orrs	r3, r2
 800d034:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	78db      	ldrb	r3, [r3, #3]
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d11f      	bne.n	800d07e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	015a      	lsls	r2, r3, #5
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	4413      	add	r3, r2
 800d046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d04a:	691b      	ldr	r3, [r3, #16]
 800d04c:	69ba      	ldr	r2, [r7, #24]
 800d04e:	0151      	lsls	r1, r2, #5
 800d050:	69fa      	ldr	r2, [r7, #28]
 800d052:	440a      	add	r2, r1
 800d054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d058:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d05c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d05e:	69bb      	ldr	r3, [r7, #24]
 800d060:	015a      	lsls	r2, r3, #5
 800d062:	69fb      	ldr	r3, [r7, #28]
 800d064:	4413      	add	r3, r2
 800d066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d06a:	691b      	ldr	r3, [r3, #16]
 800d06c:	69ba      	ldr	r2, [r7, #24]
 800d06e:	0151      	lsls	r1, r2, #5
 800d070:	69fa      	ldr	r2, [r7, #28]
 800d072:	440a      	add	r2, r1
 800d074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d078:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d07c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d07e:	79fb      	ldrb	r3, [r7, #7]
 800d080:	2b01      	cmp	r3, #1
 800d082:	d14b      	bne.n	800d11c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	691b      	ldr	r3, [r3, #16]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d009      	beq.n	800d0a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	015a      	lsls	r2, r3, #5
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	4413      	add	r3, r2
 800d094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d098:	461a      	mov	r2, r3
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	691b      	ldr	r3, [r3, #16]
 800d09e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	78db      	ldrb	r3, [r3, #3]
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d128      	bne.n	800d0fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0ae:	689b      	ldr	r3, [r3, #8]
 800d0b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d110      	bne.n	800d0da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	015a      	lsls	r2, r3, #5
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	4413      	add	r3, r2
 800d0c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	69ba      	ldr	r2, [r7, #24]
 800d0c8:	0151      	lsls	r1, r2, #5
 800d0ca:	69fa      	ldr	r2, [r7, #28]
 800d0cc:	440a      	add	r2, r1
 800d0ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d0d6:	6013      	str	r3, [r2, #0]
 800d0d8:	e00f      	b.n	800d0fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	015a      	lsls	r2, r3, #5
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	69ba      	ldr	r2, [r7, #24]
 800d0ea:	0151      	lsls	r1, r2, #5
 800d0ec:	69fa      	ldr	r2, [r7, #28]
 800d0ee:	440a      	add	r2, r1
 800d0f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d0fa:	69bb      	ldr	r3, [r7, #24]
 800d0fc:	015a      	lsls	r2, r3, #5
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	4413      	add	r3, r2
 800d102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	69ba      	ldr	r2, [r7, #24]
 800d10a:	0151      	lsls	r1, r2, #5
 800d10c:	69fa      	ldr	r2, [r7, #28]
 800d10e:	440a      	add	r2, r1
 800d110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d114:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d118:	6013      	str	r3, [r2, #0]
 800d11a:	e12f      	b.n	800d37c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d11c:	69bb      	ldr	r3, [r7, #24]
 800d11e:	015a      	lsls	r2, r3, #5
 800d120:	69fb      	ldr	r3, [r7, #28]
 800d122:	4413      	add	r3, r2
 800d124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	69ba      	ldr	r2, [r7, #24]
 800d12c:	0151      	lsls	r1, r2, #5
 800d12e:	69fa      	ldr	r2, [r7, #28]
 800d130:	440a      	add	r2, r1
 800d132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d136:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d13a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	78db      	ldrb	r3, [r3, #3]
 800d140:	2b01      	cmp	r3, #1
 800d142:	d015      	beq.n	800d170 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	695b      	ldr	r3, [r3, #20]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	f000 8117 	beq.w	800d37c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	f003 030f 	and.w	r3, r3, #15
 800d15e:	2101      	movs	r1, #1
 800d160:	fa01 f303 	lsl.w	r3, r1, r3
 800d164:	69f9      	ldr	r1, [r7, #28]
 800d166:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d16a:	4313      	orrs	r3, r2
 800d16c:	634b      	str	r3, [r1, #52]	; 0x34
 800d16e:	e105      	b.n	800d37c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d170:	69fb      	ldr	r3, [r7, #28]
 800d172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d176:	689b      	ldr	r3, [r3, #8]
 800d178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d110      	bne.n	800d1a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d180:	69bb      	ldr	r3, [r7, #24]
 800d182:	015a      	lsls	r2, r3, #5
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	4413      	add	r3, r2
 800d188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	69ba      	ldr	r2, [r7, #24]
 800d190:	0151      	lsls	r1, r2, #5
 800d192:	69fa      	ldr	r2, [r7, #28]
 800d194:	440a      	add	r2, r1
 800d196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d19a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d19e:	6013      	str	r3, [r2, #0]
 800d1a0:	e00f      	b.n	800d1c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	015a      	lsls	r2, r3, #5
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	4413      	add	r3, r2
 800d1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	69ba      	ldr	r2, [r7, #24]
 800d1b2:	0151      	lsls	r1, r2, #5
 800d1b4:	69fa      	ldr	r2, [r7, #28]
 800d1b6:	440a      	add	r2, r1
 800d1b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	68d9      	ldr	r1, [r3, #12]
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	781a      	ldrb	r2, [r3, #0]
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	695b      	ldr	r3, [r3, #20]
 800d1ce:	b298      	uxth	r0, r3
 800d1d0:	79fb      	ldrb	r3, [r7, #7]
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	68f8      	ldr	r0, [r7, #12]
 800d1d8:	f000 fa2b 	bl	800d632 <USB_WritePacket>
 800d1dc:	e0ce      	b.n	800d37c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	015a      	lsls	r2, r3, #5
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ea:	691b      	ldr	r3, [r3, #16]
 800d1ec:	69ba      	ldr	r2, [r7, #24]
 800d1ee:	0151      	lsls	r1, r2, #5
 800d1f0:	69fa      	ldr	r2, [r7, #28]
 800d1f2:	440a      	add	r2, r1
 800d1f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1f8:	0cdb      	lsrs	r3, r3, #19
 800d1fa:	04db      	lsls	r3, r3, #19
 800d1fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	015a      	lsls	r2, r3, #5
 800d202:	69fb      	ldr	r3, [r7, #28]
 800d204:	4413      	add	r3, r2
 800d206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d20a:	691b      	ldr	r3, [r3, #16]
 800d20c:	69ba      	ldr	r2, [r7, #24]
 800d20e:	0151      	lsls	r1, r2, #5
 800d210:	69fa      	ldr	r2, [r7, #28]
 800d212:	440a      	add	r2, r1
 800d214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d218:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d21c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d220:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	695b      	ldr	r3, [r3, #20]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d126      	bne.n	800d278 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d22a:	69bb      	ldr	r3, [r7, #24]
 800d22c:	015a      	lsls	r2, r3, #5
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	4413      	add	r3, r2
 800d232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d236:	691a      	ldr	r2, [r3, #16]
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d240:	69b9      	ldr	r1, [r7, #24]
 800d242:	0148      	lsls	r0, r1, #5
 800d244:	69f9      	ldr	r1, [r7, #28]
 800d246:	4401      	add	r1, r0
 800d248:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d24c:	4313      	orrs	r3, r2
 800d24e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	015a      	lsls	r2, r3, #5
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	4413      	add	r3, r2
 800d258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	69ba      	ldr	r2, [r7, #24]
 800d260:	0151      	lsls	r1, r2, #5
 800d262:	69fa      	ldr	r2, [r7, #28]
 800d264:	440a      	add	r2, r1
 800d266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d26a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d26e:	6113      	str	r3, [r2, #16]
 800d270:	e036      	b.n	800d2e0 <USB_EPStartXfer+0x3dc>
 800d272:	bf00      	nop
 800d274:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	695a      	ldr	r2, [r3, #20]
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	689b      	ldr	r3, [r3, #8]
 800d280:	4413      	add	r3, r2
 800d282:	1e5a      	subs	r2, r3, #1
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	689b      	ldr	r3, [r3, #8]
 800d288:	fbb2 f3f3 	udiv	r3, r2, r3
 800d28c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	015a      	lsls	r2, r3, #5
 800d292:	69fb      	ldr	r3, [r7, #28]
 800d294:	4413      	add	r3, r2
 800d296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d29a:	691a      	ldr	r2, [r3, #16]
 800d29c:	8afb      	ldrh	r3, [r7, #22]
 800d29e:	04d9      	lsls	r1, r3, #19
 800d2a0:	4b39      	ldr	r3, [pc, #228]	; (800d388 <USB_EPStartXfer+0x484>)
 800d2a2:	400b      	ands	r3, r1
 800d2a4:	69b9      	ldr	r1, [r7, #24]
 800d2a6:	0148      	lsls	r0, r1, #5
 800d2a8:	69f9      	ldr	r1, [r7, #28]
 800d2aa:	4401      	add	r1, r0
 800d2ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d2b4:	69bb      	ldr	r3, [r7, #24]
 800d2b6:	015a      	lsls	r2, r3, #5
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2c0:	691a      	ldr	r2, [r3, #16]
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	689b      	ldr	r3, [r3, #8]
 800d2c6:	8af9      	ldrh	r1, [r7, #22]
 800d2c8:	fb01 f303 	mul.w	r3, r1, r3
 800d2cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2d0:	69b9      	ldr	r1, [r7, #24]
 800d2d2:	0148      	lsls	r0, r1, #5
 800d2d4:	69f9      	ldr	r1, [r7, #28]
 800d2d6:	4401      	add	r1, r0
 800d2d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d2e0:	79fb      	ldrb	r3, [r7, #7]
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d10d      	bne.n	800d302 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d009      	beq.n	800d302 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	68d9      	ldr	r1, [r3, #12]
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	015a      	lsls	r2, r3, #5
 800d2f6:	69fb      	ldr	r3, [r7, #28]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2fe:	460a      	mov	r2, r1
 800d300:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	78db      	ldrb	r3, [r3, #3]
 800d306:	2b01      	cmp	r3, #1
 800d308:	d128      	bne.n	800d35c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d30a:	69fb      	ldr	r3, [r7, #28]
 800d30c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d310:	689b      	ldr	r3, [r3, #8]
 800d312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d316:	2b00      	cmp	r3, #0
 800d318:	d110      	bne.n	800d33c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d31a:	69bb      	ldr	r3, [r7, #24]
 800d31c:	015a      	lsls	r2, r3, #5
 800d31e:	69fb      	ldr	r3, [r7, #28]
 800d320:	4413      	add	r3, r2
 800d322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	69ba      	ldr	r2, [r7, #24]
 800d32a:	0151      	lsls	r1, r2, #5
 800d32c:	69fa      	ldr	r2, [r7, #28]
 800d32e:	440a      	add	r2, r1
 800d330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d334:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d338:	6013      	str	r3, [r2, #0]
 800d33a:	e00f      	b.n	800d35c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d33c:	69bb      	ldr	r3, [r7, #24]
 800d33e:	015a      	lsls	r2, r3, #5
 800d340:	69fb      	ldr	r3, [r7, #28]
 800d342:	4413      	add	r3, r2
 800d344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	69ba      	ldr	r2, [r7, #24]
 800d34c:	0151      	lsls	r1, r2, #5
 800d34e:	69fa      	ldr	r2, [r7, #28]
 800d350:	440a      	add	r2, r1
 800d352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d35a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	015a      	lsls	r2, r3, #5
 800d360:	69fb      	ldr	r3, [r7, #28]
 800d362:	4413      	add	r3, r2
 800d364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	69ba      	ldr	r2, [r7, #24]
 800d36c:	0151      	lsls	r1, r2, #5
 800d36e:	69fa      	ldr	r2, [r7, #28]
 800d370:	440a      	add	r2, r1
 800d372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d376:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d37a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d37c:	2300      	movs	r3, #0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3720      	adds	r7, #32
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	1ff80000 	.word	0x1ff80000

0800d38c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b087      	sub	sp, #28
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	4613      	mov	r3, r2
 800d398:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	785b      	ldrb	r3, [r3, #1]
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	f040 80cd 	bne.w	800d548 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	695b      	ldr	r3, [r3, #20]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d132      	bne.n	800d41c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	015a      	lsls	r2, r3, #5
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	4413      	add	r3, r2
 800d3be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3c2:	691b      	ldr	r3, [r3, #16]
 800d3c4:	693a      	ldr	r2, [r7, #16]
 800d3c6:	0151      	lsls	r1, r2, #5
 800d3c8:	697a      	ldr	r2, [r7, #20]
 800d3ca:	440a      	add	r2, r1
 800d3cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d3d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d3d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	015a      	lsls	r2, r3, #5
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	4413      	add	r3, r2
 800d3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3e6:	691b      	ldr	r3, [r3, #16]
 800d3e8:	693a      	ldr	r2, [r7, #16]
 800d3ea:	0151      	lsls	r1, r2, #5
 800d3ec:	697a      	ldr	r2, [r7, #20]
 800d3ee:	440a      	add	r2, r1
 800d3f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d3f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	015a      	lsls	r2, r3, #5
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	4413      	add	r3, r2
 800d402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d406:	691b      	ldr	r3, [r3, #16]
 800d408:	693a      	ldr	r2, [r7, #16]
 800d40a:	0151      	lsls	r1, r2, #5
 800d40c:	697a      	ldr	r2, [r7, #20]
 800d40e:	440a      	add	r2, r1
 800d410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d414:	0cdb      	lsrs	r3, r3, #19
 800d416:	04db      	lsls	r3, r3, #19
 800d418:	6113      	str	r3, [r2, #16]
 800d41a:	e04e      	b.n	800d4ba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	015a      	lsls	r2, r3, #5
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	4413      	add	r3, r2
 800d424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d428:	691b      	ldr	r3, [r3, #16]
 800d42a:	693a      	ldr	r2, [r7, #16]
 800d42c:	0151      	lsls	r1, r2, #5
 800d42e:	697a      	ldr	r2, [r7, #20]
 800d430:	440a      	add	r2, r1
 800d432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d436:	0cdb      	lsrs	r3, r3, #19
 800d438:	04db      	lsls	r3, r3, #19
 800d43a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	015a      	lsls	r2, r3, #5
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	4413      	add	r3, r2
 800d444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d448:	691b      	ldr	r3, [r3, #16]
 800d44a:	693a      	ldr	r2, [r7, #16]
 800d44c:	0151      	lsls	r1, r2, #5
 800d44e:	697a      	ldr	r2, [r7, #20]
 800d450:	440a      	add	r2, r1
 800d452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d456:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d45a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d45e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	695a      	ldr	r2, [r3, #20]
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	689b      	ldr	r3, [r3, #8]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d903      	bls.n	800d474 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	689a      	ldr	r2, [r3, #8]
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	015a      	lsls	r2, r3, #5
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	4413      	add	r3, r2
 800d47c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d480:	691b      	ldr	r3, [r3, #16]
 800d482:	693a      	ldr	r2, [r7, #16]
 800d484:	0151      	lsls	r1, r2, #5
 800d486:	697a      	ldr	r2, [r7, #20]
 800d488:	440a      	add	r2, r1
 800d48a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d48e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d492:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	015a      	lsls	r2, r3, #5
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	4413      	add	r3, r2
 800d49c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4a0:	691a      	ldr	r2, [r3, #16]
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	695b      	ldr	r3, [r3, #20]
 800d4a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4aa:	6939      	ldr	r1, [r7, #16]
 800d4ac:	0148      	lsls	r0, r1, #5
 800d4ae:	6979      	ldr	r1, [r7, #20]
 800d4b0:	4401      	add	r1, r0
 800d4b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d4ba:	79fb      	ldrb	r3, [r7, #7]
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d11e      	bne.n	800d4fe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	691b      	ldr	r3, [r3, #16]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d009      	beq.n	800d4dc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	015a      	lsls	r2, r3, #5
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	4413      	add	r3, r2
 800d4d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	691b      	ldr	r3, [r3, #16]
 800d4da:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	015a      	lsls	r2, r3, #5
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	4413      	add	r3, r2
 800d4e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	693a      	ldr	r2, [r7, #16]
 800d4ec:	0151      	lsls	r1, r2, #5
 800d4ee:	697a      	ldr	r2, [r7, #20]
 800d4f0:	440a      	add	r2, r1
 800d4f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d4fa:	6013      	str	r3, [r2, #0]
 800d4fc:	e092      	b.n	800d624 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	015a      	lsls	r2, r3, #5
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	4413      	add	r3, r2
 800d506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	693a      	ldr	r2, [r7, #16]
 800d50e:	0151      	lsls	r1, r2, #5
 800d510:	697a      	ldr	r2, [r7, #20]
 800d512:	440a      	add	r2, r1
 800d514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d518:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d51c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	695b      	ldr	r3, [r3, #20]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d07e      	beq.n	800d624 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d52c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	f003 030f 	and.w	r3, r3, #15
 800d536:	2101      	movs	r1, #1
 800d538:	fa01 f303 	lsl.w	r3, r1, r3
 800d53c:	6979      	ldr	r1, [r7, #20]
 800d53e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d542:	4313      	orrs	r3, r2
 800d544:	634b      	str	r3, [r1, #52]	; 0x34
 800d546:	e06d      	b.n	800d624 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	015a      	lsls	r2, r3, #5
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	4413      	add	r3, r2
 800d550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d554:	691b      	ldr	r3, [r3, #16]
 800d556:	693a      	ldr	r2, [r7, #16]
 800d558:	0151      	lsls	r1, r2, #5
 800d55a:	697a      	ldr	r2, [r7, #20]
 800d55c:	440a      	add	r2, r1
 800d55e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d562:	0cdb      	lsrs	r3, r3, #19
 800d564:	04db      	lsls	r3, r3, #19
 800d566:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	015a      	lsls	r2, r3, #5
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	4413      	add	r3, r2
 800d570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d574:	691b      	ldr	r3, [r3, #16]
 800d576:	693a      	ldr	r2, [r7, #16]
 800d578:	0151      	lsls	r1, r2, #5
 800d57a:	697a      	ldr	r2, [r7, #20]
 800d57c:	440a      	add	r2, r1
 800d57e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d582:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d586:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d58a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	695b      	ldr	r3, [r3, #20]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d003      	beq.n	800d59c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	689a      	ldr	r2, [r3, #8]
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	015a      	lsls	r2, r3, #5
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	4413      	add	r3, r2
 800d5a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5a8:	691b      	ldr	r3, [r3, #16]
 800d5aa:	693a      	ldr	r2, [r7, #16]
 800d5ac:	0151      	lsls	r1, r2, #5
 800d5ae:	697a      	ldr	r2, [r7, #20]
 800d5b0:	440a      	add	r2, r1
 800d5b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d5ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	015a      	lsls	r2, r3, #5
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5c8:	691a      	ldr	r2, [r3, #16]
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	689b      	ldr	r3, [r3, #8]
 800d5ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d5d2:	6939      	ldr	r1, [r7, #16]
 800d5d4:	0148      	lsls	r0, r1, #5
 800d5d6:	6979      	ldr	r1, [r7, #20]
 800d5d8:	4401      	add	r1, r0
 800d5da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d5e2:	79fb      	ldrb	r3, [r7, #7]
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d10d      	bne.n	800d604 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	68db      	ldr	r3, [r3, #12]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d009      	beq.n	800d604 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	68d9      	ldr	r1, [r3, #12]
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	015a      	lsls	r2, r3, #5
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	4413      	add	r3, r2
 800d5fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d600:	460a      	mov	r2, r1
 800d602:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	015a      	lsls	r2, r3, #5
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	4413      	add	r3, r2
 800d60c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	693a      	ldr	r2, [r7, #16]
 800d614:	0151      	lsls	r1, r2, #5
 800d616:	697a      	ldr	r2, [r7, #20]
 800d618:	440a      	add	r2, r1
 800d61a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d61e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d622:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d624:	2300      	movs	r3, #0
}
 800d626:	4618      	mov	r0, r3
 800d628:	371c      	adds	r7, #28
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr

0800d632 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d632:	b480      	push	{r7}
 800d634:	b089      	sub	sp, #36	; 0x24
 800d636:	af00      	add	r7, sp, #0
 800d638:	60f8      	str	r0, [r7, #12]
 800d63a:	60b9      	str	r1, [r7, #8]
 800d63c:	4611      	mov	r1, r2
 800d63e:	461a      	mov	r2, r3
 800d640:	460b      	mov	r3, r1
 800d642:	71fb      	strb	r3, [r7, #7]
 800d644:	4613      	mov	r3, r2
 800d646:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d650:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d654:	2b00      	cmp	r3, #0
 800d656:	d11a      	bne.n	800d68e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d658:	88bb      	ldrh	r3, [r7, #4]
 800d65a:	3303      	adds	r3, #3
 800d65c:	089b      	lsrs	r3, r3, #2
 800d65e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d660:	2300      	movs	r3, #0
 800d662:	61bb      	str	r3, [r7, #24]
 800d664:	e00f      	b.n	800d686 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d666:	79fb      	ldrb	r3, [r7, #7]
 800d668:	031a      	lsls	r2, r3, #12
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	4413      	add	r3, r2
 800d66e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d672:	461a      	mov	r2, r3
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d67a:	69fb      	ldr	r3, [r7, #28]
 800d67c:	3304      	adds	r3, #4
 800d67e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	3301      	adds	r3, #1
 800d684:	61bb      	str	r3, [r7, #24]
 800d686:	69ba      	ldr	r2, [r7, #24]
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d3eb      	bcc.n	800d666 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d68e:	2300      	movs	r3, #0
}
 800d690:	4618      	mov	r0, r3
 800d692:	3724      	adds	r7, #36	; 0x24
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr

0800d69c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b089      	sub	sp, #36	; 0x24
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d6b2:	88fb      	ldrh	r3, [r7, #6]
 800d6b4:	3303      	adds	r3, #3
 800d6b6:	089b      	lsrs	r3, r3, #2
 800d6b8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	61bb      	str	r3, [r7, #24]
 800d6be:	e00b      	b.n	800d6d8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	601a      	str	r2, [r3, #0]
    pDest++;
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	3304      	adds	r3, #4
 800d6d0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d6d2:	69bb      	ldr	r3, [r7, #24]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	61bb      	str	r3, [r7, #24]
 800d6d8:	69ba      	ldr	r2, [r7, #24]
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d3ef      	bcc.n	800d6c0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d6e0:	69fb      	ldr	r3, [r7, #28]
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3724      	adds	r7, #36	; 0x24
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr

0800d6ee <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d6ee:	b480      	push	{r7}
 800d6f0:	b085      	sub	sp, #20
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
 800d6f6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	785b      	ldrb	r3, [r3, #1]
 800d706:	2b01      	cmp	r3, #1
 800d708:	d12c      	bne.n	800d764 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	015a      	lsls	r2, r3, #5
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	4413      	add	r3, r2
 800d712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	db12      	blt.n	800d742 <USB_EPSetStall+0x54>
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d00f      	beq.n	800d742 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	015a      	lsls	r2, r3, #5
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	4413      	add	r3, r2
 800d72a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	68ba      	ldr	r2, [r7, #8]
 800d732:	0151      	lsls	r1, r2, #5
 800d734:	68fa      	ldr	r2, [r7, #12]
 800d736:	440a      	add	r2, r1
 800d738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d73c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d740:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	015a      	lsls	r2, r3, #5
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	4413      	add	r3, r2
 800d74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	68ba      	ldr	r2, [r7, #8]
 800d752:	0151      	lsls	r1, r2, #5
 800d754:	68fa      	ldr	r2, [r7, #12]
 800d756:	440a      	add	r2, r1
 800d758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d75c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d760:	6013      	str	r3, [r2, #0]
 800d762:	e02b      	b.n	800d7bc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	015a      	lsls	r2, r3, #5
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	4413      	add	r3, r2
 800d76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	db12      	blt.n	800d79c <USB_EPSetStall+0xae>
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00f      	beq.n	800d79c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	015a      	lsls	r2, r3, #5
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	4413      	add	r3, r2
 800d784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	68ba      	ldr	r2, [r7, #8]
 800d78c:	0151      	lsls	r1, r2, #5
 800d78e:	68fa      	ldr	r2, [r7, #12]
 800d790:	440a      	add	r2, r1
 800d792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d796:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d79a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	015a      	lsls	r2, r3, #5
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	4413      	add	r3, r2
 800d7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	68ba      	ldr	r2, [r7, #8]
 800d7ac:	0151      	lsls	r1, r2, #5
 800d7ae:	68fa      	ldr	r2, [r7, #12]
 800d7b0:	440a      	add	r2, r1
 800d7b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d7ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d7bc:	2300      	movs	r3, #0
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3714      	adds	r7, #20
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr

0800d7ca <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d7ca:	b480      	push	{r7}
 800d7cc:	b085      	sub	sp, #20
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
 800d7d2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	785b      	ldrb	r3, [r3, #1]
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d128      	bne.n	800d838 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	015a      	lsls	r2, r3, #5
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	68ba      	ldr	r2, [r7, #8]
 800d7f6:	0151      	lsls	r1, r2, #5
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	440a      	add	r2, r1
 800d7fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d800:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d804:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	78db      	ldrb	r3, [r3, #3]
 800d80a:	2b03      	cmp	r3, #3
 800d80c:	d003      	beq.n	800d816 <USB_EPClearStall+0x4c>
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	78db      	ldrb	r3, [r3, #3]
 800d812:	2b02      	cmp	r3, #2
 800d814:	d138      	bne.n	800d888 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	015a      	lsls	r2, r3, #5
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	4413      	add	r3, r2
 800d81e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	68ba      	ldr	r2, [r7, #8]
 800d826:	0151      	lsls	r1, r2, #5
 800d828:	68fa      	ldr	r2, [r7, #12]
 800d82a:	440a      	add	r2, r1
 800d82c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d834:	6013      	str	r3, [r2, #0]
 800d836:	e027      	b.n	800d888 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	015a      	lsls	r2, r3, #5
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	4413      	add	r3, r2
 800d840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	68ba      	ldr	r2, [r7, #8]
 800d848:	0151      	lsls	r1, r2, #5
 800d84a:	68fa      	ldr	r2, [r7, #12]
 800d84c:	440a      	add	r2, r1
 800d84e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d852:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d856:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	78db      	ldrb	r3, [r3, #3]
 800d85c:	2b03      	cmp	r3, #3
 800d85e:	d003      	beq.n	800d868 <USB_EPClearStall+0x9e>
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	78db      	ldrb	r3, [r3, #3]
 800d864:	2b02      	cmp	r3, #2
 800d866:	d10f      	bne.n	800d888 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	015a      	lsls	r2, r3, #5
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	4413      	add	r3, r2
 800d870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	68ba      	ldr	r2, [r7, #8]
 800d878:	0151      	lsls	r1, r2, #5
 800d87a:	68fa      	ldr	r2, [r7, #12]
 800d87c:	440a      	add	r2, r1
 800d87e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d886:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d888:	2300      	movs	r3, #0
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3714      	adds	r7, #20
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr

0800d896 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d896:	b480      	push	{r7}
 800d898:	b085      	sub	sp, #20
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
 800d89e:	460b      	mov	r3, r1
 800d8a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	68fa      	ldr	r2, [r7, #12]
 800d8b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d8b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d8b8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	78fb      	ldrb	r3, [r7, #3]
 800d8c4:	011b      	lsls	r3, r3, #4
 800d8c6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d8ca:	68f9      	ldr	r1, [r7, #12]
 800d8cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3714      	adds	r7, #20
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr

0800d8e2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d8e2:	b580      	push	{r7, lr}
 800d8e4:	b084      	sub	sp, #16
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d8fc:	f023 0302 	bic.w	r3, r3, #2
 800d900:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d902:	2003      	movs	r0, #3
 800d904:	f7f7 fe98 	bl	8005638 <HAL_Delay>

  return HAL_OK;
 800d908:	2300      	movs	r3, #0
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3710      	adds	r7, #16
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}

0800d912 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b084      	sub	sp, #16
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	68fa      	ldr	r2, [r7, #12]
 800d928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d92c:	f043 0302 	orr.w	r3, r3, #2
 800d930:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d932:	2003      	movs	r0, #3
 800d934:	f7f7 fe80 	bl	8005638 <HAL_Delay>

  return HAL_OK;
 800d938:	2300      	movs	r3, #0
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3710      	adds	r7, #16
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}

0800d942 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d942:	b480      	push	{r7}
 800d944:	b085      	sub	sp, #20
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	695b      	ldr	r3, [r3, #20]
 800d94e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	699b      	ldr	r3, [r3, #24]
 800d954:	68fa      	ldr	r2, [r7, #12]
 800d956:	4013      	ands	r3, r2
 800d958:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d95a:	68fb      	ldr	r3, [r7, #12]
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3714      	adds	r7, #20
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr

0800d968 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d968:	b480      	push	{r7}
 800d96a:	b085      	sub	sp, #20
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d97a:	699b      	ldr	r3, [r3, #24]
 800d97c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d984:	69db      	ldr	r3, [r3, #28]
 800d986:	68ba      	ldr	r2, [r7, #8]
 800d988:	4013      	ands	r3, r2
 800d98a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	0c1b      	lsrs	r3, r3, #16
}
 800d990:	4618      	mov	r0, r3
 800d992:	3714      	adds	r7, #20
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr

0800d99c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b085      	sub	sp, #20
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9ae:	699b      	ldr	r3, [r3, #24]
 800d9b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9b8:	69db      	ldr	r3, [r3, #28]
 800d9ba:	68ba      	ldr	r2, [r7, #8]
 800d9bc:	4013      	ands	r3, r2
 800d9be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	b29b      	uxth	r3, r3
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b085      	sub	sp, #20
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	460b      	mov	r3, r1
 800d9da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d9e0:	78fb      	ldrb	r3, [r7, #3]
 800d9e2:	015a      	lsls	r2, r3, #5
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	4413      	add	r3, r2
 800d9e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9ec:	689b      	ldr	r3, [r3, #8]
 800d9ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9f6:	695b      	ldr	r3, [r3, #20]
 800d9f8:	68ba      	ldr	r2, [r7, #8]
 800d9fa:	4013      	ands	r3, r2
 800d9fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d9fe:	68bb      	ldr	r3, [r7, #8]
}
 800da00:	4618      	mov	r0, r3
 800da02:	3714      	adds	r7, #20
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr

0800da0c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b087      	sub	sp, #28
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	460b      	mov	r3, r1
 800da16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da22:	691b      	ldr	r3, [r3, #16]
 800da24:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da2e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800da30:	78fb      	ldrb	r3, [r7, #3]
 800da32:	f003 030f 	and.w	r3, r3, #15
 800da36:	68fa      	ldr	r2, [r7, #12]
 800da38:	fa22 f303 	lsr.w	r3, r2, r3
 800da3c:	01db      	lsls	r3, r3, #7
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	693a      	ldr	r2, [r7, #16]
 800da42:	4313      	orrs	r3, r2
 800da44:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800da46:	78fb      	ldrb	r3, [r7, #3]
 800da48:	015a      	lsls	r2, r3, #5
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	4413      	add	r3, r2
 800da4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da52:	689b      	ldr	r3, [r3, #8]
 800da54:	693a      	ldr	r2, [r7, #16]
 800da56:	4013      	ands	r3, r2
 800da58:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800da5a:	68bb      	ldr	r3, [r7, #8]
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	371c      	adds	r7, #28
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr

0800da68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800da68:	b480      	push	{r7}
 800da6a:	b083      	sub	sp, #12
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	695b      	ldr	r3, [r3, #20]
 800da74:	f003 0301 	and.w	r3, r3, #1
}
 800da78:	4618      	mov	r0, r3
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800da84:	b480      	push	{r7}
 800da86:	b085      	sub	sp, #20
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	68fa      	ldr	r2, [r7, #12]
 800da9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da9e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800daa2:	f023 0307 	bic.w	r3, r3, #7
 800daa6:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daae:	689b      	ldr	r3, [r3, #8]
 800dab0:	f003 0306 	and.w	r3, r3, #6
 800dab4:	2b04      	cmp	r3, #4
 800dab6:	d109      	bne.n	800dacc <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dac6:	f043 0303 	orr.w	r3, r3, #3
 800daca:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	68fa      	ldr	r2, [r7, #12]
 800dad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dade:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3714      	adds	r7, #20
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr
	...

0800daf0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b087      	sub	sp, #28
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	460b      	mov	r3, r1
 800dafa:	607a      	str	r2, [r7, #4]
 800dafc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	333c      	adds	r3, #60	; 0x3c
 800db06:	3304      	adds	r3, #4
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	4a26      	ldr	r2, [pc, #152]	; (800dba8 <USB_EP0_OutStart+0xb8>)
 800db10:	4293      	cmp	r3, r2
 800db12:	d90a      	bls.n	800db2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db24:	d101      	bne.n	800db2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800db26:	2300      	movs	r3, #0
 800db28:	e037      	b.n	800db9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db30:	461a      	mov	r2, r3
 800db32:	2300      	movs	r3, #0
 800db34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db3c:	691b      	ldr	r3, [r3, #16]
 800db3e:	697a      	ldr	r2, [r7, #20]
 800db40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db50:	691b      	ldr	r3, [r3, #16]
 800db52:	697a      	ldr	r2, [r7, #20]
 800db54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db58:	f043 0318 	orr.w	r3, r3, #24
 800db5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db64:	691b      	ldr	r3, [r3, #16]
 800db66:	697a      	ldr	r2, [r7, #20]
 800db68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800db70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800db72:	7afb      	ldrb	r3, [r7, #11]
 800db74:	2b01      	cmp	r3, #1
 800db76:	d10f      	bne.n	800db98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db7e:	461a      	mov	r2, r3
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	697a      	ldr	r2, [r7, #20]
 800db8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800db96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db98:	2300      	movs	r3, #0
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	371c      	adds	r7, #28
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	4f54300a 	.word	0x4f54300a

0800dbac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b085      	sub	sp, #20
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	3301      	adds	r3, #1
 800dbbc:	60fb      	str	r3, [r7, #12]
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	4a13      	ldr	r2, [pc, #76]	; (800dc10 <USB_CoreReset+0x64>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d901      	bls.n	800dbca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dbc6:	2303      	movs	r3, #3
 800dbc8:	e01b      	b.n	800dc02 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	691b      	ldr	r3, [r3, #16]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	daf2      	bge.n	800dbb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	691b      	ldr	r3, [r3, #16]
 800dbda:	f043 0201 	orr.w	r2, r3, #1
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	60fb      	str	r3, [r7, #12]
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	4a09      	ldr	r2, [pc, #36]	; (800dc10 <USB_CoreReset+0x64>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d901      	bls.n	800dbf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dbf0:	2303      	movs	r3, #3
 800dbf2:	e006      	b.n	800dc02 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	691b      	ldr	r3, [r3, #16]
 800dbf8:	f003 0301 	and.w	r3, r3, #1
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d0f0      	beq.n	800dbe2 <USB_CoreReset+0x36>

  return HAL_OK;
 800dc00:	2300      	movs	r3, #0
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3714      	adds	r7, #20
 800dc06:	46bd      	mov	sp, r7
 800dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0c:	4770      	bx	lr
 800dc0e:	bf00      	nop
 800dc10:	00030d40 	.word	0x00030d40

0800dc14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800dc20:	2300      	movs	r3, #0
 800dc22:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	7c1b      	ldrb	r3, [r3, #16]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d115      	bne.n	800dc58 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dc2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc30:	2202      	movs	r2, #2
 800dc32:	2181      	movs	r1, #129	; 0x81
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f006 fcfe 	bl	8014636 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dc40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc44:	2202      	movs	r2, #2
 800dc46:	2101      	movs	r1, #1
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f006 fcf4 	bl	8014636 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2201      	movs	r2, #1
 800dc52:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800dc56:	e012      	b.n	800dc7e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dc58:	2340      	movs	r3, #64	; 0x40
 800dc5a:	2202      	movs	r2, #2
 800dc5c:	2181      	movs	r1, #129	; 0x81
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f006 fce9 	bl	8014636 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2201      	movs	r2, #1
 800dc68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dc6a:	2340      	movs	r3, #64	; 0x40
 800dc6c:	2202      	movs	r2, #2
 800dc6e:	2101      	movs	r1, #1
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f006 fce0 	bl	8014636 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2201      	movs	r2, #1
 800dc7a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dc7e:	2308      	movs	r3, #8
 800dc80:	2203      	movs	r2, #3
 800dc82:	2182      	movs	r1, #130	; 0x82
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f006 fcd6 	bl	8014636 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800dc90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dc94:	f006 ff8e 	bl	8014bb4 <malloc>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d102      	bne.n	800dcb2 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800dcac:	2301      	movs	r3, #1
 800dcae:	73fb      	strb	r3, [r7, #15]
 800dcb0:	e026      	b.n	800dd00 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dcb8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	7c1b      	ldrb	r3, [r3, #16]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d109      	bne.n	800dcf0 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dce6:	2101      	movs	r1, #1
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f006 fd95 	bl	8014818 <USBD_LL_PrepareReceive>
 800dcee:	e007      	b.n	800dd00 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dcf6:	2340      	movs	r3, #64	; 0x40
 800dcf8:	2101      	movs	r1, #1
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f006 fd8c 	bl	8014818 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800dd00:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3710      	adds	r7, #16
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b084      	sub	sp, #16
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
 800dd12:	460b      	mov	r3, r1
 800dd14:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800dd16:	2300      	movs	r3, #0
 800dd18:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800dd1a:	2181      	movs	r1, #129	; 0x81
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f006 fcb0 	bl	8014682 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2200      	movs	r2, #0
 800dd26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800dd28:	2101      	movs	r1, #1
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f006 fca9 	bl	8014682 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2200      	movs	r2, #0
 800dd34:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800dd38:	2182      	movs	r1, #130	; 0x82
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f006 fca1 	bl	8014682 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d00e      	beq.n	800dd6e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dd60:	4618      	mov	r0, r3
 800dd62:	f006 ff2f 	bl	8014bc4 <free>
    pdev->pClassData = NULL;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800dd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3710      	adds	r7, #16
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b086      	sub	sp, #24
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dd88:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800dd92:	2300      	movs	r3, #0
 800dd94:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d039      	beq.n	800de16 <USBD_CDC_Setup+0x9e>
 800dda2:	2b20      	cmp	r3, #32
 800dda4:	d17c      	bne.n	800dea0 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	88db      	ldrh	r3, [r3, #6]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d029      	beq.n	800de02 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	b25b      	sxtb	r3, r3
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	da11      	bge.n	800dddc <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	683a      	ldr	r2, [r7, #0]
 800ddc2:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800ddc4:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ddc6:	683a      	ldr	r2, [r7, #0]
 800ddc8:	88d2      	ldrh	r2, [r2, #6]
 800ddca:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ddcc:	6939      	ldr	r1, [r7, #16]
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	88db      	ldrh	r3, [r3, #6]
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f001 f9c9 	bl	800f16c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800ddda:	e068      	b.n	800deae <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	785a      	ldrb	r2, [r3, #1]
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	88db      	ldrh	r3, [r3, #6]
 800ddea:	b2da      	uxtb	r2, r3
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ddf2:	6939      	ldr	r1, [r7, #16]
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	88db      	ldrh	r3, [r3, #6]
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f001 f9e4 	bl	800f1c8 <USBD_CtlPrepareRx>
    break;
 800de00:	e055      	b.n	800deae <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800de08:	689b      	ldr	r3, [r3, #8]
 800de0a:	683a      	ldr	r2, [r7, #0]
 800de0c:	7850      	ldrb	r0, [r2, #1]
 800de0e:	2200      	movs	r2, #0
 800de10:	6839      	ldr	r1, [r7, #0]
 800de12:	4798      	blx	r3
    break;
 800de14:	e04b      	b.n	800deae <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	785b      	ldrb	r3, [r3, #1]
 800de1a:	2b0a      	cmp	r3, #10
 800de1c:	d017      	beq.n	800de4e <USBD_CDC_Setup+0xd6>
 800de1e:	2b0b      	cmp	r3, #11
 800de20:	d029      	beq.n	800de76 <USBD_CDC_Setup+0xfe>
 800de22:	2b00      	cmp	r3, #0
 800de24:	d133      	bne.n	800de8e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800de2c:	2b03      	cmp	r3, #3
 800de2e:	d107      	bne.n	800de40 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800de30:	f107 030c 	add.w	r3, r7, #12
 800de34:	2202      	movs	r2, #2
 800de36:	4619      	mov	r1, r3
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f001 f997 	bl	800f16c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800de3e:	e02e      	b.n	800de9e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800de40:	6839      	ldr	r1, [r7, #0]
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f001 f927 	bl	800f096 <USBD_CtlError>
			  ret = USBD_FAIL;
 800de48:	2302      	movs	r3, #2
 800de4a:	75fb      	strb	r3, [r7, #23]
      break;
 800de4c:	e027      	b.n	800de9e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800de54:	2b03      	cmp	r3, #3
 800de56:	d107      	bne.n	800de68 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800de58:	f107 030f 	add.w	r3, r7, #15
 800de5c:	2201      	movs	r2, #1
 800de5e:	4619      	mov	r1, r3
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f001 f983 	bl	800f16c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800de66:	e01a      	b.n	800de9e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800de68:	6839      	ldr	r1, [r7, #0]
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f001 f913 	bl	800f096 <USBD_CtlError>
			  ret = USBD_FAIL;
 800de70:	2302      	movs	r3, #2
 800de72:	75fb      	strb	r3, [r7, #23]
      break;
 800de74:	e013      	b.n	800de9e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800de7c:	2b03      	cmp	r3, #3
 800de7e:	d00d      	beq.n	800de9c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800de80:	6839      	ldr	r1, [r7, #0]
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f001 f907 	bl	800f096 <USBD_CtlError>
			  ret = USBD_FAIL;
 800de88:	2302      	movs	r3, #2
 800de8a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800de8c:	e006      	b.n	800de9c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800de8e:	6839      	ldr	r1, [r7, #0]
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f001 f900 	bl	800f096 <USBD_CtlError>
      ret = USBD_FAIL;
 800de96:	2302      	movs	r3, #2
 800de98:	75fb      	strb	r3, [r7, #23]
      break;
 800de9a:	e000      	b.n	800de9e <USBD_CDC_Setup+0x126>
      break;
 800de9c:	bf00      	nop
    }
    break;
 800de9e:	e006      	b.n	800deae <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800dea0:	6839      	ldr	r1, [r7, #0]
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f001 f8f7 	bl	800f096 <USBD_CtlError>
    ret = USBD_FAIL;
 800dea8:	2302      	movs	r3, #2
 800deaa:	75fb      	strb	r3, [r7, #23]
    break;
 800deac:	bf00      	nop
  }

  return ret;
 800deae:	7dfb      	ldrb	r3, [r7, #23]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3718      	adds	r7, #24
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	460b      	mov	r3, r1
 800dec2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800deca:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ded2:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d03a      	beq.n	800df54 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800dede:	78fa      	ldrb	r2, [r7, #3]
 800dee0:	6879      	ldr	r1, [r7, #4]
 800dee2:	4613      	mov	r3, r2
 800dee4:	009b      	lsls	r3, r3, #2
 800dee6:	4413      	add	r3, r2
 800dee8:	009b      	lsls	r3, r3, #2
 800deea:	440b      	add	r3, r1
 800deec:	331c      	adds	r3, #28
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d029      	beq.n	800df48 <USBD_CDC_DataIn+0x90>
 800def4:	78fa      	ldrb	r2, [r7, #3]
 800def6:	6879      	ldr	r1, [r7, #4]
 800def8:	4613      	mov	r3, r2
 800defa:	009b      	lsls	r3, r3, #2
 800defc:	4413      	add	r3, r2
 800defe:	009b      	lsls	r3, r3, #2
 800df00:	440b      	add	r3, r1
 800df02:	331c      	adds	r3, #28
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	78f9      	ldrb	r1, [r7, #3]
 800df08:	68b8      	ldr	r0, [r7, #8]
 800df0a:	460b      	mov	r3, r1
 800df0c:	00db      	lsls	r3, r3, #3
 800df0e:	1a5b      	subs	r3, r3, r1
 800df10:	009b      	lsls	r3, r3, #2
 800df12:	4403      	add	r3, r0
 800df14:	3344      	adds	r3, #68	; 0x44
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	fbb2 f1f3 	udiv	r1, r2, r3
 800df1c:	fb03 f301 	mul.w	r3, r3, r1
 800df20:	1ad3      	subs	r3, r2, r3
 800df22:	2b00      	cmp	r3, #0
 800df24:	d110      	bne.n	800df48 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800df26:	78fa      	ldrb	r2, [r7, #3]
 800df28:	6879      	ldr	r1, [r7, #4]
 800df2a:	4613      	mov	r3, r2
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	440b      	add	r3, r1
 800df34:	331c      	adds	r3, #28
 800df36:	2200      	movs	r2, #0
 800df38:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800df3a:	78f9      	ldrb	r1, [r7, #3]
 800df3c:	2300      	movs	r3, #0
 800df3e:	2200      	movs	r2, #0
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f006 fc46 	bl	80147d2 <USBD_LL_Transmit>
 800df46:	e003      	b.n	800df50 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2200      	movs	r2, #0
 800df4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800df50:	2300      	movs	r3, #0
 800df52:	e000      	b.n	800df56 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800df54:	2302      	movs	r3, #2
  }
}
 800df56:	4618      	mov	r0, r3
 800df58:	3710      	adds	r7, #16
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}

0800df5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800df5e:	b580      	push	{r7, lr}
 800df60:	b084      	sub	sp, #16
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
 800df66:	460b      	mov	r3, r1
 800df68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800df70:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800df72:	78fb      	ldrb	r3, [r7, #3]
 800df74:	4619      	mov	r1, r3
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f006 fc71 	bl	801485e <USBD_LL_GetRxDataSize>
 800df7c:	4602      	mov	r2, r0
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d00d      	beq.n	800dfaa <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	68fa      	ldr	r2, [r7, #12]
 800df98:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800dfa2:	4611      	mov	r1, r2
 800dfa4:	4798      	blx	r3

    return USBD_OK;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	e000      	b.n	800dfac <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800dfaa:	2302      	movs	r3, #2
  }
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3710      	adds	r7, #16
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dfc2:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d015      	beq.n	800dffa <USBD_CDC_EP0_RxReady+0x46>
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800dfd4:	2bff      	cmp	r3, #255	; 0xff
 800dfd6:	d010      	beq.n	800dffa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dfde:	689b      	ldr	r3, [r3, #8]
 800dfe0:	68fa      	ldr	r2, [r7, #12]
 800dfe2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800dfe6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800dfe8:	68fa      	ldr	r2, [r7, #12]
 800dfea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800dfee:	b292      	uxth	r2, r2
 800dff0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	22ff      	movs	r2, #255	; 0xff
 800dff6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800dffa:	2300      	movs	r3, #0
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3710      	adds	r7, #16
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2243      	movs	r2, #67	; 0x43
 800e010:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800e012:	4b03      	ldr	r3, [pc, #12]	; (800e020 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e014:	4618      	mov	r0, r3
 800e016:	370c      	adds	r7, #12
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr
 800e020:	20000090 	.word	0x20000090

0800e024 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2243      	movs	r2, #67	; 0x43
 800e030:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800e032:	4b03      	ldr	r3, [pc, #12]	; (800e040 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e034:	4618      	mov	r0, r3
 800e036:	370c      	adds	r7, #12
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr
 800e040:	2000004c 	.word	0x2000004c

0800e044 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800e044:	b480      	push	{r7}
 800e046:	b083      	sub	sp, #12
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2243      	movs	r2, #67	; 0x43
 800e050:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800e052:	4b03      	ldr	r3, [pc, #12]	; (800e060 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e054:	4618      	mov	r0, r3
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr
 800e060:	200000d4 	.word	0x200000d4

0800e064 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	220a      	movs	r2, #10
 800e070:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800e072:	4b03      	ldr	r3, [pc, #12]	; (800e080 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e074:	4618      	mov	r0, r3
 800e076:	370c      	adds	r7, #12
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr
 800e080:	20000008 	.word	0x20000008

0800e084 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800e084:	b480      	push	{r7}
 800e086:	b085      	sub	sp, #20
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800e08e:	2302      	movs	r3, #2
 800e090:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d005      	beq.n	800e0a4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	683a      	ldr	r2, [r7, #0]
 800e09c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3714      	adds	r7, #20
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr

0800e0b2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800e0b2:	b480      	push	{r7}
 800e0b4:	b087      	sub	sp, #28
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	60f8      	str	r0, [r7, #12]
 800e0ba:	60b9      	str	r1, [r7, #8]
 800e0bc:	4613      	mov	r3, r2
 800e0be:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e0c6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	68ba      	ldr	r2, [r7, #8]
 800e0cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e0d0:	88fa      	ldrh	r2, [r7, #6]
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800e0d8:	2300      	movs	r3, #0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	371c      	adds	r7, #28
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr

0800e0e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800e0e6:	b480      	push	{r7}
 800e0e8:	b085      	sub	sp, #20
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
 800e0ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e0f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	683a      	ldr	r2, [r7, #0]
 800e0fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800e100:	2300      	movs	r3, #0
}
 800e102:	4618      	mov	r0, r3
 800e104:	3714      	adds	r7, #20
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr

0800e10e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e10e:	b580      	push	{r7, lr}
 800e110:	b084      	sub	sp, #16
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e11c:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e124:	2b00      	cmp	r3, #0
 800e126:	d01c      	beq.n	800e162 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d115      	bne.n	800e15e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2201      	movs	r2, #1
 800e136:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800e150:	b29b      	uxth	r3, r3
 800e152:	2181      	movs	r1, #129	; 0x81
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f006 fb3c 	bl	80147d2 <USBD_LL_Transmit>

      return USBD_OK;
 800e15a:	2300      	movs	r3, #0
 800e15c:	e002      	b.n	800e164 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800e15e:	2301      	movs	r3, #1
 800e160:	e000      	b.n	800e164 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800e162:	2302      	movs	r3, #2
  }
}
 800e164:	4618      	mov	r0, r3
 800e166:	3710      	adds	r7, #16
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b084      	sub	sp, #16
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e17a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e182:	2b00      	cmp	r3, #0
 800e184:	d017      	beq.n	800e1b6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	7c1b      	ldrb	r3, [r3, #16]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d109      	bne.n	800e1a2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e194:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e198:	2101      	movs	r1, #1
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f006 fb3c 	bl	8014818 <USBD_LL_PrepareReceive>
 800e1a0:	e007      	b.n	800e1b2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e1a8:	2340      	movs	r3, #64	; 0x40
 800e1aa:	2101      	movs	r1, #1
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f006 fb33 	bl	8014818 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	e000      	b.n	800e1b8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800e1b6:	2302      	movs	r3, #2
  }
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3710      	adds	r7, #16
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b084      	sub	sp, #16
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	60f8      	str	r0, [r7, #12]
 800e1c8:	60b9      	str	r1, [r7, #8]
 800e1ca:	4613      	mov	r3, r2
 800e1cc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d101      	bne.n	800e1d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e1d4:	2302      	movs	r3, #2
 800e1d6:	e01a      	b.n	800e20e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d003      	beq.n	800e1ea <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d003      	beq.n	800e1f8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	68ba      	ldr	r2, [r7, #8]
 800e1f4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	79fa      	ldrb	r2, [r7, #7]
 800e204:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800e206:	68f8      	ldr	r0, [r7, #12]
 800e208:	f006 f9ae 	bl	8014568 <USBD_LL_Init>

  return USBD_OK;
 800e20c:	2300      	movs	r3, #0
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e216:	b480      	push	{r7}
 800e218:	b085      	sub	sp, #20
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
 800e21e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800e220:	2300      	movs	r3, #0
 800e222:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d006      	beq.n	800e238 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	683a      	ldr	r2, [r7, #0]
 800e22e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800e232:	2300      	movs	r3, #0
 800e234:	73fb      	strb	r3, [r7, #15]
 800e236:	e001      	b.n	800e23c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800e238:	2302      	movs	r3, #2
 800e23a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3714      	adds	r7, #20
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr

0800e24a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800e24a:	b580      	push	{r7, lr}
 800e24c:	b082      	sub	sp, #8
 800e24e:	af00      	add	r7, sp, #0
 800e250:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f006 f9d4 	bl	8014600 <USBD_LL_Start>

  return USBD_OK;
 800e258:	2300      	movs	r3, #0
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3708      	adds	r7, #8
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800e262:	b480      	push	{r7}
 800e264:	b083      	sub	sp, #12
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e26a:	2300      	movs	r3, #0
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	370c      	adds	r7, #12
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	460b      	mov	r3, r1
 800e282:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800e284:	2302      	movs	r3, #2
 800e286:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d00c      	beq.n	800e2ac <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	78fa      	ldrb	r2, [r7, #3]
 800e29c:	4611      	mov	r1, r2
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	4798      	blx	r3
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d101      	bne.n	800e2ac <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800e2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3710      	adds	r7, #16
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}

0800e2b6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e2b6:	b580      	push	{r7, lr}
 800e2b8:	b082      	sub	sp, #8
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
 800e2be:	460b      	mov	r3, r1
 800e2c0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	78fa      	ldrb	r2, [r7, #3]
 800e2cc:	4611      	mov	r1, r2
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	4798      	blx	r3
  return USBD_OK;
 800e2d2:	2300      	movs	r3, #0
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3708      	adds	r7, #8
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e2ec:	6839      	ldr	r1, [r7, #0]
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f000 fe94 	bl	800f01c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800e302:	461a      	mov	r2, r3
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800e310:	f003 031f 	and.w	r3, r3, #31
 800e314:	2b01      	cmp	r3, #1
 800e316:	d00c      	beq.n	800e332 <USBD_LL_SetupStage+0x56>
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d302      	bcc.n	800e322 <USBD_LL_SetupStage+0x46>
 800e31c:	2b02      	cmp	r3, #2
 800e31e:	d010      	beq.n	800e342 <USBD_LL_SetupStage+0x66>
 800e320:	e017      	b.n	800e352 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e328:	4619      	mov	r1, r3
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 fa04 	bl	800e738 <USBD_StdDevReq>
    break;
 800e330:	e01a      	b.n	800e368 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e338:	4619      	mov	r1, r3
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 fa66 	bl	800e80c <USBD_StdItfReq>
    break;
 800e340:	e012      	b.n	800e368 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e348:	4619      	mov	r1, r3
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 faa4 	bl	800e898 <USBD_StdEPReq>
    break;
 800e350:	e00a      	b.n	800e368 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800e358:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e35c:	b2db      	uxtb	r3, r3
 800e35e:	4619      	mov	r1, r3
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f006 f9ad 	bl	80146c0 <USBD_LL_StallEP>
    break;
 800e366:	bf00      	nop
  }

  return USBD_OK;
 800e368:	2300      	movs	r3, #0
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3708      	adds	r7, #8
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e372:	b580      	push	{r7, lr}
 800e374:	b086      	sub	sp, #24
 800e376:	af00      	add	r7, sp, #0
 800e378:	60f8      	str	r0, [r7, #12]
 800e37a:	460b      	mov	r3, r1
 800e37c:	607a      	str	r2, [r7, #4]
 800e37e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800e380:	7afb      	ldrb	r3, [r7, #11]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d14b      	bne.n	800e41e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800e38c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e394:	2b03      	cmp	r3, #3
 800e396:	d134      	bne.n	800e402 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	68da      	ldr	r2, [r3, #12]
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	691b      	ldr	r3, [r3, #16]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d919      	bls.n	800e3d8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	68da      	ldr	r2, [r3, #12]
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	691b      	ldr	r3, [r3, #16]
 800e3ac:	1ad2      	subs	r2, r2, r3
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	68da      	ldr	r2, [r3, #12]
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d203      	bcs.n	800e3c6 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	e002      	b.n	800e3cc <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	6879      	ldr	r1, [r7, #4]
 800e3d0:	68f8      	ldr	r0, [r7, #12]
 800e3d2:	f000 ff17 	bl	800f204 <USBD_CtlContinueRx>
 800e3d6:	e038      	b.n	800e44a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e3de:	691b      	ldr	r3, [r3, #16]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d00a      	beq.n	800e3fa <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800e3ea:	2b03      	cmp	r3, #3
 800e3ec:	d105      	bne.n	800e3fa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e3f4:	691b      	ldr	r3, [r3, #16]
 800e3f6:	68f8      	ldr	r0, [r7, #12]
 800e3f8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800e3fa:	68f8      	ldr	r0, [r7, #12]
 800e3fc:	f000 ff14 	bl	800f228 <USBD_CtlSendStatus>
 800e400:	e023      	b.n	800e44a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e408:	2b05      	cmp	r3, #5
 800e40a:	d11e      	bne.n	800e44a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	2200      	movs	r2, #0
 800e410:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800e414:	2100      	movs	r1, #0
 800e416:	68f8      	ldr	r0, [r7, #12]
 800e418:	f006 f952 	bl	80146c0 <USBD_LL_StallEP>
 800e41c:	e015      	b.n	800e44a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e424:	699b      	ldr	r3, [r3, #24]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d00d      	beq.n	800e446 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800e430:	2b03      	cmp	r3, #3
 800e432:	d108      	bne.n	800e446 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e43a:	699b      	ldr	r3, [r3, #24]
 800e43c:	7afa      	ldrb	r2, [r7, #11]
 800e43e:	4611      	mov	r1, r2
 800e440:	68f8      	ldr	r0, [r7, #12]
 800e442:	4798      	blx	r3
 800e444:	e001      	b.n	800e44a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e446:	2302      	movs	r3, #2
 800e448:	e000      	b.n	800e44c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800e44a:	2300      	movs	r3, #0
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3718      	adds	r7, #24
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b086      	sub	sp, #24
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	460b      	mov	r3, r1
 800e45e:	607a      	str	r2, [r7, #4]
 800e460:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800e462:	7afb      	ldrb	r3, [r7, #11]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d17f      	bne.n	800e568 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	3314      	adds	r3, #20
 800e46c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e474:	2b02      	cmp	r3, #2
 800e476:	d15c      	bne.n	800e532 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	68da      	ldr	r2, [r3, #12]
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	691b      	ldr	r3, [r3, #16]
 800e480:	429a      	cmp	r2, r3
 800e482:	d915      	bls.n	800e4b0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	68da      	ldr	r2, [r3, #12]
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	691b      	ldr	r3, [r3, #16]
 800e48c:	1ad2      	subs	r2, r2, r3
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	68db      	ldr	r3, [r3, #12]
 800e496:	b29b      	uxth	r3, r3
 800e498:	461a      	mov	r2, r3
 800e49a:	6879      	ldr	r1, [r7, #4]
 800e49c:	68f8      	ldr	r0, [r7, #12]
 800e49e:	f000 fe81 	bl	800f1a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	2100      	movs	r1, #0
 800e4a8:	68f8      	ldr	r0, [r7, #12]
 800e4aa:	f006 f9b5 	bl	8014818 <USBD_LL_PrepareReceive>
 800e4ae:	e04e      	b.n	800e54e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	689b      	ldr	r3, [r3, #8]
 800e4b4:	697a      	ldr	r2, [r7, #20]
 800e4b6:	6912      	ldr	r2, [r2, #16]
 800e4b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e4bc:	fb02 f201 	mul.w	r2, r2, r1
 800e4c0:	1a9b      	subs	r3, r3, r2
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d11c      	bne.n	800e500 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	689a      	ldr	r2, [r3, #8]
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d316      	bcc.n	800e500 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	689a      	ldr	r2, [r3, #8]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d20f      	bcs.n	800e500 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	2100      	movs	r1, #0
 800e4e4:	68f8      	ldr	r0, [r7, #12]
 800e4e6:	f000 fe5d 	bl	800f1a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	2100      	movs	r1, #0
 800e4f8:	68f8      	ldr	r0, [r7, #12]
 800e4fa:	f006 f98d 	bl	8014818 <USBD_LL_PrepareReceive>
 800e4fe:	e026      	b.n	800e54e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e506:	68db      	ldr	r3, [r3, #12]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d00a      	beq.n	800e522 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800e512:	2b03      	cmp	r3, #3
 800e514:	d105      	bne.n	800e522 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	68f8      	ldr	r0, [r7, #12]
 800e520:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800e522:	2180      	movs	r1, #128	; 0x80
 800e524:	68f8      	ldr	r0, [r7, #12]
 800e526:	f006 f8cb 	bl	80146c0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800e52a:	68f8      	ldr	r0, [r7, #12]
 800e52c:	f000 fe8f 	bl	800f24e <USBD_CtlReceiveStatus>
 800e530:	e00d      	b.n	800e54e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800e538:	2b04      	cmp	r3, #4
 800e53a:	d004      	beq.n	800e546 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e542:	2b00      	cmp	r3, #0
 800e544:	d103      	bne.n	800e54e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800e546:	2180      	movs	r1, #128	; 0x80
 800e548:	68f8      	ldr	r0, [r7, #12]
 800e54a:	f006 f8b9 	bl	80146c0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800e554:	2b01      	cmp	r3, #1
 800e556:	d11d      	bne.n	800e594 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800e558:	68f8      	ldr	r0, [r7, #12]
 800e55a:	f7ff fe82 	bl	800e262 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2200      	movs	r2, #0
 800e562:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800e566:	e015      	b.n	800e594 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e56e:	695b      	ldr	r3, [r3, #20]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d00d      	beq.n	800e590 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800e57a:	2b03      	cmp	r3, #3
 800e57c:	d108      	bne.n	800e590 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e584:	695b      	ldr	r3, [r3, #20]
 800e586:	7afa      	ldrb	r2, [r7, #11]
 800e588:	4611      	mov	r1, r2
 800e58a:	68f8      	ldr	r0, [r7, #12]
 800e58c:	4798      	blx	r3
 800e58e:	e001      	b.n	800e594 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e590:	2302      	movs	r3, #2
 800e592:	e000      	b.n	800e596 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800e594:	2300      	movs	r3, #0
}
 800e596:	4618      	mov	r0, r3
 800e598:	3718      	adds	r7, #24
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b082      	sub	sp, #8
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e5a6:	2340      	movs	r3, #64	; 0x40
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	2100      	movs	r1, #0
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f006 f842 	bl	8014636 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2201      	movs	r2, #1
 800e5b6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2240      	movs	r2, #64	; 0x40
 800e5be:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e5c2:	2340      	movs	r3, #64	; 0x40
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	2180      	movs	r1, #128	; 0x80
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f006 f834 	bl	8014636 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2240      	movs	r2, #64	; 0x40
 800e5d8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2201      	movs	r2, #1
 800e5de:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d009      	beq.n	800e616 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	6852      	ldr	r2, [r2, #4]
 800e60e:	b2d2      	uxtb	r2, r2
 800e610:	4611      	mov	r1, r2
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	4798      	blx	r3
  }

  return USBD_OK;
 800e616:	2300      	movs	r3, #0
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3708      	adds	r7, #8
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}

0800e620 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800e620:	b480      	push	{r7}
 800e622:	b083      	sub	sp, #12
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	460b      	mov	r3, r1
 800e62a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	78fa      	ldrb	r2, [r7, #3]
 800e630:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800e632:	2300      	movs	r3, #0
}
 800e634:	4618      	mov	r0, r3
 800e636:	370c      	adds	r7, #12
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr

0800e640 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800e640:	b480      	push	{r7}
 800e642:	b083      	sub	sp, #12
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2204      	movs	r2, #4
 800e658:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800e65c:	2300      	movs	r3, #0
}
 800e65e:	4618      	mov	r0, r3
 800e660:	370c      	adds	r7, #12
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr

0800e66a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800e66a:	b480      	push	{r7}
 800e66c:	b083      	sub	sp, #12
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800e67e:	2300      	movs	r3, #0
}
 800e680:	4618      	mov	r0, r3
 800e682:	370c      	adds	r7, #12
 800e684:	46bd      	mov	sp, r7
 800e686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68a:	4770      	bx	lr

0800e68c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e69a:	2b03      	cmp	r3, #3
 800e69c:	d10b      	bne.n	800e6b6 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e6a4:	69db      	ldr	r3, [r3, #28]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d005      	beq.n	800e6b6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e6b0:	69db      	ldr	r3, [r3, #28]
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800e6b6:	2300      	movs	r3, #0
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3708      	adds	r7, #8
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b083      	sub	sp, #12
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e6cc:	2300      	movs	r3, #0
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	370c      	adds	r7, #12
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr

0800e6da <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800e6da:	b480      	push	{r7}
 800e6dc:	b083      	sub	sp, #12
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	6078      	str	r0, [r7, #4]
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e6e6:	2300      	movs	r3, #0
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	370c      	adds	r7, #12
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr

0800e6f4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e6fc:	2300      	movs	r3, #0
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	370c      	adds	r7, #12
 800e702:	46bd      	mov	sp, r7
 800e704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e708:	4770      	bx	lr

0800e70a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800e70a:	b580      	push	{r7, lr}
 800e70c:	b082      	sub	sp, #8
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2201      	movs	r2, #1
 800e716:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	6852      	ldr	r2, [r2, #4]
 800e726:	b2d2      	uxtb	r2, r2
 800e728:	4611      	mov	r1, r2
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	4798      	blx	r3

  return USBD_OK;
 800e72e:	2300      	movs	r3, #0
}
 800e730:	4618      	mov	r0, r3
 800e732:	3708      	adds	r7, #8
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}

0800e738 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b084      	sub	sp, #16
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e742:	2300      	movs	r3, #0
 800e744:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e74e:	2b20      	cmp	r3, #32
 800e750:	d004      	beq.n	800e75c <USBD_StdDevReq+0x24>
 800e752:	2b40      	cmp	r3, #64	; 0x40
 800e754:	d002      	beq.n	800e75c <USBD_StdDevReq+0x24>
 800e756:	2b00      	cmp	r3, #0
 800e758:	d008      	beq.n	800e76c <USBD_StdDevReq+0x34>
 800e75a:	e04c      	b.n	800e7f6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e762:	689b      	ldr	r3, [r3, #8]
 800e764:	6839      	ldr	r1, [r7, #0]
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	4798      	blx	r3
    break;
 800e76a:	e049      	b.n	800e800 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	785b      	ldrb	r3, [r3, #1]
 800e770:	2b09      	cmp	r3, #9
 800e772:	d83a      	bhi.n	800e7ea <USBD_StdDevReq+0xb2>
 800e774:	a201      	add	r2, pc, #4	; (adr r2, 800e77c <USBD_StdDevReq+0x44>)
 800e776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e77a:	bf00      	nop
 800e77c:	0800e7cd 	.word	0x0800e7cd
 800e780:	0800e7e1 	.word	0x0800e7e1
 800e784:	0800e7eb 	.word	0x0800e7eb
 800e788:	0800e7d7 	.word	0x0800e7d7
 800e78c:	0800e7eb 	.word	0x0800e7eb
 800e790:	0800e7af 	.word	0x0800e7af
 800e794:	0800e7a5 	.word	0x0800e7a5
 800e798:	0800e7eb 	.word	0x0800e7eb
 800e79c:	0800e7c3 	.word	0x0800e7c3
 800e7a0:	0800e7b9 	.word	0x0800e7b9
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800e7a4:	6839      	ldr	r1, [r7, #0]
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 f9d2 	bl	800eb50 <USBD_GetDescriptor>
      break;
 800e7ac:	e022      	b.n	800e7f4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800e7ae:	6839      	ldr	r1, [r7, #0]
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 fac7 	bl	800ed44 <USBD_SetAddress>
      break;
 800e7b6:	e01d      	b.n	800e7f4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800e7b8:	6839      	ldr	r1, [r7, #0]
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f000 fb04 	bl	800edc8 <USBD_SetConfig>
      break;
 800e7c0:	e018      	b.n	800e7f4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800e7c2:	6839      	ldr	r1, [r7, #0]
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f000 fb8d 	bl	800eee4 <USBD_GetConfig>
      break;
 800e7ca:	e013      	b.n	800e7f4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800e7cc:	6839      	ldr	r1, [r7, #0]
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f000 fbbc 	bl	800ef4c <USBD_GetStatus>
      break;
 800e7d4:	e00e      	b.n	800e7f4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800e7d6:	6839      	ldr	r1, [r7, #0]
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f000 fbea 	bl	800efb2 <USBD_SetFeature>
      break;
 800e7de:	e009      	b.n	800e7f4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800e7e0:	6839      	ldr	r1, [r7, #0]
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 fbf9 	bl	800efda <USBD_ClrFeature>
      break;
 800e7e8:	e004      	b.n	800e7f4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800e7ea:	6839      	ldr	r1, [r7, #0]
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 fc52 	bl	800f096 <USBD_CtlError>
      break;
 800e7f2:	bf00      	nop
    }
    break;
 800e7f4:	e004      	b.n	800e800 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800e7f6:	6839      	ldr	r1, [r7, #0]
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f000 fc4c 	bl	800f096 <USBD_CtlError>
    break;
 800e7fe:	bf00      	nop
  }

  return ret;
 800e800:	7bfb      	ldrb	r3, [r7, #15]
}
 800e802:	4618      	mov	r0, r3
 800e804:	3710      	adds	r7, #16
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop

0800e80c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b084      	sub	sp, #16
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e816:	2300      	movs	r3, #0
 800e818:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e822:	2b20      	cmp	r3, #32
 800e824:	d003      	beq.n	800e82e <USBD_StdItfReq+0x22>
 800e826:	2b40      	cmp	r3, #64	; 0x40
 800e828:	d001      	beq.n	800e82e <USBD_StdItfReq+0x22>
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d12a      	bne.n	800e884 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e834:	3b01      	subs	r3, #1
 800e836:	2b02      	cmp	r3, #2
 800e838:	d81d      	bhi.n	800e876 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	889b      	ldrh	r3, [r3, #4]
 800e83e:	b2db      	uxtb	r3, r3
 800e840:	2b01      	cmp	r3, #1
 800e842:	d813      	bhi.n	800e86c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e84a:	689b      	ldr	r3, [r3, #8]
 800e84c:	6839      	ldr	r1, [r7, #0]
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	4798      	blx	r3
 800e852:	4603      	mov	r3, r0
 800e854:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	88db      	ldrh	r3, [r3, #6]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d110      	bne.n	800e880 <USBD_StdItfReq+0x74>
 800e85e:	7bfb      	ldrb	r3, [r7, #15]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d10d      	bne.n	800e880 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f000 fcdf 	bl	800f228 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800e86a:	e009      	b.n	800e880 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800e86c:	6839      	ldr	r1, [r7, #0]
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f000 fc11 	bl	800f096 <USBD_CtlError>
      break;
 800e874:	e004      	b.n	800e880 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800e876:	6839      	ldr	r1, [r7, #0]
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f000 fc0c 	bl	800f096 <USBD_CtlError>
      break;
 800e87e:	e000      	b.n	800e882 <USBD_StdItfReq+0x76>
      break;
 800e880:	bf00      	nop
    }
    break;
 800e882:	e004      	b.n	800e88e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800e884:	6839      	ldr	r1, [r7, #0]
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f000 fc05 	bl	800f096 <USBD_CtlError>
    break;
 800e88c:	bf00      	nop
  }

  return USBD_OK;
 800e88e:	2300      	movs	r3, #0
}
 800e890:	4618      	mov	r0, r3
 800e892:	3710      	adds	r7, #16
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b084      	sub	sp, #16
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	889b      	ldrh	r3, [r3, #4]
 800e8aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e8b4:	2b20      	cmp	r3, #32
 800e8b6:	d004      	beq.n	800e8c2 <USBD_StdEPReq+0x2a>
 800e8b8:	2b40      	cmp	r3, #64	; 0x40
 800e8ba:	d002      	beq.n	800e8c2 <USBD_StdEPReq+0x2a>
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d008      	beq.n	800e8d2 <USBD_StdEPReq+0x3a>
 800e8c0:	e13b      	b.n	800eb3a <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e8c8:	689b      	ldr	r3, [r3, #8]
 800e8ca:	6839      	ldr	r1, [r7, #0]
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	4798      	blx	r3
    break;
 800e8d0:	e138      	b.n	800eb44 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e8da:	2b20      	cmp	r3, #32
 800e8dc:	d10a      	bne.n	800e8f4 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e8e4:	689b      	ldr	r3, [r3, #8]
 800e8e6:	6839      	ldr	r1, [r7, #0]
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	4798      	blx	r3
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	73fb      	strb	r3, [r7, #15]

      return ret;
 800e8f0:	7bfb      	ldrb	r3, [r7, #15]
 800e8f2:	e128      	b.n	800eb46 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	785b      	ldrb	r3, [r3, #1]
 800e8f8:	2b01      	cmp	r3, #1
 800e8fa:	d03e      	beq.n	800e97a <USBD_StdEPReq+0xe2>
 800e8fc:	2b03      	cmp	r3, #3
 800e8fe:	d002      	beq.n	800e906 <USBD_StdEPReq+0x6e>
 800e900:	2b00      	cmp	r3, #0
 800e902:	d070      	beq.n	800e9e6 <USBD_StdEPReq+0x14e>
 800e904:	e113      	b.n	800eb2e <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e90c:	2b02      	cmp	r3, #2
 800e90e:	d002      	beq.n	800e916 <USBD_StdEPReq+0x7e>
 800e910:	2b03      	cmp	r3, #3
 800e912:	d015      	beq.n	800e940 <USBD_StdEPReq+0xa8>
 800e914:	e02b      	b.n	800e96e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e916:	7bbb      	ldrb	r3, [r7, #14]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d00c      	beq.n	800e936 <USBD_StdEPReq+0x9e>
 800e91c:	7bbb      	ldrb	r3, [r7, #14]
 800e91e:	2b80      	cmp	r3, #128	; 0x80
 800e920:	d009      	beq.n	800e936 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800e922:	7bbb      	ldrb	r3, [r7, #14]
 800e924:	4619      	mov	r1, r3
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f005 feca 	bl	80146c0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800e92c:	2180      	movs	r1, #128	; 0x80
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	f005 fec6 	bl	80146c0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e934:	e020      	b.n	800e978 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800e936:	6839      	ldr	r1, [r7, #0]
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 fbac 	bl	800f096 <USBD_CtlError>
        break;
 800e93e:	e01b      	b.n	800e978 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	885b      	ldrh	r3, [r3, #2]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d10e      	bne.n	800e966 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e948:	7bbb      	ldrb	r3, [r7, #14]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d00b      	beq.n	800e966 <USBD_StdEPReq+0xce>
 800e94e:	7bbb      	ldrb	r3, [r7, #14]
 800e950:	2b80      	cmp	r3, #128	; 0x80
 800e952:	d008      	beq.n	800e966 <USBD_StdEPReq+0xce>
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	88db      	ldrh	r3, [r3, #6]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d104      	bne.n	800e966 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800e95c:	7bbb      	ldrb	r3, [r7, #14]
 800e95e:	4619      	mov	r1, r3
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f005 fead 	bl	80146c0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 fc5e 	bl	800f228 <USBD_CtlSendStatus>

        break;
 800e96c:	e004      	b.n	800e978 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800e96e:	6839      	ldr	r1, [r7, #0]
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f000 fb90 	bl	800f096 <USBD_CtlError>
        break;
 800e976:	bf00      	nop
      }
      break;
 800e978:	e0de      	b.n	800eb38 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e980:	2b02      	cmp	r3, #2
 800e982:	d002      	beq.n	800e98a <USBD_StdEPReq+0xf2>
 800e984:	2b03      	cmp	r3, #3
 800e986:	d015      	beq.n	800e9b4 <USBD_StdEPReq+0x11c>
 800e988:	e026      	b.n	800e9d8 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e98a:	7bbb      	ldrb	r3, [r7, #14]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d00c      	beq.n	800e9aa <USBD_StdEPReq+0x112>
 800e990:	7bbb      	ldrb	r3, [r7, #14]
 800e992:	2b80      	cmp	r3, #128	; 0x80
 800e994:	d009      	beq.n	800e9aa <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800e996:	7bbb      	ldrb	r3, [r7, #14]
 800e998:	4619      	mov	r1, r3
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f005 fe90 	bl	80146c0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800e9a0:	2180      	movs	r1, #128	; 0x80
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f005 fe8c 	bl	80146c0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e9a8:	e01c      	b.n	800e9e4 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800e9aa:	6839      	ldr	r1, [r7, #0]
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f000 fb72 	bl	800f096 <USBD_CtlError>
        break;
 800e9b2:	e017      	b.n	800e9e4 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	885b      	ldrh	r3, [r3, #2]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d112      	bne.n	800e9e2 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800e9bc:	7bbb      	ldrb	r3, [r7, #14]
 800e9be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d004      	beq.n	800e9d0 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800e9c6:	7bbb      	ldrb	r3, [r7, #14]
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f005 fe97 	bl	80146fe <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	f000 fc29 	bl	800f228 <USBD_CtlSendStatus>
        }
        break;
 800e9d6:	e004      	b.n	800e9e2 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800e9d8:	6839      	ldr	r1, [r7, #0]
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 fb5b 	bl	800f096 <USBD_CtlError>
        break;
 800e9e0:	e000      	b.n	800e9e4 <USBD_StdEPReq+0x14c>
        break;
 800e9e2:	bf00      	nop
      }
      break;
 800e9e4:	e0a8      	b.n	800eb38 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e9ec:	2b02      	cmp	r3, #2
 800e9ee:	d002      	beq.n	800e9f6 <USBD_StdEPReq+0x15e>
 800e9f0:	2b03      	cmp	r3, #3
 800e9f2:	d031      	beq.n	800ea58 <USBD_StdEPReq+0x1c0>
 800e9f4:	e095      	b.n	800eb22 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e9f6:	7bbb      	ldrb	r3, [r7, #14]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d007      	beq.n	800ea0c <USBD_StdEPReq+0x174>
 800e9fc:	7bbb      	ldrb	r3, [r7, #14]
 800e9fe:	2b80      	cmp	r3, #128	; 0x80
 800ea00:	d004      	beq.n	800ea0c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800ea02:	6839      	ldr	r1, [r7, #0]
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f000 fb46 	bl	800f096 <USBD_CtlError>
          break;
 800ea0a:	e08f      	b.n	800eb2c <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ea0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	da0b      	bge.n	800ea2c <USBD_StdEPReq+0x194>
 800ea14:	7bbb      	ldrb	r3, [r7, #14]
 800ea16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ea1a:	4613      	mov	r3, r2
 800ea1c:	009b      	lsls	r3, r3, #2
 800ea1e:	4413      	add	r3, r2
 800ea20:	009b      	lsls	r3, r3, #2
 800ea22:	3310      	adds	r3, #16
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	4413      	add	r3, r2
 800ea28:	3304      	adds	r3, #4
 800ea2a:	e00a      	b.n	800ea42 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800ea2c:	7bbb      	ldrb	r3, [r7, #14]
 800ea2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ea32:	4613      	mov	r3, r2
 800ea34:	009b      	lsls	r3, r3, #2
 800ea36:	4413      	add	r3, r2
 800ea38:	009b      	lsls	r3, r3, #2
 800ea3a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	4413      	add	r3, r2
 800ea42:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	2200      	movs	r2, #0
 800ea48:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	2202      	movs	r2, #2
 800ea4e:	4619      	mov	r1, r3
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 fb8b 	bl	800f16c <USBD_CtlSendData>
          break;
 800ea56:	e069      	b.n	800eb2c <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800ea58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	da11      	bge.n	800ea84 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ea60:	7bbb      	ldrb	r3, [r7, #14]
 800ea62:	f003 020f 	and.w	r2, r3, #15
 800ea66:	6879      	ldr	r1, [r7, #4]
 800ea68:	4613      	mov	r3, r2
 800ea6a:	009b      	lsls	r3, r3, #2
 800ea6c:	4413      	add	r3, r2
 800ea6e:	009b      	lsls	r3, r3, #2
 800ea70:	440b      	add	r3, r1
 800ea72:	3318      	adds	r3, #24
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d117      	bne.n	800eaaa <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800ea7a:	6839      	ldr	r1, [r7, #0]
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f000 fb0a 	bl	800f096 <USBD_CtlError>
            break;
 800ea82:	e053      	b.n	800eb2c <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ea84:	7bbb      	ldrb	r3, [r7, #14]
 800ea86:	f003 020f 	and.w	r2, r3, #15
 800ea8a:	6879      	ldr	r1, [r7, #4]
 800ea8c:	4613      	mov	r3, r2
 800ea8e:	009b      	lsls	r3, r3, #2
 800ea90:	4413      	add	r3, r2
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	440b      	add	r3, r1
 800ea96:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d104      	bne.n	800eaaa <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800eaa0:	6839      	ldr	r1, [r7, #0]
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f000 faf7 	bl	800f096 <USBD_CtlError>
            break;
 800eaa8:	e040      	b.n	800eb2c <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800eaaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	da0b      	bge.n	800eaca <USBD_StdEPReq+0x232>
 800eab2:	7bbb      	ldrb	r3, [r7, #14]
 800eab4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eab8:	4613      	mov	r3, r2
 800eaba:	009b      	lsls	r3, r3, #2
 800eabc:	4413      	add	r3, r2
 800eabe:	009b      	lsls	r3, r3, #2
 800eac0:	3310      	adds	r3, #16
 800eac2:	687a      	ldr	r2, [r7, #4]
 800eac4:	4413      	add	r3, r2
 800eac6:	3304      	adds	r3, #4
 800eac8:	e00a      	b.n	800eae0 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800eaca:	7bbb      	ldrb	r3, [r7, #14]
 800eacc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ead0:	4613      	mov	r3, r2
 800ead2:	009b      	lsls	r3, r3, #2
 800ead4:	4413      	add	r3, r2
 800ead6:	009b      	lsls	r3, r3, #2
 800ead8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800eadc:	687a      	ldr	r2, [r7, #4]
 800eade:	4413      	add	r3, r2
 800eae0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800eae2:	7bbb      	ldrb	r3, [r7, #14]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d002      	beq.n	800eaee <USBD_StdEPReq+0x256>
 800eae8:	7bbb      	ldrb	r3, [r7, #14]
 800eaea:	2b80      	cmp	r3, #128	; 0x80
 800eaec:	d103      	bne.n	800eaf6 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	601a      	str	r2, [r3, #0]
 800eaf4:	e00e      	b.n	800eb14 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800eaf6:	7bbb      	ldrb	r3, [r7, #14]
 800eaf8:	4619      	mov	r1, r3
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f005 fe1e 	bl	801473c <USBD_LL_IsStallEP>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d003      	beq.n	800eb0e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	2201      	movs	r2, #1
 800eb0a:	601a      	str	r2, [r3, #0]
 800eb0c:	e002      	b.n	800eb14 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	2200      	movs	r2, #0
 800eb12:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	2202      	movs	r2, #2
 800eb18:	4619      	mov	r1, r3
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f000 fb26 	bl	800f16c <USBD_CtlSendData>
          break;
 800eb20:	e004      	b.n	800eb2c <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800eb22:	6839      	ldr	r1, [r7, #0]
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 fab6 	bl	800f096 <USBD_CtlError>
        break;
 800eb2a:	bf00      	nop
      }
      break;
 800eb2c:	e004      	b.n	800eb38 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800eb2e:	6839      	ldr	r1, [r7, #0]
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f000 fab0 	bl	800f096 <USBD_CtlError>
      break;
 800eb36:	bf00      	nop
    }
    break;
 800eb38:	e004      	b.n	800eb44 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800eb3a:	6839      	ldr	r1, [r7, #0]
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f000 faaa 	bl	800f096 <USBD_CtlError>
    break;
 800eb42:	bf00      	nop
  }

  return ret;
 800eb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
	...

0800eb50 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	885b      	ldrh	r3, [r3, #2]
 800eb5e:	0a1b      	lsrs	r3, r3, #8
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	3b01      	subs	r3, #1
 800eb64:	2b06      	cmp	r3, #6
 800eb66:	f200 80c9 	bhi.w	800ecfc <USBD_GetDescriptor+0x1ac>
 800eb6a:	a201      	add	r2, pc, #4	; (adr r2, 800eb70 <USBD_GetDescriptor+0x20>)
 800eb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb70:	0800eb8d 	.word	0x0800eb8d
 800eb74:	0800eba5 	.word	0x0800eba5
 800eb78:	0800ebe5 	.word	0x0800ebe5
 800eb7c:	0800ecfd 	.word	0x0800ecfd
 800eb80:	0800ecfd 	.word	0x0800ecfd
 800eb84:	0800eca9 	.word	0x0800eca9
 800eb88:	0800eccf 	.word	0x0800eccf
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	687a      	ldr	r2, [r7, #4]
 800eb96:	7c12      	ldrb	r2, [r2, #16]
 800eb98:	f107 010a 	add.w	r1, r7, #10
 800eb9c:	4610      	mov	r0, r2
 800eb9e:	4798      	blx	r3
 800eba0:	60f8      	str	r0, [r7, #12]
    break;
 800eba2:	e0b0      	b.n	800ed06 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	7c1b      	ldrb	r3, [r3, #16]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d10d      	bne.n	800ebc8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ebb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebb4:	f107 020a 	add.w	r2, r7, #10
 800ebb8:	4610      	mov	r0, r2
 800ebba:	4798      	blx	r3
 800ebbc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	2202      	movs	r2, #2
 800ebc4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ebc6:	e09e      	b.n	800ed06 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ebce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd0:	f107 020a 	add.w	r2, r7, #10
 800ebd4:	4610      	mov	r0, r2
 800ebd6:	4798      	blx	r3
 800ebd8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	3301      	adds	r3, #1
 800ebde:	2202      	movs	r2, #2
 800ebe0:	701a      	strb	r2, [r3, #0]
    break;
 800ebe2:	e090      	b.n	800ed06 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	885b      	ldrh	r3, [r3, #2]
 800ebe8:	b2db      	uxtb	r3, r3
 800ebea:	2b05      	cmp	r3, #5
 800ebec:	d856      	bhi.n	800ec9c <USBD_GetDescriptor+0x14c>
 800ebee:	a201      	add	r2, pc, #4	; (adr r2, 800ebf4 <USBD_GetDescriptor+0xa4>)
 800ebf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf4:	0800ec0d 	.word	0x0800ec0d
 800ebf8:	0800ec25 	.word	0x0800ec25
 800ebfc:	0800ec3d 	.word	0x0800ec3d
 800ec00:	0800ec55 	.word	0x0800ec55
 800ec04:	0800ec6d 	.word	0x0800ec6d
 800ec08:	0800ec85 	.word	0x0800ec85
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	7c12      	ldrb	r2, [r2, #16]
 800ec18:	f107 010a 	add.w	r1, r7, #10
 800ec1c:	4610      	mov	r0, r2
 800ec1e:	4798      	blx	r3
 800ec20:	60f8      	str	r0, [r7, #12]
      break;
 800ec22:	e040      	b.n	800eca6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ec2a:	689b      	ldr	r3, [r3, #8]
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	7c12      	ldrb	r2, [r2, #16]
 800ec30:	f107 010a 	add.w	r1, r7, #10
 800ec34:	4610      	mov	r0, r2
 800ec36:	4798      	blx	r3
 800ec38:	60f8      	str	r0, [r7, #12]
      break;
 800ec3a:	e034      	b.n	800eca6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ec42:	68db      	ldr	r3, [r3, #12]
 800ec44:	687a      	ldr	r2, [r7, #4]
 800ec46:	7c12      	ldrb	r2, [r2, #16]
 800ec48:	f107 010a 	add.w	r1, r7, #10
 800ec4c:	4610      	mov	r0, r2
 800ec4e:	4798      	blx	r3
 800ec50:	60f8      	str	r0, [r7, #12]
      break;
 800ec52:	e028      	b.n	800eca6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ec5a:	691b      	ldr	r3, [r3, #16]
 800ec5c:	687a      	ldr	r2, [r7, #4]
 800ec5e:	7c12      	ldrb	r2, [r2, #16]
 800ec60:	f107 010a 	add.w	r1, r7, #10
 800ec64:	4610      	mov	r0, r2
 800ec66:	4798      	blx	r3
 800ec68:	60f8      	str	r0, [r7, #12]
      break;
 800ec6a:	e01c      	b.n	800eca6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ec72:	695b      	ldr	r3, [r3, #20]
 800ec74:	687a      	ldr	r2, [r7, #4]
 800ec76:	7c12      	ldrb	r2, [r2, #16]
 800ec78:	f107 010a 	add.w	r1, r7, #10
 800ec7c:	4610      	mov	r0, r2
 800ec7e:	4798      	blx	r3
 800ec80:	60f8      	str	r0, [r7, #12]
      break;
 800ec82:	e010      	b.n	800eca6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ec8a:	699b      	ldr	r3, [r3, #24]
 800ec8c:	687a      	ldr	r2, [r7, #4]
 800ec8e:	7c12      	ldrb	r2, [r2, #16]
 800ec90:	f107 010a 	add.w	r1, r7, #10
 800ec94:	4610      	mov	r0, r2
 800ec96:	4798      	blx	r3
 800ec98:	60f8      	str	r0, [r7, #12]
      break;
 800ec9a:	e004      	b.n	800eca6 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800ec9c:	6839      	ldr	r1, [r7, #0]
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f000 f9f9 	bl	800f096 <USBD_CtlError>
      return;
 800eca4:	e04b      	b.n	800ed3e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800eca6:	e02e      	b.n	800ed06 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	7c1b      	ldrb	r3, [r3, #16]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d109      	bne.n	800ecc4 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ecb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecb8:	f107 020a 	add.w	r2, r7, #10
 800ecbc:	4610      	mov	r0, r2
 800ecbe:	4798      	blx	r3
 800ecc0:	60f8      	str	r0, [r7, #12]
      break;
 800ecc2:	e020      	b.n	800ed06 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ecc4:	6839      	ldr	r1, [r7, #0]
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f000 f9e5 	bl	800f096 <USBD_CtlError>
      return;
 800eccc:	e037      	b.n	800ed3e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	7c1b      	ldrb	r3, [r3, #16]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d10d      	bne.n	800ecf2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ecdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecde:	f107 020a 	add.w	r2, r7, #10
 800ece2:	4610      	mov	r0, r2
 800ece4:	4798      	blx	r3
 800ece6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	3301      	adds	r3, #1
 800ecec:	2207      	movs	r2, #7
 800ecee:	701a      	strb	r2, [r3, #0]
      break;
 800ecf0:	e009      	b.n	800ed06 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ecf2:	6839      	ldr	r1, [r7, #0]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 f9ce 	bl	800f096 <USBD_CtlError>
      return;
 800ecfa:	e020      	b.n	800ed3e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800ecfc:	6839      	ldr	r1, [r7, #0]
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f000 f9c9 	bl	800f096 <USBD_CtlError>
    return;
 800ed04:	e01b      	b.n	800ed3e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800ed06:	897b      	ldrh	r3, [r7, #10]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d011      	beq.n	800ed30 <USBD_GetDescriptor+0x1e0>
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	88db      	ldrh	r3, [r3, #6]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d00d      	beq.n	800ed30 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	88da      	ldrh	r2, [r3, #6]
 800ed18:	897b      	ldrh	r3, [r7, #10]
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	bf28      	it	cs
 800ed1e:	4613      	movcs	r3, r2
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800ed24:	897b      	ldrh	r3, [r7, #10]
 800ed26:	461a      	mov	r2, r3
 800ed28:	68f9      	ldr	r1, [r7, #12]
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 fa1e 	bl	800f16c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	88db      	ldrh	r3, [r3, #6]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d102      	bne.n	800ed3e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f000 fa75 	bl	800f228 <USBD_CtlSendStatus>
  }
}
 800ed3e:	3710      	adds	r7, #16
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b084      	sub	sp, #16
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	889b      	ldrh	r3, [r3, #4]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d130      	bne.n	800edb8 <USBD_SetAddress+0x74>
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	88db      	ldrh	r3, [r3, #6]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d12c      	bne.n	800edb8 <USBD_SetAddress+0x74>
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	885b      	ldrh	r3, [r3, #2]
 800ed62:	2b7f      	cmp	r3, #127	; 0x7f
 800ed64:	d828      	bhi.n	800edb8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	885b      	ldrh	r3, [r3, #2]
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ed78:	2b03      	cmp	r3, #3
 800ed7a:	d104      	bne.n	800ed86 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800ed7c:	6839      	ldr	r1, [r7, #0]
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f000 f989 	bl	800f096 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed84:	e01c      	b.n	800edc0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	7bfa      	ldrb	r2, [r7, #15]
 800ed8a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ed8e:	7bfb      	ldrb	r3, [r7, #15]
 800ed90:	4619      	mov	r1, r3
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f005 fcfe 	bl	8014794 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f000 fa45 	bl	800f228 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ed9e:	7bfb      	ldrb	r3, [r7, #15]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d004      	beq.n	800edae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2202      	movs	r2, #2
 800eda8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edac:	e008      	b.n	800edc0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2201      	movs	r2, #1
 800edb2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edb6:	e003      	b.n	800edc0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800edb8:	6839      	ldr	r1, [r7, #0]
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f000 f96b 	bl	800f096 <USBD_CtlError>
  }
}
 800edc0:	bf00      	nop
 800edc2:	3710      	adds	r7, #16
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}

0800edc8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b082      	sub	sp, #8
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	885b      	ldrh	r3, [r3, #2]
 800edd6:	b2da      	uxtb	r2, r3
 800edd8:	4b41      	ldr	r3, [pc, #260]	; (800eee0 <USBD_SetConfig+0x118>)
 800edda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eddc:	4b40      	ldr	r3, [pc, #256]	; (800eee0 <USBD_SetConfig+0x118>)
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d904      	bls.n	800edee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ede4:	6839      	ldr	r1, [r7, #0]
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 f955 	bl	800f096 <USBD_CtlError>
 800edec:	e075      	b.n	800eeda <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800edf4:	2b02      	cmp	r3, #2
 800edf6:	d002      	beq.n	800edfe <USBD_SetConfig+0x36>
 800edf8:	2b03      	cmp	r3, #3
 800edfa:	d023      	beq.n	800ee44 <USBD_SetConfig+0x7c>
 800edfc:	e062      	b.n	800eec4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800edfe:	4b38      	ldr	r3, [pc, #224]	; (800eee0 <USBD_SetConfig+0x118>)
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d01a      	beq.n	800ee3c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800ee06:	4b36      	ldr	r3, [pc, #216]	; (800eee0 <USBD_SetConfig+0x118>)
 800ee08:	781b      	ldrb	r3, [r3, #0]
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2203      	movs	r2, #3
 800ee14:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ee18:	4b31      	ldr	r3, [pc, #196]	; (800eee0 <USBD_SetConfig+0x118>)
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	4619      	mov	r1, r3
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f7ff fa2a 	bl	800e278 <USBD_SetClassConfig>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b02      	cmp	r3, #2
 800ee28:	d104      	bne.n	800ee34 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800ee2a:	6839      	ldr	r1, [r7, #0]
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f000 f932 	bl	800f096 <USBD_CtlError>
          return;
 800ee32:	e052      	b.n	800eeda <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f000 f9f7 	bl	800f228 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800ee3a:	e04e      	b.n	800eeda <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f000 f9f3 	bl	800f228 <USBD_CtlSendStatus>
      break;
 800ee42:	e04a      	b.n	800eeda <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ee44:	4b26      	ldr	r3, [pc, #152]	; (800eee0 <USBD_SetConfig+0x118>)
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d112      	bne.n	800ee72 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2202      	movs	r2, #2
 800ee50:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800ee54:	4b22      	ldr	r3, [pc, #136]	; (800eee0 <USBD_SetConfig+0x118>)
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	461a      	mov	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800ee5e:	4b20      	ldr	r3, [pc, #128]	; (800eee0 <USBD_SetConfig+0x118>)
 800ee60:	781b      	ldrb	r3, [r3, #0]
 800ee62:	4619      	mov	r1, r3
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f7ff fa26 	bl	800e2b6 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 f9dc 	bl	800f228 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800ee70:	e033      	b.n	800eeda <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800ee72:	4b1b      	ldr	r3, [pc, #108]	; (800eee0 <USBD_SetConfig+0x118>)
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	461a      	mov	r2, r3
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d01d      	beq.n	800eebc <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	b2db      	uxtb	r3, r3
 800ee86:	4619      	mov	r1, r3
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f7ff fa14 	bl	800e2b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ee8e:	4b14      	ldr	r3, [pc, #80]	; (800eee0 <USBD_SetConfig+0x118>)
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	461a      	mov	r2, r3
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ee98:	4b11      	ldr	r3, [pc, #68]	; (800eee0 <USBD_SetConfig+0x118>)
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f7ff f9ea 	bl	800e278 <USBD_SetClassConfig>
 800eea4:	4603      	mov	r3, r0
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	d104      	bne.n	800eeb4 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800eeaa:	6839      	ldr	r1, [r7, #0]
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f000 f8f2 	bl	800f096 <USBD_CtlError>
          return;
 800eeb2:	e012      	b.n	800eeda <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f000 f9b7 	bl	800f228 <USBD_CtlSendStatus>
      break;
 800eeba:	e00e      	b.n	800eeda <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 f9b3 	bl	800f228 <USBD_CtlSendStatus>
      break;
 800eec2:	e00a      	b.n	800eeda <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800eec4:	6839      	ldr	r1, [r7, #0]
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 f8e5 	bl	800f096 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800eecc:	4b04      	ldr	r3, [pc, #16]	; (800eee0 <USBD_SetConfig+0x118>)
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	4619      	mov	r1, r3
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f7ff f9ef 	bl	800e2b6 <USBD_ClrClassConfig>
      break;
 800eed8:	bf00      	nop
    }
  }
}
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	20000378 	.word	0x20000378

0800eee4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	88db      	ldrh	r3, [r3, #6]
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	d004      	beq.n	800ef00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800eef6:	6839      	ldr	r1, [r7, #0]
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f000 f8cc 	bl	800f096 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800eefe:	e021      	b.n	800ef44 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ef06:	2b01      	cmp	r3, #1
 800ef08:	db17      	blt.n	800ef3a <USBD_GetConfig+0x56>
 800ef0a:	2b02      	cmp	r3, #2
 800ef0c:	dd02      	ble.n	800ef14 <USBD_GetConfig+0x30>
 800ef0e:	2b03      	cmp	r3, #3
 800ef10:	d00b      	beq.n	800ef2a <USBD_GetConfig+0x46>
 800ef12:	e012      	b.n	800ef3a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2200      	movs	r2, #0
 800ef18:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	3308      	adds	r3, #8
 800ef1e:	2201      	movs	r2, #1
 800ef20:	4619      	mov	r1, r3
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 f922 	bl	800f16c <USBD_CtlSendData>
      break;
 800ef28:	e00c      	b.n	800ef44 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	3304      	adds	r3, #4
 800ef2e:	2201      	movs	r2, #1
 800ef30:	4619      	mov	r1, r3
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f000 f91a 	bl	800f16c <USBD_CtlSendData>
      break;
 800ef38:	e004      	b.n	800ef44 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800ef3a:	6839      	ldr	r1, [r7, #0]
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f000 f8aa 	bl	800f096 <USBD_CtlError>
      break;
 800ef42:	bf00      	nop
}
 800ef44:	bf00      	nop
 800ef46:	3708      	adds	r7, #8
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ef5c:	3b01      	subs	r3, #1
 800ef5e:	2b02      	cmp	r3, #2
 800ef60:	d81e      	bhi.n	800efa0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	88db      	ldrh	r3, [r3, #6]
 800ef66:	2b02      	cmp	r3, #2
 800ef68:	d004      	beq.n	800ef74 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800ef6a:	6839      	ldr	r1, [r7, #0]
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f000 f892 	bl	800f096 <USBD_CtlError>
      break;
 800ef72:	e01a      	b.n	800efaa <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2201      	movs	r2, #1
 800ef78:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d005      	beq.n	800ef90 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	68db      	ldr	r3, [r3, #12]
 800ef88:	f043 0202 	orr.w	r2, r3, #2
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	330c      	adds	r3, #12
 800ef94:	2202      	movs	r2, #2
 800ef96:	4619      	mov	r1, r3
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f000 f8e7 	bl	800f16c <USBD_CtlSendData>
    break;
 800ef9e:	e004      	b.n	800efaa <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800efa0:	6839      	ldr	r1, [r7, #0]
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f000 f877 	bl	800f096 <USBD_CtlError>
    break;
 800efa8:	bf00      	nop
  }
}
 800efaa:	bf00      	nop
 800efac:	3708      	adds	r7, #8
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}

0800efb2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800efb2:	b580      	push	{r7, lr}
 800efb4:	b082      	sub	sp, #8
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
 800efba:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	885b      	ldrh	r3, [r3, #2]
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d106      	bne.n	800efd2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2201      	movs	r2, #1
 800efc8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f000 f92b 	bl	800f228 <USBD_CtlSendStatus>
  }

}
 800efd2:	bf00      	nop
 800efd4:	3708      	adds	r7, #8
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}

0800efda <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800efda:	b580      	push	{r7, lr}
 800efdc:	b082      	sub	sp, #8
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]
 800efe2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800efea:	3b01      	subs	r3, #1
 800efec:	2b02      	cmp	r3, #2
 800efee:	d80b      	bhi.n	800f008 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	885b      	ldrh	r3, [r3, #2]
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d10c      	bne.n	800f012 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2200      	movs	r2, #0
 800effc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f000 f911 	bl	800f228 <USBD_CtlSendStatus>
    }
    break;
 800f006:	e004      	b.n	800f012 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800f008:	6839      	ldr	r1, [r7, #0]
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f000 f843 	bl	800f096 <USBD_CtlError>
    break;
 800f010:	e000      	b.n	800f014 <USBD_ClrFeature+0x3a>
    break;
 800f012:	bf00      	nop
  }
}
 800f014:	bf00      	nop
 800f016:	3708      	adds	r7, #8
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	781a      	ldrb	r2, [r3, #0]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	785a      	ldrb	r2, [r3, #1]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	3302      	adds	r3, #2
 800f03a:	781b      	ldrb	r3, [r3, #0]
 800f03c:	b29a      	uxth	r2, r3
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	3303      	adds	r3, #3
 800f042:	781b      	ldrb	r3, [r3, #0]
 800f044:	b29b      	uxth	r3, r3
 800f046:	021b      	lsls	r3, r3, #8
 800f048:	b29b      	uxth	r3, r3
 800f04a:	4413      	add	r3, r2
 800f04c:	b29a      	uxth	r2, r3
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	3304      	adds	r3, #4
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	b29a      	uxth	r2, r3
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	3305      	adds	r3, #5
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	b29b      	uxth	r3, r3
 800f062:	021b      	lsls	r3, r3, #8
 800f064:	b29b      	uxth	r3, r3
 800f066:	4413      	add	r3, r2
 800f068:	b29a      	uxth	r2, r3
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	3306      	adds	r3, #6
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	b29a      	uxth	r2, r3
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	3307      	adds	r3, #7
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	021b      	lsls	r3, r3, #8
 800f080:	b29b      	uxth	r3, r3
 800f082:	4413      	add	r3, r2
 800f084:	b29a      	uxth	r2, r3
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	80da      	strh	r2, [r3, #6]

}
 800f08a:	bf00      	nop
 800f08c:	370c      	adds	r7, #12
 800f08e:	46bd      	mov	sp, r7
 800f090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f094:	4770      	bx	lr

0800f096 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f096:	b580      	push	{r7, lr}
 800f098:	b082      	sub	sp, #8
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	6078      	str	r0, [r7, #4]
 800f09e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800f0a0:	2180      	movs	r1, #128	; 0x80
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f005 fb0c 	bl	80146c0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800f0a8:	2100      	movs	r1, #0
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f005 fb08 	bl	80146c0 <USBD_LL_StallEP>
}
 800f0b0:	bf00      	nop
 800f0b2:	3708      	adds	r7, #8
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b086      	sub	sp, #24
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	60f8      	str	r0, [r7, #12]
 800f0c0:	60b9      	str	r1, [r7, #8]
 800f0c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d032      	beq.n	800f134 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800f0ce:	68f8      	ldr	r0, [r7, #12]
 800f0d0:	f000 f834 	bl	800f13c <USBD_GetLen>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	005b      	lsls	r3, r3, #1
 800f0dc:	b29a      	uxth	r2, r3
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800f0e2:	7dfb      	ldrb	r3, [r7, #23]
 800f0e4:	1c5a      	adds	r2, r3, #1
 800f0e6:	75fa      	strb	r2, [r7, #23]
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	687a      	ldr	r2, [r7, #4]
 800f0f0:	7812      	ldrb	r2, [r2, #0]
 800f0f2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800f0f4:	7dfb      	ldrb	r3, [r7, #23]
 800f0f6:	1c5a      	adds	r2, r3, #1
 800f0f8:	75fa      	strb	r2, [r7, #23]
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	4413      	add	r3, r2
 800f100:	2203      	movs	r2, #3
 800f102:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800f104:	e012      	b.n	800f12c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	1c5a      	adds	r2, r3, #1
 800f10a:	60fa      	str	r2, [r7, #12]
 800f10c:	7dfa      	ldrb	r2, [r7, #23]
 800f10e:	1c51      	adds	r1, r2, #1
 800f110:	75f9      	strb	r1, [r7, #23]
 800f112:	4611      	mov	r1, r2
 800f114:	68ba      	ldr	r2, [r7, #8]
 800f116:	440a      	add	r2, r1
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800f11c:	7dfb      	ldrb	r3, [r7, #23]
 800f11e:	1c5a      	adds	r2, r3, #1
 800f120:	75fa      	strb	r2, [r7, #23]
 800f122:	461a      	mov	r2, r3
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	4413      	add	r3, r2
 800f128:	2200      	movs	r2, #0
 800f12a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d1e8      	bne.n	800f106 <USBD_GetString+0x4e>
    }
  }
}
 800f134:	bf00      	nop
 800f136:	3718      	adds	r7, #24
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b085      	sub	sp, #20
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800f144:	2300      	movs	r3, #0
 800f146:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800f148:	e005      	b.n	800f156 <USBD_GetLen+0x1a>
    {
        len++;
 800f14a:	7bfb      	ldrb	r3, [r7, #15]
 800f14c:	3301      	adds	r3, #1
 800f14e:	73fb      	strb	r3, [r7, #15]
        buf++;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	3301      	adds	r3, #1
 800f154:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d1f5      	bne.n	800f14a <USBD_GetLen+0xe>
    }

    return len;
 800f15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f160:	4618      	mov	r0, r3
 800f162:	3714      	adds	r7, #20
 800f164:	46bd      	mov	sp, r7
 800f166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16a:	4770      	bx	lr

0800f16c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b084      	sub	sp, #16
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	60b9      	str	r1, [r7, #8]
 800f176:	4613      	mov	r3, r2
 800f178:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2202      	movs	r2, #2
 800f17e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800f182:	88fa      	ldrh	r2, [r7, #6]
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800f188:	88fa      	ldrh	r2, [r7, #6]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f18e:	88fb      	ldrh	r3, [r7, #6]
 800f190:	68ba      	ldr	r2, [r7, #8]
 800f192:	2100      	movs	r1, #0
 800f194:	68f8      	ldr	r0, [r7, #12]
 800f196:	f005 fb1c 	bl	80147d2 <USBD_LL_Transmit>

  return USBD_OK;
 800f19a:	2300      	movs	r3, #0
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3710      	adds	r7, #16
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	4613      	mov	r3, r2
 800f1b0:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f1b2:	88fb      	ldrh	r3, [r7, #6]
 800f1b4:	68ba      	ldr	r2, [r7, #8]
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	68f8      	ldr	r0, [r7, #12]
 800f1ba:	f005 fb0a 	bl	80147d2 <USBD_LL_Transmit>

  return USBD_OK;
 800f1be:	2300      	movs	r3, #0
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3710      	adds	r7, #16
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	60b9      	str	r1, [r7, #8]
 800f1d2:	4613      	mov	r3, r2
 800f1d4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	2203      	movs	r2, #3
 800f1da:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800f1de:	88fa      	ldrh	r2, [r7, #6]
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800f1e6:	88fa      	ldrh	r2, [r7, #6]
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800f1ee:	88fb      	ldrh	r3, [r7, #6]
 800f1f0:	68ba      	ldr	r2, [r7, #8]
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	68f8      	ldr	r0, [r7, #12]
 800f1f6:	f005 fb0f 	bl	8014818 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1fa:	2300      	movs	r3, #0
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3710      	adds	r7, #16
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}

0800f204 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	60b9      	str	r1, [r7, #8]
 800f20e:	4613      	mov	r3, r2
 800f210:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f212:	88fb      	ldrh	r3, [r7, #6]
 800f214:	68ba      	ldr	r2, [r7, #8]
 800f216:	2100      	movs	r1, #0
 800f218:	68f8      	ldr	r0, [r7, #12]
 800f21a:	f005 fafd 	bl	8014818 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f21e:	2300      	movs	r3, #0
}
 800f220:	4618      	mov	r0, r3
 800f222:	3710      	adds	r7, #16
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2204      	movs	r2, #4
 800f234:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f238:	2300      	movs	r3, #0
 800f23a:	2200      	movs	r2, #0
 800f23c:	2100      	movs	r1, #0
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f005 fac7 	bl	80147d2 <USBD_LL_Transmit>

  return USBD_OK;
 800f244:	2300      	movs	r3, #0
}
 800f246:	4618      	mov	r0, r3
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800f24e:	b580      	push	{r7, lr}
 800f250:	b082      	sub	sp, #8
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2205      	movs	r2, #5
 800f25a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800f25e:	2300      	movs	r3, #0
 800f260:	2200      	movs	r2, #0
 800f262:	2100      	movs	r1, #0
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f005 fad7 	bl	8014818 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f26a:	2300      	movs	r3, #0
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3708      	adds	r7, #8
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b084      	sub	sp, #16
 800f278:	af00      	add	r7, sp, #0
 800f27a:	4603      	mov	r3, r0
 800f27c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f27e:	79fb      	ldrb	r3, [r7, #7]
 800f280:	4a08      	ldr	r2, [pc, #32]	; (800f2a4 <disk_status+0x30>)
 800f282:	009b      	lsls	r3, r3, #2
 800f284:	4413      	add	r3, r2
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	79fa      	ldrb	r2, [r7, #7]
 800f28c:	4905      	ldr	r1, [pc, #20]	; (800f2a4 <disk_status+0x30>)
 800f28e:	440a      	add	r2, r1
 800f290:	7a12      	ldrb	r2, [r2, #8]
 800f292:	4610      	mov	r0, r2
 800f294:	4798      	blx	r3
 800f296:	4603      	mov	r3, r0
 800f298:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3710      	adds	r7, #16
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}
 800f2a4:	200003a4 	.word	0x200003a4

0800f2a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b084      	sub	sp, #16
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f2b6:	79fb      	ldrb	r3, [r7, #7]
 800f2b8:	4a0d      	ldr	r2, [pc, #52]	; (800f2f0 <disk_initialize+0x48>)
 800f2ba:	5cd3      	ldrb	r3, [r2, r3]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d111      	bne.n	800f2e4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f2c0:	79fb      	ldrb	r3, [r7, #7]
 800f2c2:	4a0b      	ldr	r2, [pc, #44]	; (800f2f0 <disk_initialize+0x48>)
 800f2c4:	2101      	movs	r1, #1
 800f2c6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f2c8:	79fb      	ldrb	r3, [r7, #7]
 800f2ca:	4a09      	ldr	r2, [pc, #36]	; (800f2f0 <disk_initialize+0x48>)
 800f2cc:	009b      	lsls	r3, r3, #2
 800f2ce:	4413      	add	r3, r2
 800f2d0:	685b      	ldr	r3, [r3, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	79fa      	ldrb	r2, [r7, #7]
 800f2d6:	4906      	ldr	r1, [pc, #24]	; (800f2f0 <disk_initialize+0x48>)
 800f2d8:	440a      	add	r2, r1
 800f2da:	7a12      	ldrb	r2, [r2, #8]
 800f2dc:	4610      	mov	r0, r2
 800f2de:	4798      	blx	r3
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3710      	adds	r7, #16
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	200003a4 	.word	0x200003a4

0800f2f4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f2f4:	b590      	push	{r4, r7, lr}
 800f2f6:	b087      	sub	sp, #28
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	60b9      	str	r1, [r7, #8]
 800f2fc:	607a      	str	r2, [r7, #4]
 800f2fe:	603b      	str	r3, [r7, #0]
 800f300:	4603      	mov	r3, r0
 800f302:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f304:	7bfb      	ldrb	r3, [r7, #15]
 800f306:	4a0a      	ldr	r2, [pc, #40]	; (800f330 <disk_read+0x3c>)
 800f308:	009b      	lsls	r3, r3, #2
 800f30a:	4413      	add	r3, r2
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	689c      	ldr	r4, [r3, #8]
 800f310:	7bfb      	ldrb	r3, [r7, #15]
 800f312:	4a07      	ldr	r2, [pc, #28]	; (800f330 <disk_read+0x3c>)
 800f314:	4413      	add	r3, r2
 800f316:	7a18      	ldrb	r0, [r3, #8]
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	68b9      	ldr	r1, [r7, #8]
 800f31e:	47a0      	blx	r4
 800f320:	4603      	mov	r3, r0
 800f322:	75fb      	strb	r3, [r7, #23]
  return res;
 800f324:	7dfb      	ldrb	r3, [r7, #23]
}
 800f326:	4618      	mov	r0, r3
 800f328:	371c      	adds	r7, #28
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd90      	pop	{r4, r7, pc}
 800f32e:	bf00      	nop
 800f330:	200003a4 	.word	0x200003a4

0800f334 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f334:	b590      	push	{r4, r7, lr}
 800f336:	b087      	sub	sp, #28
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60b9      	str	r1, [r7, #8]
 800f33c:	607a      	str	r2, [r7, #4]
 800f33e:	603b      	str	r3, [r7, #0]
 800f340:	4603      	mov	r3, r0
 800f342:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f344:	7bfb      	ldrb	r3, [r7, #15]
 800f346:	4a0a      	ldr	r2, [pc, #40]	; (800f370 <disk_write+0x3c>)
 800f348:	009b      	lsls	r3, r3, #2
 800f34a:	4413      	add	r3, r2
 800f34c:	685b      	ldr	r3, [r3, #4]
 800f34e:	68dc      	ldr	r4, [r3, #12]
 800f350:	7bfb      	ldrb	r3, [r7, #15]
 800f352:	4a07      	ldr	r2, [pc, #28]	; (800f370 <disk_write+0x3c>)
 800f354:	4413      	add	r3, r2
 800f356:	7a18      	ldrb	r0, [r3, #8]
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	687a      	ldr	r2, [r7, #4]
 800f35c:	68b9      	ldr	r1, [r7, #8]
 800f35e:	47a0      	blx	r4
 800f360:	4603      	mov	r3, r0
 800f362:	75fb      	strb	r3, [r7, #23]
  return res;
 800f364:	7dfb      	ldrb	r3, [r7, #23]
}
 800f366:	4618      	mov	r0, r3
 800f368:	371c      	adds	r7, #28
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd90      	pop	{r4, r7, pc}
 800f36e:	bf00      	nop
 800f370:	200003a4 	.word	0x200003a4

0800f374 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	4603      	mov	r3, r0
 800f37c:	603a      	str	r2, [r7, #0]
 800f37e:	71fb      	strb	r3, [r7, #7]
 800f380:	460b      	mov	r3, r1
 800f382:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f384:	79fb      	ldrb	r3, [r7, #7]
 800f386:	4a09      	ldr	r2, [pc, #36]	; (800f3ac <disk_ioctl+0x38>)
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	4413      	add	r3, r2
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	691b      	ldr	r3, [r3, #16]
 800f390:	79fa      	ldrb	r2, [r7, #7]
 800f392:	4906      	ldr	r1, [pc, #24]	; (800f3ac <disk_ioctl+0x38>)
 800f394:	440a      	add	r2, r1
 800f396:	7a10      	ldrb	r0, [r2, #8]
 800f398:	79b9      	ldrb	r1, [r7, #6]
 800f39a:	683a      	ldr	r2, [r7, #0]
 800f39c:	4798      	blx	r3
 800f39e:	4603      	mov	r3, r0
 800f3a0:	73fb      	strb	r3, [r7, #15]
  return res;
 800f3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3710      	adds	r7, #16
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	200003a4 	.word	0x200003a4

0800f3b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b085      	sub	sp, #20
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	3301      	adds	r3, #1
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f3c0:	89fb      	ldrh	r3, [r7, #14]
 800f3c2:	021b      	lsls	r3, r3, #8
 800f3c4:	b21a      	sxth	r2, r3
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	781b      	ldrb	r3, [r3, #0]
 800f3ca:	b21b      	sxth	r3, r3
 800f3cc:	4313      	orrs	r3, r2
 800f3ce:	b21b      	sxth	r3, r3
 800f3d0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f3d2:	89fb      	ldrh	r3, [r7, #14]
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3714      	adds	r7, #20
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr

0800f3e0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b085      	sub	sp, #20
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	3303      	adds	r3, #3
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	021b      	lsls	r3, r3, #8
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	3202      	adds	r2, #2
 800f3f8:	7812      	ldrb	r2, [r2, #0]
 800f3fa:	4313      	orrs	r3, r2
 800f3fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	021b      	lsls	r3, r3, #8
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	3201      	adds	r2, #1
 800f406:	7812      	ldrb	r2, [r2, #0]
 800f408:	4313      	orrs	r3, r2
 800f40a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	021b      	lsls	r3, r3, #8
 800f410:	687a      	ldr	r2, [r7, #4]
 800f412:	7812      	ldrb	r2, [r2, #0]
 800f414:	4313      	orrs	r3, r2
 800f416:	60fb      	str	r3, [r7, #12]
	return rv;
 800f418:	68fb      	ldr	r3, [r7, #12]
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3714      	adds	r7, #20
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr

0800f426 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f426:	b480      	push	{r7}
 800f428:	b083      	sub	sp, #12
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	6078      	str	r0, [r7, #4]
 800f42e:	460b      	mov	r3, r1
 800f430:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	1c5a      	adds	r2, r3, #1
 800f436:	607a      	str	r2, [r7, #4]
 800f438:	887a      	ldrh	r2, [r7, #2]
 800f43a:	b2d2      	uxtb	r2, r2
 800f43c:	701a      	strb	r2, [r3, #0]
 800f43e:	887b      	ldrh	r3, [r7, #2]
 800f440:	0a1b      	lsrs	r3, r3, #8
 800f442:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	1c5a      	adds	r2, r3, #1
 800f448:	607a      	str	r2, [r7, #4]
 800f44a:	887a      	ldrh	r2, [r7, #2]
 800f44c:	b2d2      	uxtb	r2, r2
 800f44e:	701a      	strb	r2, [r3, #0]
}
 800f450:	bf00      	nop
 800f452:	370c      	adds	r7, #12
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr

0800f45c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f45c:	b480      	push	{r7}
 800f45e:	b083      	sub	sp, #12
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	1c5a      	adds	r2, r3, #1
 800f46a:	607a      	str	r2, [r7, #4]
 800f46c:	683a      	ldr	r2, [r7, #0]
 800f46e:	b2d2      	uxtb	r2, r2
 800f470:	701a      	strb	r2, [r3, #0]
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	0a1b      	lsrs	r3, r3, #8
 800f476:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	1c5a      	adds	r2, r3, #1
 800f47c:	607a      	str	r2, [r7, #4]
 800f47e:	683a      	ldr	r2, [r7, #0]
 800f480:	b2d2      	uxtb	r2, r2
 800f482:	701a      	strb	r2, [r3, #0]
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	0a1b      	lsrs	r3, r3, #8
 800f488:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	1c5a      	adds	r2, r3, #1
 800f48e:	607a      	str	r2, [r7, #4]
 800f490:	683a      	ldr	r2, [r7, #0]
 800f492:	b2d2      	uxtb	r2, r2
 800f494:	701a      	strb	r2, [r3, #0]
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	0a1b      	lsrs	r3, r3, #8
 800f49a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	1c5a      	adds	r2, r3, #1
 800f4a0:	607a      	str	r2, [r7, #4]
 800f4a2:	683a      	ldr	r2, [r7, #0]
 800f4a4:	b2d2      	uxtb	r2, r2
 800f4a6:	701a      	strb	r2, [r3, #0]
}
 800f4a8:	bf00      	nop
 800f4aa:	370c      	adds	r7, #12
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b2:	4770      	bx	lr

0800f4b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f4b4:	b480      	push	{r7}
 800f4b6:	b087      	sub	sp, #28
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	60f8      	str	r0, [r7, #12]
 800f4bc:	60b9      	str	r1, [r7, #8]
 800f4be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d00d      	beq.n	800f4ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f4ce:	693a      	ldr	r2, [r7, #16]
 800f4d0:	1c53      	adds	r3, r2, #1
 800f4d2:	613b      	str	r3, [r7, #16]
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	1c59      	adds	r1, r3, #1
 800f4d8:	6179      	str	r1, [r7, #20]
 800f4da:	7812      	ldrb	r2, [r2, #0]
 800f4dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	3b01      	subs	r3, #1
 800f4e2:	607b      	str	r3, [r7, #4]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d1f1      	bne.n	800f4ce <mem_cpy+0x1a>
	}
}
 800f4ea:	bf00      	nop
 800f4ec:	371c      	adds	r7, #28
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f4:	4770      	bx	lr

0800f4f6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f4f6:	b480      	push	{r7}
 800f4f8:	b087      	sub	sp, #28
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	60f8      	str	r0, [r7, #12]
 800f4fe:	60b9      	str	r1, [r7, #8]
 800f500:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	1c5a      	adds	r2, r3, #1
 800f50a:	617a      	str	r2, [r7, #20]
 800f50c:	68ba      	ldr	r2, [r7, #8]
 800f50e:	b2d2      	uxtb	r2, r2
 800f510:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	3b01      	subs	r3, #1
 800f516:	607b      	str	r3, [r7, #4]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d1f3      	bne.n	800f506 <mem_set+0x10>
}
 800f51e:	bf00      	nop
 800f520:	371c      	adds	r7, #28
 800f522:	46bd      	mov	sp, r7
 800f524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f528:	4770      	bx	lr

0800f52a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f52a:	b480      	push	{r7}
 800f52c:	b089      	sub	sp, #36	; 0x24
 800f52e:	af00      	add	r7, sp, #0
 800f530:	60f8      	str	r0, [r7, #12]
 800f532:	60b9      	str	r1, [r7, #8]
 800f534:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	61fb      	str	r3, [r7, #28]
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f53e:	2300      	movs	r3, #0
 800f540:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f542:	69fb      	ldr	r3, [r7, #28]
 800f544:	1c5a      	adds	r2, r3, #1
 800f546:	61fa      	str	r2, [r7, #28]
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	4619      	mov	r1, r3
 800f54c:	69bb      	ldr	r3, [r7, #24]
 800f54e:	1c5a      	adds	r2, r3, #1
 800f550:	61ba      	str	r2, [r7, #24]
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	1acb      	subs	r3, r1, r3
 800f556:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	3b01      	subs	r3, #1
 800f55c:	607b      	str	r3, [r7, #4]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d002      	beq.n	800f56a <mem_cmp+0x40>
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d0eb      	beq.n	800f542 <mem_cmp+0x18>

	return r;
 800f56a:	697b      	ldr	r3, [r7, #20]
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3724      	adds	r7, #36	; 0x24
 800f570:	46bd      	mov	sp, r7
 800f572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f576:	4770      	bx	lr

0800f578 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f578:	b480      	push	{r7}
 800f57a:	b083      	sub	sp, #12
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f582:	e002      	b.n	800f58a <chk_chr+0x12>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	3301      	adds	r3, #1
 800f588:	607b      	str	r3, [r7, #4]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d005      	beq.n	800f59e <chk_chr+0x26>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	461a      	mov	r2, r3
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d1f2      	bne.n	800f584 <chk_chr+0xc>
	return *str;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	781b      	ldrb	r3, [r3, #0]
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	370c      	adds	r7, #12
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr
	...

0800f5b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b085      	sub	sp, #20
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	60bb      	str	r3, [r7, #8]
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	60fb      	str	r3, [r7, #12]
 800f5c2:	e029      	b.n	800f618 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f5c4:	4a27      	ldr	r2, [pc, #156]	; (800f664 <chk_lock+0xb4>)
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	011b      	lsls	r3, r3, #4
 800f5ca:	4413      	add	r3, r2
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d01d      	beq.n	800f60e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f5d2:	4a24      	ldr	r2, [pc, #144]	; (800f664 <chk_lock+0xb4>)
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	011b      	lsls	r3, r3, #4
 800f5d8:	4413      	add	r3, r2
 800f5da:	681a      	ldr	r2, [r3, #0]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d116      	bne.n	800f612 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f5e4:	4a1f      	ldr	r2, [pc, #124]	; (800f664 <chk_lock+0xb4>)
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	011b      	lsls	r3, r3, #4
 800f5ea:	4413      	add	r3, r2
 800f5ec:	3304      	adds	r3, #4
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d10c      	bne.n	800f612 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f5f8:	4a1a      	ldr	r2, [pc, #104]	; (800f664 <chk_lock+0xb4>)
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	011b      	lsls	r3, r3, #4
 800f5fe:	4413      	add	r3, r2
 800f600:	3308      	adds	r3, #8
 800f602:	681a      	ldr	r2, [r3, #0]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f608:	429a      	cmp	r2, r3
 800f60a:	d102      	bne.n	800f612 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f60c:	e007      	b.n	800f61e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f60e:	2301      	movs	r3, #1
 800f610:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	3301      	adds	r3, #1
 800f616:	60fb      	str	r3, [r7, #12]
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2b01      	cmp	r3, #1
 800f61c:	d9d2      	bls.n	800f5c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	2b02      	cmp	r3, #2
 800f622:	d109      	bne.n	800f638 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d102      	bne.n	800f630 <chk_lock+0x80>
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	2b02      	cmp	r3, #2
 800f62e:	d101      	bne.n	800f634 <chk_lock+0x84>
 800f630:	2300      	movs	r3, #0
 800f632:	e010      	b.n	800f656 <chk_lock+0xa6>
 800f634:	2312      	movs	r3, #18
 800f636:	e00e      	b.n	800f656 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d108      	bne.n	800f650 <chk_lock+0xa0>
 800f63e:	4a09      	ldr	r2, [pc, #36]	; (800f664 <chk_lock+0xb4>)
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	011b      	lsls	r3, r3, #4
 800f644:	4413      	add	r3, r2
 800f646:	330c      	adds	r3, #12
 800f648:	881b      	ldrh	r3, [r3, #0]
 800f64a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f64e:	d101      	bne.n	800f654 <chk_lock+0xa4>
 800f650:	2310      	movs	r3, #16
 800f652:	e000      	b.n	800f656 <chk_lock+0xa6>
 800f654:	2300      	movs	r3, #0
}
 800f656:	4618      	mov	r0, r3
 800f658:	3714      	adds	r7, #20
 800f65a:	46bd      	mov	sp, r7
 800f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f660:	4770      	bx	lr
 800f662:	bf00      	nop
 800f664:	20000384 	.word	0x20000384

0800f668 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f668:	b480      	push	{r7}
 800f66a:	b083      	sub	sp, #12
 800f66c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f66e:	2300      	movs	r3, #0
 800f670:	607b      	str	r3, [r7, #4]
 800f672:	e002      	b.n	800f67a <enq_lock+0x12>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	3301      	adds	r3, #1
 800f678:	607b      	str	r3, [r7, #4]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	d806      	bhi.n	800f68e <enq_lock+0x26>
 800f680:	4a09      	ldr	r2, [pc, #36]	; (800f6a8 <enq_lock+0x40>)
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	011b      	lsls	r3, r3, #4
 800f686:	4413      	add	r3, r2
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d1f2      	bne.n	800f674 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2b02      	cmp	r3, #2
 800f692:	bf14      	ite	ne
 800f694:	2301      	movne	r3, #1
 800f696:	2300      	moveq	r3, #0
 800f698:	b2db      	uxtb	r3, r3
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	370c      	adds	r7, #12
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr
 800f6a6:	bf00      	nop
 800f6a8:	20000384 	.word	0x20000384

0800f6ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b085      	sub	sp, #20
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	60fb      	str	r3, [r7, #12]
 800f6ba:	e01f      	b.n	800f6fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f6bc:	4a41      	ldr	r2, [pc, #260]	; (800f7c4 <inc_lock+0x118>)
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	011b      	lsls	r3, r3, #4
 800f6c2:	4413      	add	r3, r2
 800f6c4:	681a      	ldr	r2, [r3, #0]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d113      	bne.n	800f6f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f6ce:	4a3d      	ldr	r2, [pc, #244]	; (800f7c4 <inc_lock+0x118>)
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	011b      	lsls	r3, r3, #4
 800f6d4:	4413      	add	r3, r2
 800f6d6:	3304      	adds	r3, #4
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d109      	bne.n	800f6f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f6e2:	4a38      	ldr	r2, [pc, #224]	; (800f7c4 <inc_lock+0x118>)
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	011b      	lsls	r3, r3, #4
 800f6e8:	4413      	add	r3, r2
 800f6ea:	3308      	adds	r3, #8
 800f6ec:	681a      	ldr	r2, [r3, #0]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d006      	beq.n	800f704 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	60fb      	str	r3, [r7, #12]
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d9dc      	bls.n	800f6bc <inc_lock+0x10>
 800f702:	e000      	b.n	800f706 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f704:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	2b02      	cmp	r3, #2
 800f70a:	d132      	bne.n	800f772 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f70c:	2300      	movs	r3, #0
 800f70e:	60fb      	str	r3, [r7, #12]
 800f710:	e002      	b.n	800f718 <inc_lock+0x6c>
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	3301      	adds	r3, #1
 800f716:	60fb      	str	r3, [r7, #12]
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	2b01      	cmp	r3, #1
 800f71c:	d806      	bhi.n	800f72c <inc_lock+0x80>
 800f71e:	4a29      	ldr	r2, [pc, #164]	; (800f7c4 <inc_lock+0x118>)
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	011b      	lsls	r3, r3, #4
 800f724:	4413      	add	r3, r2
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d1f2      	bne.n	800f712 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	2b02      	cmp	r3, #2
 800f730:	d101      	bne.n	800f736 <inc_lock+0x8a>
 800f732:	2300      	movs	r3, #0
 800f734:	e040      	b.n	800f7b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681a      	ldr	r2, [r3, #0]
 800f73a:	4922      	ldr	r1, [pc, #136]	; (800f7c4 <inc_lock+0x118>)
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	011b      	lsls	r3, r3, #4
 800f740:	440b      	add	r3, r1
 800f742:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	689a      	ldr	r2, [r3, #8]
 800f748:	491e      	ldr	r1, [pc, #120]	; (800f7c4 <inc_lock+0x118>)
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	011b      	lsls	r3, r3, #4
 800f74e:	440b      	add	r3, r1
 800f750:	3304      	adds	r3, #4
 800f752:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	695a      	ldr	r2, [r3, #20]
 800f758:	491a      	ldr	r1, [pc, #104]	; (800f7c4 <inc_lock+0x118>)
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	011b      	lsls	r3, r3, #4
 800f75e:	440b      	add	r3, r1
 800f760:	3308      	adds	r3, #8
 800f762:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f764:	4a17      	ldr	r2, [pc, #92]	; (800f7c4 <inc_lock+0x118>)
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	011b      	lsls	r3, r3, #4
 800f76a:	4413      	add	r3, r2
 800f76c:	330c      	adds	r3, #12
 800f76e:	2200      	movs	r2, #0
 800f770:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d009      	beq.n	800f78c <inc_lock+0xe0>
 800f778:	4a12      	ldr	r2, [pc, #72]	; (800f7c4 <inc_lock+0x118>)
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	011b      	lsls	r3, r3, #4
 800f77e:	4413      	add	r3, r2
 800f780:	330c      	adds	r3, #12
 800f782:	881b      	ldrh	r3, [r3, #0]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d001      	beq.n	800f78c <inc_lock+0xe0>
 800f788:	2300      	movs	r3, #0
 800f78a:	e015      	b.n	800f7b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d108      	bne.n	800f7a4 <inc_lock+0xf8>
 800f792:	4a0c      	ldr	r2, [pc, #48]	; (800f7c4 <inc_lock+0x118>)
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	011b      	lsls	r3, r3, #4
 800f798:	4413      	add	r3, r2
 800f79a:	330c      	adds	r3, #12
 800f79c:	881b      	ldrh	r3, [r3, #0]
 800f79e:	3301      	adds	r3, #1
 800f7a0:	b29a      	uxth	r2, r3
 800f7a2:	e001      	b.n	800f7a8 <inc_lock+0xfc>
 800f7a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f7a8:	4906      	ldr	r1, [pc, #24]	; (800f7c4 <inc_lock+0x118>)
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	011b      	lsls	r3, r3, #4
 800f7ae:	440b      	add	r3, r1
 800f7b0:	330c      	adds	r3, #12
 800f7b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	3301      	adds	r3, #1
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3714      	adds	r7, #20
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr
 800f7c4:	20000384 	.word	0x20000384

0800f7c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b085      	sub	sp, #20
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	3b01      	subs	r3, #1
 800f7d4:	607b      	str	r3, [r7, #4]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d825      	bhi.n	800f828 <dec_lock+0x60>
		n = Files[i].ctr;
 800f7dc:	4a17      	ldr	r2, [pc, #92]	; (800f83c <dec_lock+0x74>)
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	011b      	lsls	r3, r3, #4
 800f7e2:	4413      	add	r3, r2
 800f7e4:	330c      	adds	r3, #12
 800f7e6:	881b      	ldrh	r3, [r3, #0]
 800f7e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f7ea:	89fb      	ldrh	r3, [r7, #14]
 800f7ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7f0:	d101      	bne.n	800f7f6 <dec_lock+0x2e>
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f7f6:	89fb      	ldrh	r3, [r7, #14]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d002      	beq.n	800f802 <dec_lock+0x3a>
 800f7fc:	89fb      	ldrh	r3, [r7, #14]
 800f7fe:	3b01      	subs	r3, #1
 800f800:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f802:	4a0e      	ldr	r2, [pc, #56]	; (800f83c <dec_lock+0x74>)
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	011b      	lsls	r3, r3, #4
 800f808:	4413      	add	r3, r2
 800f80a:	330c      	adds	r3, #12
 800f80c:	89fa      	ldrh	r2, [r7, #14]
 800f80e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f810:	89fb      	ldrh	r3, [r7, #14]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d105      	bne.n	800f822 <dec_lock+0x5a>
 800f816:	4a09      	ldr	r2, [pc, #36]	; (800f83c <dec_lock+0x74>)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	011b      	lsls	r3, r3, #4
 800f81c:	4413      	add	r3, r2
 800f81e:	2200      	movs	r2, #0
 800f820:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f822:	2300      	movs	r3, #0
 800f824:	737b      	strb	r3, [r7, #13]
 800f826:	e001      	b.n	800f82c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f828:	2302      	movs	r3, #2
 800f82a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f82c:	7b7b      	ldrb	r3, [r7, #13]
}
 800f82e:	4618      	mov	r0, r3
 800f830:	3714      	adds	r7, #20
 800f832:	46bd      	mov	sp, r7
 800f834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f838:	4770      	bx	lr
 800f83a:	bf00      	nop
 800f83c:	20000384 	.word	0x20000384

0800f840 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f840:	b480      	push	{r7}
 800f842:	b085      	sub	sp, #20
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f848:	2300      	movs	r3, #0
 800f84a:	60fb      	str	r3, [r7, #12]
 800f84c:	e010      	b.n	800f870 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f84e:	4a0d      	ldr	r2, [pc, #52]	; (800f884 <clear_lock+0x44>)
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	011b      	lsls	r3, r3, #4
 800f854:	4413      	add	r3, r2
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d105      	bne.n	800f86a <clear_lock+0x2a>
 800f85e:	4a09      	ldr	r2, [pc, #36]	; (800f884 <clear_lock+0x44>)
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	011b      	lsls	r3, r3, #4
 800f864:	4413      	add	r3, r2
 800f866:	2200      	movs	r2, #0
 800f868:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	3301      	adds	r3, #1
 800f86e:	60fb      	str	r3, [r7, #12]
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2b01      	cmp	r3, #1
 800f874:	d9eb      	bls.n	800f84e <clear_lock+0xe>
	}
}
 800f876:	bf00      	nop
 800f878:	3714      	adds	r7, #20
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr
 800f882:	bf00      	nop
 800f884:	20000384 	.word	0x20000384

0800f888 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b086      	sub	sp, #24
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f890:	2300      	movs	r3, #0
 800f892:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	78db      	ldrb	r3, [r3, #3]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d034      	beq.n	800f906 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	7858      	ldrb	r0, [r3, #1]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	697a      	ldr	r2, [r7, #20]
 800f8b0:	f7ff fd40 	bl	800f334 <disk_write>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d002      	beq.n	800f8c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	73fb      	strb	r3, [r7, #15]
 800f8be:	e022      	b.n	800f906 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ca:	697a      	ldr	r2, [r7, #20]
 800f8cc:	1ad2      	subs	r2, r2, r3
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	69db      	ldr	r3, [r3, #28]
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d217      	bcs.n	800f906 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	789b      	ldrb	r3, [r3, #2]
 800f8da:	613b      	str	r3, [r7, #16]
 800f8dc:	e010      	b.n	800f900 <sync_window+0x78>
					wsect += fs->fsize;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	69db      	ldr	r3, [r3, #28]
 800f8e2:	697a      	ldr	r2, [r7, #20]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	7858      	ldrb	r0, [r3, #1]
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	697a      	ldr	r2, [r7, #20]
 800f8f6:	f7ff fd1d 	bl	800f334 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	3b01      	subs	r3, #1
 800f8fe:	613b      	str	r3, [r7, #16]
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	2b01      	cmp	r3, #1
 800f904:	d8eb      	bhi.n	800f8de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f906:	7bfb      	ldrb	r3, [r7, #15]
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3718      	adds	r7, #24
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f91a:	2300      	movs	r3, #0
 800f91c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f922:	683a      	ldr	r2, [r7, #0]
 800f924:	429a      	cmp	r2, r3
 800f926:	d01b      	beq.n	800f960 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f7ff ffad 	bl	800f888 <sync_window>
 800f92e:	4603      	mov	r3, r0
 800f930:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f932:	7bfb      	ldrb	r3, [r7, #15]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d113      	bne.n	800f960 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	7858      	ldrb	r0, [r3, #1]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f942:	2301      	movs	r3, #1
 800f944:	683a      	ldr	r2, [r7, #0]
 800f946:	f7ff fcd5 	bl	800f2f4 <disk_read>
 800f94a:	4603      	mov	r3, r0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d004      	beq.n	800f95a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f950:	f04f 33ff 	mov.w	r3, #4294967295
 800f954:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f956:	2301      	movs	r3, #1
 800f958:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	683a      	ldr	r2, [r7, #0]
 800f95e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800f960:	7bfb      	ldrb	r3, [r7, #15]
}
 800f962:	4618      	mov	r0, r3
 800f964:	3710      	adds	r7, #16
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
	...

0800f96c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b084      	sub	sp, #16
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f7ff ff87 	bl	800f888 <sync_window>
 800f97a:	4603      	mov	r3, r0
 800f97c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f97e:	7bfb      	ldrb	r3, [r7, #15]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d159      	bne.n	800fa38 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	2b03      	cmp	r3, #3
 800f98a:	d149      	bne.n	800fa20 <sync_fs+0xb4>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	791b      	ldrb	r3, [r3, #4]
 800f990:	2b01      	cmp	r3, #1
 800f992:	d145      	bne.n	800fa20 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	899b      	ldrh	r3, [r3, #12]
 800f99e:	461a      	mov	r2, r3
 800f9a0:	2100      	movs	r1, #0
 800f9a2:	f7ff fda8 	bl	800f4f6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	3334      	adds	r3, #52	; 0x34
 800f9aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f9ae:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7ff fd37 	bl	800f426 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	3334      	adds	r3, #52	; 0x34
 800f9bc:	4921      	ldr	r1, [pc, #132]	; (800fa44 <sync_fs+0xd8>)
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7ff fd4c 	bl	800f45c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	3334      	adds	r3, #52	; 0x34
 800f9c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f9cc:	491e      	ldr	r1, [pc, #120]	; (800fa48 <sync_fs+0xdc>)
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7ff fd44 	bl	800f45c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	3334      	adds	r3, #52	; 0x34
 800f9d8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	695b      	ldr	r3, [r3, #20]
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	4610      	mov	r0, r2
 800f9e4:	f7ff fd3a 	bl	800f45c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	3334      	adds	r3, #52	; 0x34
 800f9ec:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	691b      	ldr	r3, [r3, #16]
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	4610      	mov	r0, r2
 800f9f8:	f7ff fd30 	bl	800f45c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6a1b      	ldr	r3, [r3, #32]
 800fa00:	1c5a      	adds	r2, r3, #1
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	7858      	ldrb	r0, [r3, #1]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa14:	2301      	movs	r3, #1
 800fa16:	f7ff fc8d 	bl	800f334 <disk_write>
			fs->fsi_flag = 0;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	785b      	ldrb	r3, [r3, #1]
 800fa24:	2200      	movs	r2, #0
 800fa26:	2100      	movs	r1, #0
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7ff fca3 	bl	800f374 <disk_ioctl>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d001      	beq.n	800fa38 <sync_fs+0xcc>
 800fa34:	2301      	movs	r3, #1
 800fa36:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fa38:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3710      	adds	r7, #16
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}
 800fa42:	bf00      	nop
 800fa44:	41615252 	.word	0x41615252
 800fa48:	61417272 	.word	0x61417272

0800fa4c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b083      	sub	sp, #12
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	3b02      	subs	r3, #2
 800fa5a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	699b      	ldr	r3, [r3, #24]
 800fa60:	3b02      	subs	r3, #2
 800fa62:	683a      	ldr	r2, [r7, #0]
 800fa64:	429a      	cmp	r2, r3
 800fa66:	d301      	bcc.n	800fa6c <clust2sect+0x20>
 800fa68:	2300      	movs	r3, #0
 800fa6a:	e008      	b.n	800fa7e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	895b      	ldrh	r3, [r3, #10]
 800fa70:	461a      	mov	r2, r3
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	fb03 f202 	mul.w	r2, r3, r2
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa7c:	4413      	add	r3, r2
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	370c      	adds	r7, #12
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr

0800fa8a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fa8a:	b580      	push	{r7, lr}
 800fa8c:	b086      	sub	sp, #24
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
 800fa92:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	d904      	bls.n	800faaa <get_fat+0x20>
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	699b      	ldr	r3, [r3, #24]
 800faa4:	683a      	ldr	r2, [r7, #0]
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d302      	bcc.n	800fab0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800faaa:	2301      	movs	r3, #1
 800faac:	617b      	str	r3, [r7, #20]
 800faae:	e0b7      	b.n	800fc20 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fab0:	f04f 33ff 	mov.w	r3, #4294967295
 800fab4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	781b      	ldrb	r3, [r3, #0]
 800faba:	2b02      	cmp	r3, #2
 800fabc:	d05a      	beq.n	800fb74 <get_fat+0xea>
 800fabe:	2b03      	cmp	r3, #3
 800fac0:	d07d      	beq.n	800fbbe <get_fat+0x134>
 800fac2:	2b01      	cmp	r3, #1
 800fac4:	f040 80a2 	bne.w	800fc0c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	60fb      	str	r3, [r7, #12]
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	085b      	lsrs	r3, r3, #1
 800fad0:	68fa      	ldr	r2, [r7, #12]
 800fad2:	4413      	add	r3, r2
 800fad4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fad6:	693b      	ldr	r3, [r7, #16]
 800fad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	899b      	ldrh	r3, [r3, #12]
 800fade:	4619      	mov	r1, r3
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	fbb3 f3f1 	udiv	r3, r3, r1
 800fae6:	4413      	add	r3, r2
 800fae8:	4619      	mov	r1, r3
 800faea:	6938      	ldr	r0, [r7, #16]
 800faec:	f7ff ff10 	bl	800f910 <move_window>
 800faf0:	4603      	mov	r3, r0
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	f040 808d 	bne.w	800fc12 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	1c5a      	adds	r2, r3, #1
 800fafc:	60fa      	str	r2, [r7, #12]
 800fafe:	693a      	ldr	r2, [r7, #16]
 800fb00:	8992      	ldrh	r2, [r2, #12]
 800fb02:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb06:	fb02 f201 	mul.w	r2, r2, r1
 800fb0a:	1a9b      	subs	r3, r3, r2
 800fb0c:	693a      	ldr	r2, [r7, #16]
 800fb0e:	4413      	add	r3, r2
 800fb10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fb14:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	899b      	ldrh	r3, [r3, #12]
 800fb1e:	4619      	mov	r1, r3
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb26:	4413      	add	r3, r2
 800fb28:	4619      	mov	r1, r3
 800fb2a:	6938      	ldr	r0, [r7, #16]
 800fb2c:	f7ff fef0 	bl	800f910 <move_window>
 800fb30:	4603      	mov	r3, r0
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d16f      	bne.n	800fc16 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	899b      	ldrh	r3, [r3, #12]
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb42:	fb02 f201 	mul.w	r2, r2, r1
 800fb46:	1a9b      	subs	r3, r3, r2
 800fb48:	693a      	ldr	r2, [r7, #16]
 800fb4a:	4413      	add	r3, r2
 800fb4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fb50:	021b      	lsls	r3, r3, #8
 800fb52:	461a      	mov	r2, r3
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	4313      	orrs	r3, r2
 800fb58:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	f003 0301 	and.w	r3, r3, #1
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d002      	beq.n	800fb6a <get_fat+0xe0>
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	091b      	lsrs	r3, r3, #4
 800fb68:	e002      	b.n	800fb70 <get_fat+0xe6>
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fb70:	617b      	str	r3, [r7, #20]
			break;
 800fb72:	e055      	b.n	800fc20 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	899b      	ldrh	r3, [r3, #12]
 800fb7c:	085b      	lsrs	r3, r3, #1
 800fb7e:	b29b      	uxth	r3, r3
 800fb80:	4619      	mov	r1, r3
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb88:	4413      	add	r3, r2
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	6938      	ldr	r0, [r7, #16]
 800fb8e:	f7ff febf 	bl	800f910 <move_window>
 800fb92:	4603      	mov	r3, r0
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d140      	bne.n	800fc1a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	005b      	lsls	r3, r3, #1
 800fba2:	693a      	ldr	r2, [r7, #16]
 800fba4:	8992      	ldrh	r2, [r2, #12]
 800fba6:	fbb3 f0f2 	udiv	r0, r3, r2
 800fbaa:	fb02 f200 	mul.w	r2, r2, r0
 800fbae:	1a9b      	subs	r3, r3, r2
 800fbb0:	440b      	add	r3, r1
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7ff fbfc 	bl	800f3b0 <ld_word>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	617b      	str	r3, [r7, #20]
			break;
 800fbbc:	e030      	b.n	800fc20 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	899b      	ldrh	r3, [r3, #12]
 800fbc6:	089b      	lsrs	r3, r3, #2
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	4619      	mov	r1, r3
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	fbb3 f3f1 	udiv	r3, r3, r1
 800fbd2:	4413      	add	r3, r2
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	6938      	ldr	r0, [r7, #16]
 800fbd8:	f7ff fe9a 	bl	800f910 <move_window>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d11d      	bne.n	800fc1e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	009b      	lsls	r3, r3, #2
 800fbec:	693a      	ldr	r2, [r7, #16]
 800fbee:	8992      	ldrh	r2, [r2, #12]
 800fbf0:	fbb3 f0f2 	udiv	r0, r3, r2
 800fbf4:	fb02 f200 	mul.w	r2, r2, r0
 800fbf8:	1a9b      	subs	r3, r3, r2
 800fbfa:	440b      	add	r3, r1
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7ff fbef 	bl	800f3e0 <ld_dword>
 800fc02:	4603      	mov	r3, r0
 800fc04:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fc08:	617b      	str	r3, [r7, #20]
			break;
 800fc0a:	e009      	b.n	800fc20 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	617b      	str	r3, [r7, #20]
 800fc10:	e006      	b.n	800fc20 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc12:	bf00      	nop
 800fc14:	e004      	b.n	800fc20 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc16:	bf00      	nop
 800fc18:	e002      	b.n	800fc20 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fc1a:	bf00      	nop
 800fc1c:	e000      	b.n	800fc20 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fc1e:	bf00      	nop
		}
	}

	return val;
 800fc20:	697b      	ldr	r3, [r7, #20]
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	3718      	adds	r7, #24
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}

0800fc2a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fc2a:	b590      	push	{r4, r7, lr}
 800fc2c:	b089      	sub	sp, #36	; 0x24
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	60f8      	str	r0, [r7, #12]
 800fc32:	60b9      	str	r1, [r7, #8]
 800fc34:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fc36:	2302      	movs	r3, #2
 800fc38:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	f240 8106 	bls.w	800fe4e <put_fat+0x224>
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	699b      	ldr	r3, [r3, #24]
 800fc46:	68ba      	ldr	r2, [r7, #8]
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	f080 8100 	bcs.w	800fe4e <put_fat+0x224>
		switch (fs->fs_type) {
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	781b      	ldrb	r3, [r3, #0]
 800fc52:	2b02      	cmp	r3, #2
 800fc54:	f000 8088 	beq.w	800fd68 <put_fat+0x13e>
 800fc58:	2b03      	cmp	r3, #3
 800fc5a:	f000 80b0 	beq.w	800fdbe <put_fat+0x194>
 800fc5e:	2b01      	cmp	r3, #1
 800fc60:	f040 80f5 	bne.w	800fe4e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	61bb      	str	r3, [r7, #24]
 800fc68:	69bb      	ldr	r3, [r7, #24]
 800fc6a:	085b      	lsrs	r3, r3, #1
 800fc6c:	69ba      	ldr	r2, [r7, #24]
 800fc6e:	4413      	add	r3, r2
 800fc70:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	899b      	ldrh	r3, [r3, #12]
 800fc7a:	4619      	mov	r1, r3
 800fc7c:	69bb      	ldr	r3, [r7, #24]
 800fc7e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc82:	4413      	add	r3, r2
 800fc84:	4619      	mov	r1, r3
 800fc86:	68f8      	ldr	r0, [r7, #12]
 800fc88:	f7ff fe42 	bl	800f910 <move_window>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc90:	7ffb      	ldrb	r3, [r7, #31]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	f040 80d4 	bne.w	800fe40 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fc9e:	69bb      	ldr	r3, [r7, #24]
 800fca0:	1c5a      	adds	r2, r3, #1
 800fca2:	61ba      	str	r2, [r7, #24]
 800fca4:	68fa      	ldr	r2, [r7, #12]
 800fca6:	8992      	ldrh	r2, [r2, #12]
 800fca8:	fbb3 f0f2 	udiv	r0, r3, r2
 800fcac:	fb02 f200 	mul.w	r2, r2, r0
 800fcb0:	1a9b      	subs	r3, r3, r2
 800fcb2:	440b      	add	r3, r1
 800fcb4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	f003 0301 	and.w	r3, r3, #1
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d00d      	beq.n	800fcdc <put_fat+0xb2>
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	b25b      	sxtb	r3, r3
 800fcc6:	f003 030f 	and.w	r3, r3, #15
 800fcca:	b25a      	sxtb	r2, r3
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	b2db      	uxtb	r3, r3
 800fcd0:	011b      	lsls	r3, r3, #4
 800fcd2:	b25b      	sxtb	r3, r3
 800fcd4:	4313      	orrs	r3, r2
 800fcd6:	b25b      	sxtb	r3, r3
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	e001      	b.n	800fce0 <put_fat+0xb6>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	b2db      	uxtb	r3, r3
 800fce0:	697a      	ldr	r2, [r7, #20]
 800fce2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	2201      	movs	r2, #1
 800fce8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	899b      	ldrh	r3, [r3, #12]
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	69bb      	ldr	r3, [r7, #24]
 800fcf6:	fbb3 f3f1 	udiv	r3, r3, r1
 800fcfa:	4413      	add	r3, r2
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	68f8      	ldr	r0, [r7, #12]
 800fd00:	f7ff fe06 	bl	800f910 <move_window>
 800fd04:	4603      	mov	r3, r0
 800fd06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd08:	7ffb      	ldrb	r3, [r7, #31]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	f040 809a 	bne.w	800fe44 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	899b      	ldrh	r3, [r3, #12]
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	69bb      	ldr	r3, [r7, #24]
 800fd1e:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd22:	fb02 f200 	mul.w	r2, r2, r0
 800fd26:	1a9b      	subs	r3, r3, r2
 800fd28:	440b      	add	r3, r1
 800fd2a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	f003 0301 	and.w	r3, r3, #1
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d003      	beq.n	800fd3e <put_fat+0x114>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	091b      	lsrs	r3, r3, #4
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	e00e      	b.n	800fd5c <put_fat+0x132>
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	781b      	ldrb	r3, [r3, #0]
 800fd42:	b25b      	sxtb	r3, r3
 800fd44:	f023 030f 	bic.w	r3, r3, #15
 800fd48:	b25a      	sxtb	r2, r3
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	0a1b      	lsrs	r3, r3, #8
 800fd4e:	b25b      	sxtb	r3, r3
 800fd50:	f003 030f 	and.w	r3, r3, #15
 800fd54:	b25b      	sxtb	r3, r3
 800fd56:	4313      	orrs	r3, r2
 800fd58:	b25b      	sxtb	r3, r3
 800fd5a:	b2db      	uxtb	r3, r3
 800fd5c:	697a      	ldr	r2, [r7, #20]
 800fd5e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2201      	movs	r2, #1
 800fd64:	70da      	strb	r2, [r3, #3]
			break;
 800fd66:	e072      	b.n	800fe4e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	899b      	ldrh	r3, [r3, #12]
 800fd70:	085b      	lsrs	r3, r3, #1
 800fd72:	b29b      	uxth	r3, r3
 800fd74:	4619      	mov	r1, r3
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	fbb3 f3f1 	udiv	r3, r3, r1
 800fd7c:	4413      	add	r3, r2
 800fd7e:	4619      	mov	r1, r3
 800fd80:	68f8      	ldr	r0, [r7, #12]
 800fd82:	f7ff fdc5 	bl	800f910 <move_window>
 800fd86:	4603      	mov	r3, r0
 800fd88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd8a:	7ffb      	ldrb	r3, [r7, #31]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d15b      	bne.n	800fe48 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	005b      	lsls	r3, r3, #1
 800fd9a:	68fa      	ldr	r2, [r7, #12]
 800fd9c:	8992      	ldrh	r2, [r2, #12]
 800fd9e:	fbb3 f0f2 	udiv	r0, r3, r2
 800fda2:	fb02 f200 	mul.w	r2, r2, r0
 800fda6:	1a9b      	subs	r3, r3, r2
 800fda8:	440b      	add	r3, r1
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	b292      	uxth	r2, r2
 800fdae:	4611      	mov	r1, r2
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7ff fb38 	bl	800f426 <st_word>
			fs->wflag = 1;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2201      	movs	r2, #1
 800fdba:	70da      	strb	r2, [r3, #3]
			break;
 800fdbc:	e047      	b.n	800fe4e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	899b      	ldrh	r3, [r3, #12]
 800fdc6:	089b      	lsrs	r3, r3, #2
 800fdc8:	b29b      	uxth	r3, r3
 800fdca:	4619      	mov	r1, r3
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	fbb3 f3f1 	udiv	r3, r3, r1
 800fdd2:	4413      	add	r3, r2
 800fdd4:	4619      	mov	r1, r3
 800fdd6:	68f8      	ldr	r0, [r7, #12]
 800fdd8:	f7ff fd9a 	bl	800f910 <move_window>
 800fddc:	4603      	mov	r3, r0
 800fdde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fde0:	7ffb      	ldrb	r3, [r7, #31]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d132      	bne.n	800fe4c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	68fa      	ldr	r2, [r7, #12]
 800fdf8:	8992      	ldrh	r2, [r2, #12]
 800fdfa:	fbb3 f0f2 	udiv	r0, r3, r2
 800fdfe:	fb02 f200 	mul.w	r2, r2, r0
 800fe02:	1a9b      	subs	r3, r3, r2
 800fe04:	440b      	add	r3, r1
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7ff faea 	bl	800f3e0 <ld_dword>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fe12:	4323      	orrs	r3, r4
 800fe14:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	009b      	lsls	r3, r3, #2
 800fe20:	68fa      	ldr	r2, [r7, #12]
 800fe22:	8992      	ldrh	r2, [r2, #12]
 800fe24:	fbb3 f0f2 	udiv	r0, r3, r2
 800fe28:	fb02 f200 	mul.w	r2, r2, r0
 800fe2c:	1a9b      	subs	r3, r3, r2
 800fe2e:	440b      	add	r3, r1
 800fe30:	6879      	ldr	r1, [r7, #4]
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7ff fb12 	bl	800f45c <st_dword>
			fs->wflag = 1;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	2201      	movs	r2, #1
 800fe3c:	70da      	strb	r2, [r3, #3]
			break;
 800fe3e:	e006      	b.n	800fe4e <put_fat+0x224>
			if (res != FR_OK) break;
 800fe40:	bf00      	nop
 800fe42:	e004      	b.n	800fe4e <put_fat+0x224>
			if (res != FR_OK) break;
 800fe44:	bf00      	nop
 800fe46:	e002      	b.n	800fe4e <put_fat+0x224>
			if (res != FR_OK) break;
 800fe48:	bf00      	nop
 800fe4a:	e000      	b.n	800fe4e <put_fat+0x224>
			if (res != FR_OK) break;
 800fe4c:	bf00      	nop
		}
	}
	return res;
 800fe4e:	7ffb      	ldrb	r3, [r7, #31]
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3724      	adds	r7, #36	; 0x24
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd90      	pop	{r4, r7, pc}

0800fe58 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b088      	sub	sp, #32
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	60f8      	str	r0, [r7, #12]
 800fe60:	60b9      	str	r1, [r7, #8]
 800fe62:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fe64:	2300      	movs	r3, #0
 800fe66:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	d904      	bls.n	800fe7e <remove_chain+0x26>
 800fe74:	69bb      	ldr	r3, [r7, #24]
 800fe76:	699b      	ldr	r3, [r3, #24]
 800fe78:	68ba      	ldr	r2, [r7, #8]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d301      	bcc.n	800fe82 <remove_chain+0x2a>
 800fe7e:	2302      	movs	r3, #2
 800fe80:	e04b      	b.n	800ff1a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d00c      	beq.n	800fea2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fe88:	f04f 32ff 	mov.w	r2, #4294967295
 800fe8c:	6879      	ldr	r1, [r7, #4]
 800fe8e:	69b8      	ldr	r0, [r7, #24]
 800fe90:	f7ff fecb 	bl	800fc2a <put_fat>
 800fe94:	4603      	mov	r3, r0
 800fe96:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fe98:	7ffb      	ldrb	r3, [r7, #31]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d001      	beq.n	800fea2 <remove_chain+0x4a>
 800fe9e:	7ffb      	ldrb	r3, [r7, #31]
 800fea0:	e03b      	b.n	800ff1a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fea2:	68b9      	ldr	r1, [r7, #8]
 800fea4:	68f8      	ldr	r0, [r7, #12]
 800fea6:	f7ff fdf0 	bl	800fa8a <get_fat>
 800feaa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d031      	beq.n	800ff16 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	2b01      	cmp	r3, #1
 800feb6:	d101      	bne.n	800febc <remove_chain+0x64>
 800feb8:	2302      	movs	r3, #2
 800feba:	e02e      	b.n	800ff1a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fec2:	d101      	bne.n	800fec8 <remove_chain+0x70>
 800fec4:	2301      	movs	r3, #1
 800fec6:	e028      	b.n	800ff1a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fec8:	2200      	movs	r2, #0
 800feca:	68b9      	ldr	r1, [r7, #8]
 800fecc:	69b8      	ldr	r0, [r7, #24]
 800fece:	f7ff feac 	bl	800fc2a <put_fat>
 800fed2:	4603      	mov	r3, r0
 800fed4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fed6:	7ffb      	ldrb	r3, [r7, #31]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d001      	beq.n	800fee0 <remove_chain+0x88>
 800fedc:	7ffb      	ldrb	r3, [r7, #31]
 800fede:	e01c      	b.n	800ff1a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	695a      	ldr	r2, [r3, #20]
 800fee4:	69bb      	ldr	r3, [r7, #24]
 800fee6:	699b      	ldr	r3, [r3, #24]
 800fee8:	3b02      	subs	r3, #2
 800feea:	429a      	cmp	r2, r3
 800feec:	d20b      	bcs.n	800ff06 <remove_chain+0xae>
			fs->free_clst++;
 800feee:	69bb      	ldr	r3, [r7, #24]
 800fef0:	695b      	ldr	r3, [r3, #20]
 800fef2:	1c5a      	adds	r2, r3, #1
 800fef4:	69bb      	ldr	r3, [r7, #24]
 800fef6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fef8:	69bb      	ldr	r3, [r7, #24]
 800fefa:	791b      	ldrb	r3, [r3, #4]
 800fefc:	f043 0301 	orr.w	r3, r3, #1
 800ff00:	b2da      	uxtb	r2, r3
 800ff02:	69bb      	ldr	r3, [r7, #24]
 800ff04:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ff0a:	69bb      	ldr	r3, [r7, #24]
 800ff0c:	699b      	ldr	r3, [r3, #24]
 800ff0e:	68ba      	ldr	r2, [r7, #8]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d3c6      	bcc.n	800fea2 <remove_chain+0x4a>
 800ff14:	e000      	b.n	800ff18 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ff16:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ff18:	2300      	movs	r3, #0
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3720      	adds	r7, #32
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}

0800ff22 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ff22:	b580      	push	{r7, lr}
 800ff24:	b088      	sub	sp, #32
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	6078      	str	r0, [r7, #4]
 800ff2a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d10d      	bne.n	800ff54 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	691b      	ldr	r3, [r3, #16]
 800ff3c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ff3e:	69bb      	ldr	r3, [r7, #24]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d004      	beq.n	800ff4e <create_chain+0x2c>
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	699b      	ldr	r3, [r3, #24]
 800ff48:	69ba      	ldr	r2, [r7, #24]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d31b      	bcc.n	800ff86 <create_chain+0x64>
 800ff4e:	2301      	movs	r3, #1
 800ff50:	61bb      	str	r3, [r7, #24]
 800ff52:	e018      	b.n	800ff86 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ff54:	6839      	ldr	r1, [r7, #0]
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f7ff fd97 	bl	800fa8a <get_fat>
 800ff5c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d801      	bhi.n	800ff68 <create_chain+0x46>
 800ff64:	2301      	movs	r3, #1
 800ff66:	e070      	b.n	801004a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff6e:	d101      	bne.n	800ff74 <create_chain+0x52>
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	e06a      	b.n	801004a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	699b      	ldr	r3, [r3, #24]
 800ff78:	68fa      	ldr	r2, [r7, #12]
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d201      	bcs.n	800ff82 <create_chain+0x60>
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	e063      	b.n	801004a <create_chain+0x128>
		scl = clst;
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ff86:	69bb      	ldr	r3, [r7, #24]
 800ff88:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ff8a:	69fb      	ldr	r3, [r7, #28]
 800ff8c:	3301      	adds	r3, #1
 800ff8e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	699b      	ldr	r3, [r3, #24]
 800ff94:	69fa      	ldr	r2, [r7, #28]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d307      	bcc.n	800ffaa <create_chain+0x88>
				ncl = 2;
 800ff9a:	2302      	movs	r3, #2
 800ff9c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ff9e:	69fa      	ldr	r2, [r7, #28]
 800ffa0:	69bb      	ldr	r3, [r7, #24]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d901      	bls.n	800ffaa <create_chain+0x88>
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	e04f      	b.n	801004a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ffaa:	69f9      	ldr	r1, [r7, #28]
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f7ff fd6c 	bl	800fa8a <get_fat>
 800ffb2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d00e      	beq.n	800ffd8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d003      	beq.n	800ffc8 <create_chain+0xa6>
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffc6:	d101      	bne.n	800ffcc <create_chain+0xaa>
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	e03e      	b.n	801004a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ffcc:	69fa      	ldr	r2, [r7, #28]
 800ffce:	69bb      	ldr	r3, [r7, #24]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d1da      	bne.n	800ff8a <create_chain+0x68>
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	e038      	b.n	801004a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ffd8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ffda:	f04f 32ff 	mov.w	r2, #4294967295
 800ffde:	69f9      	ldr	r1, [r7, #28]
 800ffe0:	6938      	ldr	r0, [r7, #16]
 800ffe2:	f7ff fe22 	bl	800fc2a <put_fat>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ffea:	7dfb      	ldrb	r3, [r7, #23]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d109      	bne.n	8010004 <create_chain+0xe2>
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d006      	beq.n	8010004 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fff6:	69fa      	ldr	r2, [r7, #28]
 800fff8:	6839      	ldr	r1, [r7, #0]
 800fffa:	6938      	ldr	r0, [r7, #16]
 800fffc:	f7ff fe15 	bl	800fc2a <put_fat>
 8010000:	4603      	mov	r3, r0
 8010002:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010004:	7dfb      	ldrb	r3, [r7, #23]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d116      	bne.n	8010038 <create_chain+0x116>
		fs->last_clst = ncl;
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	69fa      	ldr	r2, [r7, #28]
 801000e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	695a      	ldr	r2, [r3, #20]
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	699b      	ldr	r3, [r3, #24]
 8010018:	3b02      	subs	r3, #2
 801001a:	429a      	cmp	r2, r3
 801001c:	d804      	bhi.n	8010028 <create_chain+0x106>
 801001e:	693b      	ldr	r3, [r7, #16]
 8010020:	695b      	ldr	r3, [r3, #20]
 8010022:	1e5a      	subs	r2, r3, #1
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010028:	693b      	ldr	r3, [r7, #16]
 801002a:	791b      	ldrb	r3, [r3, #4]
 801002c:	f043 0301 	orr.w	r3, r3, #1
 8010030:	b2da      	uxtb	r2, r3
 8010032:	693b      	ldr	r3, [r7, #16]
 8010034:	711a      	strb	r2, [r3, #4]
 8010036:	e007      	b.n	8010048 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010038:	7dfb      	ldrb	r3, [r7, #23]
 801003a:	2b01      	cmp	r3, #1
 801003c:	d102      	bne.n	8010044 <create_chain+0x122>
 801003e:	f04f 33ff 	mov.w	r3, #4294967295
 8010042:	e000      	b.n	8010046 <create_chain+0x124>
 8010044:	2301      	movs	r3, #1
 8010046:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010048:	69fb      	ldr	r3, [r7, #28]
}
 801004a:	4618      	mov	r0, r3
 801004c:	3720      	adds	r7, #32
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}

08010052 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010052:	b480      	push	{r7}
 8010054:	b087      	sub	sp, #28
 8010056:	af00      	add	r7, sp, #0
 8010058:	6078      	str	r0, [r7, #4]
 801005a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010066:	3304      	adds	r3, #4
 8010068:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	899b      	ldrh	r3, [r3, #12]
 801006e:	461a      	mov	r2, r3
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	fbb3 f3f2 	udiv	r3, r3, r2
 8010076:	68fa      	ldr	r2, [r7, #12]
 8010078:	8952      	ldrh	r2, [r2, #10]
 801007a:	fbb3 f3f2 	udiv	r3, r3, r2
 801007e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	1d1a      	adds	r2, r3, #4
 8010084:	613a      	str	r2, [r7, #16]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d101      	bne.n	8010094 <clmt_clust+0x42>
 8010090:	2300      	movs	r3, #0
 8010092:	e010      	b.n	80100b6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8010094:	697a      	ldr	r2, [r7, #20]
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	429a      	cmp	r2, r3
 801009a:	d307      	bcc.n	80100ac <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801009c:	697a      	ldr	r2, [r7, #20]
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	1ad3      	subs	r3, r2, r3
 80100a2:	617b      	str	r3, [r7, #20]
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	3304      	adds	r3, #4
 80100a8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80100aa:	e7e9      	b.n	8010080 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80100ac:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80100ae:	693b      	ldr	r3, [r7, #16]
 80100b0:	681a      	ldr	r2, [r3, #0]
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	4413      	add	r3, r2
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	371c      	adds	r7, #28
 80100ba:	46bd      	mov	sp, r7
 80100bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c0:	4770      	bx	lr

080100c2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80100c2:	b580      	push	{r7, lr}
 80100c4:	b086      	sub	sp, #24
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
 80100ca:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80100d8:	d204      	bcs.n	80100e4 <dir_sdi+0x22>
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	f003 031f 	and.w	r3, r3, #31
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d001      	beq.n	80100e8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80100e4:	2302      	movs	r3, #2
 80100e6:	e071      	b.n	80101cc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	683a      	ldr	r2, [r7, #0]
 80100ec:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	689b      	ldr	r3, [r3, #8]
 80100f2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d106      	bne.n	8010108 <dir_sdi+0x46>
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	781b      	ldrb	r3, [r3, #0]
 80100fe:	2b02      	cmp	r3, #2
 8010100:	d902      	bls.n	8010108 <dir_sdi+0x46>
		clst = fs->dirbase;
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010106:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d10c      	bne.n	8010128 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	095b      	lsrs	r3, r3, #5
 8010112:	693a      	ldr	r2, [r7, #16]
 8010114:	8912      	ldrh	r2, [r2, #8]
 8010116:	4293      	cmp	r3, r2
 8010118:	d301      	bcc.n	801011e <dir_sdi+0x5c>
 801011a:	2302      	movs	r3, #2
 801011c:	e056      	b.n	80101cc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	61da      	str	r2, [r3, #28]
 8010126:	e02d      	b.n	8010184 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	895b      	ldrh	r3, [r3, #10]
 801012c:	461a      	mov	r2, r3
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	899b      	ldrh	r3, [r3, #12]
 8010132:	fb03 f302 	mul.w	r3, r3, r2
 8010136:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010138:	e019      	b.n	801016e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6979      	ldr	r1, [r7, #20]
 801013e:	4618      	mov	r0, r3
 8010140:	f7ff fca3 	bl	800fa8a <get_fat>
 8010144:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	f1b3 3fff 	cmp.w	r3, #4294967295
 801014c:	d101      	bne.n	8010152 <dir_sdi+0x90>
 801014e:	2301      	movs	r3, #1
 8010150:	e03c      	b.n	80101cc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	2b01      	cmp	r3, #1
 8010156:	d904      	bls.n	8010162 <dir_sdi+0xa0>
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	699b      	ldr	r3, [r3, #24]
 801015c:	697a      	ldr	r2, [r7, #20]
 801015e:	429a      	cmp	r2, r3
 8010160:	d301      	bcc.n	8010166 <dir_sdi+0xa4>
 8010162:	2302      	movs	r3, #2
 8010164:	e032      	b.n	80101cc <dir_sdi+0x10a>
			ofs -= csz;
 8010166:	683a      	ldr	r2, [r7, #0]
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	1ad3      	subs	r3, r2, r3
 801016c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801016e:	683a      	ldr	r2, [r7, #0]
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	429a      	cmp	r2, r3
 8010174:	d2e1      	bcs.n	801013a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8010176:	6979      	ldr	r1, [r7, #20]
 8010178:	6938      	ldr	r0, [r7, #16]
 801017a:	f7ff fc67 	bl	800fa4c <clust2sect>
 801017e:	4602      	mov	r2, r0
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	697a      	ldr	r2, [r7, #20]
 8010188:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	69db      	ldr	r3, [r3, #28]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d101      	bne.n	8010196 <dir_sdi+0xd4>
 8010192:	2302      	movs	r3, #2
 8010194:	e01a      	b.n	80101cc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	69da      	ldr	r2, [r3, #28]
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	899b      	ldrh	r3, [r3, #12]
 801019e:	4619      	mov	r1, r3
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80101a6:	441a      	add	r2, r3
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80101ac:	693b      	ldr	r3, [r7, #16]
 80101ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	899b      	ldrh	r3, [r3, #12]
 80101b6:	461a      	mov	r2, r3
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80101be:	fb02 f200 	mul.w	r2, r2, r0
 80101c2:	1a9b      	subs	r3, r3, r2
 80101c4:	18ca      	adds	r2, r1, r3
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80101ca:	2300      	movs	r3, #0
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3718      	adds	r7, #24
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b086      	sub	sp, #24
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	695b      	ldr	r3, [r3, #20]
 80101e8:	3320      	adds	r3, #32
 80101ea:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	69db      	ldr	r3, [r3, #28]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d003      	beq.n	80101fc <dir_next+0x28>
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80101fa:	d301      	bcc.n	8010200 <dir_next+0x2c>
 80101fc:	2304      	movs	r3, #4
 80101fe:	e0bb      	b.n	8010378 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	899b      	ldrh	r3, [r3, #12]
 8010204:	461a      	mov	r2, r3
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	fbb3 f1f2 	udiv	r1, r3, r2
 801020c:	fb02 f201 	mul.w	r2, r2, r1
 8010210:	1a9b      	subs	r3, r3, r2
 8010212:	2b00      	cmp	r3, #0
 8010214:	f040 809d 	bne.w	8010352 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	69db      	ldr	r3, [r3, #28]
 801021c:	1c5a      	adds	r2, r3, #1
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	699b      	ldr	r3, [r3, #24]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d10b      	bne.n	8010242 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	095b      	lsrs	r3, r3, #5
 801022e:	68fa      	ldr	r2, [r7, #12]
 8010230:	8912      	ldrh	r2, [r2, #8]
 8010232:	4293      	cmp	r3, r2
 8010234:	f0c0 808d 	bcc.w	8010352 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2200      	movs	r2, #0
 801023c:	61da      	str	r2, [r3, #28]
 801023e:	2304      	movs	r3, #4
 8010240:	e09a      	b.n	8010378 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	899b      	ldrh	r3, [r3, #12]
 8010246:	461a      	mov	r2, r3
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	fbb3 f3f2 	udiv	r3, r3, r2
 801024e:	68fa      	ldr	r2, [r7, #12]
 8010250:	8952      	ldrh	r2, [r2, #10]
 8010252:	3a01      	subs	r2, #1
 8010254:	4013      	ands	r3, r2
 8010256:	2b00      	cmp	r3, #0
 8010258:	d17b      	bne.n	8010352 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801025a:	687a      	ldr	r2, [r7, #4]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	699b      	ldr	r3, [r3, #24]
 8010260:	4619      	mov	r1, r3
 8010262:	4610      	mov	r0, r2
 8010264:	f7ff fc11 	bl	800fa8a <get_fat>
 8010268:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	2b01      	cmp	r3, #1
 801026e:	d801      	bhi.n	8010274 <dir_next+0xa0>
 8010270:	2302      	movs	r3, #2
 8010272:	e081      	b.n	8010378 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	f1b3 3fff 	cmp.w	r3, #4294967295
 801027a:	d101      	bne.n	8010280 <dir_next+0xac>
 801027c:	2301      	movs	r3, #1
 801027e:	e07b      	b.n	8010378 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	699b      	ldr	r3, [r3, #24]
 8010284:	697a      	ldr	r2, [r7, #20]
 8010286:	429a      	cmp	r2, r3
 8010288:	d359      	bcc.n	801033e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d104      	bne.n	801029a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2200      	movs	r2, #0
 8010294:	61da      	str	r2, [r3, #28]
 8010296:	2304      	movs	r3, #4
 8010298:	e06e      	b.n	8010378 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801029a:	687a      	ldr	r2, [r7, #4]
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	699b      	ldr	r3, [r3, #24]
 80102a0:	4619      	mov	r1, r3
 80102a2:	4610      	mov	r0, r2
 80102a4:	f7ff fe3d 	bl	800ff22 <create_chain>
 80102a8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d101      	bne.n	80102b4 <dir_next+0xe0>
 80102b0:	2307      	movs	r3, #7
 80102b2:	e061      	b.n	8010378 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	2b01      	cmp	r3, #1
 80102b8:	d101      	bne.n	80102be <dir_next+0xea>
 80102ba:	2302      	movs	r3, #2
 80102bc:	e05c      	b.n	8010378 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102c4:	d101      	bne.n	80102ca <dir_next+0xf6>
 80102c6:	2301      	movs	r3, #1
 80102c8:	e056      	b.n	8010378 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80102ca:	68f8      	ldr	r0, [r7, #12]
 80102cc:	f7ff fadc 	bl	800f888 <sync_window>
 80102d0:	4603      	mov	r3, r0
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d001      	beq.n	80102da <dir_next+0x106>
 80102d6:	2301      	movs	r3, #1
 80102d8:	e04e      	b.n	8010378 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	899b      	ldrh	r3, [r3, #12]
 80102e4:	461a      	mov	r2, r3
 80102e6:	2100      	movs	r1, #0
 80102e8:	f7ff f905 	bl	800f4f6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80102ec:	2300      	movs	r3, #0
 80102ee:	613b      	str	r3, [r7, #16]
 80102f0:	6979      	ldr	r1, [r7, #20]
 80102f2:	68f8      	ldr	r0, [r7, #12]
 80102f4:	f7ff fbaa 	bl	800fa4c <clust2sect>
 80102f8:	4602      	mov	r2, r0
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	631a      	str	r2, [r3, #48]	; 0x30
 80102fe:	e012      	b.n	8010326 <dir_next+0x152>
						fs->wflag = 1;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	2201      	movs	r2, #1
 8010304:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010306:	68f8      	ldr	r0, [r7, #12]
 8010308:	f7ff fabe 	bl	800f888 <sync_window>
 801030c:	4603      	mov	r3, r0
 801030e:	2b00      	cmp	r3, #0
 8010310:	d001      	beq.n	8010316 <dir_next+0x142>
 8010312:	2301      	movs	r3, #1
 8010314:	e030      	b.n	8010378 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	3301      	adds	r3, #1
 801031a:	613b      	str	r3, [r7, #16]
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010320:	1c5a      	adds	r2, r3, #1
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	631a      	str	r2, [r3, #48]	; 0x30
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	895b      	ldrh	r3, [r3, #10]
 801032a:	461a      	mov	r2, r3
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	4293      	cmp	r3, r2
 8010330:	d3e6      	bcc.n	8010300 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	1ad2      	subs	r2, r2, r3
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	697a      	ldr	r2, [r7, #20]
 8010342:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010344:	6979      	ldr	r1, [r7, #20]
 8010346:	68f8      	ldr	r0, [r7, #12]
 8010348:	f7ff fb80 	bl	800fa4c <clust2sect>
 801034c:	4602      	mov	r2, r0
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	68ba      	ldr	r2, [r7, #8]
 8010356:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	899b      	ldrh	r3, [r3, #12]
 8010362:	461a      	mov	r2, r3
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	fbb3 f0f2 	udiv	r0, r3, r2
 801036a:	fb02 f200 	mul.w	r2, r2, r0
 801036e:	1a9b      	subs	r3, r3, r2
 8010370:	18ca      	adds	r2, r1, r3
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010376:	2300      	movs	r3, #0
}
 8010378:	4618      	mov	r0, r3
 801037a:	3718      	adds	r7, #24
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}

08010380 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b086      	sub	sp, #24
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010390:	2100      	movs	r1, #0
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	f7ff fe95 	bl	80100c2 <dir_sdi>
 8010398:	4603      	mov	r3, r0
 801039a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801039c:	7dfb      	ldrb	r3, [r7, #23]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d12b      	bne.n	80103fa <dir_alloc+0x7a>
		n = 0;
 80103a2:	2300      	movs	r3, #0
 80103a4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	69db      	ldr	r3, [r3, #28]
 80103aa:	4619      	mov	r1, r3
 80103ac:	68f8      	ldr	r0, [r7, #12]
 80103ae:	f7ff faaf 	bl	800f910 <move_window>
 80103b2:	4603      	mov	r3, r0
 80103b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80103b6:	7dfb      	ldrb	r3, [r7, #23]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d11d      	bne.n	80103f8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6a1b      	ldr	r3, [r3, #32]
 80103c0:	781b      	ldrb	r3, [r3, #0]
 80103c2:	2be5      	cmp	r3, #229	; 0xe5
 80103c4:	d004      	beq.n	80103d0 <dir_alloc+0x50>
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6a1b      	ldr	r3, [r3, #32]
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d107      	bne.n	80103e0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	3301      	adds	r3, #1
 80103d4:	613b      	str	r3, [r7, #16]
 80103d6:	693a      	ldr	r2, [r7, #16]
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	429a      	cmp	r2, r3
 80103dc:	d102      	bne.n	80103e4 <dir_alloc+0x64>
 80103de:	e00c      	b.n	80103fa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80103e0:	2300      	movs	r3, #0
 80103e2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80103e4:	2101      	movs	r1, #1
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f7ff fef4 	bl	80101d4 <dir_next>
 80103ec:	4603      	mov	r3, r0
 80103ee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80103f0:	7dfb      	ldrb	r3, [r7, #23]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d0d7      	beq.n	80103a6 <dir_alloc+0x26>
 80103f6:	e000      	b.n	80103fa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80103f8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80103fa:	7dfb      	ldrb	r3, [r7, #23]
 80103fc:	2b04      	cmp	r3, #4
 80103fe:	d101      	bne.n	8010404 <dir_alloc+0x84>
 8010400:	2307      	movs	r3, #7
 8010402:	75fb      	strb	r3, [r7, #23]
	return res;
 8010404:	7dfb      	ldrb	r3, [r7, #23]
}
 8010406:	4618      	mov	r0, r3
 8010408:	3718      	adds	r7, #24
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}

0801040e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801040e:	b580      	push	{r7, lr}
 8010410:	b084      	sub	sp, #16
 8010412:	af00      	add	r7, sp, #0
 8010414:	6078      	str	r0, [r7, #4]
 8010416:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	331a      	adds	r3, #26
 801041c:	4618      	mov	r0, r3
 801041e:	f7fe ffc7 	bl	800f3b0 <ld_word>
 8010422:	4603      	mov	r3, r0
 8010424:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	781b      	ldrb	r3, [r3, #0]
 801042a:	2b03      	cmp	r3, #3
 801042c:	d109      	bne.n	8010442 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	3314      	adds	r3, #20
 8010432:	4618      	mov	r0, r3
 8010434:	f7fe ffbc 	bl	800f3b0 <ld_word>
 8010438:	4603      	mov	r3, r0
 801043a:	041b      	lsls	r3, r3, #16
 801043c:	68fa      	ldr	r2, [r7, #12]
 801043e:	4313      	orrs	r3, r2
 8010440:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010442:	68fb      	ldr	r3, [r7, #12]
}
 8010444:	4618      	mov	r0, r3
 8010446:	3710      	adds	r7, #16
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}

0801044c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b084      	sub	sp, #16
 8010450:	af00      	add	r7, sp, #0
 8010452:	60f8      	str	r0, [r7, #12]
 8010454:	60b9      	str	r1, [r7, #8]
 8010456:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	331a      	adds	r3, #26
 801045c:	687a      	ldr	r2, [r7, #4]
 801045e:	b292      	uxth	r2, r2
 8010460:	4611      	mov	r1, r2
 8010462:	4618      	mov	r0, r3
 8010464:	f7fe ffdf 	bl	800f426 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	781b      	ldrb	r3, [r3, #0]
 801046c:	2b03      	cmp	r3, #3
 801046e:	d109      	bne.n	8010484 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	f103 0214 	add.w	r2, r3, #20
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	0c1b      	lsrs	r3, r3, #16
 801047a:	b29b      	uxth	r3, r3
 801047c:	4619      	mov	r1, r3
 801047e:	4610      	mov	r0, r2
 8010480:	f7fe ffd1 	bl	800f426 <st_word>
	}
}
 8010484:	bf00      	nop
 8010486:	3710      	adds	r7, #16
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b086      	sub	sp, #24
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801049a:	2100      	movs	r1, #0
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f7ff fe10 	bl	80100c2 <dir_sdi>
 80104a2:	4603      	mov	r3, r0
 80104a4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80104a6:	7dfb      	ldrb	r3, [r7, #23]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d001      	beq.n	80104b0 <dir_find+0x24>
 80104ac:	7dfb      	ldrb	r3, [r7, #23]
 80104ae:	e03e      	b.n	801052e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	69db      	ldr	r3, [r3, #28]
 80104b4:	4619      	mov	r1, r3
 80104b6:	6938      	ldr	r0, [r7, #16]
 80104b8:	f7ff fa2a 	bl	800f910 <move_window>
 80104bc:	4603      	mov	r3, r0
 80104be:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80104c0:	7dfb      	ldrb	r3, [r7, #23]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d12f      	bne.n	8010526 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6a1b      	ldr	r3, [r3, #32]
 80104ca:	781b      	ldrb	r3, [r3, #0]
 80104cc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80104ce:	7bfb      	ldrb	r3, [r7, #15]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d102      	bne.n	80104da <dir_find+0x4e>
 80104d4:	2304      	movs	r3, #4
 80104d6:	75fb      	strb	r3, [r7, #23]
 80104d8:	e028      	b.n	801052c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6a1b      	ldr	r3, [r3, #32]
 80104de:	330b      	adds	r3, #11
 80104e0:	781b      	ldrb	r3, [r3, #0]
 80104e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80104e6:	b2da      	uxtb	r2, r3
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	6a1b      	ldr	r3, [r3, #32]
 80104f0:	330b      	adds	r3, #11
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	f003 0308 	and.w	r3, r3, #8
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d10a      	bne.n	8010512 <dir_find+0x86>
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6a18      	ldr	r0, [r3, #32]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	3324      	adds	r3, #36	; 0x24
 8010504:	220b      	movs	r2, #11
 8010506:	4619      	mov	r1, r3
 8010508:	f7ff f80f 	bl	800f52a <mem_cmp>
 801050c:	4603      	mov	r3, r0
 801050e:	2b00      	cmp	r3, #0
 8010510:	d00b      	beq.n	801052a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010512:	2100      	movs	r1, #0
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f7ff fe5d 	bl	80101d4 <dir_next>
 801051a:	4603      	mov	r3, r0
 801051c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801051e:	7dfb      	ldrb	r3, [r7, #23]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d0c5      	beq.n	80104b0 <dir_find+0x24>
 8010524:	e002      	b.n	801052c <dir_find+0xa0>
		if (res != FR_OK) break;
 8010526:	bf00      	nop
 8010528:	e000      	b.n	801052c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801052a:	bf00      	nop

	return res;
 801052c:	7dfb      	ldrb	r3, [r7, #23]
}
 801052e:	4618      	mov	r0, r3
 8010530:	3718      	adds	r7, #24
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}

08010536 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010536:	b580      	push	{r7, lr}
 8010538:	b084      	sub	sp, #16
 801053a:	af00      	add	r7, sp, #0
 801053c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010544:	2101      	movs	r1, #1
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f7ff ff1a 	bl	8010380 <dir_alloc>
 801054c:	4603      	mov	r3, r0
 801054e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010550:	7bfb      	ldrb	r3, [r7, #15]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d11c      	bne.n	8010590 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	69db      	ldr	r3, [r3, #28]
 801055a:	4619      	mov	r1, r3
 801055c:	68b8      	ldr	r0, [r7, #8]
 801055e:	f7ff f9d7 	bl	800f910 <move_window>
 8010562:	4603      	mov	r3, r0
 8010564:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010566:	7bfb      	ldrb	r3, [r7, #15]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d111      	bne.n	8010590 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6a1b      	ldr	r3, [r3, #32]
 8010570:	2220      	movs	r2, #32
 8010572:	2100      	movs	r1, #0
 8010574:	4618      	mov	r0, r3
 8010576:	f7fe ffbe 	bl	800f4f6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6a18      	ldr	r0, [r3, #32]
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	3324      	adds	r3, #36	; 0x24
 8010582:	220b      	movs	r2, #11
 8010584:	4619      	mov	r1, r3
 8010586:	f7fe ff95 	bl	800f4b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	2201      	movs	r2, #1
 801058e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010590:	7bfb      	ldrb	r3, [r7, #15]
}
 8010592:	4618      	mov	r0, r3
 8010594:	3710      	adds	r7, #16
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
	...

0801059c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b088      	sub	sp, #32
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	60fb      	str	r3, [r7, #12]
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	3324      	adds	r3, #36	; 0x24
 80105b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80105b2:	220b      	movs	r2, #11
 80105b4:	2120      	movs	r1, #32
 80105b6:	68b8      	ldr	r0, [r7, #8]
 80105b8:	f7fe ff9d 	bl	800f4f6 <mem_set>
	si = i = 0; ni = 8;
 80105bc:	2300      	movs	r3, #0
 80105be:	613b      	str	r3, [r7, #16]
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	617b      	str	r3, [r7, #20]
 80105c4:	2308      	movs	r3, #8
 80105c6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	1c5a      	adds	r2, r3, #1
 80105cc:	617a      	str	r2, [r7, #20]
 80105ce:	68fa      	ldr	r2, [r7, #12]
 80105d0:	4413      	add	r3, r2
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80105d6:	7ffb      	ldrb	r3, [r7, #31]
 80105d8:	2b20      	cmp	r3, #32
 80105da:	d94e      	bls.n	801067a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80105dc:	7ffb      	ldrb	r3, [r7, #31]
 80105de:	2b2f      	cmp	r3, #47	; 0x2f
 80105e0:	d006      	beq.n	80105f0 <create_name+0x54>
 80105e2:	7ffb      	ldrb	r3, [r7, #31]
 80105e4:	2b5c      	cmp	r3, #92	; 0x5c
 80105e6:	d110      	bne.n	801060a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80105e8:	e002      	b.n	80105f0 <create_name+0x54>
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	3301      	adds	r3, #1
 80105ee:	617b      	str	r3, [r7, #20]
 80105f0:	68fa      	ldr	r2, [r7, #12]
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	4413      	add	r3, r2
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	2b2f      	cmp	r3, #47	; 0x2f
 80105fa:	d0f6      	beq.n	80105ea <create_name+0x4e>
 80105fc:	68fa      	ldr	r2, [r7, #12]
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	4413      	add	r3, r2
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	2b5c      	cmp	r3, #92	; 0x5c
 8010606:	d0f0      	beq.n	80105ea <create_name+0x4e>
			break;
 8010608:	e038      	b.n	801067c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801060a:	7ffb      	ldrb	r3, [r7, #31]
 801060c:	2b2e      	cmp	r3, #46	; 0x2e
 801060e:	d003      	beq.n	8010618 <create_name+0x7c>
 8010610:	693a      	ldr	r2, [r7, #16]
 8010612:	69bb      	ldr	r3, [r7, #24]
 8010614:	429a      	cmp	r2, r3
 8010616:	d30c      	bcc.n	8010632 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010618:	69bb      	ldr	r3, [r7, #24]
 801061a:	2b0b      	cmp	r3, #11
 801061c:	d002      	beq.n	8010624 <create_name+0x88>
 801061e:	7ffb      	ldrb	r3, [r7, #31]
 8010620:	2b2e      	cmp	r3, #46	; 0x2e
 8010622:	d001      	beq.n	8010628 <create_name+0x8c>
 8010624:	2306      	movs	r3, #6
 8010626:	e044      	b.n	80106b2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010628:	2308      	movs	r3, #8
 801062a:	613b      	str	r3, [r7, #16]
 801062c:	230b      	movs	r3, #11
 801062e:	61bb      	str	r3, [r7, #24]
			continue;
 8010630:	e022      	b.n	8010678 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010632:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010636:	2b00      	cmp	r3, #0
 8010638:	da04      	bge.n	8010644 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801063a:	7ffb      	ldrb	r3, [r7, #31]
 801063c:	3b80      	subs	r3, #128	; 0x80
 801063e:	4a1f      	ldr	r2, [pc, #124]	; (80106bc <create_name+0x120>)
 8010640:	5cd3      	ldrb	r3, [r2, r3]
 8010642:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010644:	7ffb      	ldrb	r3, [r7, #31]
 8010646:	4619      	mov	r1, r3
 8010648:	481d      	ldr	r0, [pc, #116]	; (80106c0 <create_name+0x124>)
 801064a:	f7fe ff95 	bl	800f578 <chk_chr>
 801064e:	4603      	mov	r3, r0
 8010650:	2b00      	cmp	r3, #0
 8010652:	d001      	beq.n	8010658 <create_name+0xbc>
 8010654:	2306      	movs	r3, #6
 8010656:	e02c      	b.n	80106b2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010658:	7ffb      	ldrb	r3, [r7, #31]
 801065a:	2b60      	cmp	r3, #96	; 0x60
 801065c:	d905      	bls.n	801066a <create_name+0xce>
 801065e:	7ffb      	ldrb	r3, [r7, #31]
 8010660:	2b7a      	cmp	r3, #122	; 0x7a
 8010662:	d802      	bhi.n	801066a <create_name+0xce>
 8010664:	7ffb      	ldrb	r3, [r7, #31]
 8010666:	3b20      	subs	r3, #32
 8010668:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	1c5a      	adds	r2, r3, #1
 801066e:	613a      	str	r2, [r7, #16]
 8010670:	68ba      	ldr	r2, [r7, #8]
 8010672:	4413      	add	r3, r2
 8010674:	7ffa      	ldrb	r2, [r7, #31]
 8010676:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010678:	e7a6      	b.n	80105c8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801067a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801067c:	68fa      	ldr	r2, [r7, #12]
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	441a      	add	r2, r3
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d101      	bne.n	8010690 <create_name+0xf4>
 801068c:	2306      	movs	r3, #6
 801068e:	e010      	b.n	80106b2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	2be5      	cmp	r3, #229	; 0xe5
 8010696:	d102      	bne.n	801069e <create_name+0x102>
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	2205      	movs	r2, #5
 801069c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801069e:	7ffb      	ldrb	r3, [r7, #31]
 80106a0:	2b20      	cmp	r3, #32
 80106a2:	d801      	bhi.n	80106a8 <create_name+0x10c>
 80106a4:	2204      	movs	r2, #4
 80106a6:	e000      	b.n	80106aa <create_name+0x10e>
 80106a8:	2200      	movs	r2, #0
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	330b      	adds	r3, #11
 80106ae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80106b0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3720      	adds	r7, #32
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	0801aaac 	.word	0x0801aaac
 80106c0:	0801a4d8 	.word	0x0801a4d8

080106c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b086      	sub	sp, #24
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80106d8:	e002      	b.n	80106e0 <follow_path+0x1c>
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	3301      	adds	r3, #1
 80106de:	603b      	str	r3, [r7, #0]
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	781b      	ldrb	r3, [r3, #0]
 80106e4:	2b2f      	cmp	r3, #47	; 0x2f
 80106e6:	d0f8      	beq.n	80106da <follow_path+0x16>
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	2b5c      	cmp	r3, #92	; 0x5c
 80106ee:	d0f4      	beq.n	80106da <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80106f0:	693b      	ldr	r3, [r7, #16]
 80106f2:	2200      	movs	r2, #0
 80106f4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	781b      	ldrb	r3, [r3, #0]
 80106fa:	2b1f      	cmp	r3, #31
 80106fc:	d80a      	bhi.n	8010714 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2280      	movs	r2, #128	; 0x80
 8010702:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010706:	2100      	movs	r1, #0
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f7ff fcda 	bl	80100c2 <dir_sdi>
 801070e:	4603      	mov	r3, r0
 8010710:	75fb      	strb	r3, [r7, #23]
 8010712:	e048      	b.n	80107a6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010714:	463b      	mov	r3, r7
 8010716:	4619      	mov	r1, r3
 8010718:	6878      	ldr	r0, [r7, #4]
 801071a:	f7ff ff3f 	bl	801059c <create_name>
 801071e:	4603      	mov	r3, r0
 8010720:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010722:	7dfb      	ldrb	r3, [r7, #23]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d139      	bne.n	801079c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010728:	6878      	ldr	r0, [r7, #4]
 801072a:	f7ff feaf 	bl	801048c <dir_find>
 801072e:	4603      	mov	r3, r0
 8010730:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010738:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801073a:	7dfb      	ldrb	r3, [r7, #23]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d00a      	beq.n	8010756 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010740:	7dfb      	ldrb	r3, [r7, #23]
 8010742:	2b04      	cmp	r3, #4
 8010744:	d12c      	bne.n	80107a0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010746:	7afb      	ldrb	r3, [r7, #11]
 8010748:	f003 0304 	and.w	r3, r3, #4
 801074c:	2b00      	cmp	r3, #0
 801074e:	d127      	bne.n	80107a0 <follow_path+0xdc>
 8010750:	2305      	movs	r3, #5
 8010752:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010754:	e024      	b.n	80107a0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010756:	7afb      	ldrb	r3, [r7, #11]
 8010758:	f003 0304 	and.w	r3, r3, #4
 801075c:	2b00      	cmp	r3, #0
 801075e:	d121      	bne.n	80107a4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	799b      	ldrb	r3, [r3, #6]
 8010764:	f003 0310 	and.w	r3, r3, #16
 8010768:	2b00      	cmp	r3, #0
 801076a:	d102      	bne.n	8010772 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801076c:	2305      	movs	r3, #5
 801076e:	75fb      	strb	r3, [r7, #23]
 8010770:	e019      	b.n	80107a6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	695b      	ldr	r3, [r3, #20]
 801077c:	68fa      	ldr	r2, [r7, #12]
 801077e:	8992      	ldrh	r2, [r2, #12]
 8010780:	fbb3 f0f2 	udiv	r0, r3, r2
 8010784:	fb02 f200 	mul.w	r2, r2, r0
 8010788:	1a9b      	subs	r3, r3, r2
 801078a:	440b      	add	r3, r1
 801078c:	4619      	mov	r1, r3
 801078e:	68f8      	ldr	r0, [r7, #12]
 8010790:	f7ff fe3d 	bl	801040e <ld_clust>
 8010794:	4602      	mov	r2, r0
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801079a:	e7bb      	b.n	8010714 <follow_path+0x50>
			if (res != FR_OK) break;
 801079c:	bf00      	nop
 801079e:	e002      	b.n	80107a6 <follow_path+0xe2>
				break;
 80107a0:	bf00      	nop
 80107a2:	e000      	b.n	80107a6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80107a4:	bf00      	nop
			}
		}
	}

	return res;
 80107a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80107a8:	4618      	mov	r0, r3
 80107aa:	3718      	adds	r7, #24
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}

080107b0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80107b0:	b480      	push	{r7}
 80107b2:	b087      	sub	sp, #28
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80107b8:	f04f 33ff 	mov.w	r3, #4294967295
 80107bc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d031      	beq.n	801082a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	617b      	str	r3, [r7, #20]
 80107cc:	e002      	b.n	80107d4 <get_ldnumber+0x24>
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	3301      	adds	r3, #1
 80107d2:	617b      	str	r3, [r7, #20]
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	2b20      	cmp	r3, #32
 80107da:	d903      	bls.n	80107e4 <get_ldnumber+0x34>
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	781b      	ldrb	r3, [r3, #0]
 80107e0:	2b3a      	cmp	r3, #58	; 0x3a
 80107e2:	d1f4      	bne.n	80107ce <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	2b3a      	cmp	r3, #58	; 0x3a
 80107ea:	d11c      	bne.n	8010826 <get_ldnumber+0x76>
			tp = *path;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	1c5a      	adds	r2, r3, #1
 80107f6:	60fa      	str	r2, [r7, #12]
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	3b30      	subs	r3, #48	; 0x30
 80107fc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	2b09      	cmp	r3, #9
 8010802:	d80e      	bhi.n	8010822 <get_ldnumber+0x72>
 8010804:	68fa      	ldr	r2, [r7, #12]
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	429a      	cmp	r2, r3
 801080a:	d10a      	bne.n	8010822 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d107      	bne.n	8010822 <get_ldnumber+0x72>
					vol = (int)i;
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	3301      	adds	r3, #1
 801081a:	617b      	str	r3, [r7, #20]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	697a      	ldr	r2, [r7, #20]
 8010820:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	e002      	b.n	801082c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010826:	2300      	movs	r3, #0
 8010828:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801082a:	693b      	ldr	r3, [r7, #16]
}
 801082c:	4618      	mov	r0, r3
 801082e:	371c      	adds	r7, #28
 8010830:	46bd      	mov	sp, r7
 8010832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010836:	4770      	bx	lr

08010838 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	2200      	movs	r2, #0
 8010846:	70da      	strb	r2, [r3, #3]
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f04f 32ff 	mov.w	r2, #4294967295
 801084e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010850:	6839      	ldr	r1, [r7, #0]
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f7ff f85c 	bl	800f910 <move_window>
 8010858:	4603      	mov	r3, r0
 801085a:	2b00      	cmp	r3, #0
 801085c:	d001      	beq.n	8010862 <check_fs+0x2a>
 801085e:	2304      	movs	r3, #4
 8010860:	e038      	b.n	80108d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	3334      	adds	r3, #52	; 0x34
 8010866:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801086a:	4618      	mov	r0, r3
 801086c:	f7fe fda0 	bl	800f3b0 <ld_word>
 8010870:	4603      	mov	r3, r0
 8010872:	461a      	mov	r2, r3
 8010874:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010878:	429a      	cmp	r2, r3
 801087a:	d001      	beq.n	8010880 <check_fs+0x48>
 801087c:	2303      	movs	r3, #3
 801087e:	e029      	b.n	80108d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010886:	2be9      	cmp	r3, #233	; 0xe9
 8010888:	d009      	beq.n	801089e <check_fs+0x66>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010890:	2beb      	cmp	r3, #235	; 0xeb
 8010892:	d11e      	bne.n	80108d2 <check_fs+0x9a>
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801089a:	2b90      	cmp	r3, #144	; 0x90
 801089c:	d119      	bne.n	80108d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	3334      	adds	r3, #52	; 0x34
 80108a2:	3336      	adds	r3, #54	; 0x36
 80108a4:	4618      	mov	r0, r3
 80108a6:	f7fe fd9b 	bl	800f3e0 <ld_dword>
 80108aa:	4603      	mov	r3, r0
 80108ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80108b0:	4a0a      	ldr	r2, [pc, #40]	; (80108dc <check_fs+0xa4>)
 80108b2:	4293      	cmp	r3, r2
 80108b4:	d101      	bne.n	80108ba <check_fs+0x82>
 80108b6:	2300      	movs	r3, #0
 80108b8:	e00c      	b.n	80108d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	3334      	adds	r3, #52	; 0x34
 80108be:	3352      	adds	r3, #82	; 0x52
 80108c0:	4618      	mov	r0, r3
 80108c2:	f7fe fd8d 	bl	800f3e0 <ld_dword>
 80108c6:	4602      	mov	r2, r0
 80108c8:	4b05      	ldr	r3, [pc, #20]	; (80108e0 <check_fs+0xa8>)
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d101      	bne.n	80108d2 <check_fs+0x9a>
 80108ce:	2300      	movs	r3, #0
 80108d0:	e000      	b.n	80108d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80108d2:	2302      	movs	r3, #2
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3708      	adds	r7, #8
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}
 80108dc:	00544146 	.word	0x00544146
 80108e0:	33544146 	.word	0x33544146

080108e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b096      	sub	sp, #88	; 0x58
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	60f8      	str	r0, [r7, #12]
 80108ec:	60b9      	str	r1, [r7, #8]
 80108ee:	4613      	mov	r3, r2
 80108f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	2200      	movs	r2, #0
 80108f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80108f8:	68f8      	ldr	r0, [r7, #12]
 80108fa:	f7ff ff59 	bl	80107b0 <get_ldnumber>
 80108fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010902:	2b00      	cmp	r3, #0
 8010904:	da01      	bge.n	801090a <find_volume+0x26>
 8010906:	230b      	movs	r3, #11
 8010908:	e265      	b.n	8010dd6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801090a:	4ab0      	ldr	r2, [pc, #704]	; (8010bcc <find_volume+0x2e8>)
 801090c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801090e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010912:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010916:	2b00      	cmp	r3, #0
 8010918:	d101      	bne.n	801091e <find_volume+0x3a>
 801091a:	230c      	movs	r3, #12
 801091c:	e25b      	b.n	8010dd6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010922:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010924:	79fb      	ldrb	r3, [r7, #7]
 8010926:	f023 0301 	bic.w	r3, r3, #1
 801092a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801092c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801092e:	781b      	ldrb	r3, [r3, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d01a      	beq.n	801096a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010936:	785b      	ldrb	r3, [r3, #1]
 8010938:	4618      	mov	r0, r3
 801093a:	f7fe fc9b 	bl	800f274 <disk_status>
 801093e:	4603      	mov	r3, r0
 8010940:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010944:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010948:	f003 0301 	and.w	r3, r3, #1
 801094c:	2b00      	cmp	r3, #0
 801094e:	d10c      	bne.n	801096a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010950:	79fb      	ldrb	r3, [r7, #7]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d007      	beq.n	8010966 <find_volume+0x82>
 8010956:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801095a:	f003 0304 	and.w	r3, r3, #4
 801095e:	2b00      	cmp	r3, #0
 8010960:	d001      	beq.n	8010966 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010962:	230a      	movs	r3, #10
 8010964:	e237      	b.n	8010dd6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8010966:	2300      	movs	r3, #0
 8010968:	e235      	b.n	8010dd6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801096a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801096c:	2200      	movs	r2, #0
 801096e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010972:	b2da      	uxtb	r2, r3
 8010974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010976:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801097a:	785b      	ldrb	r3, [r3, #1]
 801097c:	4618      	mov	r0, r3
 801097e:	f7fe fc93 	bl	800f2a8 <disk_initialize>
 8010982:	4603      	mov	r3, r0
 8010984:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801098c:	f003 0301 	and.w	r3, r3, #1
 8010990:	2b00      	cmp	r3, #0
 8010992:	d001      	beq.n	8010998 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010994:	2303      	movs	r3, #3
 8010996:	e21e      	b.n	8010dd6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010998:	79fb      	ldrb	r3, [r7, #7]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d007      	beq.n	80109ae <find_volume+0xca>
 801099e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109a2:	f003 0304 	and.w	r3, r3, #4
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d001      	beq.n	80109ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80109aa:	230a      	movs	r3, #10
 80109ac:	e213      	b.n	8010dd6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80109ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b0:	7858      	ldrb	r0, [r3, #1]
 80109b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b4:	330c      	adds	r3, #12
 80109b6:	461a      	mov	r2, r3
 80109b8:	2102      	movs	r1, #2
 80109ba:	f7fe fcdb 	bl	800f374 <disk_ioctl>
 80109be:	4603      	mov	r3, r0
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d001      	beq.n	80109c8 <find_volume+0xe4>
 80109c4:	2301      	movs	r3, #1
 80109c6:	e206      	b.n	8010dd6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80109c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ca:	899b      	ldrh	r3, [r3, #12]
 80109cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80109d0:	d80d      	bhi.n	80109ee <find_volume+0x10a>
 80109d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d4:	899b      	ldrh	r3, [r3, #12]
 80109d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109da:	d308      	bcc.n	80109ee <find_volume+0x10a>
 80109dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109de:	899b      	ldrh	r3, [r3, #12]
 80109e0:	461a      	mov	r2, r3
 80109e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e4:	899b      	ldrh	r3, [r3, #12]
 80109e6:	3b01      	subs	r3, #1
 80109e8:	4013      	ands	r3, r2
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d001      	beq.n	80109f2 <find_volume+0x10e>
 80109ee:	2301      	movs	r3, #1
 80109f0:	e1f1      	b.n	8010dd6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80109f2:	2300      	movs	r3, #0
 80109f4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80109f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80109f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80109fa:	f7ff ff1d 	bl	8010838 <check_fs>
 80109fe:	4603      	mov	r3, r0
 8010a00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010a04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a08:	2b02      	cmp	r3, #2
 8010a0a:	d14b      	bne.n	8010aa4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8010a10:	e01f      	b.n	8010a52 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a14:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a1a:	011b      	lsls	r3, r3, #4
 8010a1c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010a20:	4413      	add	r3, r2
 8010a22:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a26:	3304      	adds	r3, #4
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d006      	beq.n	8010a3c <find_volume+0x158>
 8010a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a30:	3308      	adds	r3, #8
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7fe fcd4 	bl	800f3e0 <ld_dword>
 8010a38:	4602      	mov	r2, r0
 8010a3a:	e000      	b.n	8010a3e <find_volume+0x15a>
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a40:	009b      	lsls	r3, r3, #2
 8010a42:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010a46:	440b      	add	r3, r1
 8010a48:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a4e:	3301      	adds	r3, #1
 8010a50:	643b      	str	r3, [r7, #64]	; 0x40
 8010a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a54:	2b03      	cmp	r3, #3
 8010a56:	d9dc      	bls.n	8010a12 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010a58:	2300      	movs	r3, #0
 8010a5a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d002      	beq.n	8010a68 <find_volume+0x184>
 8010a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a64:	3b01      	subs	r3, #1
 8010a66:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a6a:	009b      	lsls	r3, r3, #2
 8010a6c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010a70:	4413      	add	r3, r2
 8010a72:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010a76:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d005      	beq.n	8010a8a <find_volume+0x1a6>
 8010a7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010a80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a82:	f7ff fed9 	bl	8010838 <check_fs>
 8010a86:	4603      	mov	r3, r0
 8010a88:	e000      	b.n	8010a8c <find_volume+0x1a8>
 8010a8a:	2303      	movs	r3, #3
 8010a8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010a90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a94:	2b01      	cmp	r3, #1
 8010a96:	d905      	bls.n	8010aa4 <find_volume+0x1c0>
 8010a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a9a:	3301      	adds	r3, #1
 8010a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8010a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010aa0:	2b03      	cmp	r3, #3
 8010aa2:	d9e1      	bls.n	8010a68 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010aa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010aa8:	2b04      	cmp	r3, #4
 8010aaa:	d101      	bne.n	8010ab0 <find_volume+0x1cc>
 8010aac:	2301      	movs	r3, #1
 8010aae:	e192      	b.n	8010dd6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010ab0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ab4:	2b01      	cmp	r3, #1
 8010ab6:	d901      	bls.n	8010abc <find_volume+0x1d8>
 8010ab8:	230d      	movs	r3, #13
 8010aba:	e18c      	b.n	8010dd6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010abe:	3334      	adds	r3, #52	; 0x34
 8010ac0:	330b      	adds	r3, #11
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7fe fc74 	bl	800f3b0 <ld_word>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	461a      	mov	r2, r3
 8010acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ace:	899b      	ldrh	r3, [r3, #12]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d001      	beq.n	8010ad8 <find_volume+0x1f4>
 8010ad4:	230d      	movs	r3, #13
 8010ad6:	e17e      	b.n	8010dd6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ada:	3334      	adds	r3, #52	; 0x34
 8010adc:	3316      	adds	r3, #22
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7fe fc66 	bl	800f3b0 <ld_word>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d106      	bne.n	8010afc <find_volume+0x218>
 8010aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af0:	3334      	adds	r3, #52	; 0x34
 8010af2:	3324      	adds	r3, #36	; 0x24
 8010af4:	4618      	mov	r0, r3
 8010af6:	f7fe fc73 	bl	800f3e0 <ld_dword>
 8010afa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010afe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010b00:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b04:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b0a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b0e:	789b      	ldrb	r3, [r3, #2]
 8010b10:	2b01      	cmp	r3, #1
 8010b12:	d005      	beq.n	8010b20 <find_volume+0x23c>
 8010b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b16:	789b      	ldrb	r3, [r3, #2]
 8010b18:	2b02      	cmp	r3, #2
 8010b1a:	d001      	beq.n	8010b20 <find_volume+0x23c>
 8010b1c:	230d      	movs	r3, #13
 8010b1e:	e15a      	b.n	8010dd6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b22:	789b      	ldrb	r3, [r3, #2]
 8010b24:	461a      	mov	r2, r3
 8010b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b28:	fb02 f303 	mul.w	r3, r2, r3
 8010b2c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010b34:	b29a      	uxth	r2, r3
 8010b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b38:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b3c:	895b      	ldrh	r3, [r3, #10]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d008      	beq.n	8010b54 <find_volume+0x270>
 8010b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b44:	895b      	ldrh	r3, [r3, #10]
 8010b46:	461a      	mov	r2, r3
 8010b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b4a:	895b      	ldrh	r3, [r3, #10]
 8010b4c:	3b01      	subs	r3, #1
 8010b4e:	4013      	ands	r3, r2
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d001      	beq.n	8010b58 <find_volume+0x274>
 8010b54:	230d      	movs	r3, #13
 8010b56:	e13e      	b.n	8010dd6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b5a:	3334      	adds	r3, #52	; 0x34
 8010b5c:	3311      	adds	r3, #17
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7fe fc26 	bl	800f3b0 <ld_word>
 8010b64:	4603      	mov	r3, r0
 8010b66:	461a      	mov	r2, r3
 8010b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b6a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b6e:	891b      	ldrh	r3, [r3, #8]
 8010b70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b72:	8992      	ldrh	r2, [r2, #12]
 8010b74:	0952      	lsrs	r2, r2, #5
 8010b76:	b292      	uxth	r2, r2
 8010b78:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b7c:	fb02 f201 	mul.w	r2, r2, r1
 8010b80:	1a9b      	subs	r3, r3, r2
 8010b82:	b29b      	uxth	r3, r3
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d001      	beq.n	8010b8c <find_volume+0x2a8>
 8010b88:	230d      	movs	r3, #13
 8010b8a:	e124      	b.n	8010dd6 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b8e:	3334      	adds	r3, #52	; 0x34
 8010b90:	3313      	adds	r3, #19
 8010b92:	4618      	mov	r0, r3
 8010b94:	f7fe fc0c 	bl	800f3b0 <ld_word>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d106      	bne.n	8010bb0 <find_volume+0x2cc>
 8010ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ba4:	3334      	adds	r3, #52	; 0x34
 8010ba6:	3320      	adds	r3, #32
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7fe fc19 	bl	800f3e0 <ld_dword>
 8010bae:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bb2:	3334      	adds	r3, #52	; 0x34
 8010bb4:	330e      	adds	r3, #14
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7fe fbfa 	bl	800f3b0 <ld_word>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010bc0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d104      	bne.n	8010bd0 <find_volume+0x2ec>
 8010bc6:	230d      	movs	r3, #13
 8010bc8:	e105      	b.n	8010dd6 <find_volume+0x4f2>
 8010bca:	bf00      	nop
 8010bcc:	2000037c 	.word	0x2000037c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010bd0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bd4:	4413      	add	r3, r2
 8010bd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bd8:	8911      	ldrh	r1, [r2, #8]
 8010bda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bdc:	8992      	ldrh	r2, [r2, #12]
 8010bde:	0952      	lsrs	r2, r2, #5
 8010be0:	b292      	uxth	r2, r2
 8010be2:	fbb1 f2f2 	udiv	r2, r1, r2
 8010be6:	b292      	uxth	r2, r2
 8010be8:	4413      	add	r3, r2
 8010bea:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d201      	bcs.n	8010bf8 <find_volume+0x314>
 8010bf4:	230d      	movs	r3, #13
 8010bf6:	e0ee      	b.n	8010dd6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bfc:	1ad3      	subs	r3, r2, r3
 8010bfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c00:	8952      	ldrh	r2, [r2, #10]
 8010c02:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c06:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d101      	bne.n	8010c12 <find_volume+0x32e>
 8010c0e:	230d      	movs	r3, #13
 8010c10:	e0e1      	b.n	8010dd6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8010c12:	2303      	movs	r3, #3
 8010c14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d802      	bhi.n	8010c28 <find_volume+0x344>
 8010c22:	2302      	movs	r3, #2
 8010c24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d802      	bhi.n	8010c38 <find_volume+0x354>
 8010c32:	2301      	movs	r3, #1
 8010c34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c3a:	1c9a      	adds	r2, r3, #2
 8010c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c3e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010c44:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010c46:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c4a:	441a      	add	r2, r3
 8010c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c4e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010c50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c54:	441a      	add	r2, r3
 8010c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c58:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8010c5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c5e:	2b03      	cmp	r3, #3
 8010c60:	d11e      	bne.n	8010ca0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c64:	3334      	adds	r3, #52	; 0x34
 8010c66:	332a      	adds	r3, #42	; 0x2a
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f7fe fba1 	bl	800f3b0 <ld_word>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d001      	beq.n	8010c78 <find_volume+0x394>
 8010c74:	230d      	movs	r3, #13
 8010c76:	e0ae      	b.n	8010dd6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c7a:	891b      	ldrh	r3, [r3, #8]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d001      	beq.n	8010c84 <find_volume+0x3a0>
 8010c80:	230d      	movs	r3, #13
 8010c82:	e0a8      	b.n	8010dd6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c86:	3334      	adds	r3, #52	; 0x34
 8010c88:	332c      	adds	r3, #44	; 0x2c
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7fe fba8 	bl	800f3e0 <ld_dword>
 8010c90:	4602      	mov	r2, r0
 8010c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c94:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c98:	699b      	ldr	r3, [r3, #24]
 8010c9a:	009b      	lsls	r3, r3, #2
 8010c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8010c9e:	e01f      	b.n	8010ce0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca2:	891b      	ldrh	r3, [r3, #8]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d101      	bne.n	8010cac <find_volume+0x3c8>
 8010ca8:	230d      	movs	r3, #13
 8010caa:	e094      	b.n	8010dd6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cb2:	441a      	add	r2, r3
 8010cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010cb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010cbc:	2b02      	cmp	r3, #2
 8010cbe:	d103      	bne.n	8010cc8 <find_volume+0x3e4>
 8010cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc2:	699b      	ldr	r3, [r3, #24]
 8010cc4:	005b      	lsls	r3, r3, #1
 8010cc6:	e00a      	b.n	8010cde <find_volume+0x3fa>
 8010cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cca:	699a      	ldr	r2, [r3, #24]
 8010ccc:	4613      	mov	r3, r2
 8010cce:	005b      	lsls	r3, r3, #1
 8010cd0:	4413      	add	r3, r2
 8010cd2:	085a      	lsrs	r2, r3, #1
 8010cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd6:	699b      	ldr	r3, [r3, #24]
 8010cd8:	f003 0301 	and.w	r3, r3, #1
 8010cdc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010cde:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce2:	69da      	ldr	r2, [r3, #28]
 8010ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce6:	899b      	ldrh	r3, [r3, #12]
 8010ce8:	4619      	mov	r1, r3
 8010cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cec:	440b      	add	r3, r1
 8010cee:	3b01      	subs	r3, #1
 8010cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010cf2:	8989      	ldrh	r1, [r1, #12]
 8010cf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d201      	bcs.n	8010d00 <find_volume+0x41c>
 8010cfc:	230d      	movs	r3, #13
 8010cfe:	e06a      	b.n	8010dd6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d02:	f04f 32ff 	mov.w	r2, #4294967295
 8010d06:	615a      	str	r2, [r3, #20]
 8010d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d0a:	695a      	ldr	r2, [r3, #20]
 8010d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d0e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d12:	2280      	movs	r2, #128	; 0x80
 8010d14:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010d16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d1a:	2b03      	cmp	r3, #3
 8010d1c:	d149      	bne.n	8010db2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d20:	3334      	adds	r3, #52	; 0x34
 8010d22:	3330      	adds	r3, #48	; 0x30
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7fe fb43 	bl	800f3b0 <ld_word>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	2b01      	cmp	r3, #1
 8010d2e:	d140      	bne.n	8010db2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d32:	3301      	adds	r3, #1
 8010d34:	4619      	mov	r1, r3
 8010d36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010d38:	f7fe fdea 	bl	800f910 <move_window>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d137      	bne.n	8010db2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8010d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d44:	2200      	movs	r2, #0
 8010d46:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d4a:	3334      	adds	r3, #52	; 0x34
 8010d4c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010d50:	4618      	mov	r0, r3
 8010d52:	f7fe fb2d 	bl	800f3b0 <ld_word>
 8010d56:	4603      	mov	r3, r0
 8010d58:	461a      	mov	r2, r3
 8010d5a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d127      	bne.n	8010db2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d64:	3334      	adds	r3, #52	; 0x34
 8010d66:	4618      	mov	r0, r3
 8010d68:	f7fe fb3a 	bl	800f3e0 <ld_dword>
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	4b1c      	ldr	r3, [pc, #112]	; (8010de0 <find_volume+0x4fc>)
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d11e      	bne.n	8010db2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d76:	3334      	adds	r3, #52	; 0x34
 8010d78:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7fe fb2f 	bl	800f3e0 <ld_dword>
 8010d82:	4602      	mov	r2, r0
 8010d84:	4b17      	ldr	r3, [pc, #92]	; (8010de4 <find_volume+0x500>)
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d113      	bne.n	8010db2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d8c:	3334      	adds	r3, #52	; 0x34
 8010d8e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7fe fb24 	bl	800f3e0 <ld_dword>
 8010d98:	4602      	mov	r2, r0
 8010d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d9c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da0:	3334      	adds	r3, #52	; 0x34
 8010da2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fe fb1a 	bl	800f3e0 <ld_dword>
 8010dac:	4602      	mov	r2, r0
 8010dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010db8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010dba:	4b0b      	ldr	r3, [pc, #44]	; (8010de8 <find_volume+0x504>)
 8010dbc:	881b      	ldrh	r3, [r3, #0]
 8010dbe:	3301      	adds	r3, #1
 8010dc0:	b29a      	uxth	r2, r3
 8010dc2:	4b09      	ldr	r3, [pc, #36]	; (8010de8 <find_volume+0x504>)
 8010dc4:	801a      	strh	r2, [r3, #0]
 8010dc6:	4b08      	ldr	r3, [pc, #32]	; (8010de8 <find_volume+0x504>)
 8010dc8:	881a      	ldrh	r2, [r3, #0]
 8010dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dcc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010dce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010dd0:	f7fe fd36 	bl	800f840 <clear_lock>
#endif
	return FR_OK;
 8010dd4:	2300      	movs	r3, #0
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3758      	adds	r7, #88	; 0x58
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	41615252 	.word	0x41615252
 8010de4:	61417272 	.word	0x61417272
 8010de8:	20000380 	.word	0x20000380

08010dec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b084      	sub	sp, #16
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010df6:	2309      	movs	r3, #9
 8010df8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d01c      	beq.n	8010e3a <validate+0x4e>
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d018      	beq.n	8010e3a <validate+0x4e>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	781b      	ldrb	r3, [r3, #0]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d013      	beq.n	8010e3a <validate+0x4e>
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	889a      	ldrh	r2, [r3, #4]
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	88db      	ldrh	r3, [r3, #6]
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	d10c      	bne.n	8010e3a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	785b      	ldrb	r3, [r3, #1]
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7fe fa24 	bl	800f274 <disk_status>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	f003 0301 	and.w	r3, r3, #1
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d101      	bne.n	8010e3a <validate+0x4e>
			res = FR_OK;
 8010e36:	2300      	movs	r3, #0
 8010e38:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010e3a:	7bfb      	ldrb	r3, [r7, #15]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d102      	bne.n	8010e46 <validate+0x5a>
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	e000      	b.n	8010e48 <validate+0x5c>
 8010e46:	2300      	movs	r3, #0
 8010e48:	683a      	ldr	r2, [r7, #0]
 8010e4a:	6013      	str	r3, [r2, #0]
	return res;
 8010e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3710      	adds	r7, #16
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}
	...

08010e58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b088      	sub	sp, #32
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	60f8      	str	r0, [r7, #12]
 8010e60:	60b9      	str	r1, [r7, #8]
 8010e62:	4613      	mov	r3, r2
 8010e64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010e6a:	f107 0310 	add.w	r3, r7, #16
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7ff fc9e 	bl	80107b0 <get_ldnumber>
 8010e74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010e76:	69fb      	ldr	r3, [r7, #28]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	da01      	bge.n	8010e80 <f_mount+0x28>
 8010e7c:	230b      	movs	r3, #11
 8010e7e:	e02b      	b.n	8010ed8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010e80:	4a17      	ldr	r2, [pc, #92]	; (8010ee0 <f_mount+0x88>)
 8010e82:	69fb      	ldr	r3, [r7, #28]
 8010e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010e8a:	69bb      	ldr	r3, [r7, #24]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d005      	beq.n	8010e9c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010e90:	69b8      	ldr	r0, [r7, #24]
 8010e92:	f7fe fcd5 	bl	800f840 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010e96:	69bb      	ldr	r3, [r7, #24]
 8010e98:	2200      	movs	r2, #0
 8010e9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d002      	beq.n	8010ea8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010ea8:	68fa      	ldr	r2, [r7, #12]
 8010eaa:	490d      	ldr	r1, [pc, #52]	; (8010ee0 <f_mount+0x88>)
 8010eac:	69fb      	ldr	r3, [r7, #28]
 8010eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d002      	beq.n	8010ebe <f_mount+0x66>
 8010eb8:	79fb      	ldrb	r3, [r7, #7]
 8010eba:	2b01      	cmp	r3, #1
 8010ebc:	d001      	beq.n	8010ec2 <f_mount+0x6a>
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	e00a      	b.n	8010ed8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010ec2:	f107 010c 	add.w	r1, r7, #12
 8010ec6:	f107 0308 	add.w	r3, r7, #8
 8010eca:	2200      	movs	r2, #0
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7ff fd09 	bl	80108e4 <find_volume>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3720      	adds	r7, #32
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	2000037c 	.word	0x2000037c

08010ee4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b098      	sub	sp, #96	; 0x60
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	60f8      	str	r0, [r7, #12]
 8010eec:	60b9      	str	r1, [r7, #8]
 8010eee:	4613      	mov	r3, r2
 8010ef0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d101      	bne.n	8010efc <f_open+0x18>
 8010ef8:	2309      	movs	r3, #9
 8010efa:	e1bb      	b.n	8011274 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010efc:	79fb      	ldrb	r3, [r7, #7]
 8010efe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010f02:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010f04:	79fa      	ldrb	r2, [r7, #7]
 8010f06:	f107 0110 	add.w	r1, r7, #16
 8010f0a:	f107 0308 	add.w	r3, r7, #8
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7ff fce8 	bl	80108e4 <find_volume>
 8010f14:	4603      	mov	r3, r0
 8010f16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010f1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	f040 819f 	bne.w	8011262 <f_open+0x37e>
		dj.obj.fs = fs;
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010f28:	68ba      	ldr	r2, [r7, #8]
 8010f2a:	f107 0314 	add.w	r3, r7, #20
 8010f2e:	4611      	mov	r1, r2
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7ff fbc7 	bl	80106c4 <follow_path>
 8010f36:	4603      	mov	r3, r0
 8010f38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010f3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d11a      	bne.n	8010f7a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010f44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010f48:	b25b      	sxtb	r3, r3
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	da03      	bge.n	8010f56 <f_open+0x72>
				res = FR_INVALID_NAME;
 8010f4e:	2306      	movs	r3, #6
 8010f50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010f54:	e011      	b.n	8010f7a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010f56:	79fb      	ldrb	r3, [r7, #7]
 8010f58:	f023 0301 	bic.w	r3, r3, #1
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	bf14      	ite	ne
 8010f60:	2301      	movne	r3, #1
 8010f62:	2300      	moveq	r3, #0
 8010f64:	b2db      	uxtb	r3, r3
 8010f66:	461a      	mov	r2, r3
 8010f68:	f107 0314 	add.w	r3, r7, #20
 8010f6c:	4611      	mov	r1, r2
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7fe fb1e 	bl	800f5b0 <chk_lock>
 8010f74:	4603      	mov	r3, r0
 8010f76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010f7a:	79fb      	ldrb	r3, [r7, #7]
 8010f7c:	f003 031c 	and.w	r3, r3, #28
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d07f      	beq.n	8011084 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010f84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d017      	beq.n	8010fbc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010f8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f90:	2b04      	cmp	r3, #4
 8010f92:	d10e      	bne.n	8010fb2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010f94:	f7fe fb68 	bl	800f668 <enq_lock>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d006      	beq.n	8010fac <f_open+0xc8>
 8010f9e:	f107 0314 	add.w	r3, r7, #20
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7ff fac7 	bl	8010536 <dir_register>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	e000      	b.n	8010fae <f_open+0xca>
 8010fac:	2312      	movs	r3, #18
 8010fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010fb2:	79fb      	ldrb	r3, [r7, #7]
 8010fb4:	f043 0308 	orr.w	r3, r3, #8
 8010fb8:	71fb      	strb	r3, [r7, #7]
 8010fba:	e010      	b.n	8010fde <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010fbc:	7ebb      	ldrb	r3, [r7, #26]
 8010fbe:	f003 0311 	and.w	r3, r3, #17
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d003      	beq.n	8010fce <f_open+0xea>
					res = FR_DENIED;
 8010fc6:	2307      	movs	r3, #7
 8010fc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010fcc:	e007      	b.n	8010fde <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010fce:	79fb      	ldrb	r3, [r7, #7]
 8010fd0:	f003 0304 	and.w	r3, r3, #4
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d002      	beq.n	8010fde <f_open+0xfa>
 8010fd8:	2308      	movs	r3, #8
 8010fda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010fde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d168      	bne.n	80110b8 <f_open+0x1d4>
 8010fe6:	79fb      	ldrb	r3, [r7, #7]
 8010fe8:	f003 0308 	and.w	r3, r3, #8
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d063      	beq.n	80110b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010ff0:	f000 fdf2 	bl	8011bd8 <get_fattime>
 8010ff4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ff8:	330e      	adds	r3, #14
 8010ffa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7fe fa2d 	bl	800f45c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011004:	3316      	adds	r3, #22
 8011006:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011008:	4618      	mov	r0, r3
 801100a:	f7fe fa27 	bl	800f45c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801100e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011010:	330b      	adds	r3, #11
 8011012:	2220      	movs	r2, #32
 8011014:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801101a:	4611      	mov	r1, r2
 801101c:	4618      	mov	r0, r3
 801101e:	f7ff f9f6 	bl	801040e <ld_clust>
 8011022:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011028:	2200      	movs	r2, #0
 801102a:	4618      	mov	r0, r3
 801102c:	f7ff fa0e 	bl	801044c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011032:	331c      	adds	r3, #28
 8011034:	2100      	movs	r1, #0
 8011036:	4618      	mov	r0, r3
 8011038:	f7fe fa10 	bl	800f45c <st_dword>
					fs->wflag = 1;
 801103c:	693b      	ldr	r3, [r7, #16]
 801103e:	2201      	movs	r2, #1
 8011040:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011044:	2b00      	cmp	r3, #0
 8011046:	d037      	beq.n	80110b8 <f_open+0x1d4>
						dw = fs->winsect;
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801104c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801104e:	f107 0314 	add.w	r3, r7, #20
 8011052:	2200      	movs	r2, #0
 8011054:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011056:	4618      	mov	r0, r3
 8011058:	f7fe fefe 	bl	800fe58 <remove_chain>
 801105c:	4603      	mov	r3, r0
 801105e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8011062:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011066:	2b00      	cmp	r3, #0
 8011068:	d126      	bne.n	80110b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 801106a:	693b      	ldr	r3, [r7, #16]
 801106c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801106e:	4618      	mov	r0, r3
 8011070:	f7fe fc4e 	bl	800f910 <move_window>
 8011074:	4603      	mov	r3, r0
 8011076:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801107e:	3a01      	subs	r2, #1
 8011080:	611a      	str	r2, [r3, #16]
 8011082:	e019      	b.n	80110b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011084:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011088:	2b00      	cmp	r3, #0
 801108a:	d115      	bne.n	80110b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801108c:	7ebb      	ldrb	r3, [r7, #26]
 801108e:	f003 0310 	and.w	r3, r3, #16
 8011092:	2b00      	cmp	r3, #0
 8011094:	d003      	beq.n	801109e <f_open+0x1ba>
					res = FR_NO_FILE;
 8011096:	2304      	movs	r3, #4
 8011098:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801109c:	e00c      	b.n	80110b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801109e:	79fb      	ldrb	r3, [r7, #7]
 80110a0:	f003 0302 	and.w	r3, r3, #2
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d007      	beq.n	80110b8 <f_open+0x1d4>
 80110a8:	7ebb      	ldrb	r3, [r7, #26]
 80110aa:	f003 0301 	and.w	r3, r3, #1
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d002      	beq.n	80110b8 <f_open+0x1d4>
						res = FR_DENIED;
 80110b2:	2307      	movs	r3, #7
 80110b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80110b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d128      	bne.n	8011112 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80110c0:	79fb      	ldrb	r3, [r7, #7]
 80110c2:	f003 0308 	and.w	r3, r3, #8
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d003      	beq.n	80110d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80110ca:	79fb      	ldrb	r3, [r7, #7]
 80110cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80110da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80110e0:	79fb      	ldrb	r3, [r7, #7]
 80110e2:	f023 0301 	bic.w	r3, r3, #1
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	bf14      	ite	ne
 80110ea:	2301      	movne	r3, #1
 80110ec:	2300      	moveq	r3, #0
 80110ee:	b2db      	uxtb	r3, r3
 80110f0:	461a      	mov	r2, r3
 80110f2:	f107 0314 	add.w	r3, r7, #20
 80110f6:	4611      	mov	r1, r2
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7fe fad7 	bl	800f6ac <inc_lock>
 80110fe:	4602      	mov	r2, r0
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	691b      	ldr	r3, [r3, #16]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d102      	bne.n	8011112 <f_open+0x22e>
 801110c:	2302      	movs	r3, #2
 801110e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011112:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011116:	2b00      	cmp	r3, #0
 8011118:	f040 80a3 	bne.w	8011262 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801111c:	693b      	ldr	r3, [r7, #16]
 801111e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011120:	4611      	mov	r1, r2
 8011122:	4618      	mov	r0, r3
 8011124:	f7ff f973 	bl	801040e <ld_clust>
 8011128:	4602      	mov	r2, r0
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801112e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011130:	331c      	adds	r3, #28
 8011132:	4618      	mov	r0, r3
 8011134:	f7fe f954 	bl	800f3e0 <ld_dword>
 8011138:	4602      	mov	r2, r0
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	2200      	movs	r2, #0
 8011142:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011144:	693a      	ldr	r2, [r7, #16]
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	88da      	ldrh	r2, [r3, #6]
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	79fa      	ldrb	r2, [r7, #7]
 8011156:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2200      	movs	r2, #0
 801115c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	2200      	movs	r2, #0
 8011162:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	2200      	movs	r2, #0
 8011168:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	3330      	adds	r3, #48	; 0x30
 801116e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011172:	2100      	movs	r1, #0
 8011174:	4618      	mov	r0, r3
 8011176:	f7fe f9be 	bl	800f4f6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801117a:	79fb      	ldrb	r3, [r7, #7]
 801117c:	f003 0320 	and.w	r3, r3, #32
 8011180:	2b00      	cmp	r3, #0
 8011182:	d06e      	beq.n	8011262 <f_open+0x37e>
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	68db      	ldr	r3, [r3, #12]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d06a      	beq.n	8011262 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	68da      	ldr	r2, [r3, #12]
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011194:	693b      	ldr	r3, [r7, #16]
 8011196:	895b      	ldrh	r3, [r3, #10]
 8011198:	461a      	mov	r2, r3
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	899b      	ldrh	r3, [r3, #12]
 801119e:	fb03 f302 	mul.w	r3, r3, r2
 80111a2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	689b      	ldr	r3, [r3, #8]
 80111a8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	68db      	ldr	r3, [r3, #12]
 80111ae:	657b      	str	r3, [r7, #84]	; 0x54
 80111b0:	e016      	b.n	80111e0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7fe fc67 	bl	800fa8a <get_fat>
 80111bc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80111be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80111c0:	2b01      	cmp	r3, #1
 80111c2:	d802      	bhi.n	80111ca <f_open+0x2e6>
 80111c4:	2302      	movs	r3, #2
 80111c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80111ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80111cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111d0:	d102      	bne.n	80111d8 <f_open+0x2f4>
 80111d2:	2301      	movs	r3, #1
 80111d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80111d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80111da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111dc:	1ad3      	subs	r3, r2, r3
 80111de:	657b      	str	r3, [r7, #84]	; 0x54
 80111e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d103      	bne.n	80111f0 <f_open+0x30c>
 80111e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80111ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d8e0      	bhi.n	80111b2 <f_open+0x2ce>
				}
				fp->clust = clst;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80111f4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80111f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d131      	bne.n	8011262 <f_open+0x37e>
 80111fe:	693b      	ldr	r3, [r7, #16]
 8011200:	899b      	ldrh	r3, [r3, #12]
 8011202:	461a      	mov	r2, r3
 8011204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011206:	fbb3 f1f2 	udiv	r1, r3, r2
 801120a:	fb02 f201 	mul.w	r2, r2, r1
 801120e:	1a9b      	subs	r3, r3, r2
 8011210:	2b00      	cmp	r3, #0
 8011212:	d026      	beq.n	8011262 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011218:	4618      	mov	r0, r3
 801121a:	f7fe fc17 	bl	800fa4c <clust2sect>
 801121e:	6478      	str	r0, [r7, #68]	; 0x44
 8011220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011222:	2b00      	cmp	r3, #0
 8011224:	d103      	bne.n	801122e <f_open+0x34a>
						res = FR_INT_ERR;
 8011226:	2302      	movs	r3, #2
 8011228:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801122c:	e019      	b.n	8011262 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801122e:	693b      	ldr	r3, [r7, #16]
 8011230:	899b      	ldrh	r3, [r3, #12]
 8011232:	461a      	mov	r2, r3
 8011234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011236:	fbb3 f2f2 	udiv	r2, r3, r2
 801123a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801123c:	441a      	add	r2, r3
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011242:	693b      	ldr	r3, [r7, #16]
 8011244:	7858      	ldrb	r0, [r3, #1]
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	6a1a      	ldr	r2, [r3, #32]
 8011250:	2301      	movs	r3, #1
 8011252:	f7fe f84f 	bl	800f2f4 <disk_read>
 8011256:	4603      	mov	r3, r0
 8011258:	2b00      	cmp	r3, #0
 801125a:	d002      	beq.n	8011262 <f_open+0x37e>
 801125c:	2301      	movs	r3, #1
 801125e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011262:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011266:	2b00      	cmp	r3, #0
 8011268:	d002      	beq.n	8011270 <f_open+0x38c>
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	2200      	movs	r2, #0
 801126e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011270:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011274:	4618      	mov	r0, r3
 8011276:	3760      	adds	r7, #96	; 0x60
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b08c      	sub	sp, #48	; 0x30
 8011280:	af00      	add	r7, sp, #0
 8011282:	60f8      	str	r0, [r7, #12]
 8011284:	60b9      	str	r1, [r7, #8]
 8011286:	607a      	str	r2, [r7, #4]
 8011288:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	2200      	movs	r2, #0
 8011292:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	f107 0210 	add.w	r2, r7, #16
 801129a:	4611      	mov	r1, r2
 801129c:	4618      	mov	r0, r3
 801129e:	f7ff fda5 	bl	8010dec <validate>
 80112a2:	4603      	mov	r3, r0
 80112a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80112a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d107      	bne.n	80112c0 <f_write+0x44>
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	7d5b      	ldrb	r3, [r3, #21]
 80112b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80112b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d002      	beq.n	80112c6 <f_write+0x4a>
 80112c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80112c4:	e16a      	b.n	801159c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	7d1b      	ldrb	r3, [r3, #20]
 80112ca:	f003 0302 	and.w	r3, r3, #2
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d101      	bne.n	80112d6 <f_write+0x5a>
 80112d2:	2307      	movs	r3, #7
 80112d4:	e162      	b.n	801159c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	699a      	ldr	r2, [r3, #24]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	441a      	add	r2, r3
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	699b      	ldr	r3, [r3, #24]
 80112e2:	429a      	cmp	r2, r3
 80112e4:	f080 814c 	bcs.w	8011580 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	699b      	ldr	r3, [r3, #24]
 80112ec:	43db      	mvns	r3, r3
 80112ee:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80112f0:	e146      	b.n	8011580 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	699b      	ldr	r3, [r3, #24]
 80112f6:	693a      	ldr	r2, [r7, #16]
 80112f8:	8992      	ldrh	r2, [r2, #12]
 80112fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80112fe:	fb02 f201 	mul.w	r2, r2, r1
 8011302:	1a9b      	subs	r3, r3, r2
 8011304:	2b00      	cmp	r3, #0
 8011306:	f040 80f1 	bne.w	80114ec <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	699b      	ldr	r3, [r3, #24]
 801130e:	693a      	ldr	r2, [r7, #16]
 8011310:	8992      	ldrh	r2, [r2, #12]
 8011312:	fbb3 f3f2 	udiv	r3, r3, r2
 8011316:	693a      	ldr	r2, [r7, #16]
 8011318:	8952      	ldrh	r2, [r2, #10]
 801131a:	3a01      	subs	r2, #1
 801131c:	4013      	ands	r3, r2
 801131e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011320:	69bb      	ldr	r3, [r7, #24]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d143      	bne.n	80113ae <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	699b      	ldr	r3, [r3, #24]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d10c      	bne.n	8011348 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	689b      	ldr	r3, [r3, #8]
 8011332:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011336:	2b00      	cmp	r3, #0
 8011338:	d11a      	bne.n	8011370 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	2100      	movs	r1, #0
 801133e:	4618      	mov	r0, r3
 8011340:	f7fe fdef 	bl	800ff22 <create_chain>
 8011344:	62b8      	str	r0, [r7, #40]	; 0x28
 8011346:	e013      	b.n	8011370 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801134c:	2b00      	cmp	r3, #0
 801134e:	d007      	beq.n	8011360 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	699b      	ldr	r3, [r3, #24]
 8011354:	4619      	mov	r1, r3
 8011356:	68f8      	ldr	r0, [r7, #12]
 8011358:	f7fe fe7b 	bl	8010052 <clmt_clust>
 801135c:	62b8      	str	r0, [r7, #40]	; 0x28
 801135e:	e007      	b.n	8011370 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011360:	68fa      	ldr	r2, [r7, #12]
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	69db      	ldr	r3, [r3, #28]
 8011366:	4619      	mov	r1, r3
 8011368:	4610      	mov	r0, r2
 801136a:	f7fe fdda 	bl	800ff22 <create_chain>
 801136e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011372:	2b00      	cmp	r3, #0
 8011374:	f000 8109 	beq.w	801158a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801137a:	2b01      	cmp	r3, #1
 801137c:	d104      	bne.n	8011388 <f_write+0x10c>
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	2202      	movs	r2, #2
 8011382:	755a      	strb	r2, [r3, #21]
 8011384:	2302      	movs	r3, #2
 8011386:	e109      	b.n	801159c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801138a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801138e:	d104      	bne.n	801139a <f_write+0x11e>
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	2201      	movs	r2, #1
 8011394:	755a      	strb	r2, [r3, #21]
 8011396:	2301      	movs	r3, #1
 8011398:	e100      	b.n	801159c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801139e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	689b      	ldr	r3, [r3, #8]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d102      	bne.n	80113ae <f_write+0x132>
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113ac:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	7d1b      	ldrb	r3, [r3, #20]
 80113b2:	b25b      	sxtb	r3, r3
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	da18      	bge.n	80113ea <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80113b8:	693b      	ldr	r3, [r7, #16]
 80113ba:	7858      	ldrb	r0, [r3, #1]
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	6a1a      	ldr	r2, [r3, #32]
 80113c6:	2301      	movs	r3, #1
 80113c8:	f7fd ffb4 	bl	800f334 <disk_write>
 80113cc:	4603      	mov	r3, r0
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d004      	beq.n	80113dc <f_write+0x160>
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	2201      	movs	r2, #1
 80113d6:	755a      	strb	r2, [r3, #21]
 80113d8:	2301      	movs	r3, #1
 80113da:	e0df      	b.n	801159c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	7d1b      	ldrb	r3, [r3, #20]
 80113e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113e4:	b2da      	uxtb	r2, r3
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80113ea:	693a      	ldr	r2, [r7, #16]
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	69db      	ldr	r3, [r3, #28]
 80113f0:	4619      	mov	r1, r3
 80113f2:	4610      	mov	r0, r2
 80113f4:	f7fe fb2a 	bl	800fa4c <clust2sect>
 80113f8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d104      	bne.n	801140a <f_write+0x18e>
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	2202      	movs	r2, #2
 8011404:	755a      	strb	r2, [r3, #21]
 8011406:	2302      	movs	r3, #2
 8011408:	e0c8      	b.n	801159c <f_write+0x320>
			sect += csect;
 801140a:	697a      	ldr	r2, [r7, #20]
 801140c:	69bb      	ldr	r3, [r7, #24]
 801140e:	4413      	add	r3, r2
 8011410:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	899b      	ldrh	r3, [r3, #12]
 8011416:	461a      	mov	r2, r3
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	fbb3 f3f2 	udiv	r3, r3, r2
 801141e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011420:	6a3b      	ldr	r3, [r7, #32]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d043      	beq.n	80114ae <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011426:	69ba      	ldr	r2, [r7, #24]
 8011428:	6a3b      	ldr	r3, [r7, #32]
 801142a:	4413      	add	r3, r2
 801142c:	693a      	ldr	r2, [r7, #16]
 801142e:	8952      	ldrh	r2, [r2, #10]
 8011430:	4293      	cmp	r3, r2
 8011432:	d905      	bls.n	8011440 <f_write+0x1c4>
					cc = fs->csize - csect;
 8011434:	693b      	ldr	r3, [r7, #16]
 8011436:	895b      	ldrh	r3, [r3, #10]
 8011438:	461a      	mov	r2, r3
 801143a:	69bb      	ldr	r3, [r7, #24]
 801143c:	1ad3      	subs	r3, r2, r3
 801143e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	7858      	ldrb	r0, [r3, #1]
 8011444:	6a3b      	ldr	r3, [r7, #32]
 8011446:	697a      	ldr	r2, [r7, #20]
 8011448:	69f9      	ldr	r1, [r7, #28]
 801144a:	f7fd ff73 	bl	800f334 <disk_write>
 801144e:	4603      	mov	r3, r0
 8011450:	2b00      	cmp	r3, #0
 8011452:	d004      	beq.n	801145e <f_write+0x1e2>
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	2201      	movs	r2, #1
 8011458:	755a      	strb	r2, [r3, #21]
 801145a:	2301      	movs	r3, #1
 801145c:	e09e      	b.n	801159c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	6a1a      	ldr	r2, [r3, #32]
 8011462:	697b      	ldr	r3, [r7, #20]
 8011464:	1ad3      	subs	r3, r2, r3
 8011466:	6a3a      	ldr	r2, [r7, #32]
 8011468:	429a      	cmp	r2, r3
 801146a:	d918      	bls.n	801149e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	6a1a      	ldr	r2, [r3, #32]
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	1ad3      	subs	r3, r2, r3
 801147a:	693a      	ldr	r2, [r7, #16]
 801147c:	8992      	ldrh	r2, [r2, #12]
 801147e:	fb02 f303 	mul.w	r3, r2, r3
 8011482:	69fa      	ldr	r2, [r7, #28]
 8011484:	18d1      	adds	r1, r2, r3
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	899b      	ldrh	r3, [r3, #12]
 801148a:	461a      	mov	r2, r3
 801148c:	f7fe f812 	bl	800f4b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	7d1b      	ldrb	r3, [r3, #20]
 8011494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011498:	b2da      	uxtb	r2, r3
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801149e:	693b      	ldr	r3, [r7, #16]
 80114a0:	899b      	ldrh	r3, [r3, #12]
 80114a2:	461a      	mov	r2, r3
 80114a4:	6a3b      	ldr	r3, [r7, #32]
 80114a6:	fb02 f303 	mul.w	r3, r2, r3
 80114aa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80114ac:	e04b      	b.n	8011546 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	6a1b      	ldr	r3, [r3, #32]
 80114b2:	697a      	ldr	r2, [r7, #20]
 80114b4:	429a      	cmp	r2, r3
 80114b6:	d016      	beq.n	80114e6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	699a      	ldr	r2, [r3, #24]
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80114c0:	429a      	cmp	r2, r3
 80114c2:	d210      	bcs.n	80114e6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	7858      	ldrb	r0, [r3, #1]
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80114ce:	2301      	movs	r3, #1
 80114d0:	697a      	ldr	r2, [r7, #20]
 80114d2:	f7fd ff0f 	bl	800f2f4 <disk_read>
 80114d6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d004      	beq.n	80114e6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	2201      	movs	r2, #1
 80114e0:	755a      	strb	r2, [r3, #21]
 80114e2:	2301      	movs	r3, #1
 80114e4:	e05a      	b.n	801159c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	697a      	ldr	r2, [r7, #20]
 80114ea:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80114ec:	693b      	ldr	r3, [r7, #16]
 80114ee:	899b      	ldrh	r3, [r3, #12]
 80114f0:	4618      	mov	r0, r3
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	699b      	ldr	r3, [r3, #24]
 80114f6:	693a      	ldr	r2, [r7, #16]
 80114f8:	8992      	ldrh	r2, [r2, #12]
 80114fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80114fe:	fb02 f201 	mul.w	r2, r2, r1
 8011502:	1a9b      	subs	r3, r3, r2
 8011504:	1ac3      	subs	r3, r0, r3
 8011506:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	429a      	cmp	r2, r3
 801150e:	d901      	bls.n	8011514 <f_write+0x298>
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	699b      	ldr	r3, [r3, #24]
 801151e:	693a      	ldr	r2, [r7, #16]
 8011520:	8992      	ldrh	r2, [r2, #12]
 8011522:	fbb3 f0f2 	udiv	r0, r3, r2
 8011526:	fb02 f200 	mul.w	r2, r2, r0
 801152a:	1a9b      	subs	r3, r3, r2
 801152c:	440b      	add	r3, r1
 801152e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011530:	69f9      	ldr	r1, [r7, #28]
 8011532:	4618      	mov	r0, r3
 8011534:	f7fd ffbe 	bl	800f4b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	7d1b      	ldrb	r3, [r3, #20]
 801153c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011540:	b2da      	uxtb	r2, r3
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011546:	69fa      	ldr	r2, [r7, #28]
 8011548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801154a:	4413      	add	r3, r2
 801154c:	61fb      	str	r3, [r7, #28]
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	699a      	ldr	r2, [r3, #24]
 8011552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011554:	441a      	add	r2, r3
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	619a      	str	r2, [r3, #24]
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	68da      	ldr	r2, [r3, #12]
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	699b      	ldr	r3, [r3, #24]
 8011562:	429a      	cmp	r2, r3
 8011564:	bf38      	it	cc
 8011566:	461a      	movcc	r2, r3
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	60da      	str	r2, [r3, #12]
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	681a      	ldr	r2, [r3, #0]
 8011570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011572:	441a      	add	r2, r3
 8011574:	683b      	ldr	r3, [r7, #0]
 8011576:	601a      	str	r2, [r3, #0]
 8011578:	687a      	ldr	r2, [r7, #4]
 801157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801157c:	1ad3      	subs	r3, r2, r3
 801157e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	2b00      	cmp	r3, #0
 8011584:	f47f aeb5 	bne.w	80112f2 <f_write+0x76>
 8011588:	e000      	b.n	801158c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801158a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	7d1b      	ldrb	r3, [r3, #20]
 8011590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011594:	b2da      	uxtb	r2, r3
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801159a:	2300      	movs	r3, #0
}
 801159c:	4618      	mov	r0, r3
 801159e:	3730      	adds	r7, #48	; 0x30
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}

080115a4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b086      	sub	sp, #24
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f107 0208 	add.w	r2, r7, #8
 80115b2:	4611      	mov	r1, r2
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7ff fc19 	bl	8010dec <validate>
 80115ba:	4603      	mov	r3, r0
 80115bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80115be:	7dfb      	ldrb	r3, [r7, #23]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d168      	bne.n	8011696 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	7d1b      	ldrb	r3, [r3, #20]
 80115c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d062      	beq.n	8011696 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	7d1b      	ldrb	r3, [r3, #20]
 80115d4:	b25b      	sxtb	r3, r3
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	da15      	bge.n	8011606 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	7858      	ldrb	r0, [r3, #1]
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	6a1a      	ldr	r2, [r3, #32]
 80115e8:	2301      	movs	r3, #1
 80115ea:	f7fd fea3 	bl	800f334 <disk_write>
 80115ee:	4603      	mov	r3, r0
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d001      	beq.n	80115f8 <f_sync+0x54>
 80115f4:	2301      	movs	r3, #1
 80115f6:	e04f      	b.n	8011698 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	7d1b      	ldrb	r3, [r3, #20]
 80115fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011600:	b2da      	uxtb	r2, r3
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011606:	f000 fae7 	bl	8011bd8 <get_fattime>
 801160a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801160c:	68ba      	ldr	r2, [r7, #8]
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011612:	4619      	mov	r1, r3
 8011614:	4610      	mov	r0, r2
 8011616:	f7fe f97b 	bl	800f910 <move_window>
 801161a:	4603      	mov	r3, r0
 801161c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801161e:	7dfb      	ldrb	r3, [r7, #23]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d138      	bne.n	8011696 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011628:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	330b      	adds	r3, #11
 801162e:	781a      	ldrb	r2, [r3, #0]
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	330b      	adds	r3, #11
 8011634:	f042 0220 	orr.w	r2, r2, #32
 8011638:	b2d2      	uxtb	r2, r2
 801163a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	6818      	ldr	r0, [r3, #0]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	689b      	ldr	r3, [r3, #8]
 8011644:	461a      	mov	r2, r3
 8011646:	68f9      	ldr	r1, [r7, #12]
 8011648:	f7fe ff00 	bl	801044c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	f103 021c 	add.w	r2, r3, #28
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	68db      	ldr	r3, [r3, #12]
 8011656:	4619      	mov	r1, r3
 8011658:	4610      	mov	r0, r2
 801165a:	f7fd feff 	bl	800f45c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	3316      	adds	r3, #22
 8011662:	6939      	ldr	r1, [r7, #16]
 8011664:	4618      	mov	r0, r3
 8011666:	f7fd fef9 	bl	800f45c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	3312      	adds	r3, #18
 801166e:	2100      	movs	r1, #0
 8011670:	4618      	mov	r0, r3
 8011672:	f7fd fed8 	bl	800f426 <st_word>
					fs->wflag = 1;
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	2201      	movs	r2, #1
 801167a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	4618      	mov	r0, r3
 8011680:	f7fe f974 	bl	800f96c <sync_fs>
 8011684:	4603      	mov	r3, r0
 8011686:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	7d1b      	ldrb	r3, [r3, #20]
 801168c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011690:	b2da      	uxtb	r2, r3
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011696:	7dfb      	ldrb	r3, [r7, #23]
}
 8011698:	4618      	mov	r0, r3
 801169a:	3718      	adds	r7, #24
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}

080116a0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b084      	sub	sp, #16
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80116a8:	6878      	ldr	r0, [r7, #4]
 80116aa:	f7ff ff7b 	bl	80115a4 <f_sync>
 80116ae:	4603      	mov	r3, r0
 80116b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80116b2:	7bfb      	ldrb	r3, [r7, #15]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d118      	bne.n	80116ea <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f107 0208 	add.w	r2, r7, #8
 80116be:	4611      	mov	r1, r2
 80116c0:	4618      	mov	r0, r3
 80116c2:	f7ff fb93 	bl	8010dec <validate>
 80116c6:	4603      	mov	r3, r0
 80116c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80116ca:	7bfb      	ldrb	r3, [r7, #15]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d10c      	bne.n	80116ea <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	691b      	ldr	r3, [r3, #16]
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7fe f877 	bl	800f7c8 <dec_lock>
 80116da:	4603      	mov	r3, r0
 80116dc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80116de:	7bfb      	ldrb	r3, [r7, #15]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d102      	bne.n	80116ea <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2200      	movs	r2, #0
 80116e8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80116ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3710      	adds	r7, #16
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}

080116f4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b096      	sub	sp, #88	; 0x58
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80116fc:	f107 0108 	add.w	r1, r7, #8
 8011700:	1d3b      	adds	r3, r7, #4
 8011702:	2202      	movs	r2, #2
 8011704:	4618      	mov	r0, r3
 8011706:	f7ff f8ed 	bl	80108e4 <find_volume>
 801170a:	4603      	mov	r3, r0
 801170c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8011714:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011718:	2b00      	cmp	r3, #0
 801171a:	f040 80f2 	bne.w	8011902 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801171e:	687a      	ldr	r2, [r7, #4]
 8011720:	f107 030c 	add.w	r3, r7, #12
 8011724:	4611      	mov	r1, r2
 8011726:	4618      	mov	r0, r3
 8011728:	f7fe ffcc 	bl	80106c4 <follow_path>
 801172c:	4603      	mov	r3, r0
 801172e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8011732:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011736:	2b00      	cmp	r3, #0
 8011738:	d102      	bne.n	8011740 <f_mkdir+0x4c>
 801173a:	2308      	movs	r3, #8
 801173c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8011740:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011744:	2b04      	cmp	r3, #4
 8011746:	f040 80dc 	bne.w	8011902 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801174a:	f107 030c 	add.w	r3, r7, #12
 801174e:	2100      	movs	r1, #0
 8011750:	4618      	mov	r0, r3
 8011752:	f7fe fbe6 	bl	800ff22 <create_chain>
 8011756:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	895b      	ldrh	r3, [r3, #10]
 801175c:	461a      	mov	r2, r3
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	899b      	ldrh	r3, [r3, #12]
 8011762:	fb03 f302 	mul.w	r3, r3, r2
 8011766:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8011768:	2300      	movs	r3, #0
 801176a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801176e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011770:	2b00      	cmp	r3, #0
 8011772:	d102      	bne.n	801177a <f_mkdir+0x86>
 8011774:	2307      	movs	r3, #7
 8011776:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 801177a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801177c:	2b01      	cmp	r3, #1
 801177e:	d102      	bne.n	8011786 <f_mkdir+0x92>
 8011780:	2302      	movs	r3, #2
 8011782:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011788:	f1b3 3fff 	cmp.w	r3, #4294967295
 801178c:	d102      	bne.n	8011794 <f_mkdir+0xa0>
 801178e:	2301      	movs	r3, #1
 8011790:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8011794:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011798:	2b00      	cmp	r3, #0
 801179a:	d106      	bne.n	80117aa <f_mkdir+0xb6>
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	4618      	mov	r0, r3
 80117a0:	f7fe f872 	bl	800f888 <sync_window>
 80117a4:	4603      	mov	r3, r0
 80117a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80117aa:	f000 fa15 	bl	8011bd8 <get_fattime>
 80117ae:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80117b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d16c      	bne.n	8011892 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 80117b8:	68bb      	ldr	r3, [r7, #8]
 80117ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80117bc:	4618      	mov	r0, r3
 80117be:	f7fe f945 	bl	800fa4c <clust2sect>
 80117c2:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	3334      	adds	r3, #52	; 0x34
 80117c8:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80117ca:	68bb      	ldr	r3, [r7, #8]
 80117cc:	899b      	ldrh	r3, [r3, #12]
 80117ce:	461a      	mov	r2, r3
 80117d0:	2100      	movs	r1, #0
 80117d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80117d4:	f7fd fe8f 	bl	800f4f6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80117d8:	220b      	movs	r2, #11
 80117da:	2120      	movs	r1, #32
 80117dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80117de:	f7fd fe8a 	bl	800f4f6 <mem_set>
					dir[DIR_Name] = '.';
 80117e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117e4:	222e      	movs	r2, #46	; 0x2e
 80117e6:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80117e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117ea:	330b      	adds	r3, #11
 80117ec:	2210      	movs	r2, #16
 80117ee:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80117f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117f2:	3316      	adds	r3, #22
 80117f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80117f6:	4618      	mov	r0, r3
 80117f8:	f7fd fe30 	bl	800f45c <st_dword>
					st_clust(fs, dir, dcl);
 80117fc:	68bb      	ldr	r3, [r7, #8]
 80117fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011800:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011802:	4618      	mov	r0, r3
 8011804:	f7fe fe22 	bl	801044c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8011808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801180a:	3320      	adds	r3, #32
 801180c:	2220      	movs	r2, #32
 801180e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011810:	4618      	mov	r0, r3
 8011812:	f7fd fe4f 	bl	800f4b4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8011816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011818:	3321      	adds	r3, #33	; 0x21
 801181a:	222e      	movs	r2, #46	; 0x2e
 801181c:	701a      	strb	r2, [r3, #0]
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	781b      	ldrb	r3, [r3, #0]
 8011826:	2b03      	cmp	r3, #3
 8011828:	d106      	bne.n	8011838 <f_mkdir+0x144>
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801182e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011830:	429a      	cmp	r2, r3
 8011832:	d101      	bne.n	8011838 <f_mkdir+0x144>
 8011834:	2300      	movs	r3, #0
 8011836:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8011838:	68b8      	ldr	r0, [r7, #8]
 801183a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801183c:	3320      	adds	r3, #32
 801183e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011840:	4619      	mov	r1, r3
 8011842:	f7fe fe03 	bl	801044c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011846:	68bb      	ldr	r3, [r7, #8]
 8011848:	895b      	ldrh	r3, [r3, #10]
 801184a:	653b      	str	r3, [r7, #80]	; 0x50
 801184c:	e01c      	b.n	8011888 <f_mkdir+0x194>
					fs->winsect = dsc++;
 801184e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011850:	1c5a      	adds	r2, r3, #1
 8011852:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011854:	68ba      	ldr	r2, [r7, #8]
 8011856:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	2201      	movs	r2, #1
 801185c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	4618      	mov	r0, r3
 8011862:	f7fe f811 	bl	800f888 <sync_window>
 8011866:	4603      	mov	r3, r0
 8011868:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 801186c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011870:	2b00      	cmp	r3, #0
 8011872:	d10d      	bne.n	8011890 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	899b      	ldrh	r3, [r3, #12]
 8011878:	461a      	mov	r2, r3
 801187a:	2100      	movs	r1, #0
 801187c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801187e:	f7fd fe3a 	bl	800f4f6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011884:	3b01      	subs	r3, #1
 8011886:	653b      	str	r3, [r7, #80]	; 0x50
 8011888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801188a:	2b00      	cmp	r3, #0
 801188c:	d1df      	bne.n	801184e <f_mkdir+0x15a>
 801188e:	e000      	b.n	8011892 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8011890:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8011892:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011896:	2b00      	cmp	r3, #0
 8011898:	d107      	bne.n	80118aa <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801189a:	f107 030c 	add.w	r3, r7, #12
 801189e:	4618      	mov	r0, r3
 80118a0:	f7fe fe49 	bl	8010536 <dir_register>
 80118a4:	4603      	mov	r3, r0
 80118a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80118aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d120      	bne.n	80118f4 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80118b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b4:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80118b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118b8:	3316      	adds	r3, #22
 80118ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80118bc:	4618      	mov	r0, r3
 80118be:	f7fd fdcd 	bl	800f45c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80118c8:	4618      	mov	r0, r3
 80118ca:	f7fe fdbf 	bl	801044c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80118ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118d0:	330b      	adds	r3, #11
 80118d2:	2210      	movs	r2, #16
 80118d4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	2201      	movs	r2, #1
 80118da:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80118dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d10e      	bne.n	8011902 <f_mkdir+0x20e>
					res = sync_fs(fs);
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7fe f840 	bl	800f96c <sync_fs>
 80118ec:	4603      	mov	r3, r0
 80118ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80118f2:	e006      	b.n	8011902 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80118f4:	f107 030c 	add.w	r3, r7, #12
 80118f8:	2200      	movs	r2, #0
 80118fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80118fc:	4618      	mov	r0, r3
 80118fe:	f7fe faab 	bl	800fe58 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011902:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8011906:	4618      	mov	r0, r3
 8011908:	3758      	adds	r7, #88	; 0x58
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}
	...

08011910 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011910:	b480      	push	{r7}
 8011912:	b087      	sub	sp, #28
 8011914:	af00      	add	r7, sp, #0
 8011916:	60f8      	str	r0, [r7, #12]
 8011918:	60b9      	str	r1, [r7, #8]
 801191a:	4613      	mov	r3, r2
 801191c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801191e:	2301      	movs	r3, #1
 8011920:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011922:	2300      	movs	r3, #0
 8011924:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011926:	4b1f      	ldr	r3, [pc, #124]	; (80119a4 <FATFS_LinkDriverEx+0x94>)
 8011928:	7a5b      	ldrb	r3, [r3, #9]
 801192a:	b2db      	uxtb	r3, r3
 801192c:	2b00      	cmp	r3, #0
 801192e:	d131      	bne.n	8011994 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011930:	4b1c      	ldr	r3, [pc, #112]	; (80119a4 <FATFS_LinkDriverEx+0x94>)
 8011932:	7a5b      	ldrb	r3, [r3, #9]
 8011934:	b2db      	uxtb	r3, r3
 8011936:	461a      	mov	r2, r3
 8011938:	4b1a      	ldr	r3, [pc, #104]	; (80119a4 <FATFS_LinkDriverEx+0x94>)
 801193a:	2100      	movs	r1, #0
 801193c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801193e:	4b19      	ldr	r3, [pc, #100]	; (80119a4 <FATFS_LinkDriverEx+0x94>)
 8011940:	7a5b      	ldrb	r3, [r3, #9]
 8011942:	b2db      	uxtb	r3, r3
 8011944:	4a17      	ldr	r2, [pc, #92]	; (80119a4 <FATFS_LinkDriverEx+0x94>)
 8011946:	009b      	lsls	r3, r3, #2
 8011948:	4413      	add	r3, r2
 801194a:	68fa      	ldr	r2, [r7, #12]
 801194c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801194e:	4b15      	ldr	r3, [pc, #84]	; (80119a4 <FATFS_LinkDriverEx+0x94>)
 8011950:	7a5b      	ldrb	r3, [r3, #9]
 8011952:	b2db      	uxtb	r3, r3
 8011954:	461a      	mov	r2, r3
 8011956:	4b13      	ldr	r3, [pc, #76]	; (80119a4 <FATFS_LinkDriverEx+0x94>)
 8011958:	4413      	add	r3, r2
 801195a:	79fa      	ldrb	r2, [r7, #7]
 801195c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801195e:	4b11      	ldr	r3, [pc, #68]	; (80119a4 <FATFS_LinkDriverEx+0x94>)
 8011960:	7a5b      	ldrb	r3, [r3, #9]
 8011962:	b2db      	uxtb	r3, r3
 8011964:	1c5a      	adds	r2, r3, #1
 8011966:	b2d1      	uxtb	r1, r2
 8011968:	4a0e      	ldr	r2, [pc, #56]	; (80119a4 <FATFS_LinkDriverEx+0x94>)
 801196a:	7251      	strb	r1, [r2, #9]
 801196c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801196e:	7dbb      	ldrb	r3, [r7, #22]
 8011970:	3330      	adds	r3, #48	; 0x30
 8011972:	b2da      	uxtb	r2, r3
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	3301      	adds	r3, #1
 801197c:	223a      	movs	r2, #58	; 0x3a
 801197e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	3302      	adds	r3, #2
 8011984:	222f      	movs	r2, #47	; 0x2f
 8011986:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011988:	68bb      	ldr	r3, [r7, #8]
 801198a:	3303      	adds	r3, #3
 801198c:	2200      	movs	r2, #0
 801198e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011990:	2300      	movs	r3, #0
 8011992:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011994:	7dfb      	ldrb	r3, [r7, #23]
}
 8011996:	4618      	mov	r0, r3
 8011998:	371c      	adds	r7, #28
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr
 80119a2:	bf00      	nop
 80119a4:	200003a4 	.word	0x200003a4

080119a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b082      	sub	sp, #8
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80119b2:	2200      	movs	r2, #0
 80119b4:	6839      	ldr	r1, [r7, #0]
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f7ff ffaa 	bl	8011910 <FATFS_LinkDriverEx>
 80119bc:	4603      	mov	r3, r0
}
 80119be:	4618      	mov	r0, r3
 80119c0:	3708      	adds	r7, #8
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}
	...

080119c8 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 80119c8:	b480      	push	{r7}
 80119ca:	b085      	sub	sp, #20
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
 80119d0:	460b      	mov	r3, r1
 80119d2:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 80119d4:	2300      	movs	r3, #0
 80119d6:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 80119d8:	2301      	movs	r3, #1
 80119da:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 80119dc:	4b15      	ldr	r3, [pc, #84]	; (8011a34 <FATFS_UnLinkDriverEx+0x6c>)
 80119de:	7a5b      	ldrb	r3, [r3, #9]
 80119e0:	b2db      	uxtb	r3, r3
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d01e      	beq.n	8011a24 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	781b      	ldrb	r3, [r3, #0]
 80119ea:	3b30      	subs	r3, #48	; 0x30
 80119ec:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 80119ee:	7bbb      	ldrb	r3, [r7, #14]
 80119f0:	4a10      	ldr	r2, [pc, #64]	; (8011a34 <FATFS_UnLinkDriverEx+0x6c>)
 80119f2:	009b      	lsls	r3, r3, #2
 80119f4:	4413      	add	r3, r2
 80119f6:	685b      	ldr	r3, [r3, #4]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d013      	beq.n	8011a24 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 80119fc:	7bbb      	ldrb	r3, [r7, #14]
 80119fe:	4a0d      	ldr	r2, [pc, #52]	; (8011a34 <FATFS_UnLinkDriverEx+0x6c>)
 8011a00:	009b      	lsls	r3, r3, #2
 8011a02:	4413      	add	r3, r2
 8011a04:	2200      	movs	r2, #0
 8011a06:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8011a08:	7bbb      	ldrb	r3, [r7, #14]
 8011a0a:	4a0a      	ldr	r2, [pc, #40]	; (8011a34 <FATFS_UnLinkDriverEx+0x6c>)
 8011a0c:	4413      	add	r3, r2
 8011a0e:	2200      	movs	r2, #0
 8011a10:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8011a12:	4b08      	ldr	r3, [pc, #32]	; (8011a34 <FATFS_UnLinkDriverEx+0x6c>)
 8011a14:	7a5b      	ldrb	r3, [r3, #9]
 8011a16:	b2db      	uxtb	r3, r3
 8011a18:	3b01      	subs	r3, #1
 8011a1a:	b2da      	uxtb	r2, r3
 8011a1c:	4b05      	ldr	r3, [pc, #20]	; (8011a34 <FATFS_UnLinkDriverEx+0x6c>)
 8011a1e:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8011a20:	2300      	movs	r3, #0
 8011a22:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8011a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3714      	adds	r7, #20
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a30:	4770      	bx	lr
 8011a32:	bf00      	nop
 8011a34:	200003a4 	.word	0x200003a4

08011a38 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b082      	sub	sp, #8
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8011a40:	2100      	movs	r1, #0
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f7ff ffc0 	bl	80119c8 <FATFS_UnLinkDriverEx>
 8011a48:	4603      	mov	r3, r0
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3708      	adds	r7, #8
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}
	...

08011a54 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b082      	sub	sp, #8
 8011a58:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011a5e:	f000 f896 	bl	8011b8e <BSP_SD_IsDetected>
 8011a62:	4603      	mov	r3, r0
 8011a64:	2b01      	cmp	r3, #1
 8011a66:	d001      	beq.n	8011a6c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8011a68:	2301      	movs	r3, #1
 8011a6a:	e012      	b.n	8011a92 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8011a6c:	480b      	ldr	r0, [pc, #44]	; (8011a9c <BSP_SD_Init+0x48>)
 8011a6e:	f7f7 fc21 	bl	80092b4 <HAL_SD_Init>
 8011a72:	4603      	mov	r3, r0
 8011a74:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011a76:	79fb      	ldrb	r3, [r7, #7]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d109      	bne.n	8011a90 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8011a7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011a80:	4806      	ldr	r0, [pc, #24]	; (8011a9c <BSP_SD_Init+0x48>)
 8011a82:	f7f8 f9fc 	bl	8009e7e <HAL_SD_ConfigWideBusOperation>
 8011a86:	4603      	mov	r3, r0
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d001      	beq.n	8011a90 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011a90:	79fb      	ldrb	r3, [r7, #7]
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3708      	adds	r7, #8
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	20006ae4 	.word	0x20006ae4

08011aa0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b086      	sub	sp, #24
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	60f8      	str	r0, [r7, #12]
 8011aa8:	60b9      	str	r1, [r7, #8]
 8011aaa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011aac:	2300      	movs	r3, #0
 8011aae:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	68ba      	ldr	r2, [r7, #8]
 8011ab4:	68f9      	ldr	r1, [r7, #12]
 8011ab6:	4806      	ldr	r0, [pc, #24]	; (8011ad0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011ab8:	f7f7 fc84 	bl	80093c4 <HAL_SD_ReadBlocks_DMA>
 8011abc:	4603      	mov	r3, r0
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d001      	beq.n	8011ac6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8011ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3718      	adds	r7, #24
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}
 8011ad0:	20006ae4 	.word	0x20006ae4

08011ad4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b086      	sub	sp, #24
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	60f8      	str	r0, [r7, #12]
 8011adc:	60b9      	str	r1, [r7, #8]
 8011ade:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	68ba      	ldr	r2, [r7, #8]
 8011ae8:	68f9      	ldr	r1, [r7, #12]
 8011aea:	4806      	ldr	r0, [pc, #24]	; (8011b04 <BSP_SD_WriteBlocks_DMA+0x30>)
 8011aec:	f7f7 fd36 	bl	800955c <HAL_SD_WriteBlocks_DMA>
 8011af0:	4603      	mov	r3, r0
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d001      	beq.n	8011afa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011af6:	2301      	movs	r3, #1
 8011af8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8011afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8011afc:	4618      	mov	r0, r3
 8011afe:	3718      	adds	r7, #24
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bd80      	pop	{r7, pc}
 8011b04:	20006ae4 	.word	0x20006ae4

08011b08 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011b0c:	4805      	ldr	r0, [pc, #20]	; (8011b24 <BSP_SD_GetCardState+0x1c>)
 8011b0e:	f7f8 fa32 	bl	8009f76 <HAL_SD_GetCardState>
 8011b12:	4603      	mov	r3, r0
 8011b14:	2b04      	cmp	r3, #4
 8011b16:	bf14      	ite	ne
 8011b18:	2301      	movne	r3, #1
 8011b1a:	2300      	moveq	r3, #0
 8011b1c:	b2db      	uxtb	r3, r3
}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	bd80      	pop	{r7, pc}
 8011b22:	bf00      	nop
 8011b24:	20006ae4 	.word	0x20006ae4

08011b28 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011b30:	6879      	ldr	r1, [r7, #4]
 8011b32:	4803      	ldr	r0, [pc, #12]	; (8011b40 <BSP_SD_GetCardInfo+0x18>)
 8011b34:	f7f8 f977 	bl	8009e26 <HAL_SD_GetCardInfo>
}
 8011b38:	bf00      	nop
 8011b3a:	3708      	adds	r7, #8
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd80      	pop	{r7, pc}
 8011b40:	20006ae4 	.word	0x20006ae4

08011b44 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b082      	sub	sp, #8
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8011b4c:	f000 f818 	bl	8011b80 <BSP_SD_AbortCallback>
}
 8011b50:	bf00      	nop
 8011b52:	3708      	adds	r7, #8
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}

08011b58 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011b60:	f001 ff0c 	bl	801397c <BSP_SD_WriteCpltCallback>
}
 8011b64:	bf00      	nop
 8011b66:	3708      	adds	r7, #8
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011b74:	f001 ff0e 	bl	8013994 <BSP_SD_ReadCpltCallback>
}
 8011b78:	bf00      	nop
 8011b7a:	3708      	adds	r7, #8
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}

08011b80 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8011b80:	b480      	push	{r7}
 8011b82:	af00      	add	r7, sp, #0

}
 8011b84:	bf00      	nop
 8011b86:	46bd      	mov	sp, r7
 8011b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8c:	4770      	bx	lr

08011b8e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8011b8e:	b580      	push	{r7, lr}
 8011b90:	b082      	sub	sp, #8
 8011b92:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011b94:	2301      	movs	r3, #1
 8011b96:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8011b98:	f000 f826 	bl	8011be8 <BSP_PlatformIsDetected>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d101      	bne.n	8011ba6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011ba6:	79fb      	ldrb	r3, [r7, #7]
 8011ba8:	b2db      	uxtb	r3, r3
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	3708      	adds	r7, #8
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}
	...

08011bb4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011bb8:	4904      	ldr	r1, [pc, #16]	; (8011bcc <MX_FATFS_Init+0x18>)
 8011bba:	4805      	ldr	r0, [pc, #20]	; (8011bd0 <MX_FATFS_Init+0x1c>)
 8011bbc:	f7ff fef4 	bl	80119a8 <FATFS_LinkDriver>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	461a      	mov	r2, r3
 8011bc4:	4b03      	ldr	r3, [pc, #12]	; (8011bd4 <MX_FATFS_Init+0x20>)
 8011bc6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8011bc8:	bf00      	nop
 8011bca:	bd80      	pop	{r7, pc}
 8011bcc:	20004888 	.word	0x20004888
 8011bd0:	0801ab2c 	.word	0x0801ab2c
 8011bd4:	20004884 	.word	0x20004884

08011bd8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011bd8:	b480      	push	{r7}
 8011bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011bdc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	46bd      	mov	sp, r7
 8011be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be6:	4770      	bx	lr

08011be8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011bee:	2301      	movs	r3, #1
 8011bf0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011bf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011bf6:	4806      	ldr	r0, [pc, #24]	; (8011c10 <BSP_PlatformIsDetected+0x28>)
 8011bf8:	f7f4 fb84 	bl	8006304 <HAL_GPIO_ReadPin>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d001      	beq.n	8011c06 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011c02:	2300      	movs	r3, #0
 8011c04:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8011c06:	79fb      	ldrb	r3, [r7, #7]
}  
 8011c08:	4618      	mov	r0, r3
 8011c0a:	3708      	adds	r7, #8
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	bd80      	pop	{r7, pc}
 8011c10:	40020000 	.word	0x40020000

08011c14 <print>:
static void loop(void);

static uint32_t printLen = 0;
static char printBuffer[512];
static inline void print(char* str)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b082      	sub	sp, #8
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8011c1c:	2201      	movs	r2, #1
 8011c1e:	2140      	movs	r1, #64	; 0x40
 8011c20:	480c      	ldr	r0, [pc, #48]	; (8011c54 <print+0x40>)
 8011c22:	f7f4 fb87 	bl	8006334 <HAL_GPIO_WritePin>

	while (CDC_Transmit_FS((uint8_t*) str, strlen(str)) == USBD_BUSY);
 8011c26:	bf00      	nop
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f7ee fadb 	bl	80001e4 <strlen>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	b29b      	uxth	r3, r3
 8011c32:	4619      	mov	r1, r3
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f002 fb2b 	bl	8014290 <CDC_Transmit_FS>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	2b01      	cmp	r3, #1
 8011c3e:	d0f3      	beq.n	8011c28 <print+0x14>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8011c40:	2200      	movs	r2, #0
 8011c42:	2140      	movs	r1, #64	; 0x40
 8011c44:	4803      	ldr	r0, [pc, #12]	; (8011c54 <print+0x40>)
 8011c46:	f7f4 fb75 	bl	8006334 <HAL_GPIO_WritePin>
	#endif
};
 8011c4a:	bf00      	nop
 8011c4c:	3708      	adds	r7, #8
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}
 8011c52:	bf00      	nop
 8011c54:	40020800 	.word	0x40020800

08011c58 <println>:
static inline void println(char* str)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b084      	sub	sp, #16
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8011c60:	2201      	movs	r2, #1
 8011c62:	2140      	movs	r1, #64	; 0x40
 8011c64:	4820      	ldr	r0, [pc, #128]	; (8011ce8 <println+0x90>)
 8011c66:	f7f4 fb65 	bl	8006334 <HAL_GPIO_WritePin>

	printLen = strlen(str);
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f7ee faba 	bl	80001e4 <strlen>
 8011c70:	4602      	mov	r2, r0
 8011c72:	4b1e      	ldr	r3, [pc, #120]	; (8011cec <println+0x94>)
 8011c74:	601a      	str	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < printLen; i++)
 8011c76:	2300      	movs	r3, #0
 8011c78:	73fb      	strb	r3, [r7, #15]
 8011c7a:	e009      	b.n	8011c90 <println+0x38>
	{
		printBuffer[i] = str[i];
 8011c7c:	7bfb      	ldrb	r3, [r7, #15]
 8011c7e:	687a      	ldr	r2, [r7, #4]
 8011c80:	441a      	add	r2, r3
 8011c82:	7bfb      	ldrb	r3, [r7, #15]
 8011c84:	7811      	ldrb	r1, [r2, #0]
 8011c86:	4a1a      	ldr	r2, [pc, #104]	; (8011cf0 <println+0x98>)
 8011c88:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 8011c8a:	7bfb      	ldrb	r3, [r7, #15]
 8011c8c:	3301      	adds	r3, #1
 8011c8e:	73fb      	strb	r3, [r7, #15]
 8011c90:	7bfa      	ldrb	r2, [r7, #15]
 8011c92:	4b16      	ldr	r3, [pc, #88]	; (8011cec <println+0x94>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d3f0      	bcc.n	8011c7c <println+0x24>
	}
	printBuffer[printLen] = '\n';
 8011c9a:	4b14      	ldr	r3, [pc, #80]	; (8011cec <println+0x94>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	4a14      	ldr	r2, [pc, #80]	; (8011cf0 <println+0x98>)
 8011ca0:	210a      	movs	r1, #10
 8011ca2:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 8011ca4:	4b11      	ldr	r3, [pc, #68]	; (8011cec <println+0x94>)
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	3301      	adds	r3, #1
 8011caa:	4a11      	ldr	r2, [pc, #68]	; (8011cf0 <println+0x98>)
 8011cac:	210d      	movs	r1, #13
 8011cae:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 8011cb0:	4b0e      	ldr	r3, [pc, #56]	; (8011cec <println+0x94>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	3302      	adds	r3, #2
 8011cb6:	4a0e      	ldr	r2, [pc, #56]	; (8011cf0 <println+0x98>)
 8011cb8:	2100      	movs	r1, #0
 8011cba:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 8011cbc:	bf00      	nop
 8011cbe:	4b0b      	ldr	r3, [pc, #44]	; (8011cec <println+0x94>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	3303      	adds	r3, #3
 8011cc6:	b29b      	uxth	r3, r3
 8011cc8:	4619      	mov	r1, r3
 8011cca:	4809      	ldr	r0, [pc, #36]	; (8011cf0 <println+0x98>)
 8011ccc:	f002 fae0 	bl	8014290 <CDC_Transmit_FS>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	2b01      	cmp	r3, #1
 8011cd4:	d0f3      	beq.n	8011cbe <println+0x66>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	2140      	movs	r1, #64	; 0x40
 8011cda:	4803      	ldr	r0, [pc, #12]	; (8011ce8 <println+0x90>)
 8011cdc:	f7f4 fb2a 	bl	8006334 <HAL_GPIO_WritePin>
	#endif
};
 8011ce0:	bf00      	nop
 8011ce2:	3710      	adds	r7, #16
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}
 8011ce8:	40020800 	.word	0x40020800
 8011cec:	200003b0 	.word	0x200003b0
 8011cf0:	200003b4 	.word	0x200003b4

08011cf4 <print_float>:

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
}
static inline void print_float(float number)
{
 8011cf4:	b590      	push	{r4, r7, lr}
 8011cf6:	b083      	sub	sp, #12
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	ed87 0a01 	vstr	s0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8011cfe:	2201      	movs	r2, #1
 8011d00:	2140      	movs	r1, #64	; 0x40
 8011d02:	4813      	ldr	r0, [pc, #76]	; (8011d50 <print_float+0x5c>)
 8011d04:	f7f4 fb16 	bl	8006334 <HAL_GPIO_WritePin>

	printLen = sprintf(printBuffer, "%f", number);
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f7ee fc2d 	bl	8000568 <__aeabi_f2d>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	460c      	mov	r4, r1
 8011d12:	461a      	mov	r2, r3
 8011d14:	4623      	mov	r3, r4
 8011d16:	490f      	ldr	r1, [pc, #60]	; (8011d54 <print_float+0x60>)
 8011d18:	480f      	ldr	r0, [pc, #60]	; (8011d58 <print_float+0x64>)
 8011d1a:	f003 fe6b 	bl	80159f4 <siprintf>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	461a      	mov	r2, r3
 8011d22:	4b0e      	ldr	r3, [pc, #56]	; (8011d5c <print_float+0x68>)
 8011d24:	601a      	str	r2, [r3, #0]
	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY);
 8011d26:	bf00      	nop
 8011d28:	4b0c      	ldr	r3, [pc, #48]	; (8011d5c <print_float+0x68>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	b29b      	uxth	r3, r3
 8011d2e:	4619      	mov	r1, r3
 8011d30:	4809      	ldr	r0, [pc, #36]	; (8011d58 <print_float+0x64>)
 8011d32:	f002 faad 	bl	8014290 <CDC_Transmit_FS>
 8011d36:	4603      	mov	r3, r0
 8011d38:	2b01      	cmp	r3, #1
 8011d3a:	d0f5      	beq.n	8011d28 <print_float+0x34>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	2140      	movs	r1, #64	; 0x40
 8011d40:	4803      	ldr	r0, [pc, #12]	; (8011d50 <print_float+0x5c>)
 8011d42:	f7f4 faf7 	bl	8006334 <HAL_GPIO_WritePin>
	#endif
}
 8011d46:	bf00      	nop
 8011d48:	370c      	adds	r7, #12
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd90      	pop	{r4, r7, pc}
 8011d4e:	bf00      	nop
 8011d50:	40020800 	.word	0x40020800
 8011d54:	0801a520 	.word	0x0801a520
 8011d58:	200003b4 	.word	0x200003b4
 8011d5c:	200003b0 	.word	0x200003b0

08011d60 <micros>:
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8011d60:	b480      	push	{r7}
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d72:	4770      	bx	lr

08011d74 <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8011d74:	b480      	push	{r7}
 8011d76:	af00      	add	r7, sp, #0
 8011d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d7e:	4a04      	ldr	r2, [pc, #16]	; (8011d90 <millis+0x1c>)
 8011d80:	fba2 2303 	umull	r2, r3, r2, r3
 8011d84:	099b      	lsrs	r3, r3, #6
 8011d86:	4618      	mov	r0, r3
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8e:	4770      	bx	lr
 8011d90:	10624dd3 	.word	0x10624dd3

08011d94 <getTime>:
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b08c      	sub	sp, #48	; 0x30
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 8011d9c:	f107 031c 	add.w	r3, r7, #28
 8011da0:	2200      	movs	r2, #0
 8011da2:	601a      	str	r2, [r3, #0]
 8011da4:	605a      	str	r2, [r3, #4]
 8011da6:	609a      	str	r2, [r3, #8]
 8011da8:	60da      	str	r2, [r3, #12]
 8011daa:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 8011dac:	2300      	movs	r3, #0
 8011dae:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 8011db0:	f107 030c 	add.w	r3, r7, #12
 8011db4:	2200      	movs	r2, #0
 8011db6:	601a      	str	r2, [r3, #0]
 8011db8:	605a      	str	r2, [r3, #4]
 8011dba:	811a      	strh	r2, [r3, #8]
	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 8011dbc:	f001 fbc0 	bl	8013540 <Get_RTC_Instance>
 8011dc0:	f107 031c 	add.w	r3, r7, #28
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	4619      	mov	r1, r3
 8011dc8:	f7f7 f955 	bl	8009076 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 8011dcc:	f001 fbb8 	bl	8013540 <Get_RTC_Instance>
 8011dd0:	f107 0318 	add.w	r3, r7, #24
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	f7f7 f9ab 	bl	8009132 <HAL_RTC_GetDate>
	toReturn.year = rtc_date.Year;
 8011ddc:	7efb      	ldrb	r3, [r7, #27]
 8011dde:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 8011de0:	7e7b      	ldrb	r3, [r7, #25]
 8011de2:	737b      	strb	r3, [r7, #13]
	toReturn.dayM = rtc_date.Date;
 8011de4:	7ebb      	ldrb	r3, [r7, #26]
 8011de6:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8011de8:	7e3b      	ldrb	r3, [r7, #24]
 8011dea:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 8011dec:	7f3b      	ldrb	r3, [r7, #28]
 8011dee:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 8011df0:	7f7b      	ldrb	r3, [r7, #29]
 8011df2:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 8011df4:	7fbb      	ldrb	r3, [r7, #30]
 8011df6:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 8011df8:	f7ff ffbc 	bl	8011d74 <millis>
 8011dfc:	4602      	mov	r2, r0
 8011dfe:	4b0c      	ldr	r3, [pc, #48]	; (8011e30 <getTime+0x9c>)
 8011e00:	fba3 1302 	umull	r1, r3, r3, r2
 8011e04:	099b      	lsrs	r3, r3, #6
 8011e06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011e0a:	fb01 f303 	mul.w	r3, r1, r3
 8011e0e:	1ad3      	subs	r3, r2, r3
 8011e10:	b29b      	uxth	r3, r3
 8011e12:	82bb      	strh	r3, [r7, #20]
	return toReturn;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	461a      	mov	r2, r3
 8011e18:	f107 030c 	add.w	r3, r7, #12
 8011e1c:	cb03      	ldmia	r3!, {r0, r1}
 8011e1e:	6010      	str	r0, [r2, #0]
 8011e20:	6051      	str	r1, [r2, #4]
 8011e22:	881b      	ldrh	r3, [r3, #0]
 8011e24:	8113      	strh	r3, [r2, #8]
}
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	3730      	adds	r7, #48	; 0x30
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	bd80      	pop	{r7, pc}
 8011e2e:	bf00      	nop
 8011e30:	10624dd3 	.word	0x10624dd3

08011e34 <sdTest_begin>:
#include "sd.h"

bool sdActive;

static bool sdTest_begin(void)
{
 8011e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e36:	b091      	sub	sp, #68	; 0x44
 8011e38:	af06      	add	r7, sp, #24
	if (SD_init() == FR_OK)
 8011e3a:	f7ef f905 	bl	8001048 <SD_init>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d172      	bne.n	8011f2a <sdTest_begin+0xf6>
	{
		println("[SD] Detected");
 8011e44:	4841      	ldr	r0, [pc, #260]	; (8011f4c <sdTest_begin+0x118>)
 8011e46:	f7ff ff07 	bl	8011c58 <println>
		print("[SD] Creating test file...");
 8011e4a:	4841      	ldr	r0, [pc, #260]	; (8011f50 <sdTest_begin+0x11c>)
 8011e4c:	f7ff fee2 	bl	8011c14 <print>
		if (SD_newFile("/TEST.TXT") == FR_OK)
 8011e50:	4840      	ldr	r0, [pc, #256]	; (8011f54 <sdTest_begin+0x120>)
 8011e52:	f7ef f935 	bl	80010c0 <SD_newFile>
 8011e56:	4603      	mov	r3, r0
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d161      	bne.n	8011f20 <sdTest_begin+0xec>
		{
			println("successful.");
 8011e5c:	483e      	ldr	r0, [pc, #248]	; (8011f58 <sdTest_begin+0x124>)
 8011e5e:	f7ff fefb 	bl	8011c58 <println>
			bool status = true;
 8011e62:	2301      	movs	r3, #1
 8011e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status |= (SD_writeToFile("/TEST.TXT", "Created on: ") == FR_OK);
 8011e68:	493c      	ldr	r1, [pc, #240]	; (8011f5c <sdTest_begin+0x128>)
 8011e6a:	483a      	ldr	r0, [pc, #232]	; (8011f54 <sdTest_begin+0x120>)
 8011e6c:	f7ef f950 	bl	8001110 <SD_writeToFile>
 8011e70:	4603      	mov	r3, r0
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	bf0c      	ite	eq
 8011e76:	2301      	moveq	r3, #1
 8011e78:	2300      	movne	r3, #0
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	461a      	mov	r2, r3
 8011e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e82:	4313      	orrs	r3, r2
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	bf14      	ite	ne
 8011e88:	2301      	movne	r3, #1
 8011e8a:	2300      	moveq	r3, #0
 8011e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			DateTime fileCreated = getTime();
 8011e90:	f107 031c 	add.w	r3, r7, #28
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7ff ff7d 	bl	8011d94 <getTime>
			char dateStr[26] = {0};
 8011e9a:	463b      	mov	r3, r7
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	601a      	str	r2, [r3, #0]
 8011ea0:	605a      	str	r2, [r3, #4]
 8011ea2:	609a      	str	r2, [r3, #8]
 8011ea4:	60da      	str	r2, [r3, #12]
 8011ea6:	611a      	str	r2, [r3, #16]
 8011ea8:	615a      	str	r2, [r3, #20]
 8011eaa:	831a      	strh	r2, [r3, #24]
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 8011eac:	7fbb      	ldrb	r3, [r7, #30]
 8011eae:	461e      	mov	r6, r3
 8011eb0:	7f7b      	ldrb	r3, [r7, #29]
 8011eb2:	469c      	mov	ip, r3
 8011eb4:	7f3b      	ldrb	r3, [r7, #28]
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 8011eb6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8011eba:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8011ebe:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 8011ec2:	4604      	mov	r4, r0
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 8011ec4:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 8011ec6:	4605      	mov	r5, r0
 8011ec8:	4638      	mov	r0, r7
 8011eca:	9504      	str	r5, [sp, #16]
 8011ecc:	9403      	str	r4, [sp, #12]
 8011ece:	9102      	str	r1, [sp, #8]
 8011ed0:	9201      	str	r2, [sp, #4]
 8011ed2:	9300      	str	r3, [sp, #0]
 8011ed4:	4663      	mov	r3, ip
 8011ed6:	4632      	mov	r2, r6
 8011ed8:	4921      	ldr	r1, [pc, #132]	; (8011f60 <sdTest_begin+0x12c>)
 8011eda:	f003 fd8b 	bl	80159f4 <siprintf>

			status |= (SD_writeToFile("/TEST.TXT", dateStr) == FR_OK);
 8011ede:	463b      	mov	r3, r7
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	481c      	ldr	r0, [pc, #112]	; (8011f54 <sdTest_begin+0x120>)
 8011ee4:	f7ef f914 	bl	8001110 <SD_writeToFile>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	bf0c      	ite	eq
 8011eee:	2301      	moveq	r3, #1
 8011ef0:	2300      	movne	r3, #0
 8011ef2:	b2db      	uxtb	r3, r3
 8011ef4:	461a      	mov	r2, r3
 8011ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011efa:	4313      	orrs	r3, r2
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	bf14      	ite	ne
 8011f00:	2301      	movne	r3, #1
 8011f02:	2300      	moveq	r3, #0
 8011f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if (status) println("[SD] Content writing successful!");
 8011f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d003      	beq.n	8011f18 <sdTest_begin+0xe4>
 8011f10:	4814      	ldr	r0, [pc, #80]	; (8011f64 <sdTest_begin+0x130>)
 8011f12:	f7ff fea1 	bl	8011c58 <println>
 8011f16:	e010      	b.n	8011f3a <sdTest_begin+0x106>
			else println("[SD] Content writing unsuccessful!");
 8011f18:	4813      	ldr	r0, [pc, #76]	; (8011f68 <sdTest_begin+0x134>)
 8011f1a:	f7ff fe9d 	bl	8011c58 <println>
 8011f1e:	e00c      	b.n	8011f3a <sdTest_begin+0x106>
		}
		else
		{
			println("unsuccessful :(");
 8011f20:	4812      	ldr	r0, [pc, #72]	; (8011f6c <sdTest_begin+0x138>)
 8011f22:	f7ff fe99 	bl	8011c58 <println>
			return false;
 8011f26:	2300      	movs	r3, #0
 8011f28:	e00b      	b.n	8011f42 <sdTest_begin+0x10e>
		}
	}
	else
	{
		println("[SD] Init fail!");
 8011f2a:	4811      	ldr	r0, [pc, #68]	; (8011f70 <sdTest_begin+0x13c>)
 8011f2c:	f7ff fe94 	bl	8011c58 <println>
		sdActive = false;
 8011f30:	4b10      	ldr	r3, [pc, #64]	; (8011f74 <sdTest_begin+0x140>)
 8011f32:	2200      	movs	r2, #0
 8011f34:	701a      	strb	r2, [r3, #0]
		return false;
 8011f36:	2300      	movs	r3, #0
 8011f38:	e003      	b.n	8011f42 <sdTest_begin+0x10e>
	}

	sdActive = true;
 8011f3a:	4b0e      	ldr	r3, [pc, #56]	; (8011f74 <sdTest_begin+0x140>)
 8011f3c:	2201      	movs	r2, #1
 8011f3e:	701a      	strb	r2, [r3, #0]
	return true;
 8011f40:	2301      	movs	r3, #1
}
 8011f42:	4618      	mov	r0, r3
 8011f44:	372c      	adds	r7, #44	; 0x2c
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f4a:	bf00      	nop
 8011f4c:	0801a524 	.word	0x0801a524
 8011f50:	0801a534 	.word	0x0801a534
 8011f54:	0801a550 	.word	0x0801a550
 8011f58:	0801a55c 	.word	0x0801a55c
 8011f5c:	0801a568 	.word	0x0801a568
 8011f60:	0801a578 	.word	0x0801a578
 8011f64:	0801a590 	.word	0x0801a590
 8011f68:	0801a5b4 	.word	0x0801a5b4
 8011f6c:	0801a5d8 	.word	0x0801a5d8
 8011f70:	0801a5e8 	.word	0x0801a5e8
 8011f74:	20002ba4 	.word	0x20002ba4

08011f78 <imuTest_getData>:
float lin_ax, lin_ay, lin_az;             // linear acceleration (acceleration with gravity component subtracted)

bool imuActive;

static bool imuTest_getData(void)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	af00      	add	r7, sp, #0
	if (MPU_readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)	// check if data ready interrupt
 8011f7c:	213a      	movs	r1, #58	; 0x3a
 8011f7e:	20d2      	movs	r0, #210	; 0xd2
 8011f80:	f7f0 fee7 	bl	8002d52 <MPU_readByte>
 8011f84:	4603      	mov	r3, r0
 8011f86:	f003 0301 	and.w	r3, r3, #1
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	f000 80bf 	beq.w	801210e <imuTest_getData+0x196>
	{
		MPU_readAccelData(accelCount);						// Read the x/y/z adc values
 8011f90:	4860      	ldr	r0, [pc, #384]	; (8012114 <imuTest_getData+0x19c>)
 8011f92:	f7f0 ffb5 	bl	8002f00 <MPU_readAccelData>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes - MPU9250accelBias[0];	// get actual g value, this depends on scale being set
 8011f96:	4b5f      	ldr	r3, [pc, #380]	; (8012114 <imuTest_getData+0x19c>)
 8011f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f9c:	ee07 3a90 	vmov	s15, r3
 8011fa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011fa4:	4b5c      	ldr	r3, [pc, #368]	; (8012118 <imuTest_getData+0x1a0>)
 8011fa6:	edd3 7a00 	vldr	s15, [r3]
 8011faa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011fae:	4b5b      	ldr	r3, [pc, #364]	; (801211c <imuTest_getData+0x1a4>)
 8011fb0:	edd3 7a00 	vldr	s15, [r3]
 8011fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011fb8:	4b59      	ldr	r3, [pc, #356]	; (8012120 <imuTest_getData+0x1a8>)
 8011fba:	edc3 7a00 	vstr	s15, [r3]
		ay = (float)accelCount[1]*aRes - MPU9250accelBias[1];
 8011fbe:	4b55      	ldr	r3, [pc, #340]	; (8012114 <imuTest_getData+0x19c>)
 8011fc0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011fc4:	ee07 3a90 	vmov	s15, r3
 8011fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011fcc:	4b52      	ldr	r3, [pc, #328]	; (8012118 <imuTest_getData+0x1a0>)
 8011fce:	edd3 7a00 	vldr	s15, [r3]
 8011fd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011fd6:	4b51      	ldr	r3, [pc, #324]	; (801211c <imuTest_getData+0x1a4>)
 8011fd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8011fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011fe0:	4b50      	ldr	r3, [pc, #320]	; (8012124 <imuTest_getData+0x1ac>)
 8011fe2:	edc3 7a00 	vstr	s15, [r3]
		az = (float)accelCount[2]*aRes - MPU9250accelBias[2];
 8011fe6:	4b4b      	ldr	r3, [pc, #300]	; (8012114 <imuTest_getData+0x19c>)
 8011fe8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011fec:	ee07 3a90 	vmov	s15, r3
 8011ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011ff4:	4b48      	ldr	r3, [pc, #288]	; (8012118 <imuTest_getData+0x1a0>)
 8011ff6:	edd3 7a00 	vldr	s15, [r3]
 8011ffa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011ffe:	4b47      	ldr	r3, [pc, #284]	; (801211c <imuTest_getData+0x1a4>)
 8012000:	edd3 7a02 	vldr	s15, [r3, #8]
 8012004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012008:	4b47      	ldr	r3, [pc, #284]	; (8012128 <imuTest_getData+0x1b0>)
 801200a:	edc3 7a00 	vstr	s15, [r3]

		MPU_readGyroData(gyroCount);	// Read the x/y/z adc values
 801200e:	4847      	ldr	r0, [pc, #284]	; (801212c <imuTest_getData+0x1b4>)
 8012010:	f7f0 ffa2 	bl	8002f58 <MPU_readGyroData>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;	// get actual gyro value, this depends on scale being set
 8012014:	4b45      	ldr	r3, [pc, #276]	; (801212c <imuTest_getData+0x1b4>)
 8012016:	f9b3 3000 	ldrsh.w	r3, [r3]
 801201a:	ee07 3a90 	vmov	s15, r3
 801201e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012022:	4b43      	ldr	r3, [pc, #268]	; (8012130 <imuTest_getData+0x1b8>)
 8012024:	edd3 7a00 	vldr	s15, [r3]
 8012028:	ee67 7a27 	vmul.f32	s15, s14, s15
 801202c:	4b41      	ldr	r3, [pc, #260]	; (8012134 <imuTest_getData+0x1bc>)
 801202e:	edc3 7a00 	vstr	s15, [r3]
		gy = (float)gyroCount[1]*gRes;
 8012032:	4b3e      	ldr	r3, [pc, #248]	; (801212c <imuTest_getData+0x1b4>)
 8012034:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012038:	ee07 3a90 	vmov	s15, r3
 801203c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012040:	4b3b      	ldr	r3, [pc, #236]	; (8012130 <imuTest_getData+0x1b8>)
 8012042:	edd3 7a00 	vldr	s15, [r3]
 8012046:	ee67 7a27 	vmul.f32	s15, s14, s15
 801204a:	4b3b      	ldr	r3, [pc, #236]	; (8012138 <imuTest_getData+0x1c0>)
 801204c:	edc3 7a00 	vstr	s15, [r3]
		gz = (float)gyroCount[2]*gRes;
 8012050:	4b36      	ldr	r3, [pc, #216]	; (801212c <imuTest_getData+0x1b4>)
 8012052:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012056:	ee07 3a90 	vmov	s15, r3
 801205a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801205e:	4b34      	ldr	r3, [pc, #208]	; (8012130 <imuTest_getData+0x1b8>)
 8012060:	edd3 7a00 	vldr	s15, [r3]
 8012064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012068:	4b34      	ldr	r3, [pc, #208]	; (801213c <imuTest_getData+0x1c4>)
 801206a:	edc3 7a00 	vstr	s15, [r3]

		MPU_readMagData(magCount);	// Read the x/y/z adc values
 801206e:	4834      	ldr	r0, [pc, #208]	; (8012140 <imuTest_getData+0x1c8>)
 8012070:	f7f0 ff9e 	bl	8002fb0 <MPU_readMagData>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - MPU9250magBias[0];	// get actual magnetometer value, this depends on scale being set
 8012074:	4b32      	ldr	r3, [pc, #200]	; (8012140 <imuTest_getData+0x1c8>)
 8012076:	f9b3 3000 	ldrsh.w	r3, [r3]
 801207a:	ee07 3a90 	vmov	s15, r3
 801207e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012082:	4b30      	ldr	r3, [pc, #192]	; (8012144 <imuTest_getData+0x1cc>)
 8012084:	edd3 7a00 	vldr	s15, [r3]
 8012088:	ee27 7a27 	vmul.f32	s14, s14, s15
 801208c:	4b2e      	ldr	r3, [pc, #184]	; (8012148 <imuTest_getData+0x1d0>)
 801208e:	edd3 7a00 	vldr	s15, [r3]
 8012092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012096:	4b2d      	ldr	r3, [pc, #180]	; (801214c <imuTest_getData+0x1d4>)
 8012098:	edd3 7a00 	vldr	s15, [r3]
 801209c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120a0:	4b2b      	ldr	r3, [pc, #172]	; (8012150 <imuTest_getData+0x1d8>)
 80120a2:	edc3 7a00 	vstr	s15, [r3]
		my = (float)magCount[1]*mRes*magCalibration[1] - MPU9250magBias[1];
 80120a6:	4b26      	ldr	r3, [pc, #152]	; (8012140 <imuTest_getData+0x1c8>)
 80120a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80120ac:	ee07 3a90 	vmov	s15, r3
 80120b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80120b4:	4b23      	ldr	r3, [pc, #140]	; (8012144 <imuTest_getData+0x1cc>)
 80120b6:	edd3 7a00 	vldr	s15, [r3]
 80120ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80120be:	4b22      	ldr	r3, [pc, #136]	; (8012148 <imuTest_getData+0x1d0>)
 80120c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80120c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80120c8:	4b20      	ldr	r3, [pc, #128]	; (801214c <imuTest_getData+0x1d4>)
 80120ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80120ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120d2:	4b20      	ldr	r3, [pc, #128]	; (8012154 <imuTest_getData+0x1dc>)
 80120d4:	edc3 7a00 	vstr	s15, [r3]
		mz = (float)magCount[2]*mRes*magCalibration[2] - MPU9250magBias[2];
 80120d8:	4b19      	ldr	r3, [pc, #100]	; (8012140 <imuTest_getData+0x1c8>)
 80120da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80120de:	ee07 3a90 	vmov	s15, r3
 80120e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80120e6:	4b17      	ldr	r3, [pc, #92]	; (8012144 <imuTest_getData+0x1cc>)
 80120e8:	edd3 7a00 	vldr	s15, [r3]
 80120ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80120f0:	4b15      	ldr	r3, [pc, #84]	; (8012148 <imuTest_getData+0x1d0>)
 80120f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80120f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80120fa:	4b14      	ldr	r3, [pc, #80]	; (801214c <imuTest_getData+0x1d4>)
 80120fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8012100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012104:	4b14      	ldr	r3, [pc, #80]	; (8012158 <imuTest_getData+0x1e0>)
 8012106:	edc3 7a00 	vstr	s15, [r3]

		return true;
 801210a:	2301      	movs	r3, #1
 801210c:	e000      	b.n	8012110 <imuTest_getData+0x198>
	}
	return false;
 801210e:	2300      	movs	r3, #0
}
 8012110:	4618      	mov	r0, r3
 8012112:	bd80      	pop	{r7, pc}
 8012114:	20002a64 	.word	0x20002a64
 8012118:	20002ae8 	.word	0x20002ae8
 801211c:	20002a6c 	.word	0x20002a6c
 8012120:	20002ae4 	.word	0x20002ae4
 8012124:	20002b90 	.word	0x20002b90
 8012128:	20002aac 	.word	0x20002aac
 801212c:	20002ab4 	.word	0x20002ab4
 8012130:	20002b28 	.word	0x20002b28
 8012134:	20002b80 	.word	0x20002b80
 8012138:	20002aa8 	.word	0x20002aa8
 801213c:	20002b18 	.word	0x20002b18
 8012140:	20002b44 	.word	0x20002b44
 8012144:	20002b5c 	.word	0x20002b5c
 8012148:	20002b84 	.word	0x20002b84
 801214c:	20002afc 	.word	0x20002afc
 8012150:	20002b94 	.word	0x20002b94
 8012154:	20002abc 	.word	0x20002abc
 8012158:	20002b2c 	.word	0x20002b2c

0801215c <imuTest_quatUpdate>:
static bool imuTest_quatUpdate(void)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	af00      	add	r7, sp, #0
	if (micros() - lastCompute > 10)
 8012160:	f7ff fdfe 	bl	8011d60 <micros>
 8012164:	4602      	mov	r2, r0
 8012166:	4b43      	ldr	r3, [pc, #268]	; (8012274 <imuTest_quatUpdate+0x118>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	1ad3      	subs	r3, r2, r3
 801216c:	2b0a      	cmp	r3, #10
 801216e:	d97d      	bls.n	801226c <imuTest_quatUpdate+0x110>
	{
		Now = micros();
 8012170:	f7ff fdf6 	bl	8011d60 <micros>
 8012174:	4603      	mov	r3, r0
 8012176:	461a      	mov	r2, r3
 8012178:	4b3f      	ldr	r3, [pc, #252]	; (8012278 <imuTest_quatUpdate+0x11c>)
 801217a:	601a      	str	r2, [r3, #0]
		deltat = ((Now - lastUpdate)/1000000.0f); // set integration time by time elapsed since last filter update
 801217c:	4b3e      	ldr	r3, [pc, #248]	; (8012278 <imuTest_quatUpdate+0x11c>)
 801217e:	681a      	ldr	r2, [r3, #0]
 8012180:	4b3e      	ldr	r3, [pc, #248]	; (801227c <imuTest_quatUpdate+0x120>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	1ad3      	subs	r3, r2, r3
 8012186:	ee07 3a90 	vmov	s15, r3
 801218a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801218e:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8012280 <imuTest_quatUpdate+0x124>
 8012192:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012196:	4b3b      	ldr	r3, [pc, #236]	; (8012284 <imuTest_quatUpdate+0x128>)
 8012198:	edc3 7a00 	vstr	s15, [r3]
		lastUpdate = Now;
 801219c:	4b36      	ldr	r3, [pc, #216]	; (8012278 <imuTest_quatUpdate+0x11c>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	4a36      	ldr	r2, [pc, #216]	; (801227c <imuTest_quatUpdate+0x120>)
 80121a2:	6013      	str	r3, [r2, #0]

		sum += deltat; // sum for averaging filter update rate
 80121a4:	4b38      	ldr	r3, [pc, #224]	; (8012288 <imuTest_quatUpdate+0x12c>)
 80121a6:	ed93 7a00 	vldr	s14, [r3]
 80121aa:	4b36      	ldr	r3, [pc, #216]	; (8012284 <imuTest_quatUpdate+0x128>)
 80121ac:	edd3 7a00 	vldr	s15, [r3]
 80121b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121b4:	4b34      	ldr	r3, [pc, #208]	; (8012288 <imuTest_quatUpdate+0x12c>)
 80121b6:	edc3 7a00 	vstr	s15, [r3]
		sumCount++;
 80121ba:	4b34      	ldr	r3, [pc, #208]	; (801228c <imuTest_quatUpdate+0x130>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	3301      	adds	r3, #1
 80121c0:	4a32      	ldr	r2, [pc, #200]	; (801228c <imuTest_quatUpdate+0x130>)
 80121c2:	6013      	str	r3, [r2, #0]

		MadgwickQuaternionUpdate(ax, -ay, -az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
 80121c4:	4b32      	ldr	r3, [pc, #200]	; (8012290 <imuTest_quatUpdate+0x134>)
 80121c6:	edd3 6a00 	vldr	s13, [r3]
 80121ca:	4b32      	ldr	r3, [pc, #200]	; (8012294 <imuTest_quatUpdate+0x138>)
 80121cc:	edd3 7a00 	vldr	s15, [r3]
 80121d0:	eeb1 6a67 	vneg.f32	s12, s15
 80121d4:	4b30      	ldr	r3, [pc, #192]	; (8012298 <imuTest_quatUpdate+0x13c>)
 80121d6:	edd3 7a00 	vldr	s15, [r3]
 80121da:	eef1 5a67 	vneg.f32	s11, s15
 80121de:	4b2f      	ldr	r3, [pc, #188]	; (801229c <imuTest_quatUpdate+0x140>)
 80121e0:	edd3 7a00 	vldr	s15, [r3]
 80121e4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80122a0 <imuTest_quatUpdate+0x144>
 80121e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80121ec:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80122a4 <imuTest_quatUpdate+0x148>
 80121f0:	ee87 5a87 	vdiv.f32	s10, s15, s14
 80121f4:	4b2c      	ldr	r3, [pc, #176]	; (80122a8 <imuTest_quatUpdate+0x14c>)
 80121f6:	edd3 7a00 	vldr	s15, [r3]
 80121fa:	eef1 7a67 	vneg.f32	s15, s15
 80121fe:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80122a0 <imuTest_quatUpdate+0x144>
 8012202:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012206:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80122a4 <imuTest_quatUpdate+0x148>
 801220a:	eec7 4a87 	vdiv.f32	s9, s15, s14
 801220e:	4b27      	ldr	r3, [pc, #156]	; (80122ac <imuTest_quatUpdate+0x150>)
 8012210:	edd3 7a00 	vldr	s15, [r3]
 8012214:	eef1 7a67 	vneg.f32	s15, s15
 8012218:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80122a0 <imuTest_quatUpdate+0x144>
 801221c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012220:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80122a4 <imuTest_quatUpdate+0x148>
 8012224:	eec7 2a87 	vdiv.f32	s5, s15, s14
 8012228:	4b21      	ldr	r3, [pc, #132]	; (80122b0 <imuTest_quatUpdate+0x154>)
 801222a:	ed93 7a00 	vldr	s14, [r3]
 801222e:	4b21      	ldr	r3, [pc, #132]	; (80122b4 <imuTest_quatUpdate+0x158>)
 8012230:	edd3 7a00 	vldr	s15, [r3]
 8012234:	eef1 7a67 	vneg.f32	s15, s15
 8012238:	4b1f      	ldr	r3, [pc, #124]	; (80122b8 <imuTest_quatUpdate+0x15c>)
 801223a:	ed93 4a00 	vldr	s8, [r3]
 801223e:	eef0 3a67 	vmov.f32	s7, s15
 8012242:	eeb0 3a47 	vmov.f32	s6, s14
 8012246:	eeb0 2a64 	vmov.f32	s4, s9
 801224a:	eef0 1a45 	vmov.f32	s3, s10
 801224e:	eeb0 1a65 	vmov.f32	s2, s11
 8012252:	eef0 0a46 	vmov.f32	s1, s12
 8012256:	eeb0 0a66 	vmov.f32	s0, s13
 801225a:	f7f1 ff8b 	bl	8004174 <MadgwickQuaternionUpdate>

		lastCompute = micros();
 801225e:	f7ff fd7f 	bl	8011d60 <micros>
 8012262:	4602      	mov	r2, r0
 8012264:	4b03      	ldr	r3, [pc, #12]	; (8012274 <imuTest_quatUpdate+0x118>)
 8012266:	601a      	str	r2, [r3, #0]
		return true;
 8012268:	2301      	movs	r3, #1
 801226a:	e000      	b.n	801226e <imuTest_quatUpdate+0x112>
	}
	return false;
 801226c:	2300      	movs	r3, #0
}
 801226e:	4618      	mov	r0, r3
 8012270:	bd80      	pop	{r7, pc}
 8012272:	bf00      	nop
 8012274:	20002b98 	.word	0x20002b98
 8012278:	20002ae0 	.word	0x20002ae0
 801227c:	20002ab0 	.word	0x20002ab0
 8012280:	49742400 	.word	0x49742400
 8012284:	20002b58 	.word	0x20002b58
 8012288:	20002aa0 	.word	0x20002aa0
 801228c:	20002ba0 	.word	0x20002ba0
 8012290:	20002ae4 	.word	0x20002ae4
 8012294:	20002b90 	.word	0x20002b90
 8012298:	20002aac 	.word	0x20002aac
 801229c:	20002b80 	.word	0x20002b80
 80122a0:	40490fdb 	.word	0x40490fdb
 80122a4:	43340000 	.word	0x43340000
 80122a8:	20002aa8 	.word	0x20002aa8
 80122ac:	20002b18 	.word	0x20002b18
 80122b0:	20002abc 	.word	0x20002abc
 80122b4:	20002b94 	.word	0x20002b94
 80122b8:	20002b2c 	.word	0x20002b2c

080122bc <imuTest_getEuler>:
static void imuTest_getEuler()
{
 80122bc:	b5b0      	push	{r4, r5, r7, lr}
 80122be:	af00      	add	r7, sp, #0
	yaw   = atan2(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 80122c0:	4b84      	ldr	r3, [pc, #528]	; (80124d4 <imuTest_getEuler+0x218>)
 80122c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80122c6:	4b83      	ldr	r3, [pc, #524]	; (80124d4 <imuTest_getEuler+0x218>)
 80122c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80122cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80122d0:	4b80      	ldr	r3, [pc, #512]	; (80124d4 <imuTest_getEuler+0x218>)
 80122d2:	edd3 6a00 	vldr	s13, [r3]
 80122d6:	4b7f      	ldr	r3, [pc, #508]	; (80124d4 <imuTest_getEuler+0x218>)
 80122d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80122dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80122e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80122e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80122e8:	ee17 0a90 	vmov	r0, s15
 80122ec:	f7ee f93c 	bl	8000568 <__aeabi_f2d>
 80122f0:	4604      	mov	r4, r0
 80122f2:	460d      	mov	r5, r1
 80122f4:	4b77      	ldr	r3, [pc, #476]	; (80124d4 <imuTest_getEuler+0x218>)
 80122f6:	ed93 7a00 	vldr	s14, [r3]
 80122fa:	4b76      	ldr	r3, [pc, #472]	; (80124d4 <imuTest_getEuler+0x218>)
 80122fc:	edd3 7a00 	vldr	s15, [r3]
 8012300:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012304:	4b73      	ldr	r3, [pc, #460]	; (80124d4 <imuTest_getEuler+0x218>)
 8012306:	edd3 6a01 	vldr	s13, [r3, #4]
 801230a:	4b72      	ldr	r3, [pc, #456]	; (80124d4 <imuTest_getEuler+0x218>)
 801230c:	edd3 7a01 	vldr	s15, [r3, #4]
 8012310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012314:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012318:	4b6e      	ldr	r3, [pc, #440]	; (80124d4 <imuTest_getEuler+0x218>)
 801231a:	edd3 6a02 	vldr	s13, [r3, #8]
 801231e:	4b6d      	ldr	r3, [pc, #436]	; (80124d4 <imuTest_getEuler+0x218>)
 8012320:	edd3 7a02 	vldr	s15, [r3, #8]
 8012324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012328:	ee37 7a67 	vsub.f32	s14, s14, s15
 801232c:	4b69      	ldr	r3, [pc, #420]	; (80124d4 <imuTest_getEuler+0x218>)
 801232e:	edd3 6a03 	vldr	s13, [r3, #12]
 8012332:	4b68      	ldr	r3, [pc, #416]	; (80124d4 <imuTest_getEuler+0x218>)
 8012334:	edd3 7a03 	vldr	s15, [r3, #12]
 8012338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801233c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012340:	ee17 0a90 	vmov	r0, s15
 8012344:	f7ee f910 	bl	8000568 <__aeabi_f2d>
 8012348:	4602      	mov	r2, r0
 801234a:	460b      	mov	r3, r1
 801234c:	ec43 2b11 	vmov	d1, r2, r3
 8012350:	ec45 4b10 	vmov	d0, r4, r5
 8012354:	f006 fa32 	bl	80187bc <atan2>
 8012358:	ec54 3b10 	vmov	r3, r4, d0
 801235c:	4618      	mov	r0, r3
 801235e:	4621      	mov	r1, r4
 8012360:	f7ee fc52 	bl	8000c08 <__aeabi_d2f>
 8012364:	4602      	mov	r2, r0
 8012366:	4b5c      	ldr	r3, [pc, #368]	; (80124d8 <imuTest_getEuler+0x21c>)
 8012368:	601a      	str	r2, [r3, #0]
	pitch = -asin(2.0f * (q[1] * q[3] - q[0] * q[2]));
 801236a:	4b5a      	ldr	r3, [pc, #360]	; (80124d4 <imuTest_getEuler+0x218>)
 801236c:	ed93 7a01 	vldr	s14, [r3, #4]
 8012370:	4b58      	ldr	r3, [pc, #352]	; (80124d4 <imuTest_getEuler+0x218>)
 8012372:	edd3 7a03 	vldr	s15, [r3, #12]
 8012376:	ee27 7a27 	vmul.f32	s14, s14, s15
 801237a:	4b56      	ldr	r3, [pc, #344]	; (80124d4 <imuTest_getEuler+0x218>)
 801237c:	edd3 6a00 	vldr	s13, [r3]
 8012380:	4b54      	ldr	r3, [pc, #336]	; (80124d4 <imuTest_getEuler+0x218>)
 8012382:	edd3 7a02 	vldr	s15, [r3, #8]
 8012386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801238a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801238e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012392:	ee17 0a90 	vmov	r0, s15
 8012396:	f7ee f8e7 	bl	8000568 <__aeabi_f2d>
 801239a:	4603      	mov	r3, r0
 801239c:	460c      	mov	r4, r1
 801239e:	ec44 3b10 	vmov	d0, r3, r4
 80123a2:	f006 f9b3 	bl	801870c <asin>
 80123a6:	ec54 3b10 	vmov	r3, r4, d0
 80123aa:	4618      	mov	r0, r3
 80123ac:	4621      	mov	r1, r4
 80123ae:	f7ee fc2b 	bl	8000c08 <__aeabi_d2f>
 80123b2:	4603      	mov	r3, r0
 80123b4:	ee07 3a90 	vmov	s15, r3
 80123b8:	eef1 7a67 	vneg.f32	s15, s15
 80123bc:	4b47      	ldr	r3, [pc, #284]	; (80124dc <imuTest_getEuler+0x220>)
 80123be:	edc3 7a00 	vstr	s15, [r3]
	roll  = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 80123c2:	4b44      	ldr	r3, [pc, #272]	; (80124d4 <imuTest_getEuler+0x218>)
 80123c4:	ed93 7a00 	vldr	s14, [r3]
 80123c8:	4b42      	ldr	r3, [pc, #264]	; (80124d4 <imuTest_getEuler+0x218>)
 80123ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80123ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80123d2:	4b40      	ldr	r3, [pc, #256]	; (80124d4 <imuTest_getEuler+0x218>)
 80123d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80123d8:	4b3e      	ldr	r3, [pc, #248]	; (80124d4 <imuTest_getEuler+0x218>)
 80123da:	edd3 7a03 	vldr	s15, [r3, #12]
 80123de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80123e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80123e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80123ea:	ee17 0a90 	vmov	r0, s15
 80123ee:	f7ee f8bb 	bl	8000568 <__aeabi_f2d>
 80123f2:	4604      	mov	r4, r0
 80123f4:	460d      	mov	r5, r1
 80123f6:	4b37      	ldr	r3, [pc, #220]	; (80124d4 <imuTest_getEuler+0x218>)
 80123f8:	ed93 7a00 	vldr	s14, [r3]
 80123fc:	4b35      	ldr	r3, [pc, #212]	; (80124d4 <imuTest_getEuler+0x218>)
 80123fe:	edd3 7a00 	vldr	s15, [r3]
 8012402:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012406:	4b33      	ldr	r3, [pc, #204]	; (80124d4 <imuTest_getEuler+0x218>)
 8012408:	edd3 6a01 	vldr	s13, [r3, #4]
 801240c:	4b31      	ldr	r3, [pc, #196]	; (80124d4 <imuTest_getEuler+0x218>)
 801240e:	edd3 7a01 	vldr	s15, [r3, #4]
 8012412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012416:	ee37 7a67 	vsub.f32	s14, s14, s15
 801241a:	4b2e      	ldr	r3, [pc, #184]	; (80124d4 <imuTest_getEuler+0x218>)
 801241c:	edd3 6a02 	vldr	s13, [r3, #8]
 8012420:	4b2c      	ldr	r3, [pc, #176]	; (80124d4 <imuTest_getEuler+0x218>)
 8012422:	edd3 7a02 	vldr	s15, [r3, #8]
 8012426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801242a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801242e:	4b29      	ldr	r3, [pc, #164]	; (80124d4 <imuTest_getEuler+0x218>)
 8012430:	edd3 6a03 	vldr	s13, [r3, #12]
 8012434:	4b27      	ldr	r3, [pc, #156]	; (80124d4 <imuTest_getEuler+0x218>)
 8012436:	edd3 7a03 	vldr	s15, [r3, #12]
 801243a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801243e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012442:	ee17 0a90 	vmov	r0, s15
 8012446:	f7ee f88f 	bl	8000568 <__aeabi_f2d>
 801244a:	4602      	mov	r2, r0
 801244c:	460b      	mov	r3, r1
 801244e:	ec43 2b11 	vmov	d1, r2, r3
 8012452:	ec45 4b10 	vmov	d0, r4, r5
 8012456:	f006 f9b1 	bl	80187bc <atan2>
 801245a:	ec54 3b10 	vmov	r3, r4, d0
 801245e:	4618      	mov	r0, r3
 8012460:	4621      	mov	r1, r4
 8012462:	f7ee fbd1 	bl	8000c08 <__aeabi_d2f>
 8012466:	4602      	mov	r2, r0
 8012468:	4b1d      	ldr	r3, [pc, #116]	; (80124e0 <imuTest_getEuler+0x224>)
 801246a:	601a      	str	r2, [r3, #0]
	pitch *= 180.0f / PI;
 801246c:	4b1b      	ldr	r3, [pc, #108]	; (80124dc <imuTest_getEuler+0x220>)
 801246e:	edd3 7a00 	vldr	s15, [r3]
 8012472:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80124e4 <imuTest_getEuler+0x228>
 8012476:	ee67 7a87 	vmul.f32	s15, s15, s14
 801247a:	4b18      	ldr	r3, [pc, #96]	; (80124dc <imuTest_getEuler+0x220>)
 801247c:	edc3 7a00 	vstr	s15, [r3]
	yaw   *= 180.0f / PI;
 8012480:	4b15      	ldr	r3, [pc, #84]	; (80124d8 <imuTest_getEuler+0x21c>)
 8012482:	edd3 7a00 	vldr	s15, [r3]
 8012486:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80124e4 <imuTest_getEuler+0x228>
 801248a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801248e:	4b12      	ldr	r3, [pc, #72]	; (80124d8 <imuTest_getEuler+0x21c>)
 8012490:	edc3 7a00 	vstr	s15, [r3]
	//yaw   -= 5.78f;
	roll  *= 180.0f / PI;
 8012494:	4b12      	ldr	r3, [pc, #72]	; (80124e0 <imuTest_getEuler+0x224>)
 8012496:	edd3 7a00 	vldr	s15, [r3]
 801249a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80124e4 <imuTest_getEuler+0x228>
 801249e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80124a2:	4b0f      	ldr	r3, [pc, #60]	; (80124e0 <imuTest_getEuler+0x224>)
 80124a4:	edc3 7a00 	vstr	s15, [r3]
	if(yaw < 0) yaw   += 360.0f;
 80124a8:	4b0b      	ldr	r3, [pc, #44]	; (80124d8 <imuTest_getEuler+0x21c>)
 80124aa:	edd3 7a00 	vldr	s15, [r3]
 80124ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80124b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124b6:	d400      	bmi.n	80124ba <imuTest_getEuler+0x1fe>
}
 80124b8:	e009      	b.n	80124ce <imuTest_getEuler+0x212>
	if(yaw < 0) yaw   += 360.0f;
 80124ba:	4b07      	ldr	r3, [pc, #28]	; (80124d8 <imuTest_getEuler+0x21c>)
 80124bc:	edd3 7a00 	vldr	s15, [r3]
 80124c0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80124e8 <imuTest_getEuler+0x22c>
 80124c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80124c8:	4b03      	ldr	r3, [pc, #12]	; (80124d8 <imuTest_getEuler+0x21c>)
 80124ca:	edc3 7a00 	vstr	s15, [r3]
}
 80124ce:	bf00      	nop
 80124d0:	bdb0      	pop	{r4, r5, r7, pc}
 80124d2:	bf00      	nop
 80124d4:	20002b70 	.word	0x20002b70
 80124d8:	20002b40 	.word	0x20002b40
 80124dc:	20002b4c 	.word	0x20002b4c
 80124e0:	20002b50 	.word	0x20002b50
 80124e4:	42652ee0 	.word	0x42652ee0
 80124e8:	43b40000 	.word	0x43b40000
 80124ec:	00000000 	.word	0x00000000

080124f0 <imuTest_begin>:
		lastPrint = millis();
	}
}

static bool imuTest_begin(void)
{
 80124f0:	b590      	push	{r4, r7, lr}
 80124f2:	b083      	sub	sp, #12
 80124f4:	af00      	add	r7, sp, #0
	imuActive = false;
 80124f6:	4bc4      	ldr	r3, [pc, #784]	; (8012808 <imuTest_begin+0x318>)
 80124f8:	2200      	movs	r2, #0
 80124fa:	701a      	strb	r2, [r3, #0]

	println("imuTest start!");
 80124fc:	48c3      	ldr	r0, [pc, #780]	; (801280c <imuTest_begin+0x31c>)
 80124fe:	f7ff fbab 	bl	8011c58 <println>
	GyroMeasError = PI * (60.0f / 180.0f);
 8012502:	4bc3      	ldr	r3, [pc, #780]	; (8012810 <imuTest_begin+0x320>)
 8012504:	4ac3      	ldr	r2, [pc, #780]	; (8012814 <imuTest_begin+0x324>)
 8012506:	601a      	str	r2, [r3, #0]
	beta = sqrt(3.0f / 4.0f) * GyroMeasError;
 8012508:	4bc1      	ldr	r3, [pc, #772]	; (8012810 <imuTest_begin+0x320>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	4618      	mov	r0, r3
 801250e:	f7ee f82b 	bl	8000568 <__aeabi_f2d>
 8012512:	a3bb      	add	r3, pc, #748	; (adr r3, 8012800 <imuTest_begin+0x310>)
 8012514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012518:	f7ee f87e 	bl	8000618 <__aeabi_dmul>
 801251c:	4603      	mov	r3, r0
 801251e:	460c      	mov	r4, r1
 8012520:	4618      	mov	r0, r3
 8012522:	4621      	mov	r1, r4
 8012524:	f7ee fb70 	bl	8000c08 <__aeabi_d2f>
 8012528:	4602      	mov	r2, r0
 801252a:	4bbb      	ldr	r3, [pc, #748]	; (8012818 <imuTest_begin+0x328>)
 801252c:	601a      	str	r2, [r3, #0]
	GyroMeasDrift = PI * (1.0f / 180.0f);
 801252e:	4bbb      	ldr	r3, [pc, #748]	; (801281c <imuTest_begin+0x32c>)
 8012530:	4abb      	ldr	r2, [pc, #748]	; (8012820 <imuTest_begin+0x330>)
 8012532:	601a      	str	r2, [r3, #0]
	zeta = sqrt(3.0f / 4.0f) * GyroMeasDrift;
 8012534:	4bb9      	ldr	r3, [pc, #740]	; (801281c <imuTest_begin+0x32c>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	4618      	mov	r0, r3
 801253a:	f7ee f815 	bl	8000568 <__aeabi_f2d>
 801253e:	a3b0      	add	r3, pc, #704	; (adr r3, 8012800 <imuTest_begin+0x310>)
 8012540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012544:	f7ee f868 	bl	8000618 <__aeabi_dmul>
 8012548:	4603      	mov	r3, r0
 801254a:	460c      	mov	r4, r1
 801254c:	4618      	mov	r0, r3
 801254e:	4621      	mov	r1, r4
 8012550:	f7ee fb5a 	bl	8000c08 <__aeabi_d2f>
 8012554:	4602      	mov	r2, r0
 8012556:	4bb3      	ldr	r3, [pc, #716]	; (8012824 <imuTest_begin+0x334>)
 8012558:	601a      	str	r2, [r3, #0]

	AAscale = AFS_2G;
 801255a:	4bb3      	ldr	r3, [pc, #716]	; (8012828 <imuTest_begin+0x338>)
 801255c:	2200      	movs	r2, #0
 801255e:	701a      	strb	r2, [r3, #0]
	GGscale = GFS_250DPS;
 8012560:	4bb2      	ldr	r3, [pc, #712]	; (801282c <imuTest_begin+0x33c>)
 8012562:	2200      	movs	r2, #0
 8012564:	701a      	strb	r2, [r3, #0]
	MMscale = MFS_16BITS;
 8012566:	4bb2      	ldr	r3, [pc, #712]	; (8012830 <imuTest_begin+0x340>)
 8012568:	2201      	movs	r2, #1
 801256a:	701a      	strb	r2, [r3, #0]
	Mmode = 0x06;
 801256c:	4bb1      	ldr	r3, [pc, #708]	; (8012834 <imuTest_begin+0x344>)
 801256e:	2206      	movs	r2, #6
 8012570:	701a      	strb	r2, [r3, #0]
	magCalibration[0] = 0;
 8012572:	4bb1      	ldr	r3, [pc, #708]	; (8012838 <imuTest_begin+0x348>)
 8012574:	f04f 0200 	mov.w	r2, #0
 8012578:	601a      	str	r2, [r3, #0]
	magCalibration[1] = 0;
 801257a:	4baf      	ldr	r3, [pc, #700]	; (8012838 <imuTest_begin+0x348>)
 801257c:	f04f 0200 	mov.w	r2, #0
 8012580:	605a      	str	r2, [r3, #4]
	magCalibration[2] = 0;
 8012582:	4bad      	ldr	r3, [pc, #692]	; (8012838 <imuTest_begin+0x348>)
 8012584:	f04f 0200 	mov.w	r2, #0
 8012588:	609a      	str	r2, [r3, #8]
	magbias[0] = 0;
 801258a:	4bac      	ldr	r3, [pc, #688]	; (801283c <imuTest_begin+0x34c>)
 801258c:	f04f 0200 	mov.w	r2, #0
 8012590:	601a      	str	r2, [r3, #0]
	magbias[1] = 0;
 8012592:	4baa      	ldr	r3, [pc, #680]	; (801283c <imuTest_begin+0x34c>)
 8012594:	f04f 0200 	mov.w	r2, #0
 8012598:	605a      	str	r2, [r3, #4]
	magbias[2] = 0;
 801259a:	4ba8      	ldr	r3, [pc, #672]	; (801283c <imuTest_begin+0x34c>)
 801259c:	f04f 0200 	mov.w	r2, #0
 80125a0:	609a      	str	r2, [r3, #8]
	delt_t = 0;
 80125a2:	4ba7      	ldr	r3, [pc, #668]	; (8012840 <imuTest_begin+0x350>)
 80125a4:	2200      	movs	r2, #0
 80125a6:	601a      	str	r2, [r3, #0]
	count = 0;
 80125a8:	4ba6      	ldr	r3, [pc, #664]	; (8012844 <imuTest_begin+0x354>)
 80125aa:	2200      	movs	r2, #0
 80125ac:	601a      	str	r2, [r3, #0]
	deltat = 0.0f;
 80125ae:	4ba6      	ldr	r3, [pc, #664]	; (8012848 <imuTest_begin+0x358>)
 80125b0:	f04f 0200 	mov.w	r2, #0
 80125b4:	601a      	str	r2, [r3, #0]
	lastUpdate = 0;
 80125b6:	4ba5      	ldr	r3, [pc, #660]	; (801284c <imuTest_begin+0x35c>)
 80125b8:	2200      	movs	r2, #0
 80125ba:	601a      	str	r2, [r3, #0]
	firstUpdate = 0;
 80125bc:	4ba4      	ldr	r3, [pc, #656]	; (8012850 <imuTest_begin+0x360>)
 80125be:	2200      	movs	r2, #0
 80125c0:	601a      	str	r2, [r3, #0]
	Now = 0;
 80125c2:	4ba4      	ldr	r3, [pc, #656]	; (8012854 <imuTest_begin+0x364>)
 80125c4:	2200      	movs	r2, #0
 80125c6:	601a      	str	r2, [r3, #0]
	q[0] = 1.0f;
 80125c8:	4ba3      	ldr	r3, [pc, #652]	; (8012858 <imuTest_begin+0x368>)
 80125ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80125ce:	601a      	str	r2, [r3, #0]
	q[1] = 0.0f;
 80125d0:	4ba1      	ldr	r3, [pc, #644]	; (8012858 <imuTest_begin+0x368>)
 80125d2:	f04f 0200 	mov.w	r2, #0
 80125d6:	605a      	str	r2, [r3, #4]
	q[2] = 0.0f;
 80125d8:	4b9f      	ldr	r3, [pc, #636]	; (8012858 <imuTest_begin+0x368>)
 80125da:	f04f 0200 	mov.w	r2, #0
 80125de:	609a      	str	r2, [r3, #8]
	q[3] = 0.0f;
 80125e0:	4b9d      	ldr	r3, [pc, #628]	; (8012858 <imuTest_begin+0x368>)
 80125e2:	f04f 0200 	mov.w	r2, #0
 80125e6:	60da      	str	r2, [r3, #12]
	eInt[0] = 0.0f;
 80125e8:	4b9c      	ldr	r3, [pc, #624]	; (801285c <imuTest_begin+0x36c>)
 80125ea:	f04f 0200 	mov.w	r2, #0
 80125ee:	601a      	str	r2, [r3, #0]
	eInt[1] = 0.0f;
 80125f0:	4b9a      	ldr	r3, [pc, #616]	; (801285c <imuTest_begin+0x36c>)
 80125f2:	f04f 0200 	mov.w	r2, #0
 80125f6:	605a      	str	r2, [r3, #4]
	eInt[2] = 0.0f;
 80125f8:	4b98      	ldr	r3, [pc, #608]	; (801285c <imuTest_begin+0x36c>)
 80125fa:	f04f 0200 	mov.w	r2, #0
 80125fe:	609a      	str	r2, [r3, #8]


	if (MPU_present())
 8012600:	f7f0 fd12 	bl	8003028 <MPU_present>
 8012604:	4603      	mov	r3, r0
 8012606:	2b00      	cmp	r3, #0
 8012608:	f000 8190 	beq.w	801292c <imuTest_begin+0x43c>
	{
		HAL_Delay(1000);
 801260c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012610:	f7f3 f812 	bl	8005638 <HAL_Delay>
		MPU_SelfTest(SelfTest); // Start by performing self test and reporting values
 8012614:	4892      	ldr	r0, [pc, #584]	; (8012860 <imuTest_begin+0x370>)
 8012616:	f7f1 f91f 	bl	8003858 <MPU_SelfTest>
		println("MPU9250 Self Test:");
 801261a:	4892      	ldr	r0, [pc, #584]	; (8012864 <imuTest_begin+0x374>)
 801261c:	f7ff fb1c 	bl	8011c58 <println>
		print("x-axis self test: acceleration trim within : "); print_float(SelfTest[0]); println("% of factory value");
 8012620:	4891      	ldr	r0, [pc, #580]	; (8012868 <imuTest_begin+0x378>)
 8012622:	f7ff faf7 	bl	8011c14 <print>
 8012626:	4b8e      	ldr	r3, [pc, #568]	; (8012860 <imuTest_begin+0x370>)
 8012628:	edd3 7a00 	vldr	s15, [r3]
 801262c:	eeb0 0a67 	vmov.f32	s0, s15
 8012630:	f7ff fb60 	bl	8011cf4 <print_float>
 8012634:	488d      	ldr	r0, [pc, #564]	; (801286c <imuTest_begin+0x37c>)
 8012636:	f7ff fb0f 	bl	8011c58 <println>
		print("y-axis self test: acceleration trim within : "); print_float(SelfTest[1]); println("% of factory value");
 801263a:	488d      	ldr	r0, [pc, #564]	; (8012870 <imuTest_begin+0x380>)
 801263c:	f7ff faea 	bl	8011c14 <print>
 8012640:	4b87      	ldr	r3, [pc, #540]	; (8012860 <imuTest_begin+0x370>)
 8012642:	edd3 7a01 	vldr	s15, [r3, #4]
 8012646:	eeb0 0a67 	vmov.f32	s0, s15
 801264a:	f7ff fb53 	bl	8011cf4 <print_float>
 801264e:	4887      	ldr	r0, [pc, #540]	; (801286c <imuTest_begin+0x37c>)
 8012650:	f7ff fb02 	bl	8011c58 <println>
		print("z-axis self test: acceleration trim within : "); print_float(SelfTest[2]); println("% of factory value");
 8012654:	4887      	ldr	r0, [pc, #540]	; (8012874 <imuTest_begin+0x384>)
 8012656:	f7ff fadd 	bl	8011c14 <print>
 801265a:	4b81      	ldr	r3, [pc, #516]	; (8012860 <imuTest_begin+0x370>)
 801265c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012660:	eeb0 0a67 	vmov.f32	s0, s15
 8012664:	f7ff fb46 	bl	8011cf4 <print_float>
 8012668:	4880      	ldr	r0, [pc, #512]	; (801286c <imuTest_begin+0x37c>)
 801266a:	f7ff faf5 	bl	8011c58 <println>
		print("x-axis self test: gyration trim within : "); print_float(SelfTest[3]); println("% of factory value");
 801266e:	4882      	ldr	r0, [pc, #520]	; (8012878 <imuTest_begin+0x388>)
 8012670:	f7ff fad0 	bl	8011c14 <print>
 8012674:	4b7a      	ldr	r3, [pc, #488]	; (8012860 <imuTest_begin+0x370>)
 8012676:	edd3 7a03 	vldr	s15, [r3, #12]
 801267a:	eeb0 0a67 	vmov.f32	s0, s15
 801267e:	f7ff fb39 	bl	8011cf4 <print_float>
 8012682:	487a      	ldr	r0, [pc, #488]	; (801286c <imuTest_begin+0x37c>)
 8012684:	f7ff fae8 	bl	8011c58 <println>
		print("y-axis self test: gyration trim within : "); print_float(SelfTest[4]); println("% of factory value");
 8012688:	487c      	ldr	r0, [pc, #496]	; (801287c <imuTest_begin+0x38c>)
 801268a:	f7ff fac3 	bl	8011c14 <print>
 801268e:	4b74      	ldr	r3, [pc, #464]	; (8012860 <imuTest_begin+0x370>)
 8012690:	edd3 7a04 	vldr	s15, [r3, #16]
 8012694:	eeb0 0a67 	vmov.f32	s0, s15
 8012698:	f7ff fb2c 	bl	8011cf4 <print_float>
 801269c:	4873      	ldr	r0, [pc, #460]	; (801286c <imuTest_begin+0x37c>)
 801269e:	f7ff fadb 	bl	8011c58 <println>
		print("z-axis self test: gyration trim within : "); print_float(SelfTest[5]); println("% of factory value");
 80126a2:	4877      	ldr	r0, [pc, #476]	; (8012880 <imuTest_begin+0x390>)
 80126a4:	f7ff fab6 	bl	8011c14 <print>
 80126a8:	4b6d      	ldr	r3, [pc, #436]	; (8012860 <imuTest_begin+0x370>)
 80126aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80126ae:	eeb0 0a67 	vmov.f32	s0, s15
 80126b2:	f7ff fb1f 	bl	8011cf4 <print_float>
 80126b6:	486d      	ldr	r0, [pc, #436]	; (801286c <imuTest_begin+0x37c>)
 80126b8:	f7ff face 	bl	8011c58 <println>
		HAL_Delay(1000);
 80126bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80126c0:	f7f2 ffba 	bl	8005638 <HAL_Delay>

		// get sensor resolutions, only need to do this once
		MPU_getAres();
 80126c4:	f7f0 fbec 	bl	8002ea0 <MPU_getAres>
		MPU_getGres();
 80126c8:	f7f0 fbb6 	bl	8002e38 <MPU_getGres>
		MPU_getMres();
 80126cc:	f7f0 fb96 	bl	8002dfc <MPU_getMres>

		println(" Calibrate MPU9250 gyro and accel");
 80126d0:	486c      	ldr	r0, [pc, #432]	; (8012884 <imuTest_begin+0x394>)
 80126d2:	f7ff fac1 	bl	8011c58 <println>
		MPU_calibrate(MPU9250gyroBias, MPU9250accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
 80126d6:	496c      	ldr	r1, [pc, #432]	; (8012888 <imuTest_begin+0x398>)
 80126d8:	486c      	ldr	r0, [pc, #432]	; (801288c <imuTest_begin+0x39c>)
 80126da:	f7f0 fe2f 	bl	800333c <MPU_calibrate>
		println("accel biases (mg)");
 80126de:	486c      	ldr	r0, [pc, #432]	; (8012890 <imuTest_begin+0x3a0>)
 80126e0:	f7ff faba 	bl	8011c58 <println>
		print_float(1000.0 * MPU9250accelBias[0]); println("");
 80126e4:	4b68      	ldr	r3, [pc, #416]	; (8012888 <imuTest_begin+0x398>)
 80126e6:	edd3 7a00 	vldr	s15, [r3]
 80126ea:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8012894 <imuTest_begin+0x3a4>
 80126ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80126f2:	eeb0 0a67 	vmov.f32	s0, s15
 80126f6:	f7ff fafd 	bl	8011cf4 <print_float>
 80126fa:	4867      	ldr	r0, [pc, #412]	; (8012898 <imuTest_begin+0x3a8>)
 80126fc:	f7ff faac 	bl	8011c58 <println>
		print_float(1000.0 * MPU9250accelBias[1]); println("");
 8012700:	4b61      	ldr	r3, [pc, #388]	; (8012888 <imuTest_begin+0x398>)
 8012702:	edd3 7a01 	vldr	s15, [r3, #4]
 8012706:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8012894 <imuTest_begin+0x3a4>
 801270a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801270e:	eeb0 0a67 	vmov.f32	s0, s15
 8012712:	f7ff faef 	bl	8011cf4 <print_float>
 8012716:	4860      	ldr	r0, [pc, #384]	; (8012898 <imuTest_begin+0x3a8>)
 8012718:	f7ff fa9e 	bl	8011c58 <println>
		print_float(1000.0 * MPU9250accelBias[2]); println("");
 801271c:	4b5a      	ldr	r3, [pc, #360]	; (8012888 <imuTest_begin+0x398>)
 801271e:	edd3 7a02 	vldr	s15, [r3, #8]
 8012722:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8012894 <imuTest_begin+0x3a4>
 8012726:	ee67 7a87 	vmul.f32	s15, s15, s14
 801272a:	eeb0 0a67 	vmov.f32	s0, s15
 801272e:	f7ff fae1 	bl	8011cf4 <print_float>
 8012732:	4859      	ldr	r0, [pc, #356]	; (8012898 <imuTest_begin+0x3a8>)
 8012734:	f7ff fa90 	bl	8011c58 <println>
		println("gyro biases (dps)");
 8012738:	4858      	ldr	r0, [pc, #352]	; (801289c <imuTest_begin+0x3ac>)
 801273a:	f7ff fa8d 	bl	8011c58 <println>
		print_float(MPU9250gyroBias[0]); println("");
 801273e:	4b53      	ldr	r3, [pc, #332]	; (801288c <imuTest_begin+0x39c>)
 8012740:	edd3 7a00 	vldr	s15, [r3]
 8012744:	eeb0 0a67 	vmov.f32	s0, s15
 8012748:	f7ff fad4 	bl	8011cf4 <print_float>
 801274c:	4852      	ldr	r0, [pc, #328]	; (8012898 <imuTest_begin+0x3a8>)
 801274e:	f7ff fa83 	bl	8011c58 <println>
		print_float(MPU9250gyroBias[1]); println("");
 8012752:	4b4e      	ldr	r3, [pc, #312]	; (801288c <imuTest_begin+0x39c>)
 8012754:	edd3 7a01 	vldr	s15, [r3, #4]
 8012758:	eeb0 0a67 	vmov.f32	s0, s15
 801275c:	f7ff faca 	bl	8011cf4 <print_float>
 8012760:	484d      	ldr	r0, [pc, #308]	; (8012898 <imuTest_begin+0x3a8>)
 8012762:	f7ff fa79 	bl	8011c58 <println>
		print_float(MPU9250gyroBias[2]); println("");
 8012766:	4b49      	ldr	r3, [pc, #292]	; (801288c <imuTest_begin+0x39c>)
 8012768:	edd3 7a02 	vldr	s15, [r3, #8]
 801276c:	eeb0 0a67 	vmov.f32	s0, s15
 8012770:	f7ff fac0 	bl	8011cf4 <print_float>
 8012774:	4848      	ldr	r0, [pc, #288]	; (8012898 <imuTest_begin+0x3a8>)
 8012776:	f7ff fa6f 	bl	8011c58 <println>

		HAL_Delay(1000);
 801277a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801277e:	f7f2 ff5b 	bl	8005638 <HAL_Delay>

		MPU_init();
 8012782:	f7f0 fc73 	bl	800306c <MPU_init>
		println("MPU9250 initialized for active data mode...."); // Initialize device for active mode read of acclerometer, gyroscope, and temperature
 8012786:	4846      	ldr	r0, [pc, #280]	; (80128a0 <imuTest_begin+0x3b0>)
 8012788:	f7ff fa66 	bl	8011c58 <println>

		// Read the WHO_AM_I register of the magnetometer, this is a good test of communication
		char d = MPU_readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);  // Read WHO_AM_I register for AK8963
 801278c:	2100      	movs	r1, #0
 801278e:	2018      	movs	r0, #24
 8012790:	f7f0 fadf 	bl	8002d52 <MPU_readByte>
 8012794:	4603      	mov	r3, r0
 8012796:	71fb      	strb	r3, [r7, #7]
		if (d == 0x48) println("[MAG] SUCCESSS!!!!");
 8012798:	79fb      	ldrb	r3, [r7, #7]
 801279a:	2b48      	cmp	r3, #72	; 0x48
 801279c:	d102      	bne.n	80127a4 <imuTest_begin+0x2b4>
 801279e:	4841      	ldr	r0, [pc, #260]	; (80128a4 <imuTest_begin+0x3b4>)
 80127a0:	f7ff fa5a 	bl	8011c58 <println>

		HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 80127a4:	2201      	movs	r2, #1
 80127a6:	2180      	movs	r1, #128	; 0x80
 80127a8:	483f      	ldr	r0, [pc, #252]	; (80128a8 <imuTest_begin+0x3b8>)
 80127aa:	f7f3 fdc3 	bl	8006334 <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 80127ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80127b2:	f7f2 ff41 	bl	8005638 <HAL_Delay>

		// Get magnetometer calibration from AK8963 ROM
		AK8963_init(magCalibration); println("AK8963 initialized for active data mode...."); // Initialize device for active mode read of magnetometer
 80127b6:	4820      	ldr	r0, [pc, #128]	; (8012838 <imuTest_begin+0x348>)
 80127b8:	f7f0 fd40 	bl	800323c <AK8963_init>
 80127bc:	483b      	ldr	r0, [pc, #236]	; (80128ac <imuTest_begin+0x3bc>)
 80127be:	f7ff fa4b 	bl	8011c58 <println>

		MPU_calibrateMag(MPU9250magBias);
 80127c2:	483b      	ldr	r0, [pc, #236]	; (80128b0 <imuTest_begin+0x3c0>)
 80127c4:	f7f1 fbee 	bl	8003fa4 <MPU_calibrateMag>
		println("AK8963 mag biases (mG)");
 80127c8:	483a      	ldr	r0, [pc, #232]	; (80128b4 <imuTest_begin+0x3c4>)
 80127ca:	f7ff fa45 	bl	8011c58 <println>
		print_float(MPU9250magBias[0]); println("");
 80127ce:	4b38      	ldr	r3, [pc, #224]	; (80128b0 <imuTest_begin+0x3c0>)
 80127d0:	edd3 7a00 	vldr	s15, [r3]
 80127d4:	eeb0 0a67 	vmov.f32	s0, s15
 80127d8:	f7ff fa8c 	bl	8011cf4 <print_float>
 80127dc:	482e      	ldr	r0, [pc, #184]	; (8012898 <imuTest_begin+0x3a8>)
 80127de:	f7ff fa3b 	bl	8011c58 <println>
		print_float(MPU9250magBias[1]); println("");
 80127e2:	4b33      	ldr	r3, [pc, #204]	; (80128b0 <imuTest_begin+0x3c0>)
 80127e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80127e8:	eeb0 0a67 	vmov.f32	s0, s15
 80127ec:	f7ff fa82 	bl	8011cf4 <print_float>
 80127f0:	4829      	ldr	r0, [pc, #164]	; (8012898 <imuTest_begin+0x3a8>)
 80127f2:	f7ff fa31 	bl	8011c58 <println>
		print_float(MPU9250magBias[2]); println("");
 80127f6:	4b2e      	ldr	r3, [pc, #184]	; (80128b0 <imuTest_begin+0x3c0>)
 80127f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80127fc:	e05c      	b.n	80128b8 <imuTest_begin+0x3c8>
 80127fe:	bf00      	nop
 8012800:	e8584caa 	.word	0xe8584caa
 8012804:	3febb67a 	.word	0x3febb67a
 8012808:	20002a6a 	.word	0x20002a6a
 801280c:	0801a644 	.word	0x0801a644
 8012810:	20002af0 	.word	0x20002af0
 8012814:	3f860a92 	.word	0x3f860a92
 8012818:	20002b24 	.word	0x20002b24
 801281c:	20002a78 	.word	0x20002a78
 8012820:	3c8efa36 	.word	0x3c8efa36
 8012824:	20002b9c 	.word	0x20002b9c
 8012828:	20002aa4 	.word	0x20002aa4
 801282c:	20002a6b 	.word	0x20002a6b
 8012830:	20002af4 	.word	0x20002af4
 8012834:	20002acc 	.word	0x20002acc
 8012838:	20002b84 	.word	0x20002b84
 801283c:	20002ad0 	.word	0x20002ad0
 8012840:	20002b1c 	.word	0x20002b1c
 8012844:	20002b14 	.word	0x20002b14
 8012848:	20002b58 	.word	0x20002b58
 801284c:	20002ab0 	.word	0x20002ab0
 8012850:	20002b60 	.word	0x20002b60
 8012854:	20002ae0 	.word	0x20002ae0
 8012858:	20002b70 	.word	0x20002b70
 801285c:	20002ac0 	.word	0x20002ac0
 8012860:	20002a7c 	.word	0x20002a7c
 8012864:	0801a654 	.word	0x0801a654
 8012868:	0801a668 	.word	0x0801a668
 801286c:	0801a698 	.word	0x0801a698
 8012870:	0801a6ac 	.word	0x0801a6ac
 8012874:	0801a6dc 	.word	0x0801a6dc
 8012878:	0801a70c 	.word	0x0801a70c
 801287c:	0801a738 	.word	0x0801a738
 8012880:	0801a764 	.word	0x0801a764
 8012884:	0801a790 	.word	0x0801a790
 8012888:	20002a6c 	.word	0x20002a6c
 801288c:	20002b34 	.word	0x20002b34
 8012890:	0801a7b4 	.word	0x0801a7b4
 8012894:	447a0000 	.word	0x447a0000
 8012898:	0801a614 	.word	0x0801a614
 801289c:	0801a7c8 	.word	0x0801a7c8
 80128a0:	0801a7dc 	.word	0x0801a7dc
 80128a4:	0801a80c 	.word	0x0801a80c
 80128a8:	40020800 	.word	0x40020800
 80128ac:	0801a820 	.word	0x0801a820
 80128b0:	20002afc 	.word	0x20002afc
 80128b4:	0801a84c 	.word	0x0801a84c
 80128b8:	eeb0 0a67 	vmov.f32	s0, s15
 80128bc:	f7ff fa1a 	bl	8011cf4 <print_float>
 80128c0:	481d      	ldr	r0, [pc, #116]	; (8012938 <imuTest_begin+0x448>)
 80128c2:	f7ff f9c9 	bl	8011c58 <println>
		HAL_Delay(2000); // add delay to see results before serial spew of data
 80128c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80128ca:	f7f2 feb5 	bl	8005638 <HAL_Delay>

		print("[MAG] X-Axis sensitivity adjustment value "); print_float(magCalibration[0]); println("");
 80128ce:	481b      	ldr	r0, [pc, #108]	; (801293c <imuTest_begin+0x44c>)
 80128d0:	f7ff f9a0 	bl	8011c14 <print>
 80128d4:	4b1a      	ldr	r3, [pc, #104]	; (8012940 <imuTest_begin+0x450>)
 80128d6:	edd3 7a00 	vldr	s15, [r3]
 80128da:	eeb0 0a67 	vmov.f32	s0, s15
 80128de:	f7ff fa09 	bl	8011cf4 <print_float>
 80128e2:	4815      	ldr	r0, [pc, #84]	; (8012938 <imuTest_begin+0x448>)
 80128e4:	f7ff f9b8 	bl	8011c58 <println>
		print("[MAG] Y-Axis sensitivity adjustment value "); print_float(magCalibration[1]); println("");
 80128e8:	4816      	ldr	r0, [pc, #88]	; (8012944 <imuTest_begin+0x454>)
 80128ea:	f7ff f993 	bl	8011c14 <print>
 80128ee:	4b14      	ldr	r3, [pc, #80]	; (8012940 <imuTest_begin+0x450>)
 80128f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80128f4:	eeb0 0a67 	vmov.f32	s0, s15
 80128f8:	f7ff f9fc 	bl	8011cf4 <print_float>
 80128fc:	480e      	ldr	r0, [pc, #56]	; (8012938 <imuTest_begin+0x448>)
 80128fe:	f7ff f9ab 	bl	8011c58 <println>
		print("[MAG] Z-Axis sensitivity adjustment value "); print_float(magCalibration[2]); println("");
 8012902:	4811      	ldr	r0, [pc, #68]	; (8012948 <imuTest_begin+0x458>)
 8012904:	f7ff f986 	bl	8011c14 <print>
 8012908:	4b0d      	ldr	r3, [pc, #52]	; (8012940 <imuTest_begin+0x450>)
 801290a:	edd3 7a02 	vldr	s15, [r3, #8]
 801290e:	eeb0 0a67 	vmov.f32	s0, s15
 8012912:	f7ff f9ef 	bl	8011cf4 <print_float>
 8012916:	4808      	ldr	r0, [pc, #32]	; (8012938 <imuTest_begin+0x448>)
 8012918:	f7ff f99e 	bl	8011c58 <println>


		HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 801291c:	2200      	movs	r2, #0
 801291e:	2180      	movs	r1, #128	; 0x80
 8012920:	480a      	ldr	r0, [pc, #40]	; (801294c <imuTest_begin+0x45c>)
 8012922:	f7f3 fd07 	bl	8006334 <HAL_GPIO_WritePin>
		imuActive = true;
 8012926:	4b0a      	ldr	r3, [pc, #40]	; (8012950 <imuTest_begin+0x460>)
 8012928:	2201      	movs	r2, #1
 801292a:	701a      	strb	r2, [r3, #0]
	}
}
 801292c:	bf00      	nop
 801292e:	4618      	mov	r0, r3
 8012930:	370c      	adds	r7, #12
 8012932:	46bd      	mov	sp, r7
 8012934:	bd90      	pop	{r4, r7, pc}
 8012936:	bf00      	nop
 8012938:	0801a614 	.word	0x0801a614
 801293c:	0801a864 	.word	0x0801a864
 8012940:	20002b84 	.word	0x20002b84
 8012944:	0801a890 	.word	0x0801a890
 8012948:	0801a8bc 	.word	0x0801a8bc
 801294c:	40020800 	.word	0x40020800
 8012950:	20002a6a 	.word	0x20002a6a

08012954 <sensing_begin>:
uint32_t lastImuLog;
// IMU
// (SPS)

static bool sensing_begin(void)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b082      	sub	sp, #8
 8012958:	af00      	add	r7, sp, #0
	uint8_t attempts = 0;
 801295a:	2300      	movs	r3, #0
 801295c:	71fb      	strb	r3, [r7, #7]
	gps.uart = Get_UART3_Instance();
 801295e:	f000 fde5 	bl	801352c <Get_UART3_Instance>
 8012962:	4602      	mov	r2, r0
 8012964:	4b43      	ldr	r3, [pc, #268]	; (8012a74 <sensing_begin+0x120>)
 8012966:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	while (!GPS_init(&gps))
 801296a:	e010      	b.n	801298e <sensing_begin+0x3a>
	{
		HAL_Delay(500);
 801296c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012970:	f7f2 fe62 	bl	8005638 <HAL_Delay>
		if (SENSING_DEBUG) println("[GPS] Init unsuccessful, retrying...");
 8012974:	4840      	ldr	r0, [pc, #256]	; (8012a78 <sensing_begin+0x124>)
 8012976:	f7ff f96f 	bl	8011c58 <println>
		attempts++;
 801297a:	79fb      	ldrb	r3, [r7, #7]
 801297c:	3301      	adds	r3, #1
 801297e:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 8012980:	79fb      	ldrb	r3, [r7, #7]
 8012982:	2b04      	cmp	r3, #4
 8012984:	d903      	bls.n	801298e <sensing_begin+0x3a>
		{
			if (SENSING_DEBUG) println("[GPS] Too many attempts, GPS is not active!");
 8012986:	483d      	ldr	r0, [pc, #244]	; (8012a7c <sensing_begin+0x128>)
 8012988:	f7ff f966 	bl	8011c58 <println>
			break;
 801298c:	e008      	b.n	80129a0 <sensing_begin+0x4c>
	while (!GPS_init(&gps))
 801298e:	4839      	ldr	r0, [pc, #228]	; (8012a74 <sensing_begin+0x120>)
 8012990:	f7ef f8aa 	bl	8001ae8 <GPS_init>
 8012994:	4603      	mov	r3, r0
 8012996:	f083 0301 	eor.w	r3, r3, #1
 801299a:	b2db      	uxtb	r3, r3
 801299c:	2b00      	cmp	r3, #0
 801299e:	d1e5      	bne.n	801296c <sensing_begin+0x18>
		}
	}

	attempts = 0;
 80129a0:	2300      	movs	r3, #0
 80129a2:	71fb      	strb	r3, [r7, #7]
	bmp.params = bmp280_default_config;
 80129a4:	4b36      	ldr	r3, [pc, #216]	; (8012a80 <sensing_begin+0x12c>)
 80129a6:	4a37      	ldr	r2, [pc, #220]	; (8012a84 <sensing_begin+0x130>)
 80129a8:	3307      	adds	r3, #7
 80129aa:	6810      	ldr	r0, [r2, #0]
 80129ac:	6018      	str	r0, [r3, #0]
 80129ae:	7912      	ldrb	r2, [r2, #4]
 80129b0:	711a      	strb	r2, [r3, #4]
	bmp.addr = BMP280_I2C_ADDRESS_0;
 80129b2:	4b33      	ldr	r3, [pc, #204]	; (8012a80 <sensing_begin+0x12c>)
 80129b4:	2276      	movs	r2, #118	; 0x76
 80129b6:	809a      	strh	r2, [r3, #4]
	bmp.i2c = Get_I2C1_Instance();
 80129b8:	f000 fdae 	bl	8013518 <Get_I2C1_Instance>
 80129bc:	4602      	mov	r2, r0
 80129be:	4b30      	ldr	r3, [pc, #192]	; (8012a80 <sensing_begin+0x12c>)
 80129c0:	601a      	str	r2, [r3, #0]
	//unneccessary, to change
	while (!bmp280_init(&bmp, &bmp.params))
 80129c2:	e010      	b.n	80129e6 <sensing_begin+0x92>
	{
		HAL_Delay(500);
 80129c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80129c8:	f7f2 fe36 	bl	8005638 <HAL_Delay>
		if (SENSING_DEBUG) println("[BMP] Init unsuccesfull, retrying...");
 80129cc:	482e      	ldr	r0, [pc, #184]	; (8012a88 <sensing_begin+0x134>)
 80129ce:	f7ff f943 	bl	8011c58 <println>
		attempts++;
 80129d2:	79fb      	ldrb	r3, [r7, #7]
 80129d4:	3301      	adds	r3, #1
 80129d6:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 80129d8:	79fb      	ldrb	r3, [r7, #7]
 80129da:	2b04      	cmp	r3, #4
 80129dc:	d903      	bls.n	80129e6 <sensing_begin+0x92>
		{
			if (SENSING_DEBUG) println("[BMP] Too many attempts, BMP is not active!");
 80129de:	482b      	ldr	r0, [pc, #172]	; (8012a8c <sensing_begin+0x138>)
 80129e0:	f7ff f93a 	bl	8011c58 <println>
			break;
 80129e4:	e009      	b.n	80129fa <sensing_begin+0xa6>
	while (!bmp280_init(&bmp, &bmp.params))
 80129e6:	492a      	ldr	r1, [pc, #168]	; (8012a90 <sensing_begin+0x13c>)
 80129e8:	4825      	ldr	r0, [pc, #148]	; (8012a80 <sensing_begin+0x12c>)
 80129ea:	f7ee fcd8 	bl	800139e <bmp280_init>
 80129ee:	4603      	mov	r3, r0
 80129f0:	f083 0301 	eor.w	r3, r3, #1
 80129f4:	b2db      	uxtb	r3, r3
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d1e4      	bne.n	80129c4 <sensing_begin+0x70>
		}
	}

	if (imuTest_begin()) println("[IMU] Init successful!");
 80129fa:	f7ff fd79 	bl	80124f0 <imuTest_begin>
 80129fe:	4603      	mov	r3, r0
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d002      	beq.n	8012a0a <sensing_begin+0xb6>
 8012a04:	4823      	ldr	r0, [pc, #140]	; (8012a94 <sensing_begin+0x140>)
 8012a06:	f7ff f927 	bl	8011c58 <println>

	if (SENSING_DEBUG)
	{
		println("Sensor init summary:");
 8012a0a:	4823      	ldr	r0, [pc, #140]	; (8012a98 <sensing_begin+0x144>)
 8012a0c:	f7ff f924 	bl	8011c58 <println>
		print("GPS - "); gps.active ? println("active") : println("not active");
 8012a10:	4822      	ldr	r0, [pc, #136]	; (8012a9c <sensing_begin+0x148>)
 8012a12:	f7ff f8ff 	bl	8011c14 <print>
 8012a16:	4b17      	ldr	r3, [pc, #92]	; (8012a74 <sensing_begin+0x120>)
 8012a18:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d003      	beq.n	8012a28 <sensing_begin+0xd4>
 8012a20:	481f      	ldr	r0, [pc, #124]	; (8012aa0 <sensing_begin+0x14c>)
 8012a22:	f7ff f919 	bl	8011c58 <println>
 8012a26:	e002      	b.n	8012a2e <sensing_begin+0xda>
 8012a28:	481e      	ldr	r0, [pc, #120]	; (8012aa4 <sensing_begin+0x150>)
 8012a2a:	f7ff f915 	bl	8011c58 <println>
		print("BMP - "); bmp.active ? println("active") : println("not active");
 8012a2e:	481e      	ldr	r0, [pc, #120]	; (8012aa8 <sensing_begin+0x154>)
 8012a30:	f7ff f8f0 	bl	8011c14 <print>
 8012a34:	4b12      	ldr	r3, [pc, #72]	; (8012a80 <sensing_begin+0x12c>)
 8012a36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d003      	beq.n	8012a46 <sensing_begin+0xf2>
 8012a3e:	4818      	ldr	r0, [pc, #96]	; (8012aa0 <sensing_begin+0x14c>)
 8012a40:	f7ff f90a 	bl	8011c58 <println>
 8012a44:	e002      	b.n	8012a4c <sensing_begin+0xf8>
 8012a46:	4817      	ldr	r0, [pc, #92]	; (8012aa4 <sensing_begin+0x150>)
 8012a48:	f7ff f906 	bl	8011c58 <println>
		print("IMU - "); imuActive ? println("active") : println("not active");
 8012a4c:	4817      	ldr	r0, [pc, #92]	; (8012aac <sensing_begin+0x158>)
 8012a4e:	f7ff f8e1 	bl	8011c14 <print>
 8012a52:	4b17      	ldr	r3, [pc, #92]	; (8012ab0 <sensing_begin+0x15c>)
 8012a54:	781b      	ldrb	r3, [r3, #0]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d003      	beq.n	8012a62 <sensing_begin+0x10e>
 8012a5a:	4811      	ldr	r0, [pc, #68]	; (8012aa0 <sensing_begin+0x14c>)
 8012a5c:	f7ff f8fc 	bl	8011c58 <println>
 8012a60:	e002      	b.n	8012a68 <sensing_begin+0x114>
 8012a62:	4810      	ldr	r0, [pc, #64]	; (8012aa4 <sensing_begin+0x150>)
 8012a64:	f7ff f8f8 	bl	8011c58 <println>
	}
}
 8012a68:	bf00      	nop
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3708      	adds	r7, #8
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	bd80      	pop	{r7, pc}
 8012a72:	bf00      	nop
 8012a74:	20002834 	.word	0x20002834
 8012a78:	0801a8e8 	.word	0x0801a8e8
 8012a7c:	0801a910 	.word	0x0801a910
 8012a80:	200033e8 	.word	0x200033e8
 8012a84:	20000118 	.word	0x20000118
 8012a88:	0801a93c 	.word	0x0801a93c
 8012a8c:	0801a964 	.word	0x0801a964
 8012a90:	200033ef 	.word	0x200033ef
 8012a94:	0801a990 	.word	0x0801a990
 8012a98:	0801a9a8 	.word	0x0801a9a8
 8012a9c:	0801a9c0 	.word	0x0801a9c0
 8012aa0:	0801a9c8 	.word	0x0801a9c8
 8012aa4:	0801a9d0 	.word	0x0801a9d0
 8012aa8:	0801a9dc 	.word	0x0801a9dc
 8012aac:	0801a9e4 	.word	0x0801a9e4
 8012ab0:	20002a6a 	.word	0x20002a6a

08012ab4 <sensing_loop>:

static void sensing_loop(void)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b084      	sub	sp, #16
 8012ab8:	af00      	add	r7, sp, #0
	if (gps.active)
 8012aba:	4b57      	ldr	r3, [pc, #348]	; (8012c18 <sensing_loop+0x164>)
 8012abc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d018      	beq.n	8012af6 <sensing_loop+0x42>
	{
		GPS_read(&gps);
 8012ac4:	4854      	ldr	r0, [pc, #336]	; (8012c18 <sensing_loop+0x164>)
 8012ac6:	f7ee ff77 	bl	80019b8 <GPS_read>
		if (GPS_newNMEAreceived(&gps))
 8012aca:	4853      	ldr	r0, [pc, #332]	; (8012c18 <sensing_loop+0x164>)
 8012acc:	f7f0 f8e1 	bl	8002c92 <GPS_newNMEAreceived>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d00f      	beq.n	8012af6 <sensing_loop+0x42>
		{
			//println(GPS_lastNMEA(&gps));
			if (gps.fix) log_gps(&gps);
 8012ad6:	4b50      	ldr	r3, [pc, #320]	; (8012c18 <sensing_loop+0x164>)
 8012ad8:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d002      	beq.n	8012ae6 <sensing_loop+0x32>
 8012ae0:	484d      	ldr	r0, [pc, #308]	; (8012c18 <sensing_loop+0x164>)
 8012ae2:	f7f2 fc91 	bl	8005408 <log_gps>
			GPS_parse(&gps, GPS_lastNMEA(&gps));
 8012ae6:	484c      	ldr	r0, [pc, #304]	; (8012c18 <sensing_loop+0x164>)
 8012ae8:	f7f0 f8e1 	bl	8002cae <GPS_lastNMEA>
 8012aec:	4603      	mov	r3, r0
 8012aee:	4619      	mov	r1, r3
 8012af0:	4849      	ldr	r0, [pc, #292]	; (8012c18 <sensing_loop+0x164>)
 8012af2:	f7ef f983 	bl	8001dfc <GPS_parse>
		}
	}

	if (bmp.active)
 8012af6:	4b49      	ldr	r3, [pc, #292]	; (8012c1c <sensing_loop+0x168>)
 8012af8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d012      	beq.n	8012b26 <sensing_loop+0x72>
	{
		bmp280_update(&bmp);
 8012b00:	4846      	ldr	r0, [pc, #280]	; (8012c1c <sensing_loop+0x168>)
 8012b02:	f7ee ff37 	bl	8001974 <bmp280_update>
		if (millis() - lastBmpLog >= 100)
 8012b06:	f7ff f935 	bl	8011d74 <millis>
 8012b0a:	4602      	mov	r2, r0
 8012b0c:	4b44      	ldr	r3, [pc, #272]	; (8012c20 <sensing_loop+0x16c>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	1ad3      	subs	r3, r2, r3
 8012b12:	2b63      	cmp	r3, #99	; 0x63
 8012b14:	d907      	bls.n	8012b26 <sensing_loop+0x72>
		{
			log_bmp(&bmp);
 8012b16:	4841      	ldr	r0, [pc, #260]	; (8012c1c <sensing_loop+0x168>)
 8012b18:	f7f2 fc2a 	bl	8005370 <log_bmp>
			lastBmpLog = millis();
 8012b1c:	f7ff f92a 	bl	8011d74 <millis>
 8012b20:	4602      	mov	r2, r0
 8012b22:	4b3f      	ldr	r3, [pc, #252]	; (8012c20 <sensing_loop+0x16c>)
 8012b24:	601a      	str	r2, [r3, #0]
		}
	}

	if (imuActive)
 8012b26:	4b3f      	ldr	r3, [pc, #252]	; (8012c24 <sensing_loop+0x170>)
 8012b28:	781b      	ldrb	r3, [r3, #0]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d01a      	beq.n	8012b64 <sensing_loop+0xb0>
	{
		imuTest_getData();		// get data from IMU
 8012b2e:	f7ff fa23 	bl	8011f78 <imuTest_getData>
		imuTest_quatUpdate();	// compute data received
 8012b32:	f7ff fb13 	bl	801215c <imuTest_quatUpdate>

		if (millis() - lastImuLog >= 100)
 8012b36:	f7ff f91d 	bl	8011d74 <millis>
 8012b3a:	4602      	mov	r2, r0
 8012b3c:	4b3a      	ldr	r3, [pc, #232]	; (8012c28 <sensing_loop+0x174>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	1ad3      	subs	r3, r2, r3
 8012b42:	2b63      	cmp	r3, #99	; 0x63
 8012b44:	d90e      	bls.n	8012b64 <sensing_loop+0xb0>
		{
			imuTest_getEuler();
 8012b46:	f7ff fbb9 	bl	80122bc <imuTest_getEuler>
			float eulers[3] = {yaw, pitch, roll};
 8012b4a:	4b38      	ldr	r3, [pc, #224]	; (8012c2c <sensing_loop+0x178>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	607b      	str	r3, [r7, #4]
 8012b50:	4b37      	ldr	r3, [pc, #220]	; (8012c30 <sensing_loop+0x17c>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	60bb      	str	r3, [r7, #8]
 8012b56:	4b37      	ldr	r3, [pc, #220]	; (8012c34 <sensing_loop+0x180>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	60fb      	str	r3, [r7, #12]
			log_imu(eulers);
 8012b5c:	1d3b      	adds	r3, r7, #4
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f7f2 fc9e 	bl	80054a0 <log_imu>
		}

	}

	if (millis() - lastDataPrint >= 1000 && SENSING_PRINT_DATA)
 8012b64:	f7ff f906 	bl	8011d74 <millis>
 8012b68:	4602      	mov	r2, r0
 8012b6a:	4b33      	ldr	r3, [pc, #204]	; (8012c38 <sensing_loop+0x184>)
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	1ad3      	subs	r3, r2, r3
 8012b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012b74:	d34b      	bcc.n	8012c0e <sensing_loop+0x15a>
	{
		if (bmp.active)
 8012b76:	4b29      	ldr	r3, [pc, #164]	; (8012c1c <sensing_loop+0x168>)
 8012b78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d019      	beq.n	8012bb4 <sensing_loop+0x100>
		{
			print("Pressure: "); print_float(bmp.pressure); println("");
 8012b80:	482e      	ldr	r0, [pc, #184]	; (8012c3c <sensing_loop+0x188>)
 8012b82:	f7ff f847 	bl	8011c14 <print>
 8012b86:	4b25      	ldr	r3, [pc, #148]	; (8012c1c <sensing_loop+0x168>)
 8012b88:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8012b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8012b90:	f7ff f8b0 	bl	8011cf4 <print_float>
 8012b94:	482a      	ldr	r0, [pc, #168]	; (8012c40 <sensing_loop+0x18c>)
 8012b96:	f7ff f85f 	bl	8011c58 <println>
			print("Temperature: "); print_float(bmp.temperature); println("");
 8012b9a:	482a      	ldr	r0, [pc, #168]	; (8012c44 <sensing_loop+0x190>)
 8012b9c:	f7ff f83a 	bl	8011c14 <print>
 8012ba0:	4b1e      	ldr	r3, [pc, #120]	; (8012c1c <sensing_loop+0x168>)
 8012ba2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8012ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8012baa:	f7ff f8a3 	bl	8011cf4 <print_float>
 8012bae:	4824      	ldr	r0, [pc, #144]	; (8012c40 <sensing_loop+0x18c>)
 8012bb0:	f7ff f852 	bl	8011c58 <println>
		}
		if (gps.active)
 8012bb4:	4b18      	ldr	r3, [pc, #96]	; (8012c18 <sensing_loop+0x164>)
 8012bb6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d022      	beq.n	8012c04 <sensing_loop+0x150>
		{
			if (gps.fix)
 8012bbe:	4b16      	ldr	r3, [pc, #88]	; (8012c18 <sensing_loop+0x164>)
 8012bc0:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d01a      	beq.n	8012bfe <sensing_loop+0x14a>
			{
				print("Latitude: "); print_float(gps.latitudeDegrees); println("");
 8012bc8:	481f      	ldr	r0, [pc, #124]	; (8012c48 <sensing_loop+0x194>)
 8012bca:	f7ff f823 	bl	8011c14 <print>
 8012bce:	4b12      	ldr	r3, [pc, #72]	; (8012c18 <sensing_loop+0x164>)
 8012bd0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8012bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8012bd8:	f7ff f88c 	bl	8011cf4 <print_float>
 8012bdc:	4818      	ldr	r0, [pc, #96]	; (8012c40 <sensing_loop+0x18c>)
 8012bde:	f7ff f83b 	bl	8011c58 <println>
				print("Longitude: "); print_float(gps.longitudeDegrees); println("");
 8012be2:	481a      	ldr	r0, [pc, #104]	; (8012c4c <sensing_loop+0x198>)
 8012be4:	f7ff f816 	bl	8011c14 <print>
 8012be8:	4b0b      	ldr	r3, [pc, #44]	; (8012c18 <sensing_loop+0x164>)
 8012bea:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8012bee:	eeb0 0a67 	vmov.f32	s0, s15
 8012bf2:	f7ff f87f 	bl	8011cf4 <print_float>
 8012bf6:	4812      	ldr	r0, [pc, #72]	; (8012c40 <sensing_loop+0x18c>)
 8012bf8:	f7ff f82e 	bl	8011c58 <println>
 8012bfc:	e002      	b.n	8012c04 <sensing_loop+0x150>
			}
			else println("GPS has no fix!");
 8012bfe:	4814      	ldr	r0, [pc, #80]	; (8012c50 <sensing_loop+0x19c>)
 8012c00:	f7ff f82a 	bl	8011c58 <println>
		}
		lastDataPrint = millis();
 8012c04:	f7ff f8b6 	bl	8011d74 <millis>
 8012c08:	4602      	mov	r2, r0
 8012c0a:	4b0b      	ldr	r3, [pc, #44]	; (8012c38 <sensing_loop+0x184>)
 8012c0c:	601a      	str	r2, [r3, #0]
	}
}
 8012c0e:	bf00      	nop
 8012c10:	3710      	adds	r7, #16
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bd80      	pop	{r7, pc}
 8012c16:	bf00      	nop
 8012c18:	20002834 	.word	0x20002834
 8012c1c:	200033e8 	.word	0x200033e8
 8012c20:	20004878 	.word	0x20004878
 8012c24:	20002a6a 	.word	0x20002a6a
 8012c28:	20003820 	.word	0x20003820
 8012c2c:	20002b40 	.word	0x20002b40
 8012c30:	20002b4c 	.word	0x20002b4c
 8012c34:	20002b50 	.word	0x20002b50
 8012c38:	20004474 	.word	0x20004474
 8012c3c:	0801a9ec 	.word	0x0801a9ec
 8012c40:	0801a614 	.word	0x0801a614
 8012c44:	0801a9f8 	.word	0x0801a9f8
 8012c48:	0801aa08 	.word	0x0801aa08
 8012c4c:	0801aa14 	.word	0x0801aa14
 8012c50:	0801aa20 	.word	0x0801aa20

08012c54 <setup>:
#include "Peripherials/motorTest.c"

uint32_t lastSave;

static void setup(void)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	af00      	add	r7, sp, #0
	// wait for USR button press
	while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET);
 8012c58:	bf00      	nop
 8012c5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012c5e:	4813      	ldr	r0, [pc, #76]	; (8012cac <setup+0x58>)
 8012c60:	f7f3 fb50 	bl	8006304 <HAL_GPIO_ReadPin>
 8012c64:	4603      	mov	r3, r0
 8012c66:	2b01      	cmp	r3, #1
 8012c68:	d0f7      	beq.n	8012c5a <setup+0x6>
	// begin the program
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8012c6a:	2201      	movs	r2, #1
 8012c6c:	2140      	movs	r1, #64	; 0x40
 8012c6e:	4810      	ldr	r0, [pc, #64]	; (8012cb0 <setup+0x5c>)
 8012c70:	f7f3 fb60 	bl	8006334 <HAL_GPIO_WritePin>
	println("Hello world!!");	HAL_Delay(500);
 8012c74:	480f      	ldr	r0, [pc, #60]	; (8012cb4 <setup+0x60>)
 8012c76:	f7fe ffef 	bl	8011c58 <println>
 8012c7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012c7e:	f7f2 fcdb 	bl	8005638 <HAL_Delay>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8012c82:	2200      	movs	r2, #0
 8012c84:	2140      	movs	r1, #64	; 0x40
 8012c86:	480a      	ldr	r0, [pc, #40]	; (8012cb0 <setup+0x5c>)
 8012c88:	f7f3 fb54 	bl	8006334 <HAL_GPIO_WritePin>


	if (sdTest_begin()) println("SD card is working!");
 8012c8c:	f7ff f8d2 	bl	8011e34 <sdTest_begin>
 8012c90:	4603      	mov	r3, r0
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d002      	beq.n	8012c9c <setup+0x48>
 8012c96:	4808      	ldr	r0, [pc, #32]	; (8012cb8 <setup+0x64>)
 8012c98:	f7fe ffde 	bl	8011c58 <println>
	log_new();
 8012c9c:	f7f2 f968 	bl	8004f70 <log_new>
	SD_init();
 8012ca0:	f7ee f9d2 	bl	8001048 <SD_init>

	//if (transmitter_begin()) println("Radio is working!");
	//if (receiver_begin()) println("Radio is working!");

	sensing_begin();
 8012ca4:	f7ff fe56 	bl	8012954 <sensing_begin>

}
 8012ca8:	bf00      	nop
 8012caa:	bd80      	pop	{r7, pc}
 8012cac:	40020000 	.word	0x40020000
 8012cb0:	40020800 	.word	0x40020800
 8012cb4:	0801aa44 	.word	0x0801aa44
 8012cb8:	0801aa54 	.word	0x0801aa54

08012cbc <loop>:

static void loop(void)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	af00      	add	r7, sp, #0
	if (millis() - lastSave >= 1000)
 8012cc0:	f7ff f858 	bl	8011d74 <millis>
 8012cc4:	4602      	mov	r2, r0
 8012cc6:	4b08      	ldr	r3, [pc, #32]	; (8012ce8 <loop+0x2c>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	1ad3      	subs	r3, r2, r3
 8012ccc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012cd0:	d306      	bcc.n	8012ce0 <loop+0x24>
	{
		log_save();
 8012cd2:	f7f2 fa27 	bl	8005124 <log_save>
		lastSave = millis();
 8012cd6:	f7ff f84d 	bl	8011d74 <millis>
 8012cda:	4602      	mov	r2, r0
 8012cdc:	4b02      	ldr	r3, [pc, #8]	; (8012ce8 <loop+0x2c>)
 8012cde:	601a      	str	r2, [r3, #0]
	}

	sensing_loop();
 8012ce0:	f7ff fee8 	bl	8012ab4 <sensing_loop>

}
 8012ce4:	bf00      	nop
 8012ce6:	bd80      	pop	{r7, pc}
 8012ce8:	2000487c 	.word	0x2000487c

08012cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8012cf0:	f7f2 fc30 	bl	8005554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8012cf4:	f000 f862 	bl	8012dbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8012cf8:	f000 fb30 	bl	801335c <MX_GPIO_Init>
  MX_DMA_Init();
 8012cfc:	f000 fb06 	bl	801330c <MX_DMA_Init>
  MX_I2C1_Init();
 8012d00:	f000 f8de 	bl	8012ec0 <MX_I2C1_Init>
  MX_RTC_Init();
 8012d04:	f000 f90a 	bl	8012f1c <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8012d08:	f000 f92e 	bl	8012f68 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8012d0c:	f000 f94c 	bl	8012fa8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8012d10:	f000 f980 	bl	8013014 <MX_TIM2_Init>
  MX_TIM3_Init();
 8012d14:	f000 f9cc 	bl	80130b0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8012d18:	f000 fa4c 	bl	80131b4 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8012d1c:	f000 facc 	bl	80132b8 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8012d20:	f7fe ff48 	bl	8011bb4 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8012d24:	f001 f9be 	bl	80140a4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	// Start millisecond timer
	HAL_TIM_Base_Start(&htim2);
 8012d28:	4820      	ldr	r0, [pc, #128]	; (8012dac <main+0xc0>)
 8012d2a:	f7f7 fe31 	bl	800a990 <HAL_TIM_Base_Start>

	// Setup pins
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8012d2e:	2200      	movs	r2, #0
 8012d30:	2180      	movs	r1, #128	; 0x80
 8012d32:	481f      	ldr	r0, [pc, #124]	; (8012db0 <main+0xc4>)
 8012d34:	f7f3 fafe 	bl	8006334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8012d38:	2200      	movs	r2, #0
 8012d3a:	2140      	movs	r1, #64	; 0x40
 8012d3c:	481c      	ldr	r0, [pc, #112]	; (8012db0 <main+0xc4>)
 8012d3e:	f7f3 faf9 	bl	8006334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8012d42:	2200      	movs	r2, #0
 8012d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012d48:	481a      	ldr	r0, [pc, #104]	; (8012db4 <main+0xc8>)
 8012d4a:	f7f3 faf3 	bl	8006334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8012d4e:	2200      	movs	r2, #0
 8012d50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012d54:	4817      	ldr	r0, [pc, #92]	; (8012db4 <main+0xc8>)
 8012d56:	f7f3 faed 	bl	8006334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	2101      	movs	r1, #1
 8012d5e:	4816      	ldr	r0, [pc, #88]	; (8012db8 <main+0xcc>)
 8012d60:	f7f3 fae8 	bl	8006334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 8012d64:	2200      	movs	r2, #0
 8012d66:	2104      	movs	r1, #4
 8012d68:	4813      	ldr	r0, [pc, #76]	; (8012db8 <main+0xcc>)
 8012d6a:	f7f3 fae3 	bl	8006334 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, GPIO_PIN_RESET);
 8012d6e:	2200      	movs	r2, #0
 8012d70:	2101      	movs	r1, #1
 8012d72:	480f      	ldr	r0, [pc, #60]	; (8012db0 <main+0xc4>)
 8012d74:	f7f3 fade 	bl	8006334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, GPIO_PIN_RESET);
 8012d78:	2200      	movs	r2, #0
 8012d7a:	2104      	movs	r1, #4
 8012d7c:	480c      	ldr	r0, [pc, #48]	; (8012db0 <main+0xc4>)
 8012d7e:	f7f3 fad9 	bl	8006334 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P3_GPIO_Port, P3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P4_GPIO_Port, P4_Pin, GPIO_PIN_RESET);
 8012d82:	2200      	movs	r2, #0
 8012d84:	2102      	movs	r1, #2
 8012d86:	480a      	ldr	r0, [pc, #40]	; (8012db0 <main+0xc4>)
 8012d88:	f7f3 fad4 	bl	8006334 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P5_GPIO_Port, P5_Pin, GPIO_PIN_SET);
 8012d8c:	2201      	movs	r2, #1
 8012d8e:	2108      	movs	r1, #8
 8012d90:	4807      	ldr	r0, [pc, #28]	; (8012db0 <main+0xc4>)
 8012d92:	f7f3 facf 	bl	8006334 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P6_GPIO_Port, P6_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 8012d96:	2200      	movs	r2, #0
 8012d98:	2110      	movs	r1, #16
 8012d9a:	4807      	ldr	r0, [pc, #28]	; (8012db8 <main+0xcc>)
 8012d9c:	f7f3 faca 	bl	8006334 <HAL_GPIO_WritePin>

	// Execute code
	setup();
 8012da0:	f7ff ff58 	bl	8012c54 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Execute code
	  	loop();
 8012da4:	f7ff ff8a 	bl	8012cbc <loop>
 8012da8:	e7fc      	b.n	8012da4 <main+0xb8>
 8012daa:	bf00      	nop
 8012dac:	20006bc0 	.word	0x20006bc0
 8012db0:	40020800 	.word	0x40020800
 8012db4:	40020400 	.word	0x40020400
 8012db8:	40020000 	.word	0x40020000

08012dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b098      	sub	sp, #96	; 0x60
 8012dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012dc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012dc6:	2230      	movs	r2, #48	; 0x30
 8012dc8:	2100      	movs	r1, #0
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f001 ff0d 	bl	8014bea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012dd0:	f107 031c 	add.w	r3, r7, #28
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	601a      	str	r2, [r3, #0]
 8012dd8:	605a      	str	r2, [r3, #4]
 8012dda:	609a      	str	r2, [r3, #8]
 8012ddc:	60da      	str	r2, [r3, #12]
 8012dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012de0:	f107 030c 	add.w	r3, r7, #12
 8012de4:	2200      	movs	r2, #0
 8012de6:	601a      	str	r2, [r3, #0]
 8012de8:	605a      	str	r2, [r3, #4]
 8012dea:	609a      	str	r2, [r3, #8]
 8012dec:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8012dee:	2300      	movs	r3, #0
 8012df0:	60bb      	str	r3, [r7, #8]
 8012df2:	4b31      	ldr	r3, [pc, #196]	; (8012eb8 <SystemClock_Config+0xfc>)
 8012df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012df6:	4a30      	ldr	r2, [pc, #192]	; (8012eb8 <SystemClock_Config+0xfc>)
 8012df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8012dfe:	4b2e      	ldr	r3, [pc, #184]	; (8012eb8 <SystemClock_Config+0xfc>)
 8012e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012e06:	60bb      	str	r3, [r7, #8]
 8012e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	607b      	str	r3, [r7, #4]
 8012e0e:	4b2b      	ldr	r3, [pc, #172]	; (8012ebc <SystemClock_Config+0x100>)
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	4a2a      	ldr	r2, [pc, #168]	; (8012ebc <SystemClock_Config+0x100>)
 8012e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012e18:	6013      	str	r3, [r2, #0]
 8012e1a:	4b28      	ldr	r3, [pc, #160]	; (8012ebc <SystemClock_Config+0x100>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012e22:	607b      	str	r3, [r7, #4]
 8012e24:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8012e26:	2305      	movs	r3, #5
 8012e28:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8012e2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012e2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8012e30:	2301      	movs	r3, #1
 8012e32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8012e34:	2302      	movs	r3, #2
 8012e36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8012e38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8012e3e:	2306      	movs	r3, #6
 8012e40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8012e42:	23a8      	movs	r3, #168	; 0xa8
 8012e44:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8012e46:	2302      	movs	r3, #2
 8012e48:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8012e4a:	2307      	movs	r3, #7
 8012e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012e4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7f5 fb92 	bl	800857c <HAL_RCC_OscConfig>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d001      	beq.n	8012e62 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8012e5e:	f000 fb79 	bl	8013554 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012e62:	230f      	movs	r3, #15
 8012e64:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8012e66:	2302      	movs	r3, #2
 8012e68:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8012e6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8012e72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8012e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e78:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8012e7a:	f107 031c 	add.w	r3, r7, #28
 8012e7e:	2105      	movs	r1, #5
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7f5 fdbd 	bl	8008a00 <HAL_RCC_ClockConfig>
 8012e86:	4603      	mov	r3, r0
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d001      	beq.n	8012e90 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8012e8c:	f000 fb62 	bl	8013554 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8012e90:	2302      	movs	r3, #2
 8012e92:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8012e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e98:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012e9a:	f107 030c 	add.w	r3, r7, #12
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f7f5 ff76 	bl	8008d90 <HAL_RCCEx_PeriphCLKConfig>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d001      	beq.n	8012eae <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8012eaa:	f000 fb53 	bl	8013554 <Error_Handler>
  }
}
 8012eae:	bf00      	nop
 8012eb0:	3760      	adds	r7, #96	; 0x60
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	40023800 	.word	0x40023800
 8012ebc:	40007000 	.word	0x40007000

08012ec0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8012ec4:	4b12      	ldr	r3, [pc, #72]	; (8012f10 <MX_I2C1_Init+0x50>)
 8012ec6:	4a13      	ldr	r2, [pc, #76]	; (8012f14 <MX_I2C1_Init+0x54>)
 8012ec8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8012eca:	4b11      	ldr	r3, [pc, #68]	; (8012f10 <MX_I2C1_Init+0x50>)
 8012ecc:	4a12      	ldr	r2, [pc, #72]	; (8012f18 <MX_I2C1_Init+0x58>)
 8012ece:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8012ed0:	4b0f      	ldr	r3, [pc, #60]	; (8012f10 <MX_I2C1_Init+0x50>)
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8012ed6:	4b0e      	ldr	r3, [pc, #56]	; (8012f10 <MX_I2C1_Init+0x50>)
 8012ed8:	2200      	movs	r2, #0
 8012eda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012edc:	4b0c      	ldr	r3, [pc, #48]	; (8012f10 <MX_I2C1_Init+0x50>)
 8012ede:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012ee2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012ee4:	4b0a      	ldr	r3, [pc, #40]	; (8012f10 <MX_I2C1_Init+0x50>)
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8012eea:	4b09      	ldr	r3, [pc, #36]	; (8012f10 <MX_I2C1_Init+0x50>)
 8012eec:	2200      	movs	r2, #0
 8012eee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012ef0:	4b07      	ldr	r3, [pc, #28]	; (8012f10 <MX_I2C1_Init+0x50>)
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012ef6:	4b06      	ldr	r3, [pc, #24]	; (8012f10 <MX_I2C1_Init+0x50>)
 8012ef8:	2200      	movs	r2, #0
 8012efa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8012efc:	4804      	ldr	r0, [pc, #16]	; (8012f10 <MX_I2C1_Init+0x50>)
 8012efe:	f7f3 fa33 	bl	8006368 <HAL_I2C_Init>
 8012f02:	4603      	mov	r3, r0
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d001      	beq.n	8012f0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8012f08:	f000 fb24 	bl	8013554 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8012f0c:	bf00      	nop
 8012f0e:	bd80      	pop	{r7, pc}
 8012f10:	20006990 	.word	0x20006990
 8012f14:	40005400 	.word	0x40005400
 8012f18:	00061a80 	.word	0x00061a80

08012f1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8012f20:	4b0f      	ldr	r3, [pc, #60]	; (8012f60 <MX_RTC_Init+0x44>)
 8012f22:	4a10      	ldr	r2, [pc, #64]	; (8012f64 <MX_RTC_Init+0x48>)
 8012f24:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8012f26:	4b0e      	ldr	r3, [pc, #56]	; (8012f60 <MX_RTC_Init+0x44>)
 8012f28:	2200      	movs	r2, #0
 8012f2a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8012f2c:	4b0c      	ldr	r3, [pc, #48]	; (8012f60 <MX_RTC_Init+0x44>)
 8012f2e:	227f      	movs	r2, #127	; 0x7f
 8012f30:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8012f32:	4b0b      	ldr	r3, [pc, #44]	; (8012f60 <MX_RTC_Init+0x44>)
 8012f34:	22ff      	movs	r2, #255	; 0xff
 8012f36:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8012f38:	4b09      	ldr	r3, [pc, #36]	; (8012f60 <MX_RTC_Init+0x44>)
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8012f3e:	4b08      	ldr	r3, [pc, #32]	; (8012f60 <MX_RTC_Init+0x44>)
 8012f40:	2200      	movs	r2, #0
 8012f42:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8012f44:	4b06      	ldr	r3, [pc, #24]	; (8012f60 <MX_RTC_Init+0x44>)
 8012f46:	2200      	movs	r2, #0
 8012f48:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8012f4a:	4805      	ldr	r0, [pc, #20]	; (8012f60 <MX_RTC_Init+0x44>)
 8012f4c:	f7f6 f802 	bl	8008f54 <HAL_RTC_Init>
 8012f50:	4603      	mov	r3, r0
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d001      	beq.n	8012f5a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8012f56:	f000 fafd 	bl	8013554 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8012f5a:	bf00      	nop
 8012f5c:	bd80      	pop	{r7, pc}
 8012f5e:	bf00      	nop
 8012f60:	20006a64 	.word	0x20006a64
 8012f64:	40002800 	.word	0x40002800

08012f68 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8012f68:	b480      	push	{r7}
 8012f6a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8012f6c:	4b0c      	ldr	r3, [pc, #48]	; (8012fa0 <MX_SDIO_SD_Init+0x38>)
 8012f6e:	4a0d      	ldr	r2, [pc, #52]	; (8012fa4 <MX_SDIO_SD_Init+0x3c>)
 8012f70:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8012f72:	4b0b      	ldr	r3, [pc, #44]	; (8012fa0 <MX_SDIO_SD_Init+0x38>)
 8012f74:	2200      	movs	r2, #0
 8012f76:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8012f78:	4b09      	ldr	r3, [pc, #36]	; (8012fa0 <MX_SDIO_SD_Init+0x38>)
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8012f7e:	4b08      	ldr	r3, [pc, #32]	; (8012fa0 <MX_SDIO_SD_Init+0x38>)
 8012f80:	2200      	movs	r2, #0
 8012f82:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8012f84:	4b06      	ldr	r3, [pc, #24]	; (8012fa0 <MX_SDIO_SD_Init+0x38>)
 8012f86:	2200      	movs	r2, #0
 8012f88:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8012f8a:	4b05      	ldr	r3, [pc, #20]	; (8012fa0 <MX_SDIO_SD_Init+0x38>)
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8012f90:	4b03      	ldr	r3, [pc, #12]	; (8012fa0 <MX_SDIO_SD_Init+0x38>)
 8012f92:	2200      	movs	r2, #0
 8012f94:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8012f96:	bf00      	nop
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9e:	4770      	bx	lr
 8012fa0:	20006ae4 	.word	0x20006ae4
 8012fa4:	40012c00 	.word	0x40012c00

08012fa8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8012fac:	4b17      	ldr	r3, [pc, #92]	; (801300c <MX_SPI1_Init+0x64>)
 8012fae:	4a18      	ldr	r2, [pc, #96]	; (8013010 <MX_SPI1_Init+0x68>)
 8012fb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8012fb2:	4b16      	ldr	r3, [pc, #88]	; (801300c <MX_SPI1_Init+0x64>)
 8012fb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8012fb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8012fba:	4b14      	ldr	r3, [pc, #80]	; (801300c <MX_SPI1_Init+0x64>)
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8012fc0:	4b12      	ldr	r3, [pc, #72]	; (801300c <MX_SPI1_Init+0x64>)
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012fc6:	4b11      	ldr	r3, [pc, #68]	; (801300c <MX_SPI1_Init+0x64>)
 8012fc8:	2200      	movs	r2, #0
 8012fca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8012fcc:	4b0f      	ldr	r3, [pc, #60]	; (801300c <MX_SPI1_Init+0x64>)
 8012fce:	2200      	movs	r2, #0
 8012fd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8012fd2:	4b0e      	ldr	r3, [pc, #56]	; (801300c <MX_SPI1_Init+0x64>)
 8012fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012fd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8012fda:	4b0c      	ldr	r3, [pc, #48]	; (801300c <MX_SPI1_Init+0x64>)
 8012fdc:	2218      	movs	r2, #24
 8012fde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012fe0:	4b0a      	ldr	r3, [pc, #40]	; (801300c <MX_SPI1_Init+0x64>)
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012fe6:	4b09      	ldr	r3, [pc, #36]	; (801300c <MX_SPI1_Init+0x64>)
 8012fe8:	2200      	movs	r2, #0
 8012fea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012fec:	4b07      	ldr	r3, [pc, #28]	; (801300c <MX_SPI1_Init+0x64>)
 8012fee:	2200      	movs	r2, #0
 8012ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8012ff2:	4b06      	ldr	r3, [pc, #24]	; (801300c <MX_SPI1_Init+0x64>)
 8012ff4:	220a      	movs	r2, #10
 8012ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8012ff8:	4804      	ldr	r0, [pc, #16]	; (801300c <MX_SPI1_Init+0x64>)
 8012ffa:	f7f7 fc3a 	bl	800a872 <HAL_SPI_Init>
 8012ffe:	4603      	mov	r3, r0
 8013000:	2b00      	cmp	r3, #0
 8013002:	d001      	beq.n	8013008 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8013004:	f000 faa6 	bl	8013554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8013008:	bf00      	nop
 801300a:	bd80      	pop	{r7, pc}
 801300c:	20006b68 	.word	0x20006b68
 8013010:	40013000 	.word	0x40013000

08013014 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b086      	sub	sp, #24
 8013018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801301a:	f107 0308 	add.w	r3, r7, #8
 801301e:	2200      	movs	r2, #0
 8013020:	601a      	str	r2, [r3, #0]
 8013022:	605a      	str	r2, [r3, #4]
 8013024:	609a      	str	r2, [r3, #8]
 8013026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013028:	463b      	mov	r3, r7
 801302a:	2200      	movs	r2, #0
 801302c:	601a      	str	r2, [r3, #0]
 801302e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8013030:	4b1d      	ldr	r3, [pc, #116]	; (80130a8 <MX_TIM2_Init+0x94>)
 8013032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013036:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8013038:	4b1b      	ldr	r3, [pc, #108]	; (80130a8 <MX_TIM2_Init+0x94>)
 801303a:	2253      	movs	r2, #83	; 0x53
 801303c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801303e:	4b1a      	ldr	r3, [pc, #104]	; (80130a8 <MX_TIM2_Init+0x94>)
 8013040:	2200      	movs	r2, #0
 8013042:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 8013044:	4b18      	ldr	r3, [pc, #96]	; (80130a8 <MX_TIM2_Init+0x94>)
 8013046:	4a19      	ldr	r2, [pc, #100]	; (80130ac <MX_TIM2_Init+0x98>)
 8013048:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801304a:	4b17      	ldr	r3, [pc, #92]	; (80130a8 <MX_TIM2_Init+0x94>)
 801304c:	2200      	movs	r2, #0
 801304e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013050:	4b15      	ldr	r3, [pc, #84]	; (80130a8 <MX_TIM2_Init+0x94>)
 8013052:	2200      	movs	r2, #0
 8013054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8013056:	4814      	ldr	r0, [pc, #80]	; (80130a8 <MX_TIM2_Init+0x94>)
 8013058:	f7f7 fc6f 	bl	800a93a <HAL_TIM_Base_Init>
 801305c:	4603      	mov	r3, r0
 801305e:	2b00      	cmp	r3, #0
 8013060:	d001      	beq.n	8013066 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8013062:	f000 fa77 	bl	8013554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801306a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801306c:	f107 0308 	add.w	r3, r7, #8
 8013070:	4619      	mov	r1, r3
 8013072:	480d      	ldr	r0, [pc, #52]	; (80130a8 <MX_TIM2_Init+0x94>)
 8013074:	f7f7 fdac 	bl	800abd0 <HAL_TIM_ConfigClockSource>
 8013078:	4603      	mov	r3, r0
 801307a:	2b00      	cmp	r3, #0
 801307c:	d001      	beq.n	8013082 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 801307e:	f000 fa69 	bl	8013554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013082:	2300      	movs	r3, #0
 8013084:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013086:	2300      	movs	r3, #0
 8013088:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801308a:	463b      	mov	r3, r7
 801308c:	4619      	mov	r1, r3
 801308e:	4806      	ldr	r0, [pc, #24]	; (80130a8 <MX_TIM2_Init+0x94>)
 8013090:	f7f8 f940 	bl	800b314 <HAL_TIMEx_MasterConfigSynchronization>
 8013094:	4603      	mov	r3, r0
 8013096:	2b00      	cmp	r3, #0
 8013098:	d001      	beq.n	801309e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 801309a:	f000 fa5b 	bl	8013554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 801309e:	bf00      	nop
 80130a0:	3718      	adds	r7, #24
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}
 80130a6:	bf00      	nop
 80130a8:	20006bc0 	.word	0x20006bc0
 80130ac:	fa56ea00 	.word	0xfa56ea00

080130b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b08e      	sub	sp, #56	; 0x38
 80130b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80130b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80130ba:	2200      	movs	r2, #0
 80130bc:	601a      	str	r2, [r3, #0]
 80130be:	605a      	str	r2, [r3, #4]
 80130c0:	609a      	str	r2, [r3, #8]
 80130c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80130c4:	f107 0320 	add.w	r3, r7, #32
 80130c8:	2200      	movs	r2, #0
 80130ca:	601a      	str	r2, [r3, #0]
 80130cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80130ce:	1d3b      	adds	r3, r7, #4
 80130d0:	2200      	movs	r2, #0
 80130d2:	601a      	str	r2, [r3, #0]
 80130d4:	605a      	str	r2, [r3, #4]
 80130d6:	609a      	str	r2, [r3, #8]
 80130d8:	60da      	str	r2, [r3, #12]
 80130da:	611a      	str	r2, [r3, #16]
 80130dc:	615a      	str	r2, [r3, #20]
 80130de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80130e0:	4b32      	ldr	r3, [pc, #200]	; (80131ac <MX_TIM3_Init+0xfc>)
 80130e2:	4a33      	ldr	r2, [pc, #204]	; (80131b0 <MX_TIM3_Init+0x100>)
 80130e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 80130e6:	4b31      	ldr	r3, [pc, #196]	; (80131ac <MX_TIM3_Init+0xfc>)
 80130e8:	22a7      	movs	r2, #167	; 0xa7
 80130ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80130ec:	4b2f      	ldr	r3, [pc, #188]	; (80131ac <MX_TIM3_Init+0xfc>)
 80130ee:	2200      	movs	r2, #0
 80130f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80130f2:	4b2e      	ldr	r3, [pc, #184]	; (80131ac <MX_TIM3_Init+0xfc>)
 80130f4:	f242 7210 	movw	r2, #10000	; 0x2710
 80130f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80130fa:	4b2c      	ldr	r3, [pc, #176]	; (80131ac <MX_TIM3_Init+0xfc>)
 80130fc:	2200      	movs	r2, #0
 80130fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013100:	4b2a      	ldr	r3, [pc, #168]	; (80131ac <MX_TIM3_Init+0xfc>)
 8013102:	2200      	movs	r2, #0
 8013104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8013106:	4829      	ldr	r0, [pc, #164]	; (80131ac <MX_TIM3_Init+0xfc>)
 8013108:	f7f7 fc17 	bl	800a93a <HAL_TIM_Base_Init>
 801310c:	4603      	mov	r3, r0
 801310e:	2b00      	cmp	r3, #0
 8013110:	d001      	beq.n	8013116 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8013112:	f000 fa1f 	bl	8013554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801311a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801311c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013120:	4619      	mov	r1, r3
 8013122:	4822      	ldr	r0, [pc, #136]	; (80131ac <MX_TIM3_Init+0xfc>)
 8013124:	f7f7 fd54 	bl	800abd0 <HAL_TIM_ConfigClockSource>
 8013128:	4603      	mov	r3, r0
 801312a:	2b00      	cmp	r3, #0
 801312c:	d001      	beq.n	8013132 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 801312e:	f000 fa11 	bl	8013554 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8013132:	481e      	ldr	r0, [pc, #120]	; (80131ac <MX_TIM3_Init+0xfc>)
 8013134:	f7f7 fc50 	bl	800a9d8 <HAL_TIM_PWM_Init>
 8013138:	4603      	mov	r3, r0
 801313a:	2b00      	cmp	r3, #0
 801313c:	d001      	beq.n	8013142 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 801313e:	f000 fa09 	bl	8013554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013142:	2300      	movs	r3, #0
 8013144:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013146:	2300      	movs	r3, #0
 8013148:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801314a:	f107 0320 	add.w	r3, r7, #32
 801314e:	4619      	mov	r1, r3
 8013150:	4816      	ldr	r0, [pc, #88]	; (80131ac <MX_TIM3_Init+0xfc>)
 8013152:	f7f8 f8df 	bl	800b314 <HAL_TIMEx_MasterConfigSynchronization>
 8013156:	4603      	mov	r3, r0
 8013158:	2b00      	cmp	r3, #0
 801315a:	d001      	beq.n	8013160 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 801315c:	f000 f9fa 	bl	8013554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013160:	2360      	movs	r3, #96	; 0x60
 8013162:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8013164:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013168:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801316a:	2300      	movs	r3, #0
 801316c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801316e:	2300      	movs	r3, #0
 8013170:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013172:	1d3b      	adds	r3, r7, #4
 8013174:	2208      	movs	r2, #8
 8013176:	4619      	mov	r1, r3
 8013178:	480c      	ldr	r0, [pc, #48]	; (80131ac <MX_TIM3_Init+0xfc>)
 801317a:	f7f7 fc63 	bl	800aa44 <HAL_TIM_PWM_ConfigChannel>
 801317e:	4603      	mov	r3, r0
 8013180:	2b00      	cmp	r3, #0
 8013182:	d001      	beq.n	8013188 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8013184:	f000 f9e6 	bl	8013554 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8013188:	1d3b      	adds	r3, r7, #4
 801318a:	220c      	movs	r2, #12
 801318c:	4619      	mov	r1, r3
 801318e:	4807      	ldr	r0, [pc, #28]	; (80131ac <MX_TIM3_Init+0xfc>)
 8013190:	f7f7 fc58 	bl	800aa44 <HAL_TIM_PWM_ConfigChannel>
 8013194:	4603      	mov	r3, r0
 8013196:	2b00      	cmp	r3, #0
 8013198:	d001      	beq.n	801319e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 801319a:	f000 f9db 	bl	8013554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 801319e:	4803      	ldr	r0, [pc, #12]	; (80131ac <MX_TIM3_Init+0xfc>)
 80131a0:	f000 fe1e 	bl	8013de0 <HAL_TIM_MspPostInit>

}
 80131a4:	bf00      	nop
 80131a6:	3738      	adds	r7, #56	; 0x38
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}
 80131ac:	20006a24 	.word	0x20006a24
 80131b0:	40000400 	.word	0x40000400

080131b4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b08e      	sub	sp, #56	; 0x38
 80131b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80131ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80131be:	2200      	movs	r2, #0
 80131c0:	601a      	str	r2, [r3, #0]
 80131c2:	605a      	str	r2, [r3, #4]
 80131c4:	609a      	str	r2, [r3, #8]
 80131c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80131c8:	f107 0320 	add.w	r3, r7, #32
 80131cc:	2200      	movs	r2, #0
 80131ce:	601a      	str	r2, [r3, #0]
 80131d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80131d2:	1d3b      	adds	r3, r7, #4
 80131d4:	2200      	movs	r2, #0
 80131d6:	601a      	str	r2, [r3, #0]
 80131d8:	605a      	str	r2, [r3, #4]
 80131da:	609a      	str	r2, [r3, #8]
 80131dc:	60da      	str	r2, [r3, #12]
 80131de:	611a      	str	r2, [r3, #16]
 80131e0:	615a      	str	r2, [r3, #20]
 80131e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80131e4:	4b32      	ldr	r3, [pc, #200]	; (80132b0 <MX_TIM5_Init+0xfc>)
 80131e6:	4a33      	ldr	r2, [pc, #204]	; (80132b4 <MX_TIM5_Init+0x100>)
 80131e8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80131ea:	4b31      	ldr	r3, [pc, #196]	; (80132b0 <MX_TIM5_Init+0xfc>)
 80131ec:	2200      	movs	r2, #0
 80131ee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80131f0:	4b2f      	ldr	r3, [pc, #188]	; (80132b0 <MX_TIM5_Init+0xfc>)
 80131f2:	2240      	movs	r2, #64	; 0x40
 80131f4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 80131f6:	4b2e      	ldr	r3, [pc, #184]	; (80132b0 <MX_TIM5_Init+0xfc>)
 80131f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80131fc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80131fe:	4b2c      	ldr	r3, [pc, #176]	; (80132b0 <MX_TIM5_Init+0xfc>)
 8013200:	2200      	movs	r2, #0
 8013202:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013204:	4b2a      	ldr	r3, [pc, #168]	; (80132b0 <MX_TIM5_Init+0xfc>)
 8013206:	2200      	movs	r2, #0
 8013208:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 801320a:	4829      	ldr	r0, [pc, #164]	; (80132b0 <MX_TIM5_Init+0xfc>)
 801320c:	f7f7 fb95 	bl	800a93a <HAL_TIM_Base_Init>
 8013210:	4603      	mov	r3, r0
 8013212:	2b00      	cmp	r3, #0
 8013214:	d001      	beq.n	801321a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8013216:	f000 f99d 	bl	8013554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801321a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801321e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8013220:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013224:	4619      	mov	r1, r3
 8013226:	4822      	ldr	r0, [pc, #136]	; (80132b0 <MX_TIM5_Init+0xfc>)
 8013228:	f7f7 fcd2 	bl	800abd0 <HAL_TIM_ConfigClockSource>
 801322c:	4603      	mov	r3, r0
 801322e:	2b00      	cmp	r3, #0
 8013230:	d001      	beq.n	8013236 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8013232:	f000 f98f 	bl	8013554 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8013236:	481e      	ldr	r0, [pc, #120]	; (80132b0 <MX_TIM5_Init+0xfc>)
 8013238:	f7f7 fbce 	bl	800a9d8 <HAL_TIM_PWM_Init>
 801323c:	4603      	mov	r3, r0
 801323e:	2b00      	cmp	r3, #0
 8013240:	d001      	beq.n	8013246 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8013242:	f000 f987 	bl	8013554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013246:	2300      	movs	r3, #0
 8013248:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801324a:	2300      	movs	r3, #0
 801324c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801324e:	f107 0320 	add.w	r3, r7, #32
 8013252:	4619      	mov	r1, r3
 8013254:	4816      	ldr	r0, [pc, #88]	; (80132b0 <MX_TIM5_Init+0xfc>)
 8013256:	f7f8 f85d 	bl	800b314 <HAL_TIMEx_MasterConfigSynchronization>
 801325a:	4603      	mov	r3, r0
 801325c:	2b00      	cmp	r3, #0
 801325e:	d001      	beq.n	8013264 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8013260:	f000 f978 	bl	8013554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8013264:	2370      	movs	r3, #112	; 0x70
 8013266:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8013268:	2364      	movs	r3, #100	; 0x64
 801326a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801326c:	2300      	movs	r3, #0
 801326e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013270:	2300      	movs	r3, #0
 8013272:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8013274:	1d3b      	adds	r3, r7, #4
 8013276:	2204      	movs	r2, #4
 8013278:	4619      	mov	r1, r3
 801327a:	480d      	ldr	r0, [pc, #52]	; (80132b0 <MX_TIM5_Init+0xfc>)
 801327c:	f7f7 fbe2 	bl	800aa44 <HAL_TIM_PWM_ConfigChannel>
 8013280:	4603      	mov	r3, r0
 8013282:	2b00      	cmp	r3, #0
 8013284:	d001      	beq.n	801328a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8013286:	f000 f965 	bl	8013554 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 801328a:	1d3b      	adds	r3, r7, #4
 801328c:	220c      	movs	r2, #12
 801328e:	4619      	mov	r1, r3
 8013290:	4807      	ldr	r0, [pc, #28]	; (80132b0 <MX_TIM5_Init+0xfc>)
 8013292:	f7f7 fbd7 	bl	800aa44 <HAL_TIM_PWM_ConfigChannel>
 8013296:	4603      	mov	r3, r0
 8013298:	2b00      	cmp	r3, #0
 801329a:	d001      	beq.n	80132a0 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 801329c:	f000 f95a 	bl	8013554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80132a0:	4803      	ldr	r0, [pc, #12]	; (80132b0 <MX_TIM5_Init+0xfc>)
 80132a2:	f000 fd9d 	bl	8013de0 <HAL_TIM_MspPostInit>

}
 80132a6:	bf00      	nop
 80132a8:	3738      	adds	r7, #56	; 0x38
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}
 80132ae:	bf00      	nop
 80132b0:	200069e4 	.word	0x200069e4
 80132b4:	40000c00 	.word	0x40000c00

080132b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80132bc:	4b11      	ldr	r3, [pc, #68]	; (8013304 <MX_USART3_UART_Init+0x4c>)
 80132be:	4a12      	ldr	r2, [pc, #72]	; (8013308 <MX_USART3_UART_Init+0x50>)
 80132c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80132c2:	4b10      	ldr	r3, [pc, #64]	; (8013304 <MX_USART3_UART_Init+0x4c>)
 80132c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80132c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80132ca:	4b0e      	ldr	r3, [pc, #56]	; (8013304 <MX_USART3_UART_Init+0x4c>)
 80132cc:	2200      	movs	r2, #0
 80132ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80132d0:	4b0c      	ldr	r3, [pc, #48]	; (8013304 <MX_USART3_UART_Init+0x4c>)
 80132d2:	2200      	movs	r2, #0
 80132d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80132d6:	4b0b      	ldr	r3, [pc, #44]	; (8013304 <MX_USART3_UART_Init+0x4c>)
 80132d8:	2200      	movs	r2, #0
 80132da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80132dc:	4b09      	ldr	r3, [pc, #36]	; (8013304 <MX_USART3_UART_Init+0x4c>)
 80132de:	220c      	movs	r2, #12
 80132e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80132e2:	4b08      	ldr	r3, [pc, #32]	; (8013304 <MX_USART3_UART_Init+0x4c>)
 80132e4:	2200      	movs	r2, #0
 80132e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80132e8:	4b06      	ldr	r3, [pc, #24]	; (8013304 <MX_USART3_UART_Init+0x4c>)
 80132ea:	2200      	movs	r2, #0
 80132ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80132ee:	4805      	ldr	r0, [pc, #20]	; (8013304 <MX_USART3_UART_Init+0x4c>)
 80132f0:	f7f8 f855 	bl	800b39e <HAL_UART_Init>
 80132f4:	4603      	mov	r3, r0
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d001      	beq.n	80132fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80132fa:	f000 f92b 	bl	8013554 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80132fe:	bf00      	nop
 8013300:	bd80      	pop	{r7, pc}
 8013302:	bf00      	nop
 8013304:	20006950 	.word	0x20006950
 8013308:	40004800 	.word	0x40004800

0801330c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8013312:	2300      	movs	r3, #0
 8013314:	607b      	str	r3, [r7, #4]
 8013316:	4b10      	ldr	r3, [pc, #64]	; (8013358 <MX_DMA_Init+0x4c>)
 8013318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801331a:	4a0f      	ldr	r2, [pc, #60]	; (8013358 <MX_DMA_Init+0x4c>)
 801331c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013320:	6313      	str	r3, [r2, #48]	; 0x30
 8013322:	4b0d      	ldr	r3, [pc, #52]	; (8013358 <MX_DMA_Init+0x4c>)
 8013324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801332a:	607b      	str	r3, [r7, #4]
 801332c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 801332e:	2200      	movs	r2, #0
 8013330:	2100      	movs	r1, #0
 8013332:	203b      	movs	r0, #59	; 0x3b
 8013334:	f7f2 fa7d 	bl	8005832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8013338:	203b      	movs	r0, #59	; 0x3b
 801333a:	f7f2 fa96 	bl	800586a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 801333e:	2200      	movs	r2, #0
 8013340:	2100      	movs	r1, #0
 8013342:	2045      	movs	r0, #69	; 0x45
 8013344:	f7f2 fa75 	bl	8005832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8013348:	2045      	movs	r0, #69	; 0x45
 801334a:	f7f2 fa8e 	bl	800586a <HAL_NVIC_EnableIRQ>

}
 801334e:	bf00      	nop
 8013350:	3708      	adds	r7, #8
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}
 8013356:	bf00      	nop
 8013358:	40023800 	.word	0x40023800

0801335c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b08a      	sub	sp, #40	; 0x28
 8013360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013362:	f107 0314 	add.w	r3, r7, #20
 8013366:	2200      	movs	r2, #0
 8013368:	601a      	str	r2, [r3, #0]
 801336a:	605a      	str	r2, [r3, #4]
 801336c:	609a      	str	r2, [r3, #8]
 801336e:	60da      	str	r2, [r3, #12]
 8013370:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013372:	2300      	movs	r3, #0
 8013374:	613b      	str	r3, [r7, #16]
 8013376:	4b63      	ldr	r3, [pc, #396]	; (8013504 <MX_GPIO_Init+0x1a8>)
 8013378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801337a:	4a62      	ldr	r2, [pc, #392]	; (8013504 <MX_GPIO_Init+0x1a8>)
 801337c:	f043 0304 	orr.w	r3, r3, #4
 8013380:	6313      	str	r3, [r2, #48]	; 0x30
 8013382:	4b60      	ldr	r3, [pc, #384]	; (8013504 <MX_GPIO_Init+0x1a8>)
 8013384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013386:	f003 0304 	and.w	r3, r3, #4
 801338a:	613b      	str	r3, [r7, #16]
 801338c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801338e:	2300      	movs	r3, #0
 8013390:	60fb      	str	r3, [r7, #12]
 8013392:	4b5c      	ldr	r3, [pc, #368]	; (8013504 <MX_GPIO_Init+0x1a8>)
 8013394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013396:	4a5b      	ldr	r2, [pc, #364]	; (8013504 <MX_GPIO_Init+0x1a8>)
 8013398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801339c:	6313      	str	r3, [r2, #48]	; 0x30
 801339e:	4b59      	ldr	r3, [pc, #356]	; (8013504 <MX_GPIO_Init+0x1a8>)
 80133a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80133a6:	60fb      	str	r3, [r7, #12]
 80133a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80133aa:	2300      	movs	r3, #0
 80133ac:	60bb      	str	r3, [r7, #8]
 80133ae:	4b55      	ldr	r3, [pc, #340]	; (8013504 <MX_GPIO_Init+0x1a8>)
 80133b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133b2:	4a54      	ldr	r2, [pc, #336]	; (8013504 <MX_GPIO_Init+0x1a8>)
 80133b4:	f043 0301 	orr.w	r3, r3, #1
 80133b8:	6313      	str	r3, [r2, #48]	; 0x30
 80133ba:	4b52      	ldr	r3, [pc, #328]	; (8013504 <MX_GPIO_Init+0x1a8>)
 80133bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133be:	f003 0301 	and.w	r3, r3, #1
 80133c2:	60bb      	str	r3, [r7, #8]
 80133c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80133c6:	2300      	movs	r3, #0
 80133c8:	607b      	str	r3, [r7, #4]
 80133ca:	4b4e      	ldr	r3, [pc, #312]	; (8013504 <MX_GPIO_Init+0x1a8>)
 80133cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133ce:	4a4d      	ldr	r2, [pc, #308]	; (8013504 <MX_GPIO_Init+0x1a8>)
 80133d0:	f043 0302 	orr.w	r3, r3, #2
 80133d4:	6313      	str	r3, [r2, #48]	; 0x30
 80133d6:	4b4b      	ldr	r3, [pc, #300]	; (8013504 <MX_GPIO_Init+0x1a8>)
 80133d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133da:	f003 0302 	and.w	r3, r3, #2
 80133de:	607b      	str	r3, [r7, #4]
 80133e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80133e2:	2300      	movs	r3, #0
 80133e4:	603b      	str	r3, [r7, #0]
 80133e6:	4b47      	ldr	r3, [pc, #284]	; (8013504 <MX_GPIO_Init+0x1a8>)
 80133e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133ea:	4a46      	ldr	r2, [pc, #280]	; (8013504 <MX_GPIO_Init+0x1a8>)
 80133ec:	f043 0308 	orr.w	r3, r3, #8
 80133f0:	6313      	str	r3, [r2, #48]	; 0x30
 80133f2:	4b44      	ldr	r3, [pc, #272]	; (8013504 <MX_GPIO_Init+0x1a8>)
 80133f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133f6:	f003 0308 	and.w	r3, r3, #8
 80133fa:	603b      	str	r3, [r7, #0]
 80133fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 80133fe:	2200      	movs	r2, #0
 8013400:	21ef      	movs	r1, #239	; 0xef
 8013402:	4841      	ldr	r0, [pc, #260]	; (8013508 <MX_GPIO_Init+0x1ac>)
 8013404:	f7f2 ff96 	bl	8006334 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 8013408:	2200      	movs	r2, #0
 801340a:	2115      	movs	r1, #21
 801340c:	483f      	ldr	r0, [pc, #252]	; (801350c <MX_GPIO_Init+0x1b0>)
 801340e:	f7f2 ff91 	bl	8006334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 8013412:	2200      	movs	r2, #0
 8013414:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 8013418:	483d      	ldr	r0, [pc, #244]	; (8013510 <MX_GPIO_Init+0x1b4>)
 801341a:	f7f2 ff8b 	bl	8006334 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 801341e:	23cf      	movs	r3, #207	; 0xcf
 8013420:	617b      	str	r3, [r7, #20]
                          |LEDB_Pin|LEDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013422:	2301      	movs	r3, #1
 8013424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013426:	2300      	movs	r3, #0
 8013428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801342a:	2300      	movs	r3, #0
 801342c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801342e:	f107 0314 	add.w	r3, r7, #20
 8013432:	4619      	mov	r1, r3
 8013434:	4834      	ldr	r0, [pc, #208]	; (8013508 <MX_GPIO_Init+0x1ac>)
 8013436:	f7f2 fdcb 	bl	8005fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin;
 801343a:	2305      	movs	r3, #5
 801343c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801343e:	2301      	movs	r3, #1
 8013440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8013442:	2302      	movs	r3, #2
 8013444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013446:	2300      	movs	r3, #0
 8013448:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801344a:	f107 0314 	add.w	r3, r7, #20
 801344e:	4619      	mov	r1, r3
 8013450:	482e      	ldr	r0, [pc, #184]	; (801350c <MX_GPIO_Init+0x1b0>)
 8013452:	f7f2 fdbd 	bl	8005fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 8013456:	2310      	movs	r3, #16
 8013458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801345a:	2301      	movs	r3, #1
 801345c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801345e:	2300      	movs	r3, #0
 8013460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013462:	2300      	movs	r3, #0
 8013464:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 8013466:	f107 0314 	add.w	r3, r7, #20
 801346a:	4619      	mov	r1, r3
 801346c:	4827      	ldr	r0, [pc, #156]	; (801350c <MX_GPIO_Init+0x1b0>)
 801346e:	f7f2 fdaf 	bl	8005fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_DIO0_Pin LR_TIM_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin|LR_TIM_Pin;
 8013472:	23c0      	movs	r3, #192	; 0xc0
 8013474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8013476:	4b27      	ldr	r3, [pc, #156]	; (8013514 <MX_GPIO_Init+0x1b8>)
 8013478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801347a:	2300      	movs	r3, #0
 801347c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801347e:	f107 0314 	add.w	r3, r7, #20
 8013482:	4619      	mov	r1, r3
 8013484:	4821      	ldr	r0, [pc, #132]	; (801350c <MX_GPIO_Init+0x1b0>)
 8013486:	f7f2 fda3 	bl	8005fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_RESET_Pin */
  GPIO_InitStruct.Pin = LR_RESET_Pin;
 801348a:	2320      	movs	r3, #32
 801348c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801348e:	2301      	movs	r3, #1
 8013490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8013492:	2302      	movs	r3, #2
 8013494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013496:	2300      	movs	r3, #0
 8013498:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_RESET_GPIO_Port, &GPIO_InitStruct);
 801349a:	f107 0314 	add.w	r3, r7, #20
 801349e:	4619      	mov	r1, r3
 80134a0:	4819      	ldr	r0, [pc, #100]	; (8013508 <MX_GPIO_Init+0x1ac>)
 80134a2:	f7f2 fd95 	bl	8005fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 80134a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80134aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80134ac:	2301      	movs	r3, #1
 80134ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134b0:	2300      	movs	r3, #0
 80134b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80134b4:	2300      	movs	r3, #0
 80134b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80134b8:	f107 0314 	add.w	r3, r7, #20
 80134bc:	4619      	mov	r1, r3
 80134be:	4814      	ldr	r0, [pc, #80]	; (8013510 <MX_GPIO_Init+0x1b4>)
 80134c0:	f7f2 fd86 	bl	8005fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_SW_Pin BTN_USR_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin|BTN_USR_Pin;
 80134c4:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80134c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80134ca:	2300      	movs	r3, #0
 80134cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80134ce:	2301      	movs	r3, #1
 80134d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80134d2:	f107 0314 	add.w	r3, r7, #20
 80134d6:	4619      	mov	r1, r3
 80134d8:	480c      	ldr	r0, [pc, #48]	; (801350c <MX_GPIO_Init+0x1b0>)
 80134da:	f7f2 fd79 	bl	8005fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 80134de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80134e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80134e4:	2301      	movs	r3, #1
 80134e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80134e8:	2302      	movs	r3, #2
 80134ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80134ec:	2300      	movs	r3, #0
 80134ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 80134f0:	f107 0314 	add.w	r3, r7, #20
 80134f4:	4619      	mov	r1, r3
 80134f6:	4806      	ldr	r0, [pc, #24]	; (8013510 <MX_GPIO_Init+0x1b4>)
 80134f8:	f7f2 fd6a 	bl	8005fd0 <HAL_GPIO_Init>

}
 80134fc:	bf00      	nop
 80134fe:	3728      	adds	r7, #40	; 0x28
 8013500:	46bd      	mov	sp, r7
 8013502:	bd80      	pop	{r7, pc}
 8013504:	40023800 	.word	0x40023800
 8013508:	40020800 	.word	0x40020800
 801350c:	40020000 	.word	0x40020000
 8013510:	40020400 	.word	0x40020400
 8013514:	10110000 	.word	0x10110000

08013518 <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
 8013518:	b480      	push	{r7}
 801351a:	af00      	add	r7, sp, #0
 801351c:	4b02      	ldr	r3, [pc, #8]	; (8013528 <Get_I2C1_Instance+0x10>)
 801351e:	4618      	mov	r0, r3
 8013520:	46bd      	mov	sp, r7
 8013522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013526:	4770      	bx	lr
 8013528:	20006990 	.word	0x20006990

0801352c <Get_UART3_Instance>:
SPI_HandleTypeDef* Get_SPI1_Instance(void) { return &hspi1; }
UART_HandleTypeDef* Get_UART3_Instance(void) { return &huart3; }
 801352c:	b480      	push	{r7}
 801352e:	af00      	add	r7, sp, #0
 8013530:	4b02      	ldr	r3, [pc, #8]	; (801353c <Get_UART3_Instance+0x10>)
 8013532:	4618      	mov	r0, r3
 8013534:	46bd      	mov	sp, r7
 8013536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353a:	4770      	bx	lr
 801353c:	20006950 	.word	0x20006950

08013540 <Get_RTC_Instance>:
RTC_HandleTypeDef* Get_RTC_Instance(void) { return &hrtc; }
 8013540:	b480      	push	{r7}
 8013542:	af00      	add	r7, sp, #0
 8013544:	4b02      	ldr	r3, [pc, #8]	; (8013550 <Get_RTC_Instance+0x10>)
 8013546:	4618      	mov	r0, r3
 8013548:	46bd      	mov	sp, r7
 801354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354e:	4770      	bx	lr
 8013550:	20006a64 	.word	0x20006a64

08013554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8013554:	b480      	push	{r7}
 8013556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8013558:	bf00      	nop
 801355a:	46bd      	mov	sp, r7
 801355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013560:	4770      	bx	lr

08013562 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013562:	b580      	push	{r7, lr}
 8013564:	b084      	sub	sp, #16
 8013566:	af00      	add	r7, sp, #0
 8013568:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801356a:	f7f2 f859 	bl	8005620 <HAL_GetTick>
 801356e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8013570:	e006      	b.n	8013580 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013572:	f7fe fac9 	bl	8011b08 <BSP_SD_GetCardState>
 8013576:	4603      	mov	r3, r0
 8013578:	2b00      	cmp	r3, #0
 801357a:	d101      	bne.n	8013580 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801357c:	2300      	movs	r3, #0
 801357e:	e009      	b.n	8013594 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8013580:	f7f2 f84e 	bl	8005620 <HAL_GetTick>
 8013584:	4602      	mov	r2, r0
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	1ad3      	subs	r3, r2, r3
 801358a:	687a      	ldr	r2, [r7, #4]
 801358c:	429a      	cmp	r2, r3
 801358e:	d8f0      	bhi.n	8013572 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013590:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013594:	4618      	mov	r0, r3
 8013596:	3710      	adds	r7, #16
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}

0801359c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b082      	sub	sp, #8
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	4603      	mov	r3, r0
 80135a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80135a6:	4b0b      	ldr	r3, [pc, #44]	; (80135d4 <SD_CheckStatus+0x38>)
 80135a8:	2201      	movs	r2, #1
 80135aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80135ac:	f7fe faac 	bl	8011b08 <BSP_SD_GetCardState>
 80135b0:	4603      	mov	r3, r0
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d107      	bne.n	80135c6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80135b6:	4b07      	ldr	r3, [pc, #28]	; (80135d4 <SD_CheckStatus+0x38>)
 80135b8:	781b      	ldrb	r3, [r3, #0]
 80135ba:	b2db      	uxtb	r3, r3
 80135bc:	f023 0301 	bic.w	r3, r3, #1
 80135c0:	b2da      	uxtb	r2, r3
 80135c2:	4b04      	ldr	r3, [pc, #16]	; (80135d4 <SD_CheckStatus+0x38>)
 80135c4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80135c6:	4b03      	ldr	r3, [pc, #12]	; (80135d4 <SD_CheckStatus+0x38>)
 80135c8:	781b      	ldrb	r3, [r3, #0]
 80135ca:	b2db      	uxtb	r3, r3
}
 80135cc:	4618      	mov	r0, r3
 80135ce:	3708      	adds	r7, #8
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}
 80135d4:	2000011d 	.word	0x2000011d

080135d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b082      	sub	sp, #8
 80135dc:	af00      	add	r7, sp, #0
 80135de:	4603      	mov	r3, r0
 80135e0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80135e2:	f7fe fa37 	bl	8011a54 <BSP_SD_Init>
 80135e6:	4603      	mov	r3, r0
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d107      	bne.n	80135fc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80135ec:	79fb      	ldrb	r3, [r7, #7]
 80135ee:	4618      	mov	r0, r3
 80135f0:	f7ff ffd4 	bl	801359c <SD_CheckStatus>
 80135f4:	4603      	mov	r3, r0
 80135f6:	461a      	mov	r2, r3
 80135f8:	4b04      	ldr	r3, [pc, #16]	; (801360c <SD_initialize+0x34>)
 80135fa:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80135fc:	4b03      	ldr	r3, [pc, #12]	; (801360c <SD_initialize+0x34>)
 80135fe:	781b      	ldrb	r3, [r3, #0]
 8013600:	b2db      	uxtb	r3, r3
}
 8013602:	4618      	mov	r0, r3
 8013604:	3708      	adds	r7, #8
 8013606:	46bd      	mov	sp, r7
 8013608:	bd80      	pop	{r7, pc}
 801360a:	bf00      	nop
 801360c:	2000011d 	.word	0x2000011d

08013610 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b082      	sub	sp, #8
 8013614:	af00      	add	r7, sp, #0
 8013616:	4603      	mov	r3, r0
 8013618:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801361a:	79fb      	ldrb	r3, [r7, #7]
 801361c:	4618      	mov	r0, r3
 801361e:	f7ff ffbd 	bl	801359c <SD_CheckStatus>
 8013622:	4603      	mov	r3, r0
}
 8013624:	4618      	mov	r0, r3
 8013626:	3708      	adds	r7, #8
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}

0801362c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b088      	sub	sp, #32
 8013630:	af00      	add	r7, sp, #0
 8013632:	60b9      	str	r1, [r7, #8]
 8013634:	607a      	str	r2, [r7, #4]
 8013636:	603b      	str	r3, [r7, #0]
 8013638:	4603      	mov	r3, r0
 801363a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801363c:	2301      	movs	r3, #1
 801363e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013640:	f247 5030 	movw	r0, #30000	; 0x7530
 8013644:	f7ff ff8d 	bl	8013562 <SD_CheckStatusWithTimeout>
 8013648:	4603      	mov	r3, r0
 801364a:	2b00      	cmp	r3, #0
 801364c:	da01      	bge.n	8013652 <SD_read+0x26>
  {
    return res;
 801364e:	7ffb      	ldrb	r3, [r7, #31]
 8013650:	e08b      	b.n	801376a <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	f003 0303 	and.w	r3, r3, #3
 8013658:	2b00      	cmp	r3, #0
 801365a:	f040 8085 	bne.w	8013768 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801365e:	683a      	ldr	r2, [r7, #0]
 8013660:	6879      	ldr	r1, [r7, #4]
 8013662:	68b8      	ldr	r0, [r7, #8]
 8013664:	f7fe fa1c 	bl	8011aa0 <BSP_SD_ReadBlocks_DMA>
 8013668:	4603      	mov	r3, r0
 801366a:	2b00      	cmp	r3, #0
 801366c:	d133      	bne.n	80136d6 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801366e:	4b41      	ldr	r3, [pc, #260]	; (8013774 <SD_read+0x148>)
 8013670:	2200      	movs	r2, #0
 8013672:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013674:	f7f1 ffd4 	bl	8005620 <HAL_GetTick>
 8013678:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801367a:	bf00      	nop
 801367c:	4b3d      	ldr	r3, [pc, #244]	; (8013774 <SD_read+0x148>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d108      	bne.n	8013696 <SD_read+0x6a>
 8013684:	f7f1 ffcc 	bl	8005620 <HAL_GetTick>
 8013688:	4602      	mov	r2, r0
 801368a:	697b      	ldr	r3, [r7, #20]
 801368c:	1ad3      	subs	r3, r2, r3
 801368e:	f247 522f 	movw	r2, #29999	; 0x752f
 8013692:	4293      	cmp	r3, r2
 8013694:	d9f2      	bls.n	801367c <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8013696:	4b37      	ldr	r3, [pc, #220]	; (8013774 <SD_read+0x148>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d102      	bne.n	80136a4 <SD_read+0x78>
      {
        res = RES_ERROR;
 801369e:	2301      	movs	r3, #1
 80136a0:	77fb      	strb	r3, [r7, #31]
 80136a2:	e061      	b.n	8013768 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 80136a4:	4b33      	ldr	r3, [pc, #204]	; (8013774 <SD_read+0x148>)
 80136a6:	2200      	movs	r2, #0
 80136a8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80136aa:	f7f1 ffb9 	bl	8005620 <HAL_GetTick>
 80136ae:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80136b0:	e007      	b.n	80136c2 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80136b2:	f7fe fa29 	bl	8011b08 <BSP_SD_GetCardState>
 80136b6:	4603      	mov	r3, r0
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d102      	bne.n	80136c2 <SD_read+0x96>
          {
            res = RES_OK;
 80136bc:	2300      	movs	r3, #0
 80136be:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80136c0:	e052      	b.n	8013768 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80136c2:	f7f1 ffad 	bl	8005620 <HAL_GetTick>
 80136c6:	4602      	mov	r2, r0
 80136c8:	697b      	ldr	r3, [r7, #20]
 80136ca:	1ad3      	subs	r3, r2, r3
 80136cc:	f247 522f 	movw	r2, #29999	; 0x752f
 80136d0:	4293      	cmp	r3, r2
 80136d2:	d9ee      	bls.n	80136b2 <SD_read+0x86>
 80136d4:	e048      	b.n	8013768 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 80136d6:	2300      	movs	r3, #0
 80136d8:	61bb      	str	r3, [r7, #24]
 80136da:	e034      	b.n	8013746 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	1c5a      	adds	r2, r3, #1
 80136e0:	607a      	str	r2, [r7, #4]
 80136e2:	2201      	movs	r2, #1
 80136e4:	4619      	mov	r1, r3
 80136e6:	4824      	ldr	r0, [pc, #144]	; (8013778 <SD_read+0x14c>)
 80136e8:	f7fe f9da 	bl	8011aa0 <BSP_SD_ReadBlocks_DMA>
 80136ec:	4603      	mov	r3, r0
 80136ee:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 80136f0:	7fbb      	ldrb	r3, [r7, #30]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d12c      	bne.n	8013750 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 80136f6:	4b1f      	ldr	r3, [pc, #124]	; (8013774 <SD_read+0x148>)
 80136f8:	2200      	movs	r2, #0
 80136fa:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 80136fc:	f7f1 ff90 	bl	8005620 <HAL_GetTick>
 8013700:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013702:	bf00      	nop
 8013704:	4b1b      	ldr	r3, [pc, #108]	; (8013774 <SD_read+0x148>)
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d108      	bne.n	801371e <SD_read+0xf2>
 801370c:	f7f1 ff88 	bl	8005620 <HAL_GetTick>
 8013710:	4602      	mov	r2, r0
 8013712:	697b      	ldr	r3, [r7, #20]
 8013714:	1ad3      	subs	r3, r2, r3
 8013716:	f247 522f 	movw	r2, #29999	; 0x752f
 801371a:	4293      	cmp	r3, r2
 801371c:	d9f2      	bls.n	8013704 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 801371e:	4b15      	ldr	r3, [pc, #84]	; (8013774 <SD_read+0x148>)
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d016      	beq.n	8013754 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8013726:	68bb      	ldr	r3, [r7, #8]
 8013728:	4a13      	ldr	r2, [pc, #76]	; (8013778 <SD_read+0x14c>)
 801372a:	4618      	mov	r0, r3
 801372c:	4611      	mov	r1, r2
 801372e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013732:	461a      	mov	r2, r3
 8013734:	f001 fa4e 	bl	8014bd4 <memcpy>
          buff += BLOCKSIZE;
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801373e:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8013740:	69bb      	ldr	r3, [r7, #24]
 8013742:	3301      	adds	r3, #1
 8013744:	61bb      	str	r3, [r7, #24]
 8013746:	69bb      	ldr	r3, [r7, #24]
 8013748:	683a      	ldr	r2, [r7, #0]
 801374a:	429a      	cmp	r2, r3
 801374c:	d8c6      	bhi.n	80136dc <SD_read+0xb0>
 801374e:	e002      	b.n	8013756 <SD_read+0x12a>
        }
        else
        {
          break;
 8013750:	bf00      	nop
 8013752:	e000      	b.n	8013756 <SD_read+0x12a>
            break;
 8013754:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 8013756:	69bb      	ldr	r3, [r7, #24]
 8013758:	683a      	ldr	r2, [r7, #0]
 801375a:	429a      	cmp	r2, r3
 801375c:	d104      	bne.n	8013768 <SD_read+0x13c>
 801375e:	7fbb      	ldrb	r3, [r7, #30]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d101      	bne.n	8013768 <SD_read+0x13c>
        res = RES_OK;
 8013764:	2300      	movs	r3, #0
 8013766:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 8013768:	7ffb      	ldrb	r3, [r7, #31]
}
 801376a:	4618      	mov	r0, r3
 801376c:	3720      	adds	r7, #32
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}
 8013772:	bf00      	nop
 8013774:	200007b8 	.word	0x200007b8
 8013778:	200005b4 	.word	0x200005b4

0801377c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b088      	sub	sp, #32
 8013780:	af00      	add	r7, sp, #0
 8013782:	60b9      	str	r1, [r7, #8]
 8013784:	607a      	str	r2, [r7, #4]
 8013786:	603b      	str	r3, [r7, #0]
 8013788:	4603      	mov	r3, r0
 801378a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801378c:	2301      	movs	r3, #1
 801378e:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 8013790:	4b4c      	ldr	r3, [pc, #304]	; (80138c4 <SD_write+0x148>)
 8013792:	2200      	movs	r2, #0
 8013794:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013796:	f247 5030 	movw	r0, #30000	; 0x7530
 801379a:	f7ff fee2 	bl	8013562 <SD_CheckStatusWithTimeout>
 801379e:	4603      	mov	r3, r0
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	da01      	bge.n	80137a8 <SD_write+0x2c>
  {
    return res;
 80137a4:	7ffb      	ldrb	r3, [r7, #31]
 80137a6:	e088      	b.n	80138ba <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	f003 0303 	and.w	r3, r3, #3
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	f040 8082 	bne.w	80138b8 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80137b4:	683a      	ldr	r2, [r7, #0]
 80137b6:	6879      	ldr	r1, [r7, #4]
 80137b8:	68b8      	ldr	r0, [r7, #8]
 80137ba:	f7fe f98b 	bl	8011ad4 <BSP_SD_WriteBlocks_DMA>
 80137be:	4603      	mov	r3, r0
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d130      	bne.n	8013826 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80137c4:	f7f1 ff2c 	bl	8005620 <HAL_GetTick>
 80137c8:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80137ca:	bf00      	nop
 80137cc:	4b3d      	ldr	r3, [pc, #244]	; (80138c4 <SD_write+0x148>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d108      	bne.n	80137e6 <SD_write+0x6a>
 80137d4:	f7f1 ff24 	bl	8005620 <HAL_GetTick>
 80137d8:	4602      	mov	r2, r0
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	1ad3      	subs	r3, r2, r3
 80137de:	f247 522f 	movw	r2, #29999	; 0x752f
 80137e2:	4293      	cmp	r3, r2
 80137e4:	d9f2      	bls.n	80137cc <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80137e6:	4b37      	ldr	r3, [pc, #220]	; (80138c4 <SD_write+0x148>)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d102      	bne.n	80137f4 <SD_write+0x78>
      {
        res = RES_ERROR;
 80137ee:	2301      	movs	r3, #1
 80137f0:	77fb      	strb	r3, [r7, #31]
 80137f2:	e061      	b.n	80138b8 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 80137f4:	4b33      	ldr	r3, [pc, #204]	; (80138c4 <SD_write+0x148>)
 80137f6:	2200      	movs	r2, #0
 80137f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80137fa:	f7f1 ff11 	bl	8005620 <HAL_GetTick>
 80137fe:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013800:	e007      	b.n	8013812 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013802:	f7fe f981 	bl	8011b08 <BSP_SD_GetCardState>
 8013806:	4603      	mov	r3, r0
 8013808:	2b00      	cmp	r3, #0
 801380a:	d102      	bne.n	8013812 <SD_write+0x96>
          {
            res = RES_OK;
 801380c:	2300      	movs	r3, #0
 801380e:	77fb      	strb	r3, [r7, #31]
            break;
 8013810:	e052      	b.n	80138b8 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013812:	f7f1 ff05 	bl	8005620 <HAL_GetTick>
 8013816:	4602      	mov	r2, r0
 8013818:	697b      	ldr	r3, [r7, #20]
 801381a:	1ad3      	subs	r3, r2, r3
 801381c:	f247 522f 	movw	r2, #29999	; 0x752f
 8013820:	4293      	cmp	r3, r2
 8013822:	d9ee      	bls.n	8013802 <SD_write+0x86>
 8013824:	e048      	b.n	80138b8 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8013826:	2300      	movs	r3, #0
 8013828:	61bb      	str	r3, [r7, #24]
 801382a:	e034      	b.n	8013896 <SD_write+0x11a>
      {
        WriteStatus = 0;
 801382c:	4b25      	ldr	r3, [pc, #148]	; (80138c4 <SD_write+0x148>)
 801382e:	2200      	movs	r2, #0
 8013830:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	1c5a      	adds	r2, r3, #1
 8013836:	607a      	str	r2, [r7, #4]
 8013838:	2201      	movs	r2, #1
 801383a:	4619      	mov	r1, r3
 801383c:	4822      	ldr	r0, [pc, #136]	; (80138c8 <SD_write+0x14c>)
 801383e:	f7fe f949 	bl	8011ad4 <BSP_SD_WriteBlocks_DMA>
 8013842:	4603      	mov	r3, r0
 8013844:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8013846:	7fbb      	ldrb	r3, [r7, #30]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d129      	bne.n	80138a0 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 801384c:	f7f1 fee8 	bl	8005620 <HAL_GetTick>
 8013850:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013852:	bf00      	nop
 8013854:	4b1b      	ldr	r3, [pc, #108]	; (80138c4 <SD_write+0x148>)
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d108      	bne.n	801386e <SD_write+0xf2>
 801385c:	f7f1 fee0 	bl	8005620 <HAL_GetTick>
 8013860:	4602      	mov	r2, r0
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	1ad3      	subs	r3, r2, r3
 8013866:	f247 522f 	movw	r2, #29999	; 0x752f
 801386a:	4293      	cmp	r3, r2
 801386c:	d9f2      	bls.n	8013854 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 801386e:	4b15      	ldr	r3, [pc, #84]	; (80138c4 <SD_write+0x148>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d016      	beq.n	80138a4 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	4a13      	ldr	r2, [pc, #76]	; (80138c8 <SD_write+0x14c>)
 801387a:	4618      	mov	r0, r3
 801387c:	4611      	mov	r1, r2
 801387e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013882:	461a      	mov	r2, r3
 8013884:	f001 f9a6 	bl	8014bd4 <memcpy>
          buff += BLOCKSIZE;
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801388e:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 8013890:	69bb      	ldr	r3, [r7, #24]
 8013892:	3301      	adds	r3, #1
 8013894:	61bb      	str	r3, [r7, #24]
 8013896:	69bb      	ldr	r3, [r7, #24]
 8013898:	683a      	ldr	r2, [r7, #0]
 801389a:	429a      	cmp	r2, r3
 801389c:	d8c6      	bhi.n	801382c <SD_write+0xb0>
 801389e:	e002      	b.n	80138a6 <SD_write+0x12a>
        }
        else
        {
          break;
 80138a0:	bf00      	nop
 80138a2:	e000      	b.n	80138a6 <SD_write+0x12a>
            break;
 80138a4:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 80138a6:	69bb      	ldr	r3, [r7, #24]
 80138a8:	683a      	ldr	r2, [r7, #0]
 80138aa:	429a      	cmp	r2, r3
 80138ac:	d104      	bne.n	80138b8 <SD_write+0x13c>
 80138ae:	7fbb      	ldrb	r3, [r7, #30]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d101      	bne.n	80138b8 <SD_write+0x13c>
        res = RES_OK;
 80138b4:	2300      	movs	r3, #0
 80138b6:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 80138b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80138ba:	4618      	mov	r0, r3
 80138bc:	3720      	adds	r7, #32
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}
 80138c2:	bf00      	nop
 80138c4:	200007b4 	.word	0x200007b4
 80138c8:	200005b4 	.word	0x200005b4

080138cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b08c      	sub	sp, #48	; 0x30
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	4603      	mov	r3, r0
 80138d4:	603a      	str	r2, [r7, #0]
 80138d6:	71fb      	strb	r3, [r7, #7]
 80138d8:	460b      	mov	r3, r1
 80138da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80138dc:	2301      	movs	r3, #1
 80138de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80138e2:	4b25      	ldr	r3, [pc, #148]	; (8013978 <SD_ioctl+0xac>)
 80138e4:	781b      	ldrb	r3, [r3, #0]
 80138e6:	b2db      	uxtb	r3, r3
 80138e8:	f003 0301 	and.w	r3, r3, #1
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d001      	beq.n	80138f4 <SD_ioctl+0x28>
 80138f0:	2303      	movs	r3, #3
 80138f2:	e03c      	b.n	801396e <SD_ioctl+0xa2>

  switch (cmd)
 80138f4:	79bb      	ldrb	r3, [r7, #6]
 80138f6:	2b03      	cmp	r3, #3
 80138f8:	d834      	bhi.n	8013964 <SD_ioctl+0x98>
 80138fa:	a201      	add	r2, pc, #4	; (adr r2, 8013900 <SD_ioctl+0x34>)
 80138fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013900:	08013911 	.word	0x08013911
 8013904:	08013919 	.word	0x08013919
 8013908:	08013931 	.word	0x08013931
 801390c:	0801394b 	.word	0x0801394b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013910:	2300      	movs	r3, #0
 8013912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013916:	e028      	b.n	801396a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013918:	f107 030c 	add.w	r3, r7, #12
 801391c:	4618      	mov	r0, r3
 801391e:	f7fe f903 	bl	8011b28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013924:	683b      	ldr	r3, [r7, #0]
 8013926:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013928:	2300      	movs	r3, #0
 801392a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801392e:	e01c      	b.n	801396a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013930:	f107 030c 	add.w	r3, r7, #12
 8013934:	4618      	mov	r0, r3
 8013936:	f7fe f8f7 	bl	8011b28 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801393c:	b29a      	uxth	r2, r3
 801393e:	683b      	ldr	r3, [r7, #0]
 8013940:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013942:	2300      	movs	r3, #0
 8013944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013948:	e00f      	b.n	801396a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801394a:	f107 030c 	add.w	r3, r7, #12
 801394e:	4618      	mov	r0, r3
 8013950:	f7fe f8ea 	bl	8011b28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013956:	0a5a      	lsrs	r2, r3, #9
 8013958:	683b      	ldr	r3, [r7, #0]
 801395a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801395c:	2300      	movs	r3, #0
 801395e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013962:	e002      	b.n	801396a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013964:	2304      	movs	r3, #4
 8013966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801396a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801396e:	4618      	mov	r0, r3
 8013970:	3730      	adds	r7, #48	; 0x30
 8013972:	46bd      	mov	sp, r7
 8013974:	bd80      	pop	{r7, pc}
 8013976:	bf00      	nop
 8013978:	2000011d 	.word	0x2000011d

0801397c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801397c:	b480      	push	{r7}
 801397e:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 8013980:	4b03      	ldr	r3, [pc, #12]	; (8013990 <BSP_SD_WriteCpltCallback+0x14>)
 8013982:	2201      	movs	r2, #1
 8013984:	601a      	str	r2, [r3, #0]
}
 8013986:	bf00      	nop
 8013988:	46bd      	mov	sp, r7
 801398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398e:	4770      	bx	lr
 8013990:	200007b4 	.word	0x200007b4

08013994 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013994:	b480      	push	{r7}
 8013996:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8013998:	4b03      	ldr	r3, [pc, #12]	; (80139a8 <BSP_SD_ReadCpltCallback+0x14>)
 801399a:	2201      	movs	r2, #1
 801399c:	601a      	str	r2, [r3, #0]
}
 801399e:	bf00      	nop
 80139a0:	46bd      	mov	sp, r7
 80139a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a6:	4770      	bx	lr
 80139a8:	200007b8 	.word	0x200007b8

080139ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80139ac:	b480      	push	{r7}
 80139ae:	b083      	sub	sp, #12
 80139b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80139b2:	2300      	movs	r3, #0
 80139b4:	607b      	str	r3, [r7, #4]
 80139b6:	4b10      	ldr	r3, [pc, #64]	; (80139f8 <HAL_MspInit+0x4c>)
 80139b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139ba:	4a0f      	ldr	r2, [pc, #60]	; (80139f8 <HAL_MspInit+0x4c>)
 80139bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80139c0:	6453      	str	r3, [r2, #68]	; 0x44
 80139c2:	4b0d      	ldr	r3, [pc, #52]	; (80139f8 <HAL_MspInit+0x4c>)
 80139c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80139ca:	607b      	str	r3, [r7, #4]
 80139cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80139ce:	2300      	movs	r3, #0
 80139d0:	603b      	str	r3, [r7, #0]
 80139d2:	4b09      	ldr	r3, [pc, #36]	; (80139f8 <HAL_MspInit+0x4c>)
 80139d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139d6:	4a08      	ldr	r2, [pc, #32]	; (80139f8 <HAL_MspInit+0x4c>)
 80139d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80139dc:	6413      	str	r3, [r2, #64]	; 0x40
 80139de:	4b06      	ldr	r3, [pc, #24]	; (80139f8 <HAL_MspInit+0x4c>)
 80139e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80139e6:	603b      	str	r3, [r7, #0]
 80139e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80139ea:	bf00      	nop
 80139ec:	370c      	adds	r7, #12
 80139ee:	46bd      	mov	sp, r7
 80139f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f4:	4770      	bx	lr
 80139f6:	bf00      	nop
 80139f8:	40023800 	.word	0x40023800

080139fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b08a      	sub	sp, #40	; 0x28
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013a04:	f107 0314 	add.w	r3, r7, #20
 8013a08:	2200      	movs	r2, #0
 8013a0a:	601a      	str	r2, [r3, #0]
 8013a0c:	605a      	str	r2, [r3, #4]
 8013a0e:	609a      	str	r2, [r3, #8]
 8013a10:	60da      	str	r2, [r3, #12]
 8013a12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	4a19      	ldr	r2, [pc, #100]	; (8013a80 <HAL_I2C_MspInit+0x84>)
 8013a1a:	4293      	cmp	r3, r2
 8013a1c:	d12b      	bne.n	8013a76 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013a1e:	2300      	movs	r3, #0
 8013a20:	613b      	str	r3, [r7, #16]
 8013a22:	4b18      	ldr	r3, [pc, #96]	; (8013a84 <HAL_I2C_MspInit+0x88>)
 8013a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a26:	4a17      	ldr	r2, [pc, #92]	; (8013a84 <HAL_I2C_MspInit+0x88>)
 8013a28:	f043 0302 	orr.w	r3, r3, #2
 8013a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8013a2e:	4b15      	ldr	r3, [pc, #84]	; (8013a84 <HAL_I2C_MspInit+0x88>)
 8013a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a32:	f003 0302 	and.w	r3, r3, #2
 8013a36:	613b      	str	r3, [r7, #16]
 8013a38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8013a3a:	23c0      	movs	r3, #192	; 0xc0
 8013a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013a3e:	2312      	movs	r3, #18
 8013a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013a42:	2301      	movs	r3, #1
 8013a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013a46:	2303      	movs	r3, #3
 8013a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8013a4a:	2304      	movs	r3, #4
 8013a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013a4e:	f107 0314 	add.w	r3, r7, #20
 8013a52:	4619      	mov	r1, r3
 8013a54:	480c      	ldr	r0, [pc, #48]	; (8013a88 <HAL_I2C_MspInit+0x8c>)
 8013a56:	f7f2 fabb 	bl	8005fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	60fb      	str	r3, [r7, #12]
 8013a5e:	4b09      	ldr	r3, [pc, #36]	; (8013a84 <HAL_I2C_MspInit+0x88>)
 8013a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a62:	4a08      	ldr	r2, [pc, #32]	; (8013a84 <HAL_I2C_MspInit+0x88>)
 8013a64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013a68:	6413      	str	r3, [r2, #64]	; 0x40
 8013a6a:	4b06      	ldr	r3, [pc, #24]	; (8013a84 <HAL_I2C_MspInit+0x88>)
 8013a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013a72:	60fb      	str	r3, [r7, #12]
 8013a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8013a76:	bf00      	nop
 8013a78:	3728      	adds	r7, #40	; 0x28
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	bd80      	pop	{r7, pc}
 8013a7e:	bf00      	nop
 8013a80:	40005400 	.word	0x40005400
 8013a84:	40023800 	.word	0x40023800
 8013a88:	40020400 	.word	0x40020400

08013a8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8013a8c:	b480      	push	{r7}
 8013a8e:	b083      	sub	sp, #12
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	4a05      	ldr	r2, [pc, #20]	; (8013ab0 <HAL_RTC_MspInit+0x24>)
 8013a9a:	4293      	cmp	r3, r2
 8013a9c:	d102      	bne.n	8013aa4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8013a9e:	4b05      	ldr	r3, [pc, #20]	; (8013ab4 <HAL_RTC_MspInit+0x28>)
 8013aa0:	2201      	movs	r2, #1
 8013aa2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8013aa4:	bf00      	nop
 8013aa6:	370c      	adds	r7, #12
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aae:	4770      	bx	lr
 8013ab0:	40002800 	.word	0x40002800
 8013ab4:	42470e3c 	.word	0x42470e3c

08013ab8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b08a      	sub	sp, #40	; 0x28
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013ac0:	f107 0314 	add.w	r3, r7, #20
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	601a      	str	r2, [r3, #0]
 8013ac8:	605a      	str	r2, [r3, #4]
 8013aca:	609a      	str	r2, [r3, #8]
 8013acc:	60da      	str	r2, [r3, #12]
 8013ace:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	4a70      	ldr	r2, [pc, #448]	; (8013c98 <HAL_SD_MspInit+0x1e0>)
 8013ad6:	4293      	cmp	r3, r2
 8013ad8:	f040 80da 	bne.w	8013c90 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8013adc:	2300      	movs	r3, #0
 8013ade:	613b      	str	r3, [r7, #16]
 8013ae0:	4b6e      	ldr	r3, [pc, #440]	; (8013c9c <HAL_SD_MspInit+0x1e4>)
 8013ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ae4:	4a6d      	ldr	r2, [pc, #436]	; (8013c9c <HAL_SD_MspInit+0x1e4>)
 8013ae6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013aea:	6453      	str	r3, [r2, #68]	; 0x44
 8013aec:	4b6b      	ldr	r3, [pc, #428]	; (8013c9c <HAL_SD_MspInit+0x1e4>)
 8013aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013af4:	613b      	str	r3, [r7, #16]
 8013af6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013af8:	2300      	movs	r3, #0
 8013afa:	60fb      	str	r3, [r7, #12]
 8013afc:	4b67      	ldr	r3, [pc, #412]	; (8013c9c <HAL_SD_MspInit+0x1e4>)
 8013afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b00:	4a66      	ldr	r2, [pc, #408]	; (8013c9c <HAL_SD_MspInit+0x1e4>)
 8013b02:	f043 0304 	orr.w	r3, r3, #4
 8013b06:	6313      	str	r3, [r2, #48]	; 0x30
 8013b08:	4b64      	ldr	r3, [pc, #400]	; (8013c9c <HAL_SD_MspInit+0x1e4>)
 8013b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b0c:	f003 0304 	and.w	r3, r3, #4
 8013b10:	60fb      	str	r3, [r7, #12]
 8013b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013b14:	2300      	movs	r3, #0
 8013b16:	60bb      	str	r3, [r7, #8]
 8013b18:	4b60      	ldr	r3, [pc, #384]	; (8013c9c <HAL_SD_MspInit+0x1e4>)
 8013b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b1c:	4a5f      	ldr	r2, [pc, #380]	; (8013c9c <HAL_SD_MspInit+0x1e4>)
 8013b1e:	f043 0308 	orr.w	r3, r3, #8
 8013b22:	6313      	str	r3, [r2, #48]	; 0x30
 8013b24:	4b5d      	ldr	r3, [pc, #372]	; (8013c9c <HAL_SD_MspInit+0x1e4>)
 8013b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b28:	f003 0308 	and.w	r3, r3, #8
 8013b2c:	60bb      	str	r3, [r7, #8]
 8013b2e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8013b30:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8013b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b36:	2302      	movs	r3, #2
 8013b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b3e:	2303      	movs	r3, #3
 8013b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8013b42:	230c      	movs	r3, #12
 8013b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013b46:	f107 0314 	add.w	r3, r7, #20
 8013b4a:	4619      	mov	r1, r3
 8013b4c:	4854      	ldr	r0, [pc, #336]	; (8013ca0 <HAL_SD_MspInit+0x1e8>)
 8013b4e:	f7f2 fa3f 	bl	8005fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013b52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b58:	2302      	movs	r3, #2
 8013b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b60:	2303      	movs	r3, #3
 8013b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8013b64:	230c      	movs	r3, #12
 8013b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013b68:	f107 0314 	add.w	r3, r7, #20
 8013b6c:	4619      	mov	r1, r3
 8013b6e:	484c      	ldr	r0, [pc, #304]	; (8013ca0 <HAL_SD_MspInit+0x1e8>)
 8013b70:	f7f2 fa2e 	bl	8005fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8013b74:	2304      	movs	r3, #4
 8013b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b78:	2302      	movs	r3, #2
 8013b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013b80:	2303      	movs	r3, #3
 8013b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8013b84:	230c      	movs	r3, #12
 8013b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013b88:	f107 0314 	add.w	r3, r7, #20
 8013b8c:	4619      	mov	r1, r3
 8013b8e:	4845      	ldr	r0, [pc, #276]	; (8013ca4 <HAL_SD_MspInit+0x1ec>)
 8013b90:	f7f2 fa1e 	bl	8005fd0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8013b94:	4b44      	ldr	r3, [pc, #272]	; (8013ca8 <HAL_SD_MspInit+0x1f0>)
 8013b96:	4a45      	ldr	r2, [pc, #276]	; (8013cac <HAL_SD_MspInit+0x1f4>)
 8013b98:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8013b9a:	4b43      	ldr	r3, [pc, #268]	; (8013ca8 <HAL_SD_MspInit+0x1f0>)
 8013b9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013ba0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013ba2:	4b41      	ldr	r3, [pc, #260]	; (8013ca8 <HAL_SD_MspInit+0x1f0>)
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013ba8:	4b3f      	ldr	r3, [pc, #252]	; (8013ca8 <HAL_SD_MspInit+0x1f0>)
 8013baa:	2200      	movs	r2, #0
 8013bac:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013bae:	4b3e      	ldr	r3, [pc, #248]	; (8013ca8 <HAL_SD_MspInit+0x1f0>)
 8013bb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013bb4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8013bb6:	4b3c      	ldr	r3, [pc, #240]	; (8013ca8 <HAL_SD_MspInit+0x1f0>)
 8013bb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013bbc:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8013bbe:	4b3a      	ldr	r3, [pc, #232]	; (8013ca8 <HAL_SD_MspInit+0x1f0>)
 8013bc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8013bc4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8013bc6:	4b38      	ldr	r3, [pc, #224]	; (8013ca8 <HAL_SD_MspInit+0x1f0>)
 8013bc8:	2220      	movs	r2, #32
 8013bca:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013bcc:	4b36      	ldr	r3, [pc, #216]	; (8013ca8 <HAL_SD_MspInit+0x1f0>)
 8013bce:	2200      	movs	r2, #0
 8013bd0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8013bd2:	4b35      	ldr	r3, [pc, #212]	; (8013ca8 <HAL_SD_MspInit+0x1f0>)
 8013bd4:	2204      	movs	r2, #4
 8013bd6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8013bd8:	4b33      	ldr	r3, [pc, #204]	; (8013ca8 <HAL_SD_MspInit+0x1f0>)
 8013bda:	2203      	movs	r2, #3
 8013bdc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8013bde:	4b32      	ldr	r3, [pc, #200]	; (8013ca8 <HAL_SD_MspInit+0x1f0>)
 8013be0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8013be4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8013be6:	4b30      	ldr	r3, [pc, #192]	; (8013ca8 <HAL_SD_MspInit+0x1f0>)
 8013be8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013bec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8013bee:	482e      	ldr	r0, [pc, #184]	; (8013ca8 <HAL_SD_MspInit+0x1f0>)
 8013bf0:	f7f1 fe56 	bl	80058a0 <HAL_DMA_Init>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d001      	beq.n	8013bfe <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8013bfa:	f7ff fcab 	bl	8013554 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	4a29      	ldr	r2, [pc, #164]	; (8013ca8 <HAL_SD_MspInit+0x1f0>)
 8013c02:	63da      	str	r2, [r3, #60]	; 0x3c
 8013c04:	4a28      	ldr	r2, [pc, #160]	; (8013ca8 <HAL_SD_MspInit+0x1f0>)
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8013c0a:	4b29      	ldr	r3, [pc, #164]	; (8013cb0 <HAL_SD_MspInit+0x1f8>)
 8013c0c:	4a29      	ldr	r2, [pc, #164]	; (8013cb4 <HAL_SD_MspInit+0x1fc>)
 8013c0e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8013c10:	4b27      	ldr	r3, [pc, #156]	; (8013cb0 <HAL_SD_MspInit+0x1f8>)
 8013c12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013c16:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013c18:	4b25      	ldr	r3, [pc, #148]	; (8013cb0 <HAL_SD_MspInit+0x1f8>)
 8013c1a:	2240      	movs	r2, #64	; 0x40
 8013c1c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013c1e:	4b24      	ldr	r3, [pc, #144]	; (8013cb0 <HAL_SD_MspInit+0x1f8>)
 8013c20:	2200      	movs	r2, #0
 8013c22:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013c24:	4b22      	ldr	r3, [pc, #136]	; (8013cb0 <HAL_SD_MspInit+0x1f8>)
 8013c26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013c2a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8013c2c:	4b20      	ldr	r3, [pc, #128]	; (8013cb0 <HAL_SD_MspInit+0x1f8>)
 8013c2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013c32:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8013c34:	4b1e      	ldr	r3, [pc, #120]	; (8013cb0 <HAL_SD_MspInit+0x1f8>)
 8013c36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8013c3a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8013c3c:	4b1c      	ldr	r3, [pc, #112]	; (8013cb0 <HAL_SD_MspInit+0x1f8>)
 8013c3e:	2220      	movs	r2, #32
 8013c40:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013c42:	4b1b      	ldr	r3, [pc, #108]	; (8013cb0 <HAL_SD_MspInit+0x1f8>)
 8013c44:	2200      	movs	r2, #0
 8013c46:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8013c48:	4b19      	ldr	r3, [pc, #100]	; (8013cb0 <HAL_SD_MspInit+0x1f8>)
 8013c4a:	2204      	movs	r2, #4
 8013c4c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8013c4e:	4b18      	ldr	r3, [pc, #96]	; (8013cb0 <HAL_SD_MspInit+0x1f8>)
 8013c50:	2203      	movs	r2, #3
 8013c52:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8013c54:	4b16      	ldr	r3, [pc, #88]	; (8013cb0 <HAL_SD_MspInit+0x1f8>)
 8013c56:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8013c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8013c5c:	4b14      	ldr	r3, [pc, #80]	; (8013cb0 <HAL_SD_MspInit+0x1f8>)
 8013c5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013c62:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8013c64:	4812      	ldr	r0, [pc, #72]	; (8013cb0 <HAL_SD_MspInit+0x1f8>)
 8013c66:	f7f1 fe1b 	bl	80058a0 <HAL_DMA_Init>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d001      	beq.n	8013c74 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8013c70:	f7ff fc70 	bl	8013554 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	4a0e      	ldr	r2, [pc, #56]	; (8013cb0 <HAL_SD_MspInit+0x1f8>)
 8013c78:	641a      	str	r2, [r3, #64]	; 0x40
 8013c7a:	4a0d      	ldr	r2, [pc, #52]	; (8013cb0 <HAL_SD_MspInit+0x1f8>)
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8013c80:	2200      	movs	r2, #0
 8013c82:	2100      	movs	r1, #0
 8013c84:	2031      	movs	r0, #49	; 0x31
 8013c86:	f7f1 fdd4 	bl	8005832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8013c8a:	2031      	movs	r0, #49	; 0x31
 8013c8c:	f7f1 fded 	bl	800586a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8013c90:	bf00      	nop
 8013c92:	3728      	adds	r7, #40	; 0x28
 8013c94:	46bd      	mov	sp, r7
 8013c96:	bd80      	pop	{r7, pc}
 8013c98:	40012c00 	.word	0x40012c00
 8013c9c:	40023800 	.word	0x40023800
 8013ca0:	40020800 	.word	0x40020800
 8013ca4:	40020c00 	.word	0x40020c00
 8013ca8:	200068f0 	.word	0x200068f0
 8013cac:	40026458 	.word	0x40026458
 8013cb0:	20006a84 	.word	0x20006a84
 8013cb4:	400264a0 	.word	0x400264a0

08013cb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b08a      	sub	sp, #40	; 0x28
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013cc0:	f107 0314 	add.w	r3, r7, #20
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	601a      	str	r2, [r3, #0]
 8013cc8:	605a      	str	r2, [r3, #4]
 8013cca:	609a      	str	r2, [r3, #8]
 8013ccc:	60da      	str	r2, [r3, #12]
 8013cce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	4a19      	ldr	r2, [pc, #100]	; (8013d3c <HAL_SPI_MspInit+0x84>)
 8013cd6:	4293      	cmp	r3, r2
 8013cd8:	d12b      	bne.n	8013d32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8013cda:	2300      	movs	r3, #0
 8013cdc:	613b      	str	r3, [r7, #16]
 8013cde:	4b18      	ldr	r3, [pc, #96]	; (8013d40 <HAL_SPI_MspInit+0x88>)
 8013ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ce2:	4a17      	ldr	r2, [pc, #92]	; (8013d40 <HAL_SPI_MspInit+0x88>)
 8013ce4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8013cea:	4b15      	ldr	r3, [pc, #84]	; (8013d40 <HAL_SPI_MspInit+0x88>)
 8013cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013cf2:	613b      	str	r3, [r7, #16]
 8013cf4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	60fb      	str	r3, [r7, #12]
 8013cfa:	4b11      	ldr	r3, [pc, #68]	; (8013d40 <HAL_SPI_MspInit+0x88>)
 8013cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cfe:	4a10      	ldr	r2, [pc, #64]	; (8013d40 <HAL_SPI_MspInit+0x88>)
 8013d00:	f043 0302 	orr.w	r3, r3, #2
 8013d04:	6313      	str	r3, [r2, #48]	; 0x30
 8013d06:	4b0e      	ldr	r3, [pc, #56]	; (8013d40 <HAL_SPI_MspInit+0x88>)
 8013d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d0a:	f003 0302 	and.w	r3, r3, #2
 8013d0e:	60fb      	str	r3, [r7, #12]
 8013d10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8013d12:	2338      	movs	r3, #56	; 0x38
 8013d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d16:	2302      	movs	r3, #2
 8013d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d1e:	2303      	movs	r3, #3
 8013d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013d22:	2305      	movs	r3, #5
 8013d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013d26:	f107 0314 	add.w	r3, r7, #20
 8013d2a:	4619      	mov	r1, r3
 8013d2c:	4805      	ldr	r0, [pc, #20]	; (8013d44 <HAL_SPI_MspInit+0x8c>)
 8013d2e:	f7f2 f94f 	bl	8005fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8013d32:	bf00      	nop
 8013d34:	3728      	adds	r7, #40	; 0x28
 8013d36:	46bd      	mov	sp, r7
 8013d38:	bd80      	pop	{r7, pc}
 8013d3a:	bf00      	nop
 8013d3c:	40013000 	.word	0x40013000
 8013d40:	40023800 	.word	0x40023800
 8013d44:	40020400 	.word	0x40020400

08013d48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8013d48:	b480      	push	{r7}
 8013d4a:	b087      	sub	sp, #28
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d58:	d10e      	bne.n	8013d78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	617b      	str	r3, [r7, #20]
 8013d5e:	4b1d      	ldr	r3, [pc, #116]	; (8013dd4 <HAL_TIM_Base_MspInit+0x8c>)
 8013d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d62:	4a1c      	ldr	r2, [pc, #112]	; (8013dd4 <HAL_TIM_Base_MspInit+0x8c>)
 8013d64:	f043 0301 	orr.w	r3, r3, #1
 8013d68:	6413      	str	r3, [r2, #64]	; 0x40
 8013d6a:	4b1a      	ldr	r3, [pc, #104]	; (8013dd4 <HAL_TIM_Base_MspInit+0x8c>)
 8013d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d6e:	f003 0301 	and.w	r3, r3, #1
 8013d72:	617b      	str	r3, [r7, #20]
 8013d74:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8013d76:	e026      	b.n	8013dc6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	4a16      	ldr	r2, [pc, #88]	; (8013dd8 <HAL_TIM_Base_MspInit+0x90>)
 8013d7e:	4293      	cmp	r3, r2
 8013d80:	d10e      	bne.n	8013da0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8013d82:	2300      	movs	r3, #0
 8013d84:	613b      	str	r3, [r7, #16]
 8013d86:	4b13      	ldr	r3, [pc, #76]	; (8013dd4 <HAL_TIM_Base_MspInit+0x8c>)
 8013d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d8a:	4a12      	ldr	r2, [pc, #72]	; (8013dd4 <HAL_TIM_Base_MspInit+0x8c>)
 8013d8c:	f043 0302 	orr.w	r3, r3, #2
 8013d90:	6413      	str	r3, [r2, #64]	; 0x40
 8013d92:	4b10      	ldr	r3, [pc, #64]	; (8013dd4 <HAL_TIM_Base_MspInit+0x8c>)
 8013d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d96:	f003 0302 	and.w	r3, r3, #2
 8013d9a:	613b      	str	r3, [r7, #16]
 8013d9c:	693b      	ldr	r3, [r7, #16]
}
 8013d9e:	e012      	b.n	8013dc6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	4a0d      	ldr	r2, [pc, #52]	; (8013ddc <HAL_TIM_Base_MspInit+0x94>)
 8013da6:	4293      	cmp	r3, r2
 8013da8:	d10d      	bne.n	8013dc6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8013daa:	2300      	movs	r3, #0
 8013dac:	60fb      	str	r3, [r7, #12]
 8013dae:	4b09      	ldr	r3, [pc, #36]	; (8013dd4 <HAL_TIM_Base_MspInit+0x8c>)
 8013db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013db2:	4a08      	ldr	r2, [pc, #32]	; (8013dd4 <HAL_TIM_Base_MspInit+0x8c>)
 8013db4:	f043 0308 	orr.w	r3, r3, #8
 8013db8:	6413      	str	r3, [r2, #64]	; 0x40
 8013dba:	4b06      	ldr	r3, [pc, #24]	; (8013dd4 <HAL_TIM_Base_MspInit+0x8c>)
 8013dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dbe:	f003 0308 	and.w	r3, r3, #8
 8013dc2:	60fb      	str	r3, [r7, #12]
 8013dc4:	68fb      	ldr	r3, [r7, #12]
}
 8013dc6:	bf00      	nop
 8013dc8:	371c      	adds	r7, #28
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd0:	4770      	bx	lr
 8013dd2:	bf00      	nop
 8013dd4:	40023800 	.word	0x40023800
 8013dd8:	40000400 	.word	0x40000400
 8013ddc:	40000c00 	.word	0x40000c00

08013de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b08a      	sub	sp, #40	; 0x28
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013de8:	f107 0314 	add.w	r3, r7, #20
 8013dec:	2200      	movs	r2, #0
 8013dee:	601a      	str	r2, [r3, #0]
 8013df0:	605a      	str	r2, [r3, #4]
 8013df2:	609a      	str	r2, [r3, #8]
 8013df4:	60da      	str	r2, [r3, #12]
 8013df6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	4a24      	ldr	r2, [pc, #144]	; (8013e90 <HAL_TIM_MspPostInit+0xb0>)
 8013dfe:	4293      	cmp	r3, r2
 8013e00:	d11e      	bne.n	8013e40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013e02:	2300      	movs	r3, #0
 8013e04:	613b      	str	r3, [r7, #16]
 8013e06:	4b23      	ldr	r3, [pc, #140]	; (8013e94 <HAL_TIM_MspPostInit+0xb4>)
 8013e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e0a:	4a22      	ldr	r2, [pc, #136]	; (8013e94 <HAL_TIM_MspPostInit+0xb4>)
 8013e0c:	f043 0302 	orr.w	r3, r3, #2
 8013e10:	6313      	str	r3, [r2, #48]	; 0x30
 8013e12:	4b20      	ldr	r3, [pc, #128]	; (8013e94 <HAL_TIM_MspPostInit+0xb4>)
 8013e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e16:	f003 0302 	and.w	r3, r3, #2
 8013e1a:	613b      	str	r3, [r7, #16]
 8013e1c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = P6_Pin|P7B1_Pin;
 8013e1e:	2303      	movs	r3, #3
 8013e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013e22:	2302      	movs	r3, #2
 8013e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013e26:	2300      	movs	r3, #0
 8013e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8013e2e:	2302      	movs	r3, #2
 8013e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013e32:	f107 0314 	add.w	r3, r7, #20
 8013e36:	4619      	mov	r1, r3
 8013e38:	4817      	ldr	r0, [pc, #92]	; (8013e98 <HAL_TIM_MspPostInit+0xb8>)
 8013e3a:	f7f2 f8c9 	bl	8005fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8013e3e:	e022      	b.n	8013e86 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	4a15      	ldr	r2, [pc, #84]	; (8013e9c <HAL_TIM_MspPostInit+0xbc>)
 8013e46:	4293      	cmp	r3, r2
 8013e48:	d11d      	bne.n	8013e86 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	60fb      	str	r3, [r7, #12]
 8013e4e:	4b11      	ldr	r3, [pc, #68]	; (8013e94 <HAL_TIM_MspPostInit+0xb4>)
 8013e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e52:	4a10      	ldr	r2, [pc, #64]	; (8013e94 <HAL_TIM_MspPostInit+0xb4>)
 8013e54:	f043 0301 	orr.w	r3, r3, #1
 8013e58:	6313      	str	r3, [r2, #48]	; 0x30
 8013e5a:	4b0e      	ldr	r3, [pc, #56]	; (8013e94 <HAL_TIM_MspPostInit+0xb4>)
 8013e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e5e:	f003 0301 	and.w	r3, r3, #1
 8013e62:	60fb      	str	r3, [r7, #12]
 8013e64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 8013e66:	230a      	movs	r3, #10
 8013e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013e6a:	2302      	movs	r3, #2
 8013e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013e6e:	2300      	movs	r3, #0
 8013e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013e72:	2300      	movs	r3, #0
 8013e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8013e76:	2302      	movs	r3, #2
 8013e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013e7a:	f107 0314 	add.w	r3, r7, #20
 8013e7e:	4619      	mov	r1, r3
 8013e80:	4807      	ldr	r0, [pc, #28]	; (8013ea0 <HAL_TIM_MspPostInit+0xc0>)
 8013e82:	f7f2 f8a5 	bl	8005fd0 <HAL_GPIO_Init>
}
 8013e86:	bf00      	nop
 8013e88:	3728      	adds	r7, #40	; 0x28
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}
 8013e8e:	bf00      	nop
 8013e90:	40000400 	.word	0x40000400
 8013e94:	40023800 	.word	0x40023800
 8013e98:	40020400 	.word	0x40020400
 8013e9c:	40000c00 	.word	0x40000c00
 8013ea0:	40020000 	.word	0x40020000

08013ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b08a      	sub	sp, #40	; 0x28
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013eac:	f107 0314 	add.w	r3, r7, #20
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	601a      	str	r2, [r3, #0]
 8013eb4:	605a      	str	r2, [r3, #4]
 8013eb6:	609a      	str	r2, [r3, #8]
 8013eb8:	60da      	str	r2, [r3, #12]
 8013eba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	4a19      	ldr	r2, [pc, #100]	; (8013f28 <HAL_UART_MspInit+0x84>)
 8013ec2:	4293      	cmp	r3, r2
 8013ec4:	d12c      	bne.n	8013f20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	613b      	str	r3, [r7, #16]
 8013eca:	4b18      	ldr	r3, [pc, #96]	; (8013f2c <HAL_UART_MspInit+0x88>)
 8013ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ece:	4a17      	ldr	r2, [pc, #92]	; (8013f2c <HAL_UART_MspInit+0x88>)
 8013ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8013ed6:	4b15      	ldr	r3, [pc, #84]	; (8013f2c <HAL_UART_MspInit+0x88>)
 8013ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013ede:	613b      	str	r3, [r7, #16]
 8013ee0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	60fb      	str	r3, [r7, #12]
 8013ee6:	4b11      	ldr	r3, [pc, #68]	; (8013f2c <HAL_UART_MspInit+0x88>)
 8013ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013eea:	4a10      	ldr	r2, [pc, #64]	; (8013f2c <HAL_UART_MspInit+0x88>)
 8013eec:	f043 0302 	orr.w	r3, r3, #2
 8013ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8013ef2:	4b0e      	ldr	r3, [pc, #56]	; (8013f2c <HAL_UART_MspInit+0x88>)
 8013ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ef6:	f003 0302 	and.w	r3, r3, #2
 8013efa:	60fb      	str	r3, [r7, #12]
 8013efc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8013efe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8013f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013f04:	2302      	movs	r3, #2
 8013f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013f08:	2301      	movs	r3, #1
 8013f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013f0c:	2303      	movs	r3, #3
 8013f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8013f10:	2307      	movs	r3, #7
 8013f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013f14:	f107 0314 	add.w	r3, r7, #20
 8013f18:	4619      	mov	r1, r3
 8013f1a:	4805      	ldr	r0, [pc, #20]	; (8013f30 <HAL_UART_MspInit+0x8c>)
 8013f1c:	f7f2 f858 	bl	8005fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8013f20:	bf00      	nop
 8013f22:	3728      	adds	r7, #40	; 0x28
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd80      	pop	{r7, pc}
 8013f28:	40004800 	.word	0x40004800
 8013f2c:	40023800 	.word	0x40023800
 8013f30:	40020400 	.word	0x40020400

08013f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8013f34:	b480      	push	{r7}
 8013f36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8013f38:	bf00      	nop
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f40:	4770      	bx	lr

08013f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8013f42:	b480      	push	{r7}
 8013f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013f46:	e7fe      	b.n	8013f46 <HardFault_Handler+0x4>

08013f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8013f48:	b480      	push	{r7}
 8013f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8013f4c:	e7fe      	b.n	8013f4c <MemManage_Handler+0x4>

08013f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8013f4e:	b480      	push	{r7}
 8013f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8013f52:	e7fe      	b.n	8013f52 <BusFault_Handler+0x4>

08013f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8013f54:	b480      	push	{r7}
 8013f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8013f58:	e7fe      	b.n	8013f58 <UsageFault_Handler+0x4>

08013f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8013f5a:	b480      	push	{r7}
 8013f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8013f5e:	bf00      	nop
 8013f60:	46bd      	mov	sp, r7
 8013f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f66:	4770      	bx	lr

08013f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8013f68:	b480      	push	{r7}
 8013f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8013f6c:	bf00      	nop
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f74:	4770      	bx	lr

08013f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8013f76:	b480      	push	{r7}
 8013f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8013f7a:	bf00      	nop
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f82:	4770      	bx	lr

08013f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8013f88:	f7f1 fb36 	bl	80055f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8013f8c:	bf00      	nop
 8013f8e:	bd80      	pop	{r7, pc}

08013f90 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8013f94:	4802      	ldr	r0, [pc, #8]	; (8013fa0 <SDIO_IRQHandler+0x10>)
 8013f96:	f7f5 fbad 	bl	80096f4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8013f9a:	bf00      	nop
 8013f9c:	bd80      	pop	{r7, pc}
 8013f9e:	bf00      	nop
 8013fa0:	20006ae4 	.word	0x20006ae4

08013fa4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8013fa8:	4802      	ldr	r0, [pc, #8]	; (8013fb4 <DMA2_Stream3_IRQHandler+0x10>)
 8013faa:	f7f1 fda9 	bl	8005b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8013fae:	bf00      	nop
 8013fb0:	bd80      	pop	{r7, pc}
 8013fb2:	bf00      	nop
 8013fb4:	200068f0 	.word	0x200068f0

08013fb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8013fbc:	4802      	ldr	r0, [pc, #8]	; (8013fc8 <OTG_FS_IRQHandler+0x10>)
 8013fbe:	f7f3 faa2 	bl	8007506 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8013fc2:	bf00      	nop
 8013fc4:	bd80      	pop	{r7, pc}
 8013fc6:	bf00      	nop
 8013fc8:	20007e9c 	.word	0x20007e9c

08013fcc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8013fd0:	4802      	ldr	r0, [pc, #8]	; (8013fdc <DMA2_Stream6_IRQHandler+0x10>)
 8013fd2:	f7f1 fd95 	bl	8005b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8013fd6:	bf00      	nop
 8013fd8:	bd80      	pop	{r7, pc}
 8013fda:	bf00      	nop
 8013fdc:	20006a84 	.word	0x20006a84

08013fe0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b084      	sub	sp, #16
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8013fe8:	4b11      	ldr	r3, [pc, #68]	; (8014030 <_sbrk+0x50>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d102      	bne.n	8013ff6 <_sbrk+0x16>
		heap_end = &end;
 8013ff0:	4b0f      	ldr	r3, [pc, #60]	; (8014030 <_sbrk+0x50>)
 8013ff2:	4a10      	ldr	r2, [pc, #64]	; (8014034 <_sbrk+0x54>)
 8013ff4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8013ff6:	4b0e      	ldr	r3, [pc, #56]	; (8014030 <_sbrk+0x50>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8013ffc:	4b0c      	ldr	r3, [pc, #48]	; (8014030 <_sbrk+0x50>)
 8013ffe:	681a      	ldr	r2, [r3, #0]
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	4413      	add	r3, r2
 8014004:	466a      	mov	r2, sp
 8014006:	4293      	cmp	r3, r2
 8014008:	d907      	bls.n	801401a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 801400a:	f000 fda9 	bl	8014b60 <__errno>
 801400e:	4602      	mov	r2, r0
 8014010:	230c      	movs	r3, #12
 8014012:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8014014:	f04f 33ff 	mov.w	r3, #4294967295
 8014018:	e006      	b.n	8014028 <_sbrk+0x48>
	}

	heap_end += incr;
 801401a:	4b05      	ldr	r3, [pc, #20]	; (8014030 <_sbrk+0x50>)
 801401c:	681a      	ldr	r2, [r3, #0]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	4413      	add	r3, r2
 8014022:	4a03      	ldr	r2, [pc, #12]	; (8014030 <_sbrk+0x50>)
 8014024:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8014026:	68fb      	ldr	r3, [r7, #12]
}
 8014028:	4618      	mov	r0, r3
 801402a:	3710      	adds	r7, #16
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}
 8014030:	200007bc 	.word	0x200007bc
 8014034:	200084a8 	.word	0x200084a8

08014038 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014038:	b480      	push	{r7}
 801403a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801403c:	4b16      	ldr	r3, [pc, #88]	; (8014098 <SystemInit+0x60>)
 801403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014042:	4a15      	ldr	r2, [pc, #84]	; (8014098 <SystemInit+0x60>)
 8014044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801404c:	4b13      	ldr	r3, [pc, #76]	; (801409c <SystemInit+0x64>)
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	4a12      	ldr	r2, [pc, #72]	; (801409c <SystemInit+0x64>)
 8014052:	f043 0301 	orr.w	r3, r3, #1
 8014056:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8014058:	4b10      	ldr	r3, [pc, #64]	; (801409c <SystemInit+0x64>)
 801405a:	2200      	movs	r2, #0
 801405c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801405e:	4b0f      	ldr	r3, [pc, #60]	; (801409c <SystemInit+0x64>)
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	4a0e      	ldr	r2, [pc, #56]	; (801409c <SystemInit+0x64>)
 8014064:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8014068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801406c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801406e:	4b0b      	ldr	r3, [pc, #44]	; (801409c <SystemInit+0x64>)
 8014070:	4a0b      	ldr	r2, [pc, #44]	; (80140a0 <SystemInit+0x68>)
 8014072:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8014074:	4b09      	ldr	r3, [pc, #36]	; (801409c <SystemInit+0x64>)
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	4a08      	ldr	r2, [pc, #32]	; (801409c <SystemInit+0x64>)
 801407a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801407e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8014080:	4b06      	ldr	r3, [pc, #24]	; (801409c <SystemInit+0x64>)
 8014082:	2200      	movs	r2, #0
 8014084:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8014086:	4b04      	ldr	r3, [pc, #16]	; (8014098 <SystemInit+0x60>)
 8014088:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801408c:	609a      	str	r2, [r3, #8]
#endif
}
 801408e:	bf00      	nop
 8014090:	46bd      	mov	sp, r7
 8014092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014096:	4770      	bx	lr
 8014098:	e000ed00 	.word	0xe000ed00
 801409c:	40023800 	.word	0x40023800
 80140a0:	24003010 	.word	0x24003010

080140a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80140a8:	2200      	movs	r2, #0
 80140aa:	4912      	ldr	r1, [pc, #72]	; (80140f4 <MX_USB_DEVICE_Init+0x50>)
 80140ac:	4812      	ldr	r0, [pc, #72]	; (80140f8 <MX_USB_DEVICE_Init+0x54>)
 80140ae:	f7fa f887 	bl	800e1c0 <USBD_Init>
 80140b2:	4603      	mov	r3, r0
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d001      	beq.n	80140bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80140b8:	f7ff fa4c 	bl	8013554 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80140bc:	490f      	ldr	r1, [pc, #60]	; (80140fc <MX_USB_DEVICE_Init+0x58>)
 80140be:	480e      	ldr	r0, [pc, #56]	; (80140f8 <MX_USB_DEVICE_Init+0x54>)
 80140c0:	f7fa f8a9 	bl	800e216 <USBD_RegisterClass>
 80140c4:	4603      	mov	r3, r0
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d001      	beq.n	80140ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80140ca:	f7ff fa43 	bl	8013554 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80140ce:	490c      	ldr	r1, [pc, #48]	; (8014100 <MX_USB_DEVICE_Init+0x5c>)
 80140d0:	4809      	ldr	r0, [pc, #36]	; (80140f8 <MX_USB_DEVICE_Init+0x54>)
 80140d2:	f7f9 ffd7 	bl	800e084 <USBD_CDC_RegisterInterface>
 80140d6:	4603      	mov	r3, r0
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d001      	beq.n	80140e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80140dc:	f7ff fa3a 	bl	8013554 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80140e0:	4805      	ldr	r0, [pc, #20]	; (80140f8 <MX_USB_DEVICE_Init+0x54>)
 80140e2:	f7fa f8b2 	bl	800e24a <USBD_Start>
 80140e6:	4603      	mov	r3, r0
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d001      	beq.n	80140f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80140ec:	f7ff fa32 	bl	8013554 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80140f0:	bf00      	nop
 80140f2:	bd80      	pop	{r7, pc}
 80140f4:	20000134 	.word	0x20000134
 80140f8:	20006c00 	.word	0x20006c00
 80140fc:	20000014 	.word	0x20000014
 8014100:	20000124 	.word	0x20000124

08014104 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014108:	2200      	movs	r2, #0
 801410a:	4905      	ldr	r1, [pc, #20]	; (8014120 <CDC_Init_FS+0x1c>)
 801410c:	4805      	ldr	r0, [pc, #20]	; (8014124 <CDC_Init_FS+0x20>)
 801410e:	f7f9 ffd0 	bl	800e0b2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014112:	4905      	ldr	r1, [pc, #20]	; (8014128 <CDC_Init_FS+0x24>)
 8014114:	4803      	ldr	r0, [pc, #12]	; (8014124 <CDC_Init_FS+0x20>)
 8014116:	f7f9 ffe6 	bl	800e0e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801411a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801411c:	4618      	mov	r0, r3
 801411e:	bd80      	pop	{r7, pc}
 8014120:	2000769c 	.word	0x2000769c
 8014124:	20006c00 	.word	0x20006c00
 8014128:	20006e9c 	.word	0x20006e9c

0801412c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801412c:	b480      	push	{r7}
 801412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014130:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014132:	4618      	mov	r0, r3
 8014134:	46bd      	mov	sp, r7
 8014136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413a:	4770      	bx	lr

0801413c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801413c:	b480      	push	{r7}
 801413e:	b085      	sub	sp, #20
 8014140:	af00      	add	r7, sp, #0
 8014142:	4603      	mov	r3, r0
 8014144:	6039      	str	r1, [r7, #0]
 8014146:	71fb      	strb	r3, [r7, #7]
 8014148:	4613      	mov	r3, r2
 801414a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 801414c:	f107 0308 	add.w	r3, r7, #8
 8014150:	2200      	movs	r2, #0
 8014152:	601a      	str	r2, [r3, #0]
 8014154:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 8014158:	79fb      	ldrb	r3, [r7, #7]
 801415a:	2b23      	cmp	r3, #35	; 0x23
 801415c:	d87c      	bhi.n	8014258 <CDC_Control_FS+0x11c>
 801415e:	a201      	add	r2, pc, #4	; (adr r2, 8014164 <CDC_Control_FS+0x28>)
 8014160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014164:	08014259 	.word	0x08014259
 8014168:	08014259 	.word	0x08014259
 801416c:	08014259 	.word	0x08014259
 8014170:	08014259 	.word	0x08014259
 8014174:	08014259 	.word	0x08014259
 8014178:	08014259 	.word	0x08014259
 801417c:	08014259 	.word	0x08014259
 8014180:	08014259 	.word	0x08014259
 8014184:	08014259 	.word	0x08014259
 8014188:	08014259 	.word	0x08014259
 801418c:	08014259 	.word	0x08014259
 8014190:	08014259 	.word	0x08014259
 8014194:	08014259 	.word	0x08014259
 8014198:	08014259 	.word	0x08014259
 801419c:	08014259 	.word	0x08014259
 80141a0:	08014259 	.word	0x08014259
 80141a4:	08014259 	.word	0x08014259
 80141a8:	08014259 	.word	0x08014259
 80141ac:	08014259 	.word	0x08014259
 80141b0:	08014259 	.word	0x08014259
 80141b4:	08014259 	.word	0x08014259
 80141b8:	08014259 	.word	0x08014259
 80141bc:	08014259 	.word	0x08014259
 80141c0:	08014259 	.word	0x08014259
 80141c4:	08014259 	.word	0x08014259
 80141c8:	08014259 	.word	0x08014259
 80141cc:	08014259 	.word	0x08014259
 80141d0:	08014259 	.word	0x08014259
 80141d4:	08014259 	.word	0x08014259
 80141d8:	08014259 	.word	0x08014259
 80141dc:	08014259 	.word	0x08014259
 80141e0:	08014259 	.word	0x08014259
 80141e4:	080141f5 	.word	0x080141f5
 80141e8:	08014221 	.word	0x08014221
 80141ec:	08014259 	.word	0x08014259
 80141f0:	08014259 	.word	0x08014259
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	tempbuf[0] = pbuf[0];
 80141f4:	683b      	ldr	r3, [r7, #0]
 80141f6:	781b      	ldrb	r3, [r3, #0]
 80141f8:	723b      	strb	r3, [r7, #8]
        	tempbuf[1] = pbuf[1];
 80141fa:	683b      	ldr	r3, [r7, #0]
 80141fc:	785b      	ldrb	r3, [r3, #1]
 80141fe:	727b      	strb	r3, [r7, #9]
        	tempbuf[2] = pbuf[2];
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	789b      	ldrb	r3, [r3, #2]
 8014204:	72bb      	strb	r3, [r7, #10]
        	tempbuf[3] = pbuf[3];
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	78db      	ldrb	r3, [r3, #3]
 801420a:	72fb      	strb	r3, [r7, #11]
        	tempbuf[4] = pbuf[4];
 801420c:	683b      	ldr	r3, [r7, #0]
 801420e:	791b      	ldrb	r3, [r3, #4]
 8014210:	733b      	strb	r3, [r7, #12]
        	tempbuf[5] = pbuf[5];
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	795b      	ldrb	r3, [r3, #5]
 8014216:	737b      	strb	r3, [r7, #13]
        	tempbuf[6] = pbuf[6];
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	799b      	ldrb	r3, [r3, #6]
 801421c:	73bb      	strb	r3, [r7, #14]
        	break;
 801421e:	e01c      	b.n	801425a <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
        	pbuf[0] = tempbuf[0];
 8014220:	7a3a      	ldrb	r2, [r7, #8]
 8014222:	683b      	ldr	r3, [r7, #0]
 8014224:	701a      	strb	r2, [r3, #0]
        	pbuf[1] = tempbuf[1];
 8014226:	683b      	ldr	r3, [r7, #0]
 8014228:	3301      	adds	r3, #1
 801422a:	7a7a      	ldrb	r2, [r7, #9]
 801422c:	701a      	strb	r2, [r3, #0]
        	pbuf[2] = tempbuf[2];
 801422e:	683b      	ldr	r3, [r7, #0]
 8014230:	3302      	adds	r3, #2
 8014232:	7aba      	ldrb	r2, [r7, #10]
 8014234:	701a      	strb	r2, [r3, #0]
        	pbuf[3] = tempbuf[3];
 8014236:	683b      	ldr	r3, [r7, #0]
 8014238:	3303      	adds	r3, #3
 801423a:	7afa      	ldrb	r2, [r7, #11]
 801423c:	701a      	strb	r2, [r3, #0]
        	pbuf[4] = tempbuf[4];
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	3304      	adds	r3, #4
 8014242:	7b3a      	ldrb	r2, [r7, #12]
 8014244:	701a      	strb	r2, [r3, #0]
        	pbuf[5] = tempbuf[5];
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	3305      	adds	r3, #5
 801424a:	7b7a      	ldrb	r2, [r7, #13]
 801424c:	701a      	strb	r2, [r3, #0]
        	pbuf[6] = tempbuf[6];
 801424e:	683b      	ldr	r3, [r7, #0]
 8014250:	3306      	adds	r3, #6
 8014252:	7bba      	ldrb	r2, [r7, #14]
 8014254:	701a      	strb	r2, [r3, #0]
        	break;
 8014256:	e000      	b.n	801425a <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014258:	bf00      	nop
  }

  return (USBD_OK);
 801425a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801425c:	4618      	mov	r0, r3
 801425e:	3714      	adds	r7, #20
 8014260:	46bd      	mov	sp, r7
 8014262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014266:	4770      	bx	lr

08014268 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b082      	sub	sp, #8
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
 8014270:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014272:	6879      	ldr	r1, [r7, #4]
 8014274:	4805      	ldr	r0, [pc, #20]	; (801428c <CDC_Receive_FS+0x24>)
 8014276:	f7f9 ff36 	bl	800e0e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801427a:	4804      	ldr	r0, [pc, #16]	; (801428c <CDC_Receive_FS+0x24>)
 801427c:	f7f9 ff76 	bl	800e16c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014280:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014282:	4618      	mov	r0, r3
 8014284:	3708      	adds	r7, #8
 8014286:	46bd      	mov	sp, r7
 8014288:	bd80      	pop	{r7, pc}
 801428a:	bf00      	nop
 801428c:	20006c00 	.word	0x20006c00

08014290 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b084      	sub	sp, #16
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	460b      	mov	r3, r1
 801429a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801429c:	2300      	movs	r3, #0
 801429e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80142a0:	4b0d      	ldr	r3, [pc, #52]	; (80142d8 <CDC_Transmit_FS+0x48>)
 80142a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80142a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d001      	beq.n	80142b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80142b2:	2301      	movs	r3, #1
 80142b4:	e00b      	b.n	80142ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80142b6:	887b      	ldrh	r3, [r7, #2]
 80142b8:	461a      	mov	r2, r3
 80142ba:	6879      	ldr	r1, [r7, #4]
 80142bc:	4806      	ldr	r0, [pc, #24]	; (80142d8 <CDC_Transmit_FS+0x48>)
 80142be:	f7f9 fef8 	bl	800e0b2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80142c2:	4805      	ldr	r0, [pc, #20]	; (80142d8 <CDC_Transmit_FS+0x48>)
 80142c4:	f7f9 ff23 	bl	800e10e <USBD_CDC_TransmitPacket>
 80142c8:	4603      	mov	r3, r0
 80142ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80142cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80142ce:	4618      	mov	r0, r3
 80142d0:	3710      	adds	r7, #16
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}
 80142d6:	bf00      	nop
 80142d8:	20006c00 	.word	0x20006c00

080142dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b08a      	sub	sp, #40	; 0x28
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80142e4:	f107 0314 	add.w	r3, r7, #20
 80142e8:	2200      	movs	r2, #0
 80142ea:	601a      	str	r2, [r3, #0]
 80142ec:	605a      	str	r2, [r3, #4]
 80142ee:	609a      	str	r2, [r3, #8]
 80142f0:	60da      	str	r2, [r3, #12]
 80142f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80142fc:	d13a      	bne.n	8014374 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80142fe:	2300      	movs	r3, #0
 8014300:	613b      	str	r3, [r7, #16]
 8014302:	4b1e      	ldr	r3, [pc, #120]	; (801437c <HAL_PCD_MspInit+0xa0>)
 8014304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014306:	4a1d      	ldr	r2, [pc, #116]	; (801437c <HAL_PCD_MspInit+0xa0>)
 8014308:	f043 0301 	orr.w	r3, r3, #1
 801430c:	6313      	str	r3, [r2, #48]	; 0x30
 801430e:	4b1b      	ldr	r3, [pc, #108]	; (801437c <HAL_PCD_MspInit+0xa0>)
 8014310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014312:	f003 0301 	and.w	r3, r3, #1
 8014316:	613b      	str	r3, [r7, #16]
 8014318:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 801431a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801431e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014320:	2302      	movs	r3, #2
 8014322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014324:	2300      	movs	r3, #0
 8014326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014328:	2303      	movs	r3, #3
 801432a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801432c:	230a      	movs	r3, #10
 801432e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014330:	f107 0314 	add.w	r3, r7, #20
 8014334:	4619      	mov	r1, r3
 8014336:	4812      	ldr	r0, [pc, #72]	; (8014380 <HAL_PCD_MspInit+0xa4>)
 8014338:	f7f1 fe4a 	bl	8005fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801433c:	4b0f      	ldr	r3, [pc, #60]	; (801437c <HAL_PCD_MspInit+0xa0>)
 801433e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014340:	4a0e      	ldr	r2, [pc, #56]	; (801437c <HAL_PCD_MspInit+0xa0>)
 8014342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014346:	6353      	str	r3, [r2, #52]	; 0x34
 8014348:	2300      	movs	r3, #0
 801434a:	60fb      	str	r3, [r7, #12]
 801434c:	4b0b      	ldr	r3, [pc, #44]	; (801437c <HAL_PCD_MspInit+0xa0>)
 801434e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014350:	4a0a      	ldr	r2, [pc, #40]	; (801437c <HAL_PCD_MspInit+0xa0>)
 8014352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014356:	6453      	str	r3, [r2, #68]	; 0x44
 8014358:	4b08      	ldr	r3, [pc, #32]	; (801437c <HAL_PCD_MspInit+0xa0>)
 801435a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801435c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014360:	60fb      	str	r3, [r7, #12]
 8014362:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8014364:	2200      	movs	r2, #0
 8014366:	2100      	movs	r1, #0
 8014368:	2043      	movs	r0, #67	; 0x43
 801436a:	f7f1 fa62 	bl	8005832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801436e:	2043      	movs	r0, #67	; 0x43
 8014370:	f7f1 fa7b 	bl	800586a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014374:	bf00      	nop
 8014376:	3728      	adds	r7, #40	; 0x28
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}
 801437c:	40023800 	.word	0x40023800
 8014380:	40020000 	.word	0x40020000

08014384 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b082      	sub	sp, #8
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014398:	4619      	mov	r1, r3
 801439a:	4610      	mov	r0, r2
 801439c:	f7f9 ff9e 	bl	800e2dc <USBD_LL_SetupStage>
}
 80143a0:	bf00      	nop
 80143a2:	3708      	adds	r7, #8
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}

080143a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b082      	sub	sp, #8
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
 80143b0:	460b      	mov	r3, r1
 80143b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80143ba:	78fa      	ldrb	r2, [r7, #3]
 80143bc:	6879      	ldr	r1, [r7, #4]
 80143be:	4613      	mov	r3, r2
 80143c0:	00db      	lsls	r3, r3, #3
 80143c2:	1a9b      	subs	r3, r3, r2
 80143c4:	009b      	lsls	r3, r3, #2
 80143c6:	440b      	add	r3, r1
 80143c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80143cc:	681a      	ldr	r2, [r3, #0]
 80143ce:	78fb      	ldrb	r3, [r7, #3]
 80143d0:	4619      	mov	r1, r3
 80143d2:	f7f9 ffce 	bl	800e372 <USBD_LL_DataOutStage>
}
 80143d6:	bf00      	nop
 80143d8:	3708      	adds	r7, #8
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}

080143de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80143de:	b580      	push	{r7, lr}
 80143e0:	b082      	sub	sp, #8
 80143e2:	af00      	add	r7, sp, #0
 80143e4:	6078      	str	r0, [r7, #4]
 80143e6:	460b      	mov	r3, r1
 80143e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80143f0:	78fa      	ldrb	r2, [r7, #3]
 80143f2:	6879      	ldr	r1, [r7, #4]
 80143f4:	4613      	mov	r3, r2
 80143f6:	00db      	lsls	r3, r3, #3
 80143f8:	1a9b      	subs	r3, r3, r2
 80143fa:	009b      	lsls	r3, r3, #2
 80143fc:	440b      	add	r3, r1
 80143fe:	3348      	adds	r3, #72	; 0x48
 8014400:	681a      	ldr	r2, [r3, #0]
 8014402:	78fb      	ldrb	r3, [r7, #3]
 8014404:	4619      	mov	r1, r3
 8014406:	f7fa f825 	bl	800e454 <USBD_LL_DataInStage>
}
 801440a:	bf00      	nop
 801440c:	3708      	adds	r7, #8
 801440e:	46bd      	mov	sp, r7
 8014410:	bd80      	pop	{r7, pc}

08014412 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014412:	b580      	push	{r7, lr}
 8014414:	b082      	sub	sp, #8
 8014416:	af00      	add	r7, sp, #0
 8014418:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014420:	4618      	mov	r0, r3
 8014422:	f7fa f933 	bl	800e68c <USBD_LL_SOF>
}
 8014426:	bf00      	nop
 8014428:	3708      	adds	r7, #8
 801442a:	46bd      	mov	sp, r7
 801442c:	bd80      	pop	{r7, pc}

0801442e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801442e:	b580      	push	{r7, lr}
 8014430:	b084      	sub	sp, #16
 8014432:	af00      	add	r7, sp, #0
 8014434:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014436:	2301      	movs	r3, #1
 8014438:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	68db      	ldr	r3, [r3, #12]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d102      	bne.n	8014448 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8014442:	2300      	movs	r3, #0
 8014444:	73fb      	strb	r3, [r7, #15]
 8014446:	e008      	b.n	801445a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	68db      	ldr	r3, [r3, #12]
 801444c:	2b02      	cmp	r3, #2
 801444e:	d102      	bne.n	8014456 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8014450:	2301      	movs	r3, #1
 8014452:	73fb      	strb	r3, [r7, #15]
 8014454:	e001      	b.n	801445a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8014456:	f7ff f87d 	bl	8013554 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014460:	7bfa      	ldrb	r2, [r7, #15]
 8014462:	4611      	mov	r1, r2
 8014464:	4618      	mov	r0, r3
 8014466:	f7fa f8db 	bl	800e620 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014470:	4618      	mov	r0, r3
 8014472:	f7fa f894 	bl	800e59e <USBD_LL_Reset>
}
 8014476:	bf00      	nop
 8014478:	3710      	adds	r7, #16
 801447a:	46bd      	mov	sp, r7
 801447c:	bd80      	pop	{r7, pc}
	...

08014480 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014480:	b580      	push	{r7, lr}
 8014482:	b082      	sub	sp, #8
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801448e:	4618      	mov	r0, r3
 8014490:	f7fa f8d6 	bl	800e640 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	687a      	ldr	r2, [r7, #4]
 80144a0:	6812      	ldr	r2, [r2, #0]
 80144a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80144a6:	f043 0301 	orr.w	r3, r3, #1
 80144aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	6a1b      	ldr	r3, [r3, #32]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d005      	beq.n	80144c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80144b4:	4b04      	ldr	r3, [pc, #16]	; (80144c8 <HAL_PCD_SuspendCallback+0x48>)
 80144b6:	691b      	ldr	r3, [r3, #16]
 80144b8:	4a03      	ldr	r2, [pc, #12]	; (80144c8 <HAL_PCD_SuspendCallback+0x48>)
 80144ba:	f043 0306 	orr.w	r3, r3, #6
 80144be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80144c0:	bf00      	nop
 80144c2:	3708      	adds	r7, #8
 80144c4:	46bd      	mov	sp, r7
 80144c6:	bd80      	pop	{r7, pc}
 80144c8:	e000ed00 	.word	0xe000ed00

080144cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b082      	sub	sp, #8
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80144da:	4618      	mov	r0, r3
 80144dc:	f7fa f8c5 	bl	800e66a <USBD_LL_Resume>
}
 80144e0:	bf00      	nop
 80144e2:	3708      	adds	r7, #8
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}

080144e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b082      	sub	sp, #8
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
 80144f0:	460b      	mov	r3, r1
 80144f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80144fa:	78fa      	ldrb	r2, [r7, #3]
 80144fc:	4611      	mov	r1, r2
 80144fe:	4618      	mov	r0, r3
 8014500:	f7fa f8eb 	bl	800e6da <USBD_LL_IsoOUTIncomplete>
}
 8014504:	bf00      	nop
 8014506:	3708      	adds	r7, #8
 8014508:	46bd      	mov	sp, r7
 801450a:	bd80      	pop	{r7, pc}

0801450c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b082      	sub	sp, #8
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
 8014514:	460b      	mov	r3, r1
 8014516:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801451e:	78fa      	ldrb	r2, [r7, #3]
 8014520:	4611      	mov	r1, r2
 8014522:	4618      	mov	r0, r3
 8014524:	f7fa f8cc 	bl	800e6c0 <USBD_LL_IsoINIncomplete>
}
 8014528:	bf00      	nop
 801452a:	3708      	adds	r7, #8
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b082      	sub	sp, #8
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801453e:	4618      	mov	r0, r3
 8014540:	f7fa f8d8 	bl	800e6f4 <USBD_LL_DevConnected>
}
 8014544:	bf00      	nop
 8014546:	3708      	adds	r7, #8
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}

0801454c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b082      	sub	sp, #8
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801455a:	4618      	mov	r0, r3
 801455c:	f7fa f8d5 	bl	800e70a <USBD_LL_DevDisconnected>
}
 8014560:	bf00      	nop
 8014562:	3708      	adds	r7, #8
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}

08014568 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b082      	sub	sp, #8
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	781b      	ldrb	r3, [r3, #0]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d13c      	bne.n	80145f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014578:	4a20      	ldr	r2, [pc, #128]	; (80145fc <USBD_LL_Init+0x94>)
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	4a1e      	ldr	r2, [pc, #120]	; (80145fc <USBD_LL_Init+0x94>)
 8014584:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014588:	4b1c      	ldr	r3, [pc, #112]	; (80145fc <USBD_LL_Init+0x94>)
 801458a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801458e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8014590:	4b1a      	ldr	r3, [pc, #104]	; (80145fc <USBD_LL_Init+0x94>)
 8014592:	2204      	movs	r2, #4
 8014594:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8014596:	4b19      	ldr	r3, [pc, #100]	; (80145fc <USBD_LL_Init+0x94>)
 8014598:	2202      	movs	r2, #2
 801459a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801459c:	4b17      	ldr	r3, [pc, #92]	; (80145fc <USBD_LL_Init+0x94>)
 801459e:	2200      	movs	r2, #0
 80145a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80145a2:	4b16      	ldr	r3, [pc, #88]	; (80145fc <USBD_LL_Init+0x94>)
 80145a4:	2202      	movs	r2, #2
 80145a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80145a8:	4b14      	ldr	r3, [pc, #80]	; (80145fc <USBD_LL_Init+0x94>)
 80145aa:	2200      	movs	r2, #0
 80145ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80145ae:	4b13      	ldr	r3, [pc, #76]	; (80145fc <USBD_LL_Init+0x94>)
 80145b0:	2200      	movs	r2, #0
 80145b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80145b4:	4b11      	ldr	r3, [pc, #68]	; (80145fc <USBD_LL_Init+0x94>)
 80145b6:	2200      	movs	r2, #0
 80145b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80145ba:	4b10      	ldr	r3, [pc, #64]	; (80145fc <USBD_LL_Init+0x94>)
 80145bc:	2200      	movs	r2, #0
 80145be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80145c0:	4b0e      	ldr	r3, [pc, #56]	; (80145fc <USBD_LL_Init+0x94>)
 80145c2:	2200      	movs	r2, #0
 80145c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80145c6:	480d      	ldr	r0, [pc, #52]	; (80145fc <USBD_LL_Init+0x94>)
 80145c8:	f7f2 fe4d 	bl	8007266 <HAL_PCD_Init>
 80145cc:	4603      	mov	r3, r0
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d001      	beq.n	80145d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80145d2:	f7fe ffbf 	bl	8013554 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80145d6:	2180      	movs	r1, #128	; 0x80
 80145d8:	4808      	ldr	r0, [pc, #32]	; (80145fc <USBD_LL_Init+0x94>)
 80145da:	f7f3 ffb2 	bl	8008542 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80145de:	2240      	movs	r2, #64	; 0x40
 80145e0:	2100      	movs	r1, #0
 80145e2:	4806      	ldr	r0, [pc, #24]	; (80145fc <USBD_LL_Init+0x94>)
 80145e4:	f7f3 ff66 	bl	80084b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80145e8:	2280      	movs	r2, #128	; 0x80
 80145ea:	2101      	movs	r1, #1
 80145ec:	4803      	ldr	r0, [pc, #12]	; (80145fc <USBD_LL_Init+0x94>)
 80145ee:	f7f3 ff61 	bl	80084b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80145f2:	2300      	movs	r3, #0
}
 80145f4:	4618      	mov	r0, r3
 80145f6:	3708      	adds	r7, #8
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}
 80145fc:	20007e9c 	.word	0x20007e9c

08014600 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b084      	sub	sp, #16
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014608:	2300      	movs	r3, #0
 801460a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801460c:	2300      	movs	r3, #0
 801460e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014616:	4618      	mov	r0, r3
 8014618:	f7f2 ff42 	bl	80074a0 <HAL_PCD_Start>
 801461c:	4603      	mov	r3, r0
 801461e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8014620:	7bfb      	ldrb	r3, [r7, #15]
 8014622:	4618      	mov	r0, r3
 8014624:	f000 f92e 	bl	8014884 <USBD_Get_USB_Status>
 8014628:	4603      	mov	r3, r0
 801462a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801462c:	7bbb      	ldrb	r3, [r7, #14]
}
 801462e:	4618      	mov	r0, r3
 8014630:	3710      	adds	r7, #16
 8014632:	46bd      	mov	sp, r7
 8014634:	bd80      	pop	{r7, pc}

08014636 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014636:	b580      	push	{r7, lr}
 8014638:	b084      	sub	sp, #16
 801463a:	af00      	add	r7, sp, #0
 801463c:	6078      	str	r0, [r7, #4]
 801463e:	4608      	mov	r0, r1
 8014640:	4611      	mov	r1, r2
 8014642:	461a      	mov	r2, r3
 8014644:	4603      	mov	r3, r0
 8014646:	70fb      	strb	r3, [r7, #3]
 8014648:	460b      	mov	r3, r1
 801464a:	70bb      	strb	r3, [r7, #2]
 801464c:	4613      	mov	r3, r2
 801464e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014650:	2300      	movs	r3, #0
 8014652:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014654:	2300      	movs	r3, #0
 8014656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801465e:	78bb      	ldrb	r3, [r7, #2]
 8014660:	883a      	ldrh	r2, [r7, #0]
 8014662:	78f9      	ldrb	r1, [r7, #3]
 8014664:	f7f3 fb17 	bl	8007c96 <HAL_PCD_EP_Open>
 8014668:	4603      	mov	r3, r0
 801466a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801466c:	7bfb      	ldrb	r3, [r7, #15]
 801466e:	4618      	mov	r0, r3
 8014670:	f000 f908 	bl	8014884 <USBD_Get_USB_Status>
 8014674:	4603      	mov	r3, r0
 8014676:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8014678:	7bbb      	ldrb	r3, [r7, #14]
}
 801467a:	4618      	mov	r0, r3
 801467c:	3710      	adds	r7, #16
 801467e:	46bd      	mov	sp, r7
 8014680:	bd80      	pop	{r7, pc}

08014682 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014682:	b580      	push	{r7, lr}
 8014684:	b084      	sub	sp, #16
 8014686:	af00      	add	r7, sp, #0
 8014688:	6078      	str	r0, [r7, #4]
 801468a:	460b      	mov	r3, r1
 801468c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801468e:	2300      	movs	r3, #0
 8014690:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014692:	2300      	movs	r3, #0
 8014694:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801469c:	78fa      	ldrb	r2, [r7, #3]
 801469e:	4611      	mov	r1, r2
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7f3 fb60 	bl	8007d66 <HAL_PCD_EP_Close>
 80146a6:	4603      	mov	r3, r0
 80146a8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80146aa:	7bfb      	ldrb	r3, [r7, #15]
 80146ac:	4618      	mov	r0, r3
 80146ae:	f000 f8e9 	bl	8014884 <USBD_Get_USB_Status>
 80146b2:	4603      	mov	r3, r0
 80146b4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80146b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80146b8:	4618      	mov	r0, r3
 80146ba:	3710      	adds	r7, #16
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd80      	pop	{r7, pc}

080146c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b084      	sub	sp, #16
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
 80146c8:	460b      	mov	r3, r1
 80146ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80146cc:	2300      	movs	r3, #0
 80146ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80146d0:	2300      	movs	r3, #0
 80146d2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80146da:	78fa      	ldrb	r2, [r7, #3]
 80146dc:	4611      	mov	r1, r2
 80146de:	4618      	mov	r0, r3
 80146e0:	f7f3 fc38 	bl	8007f54 <HAL_PCD_EP_SetStall>
 80146e4:	4603      	mov	r3, r0
 80146e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80146e8:	7bfb      	ldrb	r3, [r7, #15]
 80146ea:	4618      	mov	r0, r3
 80146ec:	f000 f8ca 	bl	8014884 <USBD_Get_USB_Status>
 80146f0:	4603      	mov	r3, r0
 80146f2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80146f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80146f6:	4618      	mov	r0, r3
 80146f8:	3710      	adds	r7, #16
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd80      	pop	{r7, pc}

080146fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80146fe:	b580      	push	{r7, lr}
 8014700:	b084      	sub	sp, #16
 8014702:	af00      	add	r7, sp, #0
 8014704:	6078      	str	r0, [r7, #4]
 8014706:	460b      	mov	r3, r1
 8014708:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801470a:	2300      	movs	r3, #0
 801470c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801470e:	2300      	movs	r3, #0
 8014710:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014718:	78fa      	ldrb	r2, [r7, #3]
 801471a:	4611      	mov	r1, r2
 801471c:	4618      	mov	r0, r3
 801471e:	f7f3 fc7d 	bl	800801c <HAL_PCD_EP_ClrStall>
 8014722:	4603      	mov	r3, r0
 8014724:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8014726:	7bfb      	ldrb	r3, [r7, #15]
 8014728:	4618      	mov	r0, r3
 801472a:	f000 f8ab 	bl	8014884 <USBD_Get_USB_Status>
 801472e:	4603      	mov	r3, r0
 8014730:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8014732:	7bbb      	ldrb	r3, [r7, #14]
}
 8014734:	4618      	mov	r0, r3
 8014736:	3710      	adds	r7, #16
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}

0801473c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801473c:	b480      	push	{r7}
 801473e:	b085      	sub	sp, #20
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
 8014744:	460b      	mov	r3, r1
 8014746:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801474e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8014750:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014754:	2b00      	cmp	r3, #0
 8014756:	da0b      	bge.n	8014770 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8014758:	78fb      	ldrb	r3, [r7, #3]
 801475a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801475e:	68f9      	ldr	r1, [r7, #12]
 8014760:	4613      	mov	r3, r2
 8014762:	00db      	lsls	r3, r3, #3
 8014764:	1a9b      	subs	r3, r3, r2
 8014766:	009b      	lsls	r3, r3, #2
 8014768:	440b      	add	r3, r1
 801476a:	333e      	adds	r3, #62	; 0x3e
 801476c:	781b      	ldrb	r3, [r3, #0]
 801476e:	e00b      	b.n	8014788 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8014770:	78fb      	ldrb	r3, [r7, #3]
 8014772:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014776:	68f9      	ldr	r1, [r7, #12]
 8014778:	4613      	mov	r3, r2
 801477a:	00db      	lsls	r3, r3, #3
 801477c:	1a9b      	subs	r3, r3, r2
 801477e:	009b      	lsls	r3, r3, #2
 8014780:	440b      	add	r3, r1
 8014782:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014786:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014788:	4618      	mov	r0, r3
 801478a:	3714      	adds	r7, #20
 801478c:	46bd      	mov	sp, r7
 801478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014792:	4770      	bx	lr

08014794 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b084      	sub	sp, #16
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
 801479c:	460b      	mov	r3, r1
 801479e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80147a0:	2300      	movs	r3, #0
 80147a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80147a4:	2300      	movs	r3, #0
 80147a6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80147ae:	78fa      	ldrb	r2, [r7, #3]
 80147b0:	4611      	mov	r1, r2
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7f3 fa4a 	bl	8007c4c <HAL_PCD_SetAddress>
 80147b8:	4603      	mov	r3, r0
 80147ba:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80147bc:	7bfb      	ldrb	r3, [r7, #15]
 80147be:	4618      	mov	r0, r3
 80147c0:	f000 f860 	bl	8014884 <USBD_Get_USB_Status>
 80147c4:	4603      	mov	r3, r0
 80147c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80147c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	3710      	adds	r7, #16
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}

080147d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80147d2:	b580      	push	{r7, lr}
 80147d4:	b086      	sub	sp, #24
 80147d6:	af00      	add	r7, sp, #0
 80147d8:	60f8      	str	r0, [r7, #12]
 80147da:	607a      	str	r2, [r7, #4]
 80147dc:	461a      	mov	r2, r3
 80147de:	460b      	mov	r3, r1
 80147e0:	72fb      	strb	r3, [r7, #11]
 80147e2:	4613      	mov	r3, r2
 80147e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80147e6:	2300      	movs	r3, #0
 80147e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80147ea:	2300      	movs	r3, #0
 80147ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80147f4:	893b      	ldrh	r3, [r7, #8]
 80147f6:	7af9      	ldrb	r1, [r7, #11]
 80147f8:	687a      	ldr	r2, [r7, #4]
 80147fa:	f7f3 fb61 	bl	8007ec0 <HAL_PCD_EP_Transmit>
 80147fe:	4603      	mov	r3, r0
 8014800:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8014802:	7dfb      	ldrb	r3, [r7, #23]
 8014804:	4618      	mov	r0, r3
 8014806:	f000 f83d 	bl	8014884 <USBD_Get_USB_Status>
 801480a:	4603      	mov	r3, r0
 801480c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801480e:	7dbb      	ldrb	r3, [r7, #22]
}
 8014810:	4618      	mov	r0, r3
 8014812:	3718      	adds	r7, #24
 8014814:	46bd      	mov	sp, r7
 8014816:	bd80      	pop	{r7, pc}

08014818 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b086      	sub	sp, #24
 801481c:	af00      	add	r7, sp, #0
 801481e:	60f8      	str	r0, [r7, #12]
 8014820:	607a      	str	r2, [r7, #4]
 8014822:	461a      	mov	r2, r3
 8014824:	460b      	mov	r3, r1
 8014826:	72fb      	strb	r3, [r7, #11]
 8014828:	4613      	mov	r3, r2
 801482a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801482c:	2300      	movs	r3, #0
 801482e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014830:	2300      	movs	r3, #0
 8014832:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801483a:	893b      	ldrh	r3, [r7, #8]
 801483c:	7af9      	ldrb	r1, [r7, #11]
 801483e:	687a      	ldr	r2, [r7, #4]
 8014840:	f7f3 fadb 	bl	8007dfa <HAL_PCD_EP_Receive>
 8014844:	4603      	mov	r3, r0
 8014846:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8014848:	7dfb      	ldrb	r3, [r7, #23]
 801484a:	4618      	mov	r0, r3
 801484c:	f000 f81a 	bl	8014884 <USBD_Get_USB_Status>
 8014850:	4603      	mov	r3, r0
 8014852:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8014854:	7dbb      	ldrb	r3, [r7, #22]
}
 8014856:	4618      	mov	r0, r3
 8014858:	3718      	adds	r7, #24
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}

0801485e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801485e:	b580      	push	{r7, lr}
 8014860:	b082      	sub	sp, #8
 8014862:	af00      	add	r7, sp, #0
 8014864:	6078      	str	r0, [r7, #4]
 8014866:	460b      	mov	r3, r1
 8014868:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8014870:	78fa      	ldrb	r2, [r7, #3]
 8014872:	4611      	mov	r1, r2
 8014874:	4618      	mov	r0, r3
 8014876:	f7f3 fb0b 	bl	8007e90 <HAL_PCD_EP_GetRxCount>
 801487a:	4603      	mov	r3, r0
}
 801487c:	4618      	mov	r0, r3
 801487e:	3708      	adds	r7, #8
 8014880:	46bd      	mov	sp, r7
 8014882:	bd80      	pop	{r7, pc}

08014884 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014884:	b480      	push	{r7}
 8014886:	b085      	sub	sp, #20
 8014888:	af00      	add	r7, sp, #0
 801488a:	4603      	mov	r3, r0
 801488c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801488e:	2300      	movs	r3, #0
 8014890:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014892:	79fb      	ldrb	r3, [r7, #7]
 8014894:	2b03      	cmp	r3, #3
 8014896:	d817      	bhi.n	80148c8 <USBD_Get_USB_Status+0x44>
 8014898:	a201      	add	r2, pc, #4	; (adr r2, 80148a0 <USBD_Get_USB_Status+0x1c>)
 801489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801489e:	bf00      	nop
 80148a0:	080148b1 	.word	0x080148b1
 80148a4:	080148b7 	.word	0x080148b7
 80148a8:	080148bd 	.word	0x080148bd
 80148ac:	080148c3 	.word	0x080148c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80148b0:	2300      	movs	r3, #0
 80148b2:	73fb      	strb	r3, [r7, #15]
    break;
 80148b4:	e00b      	b.n	80148ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80148b6:	2302      	movs	r3, #2
 80148b8:	73fb      	strb	r3, [r7, #15]
    break;
 80148ba:	e008      	b.n	80148ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80148bc:	2301      	movs	r3, #1
 80148be:	73fb      	strb	r3, [r7, #15]
    break;
 80148c0:	e005      	b.n	80148ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80148c2:	2302      	movs	r3, #2
 80148c4:	73fb      	strb	r3, [r7, #15]
    break;
 80148c6:	e002      	b.n	80148ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80148c8:	2302      	movs	r3, #2
 80148ca:	73fb      	strb	r3, [r7, #15]
    break;
 80148cc:	bf00      	nop
  }
  return usb_status;
 80148ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80148d0:	4618      	mov	r0, r3
 80148d2:	3714      	adds	r7, #20
 80148d4:	46bd      	mov	sp, r7
 80148d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148da:	4770      	bx	lr

080148dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80148dc:	b480      	push	{r7}
 80148de:	b083      	sub	sp, #12
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	4603      	mov	r3, r0
 80148e4:	6039      	str	r1, [r7, #0]
 80148e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	2212      	movs	r2, #18
 80148ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80148ee:	4b03      	ldr	r3, [pc, #12]	; (80148fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	370c      	adds	r7, #12
 80148f4:	46bd      	mov	sp, r7
 80148f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fa:	4770      	bx	lr
 80148fc:	20000150 	.word	0x20000150

08014900 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014900:	b480      	push	{r7}
 8014902:	b083      	sub	sp, #12
 8014904:	af00      	add	r7, sp, #0
 8014906:	4603      	mov	r3, r0
 8014908:	6039      	str	r1, [r7, #0]
 801490a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	2204      	movs	r2, #4
 8014910:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014912:	4b03      	ldr	r3, [pc, #12]	; (8014920 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014914:	4618      	mov	r0, r3
 8014916:	370c      	adds	r7, #12
 8014918:	46bd      	mov	sp, r7
 801491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491e:	4770      	bx	lr
 8014920:	20000164 	.word	0x20000164

08014924 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014924:	b580      	push	{r7, lr}
 8014926:	b082      	sub	sp, #8
 8014928:	af00      	add	r7, sp, #0
 801492a:	4603      	mov	r3, r0
 801492c:	6039      	str	r1, [r7, #0]
 801492e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014930:	79fb      	ldrb	r3, [r7, #7]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d105      	bne.n	8014942 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014936:	683a      	ldr	r2, [r7, #0]
 8014938:	4907      	ldr	r1, [pc, #28]	; (8014958 <USBD_FS_ProductStrDescriptor+0x34>)
 801493a:	4808      	ldr	r0, [pc, #32]	; (801495c <USBD_FS_ProductStrDescriptor+0x38>)
 801493c:	f7fa fbbc 	bl	800f0b8 <USBD_GetString>
 8014940:	e004      	b.n	801494c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014942:	683a      	ldr	r2, [r7, #0]
 8014944:	4904      	ldr	r1, [pc, #16]	; (8014958 <USBD_FS_ProductStrDescriptor+0x34>)
 8014946:	4805      	ldr	r0, [pc, #20]	; (801495c <USBD_FS_ProductStrDescriptor+0x38>)
 8014948:	f7fa fbb6 	bl	800f0b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801494c:	4b02      	ldr	r3, [pc, #8]	; (8014958 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801494e:	4618      	mov	r0, r3
 8014950:	3708      	adds	r7, #8
 8014952:	46bd      	mov	sp, r7
 8014954:	bd80      	pop	{r7, pc}
 8014956:	bf00      	nop
 8014958:	200082a4 	.word	0x200082a4
 801495c:	0801aa68 	.word	0x0801aa68

08014960 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b082      	sub	sp, #8
 8014964:	af00      	add	r7, sp, #0
 8014966:	4603      	mov	r3, r0
 8014968:	6039      	str	r1, [r7, #0]
 801496a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801496c:	683a      	ldr	r2, [r7, #0]
 801496e:	4904      	ldr	r1, [pc, #16]	; (8014980 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014970:	4804      	ldr	r0, [pc, #16]	; (8014984 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014972:	f7fa fba1 	bl	800f0b8 <USBD_GetString>
  return USBD_StrDesc;
 8014976:	4b02      	ldr	r3, [pc, #8]	; (8014980 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014978:	4618      	mov	r0, r3
 801497a:	3708      	adds	r7, #8
 801497c:	46bd      	mov	sp, r7
 801497e:	bd80      	pop	{r7, pc}
 8014980:	200082a4 	.word	0x200082a4
 8014984:	0801aa74 	.word	0x0801aa74

08014988 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b082      	sub	sp, #8
 801498c:	af00      	add	r7, sp, #0
 801498e:	4603      	mov	r3, r0
 8014990:	6039      	str	r1, [r7, #0]
 8014992:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014994:	683b      	ldr	r3, [r7, #0]
 8014996:	221a      	movs	r2, #26
 8014998:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801499a:	f000 f843 	bl	8014a24 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 801499e:	4b02      	ldr	r3, [pc, #8]	; (80149a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	3708      	adds	r7, #8
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}
 80149a8:	20000168 	.word	0x20000168

080149ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b082      	sub	sp, #8
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	4603      	mov	r3, r0
 80149b4:	6039      	str	r1, [r7, #0]
 80149b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80149b8:	79fb      	ldrb	r3, [r7, #7]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d105      	bne.n	80149ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80149be:	683a      	ldr	r2, [r7, #0]
 80149c0:	4907      	ldr	r1, [pc, #28]	; (80149e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80149c2:	4808      	ldr	r0, [pc, #32]	; (80149e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80149c4:	f7fa fb78 	bl	800f0b8 <USBD_GetString>
 80149c8:	e004      	b.n	80149d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80149ca:	683a      	ldr	r2, [r7, #0]
 80149cc:	4904      	ldr	r1, [pc, #16]	; (80149e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80149ce:	4805      	ldr	r0, [pc, #20]	; (80149e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80149d0:	f7fa fb72 	bl	800f0b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80149d4:	4b02      	ldr	r3, [pc, #8]	; (80149e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3708      	adds	r7, #8
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd80      	pop	{r7, pc}
 80149de:	bf00      	nop
 80149e0:	200082a4 	.word	0x200082a4
 80149e4:	0801aa88 	.word	0x0801aa88

080149e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b082      	sub	sp, #8
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	4603      	mov	r3, r0
 80149f0:	6039      	str	r1, [r7, #0]
 80149f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80149f4:	79fb      	ldrb	r3, [r7, #7]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d105      	bne.n	8014a06 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80149fa:	683a      	ldr	r2, [r7, #0]
 80149fc:	4907      	ldr	r1, [pc, #28]	; (8014a1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80149fe:	4808      	ldr	r0, [pc, #32]	; (8014a20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014a00:	f7fa fb5a 	bl	800f0b8 <USBD_GetString>
 8014a04:	e004      	b.n	8014a10 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014a06:	683a      	ldr	r2, [r7, #0]
 8014a08:	4904      	ldr	r1, [pc, #16]	; (8014a1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014a0a:	4805      	ldr	r0, [pc, #20]	; (8014a20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014a0c:	f7fa fb54 	bl	800f0b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014a10:	4b02      	ldr	r3, [pc, #8]	; (8014a1c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014a12:	4618      	mov	r0, r3
 8014a14:	3708      	adds	r7, #8
 8014a16:	46bd      	mov	sp, r7
 8014a18:	bd80      	pop	{r7, pc}
 8014a1a:	bf00      	nop
 8014a1c:	200082a4 	.word	0x200082a4
 8014a20:	0801aa94 	.word	0x0801aa94

08014a24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b084      	sub	sp, #16
 8014a28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014a2a:	4b0f      	ldr	r3, [pc, #60]	; (8014a68 <Get_SerialNum+0x44>)
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014a30:	4b0e      	ldr	r3, [pc, #56]	; (8014a6c <Get_SerialNum+0x48>)
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014a36:	4b0e      	ldr	r3, [pc, #56]	; (8014a70 <Get_SerialNum+0x4c>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014a3c:	68fa      	ldr	r2, [r7, #12]
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	4413      	add	r3, r2
 8014a42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d009      	beq.n	8014a5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014a4a:	2208      	movs	r2, #8
 8014a4c:	4909      	ldr	r1, [pc, #36]	; (8014a74 <Get_SerialNum+0x50>)
 8014a4e:	68f8      	ldr	r0, [r7, #12]
 8014a50:	f000 f814 	bl	8014a7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014a54:	2204      	movs	r2, #4
 8014a56:	4908      	ldr	r1, [pc, #32]	; (8014a78 <Get_SerialNum+0x54>)
 8014a58:	68b8      	ldr	r0, [r7, #8]
 8014a5a:	f000 f80f 	bl	8014a7c <IntToUnicode>
  }
}
 8014a5e:	bf00      	nop
 8014a60:	3710      	adds	r7, #16
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}
 8014a66:	bf00      	nop
 8014a68:	1fff7a10 	.word	0x1fff7a10
 8014a6c:	1fff7a14 	.word	0x1fff7a14
 8014a70:	1fff7a18 	.word	0x1fff7a18
 8014a74:	2000016a 	.word	0x2000016a
 8014a78:	2000017a 	.word	0x2000017a

08014a7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014a7c:	b480      	push	{r7}
 8014a7e:	b087      	sub	sp, #28
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	60f8      	str	r0, [r7, #12]
 8014a84:	60b9      	str	r1, [r7, #8]
 8014a86:	4613      	mov	r3, r2
 8014a88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014a8e:	2300      	movs	r3, #0
 8014a90:	75fb      	strb	r3, [r7, #23]
 8014a92:	e027      	b.n	8014ae4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	0f1b      	lsrs	r3, r3, #28
 8014a98:	2b09      	cmp	r3, #9
 8014a9a:	d80b      	bhi.n	8014ab4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	0f1b      	lsrs	r3, r3, #28
 8014aa0:	b2da      	uxtb	r2, r3
 8014aa2:	7dfb      	ldrb	r3, [r7, #23]
 8014aa4:	005b      	lsls	r3, r3, #1
 8014aa6:	4619      	mov	r1, r3
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	440b      	add	r3, r1
 8014aac:	3230      	adds	r2, #48	; 0x30
 8014aae:	b2d2      	uxtb	r2, r2
 8014ab0:	701a      	strb	r2, [r3, #0]
 8014ab2:	e00a      	b.n	8014aca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	0f1b      	lsrs	r3, r3, #28
 8014ab8:	b2da      	uxtb	r2, r3
 8014aba:	7dfb      	ldrb	r3, [r7, #23]
 8014abc:	005b      	lsls	r3, r3, #1
 8014abe:	4619      	mov	r1, r3
 8014ac0:	68bb      	ldr	r3, [r7, #8]
 8014ac2:	440b      	add	r3, r1
 8014ac4:	3237      	adds	r2, #55	; 0x37
 8014ac6:	b2d2      	uxtb	r2, r2
 8014ac8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	011b      	lsls	r3, r3, #4
 8014ace:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014ad0:	7dfb      	ldrb	r3, [r7, #23]
 8014ad2:	005b      	lsls	r3, r3, #1
 8014ad4:	3301      	adds	r3, #1
 8014ad6:	68ba      	ldr	r2, [r7, #8]
 8014ad8:	4413      	add	r3, r2
 8014ada:	2200      	movs	r2, #0
 8014adc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014ade:	7dfb      	ldrb	r3, [r7, #23]
 8014ae0:	3301      	adds	r3, #1
 8014ae2:	75fb      	strb	r3, [r7, #23]
 8014ae4:	7dfa      	ldrb	r2, [r7, #23]
 8014ae6:	79fb      	ldrb	r3, [r7, #7]
 8014ae8:	429a      	cmp	r2, r3
 8014aea:	d3d3      	bcc.n	8014a94 <IntToUnicode+0x18>
  }
}
 8014aec:	bf00      	nop
 8014aee:	371c      	adds	r7, #28
 8014af0:	46bd      	mov	sp, r7
 8014af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af6:	4770      	bx	lr

08014af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8014af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8014b30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8014afc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8014afe:	e003      	b.n	8014b08 <LoopCopyDataInit>

08014b00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8014b00:	4b0c      	ldr	r3, [pc, #48]	; (8014b34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8014b02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8014b04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8014b06:	3104      	adds	r1, #4

08014b08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8014b08:	480b      	ldr	r0, [pc, #44]	; (8014b38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8014b0a:	4b0c      	ldr	r3, [pc, #48]	; (8014b3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8014b0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8014b0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8014b10:	d3f6      	bcc.n	8014b00 <CopyDataInit>
  ldr  r2, =_sbss
 8014b12:	4a0b      	ldr	r2, [pc, #44]	; (8014b40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8014b14:	e002      	b.n	8014b1c <LoopFillZerobss>

08014b16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8014b16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8014b18:	f842 3b04 	str.w	r3, [r2], #4

08014b1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8014b1c:	4b09      	ldr	r3, [pc, #36]	; (8014b44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8014b1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8014b20:	d3f9      	bcc.n	8014b16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8014b22:	f7ff fa89 	bl	8014038 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8014b26:	f000 f821 	bl	8014b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014b2a:	f7fe f8df 	bl	8012cec <main>
  bx  lr    
 8014b2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8014b30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8014b34:	0801aeb0 	.word	0x0801aeb0
  ldr  r0, =_sdata
 8014b38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8014b3c:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 8014b40:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 8014b44:	200084a8 	.word	0x200084a8

08014b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014b48:	e7fe      	b.n	8014b48 <ADC_IRQHandler>

08014b4a <atof>:
 8014b4a:	2100      	movs	r1, #0
 8014b4c:	f001 bde0 	b.w	8016710 <strtod>

08014b50 <atoi>:
 8014b50:	220a      	movs	r2, #10
 8014b52:	2100      	movs	r1, #0
 8014b54:	f001 be7e 	b.w	8016854 <strtol>

08014b58 <atol>:
 8014b58:	220a      	movs	r2, #10
 8014b5a:	2100      	movs	r1, #0
 8014b5c:	f001 be7a 	b.w	8016854 <strtol>

08014b60 <__errno>:
 8014b60:	4b01      	ldr	r3, [pc, #4]	; (8014b68 <__errno+0x8>)
 8014b62:	6818      	ldr	r0, [r3, #0]
 8014b64:	4770      	bx	lr
 8014b66:	bf00      	nop
 8014b68:	20000184 	.word	0x20000184

08014b6c <__libc_init_array>:
 8014b6c:	b570      	push	{r4, r5, r6, lr}
 8014b6e:	4e0d      	ldr	r6, [pc, #52]	; (8014ba4 <__libc_init_array+0x38>)
 8014b70:	4c0d      	ldr	r4, [pc, #52]	; (8014ba8 <__libc_init_array+0x3c>)
 8014b72:	1ba4      	subs	r4, r4, r6
 8014b74:	10a4      	asrs	r4, r4, #2
 8014b76:	2500      	movs	r5, #0
 8014b78:	42a5      	cmp	r5, r4
 8014b7a:	d109      	bne.n	8014b90 <__libc_init_array+0x24>
 8014b7c:	4e0b      	ldr	r6, [pc, #44]	; (8014bac <__libc_init_array+0x40>)
 8014b7e:	4c0c      	ldr	r4, [pc, #48]	; (8014bb0 <__libc_init_array+0x44>)
 8014b80:	f005 fb58 	bl	801a234 <_init>
 8014b84:	1ba4      	subs	r4, r4, r6
 8014b86:	10a4      	asrs	r4, r4, #2
 8014b88:	2500      	movs	r5, #0
 8014b8a:	42a5      	cmp	r5, r4
 8014b8c:	d105      	bne.n	8014b9a <__libc_init_array+0x2e>
 8014b8e:	bd70      	pop	{r4, r5, r6, pc}
 8014b90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014b94:	4798      	blx	r3
 8014b96:	3501      	adds	r5, #1
 8014b98:	e7ee      	b.n	8014b78 <__libc_init_array+0xc>
 8014b9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014b9e:	4798      	blx	r3
 8014ba0:	3501      	adds	r5, #1
 8014ba2:	e7f2      	b.n	8014b8a <__libc_init_array+0x1e>
 8014ba4:	0801aea8 	.word	0x0801aea8
 8014ba8:	0801aea8 	.word	0x0801aea8
 8014bac:	0801aea8 	.word	0x0801aea8
 8014bb0:	0801aeac 	.word	0x0801aeac

08014bb4 <malloc>:
 8014bb4:	4b02      	ldr	r3, [pc, #8]	; (8014bc0 <malloc+0xc>)
 8014bb6:	4601      	mov	r1, r0
 8014bb8:	6818      	ldr	r0, [r3, #0]
 8014bba:	f000 b86d 	b.w	8014c98 <_malloc_r>
 8014bbe:	bf00      	nop
 8014bc0:	20000184 	.word	0x20000184

08014bc4 <free>:
 8014bc4:	4b02      	ldr	r3, [pc, #8]	; (8014bd0 <free+0xc>)
 8014bc6:	4601      	mov	r1, r0
 8014bc8:	6818      	ldr	r0, [r3, #0]
 8014bca:	f000 b817 	b.w	8014bfc <_free_r>
 8014bce:	bf00      	nop
 8014bd0:	20000184 	.word	0x20000184

08014bd4 <memcpy>:
 8014bd4:	b510      	push	{r4, lr}
 8014bd6:	1e43      	subs	r3, r0, #1
 8014bd8:	440a      	add	r2, r1
 8014bda:	4291      	cmp	r1, r2
 8014bdc:	d100      	bne.n	8014be0 <memcpy+0xc>
 8014bde:	bd10      	pop	{r4, pc}
 8014be0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014be4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014be8:	e7f7      	b.n	8014bda <memcpy+0x6>

08014bea <memset>:
 8014bea:	4402      	add	r2, r0
 8014bec:	4603      	mov	r3, r0
 8014bee:	4293      	cmp	r3, r2
 8014bf0:	d100      	bne.n	8014bf4 <memset+0xa>
 8014bf2:	4770      	bx	lr
 8014bf4:	f803 1b01 	strb.w	r1, [r3], #1
 8014bf8:	e7f9      	b.n	8014bee <memset+0x4>
	...

08014bfc <_free_r>:
 8014bfc:	b538      	push	{r3, r4, r5, lr}
 8014bfe:	4605      	mov	r5, r0
 8014c00:	2900      	cmp	r1, #0
 8014c02:	d045      	beq.n	8014c90 <_free_r+0x94>
 8014c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c08:	1f0c      	subs	r4, r1, #4
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	bfb8      	it	lt
 8014c0e:	18e4      	addlt	r4, r4, r3
 8014c10:	f002 ffc6 	bl	8017ba0 <__malloc_lock>
 8014c14:	4a1f      	ldr	r2, [pc, #124]	; (8014c94 <_free_r+0x98>)
 8014c16:	6813      	ldr	r3, [r2, #0]
 8014c18:	4610      	mov	r0, r2
 8014c1a:	b933      	cbnz	r3, 8014c2a <_free_r+0x2e>
 8014c1c:	6063      	str	r3, [r4, #4]
 8014c1e:	6014      	str	r4, [r2, #0]
 8014c20:	4628      	mov	r0, r5
 8014c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c26:	f002 bfbc 	b.w	8017ba2 <__malloc_unlock>
 8014c2a:	42a3      	cmp	r3, r4
 8014c2c:	d90c      	bls.n	8014c48 <_free_r+0x4c>
 8014c2e:	6821      	ldr	r1, [r4, #0]
 8014c30:	1862      	adds	r2, r4, r1
 8014c32:	4293      	cmp	r3, r2
 8014c34:	bf04      	itt	eq
 8014c36:	681a      	ldreq	r2, [r3, #0]
 8014c38:	685b      	ldreq	r3, [r3, #4]
 8014c3a:	6063      	str	r3, [r4, #4]
 8014c3c:	bf04      	itt	eq
 8014c3e:	1852      	addeq	r2, r2, r1
 8014c40:	6022      	streq	r2, [r4, #0]
 8014c42:	6004      	str	r4, [r0, #0]
 8014c44:	e7ec      	b.n	8014c20 <_free_r+0x24>
 8014c46:	4613      	mov	r3, r2
 8014c48:	685a      	ldr	r2, [r3, #4]
 8014c4a:	b10a      	cbz	r2, 8014c50 <_free_r+0x54>
 8014c4c:	42a2      	cmp	r2, r4
 8014c4e:	d9fa      	bls.n	8014c46 <_free_r+0x4a>
 8014c50:	6819      	ldr	r1, [r3, #0]
 8014c52:	1858      	adds	r0, r3, r1
 8014c54:	42a0      	cmp	r0, r4
 8014c56:	d10b      	bne.n	8014c70 <_free_r+0x74>
 8014c58:	6820      	ldr	r0, [r4, #0]
 8014c5a:	4401      	add	r1, r0
 8014c5c:	1858      	adds	r0, r3, r1
 8014c5e:	4282      	cmp	r2, r0
 8014c60:	6019      	str	r1, [r3, #0]
 8014c62:	d1dd      	bne.n	8014c20 <_free_r+0x24>
 8014c64:	6810      	ldr	r0, [r2, #0]
 8014c66:	6852      	ldr	r2, [r2, #4]
 8014c68:	605a      	str	r2, [r3, #4]
 8014c6a:	4401      	add	r1, r0
 8014c6c:	6019      	str	r1, [r3, #0]
 8014c6e:	e7d7      	b.n	8014c20 <_free_r+0x24>
 8014c70:	d902      	bls.n	8014c78 <_free_r+0x7c>
 8014c72:	230c      	movs	r3, #12
 8014c74:	602b      	str	r3, [r5, #0]
 8014c76:	e7d3      	b.n	8014c20 <_free_r+0x24>
 8014c78:	6820      	ldr	r0, [r4, #0]
 8014c7a:	1821      	adds	r1, r4, r0
 8014c7c:	428a      	cmp	r2, r1
 8014c7e:	bf04      	itt	eq
 8014c80:	6811      	ldreq	r1, [r2, #0]
 8014c82:	6852      	ldreq	r2, [r2, #4]
 8014c84:	6062      	str	r2, [r4, #4]
 8014c86:	bf04      	itt	eq
 8014c88:	1809      	addeq	r1, r1, r0
 8014c8a:	6021      	streq	r1, [r4, #0]
 8014c8c:	605c      	str	r4, [r3, #4]
 8014c8e:	e7c7      	b.n	8014c20 <_free_r+0x24>
 8014c90:	bd38      	pop	{r3, r4, r5, pc}
 8014c92:	bf00      	nop
 8014c94:	200007c0 	.word	0x200007c0

08014c98 <_malloc_r>:
 8014c98:	b570      	push	{r4, r5, r6, lr}
 8014c9a:	1ccd      	adds	r5, r1, #3
 8014c9c:	f025 0503 	bic.w	r5, r5, #3
 8014ca0:	3508      	adds	r5, #8
 8014ca2:	2d0c      	cmp	r5, #12
 8014ca4:	bf38      	it	cc
 8014ca6:	250c      	movcc	r5, #12
 8014ca8:	2d00      	cmp	r5, #0
 8014caa:	4606      	mov	r6, r0
 8014cac:	db01      	blt.n	8014cb2 <_malloc_r+0x1a>
 8014cae:	42a9      	cmp	r1, r5
 8014cb0:	d903      	bls.n	8014cba <_malloc_r+0x22>
 8014cb2:	230c      	movs	r3, #12
 8014cb4:	6033      	str	r3, [r6, #0]
 8014cb6:	2000      	movs	r0, #0
 8014cb8:	bd70      	pop	{r4, r5, r6, pc}
 8014cba:	f002 ff71 	bl	8017ba0 <__malloc_lock>
 8014cbe:	4a21      	ldr	r2, [pc, #132]	; (8014d44 <_malloc_r+0xac>)
 8014cc0:	6814      	ldr	r4, [r2, #0]
 8014cc2:	4621      	mov	r1, r4
 8014cc4:	b991      	cbnz	r1, 8014cec <_malloc_r+0x54>
 8014cc6:	4c20      	ldr	r4, [pc, #128]	; (8014d48 <_malloc_r+0xb0>)
 8014cc8:	6823      	ldr	r3, [r4, #0]
 8014cca:	b91b      	cbnz	r3, 8014cd4 <_malloc_r+0x3c>
 8014ccc:	4630      	mov	r0, r6
 8014cce:	f000 fe7b 	bl	80159c8 <_sbrk_r>
 8014cd2:	6020      	str	r0, [r4, #0]
 8014cd4:	4629      	mov	r1, r5
 8014cd6:	4630      	mov	r0, r6
 8014cd8:	f000 fe76 	bl	80159c8 <_sbrk_r>
 8014cdc:	1c43      	adds	r3, r0, #1
 8014cde:	d124      	bne.n	8014d2a <_malloc_r+0x92>
 8014ce0:	230c      	movs	r3, #12
 8014ce2:	6033      	str	r3, [r6, #0]
 8014ce4:	4630      	mov	r0, r6
 8014ce6:	f002 ff5c 	bl	8017ba2 <__malloc_unlock>
 8014cea:	e7e4      	b.n	8014cb6 <_malloc_r+0x1e>
 8014cec:	680b      	ldr	r3, [r1, #0]
 8014cee:	1b5b      	subs	r3, r3, r5
 8014cf0:	d418      	bmi.n	8014d24 <_malloc_r+0x8c>
 8014cf2:	2b0b      	cmp	r3, #11
 8014cf4:	d90f      	bls.n	8014d16 <_malloc_r+0x7e>
 8014cf6:	600b      	str	r3, [r1, #0]
 8014cf8:	50cd      	str	r5, [r1, r3]
 8014cfa:	18cc      	adds	r4, r1, r3
 8014cfc:	4630      	mov	r0, r6
 8014cfe:	f002 ff50 	bl	8017ba2 <__malloc_unlock>
 8014d02:	f104 000b 	add.w	r0, r4, #11
 8014d06:	1d23      	adds	r3, r4, #4
 8014d08:	f020 0007 	bic.w	r0, r0, #7
 8014d0c:	1ac3      	subs	r3, r0, r3
 8014d0e:	d0d3      	beq.n	8014cb8 <_malloc_r+0x20>
 8014d10:	425a      	negs	r2, r3
 8014d12:	50e2      	str	r2, [r4, r3]
 8014d14:	e7d0      	b.n	8014cb8 <_malloc_r+0x20>
 8014d16:	428c      	cmp	r4, r1
 8014d18:	684b      	ldr	r3, [r1, #4]
 8014d1a:	bf16      	itet	ne
 8014d1c:	6063      	strne	r3, [r4, #4]
 8014d1e:	6013      	streq	r3, [r2, #0]
 8014d20:	460c      	movne	r4, r1
 8014d22:	e7eb      	b.n	8014cfc <_malloc_r+0x64>
 8014d24:	460c      	mov	r4, r1
 8014d26:	6849      	ldr	r1, [r1, #4]
 8014d28:	e7cc      	b.n	8014cc4 <_malloc_r+0x2c>
 8014d2a:	1cc4      	adds	r4, r0, #3
 8014d2c:	f024 0403 	bic.w	r4, r4, #3
 8014d30:	42a0      	cmp	r0, r4
 8014d32:	d005      	beq.n	8014d40 <_malloc_r+0xa8>
 8014d34:	1a21      	subs	r1, r4, r0
 8014d36:	4630      	mov	r0, r6
 8014d38:	f000 fe46 	bl	80159c8 <_sbrk_r>
 8014d3c:	3001      	adds	r0, #1
 8014d3e:	d0cf      	beq.n	8014ce0 <_malloc_r+0x48>
 8014d40:	6025      	str	r5, [r4, #0]
 8014d42:	e7db      	b.n	8014cfc <_malloc_r+0x64>
 8014d44:	200007c0 	.word	0x200007c0
 8014d48:	200007c4 	.word	0x200007c4

08014d4c <__cvt>:
 8014d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014d50:	ec55 4b10 	vmov	r4, r5, d0
 8014d54:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014d56:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014d5a:	2d00      	cmp	r5, #0
 8014d5c:	460e      	mov	r6, r1
 8014d5e:	4691      	mov	r9, r2
 8014d60:	4619      	mov	r1, r3
 8014d62:	bfb8      	it	lt
 8014d64:	4622      	movlt	r2, r4
 8014d66:	462b      	mov	r3, r5
 8014d68:	f027 0720 	bic.w	r7, r7, #32
 8014d6c:	bfbb      	ittet	lt
 8014d6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014d72:	461d      	movlt	r5, r3
 8014d74:	2300      	movge	r3, #0
 8014d76:	232d      	movlt	r3, #45	; 0x2d
 8014d78:	bfb8      	it	lt
 8014d7a:	4614      	movlt	r4, r2
 8014d7c:	2f46      	cmp	r7, #70	; 0x46
 8014d7e:	700b      	strb	r3, [r1, #0]
 8014d80:	d004      	beq.n	8014d8c <__cvt+0x40>
 8014d82:	2f45      	cmp	r7, #69	; 0x45
 8014d84:	d100      	bne.n	8014d88 <__cvt+0x3c>
 8014d86:	3601      	adds	r6, #1
 8014d88:	2102      	movs	r1, #2
 8014d8a:	e000      	b.n	8014d8e <__cvt+0x42>
 8014d8c:	2103      	movs	r1, #3
 8014d8e:	ab03      	add	r3, sp, #12
 8014d90:	9301      	str	r3, [sp, #4]
 8014d92:	ab02      	add	r3, sp, #8
 8014d94:	9300      	str	r3, [sp, #0]
 8014d96:	4632      	mov	r2, r6
 8014d98:	4653      	mov	r3, sl
 8014d9a:	ec45 4b10 	vmov	d0, r4, r5
 8014d9e:	f001 fdfb 	bl	8016998 <_dtoa_r>
 8014da2:	2f47      	cmp	r7, #71	; 0x47
 8014da4:	4680      	mov	r8, r0
 8014da6:	d102      	bne.n	8014dae <__cvt+0x62>
 8014da8:	f019 0f01 	tst.w	r9, #1
 8014dac:	d026      	beq.n	8014dfc <__cvt+0xb0>
 8014dae:	2f46      	cmp	r7, #70	; 0x46
 8014db0:	eb08 0906 	add.w	r9, r8, r6
 8014db4:	d111      	bne.n	8014dda <__cvt+0x8e>
 8014db6:	f898 3000 	ldrb.w	r3, [r8]
 8014dba:	2b30      	cmp	r3, #48	; 0x30
 8014dbc:	d10a      	bne.n	8014dd4 <__cvt+0x88>
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	4620      	mov	r0, r4
 8014dc4:	4629      	mov	r1, r5
 8014dc6:	f7eb fe8f 	bl	8000ae8 <__aeabi_dcmpeq>
 8014dca:	b918      	cbnz	r0, 8014dd4 <__cvt+0x88>
 8014dcc:	f1c6 0601 	rsb	r6, r6, #1
 8014dd0:	f8ca 6000 	str.w	r6, [sl]
 8014dd4:	f8da 3000 	ldr.w	r3, [sl]
 8014dd8:	4499      	add	r9, r3
 8014dda:	2200      	movs	r2, #0
 8014ddc:	2300      	movs	r3, #0
 8014dde:	4620      	mov	r0, r4
 8014de0:	4629      	mov	r1, r5
 8014de2:	f7eb fe81 	bl	8000ae8 <__aeabi_dcmpeq>
 8014de6:	b938      	cbnz	r0, 8014df8 <__cvt+0xac>
 8014de8:	2230      	movs	r2, #48	; 0x30
 8014dea:	9b03      	ldr	r3, [sp, #12]
 8014dec:	454b      	cmp	r3, r9
 8014dee:	d205      	bcs.n	8014dfc <__cvt+0xb0>
 8014df0:	1c59      	adds	r1, r3, #1
 8014df2:	9103      	str	r1, [sp, #12]
 8014df4:	701a      	strb	r2, [r3, #0]
 8014df6:	e7f8      	b.n	8014dea <__cvt+0x9e>
 8014df8:	f8cd 900c 	str.w	r9, [sp, #12]
 8014dfc:	9b03      	ldr	r3, [sp, #12]
 8014dfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014e00:	eba3 0308 	sub.w	r3, r3, r8
 8014e04:	4640      	mov	r0, r8
 8014e06:	6013      	str	r3, [r2, #0]
 8014e08:	b004      	add	sp, #16
 8014e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014e0e <__exponent>:
 8014e0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e10:	2900      	cmp	r1, #0
 8014e12:	4604      	mov	r4, r0
 8014e14:	bfba      	itte	lt
 8014e16:	4249      	neglt	r1, r1
 8014e18:	232d      	movlt	r3, #45	; 0x2d
 8014e1a:	232b      	movge	r3, #43	; 0x2b
 8014e1c:	2909      	cmp	r1, #9
 8014e1e:	f804 2b02 	strb.w	r2, [r4], #2
 8014e22:	7043      	strb	r3, [r0, #1]
 8014e24:	dd20      	ble.n	8014e68 <__exponent+0x5a>
 8014e26:	f10d 0307 	add.w	r3, sp, #7
 8014e2a:	461f      	mov	r7, r3
 8014e2c:	260a      	movs	r6, #10
 8014e2e:	fb91 f5f6 	sdiv	r5, r1, r6
 8014e32:	fb06 1115 	mls	r1, r6, r5, r1
 8014e36:	3130      	adds	r1, #48	; 0x30
 8014e38:	2d09      	cmp	r5, #9
 8014e3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014e3e:	f103 32ff 	add.w	r2, r3, #4294967295
 8014e42:	4629      	mov	r1, r5
 8014e44:	dc09      	bgt.n	8014e5a <__exponent+0x4c>
 8014e46:	3130      	adds	r1, #48	; 0x30
 8014e48:	3b02      	subs	r3, #2
 8014e4a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014e4e:	42bb      	cmp	r3, r7
 8014e50:	4622      	mov	r2, r4
 8014e52:	d304      	bcc.n	8014e5e <__exponent+0x50>
 8014e54:	1a10      	subs	r0, r2, r0
 8014e56:	b003      	add	sp, #12
 8014e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e5a:	4613      	mov	r3, r2
 8014e5c:	e7e7      	b.n	8014e2e <__exponent+0x20>
 8014e5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e62:	f804 2b01 	strb.w	r2, [r4], #1
 8014e66:	e7f2      	b.n	8014e4e <__exponent+0x40>
 8014e68:	2330      	movs	r3, #48	; 0x30
 8014e6a:	4419      	add	r1, r3
 8014e6c:	7083      	strb	r3, [r0, #2]
 8014e6e:	1d02      	adds	r2, r0, #4
 8014e70:	70c1      	strb	r1, [r0, #3]
 8014e72:	e7ef      	b.n	8014e54 <__exponent+0x46>

08014e74 <_printf_float>:
 8014e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e78:	b08d      	sub	sp, #52	; 0x34
 8014e7a:	460c      	mov	r4, r1
 8014e7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014e80:	4616      	mov	r6, r2
 8014e82:	461f      	mov	r7, r3
 8014e84:	4605      	mov	r5, r0
 8014e86:	f002 fe6b 	bl	8017b60 <_localeconv_r>
 8014e8a:	6803      	ldr	r3, [r0, #0]
 8014e8c:	9304      	str	r3, [sp, #16]
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f7eb f9a8 	bl	80001e4 <strlen>
 8014e94:	2300      	movs	r3, #0
 8014e96:	930a      	str	r3, [sp, #40]	; 0x28
 8014e98:	f8d8 3000 	ldr.w	r3, [r8]
 8014e9c:	9005      	str	r0, [sp, #20]
 8014e9e:	3307      	adds	r3, #7
 8014ea0:	f023 0307 	bic.w	r3, r3, #7
 8014ea4:	f103 0208 	add.w	r2, r3, #8
 8014ea8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014eac:	f8d4 b000 	ldr.w	fp, [r4]
 8014eb0:	f8c8 2000 	str.w	r2, [r8]
 8014eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eb8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014ebc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014ec0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014ec4:	9307      	str	r3, [sp, #28]
 8014ec6:	f8cd 8018 	str.w	r8, [sp, #24]
 8014eca:	f04f 32ff 	mov.w	r2, #4294967295
 8014ece:	4ba7      	ldr	r3, [pc, #668]	; (801516c <_printf_float+0x2f8>)
 8014ed0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014ed4:	f7eb fe3a 	bl	8000b4c <__aeabi_dcmpun>
 8014ed8:	bb70      	cbnz	r0, 8014f38 <_printf_float+0xc4>
 8014eda:	f04f 32ff 	mov.w	r2, #4294967295
 8014ede:	4ba3      	ldr	r3, [pc, #652]	; (801516c <_printf_float+0x2f8>)
 8014ee0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014ee4:	f7eb fe14 	bl	8000b10 <__aeabi_dcmple>
 8014ee8:	bb30      	cbnz	r0, 8014f38 <_printf_float+0xc4>
 8014eea:	2200      	movs	r2, #0
 8014eec:	2300      	movs	r3, #0
 8014eee:	4640      	mov	r0, r8
 8014ef0:	4649      	mov	r1, r9
 8014ef2:	f7eb fe03 	bl	8000afc <__aeabi_dcmplt>
 8014ef6:	b110      	cbz	r0, 8014efe <_printf_float+0x8a>
 8014ef8:	232d      	movs	r3, #45	; 0x2d
 8014efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014efe:	4a9c      	ldr	r2, [pc, #624]	; (8015170 <_printf_float+0x2fc>)
 8014f00:	4b9c      	ldr	r3, [pc, #624]	; (8015174 <_printf_float+0x300>)
 8014f02:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014f06:	bf8c      	ite	hi
 8014f08:	4690      	movhi	r8, r2
 8014f0a:	4698      	movls	r8, r3
 8014f0c:	2303      	movs	r3, #3
 8014f0e:	f02b 0204 	bic.w	r2, fp, #4
 8014f12:	6123      	str	r3, [r4, #16]
 8014f14:	6022      	str	r2, [r4, #0]
 8014f16:	f04f 0900 	mov.w	r9, #0
 8014f1a:	9700      	str	r7, [sp, #0]
 8014f1c:	4633      	mov	r3, r6
 8014f1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8014f20:	4621      	mov	r1, r4
 8014f22:	4628      	mov	r0, r5
 8014f24:	f000 f9e6 	bl	80152f4 <_printf_common>
 8014f28:	3001      	adds	r0, #1
 8014f2a:	f040 808d 	bne.w	8015048 <_printf_float+0x1d4>
 8014f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8014f32:	b00d      	add	sp, #52	; 0x34
 8014f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f38:	4642      	mov	r2, r8
 8014f3a:	464b      	mov	r3, r9
 8014f3c:	4640      	mov	r0, r8
 8014f3e:	4649      	mov	r1, r9
 8014f40:	f7eb fe04 	bl	8000b4c <__aeabi_dcmpun>
 8014f44:	b110      	cbz	r0, 8014f4c <_printf_float+0xd8>
 8014f46:	4a8c      	ldr	r2, [pc, #560]	; (8015178 <_printf_float+0x304>)
 8014f48:	4b8c      	ldr	r3, [pc, #560]	; (801517c <_printf_float+0x308>)
 8014f4a:	e7da      	b.n	8014f02 <_printf_float+0x8e>
 8014f4c:	6861      	ldr	r1, [r4, #4]
 8014f4e:	1c4b      	adds	r3, r1, #1
 8014f50:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014f54:	a80a      	add	r0, sp, #40	; 0x28
 8014f56:	d13e      	bne.n	8014fd6 <_printf_float+0x162>
 8014f58:	2306      	movs	r3, #6
 8014f5a:	6063      	str	r3, [r4, #4]
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014f62:	ab09      	add	r3, sp, #36	; 0x24
 8014f64:	9300      	str	r3, [sp, #0]
 8014f66:	ec49 8b10 	vmov	d0, r8, r9
 8014f6a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014f6e:	6022      	str	r2, [r4, #0]
 8014f70:	f8cd a004 	str.w	sl, [sp, #4]
 8014f74:	6861      	ldr	r1, [r4, #4]
 8014f76:	4628      	mov	r0, r5
 8014f78:	f7ff fee8 	bl	8014d4c <__cvt>
 8014f7c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014f80:	2b47      	cmp	r3, #71	; 0x47
 8014f82:	4680      	mov	r8, r0
 8014f84:	d109      	bne.n	8014f9a <_printf_float+0x126>
 8014f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f88:	1cd8      	adds	r0, r3, #3
 8014f8a:	db02      	blt.n	8014f92 <_printf_float+0x11e>
 8014f8c:	6862      	ldr	r2, [r4, #4]
 8014f8e:	4293      	cmp	r3, r2
 8014f90:	dd47      	ble.n	8015022 <_printf_float+0x1ae>
 8014f92:	f1aa 0a02 	sub.w	sl, sl, #2
 8014f96:	fa5f fa8a 	uxtb.w	sl, sl
 8014f9a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014f9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014fa0:	d824      	bhi.n	8014fec <_printf_float+0x178>
 8014fa2:	3901      	subs	r1, #1
 8014fa4:	4652      	mov	r2, sl
 8014fa6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014faa:	9109      	str	r1, [sp, #36]	; 0x24
 8014fac:	f7ff ff2f 	bl	8014e0e <__exponent>
 8014fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014fb2:	1813      	adds	r3, r2, r0
 8014fb4:	2a01      	cmp	r2, #1
 8014fb6:	4681      	mov	r9, r0
 8014fb8:	6123      	str	r3, [r4, #16]
 8014fba:	dc02      	bgt.n	8014fc2 <_printf_float+0x14e>
 8014fbc:	6822      	ldr	r2, [r4, #0]
 8014fbe:	07d1      	lsls	r1, r2, #31
 8014fc0:	d501      	bpl.n	8014fc6 <_printf_float+0x152>
 8014fc2:	3301      	adds	r3, #1
 8014fc4:	6123      	str	r3, [r4, #16]
 8014fc6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d0a5      	beq.n	8014f1a <_printf_float+0xa6>
 8014fce:	232d      	movs	r3, #45	; 0x2d
 8014fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014fd4:	e7a1      	b.n	8014f1a <_printf_float+0xa6>
 8014fd6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014fda:	f000 8177 	beq.w	80152cc <_printf_float+0x458>
 8014fde:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014fe2:	d1bb      	bne.n	8014f5c <_printf_float+0xe8>
 8014fe4:	2900      	cmp	r1, #0
 8014fe6:	d1b9      	bne.n	8014f5c <_printf_float+0xe8>
 8014fe8:	2301      	movs	r3, #1
 8014fea:	e7b6      	b.n	8014f5a <_printf_float+0xe6>
 8014fec:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014ff0:	d119      	bne.n	8015026 <_printf_float+0x1b2>
 8014ff2:	2900      	cmp	r1, #0
 8014ff4:	6863      	ldr	r3, [r4, #4]
 8014ff6:	dd0c      	ble.n	8015012 <_printf_float+0x19e>
 8014ff8:	6121      	str	r1, [r4, #16]
 8014ffa:	b913      	cbnz	r3, 8015002 <_printf_float+0x18e>
 8014ffc:	6822      	ldr	r2, [r4, #0]
 8014ffe:	07d2      	lsls	r2, r2, #31
 8015000:	d502      	bpl.n	8015008 <_printf_float+0x194>
 8015002:	3301      	adds	r3, #1
 8015004:	440b      	add	r3, r1
 8015006:	6123      	str	r3, [r4, #16]
 8015008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801500a:	65a3      	str	r3, [r4, #88]	; 0x58
 801500c:	f04f 0900 	mov.w	r9, #0
 8015010:	e7d9      	b.n	8014fc6 <_printf_float+0x152>
 8015012:	b913      	cbnz	r3, 801501a <_printf_float+0x1a6>
 8015014:	6822      	ldr	r2, [r4, #0]
 8015016:	07d0      	lsls	r0, r2, #31
 8015018:	d501      	bpl.n	801501e <_printf_float+0x1aa>
 801501a:	3302      	adds	r3, #2
 801501c:	e7f3      	b.n	8015006 <_printf_float+0x192>
 801501e:	2301      	movs	r3, #1
 8015020:	e7f1      	b.n	8015006 <_printf_float+0x192>
 8015022:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015026:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801502a:	4293      	cmp	r3, r2
 801502c:	db05      	blt.n	801503a <_printf_float+0x1c6>
 801502e:	6822      	ldr	r2, [r4, #0]
 8015030:	6123      	str	r3, [r4, #16]
 8015032:	07d1      	lsls	r1, r2, #31
 8015034:	d5e8      	bpl.n	8015008 <_printf_float+0x194>
 8015036:	3301      	adds	r3, #1
 8015038:	e7e5      	b.n	8015006 <_printf_float+0x192>
 801503a:	2b00      	cmp	r3, #0
 801503c:	bfd4      	ite	le
 801503e:	f1c3 0302 	rsble	r3, r3, #2
 8015042:	2301      	movgt	r3, #1
 8015044:	4413      	add	r3, r2
 8015046:	e7de      	b.n	8015006 <_printf_float+0x192>
 8015048:	6823      	ldr	r3, [r4, #0]
 801504a:	055a      	lsls	r2, r3, #21
 801504c:	d407      	bmi.n	801505e <_printf_float+0x1ea>
 801504e:	6923      	ldr	r3, [r4, #16]
 8015050:	4642      	mov	r2, r8
 8015052:	4631      	mov	r1, r6
 8015054:	4628      	mov	r0, r5
 8015056:	47b8      	blx	r7
 8015058:	3001      	adds	r0, #1
 801505a:	d12b      	bne.n	80150b4 <_printf_float+0x240>
 801505c:	e767      	b.n	8014f2e <_printf_float+0xba>
 801505e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015062:	f240 80dc 	bls.w	801521e <_printf_float+0x3aa>
 8015066:	2200      	movs	r2, #0
 8015068:	2300      	movs	r3, #0
 801506a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801506e:	f7eb fd3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8015072:	2800      	cmp	r0, #0
 8015074:	d033      	beq.n	80150de <_printf_float+0x26a>
 8015076:	2301      	movs	r3, #1
 8015078:	4a41      	ldr	r2, [pc, #260]	; (8015180 <_printf_float+0x30c>)
 801507a:	4631      	mov	r1, r6
 801507c:	4628      	mov	r0, r5
 801507e:	47b8      	blx	r7
 8015080:	3001      	adds	r0, #1
 8015082:	f43f af54 	beq.w	8014f2e <_printf_float+0xba>
 8015086:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801508a:	429a      	cmp	r2, r3
 801508c:	db02      	blt.n	8015094 <_printf_float+0x220>
 801508e:	6823      	ldr	r3, [r4, #0]
 8015090:	07d8      	lsls	r0, r3, #31
 8015092:	d50f      	bpl.n	80150b4 <_printf_float+0x240>
 8015094:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015098:	4631      	mov	r1, r6
 801509a:	4628      	mov	r0, r5
 801509c:	47b8      	blx	r7
 801509e:	3001      	adds	r0, #1
 80150a0:	f43f af45 	beq.w	8014f2e <_printf_float+0xba>
 80150a4:	f04f 0800 	mov.w	r8, #0
 80150a8:	f104 091a 	add.w	r9, r4, #26
 80150ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150ae:	3b01      	subs	r3, #1
 80150b0:	4543      	cmp	r3, r8
 80150b2:	dc09      	bgt.n	80150c8 <_printf_float+0x254>
 80150b4:	6823      	ldr	r3, [r4, #0]
 80150b6:	079b      	lsls	r3, r3, #30
 80150b8:	f100 8103 	bmi.w	80152c2 <_printf_float+0x44e>
 80150bc:	68e0      	ldr	r0, [r4, #12]
 80150be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150c0:	4298      	cmp	r0, r3
 80150c2:	bfb8      	it	lt
 80150c4:	4618      	movlt	r0, r3
 80150c6:	e734      	b.n	8014f32 <_printf_float+0xbe>
 80150c8:	2301      	movs	r3, #1
 80150ca:	464a      	mov	r2, r9
 80150cc:	4631      	mov	r1, r6
 80150ce:	4628      	mov	r0, r5
 80150d0:	47b8      	blx	r7
 80150d2:	3001      	adds	r0, #1
 80150d4:	f43f af2b 	beq.w	8014f2e <_printf_float+0xba>
 80150d8:	f108 0801 	add.w	r8, r8, #1
 80150dc:	e7e6      	b.n	80150ac <_printf_float+0x238>
 80150de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	dc2b      	bgt.n	801513c <_printf_float+0x2c8>
 80150e4:	2301      	movs	r3, #1
 80150e6:	4a26      	ldr	r2, [pc, #152]	; (8015180 <_printf_float+0x30c>)
 80150e8:	4631      	mov	r1, r6
 80150ea:	4628      	mov	r0, r5
 80150ec:	47b8      	blx	r7
 80150ee:	3001      	adds	r0, #1
 80150f0:	f43f af1d 	beq.w	8014f2e <_printf_float+0xba>
 80150f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150f6:	b923      	cbnz	r3, 8015102 <_printf_float+0x28e>
 80150f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150fa:	b913      	cbnz	r3, 8015102 <_printf_float+0x28e>
 80150fc:	6823      	ldr	r3, [r4, #0]
 80150fe:	07d9      	lsls	r1, r3, #31
 8015100:	d5d8      	bpl.n	80150b4 <_printf_float+0x240>
 8015102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015106:	4631      	mov	r1, r6
 8015108:	4628      	mov	r0, r5
 801510a:	47b8      	blx	r7
 801510c:	3001      	adds	r0, #1
 801510e:	f43f af0e 	beq.w	8014f2e <_printf_float+0xba>
 8015112:	f04f 0900 	mov.w	r9, #0
 8015116:	f104 0a1a 	add.w	sl, r4, #26
 801511a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801511c:	425b      	negs	r3, r3
 801511e:	454b      	cmp	r3, r9
 8015120:	dc01      	bgt.n	8015126 <_printf_float+0x2b2>
 8015122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015124:	e794      	b.n	8015050 <_printf_float+0x1dc>
 8015126:	2301      	movs	r3, #1
 8015128:	4652      	mov	r2, sl
 801512a:	4631      	mov	r1, r6
 801512c:	4628      	mov	r0, r5
 801512e:	47b8      	blx	r7
 8015130:	3001      	adds	r0, #1
 8015132:	f43f aefc 	beq.w	8014f2e <_printf_float+0xba>
 8015136:	f109 0901 	add.w	r9, r9, #1
 801513a:	e7ee      	b.n	801511a <_printf_float+0x2a6>
 801513c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801513e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015140:	429a      	cmp	r2, r3
 8015142:	bfa8      	it	ge
 8015144:	461a      	movge	r2, r3
 8015146:	2a00      	cmp	r2, #0
 8015148:	4691      	mov	r9, r2
 801514a:	dd07      	ble.n	801515c <_printf_float+0x2e8>
 801514c:	4613      	mov	r3, r2
 801514e:	4631      	mov	r1, r6
 8015150:	4642      	mov	r2, r8
 8015152:	4628      	mov	r0, r5
 8015154:	47b8      	blx	r7
 8015156:	3001      	adds	r0, #1
 8015158:	f43f aee9 	beq.w	8014f2e <_printf_float+0xba>
 801515c:	f104 031a 	add.w	r3, r4, #26
 8015160:	f04f 0b00 	mov.w	fp, #0
 8015164:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015168:	9306      	str	r3, [sp, #24]
 801516a:	e015      	b.n	8015198 <_printf_float+0x324>
 801516c:	7fefffff 	.word	0x7fefffff
 8015170:	0801ab5c 	.word	0x0801ab5c
 8015174:	0801ab58 	.word	0x0801ab58
 8015178:	0801ab64 	.word	0x0801ab64
 801517c:	0801ab60 	.word	0x0801ab60
 8015180:	0801ab68 	.word	0x0801ab68
 8015184:	2301      	movs	r3, #1
 8015186:	9a06      	ldr	r2, [sp, #24]
 8015188:	4631      	mov	r1, r6
 801518a:	4628      	mov	r0, r5
 801518c:	47b8      	blx	r7
 801518e:	3001      	adds	r0, #1
 8015190:	f43f aecd 	beq.w	8014f2e <_printf_float+0xba>
 8015194:	f10b 0b01 	add.w	fp, fp, #1
 8015198:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801519c:	ebaa 0309 	sub.w	r3, sl, r9
 80151a0:	455b      	cmp	r3, fp
 80151a2:	dcef      	bgt.n	8015184 <_printf_float+0x310>
 80151a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80151a8:	429a      	cmp	r2, r3
 80151aa:	44d0      	add	r8, sl
 80151ac:	db15      	blt.n	80151da <_printf_float+0x366>
 80151ae:	6823      	ldr	r3, [r4, #0]
 80151b0:	07da      	lsls	r2, r3, #31
 80151b2:	d412      	bmi.n	80151da <_printf_float+0x366>
 80151b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80151b8:	eba3 020a 	sub.w	r2, r3, sl
 80151bc:	eba3 0a01 	sub.w	sl, r3, r1
 80151c0:	4592      	cmp	sl, r2
 80151c2:	bfa8      	it	ge
 80151c4:	4692      	movge	sl, r2
 80151c6:	f1ba 0f00 	cmp.w	sl, #0
 80151ca:	dc0e      	bgt.n	80151ea <_printf_float+0x376>
 80151cc:	f04f 0800 	mov.w	r8, #0
 80151d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80151d4:	f104 091a 	add.w	r9, r4, #26
 80151d8:	e019      	b.n	801520e <_printf_float+0x39a>
 80151da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80151de:	4631      	mov	r1, r6
 80151e0:	4628      	mov	r0, r5
 80151e2:	47b8      	blx	r7
 80151e4:	3001      	adds	r0, #1
 80151e6:	d1e5      	bne.n	80151b4 <_printf_float+0x340>
 80151e8:	e6a1      	b.n	8014f2e <_printf_float+0xba>
 80151ea:	4653      	mov	r3, sl
 80151ec:	4642      	mov	r2, r8
 80151ee:	4631      	mov	r1, r6
 80151f0:	4628      	mov	r0, r5
 80151f2:	47b8      	blx	r7
 80151f4:	3001      	adds	r0, #1
 80151f6:	d1e9      	bne.n	80151cc <_printf_float+0x358>
 80151f8:	e699      	b.n	8014f2e <_printf_float+0xba>
 80151fa:	2301      	movs	r3, #1
 80151fc:	464a      	mov	r2, r9
 80151fe:	4631      	mov	r1, r6
 8015200:	4628      	mov	r0, r5
 8015202:	47b8      	blx	r7
 8015204:	3001      	adds	r0, #1
 8015206:	f43f ae92 	beq.w	8014f2e <_printf_float+0xba>
 801520a:	f108 0801 	add.w	r8, r8, #1
 801520e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015212:	1a9b      	subs	r3, r3, r2
 8015214:	eba3 030a 	sub.w	r3, r3, sl
 8015218:	4543      	cmp	r3, r8
 801521a:	dcee      	bgt.n	80151fa <_printf_float+0x386>
 801521c:	e74a      	b.n	80150b4 <_printf_float+0x240>
 801521e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015220:	2a01      	cmp	r2, #1
 8015222:	dc01      	bgt.n	8015228 <_printf_float+0x3b4>
 8015224:	07db      	lsls	r3, r3, #31
 8015226:	d53a      	bpl.n	801529e <_printf_float+0x42a>
 8015228:	2301      	movs	r3, #1
 801522a:	4642      	mov	r2, r8
 801522c:	4631      	mov	r1, r6
 801522e:	4628      	mov	r0, r5
 8015230:	47b8      	blx	r7
 8015232:	3001      	adds	r0, #1
 8015234:	f43f ae7b 	beq.w	8014f2e <_printf_float+0xba>
 8015238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801523c:	4631      	mov	r1, r6
 801523e:	4628      	mov	r0, r5
 8015240:	47b8      	blx	r7
 8015242:	3001      	adds	r0, #1
 8015244:	f108 0801 	add.w	r8, r8, #1
 8015248:	f43f ae71 	beq.w	8014f2e <_printf_float+0xba>
 801524c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801524e:	2200      	movs	r2, #0
 8015250:	f103 3aff 	add.w	sl, r3, #4294967295
 8015254:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015258:	2300      	movs	r3, #0
 801525a:	f7eb fc45 	bl	8000ae8 <__aeabi_dcmpeq>
 801525e:	b9c8      	cbnz	r0, 8015294 <_printf_float+0x420>
 8015260:	4653      	mov	r3, sl
 8015262:	4642      	mov	r2, r8
 8015264:	4631      	mov	r1, r6
 8015266:	4628      	mov	r0, r5
 8015268:	47b8      	blx	r7
 801526a:	3001      	adds	r0, #1
 801526c:	d10e      	bne.n	801528c <_printf_float+0x418>
 801526e:	e65e      	b.n	8014f2e <_printf_float+0xba>
 8015270:	2301      	movs	r3, #1
 8015272:	4652      	mov	r2, sl
 8015274:	4631      	mov	r1, r6
 8015276:	4628      	mov	r0, r5
 8015278:	47b8      	blx	r7
 801527a:	3001      	adds	r0, #1
 801527c:	f43f ae57 	beq.w	8014f2e <_printf_float+0xba>
 8015280:	f108 0801 	add.w	r8, r8, #1
 8015284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015286:	3b01      	subs	r3, #1
 8015288:	4543      	cmp	r3, r8
 801528a:	dcf1      	bgt.n	8015270 <_printf_float+0x3fc>
 801528c:	464b      	mov	r3, r9
 801528e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015292:	e6de      	b.n	8015052 <_printf_float+0x1de>
 8015294:	f04f 0800 	mov.w	r8, #0
 8015298:	f104 0a1a 	add.w	sl, r4, #26
 801529c:	e7f2      	b.n	8015284 <_printf_float+0x410>
 801529e:	2301      	movs	r3, #1
 80152a0:	e7df      	b.n	8015262 <_printf_float+0x3ee>
 80152a2:	2301      	movs	r3, #1
 80152a4:	464a      	mov	r2, r9
 80152a6:	4631      	mov	r1, r6
 80152a8:	4628      	mov	r0, r5
 80152aa:	47b8      	blx	r7
 80152ac:	3001      	adds	r0, #1
 80152ae:	f43f ae3e 	beq.w	8014f2e <_printf_float+0xba>
 80152b2:	f108 0801 	add.w	r8, r8, #1
 80152b6:	68e3      	ldr	r3, [r4, #12]
 80152b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80152ba:	1a9b      	subs	r3, r3, r2
 80152bc:	4543      	cmp	r3, r8
 80152be:	dcf0      	bgt.n	80152a2 <_printf_float+0x42e>
 80152c0:	e6fc      	b.n	80150bc <_printf_float+0x248>
 80152c2:	f04f 0800 	mov.w	r8, #0
 80152c6:	f104 0919 	add.w	r9, r4, #25
 80152ca:	e7f4      	b.n	80152b6 <_printf_float+0x442>
 80152cc:	2900      	cmp	r1, #0
 80152ce:	f43f ae8b 	beq.w	8014fe8 <_printf_float+0x174>
 80152d2:	2300      	movs	r3, #0
 80152d4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80152d8:	ab09      	add	r3, sp, #36	; 0x24
 80152da:	9300      	str	r3, [sp, #0]
 80152dc:	ec49 8b10 	vmov	d0, r8, r9
 80152e0:	6022      	str	r2, [r4, #0]
 80152e2:	f8cd a004 	str.w	sl, [sp, #4]
 80152e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80152ea:	4628      	mov	r0, r5
 80152ec:	f7ff fd2e 	bl	8014d4c <__cvt>
 80152f0:	4680      	mov	r8, r0
 80152f2:	e648      	b.n	8014f86 <_printf_float+0x112>

080152f4 <_printf_common>:
 80152f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152f8:	4691      	mov	r9, r2
 80152fa:	461f      	mov	r7, r3
 80152fc:	688a      	ldr	r2, [r1, #8]
 80152fe:	690b      	ldr	r3, [r1, #16]
 8015300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015304:	4293      	cmp	r3, r2
 8015306:	bfb8      	it	lt
 8015308:	4613      	movlt	r3, r2
 801530a:	f8c9 3000 	str.w	r3, [r9]
 801530e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015312:	4606      	mov	r6, r0
 8015314:	460c      	mov	r4, r1
 8015316:	b112      	cbz	r2, 801531e <_printf_common+0x2a>
 8015318:	3301      	adds	r3, #1
 801531a:	f8c9 3000 	str.w	r3, [r9]
 801531e:	6823      	ldr	r3, [r4, #0]
 8015320:	0699      	lsls	r1, r3, #26
 8015322:	bf42      	ittt	mi
 8015324:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015328:	3302      	addmi	r3, #2
 801532a:	f8c9 3000 	strmi.w	r3, [r9]
 801532e:	6825      	ldr	r5, [r4, #0]
 8015330:	f015 0506 	ands.w	r5, r5, #6
 8015334:	d107      	bne.n	8015346 <_printf_common+0x52>
 8015336:	f104 0a19 	add.w	sl, r4, #25
 801533a:	68e3      	ldr	r3, [r4, #12]
 801533c:	f8d9 2000 	ldr.w	r2, [r9]
 8015340:	1a9b      	subs	r3, r3, r2
 8015342:	42ab      	cmp	r3, r5
 8015344:	dc28      	bgt.n	8015398 <_printf_common+0xa4>
 8015346:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801534a:	6822      	ldr	r2, [r4, #0]
 801534c:	3300      	adds	r3, #0
 801534e:	bf18      	it	ne
 8015350:	2301      	movne	r3, #1
 8015352:	0692      	lsls	r2, r2, #26
 8015354:	d42d      	bmi.n	80153b2 <_printf_common+0xbe>
 8015356:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801535a:	4639      	mov	r1, r7
 801535c:	4630      	mov	r0, r6
 801535e:	47c0      	blx	r8
 8015360:	3001      	adds	r0, #1
 8015362:	d020      	beq.n	80153a6 <_printf_common+0xb2>
 8015364:	6823      	ldr	r3, [r4, #0]
 8015366:	68e5      	ldr	r5, [r4, #12]
 8015368:	f8d9 2000 	ldr.w	r2, [r9]
 801536c:	f003 0306 	and.w	r3, r3, #6
 8015370:	2b04      	cmp	r3, #4
 8015372:	bf08      	it	eq
 8015374:	1aad      	subeq	r5, r5, r2
 8015376:	68a3      	ldr	r3, [r4, #8]
 8015378:	6922      	ldr	r2, [r4, #16]
 801537a:	bf0c      	ite	eq
 801537c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015380:	2500      	movne	r5, #0
 8015382:	4293      	cmp	r3, r2
 8015384:	bfc4      	itt	gt
 8015386:	1a9b      	subgt	r3, r3, r2
 8015388:	18ed      	addgt	r5, r5, r3
 801538a:	f04f 0900 	mov.w	r9, #0
 801538e:	341a      	adds	r4, #26
 8015390:	454d      	cmp	r5, r9
 8015392:	d11a      	bne.n	80153ca <_printf_common+0xd6>
 8015394:	2000      	movs	r0, #0
 8015396:	e008      	b.n	80153aa <_printf_common+0xb6>
 8015398:	2301      	movs	r3, #1
 801539a:	4652      	mov	r2, sl
 801539c:	4639      	mov	r1, r7
 801539e:	4630      	mov	r0, r6
 80153a0:	47c0      	blx	r8
 80153a2:	3001      	adds	r0, #1
 80153a4:	d103      	bne.n	80153ae <_printf_common+0xba>
 80153a6:	f04f 30ff 	mov.w	r0, #4294967295
 80153aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153ae:	3501      	adds	r5, #1
 80153b0:	e7c3      	b.n	801533a <_printf_common+0x46>
 80153b2:	18e1      	adds	r1, r4, r3
 80153b4:	1c5a      	adds	r2, r3, #1
 80153b6:	2030      	movs	r0, #48	; 0x30
 80153b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80153bc:	4422      	add	r2, r4
 80153be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80153c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80153c6:	3302      	adds	r3, #2
 80153c8:	e7c5      	b.n	8015356 <_printf_common+0x62>
 80153ca:	2301      	movs	r3, #1
 80153cc:	4622      	mov	r2, r4
 80153ce:	4639      	mov	r1, r7
 80153d0:	4630      	mov	r0, r6
 80153d2:	47c0      	blx	r8
 80153d4:	3001      	adds	r0, #1
 80153d6:	d0e6      	beq.n	80153a6 <_printf_common+0xb2>
 80153d8:	f109 0901 	add.w	r9, r9, #1
 80153dc:	e7d8      	b.n	8015390 <_printf_common+0x9c>
	...

080153e0 <_printf_i>:
 80153e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80153e8:	460c      	mov	r4, r1
 80153ea:	7e09      	ldrb	r1, [r1, #24]
 80153ec:	b085      	sub	sp, #20
 80153ee:	296e      	cmp	r1, #110	; 0x6e
 80153f0:	4617      	mov	r7, r2
 80153f2:	4606      	mov	r6, r0
 80153f4:	4698      	mov	r8, r3
 80153f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153f8:	f000 80b3 	beq.w	8015562 <_printf_i+0x182>
 80153fc:	d822      	bhi.n	8015444 <_printf_i+0x64>
 80153fe:	2963      	cmp	r1, #99	; 0x63
 8015400:	d036      	beq.n	8015470 <_printf_i+0x90>
 8015402:	d80a      	bhi.n	801541a <_printf_i+0x3a>
 8015404:	2900      	cmp	r1, #0
 8015406:	f000 80b9 	beq.w	801557c <_printf_i+0x19c>
 801540a:	2958      	cmp	r1, #88	; 0x58
 801540c:	f000 8083 	beq.w	8015516 <_printf_i+0x136>
 8015410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015414:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015418:	e032      	b.n	8015480 <_printf_i+0xa0>
 801541a:	2964      	cmp	r1, #100	; 0x64
 801541c:	d001      	beq.n	8015422 <_printf_i+0x42>
 801541e:	2969      	cmp	r1, #105	; 0x69
 8015420:	d1f6      	bne.n	8015410 <_printf_i+0x30>
 8015422:	6820      	ldr	r0, [r4, #0]
 8015424:	6813      	ldr	r3, [r2, #0]
 8015426:	0605      	lsls	r5, r0, #24
 8015428:	f103 0104 	add.w	r1, r3, #4
 801542c:	d52a      	bpl.n	8015484 <_printf_i+0xa4>
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	6011      	str	r1, [r2, #0]
 8015432:	2b00      	cmp	r3, #0
 8015434:	da03      	bge.n	801543e <_printf_i+0x5e>
 8015436:	222d      	movs	r2, #45	; 0x2d
 8015438:	425b      	negs	r3, r3
 801543a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801543e:	486f      	ldr	r0, [pc, #444]	; (80155fc <_printf_i+0x21c>)
 8015440:	220a      	movs	r2, #10
 8015442:	e039      	b.n	80154b8 <_printf_i+0xd8>
 8015444:	2973      	cmp	r1, #115	; 0x73
 8015446:	f000 809d 	beq.w	8015584 <_printf_i+0x1a4>
 801544a:	d808      	bhi.n	801545e <_printf_i+0x7e>
 801544c:	296f      	cmp	r1, #111	; 0x6f
 801544e:	d020      	beq.n	8015492 <_printf_i+0xb2>
 8015450:	2970      	cmp	r1, #112	; 0x70
 8015452:	d1dd      	bne.n	8015410 <_printf_i+0x30>
 8015454:	6823      	ldr	r3, [r4, #0]
 8015456:	f043 0320 	orr.w	r3, r3, #32
 801545a:	6023      	str	r3, [r4, #0]
 801545c:	e003      	b.n	8015466 <_printf_i+0x86>
 801545e:	2975      	cmp	r1, #117	; 0x75
 8015460:	d017      	beq.n	8015492 <_printf_i+0xb2>
 8015462:	2978      	cmp	r1, #120	; 0x78
 8015464:	d1d4      	bne.n	8015410 <_printf_i+0x30>
 8015466:	2378      	movs	r3, #120	; 0x78
 8015468:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801546c:	4864      	ldr	r0, [pc, #400]	; (8015600 <_printf_i+0x220>)
 801546e:	e055      	b.n	801551c <_printf_i+0x13c>
 8015470:	6813      	ldr	r3, [r2, #0]
 8015472:	1d19      	adds	r1, r3, #4
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	6011      	str	r1, [r2, #0]
 8015478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801547c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015480:	2301      	movs	r3, #1
 8015482:	e08c      	b.n	801559e <_printf_i+0x1be>
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	6011      	str	r1, [r2, #0]
 8015488:	f010 0f40 	tst.w	r0, #64	; 0x40
 801548c:	bf18      	it	ne
 801548e:	b21b      	sxthne	r3, r3
 8015490:	e7cf      	b.n	8015432 <_printf_i+0x52>
 8015492:	6813      	ldr	r3, [r2, #0]
 8015494:	6825      	ldr	r5, [r4, #0]
 8015496:	1d18      	adds	r0, r3, #4
 8015498:	6010      	str	r0, [r2, #0]
 801549a:	0628      	lsls	r0, r5, #24
 801549c:	d501      	bpl.n	80154a2 <_printf_i+0xc2>
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	e002      	b.n	80154a8 <_printf_i+0xc8>
 80154a2:	0668      	lsls	r0, r5, #25
 80154a4:	d5fb      	bpl.n	801549e <_printf_i+0xbe>
 80154a6:	881b      	ldrh	r3, [r3, #0]
 80154a8:	4854      	ldr	r0, [pc, #336]	; (80155fc <_printf_i+0x21c>)
 80154aa:	296f      	cmp	r1, #111	; 0x6f
 80154ac:	bf14      	ite	ne
 80154ae:	220a      	movne	r2, #10
 80154b0:	2208      	moveq	r2, #8
 80154b2:	2100      	movs	r1, #0
 80154b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80154b8:	6865      	ldr	r5, [r4, #4]
 80154ba:	60a5      	str	r5, [r4, #8]
 80154bc:	2d00      	cmp	r5, #0
 80154be:	f2c0 8095 	blt.w	80155ec <_printf_i+0x20c>
 80154c2:	6821      	ldr	r1, [r4, #0]
 80154c4:	f021 0104 	bic.w	r1, r1, #4
 80154c8:	6021      	str	r1, [r4, #0]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d13d      	bne.n	801554a <_printf_i+0x16a>
 80154ce:	2d00      	cmp	r5, #0
 80154d0:	f040 808e 	bne.w	80155f0 <_printf_i+0x210>
 80154d4:	4665      	mov	r5, ip
 80154d6:	2a08      	cmp	r2, #8
 80154d8:	d10b      	bne.n	80154f2 <_printf_i+0x112>
 80154da:	6823      	ldr	r3, [r4, #0]
 80154dc:	07db      	lsls	r3, r3, #31
 80154de:	d508      	bpl.n	80154f2 <_printf_i+0x112>
 80154e0:	6923      	ldr	r3, [r4, #16]
 80154e2:	6862      	ldr	r2, [r4, #4]
 80154e4:	429a      	cmp	r2, r3
 80154e6:	bfde      	ittt	le
 80154e8:	2330      	movle	r3, #48	; 0x30
 80154ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80154ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80154f2:	ebac 0305 	sub.w	r3, ip, r5
 80154f6:	6123      	str	r3, [r4, #16]
 80154f8:	f8cd 8000 	str.w	r8, [sp]
 80154fc:	463b      	mov	r3, r7
 80154fe:	aa03      	add	r2, sp, #12
 8015500:	4621      	mov	r1, r4
 8015502:	4630      	mov	r0, r6
 8015504:	f7ff fef6 	bl	80152f4 <_printf_common>
 8015508:	3001      	adds	r0, #1
 801550a:	d14d      	bne.n	80155a8 <_printf_i+0x1c8>
 801550c:	f04f 30ff 	mov.w	r0, #4294967295
 8015510:	b005      	add	sp, #20
 8015512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015516:	4839      	ldr	r0, [pc, #228]	; (80155fc <_printf_i+0x21c>)
 8015518:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801551c:	6813      	ldr	r3, [r2, #0]
 801551e:	6821      	ldr	r1, [r4, #0]
 8015520:	1d1d      	adds	r5, r3, #4
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	6015      	str	r5, [r2, #0]
 8015526:	060a      	lsls	r2, r1, #24
 8015528:	d50b      	bpl.n	8015542 <_printf_i+0x162>
 801552a:	07ca      	lsls	r2, r1, #31
 801552c:	bf44      	itt	mi
 801552e:	f041 0120 	orrmi.w	r1, r1, #32
 8015532:	6021      	strmi	r1, [r4, #0]
 8015534:	b91b      	cbnz	r3, 801553e <_printf_i+0x15e>
 8015536:	6822      	ldr	r2, [r4, #0]
 8015538:	f022 0220 	bic.w	r2, r2, #32
 801553c:	6022      	str	r2, [r4, #0]
 801553e:	2210      	movs	r2, #16
 8015540:	e7b7      	b.n	80154b2 <_printf_i+0xd2>
 8015542:	064d      	lsls	r5, r1, #25
 8015544:	bf48      	it	mi
 8015546:	b29b      	uxthmi	r3, r3
 8015548:	e7ef      	b.n	801552a <_printf_i+0x14a>
 801554a:	4665      	mov	r5, ip
 801554c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015550:	fb02 3311 	mls	r3, r2, r1, r3
 8015554:	5cc3      	ldrb	r3, [r0, r3]
 8015556:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801555a:	460b      	mov	r3, r1
 801555c:	2900      	cmp	r1, #0
 801555e:	d1f5      	bne.n	801554c <_printf_i+0x16c>
 8015560:	e7b9      	b.n	80154d6 <_printf_i+0xf6>
 8015562:	6813      	ldr	r3, [r2, #0]
 8015564:	6825      	ldr	r5, [r4, #0]
 8015566:	6961      	ldr	r1, [r4, #20]
 8015568:	1d18      	adds	r0, r3, #4
 801556a:	6010      	str	r0, [r2, #0]
 801556c:	0628      	lsls	r0, r5, #24
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	d501      	bpl.n	8015576 <_printf_i+0x196>
 8015572:	6019      	str	r1, [r3, #0]
 8015574:	e002      	b.n	801557c <_printf_i+0x19c>
 8015576:	066a      	lsls	r2, r5, #25
 8015578:	d5fb      	bpl.n	8015572 <_printf_i+0x192>
 801557a:	8019      	strh	r1, [r3, #0]
 801557c:	2300      	movs	r3, #0
 801557e:	6123      	str	r3, [r4, #16]
 8015580:	4665      	mov	r5, ip
 8015582:	e7b9      	b.n	80154f8 <_printf_i+0x118>
 8015584:	6813      	ldr	r3, [r2, #0]
 8015586:	1d19      	adds	r1, r3, #4
 8015588:	6011      	str	r1, [r2, #0]
 801558a:	681d      	ldr	r5, [r3, #0]
 801558c:	6862      	ldr	r2, [r4, #4]
 801558e:	2100      	movs	r1, #0
 8015590:	4628      	mov	r0, r5
 8015592:	f7ea fe35 	bl	8000200 <memchr>
 8015596:	b108      	cbz	r0, 801559c <_printf_i+0x1bc>
 8015598:	1b40      	subs	r0, r0, r5
 801559a:	6060      	str	r0, [r4, #4]
 801559c:	6863      	ldr	r3, [r4, #4]
 801559e:	6123      	str	r3, [r4, #16]
 80155a0:	2300      	movs	r3, #0
 80155a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80155a6:	e7a7      	b.n	80154f8 <_printf_i+0x118>
 80155a8:	6923      	ldr	r3, [r4, #16]
 80155aa:	462a      	mov	r2, r5
 80155ac:	4639      	mov	r1, r7
 80155ae:	4630      	mov	r0, r6
 80155b0:	47c0      	blx	r8
 80155b2:	3001      	adds	r0, #1
 80155b4:	d0aa      	beq.n	801550c <_printf_i+0x12c>
 80155b6:	6823      	ldr	r3, [r4, #0]
 80155b8:	079b      	lsls	r3, r3, #30
 80155ba:	d413      	bmi.n	80155e4 <_printf_i+0x204>
 80155bc:	68e0      	ldr	r0, [r4, #12]
 80155be:	9b03      	ldr	r3, [sp, #12]
 80155c0:	4298      	cmp	r0, r3
 80155c2:	bfb8      	it	lt
 80155c4:	4618      	movlt	r0, r3
 80155c6:	e7a3      	b.n	8015510 <_printf_i+0x130>
 80155c8:	2301      	movs	r3, #1
 80155ca:	464a      	mov	r2, r9
 80155cc:	4639      	mov	r1, r7
 80155ce:	4630      	mov	r0, r6
 80155d0:	47c0      	blx	r8
 80155d2:	3001      	adds	r0, #1
 80155d4:	d09a      	beq.n	801550c <_printf_i+0x12c>
 80155d6:	3501      	adds	r5, #1
 80155d8:	68e3      	ldr	r3, [r4, #12]
 80155da:	9a03      	ldr	r2, [sp, #12]
 80155dc:	1a9b      	subs	r3, r3, r2
 80155de:	42ab      	cmp	r3, r5
 80155e0:	dcf2      	bgt.n	80155c8 <_printf_i+0x1e8>
 80155e2:	e7eb      	b.n	80155bc <_printf_i+0x1dc>
 80155e4:	2500      	movs	r5, #0
 80155e6:	f104 0919 	add.w	r9, r4, #25
 80155ea:	e7f5      	b.n	80155d8 <_printf_i+0x1f8>
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d1ac      	bne.n	801554a <_printf_i+0x16a>
 80155f0:	7803      	ldrb	r3, [r0, #0]
 80155f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80155f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80155fa:	e76c      	b.n	80154d6 <_printf_i+0xf6>
 80155fc:	0801ab6a 	.word	0x0801ab6a
 8015600:	0801ab7b 	.word	0x0801ab7b

08015604 <_scanf_float>:
 8015604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015608:	469a      	mov	sl, r3
 801560a:	688b      	ldr	r3, [r1, #8]
 801560c:	4616      	mov	r6, r2
 801560e:	1e5a      	subs	r2, r3, #1
 8015610:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015614:	b087      	sub	sp, #28
 8015616:	bf83      	ittte	hi
 8015618:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 801561c:	189b      	addhi	r3, r3, r2
 801561e:	9301      	strhi	r3, [sp, #4]
 8015620:	2300      	movls	r3, #0
 8015622:	bf86      	itte	hi
 8015624:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015628:	608b      	strhi	r3, [r1, #8]
 801562a:	9301      	strls	r3, [sp, #4]
 801562c:	680b      	ldr	r3, [r1, #0]
 801562e:	4688      	mov	r8, r1
 8015630:	f04f 0b00 	mov.w	fp, #0
 8015634:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015638:	f848 3b1c 	str.w	r3, [r8], #28
 801563c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015640:	4607      	mov	r7, r0
 8015642:	460c      	mov	r4, r1
 8015644:	4645      	mov	r5, r8
 8015646:	465a      	mov	r2, fp
 8015648:	46d9      	mov	r9, fp
 801564a:	f8cd b008 	str.w	fp, [sp, #8]
 801564e:	68a1      	ldr	r1, [r4, #8]
 8015650:	b181      	cbz	r1, 8015674 <_scanf_float+0x70>
 8015652:	6833      	ldr	r3, [r6, #0]
 8015654:	781b      	ldrb	r3, [r3, #0]
 8015656:	2b49      	cmp	r3, #73	; 0x49
 8015658:	d071      	beq.n	801573e <_scanf_float+0x13a>
 801565a:	d84d      	bhi.n	80156f8 <_scanf_float+0xf4>
 801565c:	2b39      	cmp	r3, #57	; 0x39
 801565e:	d840      	bhi.n	80156e2 <_scanf_float+0xde>
 8015660:	2b31      	cmp	r3, #49	; 0x31
 8015662:	f080 8088 	bcs.w	8015776 <_scanf_float+0x172>
 8015666:	2b2d      	cmp	r3, #45	; 0x2d
 8015668:	f000 8090 	beq.w	801578c <_scanf_float+0x188>
 801566c:	d815      	bhi.n	801569a <_scanf_float+0x96>
 801566e:	2b2b      	cmp	r3, #43	; 0x2b
 8015670:	f000 808c 	beq.w	801578c <_scanf_float+0x188>
 8015674:	f1b9 0f00 	cmp.w	r9, #0
 8015678:	d003      	beq.n	8015682 <_scanf_float+0x7e>
 801567a:	6823      	ldr	r3, [r4, #0]
 801567c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015680:	6023      	str	r3, [r4, #0]
 8015682:	3a01      	subs	r2, #1
 8015684:	2a01      	cmp	r2, #1
 8015686:	f200 80ea 	bhi.w	801585e <_scanf_float+0x25a>
 801568a:	4545      	cmp	r5, r8
 801568c:	f200 80dc 	bhi.w	8015848 <_scanf_float+0x244>
 8015690:	2601      	movs	r6, #1
 8015692:	4630      	mov	r0, r6
 8015694:	b007      	add	sp, #28
 8015696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801569a:	2b2e      	cmp	r3, #46	; 0x2e
 801569c:	f000 809f 	beq.w	80157de <_scanf_float+0x1da>
 80156a0:	2b30      	cmp	r3, #48	; 0x30
 80156a2:	d1e7      	bne.n	8015674 <_scanf_float+0x70>
 80156a4:	6820      	ldr	r0, [r4, #0]
 80156a6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80156aa:	d064      	beq.n	8015776 <_scanf_float+0x172>
 80156ac:	9b01      	ldr	r3, [sp, #4]
 80156ae:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80156b2:	6020      	str	r0, [r4, #0]
 80156b4:	f109 0901 	add.w	r9, r9, #1
 80156b8:	b11b      	cbz	r3, 80156c2 <_scanf_float+0xbe>
 80156ba:	3b01      	subs	r3, #1
 80156bc:	3101      	adds	r1, #1
 80156be:	9301      	str	r3, [sp, #4]
 80156c0:	60a1      	str	r1, [r4, #8]
 80156c2:	68a3      	ldr	r3, [r4, #8]
 80156c4:	3b01      	subs	r3, #1
 80156c6:	60a3      	str	r3, [r4, #8]
 80156c8:	6923      	ldr	r3, [r4, #16]
 80156ca:	3301      	adds	r3, #1
 80156cc:	6123      	str	r3, [r4, #16]
 80156ce:	6873      	ldr	r3, [r6, #4]
 80156d0:	3b01      	subs	r3, #1
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	6073      	str	r3, [r6, #4]
 80156d6:	f340 80ac 	ble.w	8015832 <_scanf_float+0x22e>
 80156da:	6833      	ldr	r3, [r6, #0]
 80156dc:	3301      	adds	r3, #1
 80156de:	6033      	str	r3, [r6, #0]
 80156e0:	e7b5      	b.n	801564e <_scanf_float+0x4a>
 80156e2:	2b45      	cmp	r3, #69	; 0x45
 80156e4:	f000 8085 	beq.w	80157f2 <_scanf_float+0x1ee>
 80156e8:	2b46      	cmp	r3, #70	; 0x46
 80156ea:	d06a      	beq.n	80157c2 <_scanf_float+0x1be>
 80156ec:	2b41      	cmp	r3, #65	; 0x41
 80156ee:	d1c1      	bne.n	8015674 <_scanf_float+0x70>
 80156f0:	2a01      	cmp	r2, #1
 80156f2:	d1bf      	bne.n	8015674 <_scanf_float+0x70>
 80156f4:	2202      	movs	r2, #2
 80156f6:	e046      	b.n	8015786 <_scanf_float+0x182>
 80156f8:	2b65      	cmp	r3, #101	; 0x65
 80156fa:	d07a      	beq.n	80157f2 <_scanf_float+0x1ee>
 80156fc:	d818      	bhi.n	8015730 <_scanf_float+0x12c>
 80156fe:	2b54      	cmp	r3, #84	; 0x54
 8015700:	d066      	beq.n	80157d0 <_scanf_float+0x1cc>
 8015702:	d811      	bhi.n	8015728 <_scanf_float+0x124>
 8015704:	2b4e      	cmp	r3, #78	; 0x4e
 8015706:	d1b5      	bne.n	8015674 <_scanf_float+0x70>
 8015708:	2a00      	cmp	r2, #0
 801570a:	d146      	bne.n	801579a <_scanf_float+0x196>
 801570c:	f1b9 0f00 	cmp.w	r9, #0
 8015710:	d145      	bne.n	801579e <_scanf_float+0x19a>
 8015712:	6821      	ldr	r1, [r4, #0]
 8015714:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015718:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801571c:	d13f      	bne.n	801579e <_scanf_float+0x19a>
 801571e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015722:	6021      	str	r1, [r4, #0]
 8015724:	2201      	movs	r2, #1
 8015726:	e02e      	b.n	8015786 <_scanf_float+0x182>
 8015728:	2b59      	cmp	r3, #89	; 0x59
 801572a:	d01e      	beq.n	801576a <_scanf_float+0x166>
 801572c:	2b61      	cmp	r3, #97	; 0x61
 801572e:	e7de      	b.n	80156ee <_scanf_float+0xea>
 8015730:	2b6e      	cmp	r3, #110	; 0x6e
 8015732:	d0e9      	beq.n	8015708 <_scanf_float+0x104>
 8015734:	d815      	bhi.n	8015762 <_scanf_float+0x15e>
 8015736:	2b66      	cmp	r3, #102	; 0x66
 8015738:	d043      	beq.n	80157c2 <_scanf_float+0x1be>
 801573a:	2b69      	cmp	r3, #105	; 0x69
 801573c:	d19a      	bne.n	8015674 <_scanf_float+0x70>
 801573e:	f1bb 0f00 	cmp.w	fp, #0
 8015742:	d138      	bne.n	80157b6 <_scanf_float+0x1b2>
 8015744:	f1b9 0f00 	cmp.w	r9, #0
 8015748:	d197      	bne.n	801567a <_scanf_float+0x76>
 801574a:	6821      	ldr	r1, [r4, #0]
 801574c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015750:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015754:	d195      	bne.n	8015682 <_scanf_float+0x7e>
 8015756:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801575a:	6021      	str	r1, [r4, #0]
 801575c:	f04f 0b01 	mov.w	fp, #1
 8015760:	e011      	b.n	8015786 <_scanf_float+0x182>
 8015762:	2b74      	cmp	r3, #116	; 0x74
 8015764:	d034      	beq.n	80157d0 <_scanf_float+0x1cc>
 8015766:	2b79      	cmp	r3, #121	; 0x79
 8015768:	d184      	bne.n	8015674 <_scanf_float+0x70>
 801576a:	f1bb 0f07 	cmp.w	fp, #7
 801576e:	d181      	bne.n	8015674 <_scanf_float+0x70>
 8015770:	f04f 0b08 	mov.w	fp, #8
 8015774:	e007      	b.n	8015786 <_scanf_float+0x182>
 8015776:	eb12 0f0b 	cmn.w	r2, fp
 801577a:	f47f af7b 	bne.w	8015674 <_scanf_float+0x70>
 801577e:	6821      	ldr	r1, [r4, #0]
 8015780:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015784:	6021      	str	r1, [r4, #0]
 8015786:	702b      	strb	r3, [r5, #0]
 8015788:	3501      	adds	r5, #1
 801578a:	e79a      	b.n	80156c2 <_scanf_float+0xbe>
 801578c:	6821      	ldr	r1, [r4, #0]
 801578e:	0608      	lsls	r0, r1, #24
 8015790:	f57f af70 	bpl.w	8015674 <_scanf_float+0x70>
 8015794:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015798:	e7f4      	b.n	8015784 <_scanf_float+0x180>
 801579a:	2a02      	cmp	r2, #2
 801579c:	d047      	beq.n	801582e <_scanf_float+0x22a>
 801579e:	f1bb 0f01 	cmp.w	fp, #1
 80157a2:	d003      	beq.n	80157ac <_scanf_float+0x1a8>
 80157a4:	f1bb 0f04 	cmp.w	fp, #4
 80157a8:	f47f af64 	bne.w	8015674 <_scanf_float+0x70>
 80157ac:	f10b 0b01 	add.w	fp, fp, #1
 80157b0:	fa5f fb8b 	uxtb.w	fp, fp
 80157b4:	e7e7      	b.n	8015786 <_scanf_float+0x182>
 80157b6:	f1bb 0f03 	cmp.w	fp, #3
 80157ba:	d0f7      	beq.n	80157ac <_scanf_float+0x1a8>
 80157bc:	f1bb 0f05 	cmp.w	fp, #5
 80157c0:	e7f2      	b.n	80157a8 <_scanf_float+0x1a4>
 80157c2:	f1bb 0f02 	cmp.w	fp, #2
 80157c6:	f47f af55 	bne.w	8015674 <_scanf_float+0x70>
 80157ca:	f04f 0b03 	mov.w	fp, #3
 80157ce:	e7da      	b.n	8015786 <_scanf_float+0x182>
 80157d0:	f1bb 0f06 	cmp.w	fp, #6
 80157d4:	f47f af4e 	bne.w	8015674 <_scanf_float+0x70>
 80157d8:	f04f 0b07 	mov.w	fp, #7
 80157dc:	e7d3      	b.n	8015786 <_scanf_float+0x182>
 80157de:	6821      	ldr	r1, [r4, #0]
 80157e0:	0588      	lsls	r0, r1, #22
 80157e2:	f57f af47 	bpl.w	8015674 <_scanf_float+0x70>
 80157e6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80157ea:	6021      	str	r1, [r4, #0]
 80157ec:	f8cd 9008 	str.w	r9, [sp, #8]
 80157f0:	e7c9      	b.n	8015786 <_scanf_float+0x182>
 80157f2:	6821      	ldr	r1, [r4, #0]
 80157f4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80157f8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80157fc:	d006      	beq.n	801580c <_scanf_float+0x208>
 80157fe:	0548      	lsls	r0, r1, #21
 8015800:	f57f af38 	bpl.w	8015674 <_scanf_float+0x70>
 8015804:	f1b9 0f00 	cmp.w	r9, #0
 8015808:	f43f af3b 	beq.w	8015682 <_scanf_float+0x7e>
 801580c:	0588      	lsls	r0, r1, #22
 801580e:	bf58      	it	pl
 8015810:	9802      	ldrpl	r0, [sp, #8]
 8015812:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015816:	bf58      	it	pl
 8015818:	eba9 0000 	subpl.w	r0, r9, r0
 801581c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015820:	bf58      	it	pl
 8015822:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015826:	6021      	str	r1, [r4, #0]
 8015828:	f04f 0900 	mov.w	r9, #0
 801582c:	e7ab      	b.n	8015786 <_scanf_float+0x182>
 801582e:	2203      	movs	r2, #3
 8015830:	e7a9      	b.n	8015786 <_scanf_float+0x182>
 8015832:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015836:	9205      	str	r2, [sp, #20]
 8015838:	4631      	mov	r1, r6
 801583a:	4638      	mov	r0, r7
 801583c:	4798      	blx	r3
 801583e:	9a05      	ldr	r2, [sp, #20]
 8015840:	2800      	cmp	r0, #0
 8015842:	f43f af04 	beq.w	801564e <_scanf_float+0x4a>
 8015846:	e715      	b.n	8015674 <_scanf_float+0x70>
 8015848:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801584c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015850:	4632      	mov	r2, r6
 8015852:	4638      	mov	r0, r7
 8015854:	4798      	blx	r3
 8015856:	6923      	ldr	r3, [r4, #16]
 8015858:	3b01      	subs	r3, #1
 801585a:	6123      	str	r3, [r4, #16]
 801585c:	e715      	b.n	801568a <_scanf_float+0x86>
 801585e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015862:	2b06      	cmp	r3, #6
 8015864:	d80a      	bhi.n	801587c <_scanf_float+0x278>
 8015866:	f1bb 0f02 	cmp.w	fp, #2
 801586a:	d968      	bls.n	801593e <_scanf_float+0x33a>
 801586c:	f1ab 0b03 	sub.w	fp, fp, #3
 8015870:	fa5f fb8b 	uxtb.w	fp, fp
 8015874:	eba5 0b0b 	sub.w	fp, r5, fp
 8015878:	455d      	cmp	r5, fp
 801587a:	d14b      	bne.n	8015914 <_scanf_float+0x310>
 801587c:	6823      	ldr	r3, [r4, #0]
 801587e:	05da      	lsls	r2, r3, #23
 8015880:	d51f      	bpl.n	80158c2 <_scanf_float+0x2be>
 8015882:	055b      	lsls	r3, r3, #21
 8015884:	d468      	bmi.n	8015958 <_scanf_float+0x354>
 8015886:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801588a:	6923      	ldr	r3, [r4, #16]
 801588c:	2965      	cmp	r1, #101	; 0x65
 801588e:	f103 33ff 	add.w	r3, r3, #4294967295
 8015892:	f105 3bff 	add.w	fp, r5, #4294967295
 8015896:	6123      	str	r3, [r4, #16]
 8015898:	d00d      	beq.n	80158b6 <_scanf_float+0x2b2>
 801589a:	2945      	cmp	r1, #69	; 0x45
 801589c:	d00b      	beq.n	80158b6 <_scanf_float+0x2b2>
 801589e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80158a2:	4632      	mov	r2, r6
 80158a4:	4638      	mov	r0, r7
 80158a6:	4798      	blx	r3
 80158a8:	6923      	ldr	r3, [r4, #16]
 80158aa:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80158ae:	3b01      	subs	r3, #1
 80158b0:	f1a5 0b02 	sub.w	fp, r5, #2
 80158b4:	6123      	str	r3, [r4, #16]
 80158b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80158ba:	4632      	mov	r2, r6
 80158bc:	4638      	mov	r0, r7
 80158be:	4798      	blx	r3
 80158c0:	465d      	mov	r5, fp
 80158c2:	6826      	ldr	r6, [r4, #0]
 80158c4:	f016 0610 	ands.w	r6, r6, #16
 80158c8:	d17a      	bne.n	80159c0 <_scanf_float+0x3bc>
 80158ca:	702e      	strb	r6, [r5, #0]
 80158cc:	6823      	ldr	r3, [r4, #0]
 80158ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80158d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80158d6:	d142      	bne.n	801595e <_scanf_float+0x35a>
 80158d8:	9b02      	ldr	r3, [sp, #8]
 80158da:	eba9 0303 	sub.w	r3, r9, r3
 80158de:	425a      	negs	r2, r3
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d149      	bne.n	8015978 <_scanf_float+0x374>
 80158e4:	2200      	movs	r2, #0
 80158e6:	4641      	mov	r1, r8
 80158e8:	4638      	mov	r0, r7
 80158ea:	f000 ff01 	bl	80166f0 <_strtod_r>
 80158ee:	6825      	ldr	r5, [r4, #0]
 80158f0:	f8da 3000 	ldr.w	r3, [sl]
 80158f4:	f015 0f02 	tst.w	r5, #2
 80158f8:	f103 0204 	add.w	r2, r3, #4
 80158fc:	ec59 8b10 	vmov	r8, r9, d0
 8015900:	f8ca 2000 	str.w	r2, [sl]
 8015904:	d043      	beq.n	801598e <_scanf_float+0x38a>
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	e9c3 8900 	strd	r8, r9, [r3]
 801590c:	68e3      	ldr	r3, [r4, #12]
 801590e:	3301      	adds	r3, #1
 8015910:	60e3      	str	r3, [r4, #12]
 8015912:	e6be      	b.n	8015692 <_scanf_float+0x8e>
 8015914:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015918:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801591c:	4632      	mov	r2, r6
 801591e:	4638      	mov	r0, r7
 8015920:	4798      	blx	r3
 8015922:	6923      	ldr	r3, [r4, #16]
 8015924:	3b01      	subs	r3, #1
 8015926:	6123      	str	r3, [r4, #16]
 8015928:	e7a6      	b.n	8015878 <_scanf_float+0x274>
 801592a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801592e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015932:	4632      	mov	r2, r6
 8015934:	4638      	mov	r0, r7
 8015936:	4798      	blx	r3
 8015938:	6923      	ldr	r3, [r4, #16]
 801593a:	3b01      	subs	r3, #1
 801593c:	6123      	str	r3, [r4, #16]
 801593e:	4545      	cmp	r5, r8
 8015940:	d8f3      	bhi.n	801592a <_scanf_float+0x326>
 8015942:	e6a5      	b.n	8015690 <_scanf_float+0x8c>
 8015944:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015948:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801594c:	4632      	mov	r2, r6
 801594e:	4638      	mov	r0, r7
 8015950:	4798      	blx	r3
 8015952:	6923      	ldr	r3, [r4, #16]
 8015954:	3b01      	subs	r3, #1
 8015956:	6123      	str	r3, [r4, #16]
 8015958:	4545      	cmp	r5, r8
 801595a:	d8f3      	bhi.n	8015944 <_scanf_float+0x340>
 801595c:	e698      	b.n	8015690 <_scanf_float+0x8c>
 801595e:	9b03      	ldr	r3, [sp, #12]
 8015960:	2b00      	cmp	r3, #0
 8015962:	d0bf      	beq.n	80158e4 <_scanf_float+0x2e0>
 8015964:	9904      	ldr	r1, [sp, #16]
 8015966:	230a      	movs	r3, #10
 8015968:	4632      	mov	r2, r6
 801596a:	3101      	adds	r1, #1
 801596c:	4638      	mov	r0, r7
 801596e:	f000 ff5f 	bl	8016830 <_strtol_r>
 8015972:	9b03      	ldr	r3, [sp, #12]
 8015974:	9d04      	ldr	r5, [sp, #16]
 8015976:	1ac2      	subs	r2, r0, r3
 8015978:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801597c:	429d      	cmp	r5, r3
 801597e:	bf28      	it	cs
 8015980:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015984:	490f      	ldr	r1, [pc, #60]	; (80159c4 <_scanf_float+0x3c0>)
 8015986:	4628      	mov	r0, r5
 8015988:	f000 f834 	bl	80159f4 <siprintf>
 801598c:	e7aa      	b.n	80158e4 <_scanf_float+0x2e0>
 801598e:	f015 0504 	ands.w	r5, r5, #4
 8015992:	d1b8      	bne.n	8015906 <_scanf_float+0x302>
 8015994:	681f      	ldr	r7, [r3, #0]
 8015996:	ee10 2a10 	vmov	r2, s0
 801599a:	464b      	mov	r3, r9
 801599c:	ee10 0a10 	vmov	r0, s0
 80159a0:	4649      	mov	r1, r9
 80159a2:	f7eb f8d3 	bl	8000b4c <__aeabi_dcmpun>
 80159a6:	b128      	cbz	r0, 80159b4 <_scanf_float+0x3b0>
 80159a8:	4628      	mov	r0, r5
 80159aa:	f000 f81d 	bl	80159e8 <nanf>
 80159ae:	ed87 0a00 	vstr	s0, [r7]
 80159b2:	e7ab      	b.n	801590c <_scanf_float+0x308>
 80159b4:	4640      	mov	r0, r8
 80159b6:	4649      	mov	r1, r9
 80159b8:	f7eb f926 	bl	8000c08 <__aeabi_d2f>
 80159bc:	6038      	str	r0, [r7, #0]
 80159be:	e7a5      	b.n	801590c <_scanf_float+0x308>
 80159c0:	2600      	movs	r6, #0
 80159c2:	e666      	b.n	8015692 <_scanf_float+0x8e>
 80159c4:	0801ab8c 	.word	0x0801ab8c

080159c8 <_sbrk_r>:
 80159c8:	b538      	push	{r3, r4, r5, lr}
 80159ca:	4c06      	ldr	r4, [pc, #24]	; (80159e4 <_sbrk_r+0x1c>)
 80159cc:	2300      	movs	r3, #0
 80159ce:	4605      	mov	r5, r0
 80159d0:	4608      	mov	r0, r1
 80159d2:	6023      	str	r3, [r4, #0]
 80159d4:	f7fe fb04 	bl	8013fe0 <_sbrk>
 80159d8:	1c43      	adds	r3, r0, #1
 80159da:	d102      	bne.n	80159e2 <_sbrk_r+0x1a>
 80159dc:	6823      	ldr	r3, [r4, #0]
 80159de:	b103      	cbz	r3, 80159e2 <_sbrk_r+0x1a>
 80159e0:	602b      	str	r3, [r5, #0]
 80159e2:	bd38      	pop	{r3, r4, r5, pc}
 80159e4:	200084a4 	.word	0x200084a4

080159e8 <nanf>:
 80159e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80159f0 <nanf+0x8>
 80159ec:	4770      	bx	lr
 80159ee:	bf00      	nop
 80159f0:	7fc00000 	.word	0x7fc00000

080159f4 <siprintf>:
 80159f4:	b40e      	push	{r1, r2, r3}
 80159f6:	b500      	push	{lr}
 80159f8:	b09c      	sub	sp, #112	; 0x70
 80159fa:	ab1d      	add	r3, sp, #116	; 0x74
 80159fc:	9002      	str	r0, [sp, #8]
 80159fe:	9006      	str	r0, [sp, #24]
 8015a00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015a04:	4809      	ldr	r0, [pc, #36]	; (8015a2c <siprintf+0x38>)
 8015a06:	9107      	str	r1, [sp, #28]
 8015a08:	9104      	str	r1, [sp, #16]
 8015a0a:	4909      	ldr	r1, [pc, #36]	; (8015a30 <siprintf+0x3c>)
 8015a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a10:	9105      	str	r1, [sp, #20]
 8015a12:	6800      	ldr	r0, [r0, #0]
 8015a14:	9301      	str	r3, [sp, #4]
 8015a16:	a902      	add	r1, sp, #8
 8015a18:	f002 fd2c 	bl	8018474 <_svfiprintf_r>
 8015a1c:	9b02      	ldr	r3, [sp, #8]
 8015a1e:	2200      	movs	r2, #0
 8015a20:	701a      	strb	r2, [r3, #0]
 8015a22:	b01c      	add	sp, #112	; 0x70
 8015a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a28:	b003      	add	sp, #12
 8015a2a:	4770      	bx	lr
 8015a2c:	20000184 	.word	0x20000184
 8015a30:	ffff0208 	.word	0xffff0208

08015a34 <strcat>:
 8015a34:	b510      	push	{r4, lr}
 8015a36:	4603      	mov	r3, r0
 8015a38:	781a      	ldrb	r2, [r3, #0]
 8015a3a:	1c5c      	adds	r4, r3, #1
 8015a3c:	b93a      	cbnz	r2, 8015a4e <strcat+0x1a>
 8015a3e:	3b01      	subs	r3, #1
 8015a40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015a44:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015a48:	2a00      	cmp	r2, #0
 8015a4a:	d1f9      	bne.n	8015a40 <strcat+0xc>
 8015a4c:	bd10      	pop	{r4, pc}
 8015a4e:	4623      	mov	r3, r4
 8015a50:	e7f2      	b.n	8015a38 <strcat+0x4>

08015a52 <strchr>:
 8015a52:	b2c9      	uxtb	r1, r1
 8015a54:	4603      	mov	r3, r0
 8015a56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a5a:	b11a      	cbz	r2, 8015a64 <strchr+0x12>
 8015a5c:	428a      	cmp	r2, r1
 8015a5e:	d1f9      	bne.n	8015a54 <strchr+0x2>
 8015a60:	4618      	mov	r0, r3
 8015a62:	4770      	bx	lr
 8015a64:	2900      	cmp	r1, #0
 8015a66:	bf18      	it	ne
 8015a68:	2300      	movne	r3, #0
 8015a6a:	e7f9      	b.n	8015a60 <strchr+0xe>

08015a6c <strcpy>:
 8015a6c:	4603      	mov	r3, r0
 8015a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015a72:	f803 2b01 	strb.w	r2, [r3], #1
 8015a76:	2a00      	cmp	r2, #0
 8015a78:	d1f9      	bne.n	8015a6e <strcpy+0x2>
 8015a7a:	4770      	bx	lr

08015a7c <strncmp>:
 8015a7c:	b510      	push	{r4, lr}
 8015a7e:	b16a      	cbz	r2, 8015a9c <strncmp+0x20>
 8015a80:	3901      	subs	r1, #1
 8015a82:	1884      	adds	r4, r0, r2
 8015a84:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015a88:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015a8c:	4293      	cmp	r3, r2
 8015a8e:	d103      	bne.n	8015a98 <strncmp+0x1c>
 8015a90:	42a0      	cmp	r0, r4
 8015a92:	d001      	beq.n	8015a98 <strncmp+0x1c>
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d1f5      	bne.n	8015a84 <strncmp+0x8>
 8015a98:	1a98      	subs	r0, r3, r2
 8015a9a:	bd10      	pop	{r4, pc}
 8015a9c:	4610      	mov	r0, r2
 8015a9e:	e7fc      	b.n	8015a9a <strncmp+0x1e>

08015aa0 <strncpy>:
 8015aa0:	b570      	push	{r4, r5, r6, lr}
 8015aa2:	3901      	subs	r1, #1
 8015aa4:	4604      	mov	r4, r0
 8015aa6:	b902      	cbnz	r2, 8015aaa <strncpy+0xa>
 8015aa8:	bd70      	pop	{r4, r5, r6, pc}
 8015aaa:	4623      	mov	r3, r4
 8015aac:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8015ab0:	f803 5b01 	strb.w	r5, [r3], #1
 8015ab4:	1e56      	subs	r6, r2, #1
 8015ab6:	b92d      	cbnz	r5, 8015ac4 <strncpy+0x24>
 8015ab8:	4414      	add	r4, r2
 8015aba:	42a3      	cmp	r3, r4
 8015abc:	d0f4      	beq.n	8015aa8 <strncpy+0x8>
 8015abe:	f803 5b01 	strb.w	r5, [r3], #1
 8015ac2:	e7fa      	b.n	8015aba <strncpy+0x1a>
 8015ac4:	461c      	mov	r4, r3
 8015ac6:	4632      	mov	r2, r6
 8015ac8:	e7ed      	b.n	8015aa6 <strncpy+0x6>

08015aca <sulp>:
 8015aca:	b570      	push	{r4, r5, r6, lr}
 8015acc:	4604      	mov	r4, r0
 8015ace:	460d      	mov	r5, r1
 8015ad0:	ec45 4b10 	vmov	d0, r4, r5
 8015ad4:	4616      	mov	r6, r2
 8015ad6:	f002 fb31 	bl	801813c <__ulp>
 8015ada:	ec51 0b10 	vmov	r0, r1, d0
 8015ade:	b17e      	cbz	r6, 8015b00 <sulp+0x36>
 8015ae0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015ae4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	dd09      	ble.n	8015b00 <sulp+0x36>
 8015aec:	051b      	lsls	r3, r3, #20
 8015aee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015af2:	2400      	movs	r4, #0
 8015af4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015af8:	4622      	mov	r2, r4
 8015afa:	462b      	mov	r3, r5
 8015afc:	f7ea fd8c 	bl	8000618 <__aeabi_dmul>
 8015b00:	bd70      	pop	{r4, r5, r6, pc}
 8015b02:	0000      	movs	r0, r0
 8015b04:	0000      	movs	r0, r0
	...

08015b08 <_strtod_l>:
 8015b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b0c:	461f      	mov	r7, r3
 8015b0e:	b0a1      	sub	sp, #132	; 0x84
 8015b10:	2300      	movs	r3, #0
 8015b12:	4681      	mov	r9, r0
 8015b14:	4638      	mov	r0, r7
 8015b16:	460e      	mov	r6, r1
 8015b18:	9217      	str	r2, [sp, #92]	; 0x5c
 8015b1a:	931c      	str	r3, [sp, #112]	; 0x70
 8015b1c:	f002 f81d 	bl	8017b5a <__localeconv_l>
 8015b20:	4680      	mov	r8, r0
 8015b22:	6800      	ldr	r0, [r0, #0]
 8015b24:	f7ea fb5e 	bl	80001e4 <strlen>
 8015b28:	f04f 0a00 	mov.w	sl, #0
 8015b2c:	4604      	mov	r4, r0
 8015b2e:	f04f 0b00 	mov.w	fp, #0
 8015b32:	961b      	str	r6, [sp, #108]	; 0x6c
 8015b34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015b36:	781a      	ldrb	r2, [r3, #0]
 8015b38:	2a0d      	cmp	r2, #13
 8015b3a:	d832      	bhi.n	8015ba2 <_strtod_l+0x9a>
 8015b3c:	2a09      	cmp	r2, #9
 8015b3e:	d236      	bcs.n	8015bae <_strtod_l+0xa6>
 8015b40:	2a00      	cmp	r2, #0
 8015b42:	d03e      	beq.n	8015bc2 <_strtod_l+0xba>
 8015b44:	2300      	movs	r3, #0
 8015b46:	930d      	str	r3, [sp, #52]	; 0x34
 8015b48:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015b4a:	782b      	ldrb	r3, [r5, #0]
 8015b4c:	2b30      	cmp	r3, #48	; 0x30
 8015b4e:	f040 80ac 	bne.w	8015caa <_strtod_l+0x1a2>
 8015b52:	786b      	ldrb	r3, [r5, #1]
 8015b54:	2b58      	cmp	r3, #88	; 0x58
 8015b56:	d001      	beq.n	8015b5c <_strtod_l+0x54>
 8015b58:	2b78      	cmp	r3, #120	; 0x78
 8015b5a:	d167      	bne.n	8015c2c <_strtod_l+0x124>
 8015b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b5e:	9301      	str	r3, [sp, #4]
 8015b60:	ab1c      	add	r3, sp, #112	; 0x70
 8015b62:	9300      	str	r3, [sp, #0]
 8015b64:	9702      	str	r7, [sp, #8]
 8015b66:	ab1d      	add	r3, sp, #116	; 0x74
 8015b68:	4a88      	ldr	r2, [pc, #544]	; (8015d8c <_strtod_l+0x284>)
 8015b6a:	a91b      	add	r1, sp, #108	; 0x6c
 8015b6c:	4648      	mov	r0, r9
 8015b6e:	f001 fd1a 	bl	80175a6 <__gethex>
 8015b72:	f010 0407 	ands.w	r4, r0, #7
 8015b76:	4606      	mov	r6, r0
 8015b78:	d005      	beq.n	8015b86 <_strtod_l+0x7e>
 8015b7a:	2c06      	cmp	r4, #6
 8015b7c:	d12b      	bne.n	8015bd6 <_strtod_l+0xce>
 8015b7e:	3501      	adds	r5, #1
 8015b80:	2300      	movs	r3, #0
 8015b82:	951b      	str	r5, [sp, #108]	; 0x6c
 8015b84:	930d      	str	r3, [sp, #52]	; 0x34
 8015b86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	f040 859a 	bne.w	80166c2 <_strtod_l+0xbba>
 8015b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b90:	b1e3      	cbz	r3, 8015bcc <_strtod_l+0xc4>
 8015b92:	4652      	mov	r2, sl
 8015b94:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015b98:	ec43 2b10 	vmov	d0, r2, r3
 8015b9c:	b021      	add	sp, #132	; 0x84
 8015b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ba2:	2a2b      	cmp	r2, #43	; 0x2b
 8015ba4:	d015      	beq.n	8015bd2 <_strtod_l+0xca>
 8015ba6:	2a2d      	cmp	r2, #45	; 0x2d
 8015ba8:	d004      	beq.n	8015bb4 <_strtod_l+0xac>
 8015baa:	2a20      	cmp	r2, #32
 8015bac:	d1ca      	bne.n	8015b44 <_strtod_l+0x3c>
 8015bae:	3301      	adds	r3, #1
 8015bb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8015bb2:	e7bf      	b.n	8015b34 <_strtod_l+0x2c>
 8015bb4:	2201      	movs	r2, #1
 8015bb6:	920d      	str	r2, [sp, #52]	; 0x34
 8015bb8:	1c5a      	adds	r2, r3, #1
 8015bba:	921b      	str	r2, [sp, #108]	; 0x6c
 8015bbc:	785b      	ldrb	r3, [r3, #1]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d1c2      	bne.n	8015b48 <_strtod_l+0x40>
 8015bc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015bc4:	961b      	str	r6, [sp, #108]	; 0x6c
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	f040 8579 	bne.w	80166be <_strtod_l+0xbb6>
 8015bcc:	4652      	mov	r2, sl
 8015bce:	465b      	mov	r3, fp
 8015bd0:	e7e2      	b.n	8015b98 <_strtod_l+0x90>
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	e7ef      	b.n	8015bb6 <_strtod_l+0xae>
 8015bd6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015bd8:	b13a      	cbz	r2, 8015bea <_strtod_l+0xe2>
 8015bda:	2135      	movs	r1, #53	; 0x35
 8015bdc:	a81e      	add	r0, sp, #120	; 0x78
 8015bde:	f002 fba5 	bl	801832c <__copybits>
 8015be2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015be4:	4648      	mov	r0, r9
 8015be6:	f002 f811 	bl	8017c0c <_Bfree>
 8015bea:	3c01      	subs	r4, #1
 8015bec:	2c04      	cmp	r4, #4
 8015bee:	d806      	bhi.n	8015bfe <_strtod_l+0xf6>
 8015bf0:	e8df f004 	tbb	[pc, r4]
 8015bf4:	1714030a 	.word	0x1714030a
 8015bf8:	0a          	.byte	0x0a
 8015bf9:	00          	.byte	0x00
 8015bfa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8015bfe:	0730      	lsls	r0, r6, #28
 8015c00:	d5c1      	bpl.n	8015b86 <_strtod_l+0x7e>
 8015c02:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015c06:	e7be      	b.n	8015b86 <_strtod_l+0x7e>
 8015c08:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8015c0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015c0e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015c12:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015c16:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015c1a:	e7f0      	b.n	8015bfe <_strtod_l+0xf6>
 8015c1c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015d90 <_strtod_l+0x288>
 8015c20:	e7ed      	b.n	8015bfe <_strtod_l+0xf6>
 8015c22:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015c26:	f04f 3aff 	mov.w	sl, #4294967295
 8015c2a:	e7e8      	b.n	8015bfe <_strtod_l+0xf6>
 8015c2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015c2e:	1c5a      	adds	r2, r3, #1
 8015c30:	921b      	str	r2, [sp, #108]	; 0x6c
 8015c32:	785b      	ldrb	r3, [r3, #1]
 8015c34:	2b30      	cmp	r3, #48	; 0x30
 8015c36:	d0f9      	beq.n	8015c2c <_strtod_l+0x124>
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d0a4      	beq.n	8015b86 <_strtod_l+0x7e>
 8015c3c:	2301      	movs	r3, #1
 8015c3e:	2500      	movs	r5, #0
 8015c40:	9306      	str	r3, [sp, #24]
 8015c42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015c44:	9308      	str	r3, [sp, #32]
 8015c46:	9507      	str	r5, [sp, #28]
 8015c48:	9505      	str	r5, [sp, #20]
 8015c4a:	220a      	movs	r2, #10
 8015c4c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015c4e:	7807      	ldrb	r7, [r0, #0]
 8015c50:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015c54:	b2d9      	uxtb	r1, r3
 8015c56:	2909      	cmp	r1, #9
 8015c58:	d929      	bls.n	8015cae <_strtod_l+0x1a6>
 8015c5a:	4622      	mov	r2, r4
 8015c5c:	f8d8 1000 	ldr.w	r1, [r8]
 8015c60:	f7ff ff0c 	bl	8015a7c <strncmp>
 8015c64:	2800      	cmp	r0, #0
 8015c66:	d031      	beq.n	8015ccc <_strtod_l+0x1c4>
 8015c68:	2000      	movs	r0, #0
 8015c6a:	9c05      	ldr	r4, [sp, #20]
 8015c6c:	9004      	str	r0, [sp, #16]
 8015c6e:	463b      	mov	r3, r7
 8015c70:	4602      	mov	r2, r0
 8015c72:	2b65      	cmp	r3, #101	; 0x65
 8015c74:	d001      	beq.n	8015c7a <_strtod_l+0x172>
 8015c76:	2b45      	cmp	r3, #69	; 0x45
 8015c78:	d114      	bne.n	8015ca4 <_strtod_l+0x19c>
 8015c7a:	b924      	cbnz	r4, 8015c86 <_strtod_l+0x17e>
 8015c7c:	b910      	cbnz	r0, 8015c84 <_strtod_l+0x17c>
 8015c7e:	9b06      	ldr	r3, [sp, #24]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d09e      	beq.n	8015bc2 <_strtod_l+0xba>
 8015c84:	2400      	movs	r4, #0
 8015c86:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015c88:	1c73      	adds	r3, r6, #1
 8015c8a:	931b      	str	r3, [sp, #108]	; 0x6c
 8015c8c:	7873      	ldrb	r3, [r6, #1]
 8015c8e:	2b2b      	cmp	r3, #43	; 0x2b
 8015c90:	d078      	beq.n	8015d84 <_strtod_l+0x27c>
 8015c92:	2b2d      	cmp	r3, #45	; 0x2d
 8015c94:	d070      	beq.n	8015d78 <_strtod_l+0x270>
 8015c96:	f04f 0c00 	mov.w	ip, #0
 8015c9a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8015c9e:	2f09      	cmp	r7, #9
 8015ca0:	d97c      	bls.n	8015d9c <_strtod_l+0x294>
 8015ca2:	961b      	str	r6, [sp, #108]	; 0x6c
 8015ca4:	f04f 0e00 	mov.w	lr, #0
 8015ca8:	e09a      	b.n	8015de0 <_strtod_l+0x2d8>
 8015caa:	2300      	movs	r3, #0
 8015cac:	e7c7      	b.n	8015c3e <_strtod_l+0x136>
 8015cae:	9905      	ldr	r1, [sp, #20]
 8015cb0:	2908      	cmp	r1, #8
 8015cb2:	bfdd      	ittte	le
 8015cb4:	9907      	ldrle	r1, [sp, #28]
 8015cb6:	fb02 3301 	mlale	r3, r2, r1, r3
 8015cba:	9307      	strle	r3, [sp, #28]
 8015cbc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015cc0:	9b05      	ldr	r3, [sp, #20]
 8015cc2:	3001      	adds	r0, #1
 8015cc4:	3301      	adds	r3, #1
 8015cc6:	9305      	str	r3, [sp, #20]
 8015cc8:	901b      	str	r0, [sp, #108]	; 0x6c
 8015cca:	e7bf      	b.n	8015c4c <_strtod_l+0x144>
 8015ccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015cce:	191a      	adds	r2, r3, r4
 8015cd0:	921b      	str	r2, [sp, #108]	; 0x6c
 8015cd2:	9a05      	ldr	r2, [sp, #20]
 8015cd4:	5d1b      	ldrb	r3, [r3, r4]
 8015cd6:	2a00      	cmp	r2, #0
 8015cd8:	d037      	beq.n	8015d4a <_strtod_l+0x242>
 8015cda:	9c05      	ldr	r4, [sp, #20]
 8015cdc:	4602      	mov	r2, r0
 8015cde:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015ce2:	2909      	cmp	r1, #9
 8015ce4:	d913      	bls.n	8015d0e <_strtod_l+0x206>
 8015ce6:	2101      	movs	r1, #1
 8015ce8:	9104      	str	r1, [sp, #16]
 8015cea:	e7c2      	b.n	8015c72 <_strtod_l+0x16a>
 8015cec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015cee:	1c5a      	adds	r2, r3, #1
 8015cf0:	921b      	str	r2, [sp, #108]	; 0x6c
 8015cf2:	785b      	ldrb	r3, [r3, #1]
 8015cf4:	3001      	adds	r0, #1
 8015cf6:	2b30      	cmp	r3, #48	; 0x30
 8015cf8:	d0f8      	beq.n	8015cec <_strtod_l+0x1e4>
 8015cfa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8015cfe:	2a08      	cmp	r2, #8
 8015d00:	f200 84e4 	bhi.w	80166cc <_strtod_l+0xbc4>
 8015d04:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015d06:	9208      	str	r2, [sp, #32]
 8015d08:	4602      	mov	r2, r0
 8015d0a:	2000      	movs	r0, #0
 8015d0c:	4604      	mov	r4, r0
 8015d0e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8015d12:	f100 0101 	add.w	r1, r0, #1
 8015d16:	d012      	beq.n	8015d3e <_strtod_l+0x236>
 8015d18:	440a      	add	r2, r1
 8015d1a:	eb00 0c04 	add.w	ip, r0, r4
 8015d1e:	4621      	mov	r1, r4
 8015d20:	270a      	movs	r7, #10
 8015d22:	458c      	cmp	ip, r1
 8015d24:	d113      	bne.n	8015d4e <_strtod_l+0x246>
 8015d26:	1821      	adds	r1, r4, r0
 8015d28:	2908      	cmp	r1, #8
 8015d2a:	f104 0401 	add.w	r4, r4, #1
 8015d2e:	4404      	add	r4, r0
 8015d30:	dc19      	bgt.n	8015d66 <_strtod_l+0x25e>
 8015d32:	9b07      	ldr	r3, [sp, #28]
 8015d34:	210a      	movs	r1, #10
 8015d36:	fb01 e303 	mla	r3, r1, r3, lr
 8015d3a:	9307      	str	r3, [sp, #28]
 8015d3c:	2100      	movs	r1, #0
 8015d3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015d40:	1c58      	adds	r0, r3, #1
 8015d42:	901b      	str	r0, [sp, #108]	; 0x6c
 8015d44:	785b      	ldrb	r3, [r3, #1]
 8015d46:	4608      	mov	r0, r1
 8015d48:	e7c9      	b.n	8015cde <_strtod_l+0x1d6>
 8015d4a:	9805      	ldr	r0, [sp, #20]
 8015d4c:	e7d3      	b.n	8015cf6 <_strtod_l+0x1ee>
 8015d4e:	2908      	cmp	r1, #8
 8015d50:	f101 0101 	add.w	r1, r1, #1
 8015d54:	dc03      	bgt.n	8015d5e <_strtod_l+0x256>
 8015d56:	9b07      	ldr	r3, [sp, #28]
 8015d58:	437b      	muls	r3, r7
 8015d5a:	9307      	str	r3, [sp, #28]
 8015d5c:	e7e1      	b.n	8015d22 <_strtod_l+0x21a>
 8015d5e:	2910      	cmp	r1, #16
 8015d60:	bfd8      	it	le
 8015d62:	437d      	mulle	r5, r7
 8015d64:	e7dd      	b.n	8015d22 <_strtod_l+0x21a>
 8015d66:	2c10      	cmp	r4, #16
 8015d68:	bfdc      	itt	le
 8015d6a:	210a      	movle	r1, #10
 8015d6c:	fb01 e505 	mlale	r5, r1, r5, lr
 8015d70:	e7e4      	b.n	8015d3c <_strtod_l+0x234>
 8015d72:	2301      	movs	r3, #1
 8015d74:	9304      	str	r3, [sp, #16]
 8015d76:	e781      	b.n	8015c7c <_strtod_l+0x174>
 8015d78:	f04f 0c01 	mov.w	ip, #1
 8015d7c:	1cb3      	adds	r3, r6, #2
 8015d7e:	931b      	str	r3, [sp, #108]	; 0x6c
 8015d80:	78b3      	ldrb	r3, [r6, #2]
 8015d82:	e78a      	b.n	8015c9a <_strtod_l+0x192>
 8015d84:	f04f 0c00 	mov.w	ip, #0
 8015d88:	e7f8      	b.n	8015d7c <_strtod_l+0x274>
 8015d8a:	bf00      	nop
 8015d8c:	0801ab94 	.word	0x0801ab94
 8015d90:	7ff00000 	.word	0x7ff00000
 8015d94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015d96:	1c5f      	adds	r7, r3, #1
 8015d98:	971b      	str	r7, [sp, #108]	; 0x6c
 8015d9a:	785b      	ldrb	r3, [r3, #1]
 8015d9c:	2b30      	cmp	r3, #48	; 0x30
 8015d9e:	d0f9      	beq.n	8015d94 <_strtod_l+0x28c>
 8015da0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8015da4:	2f08      	cmp	r7, #8
 8015da6:	f63f af7d 	bhi.w	8015ca4 <_strtod_l+0x19c>
 8015daa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8015dae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015db0:	930a      	str	r3, [sp, #40]	; 0x28
 8015db2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015db4:	1c5f      	adds	r7, r3, #1
 8015db6:	971b      	str	r7, [sp, #108]	; 0x6c
 8015db8:	785b      	ldrb	r3, [r3, #1]
 8015dba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8015dbe:	f1b8 0f09 	cmp.w	r8, #9
 8015dc2:	d937      	bls.n	8015e34 <_strtod_l+0x32c>
 8015dc4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015dc6:	1a7f      	subs	r7, r7, r1
 8015dc8:	2f08      	cmp	r7, #8
 8015dca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015dce:	dc37      	bgt.n	8015e40 <_strtod_l+0x338>
 8015dd0:	45be      	cmp	lr, r7
 8015dd2:	bfa8      	it	ge
 8015dd4:	46be      	movge	lr, r7
 8015dd6:	f1bc 0f00 	cmp.w	ip, #0
 8015dda:	d001      	beq.n	8015de0 <_strtod_l+0x2d8>
 8015ddc:	f1ce 0e00 	rsb	lr, lr, #0
 8015de0:	2c00      	cmp	r4, #0
 8015de2:	d151      	bne.n	8015e88 <_strtod_l+0x380>
 8015de4:	2800      	cmp	r0, #0
 8015de6:	f47f aece 	bne.w	8015b86 <_strtod_l+0x7e>
 8015dea:	9a06      	ldr	r2, [sp, #24]
 8015dec:	2a00      	cmp	r2, #0
 8015dee:	f47f aeca 	bne.w	8015b86 <_strtod_l+0x7e>
 8015df2:	9a04      	ldr	r2, [sp, #16]
 8015df4:	2a00      	cmp	r2, #0
 8015df6:	f47f aee4 	bne.w	8015bc2 <_strtod_l+0xba>
 8015dfa:	2b4e      	cmp	r3, #78	; 0x4e
 8015dfc:	d027      	beq.n	8015e4e <_strtod_l+0x346>
 8015dfe:	dc21      	bgt.n	8015e44 <_strtod_l+0x33c>
 8015e00:	2b49      	cmp	r3, #73	; 0x49
 8015e02:	f47f aede 	bne.w	8015bc2 <_strtod_l+0xba>
 8015e06:	49a0      	ldr	r1, [pc, #640]	; (8016088 <_strtod_l+0x580>)
 8015e08:	a81b      	add	r0, sp, #108	; 0x6c
 8015e0a:	f001 fdff 	bl	8017a0c <__match>
 8015e0e:	2800      	cmp	r0, #0
 8015e10:	f43f aed7 	beq.w	8015bc2 <_strtod_l+0xba>
 8015e14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e16:	499d      	ldr	r1, [pc, #628]	; (801608c <_strtod_l+0x584>)
 8015e18:	3b01      	subs	r3, #1
 8015e1a:	a81b      	add	r0, sp, #108	; 0x6c
 8015e1c:	931b      	str	r3, [sp, #108]	; 0x6c
 8015e1e:	f001 fdf5 	bl	8017a0c <__match>
 8015e22:	b910      	cbnz	r0, 8015e2a <_strtod_l+0x322>
 8015e24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e26:	3301      	adds	r3, #1
 8015e28:	931b      	str	r3, [sp, #108]	; 0x6c
 8015e2a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80160a0 <_strtod_l+0x598>
 8015e2e:	f04f 0a00 	mov.w	sl, #0
 8015e32:	e6a8      	b.n	8015b86 <_strtod_l+0x7e>
 8015e34:	210a      	movs	r1, #10
 8015e36:	fb01 3e0e 	mla	lr, r1, lr, r3
 8015e3a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015e3e:	e7b8      	b.n	8015db2 <_strtod_l+0x2aa>
 8015e40:	46be      	mov	lr, r7
 8015e42:	e7c8      	b.n	8015dd6 <_strtod_l+0x2ce>
 8015e44:	2b69      	cmp	r3, #105	; 0x69
 8015e46:	d0de      	beq.n	8015e06 <_strtod_l+0x2fe>
 8015e48:	2b6e      	cmp	r3, #110	; 0x6e
 8015e4a:	f47f aeba 	bne.w	8015bc2 <_strtod_l+0xba>
 8015e4e:	4990      	ldr	r1, [pc, #576]	; (8016090 <_strtod_l+0x588>)
 8015e50:	a81b      	add	r0, sp, #108	; 0x6c
 8015e52:	f001 fddb 	bl	8017a0c <__match>
 8015e56:	2800      	cmp	r0, #0
 8015e58:	f43f aeb3 	beq.w	8015bc2 <_strtod_l+0xba>
 8015e5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e5e:	781b      	ldrb	r3, [r3, #0]
 8015e60:	2b28      	cmp	r3, #40	; 0x28
 8015e62:	d10e      	bne.n	8015e82 <_strtod_l+0x37a>
 8015e64:	aa1e      	add	r2, sp, #120	; 0x78
 8015e66:	498b      	ldr	r1, [pc, #556]	; (8016094 <_strtod_l+0x58c>)
 8015e68:	a81b      	add	r0, sp, #108	; 0x6c
 8015e6a:	f001 fde3 	bl	8017a34 <__hexnan>
 8015e6e:	2805      	cmp	r0, #5
 8015e70:	d107      	bne.n	8015e82 <_strtod_l+0x37a>
 8015e72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015e74:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8015e78:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8015e7c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015e80:	e681      	b.n	8015b86 <_strtod_l+0x7e>
 8015e82:	f8df b224 	ldr.w	fp, [pc, #548]	; 80160a8 <_strtod_l+0x5a0>
 8015e86:	e7d2      	b.n	8015e2e <_strtod_l+0x326>
 8015e88:	ebae 0302 	sub.w	r3, lr, r2
 8015e8c:	9306      	str	r3, [sp, #24]
 8015e8e:	9b05      	ldr	r3, [sp, #20]
 8015e90:	9807      	ldr	r0, [sp, #28]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	bf08      	it	eq
 8015e96:	4623      	moveq	r3, r4
 8015e98:	2c10      	cmp	r4, #16
 8015e9a:	9305      	str	r3, [sp, #20]
 8015e9c:	46a0      	mov	r8, r4
 8015e9e:	bfa8      	it	ge
 8015ea0:	f04f 0810 	movge.w	r8, #16
 8015ea4:	f7ea fb3e 	bl	8000524 <__aeabi_ui2d>
 8015ea8:	2c09      	cmp	r4, #9
 8015eaa:	4682      	mov	sl, r0
 8015eac:	468b      	mov	fp, r1
 8015eae:	dc13      	bgt.n	8015ed8 <_strtod_l+0x3d0>
 8015eb0:	9b06      	ldr	r3, [sp, #24]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	f43f ae67 	beq.w	8015b86 <_strtod_l+0x7e>
 8015eb8:	9b06      	ldr	r3, [sp, #24]
 8015eba:	dd7a      	ble.n	8015fb2 <_strtod_l+0x4aa>
 8015ebc:	2b16      	cmp	r3, #22
 8015ebe:	dc61      	bgt.n	8015f84 <_strtod_l+0x47c>
 8015ec0:	4a75      	ldr	r2, [pc, #468]	; (8016098 <_strtod_l+0x590>)
 8015ec2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8015ec6:	e9de 0100 	ldrd	r0, r1, [lr]
 8015eca:	4652      	mov	r2, sl
 8015ecc:	465b      	mov	r3, fp
 8015ece:	f7ea fba3 	bl	8000618 <__aeabi_dmul>
 8015ed2:	4682      	mov	sl, r0
 8015ed4:	468b      	mov	fp, r1
 8015ed6:	e656      	b.n	8015b86 <_strtod_l+0x7e>
 8015ed8:	4b6f      	ldr	r3, [pc, #444]	; (8016098 <_strtod_l+0x590>)
 8015eda:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015ede:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015ee2:	f7ea fb99 	bl	8000618 <__aeabi_dmul>
 8015ee6:	4606      	mov	r6, r0
 8015ee8:	4628      	mov	r0, r5
 8015eea:	460f      	mov	r7, r1
 8015eec:	f7ea fb1a 	bl	8000524 <__aeabi_ui2d>
 8015ef0:	4602      	mov	r2, r0
 8015ef2:	460b      	mov	r3, r1
 8015ef4:	4630      	mov	r0, r6
 8015ef6:	4639      	mov	r1, r7
 8015ef8:	f7ea f9d8 	bl	80002ac <__adddf3>
 8015efc:	2c0f      	cmp	r4, #15
 8015efe:	4682      	mov	sl, r0
 8015f00:	468b      	mov	fp, r1
 8015f02:	ddd5      	ble.n	8015eb0 <_strtod_l+0x3a8>
 8015f04:	9b06      	ldr	r3, [sp, #24]
 8015f06:	eba4 0808 	sub.w	r8, r4, r8
 8015f0a:	4498      	add	r8, r3
 8015f0c:	f1b8 0f00 	cmp.w	r8, #0
 8015f10:	f340 8096 	ble.w	8016040 <_strtod_l+0x538>
 8015f14:	f018 030f 	ands.w	r3, r8, #15
 8015f18:	d00a      	beq.n	8015f30 <_strtod_l+0x428>
 8015f1a:	495f      	ldr	r1, [pc, #380]	; (8016098 <_strtod_l+0x590>)
 8015f1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015f20:	4652      	mov	r2, sl
 8015f22:	465b      	mov	r3, fp
 8015f24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f28:	f7ea fb76 	bl	8000618 <__aeabi_dmul>
 8015f2c:	4682      	mov	sl, r0
 8015f2e:	468b      	mov	fp, r1
 8015f30:	f038 080f 	bics.w	r8, r8, #15
 8015f34:	d073      	beq.n	801601e <_strtod_l+0x516>
 8015f36:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015f3a:	dd47      	ble.n	8015fcc <_strtod_l+0x4c4>
 8015f3c:	2400      	movs	r4, #0
 8015f3e:	46a0      	mov	r8, r4
 8015f40:	9407      	str	r4, [sp, #28]
 8015f42:	9405      	str	r4, [sp, #20]
 8015f44:	2322      	movs	r3, #34	; 0x22
 8015f46:	f8df b158 	ldr.w	fp, [pc, #344]	; 80160a0 <_strtod_l+0x598>
 8015f4a:	f8c9 3000 	str.w	r3, [r9]
 8015f4e:	f04f 0a00 	mov.w	sl, #0
 8015f52:	9b07      	ldr	r3, [sp, #28]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	f43f ae16 	beq.w	8015b86 <_strtod_l+0x7e>
 8015f5a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015f5c:	4648      	mov	r0, r9
 8015f5e:	f001 fe55 	bl	8017c0c <_Bfree>
 8015f62:	9905      	ldr	r1, [sp, #20]
 8015f64:	4648      	mov	r0, r9
 8015f66:	f001 fe51 	bl	8017c0c <_Bfree>
 8015f6a:	4641      	mov	r1, r8
 8015f6c:	4648      	mov	r0, r9
 8015f6e:	f001 fe4d 	bl	8017c0c <_Bfree>
 8015f72:	9907      	ldr	r1, [sp, #28]
 8015f74:	4648      	mov	r0, r9
 8015f76:	f001 fe49 	bl	8017c0c <_Bfree>
 8015f7a:	4621      	mov	r1, r4
 8015f7c:	4648      	mov	r0, r9
 8015f7e:	f001 fe45 	bl	8017c0c <_Bfree>
 8015f82:	e600      	b.n	8015b86 <_strtod_l+0x7e>
 8015f84:	9a06      	ldr	r2, [sp, #24]
 8015f86:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8015f8a:	4293      	cmp	r3, r2
 8015f8c:	dbba      	blt.n	8015f04 <_strtod_l+0x3fc>
 8015f8e:	4d42      	ldr	r5, [pc, #264]	; (8016098 <_strtod_l+0x590>)
 8015f90:	f1c4 040f 	rsb	r4, r4, #15
 8015f94:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015f98:	4652      	mov	r2, sl
 8015f9a:	465b      	mov	r3, fp
 8015f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015fa0:	f7ea fb3a 	bl	8000618 <__aeabi_dmul>
 8015fa4:	9b06      	ldr	r3, [sp, #24]
 8015fa6:	1b1c      	subs	r4, r3, r4
 8015fa8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8015fac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015fb0:	e78d      	b.n	8015ece <_strtod_l+0x3c6>
 8015fb2:	f113 0f16 	cmn.w	r3, #22
 8015fb6:	dba5      	blt.n	8015f04 <_strtod_l+0x3fc>
 8015fb8:	4a37      	ldr	r2, [pc, #220]	; (8016098 <_strtod_l+0x590>)
 8015fba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015fbe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015fc2:	4650      	mov	r0, sl
 8015fc4:	4659      	mov	r1, fp
 8015fc6:	f7ea fc51 	bl	800086c <__aeabi_ddiv>
 8015fca:	e782      	b.n	8015ed2 <_strtod_l+0x3ca>
 8015fcc:	2300      	movs	r3, #0
 8015fce:	4e33      	ldr	r6, [pc, #204]	; (801609c <_strtod_l+0x594>)
 8015fd0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015fd4:	4650      	mov	r0, sl
 8015fd6:	4659      	mov	r1, fp
 8015fd8:	461d      	mov	r5, r3
 8015fda:	f1b8 0f01 	cmp.w	r8, #1
 8015fde:	dc21      	bgt.n	8016024 <_strtod_l+0x51c>
 8015fe0:	b10b      	cbz	r3, 8015fe6 <_strtod_l+0x4de>
 8015fe2:	4682      	mov	sl, r0
 8015fe4:	468b      	mov	fp, r1
 8015fe6:	4b2d      	ldr	r3, [pc, #180]	; (801609c <_strtod_l+0x594>)
 8015fe8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015fec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015ff0:	4652      	mov	r2, sl
 8015ff2:	465b      	mov	r3, fp
 8015ff4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015ff8:	f7ea fb0e 	bl	8000618 <__aeabi_dmul>
 8015ffc:	4b28      	ldr	r3, [pc, #160]	; (80160a0 <_strtod_l+0x598>)
 8015ffe:	460a      	mov	r2, r1
 8016000:	400b      	ands	r3, r1
 8016002:	4928      	ldr	r1, [pc, #160]	; (80160a4 <_strtod_l+0x59c>)
 8016004:	428b      	cmp	r3, r1
 8016006:	4682      	mov	sl, r0
 8016008:	d898      	bhi.n	8015f3c <_strtod_l+0x434>
 801600a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801600e:	428b      	cmp	r3, r1
 8016010:	bf86      	itte	hi
 8016012:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80160ac <_strtod_l+0x5a4>
 8016016:	f04f 3aff 	movhi.w	sl, #4294967295
 801601a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801601e:	2300      	movs	r3, #0
 8016020:	9304      	str	r3, [sp, #16]
 8016022:	e077      	b.n	8016114 <_strtod_l+0x60c>
 8016024:	f018 0f01 	tst.w	r8, #1
 8016028:	d006      	beq.n	8016038 <_strtod_l+0x530>
 801602a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016032:	f7ea faf1 	bl	8000618 <__aeabi_dmul>
 8016036:	2301      	movs	r3, #1
 8016038:	3501      	adds	r5, #1
 801603a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801603e:	e7cc      	b.n	8015fda <_strtod_l+0x4d2>
 8016040:	d0ed      	beq.n	801601e <_strtod_l+0x516>
 8016042:	f1c8 0800 	rsb	r8, r8, #0
 8016046:	f018 020f 	ands.w	r2, r8, #15
 801604a:	d00a      	beq.n	8016062 <_strtod_l+0x55a>
 801604c:	4b12      	ldr	r3, [pc, #72]	; (8016098 <_strtod_l+0x590>)
 801604e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016052:	4650      	mov	r0, sl
 8016054:	4659      	mov	r1, fp
 8016056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801605a:	f7ea fc07 	bl	800086c <__aeabi_ddiv>
 801605e:	4682      	mov	sl, r0
 8016060:	468b      	mov	fp, r1
 8016062:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016066:	d0da      	beq.n	801601e <_strtod_l+0x516>
 8016068:	f1b8 0f1f 	cmp.w	r8, #31
 801606c:	dd20      	ble.n	80160b0 <_strtod_l+0x5a8>
 801606e:	2400      	movs	r4, #0
 8016070:	46a0      	mov	r8, r4
 8016072:	9407      	str	r4, [sp, #28]
 8016074:	9405      	str	r4, [sp, #20]
 8016076:	2322      	movs	r3, #34	; 0x22
 8016078:	f04f 0a00 	mov.w	sl, #0
 801607c:	f04f 0b00 	mov.w	fp, #0
 8016080:	f8c9 3000 	str.w	r3, [r9]
 8016084:	e765      	b.n	8015f52 <_strtod_l+0x44a>
 8016086:	bf00      	nop
 8016088:	0801ab5d 	.word	0x0801ab5d
 801608c:	0801abeb 	.word	0x0801abeb
 8016090:	0801ab65 	.word	0x0801ab65
 8016094:	0801aba8 	.word	0x0801aba8
 8016098:	0801ac28 	.word	0x0801ac28
 801609c:	0801ac00 	.word	0x0801ac00
 80160a0:	7ff00000 	.word	0x7ff00000
 80160a4:	7ca00000 	.word	0x7ca00000
 80160a8:	fff80000 	.word	0xfff80000
 80160ac:	7fefffff 	.word	0x7fefffff
 80160b0:	f018 0310 	ands.w	r3, r8, #16
 80160b4:	bf18      	it	ne
 80160b6:	236a      	movne	r3, #106	; 0x6a
 80160b8:	4da0      	ldr	r5, [pc, #640]	; (801633c <_strtod_l+0x834>)
 80160ba:	9304      	str	r3, [sp, #16]
 80160bc:	4650      	mov	r0, sl
 80160be:	4659      	mov	r1, fp
 80160c0:	2300      	movs	r3, #0
 80160c2:	f1b8 0f00 	cmp.w	r8, #0
 80160c6:	f300 810a 	bgt.w	80162de <_strtod_l+0x7d6>
 80160ca:	b10b      	cbz	r3, 80160d0 <_strtod_l+0x5c8>
 80160cc:	4682      	mov	sl, r0
 80160ce:	468b      	mov	fp, r1
 80160d0:	9b04      	ldr	r3, [sp, #16]
 80160d2:	b1bb      	cbz	r3, 8016104 <_strtod_l+0x5fc>
 80160d4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80160d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80160dc:	2b00      	cmp	r3, #0
 80160de:	4659      	mov	r1, fp
 80160e0:	dd10      	ble.n	8016104 <_strtod_l+0x5fc>
 80160e2:	2b1f      	cmp	r3, #31
 80160e4:	f340 8107 	ble.w	80162f6 <_strtod_l+0x7ee>
 80160e8:	2b34      	cmp	r3, #52	; 0x34
 80160ea:	bfde      	ittt	le
 80160ec:	3b20      	suble	r3, #32
 80160ee:	f04f 32ff 	movle.w	r2, #4294967295
 80160f2:	fa02 f303 	lslle.w	r3, r2, r3
 80160f6:	f04f 0a00 	mov.w	sl, #0
 80160fa:	bfcc      	ite	gt
 80160fc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016100:	ea03 0b01 	andle.w	fp, r3, r1
 8016104:	2200      	movs	r2, #0
 8016106:	2300      	movs	r3, #0
 8016108:	4650      	mov	r0, sl
 801610a:	4659      	mov	r1, fp
 801610c:	f7ea fcec 	bl	8000ae8 <__aeabi_dcmpeq>
 8016110:	2800      	cmp	r0, #0
 8016112:	d1ac      	bne.n	801606e <_strtod_l+0x566>
 8016114:	9b07      	ldr	r3, [sp, #28]
 8016116:	9300      	str	r3, [sp, #0]
 8016118:	9a05      	ldr	r2, [sp, #20]
 801611a:	9908      	ldr	r1, [sp, #32]
 801611c:	4623      	mov	r3, r4
 801611e:	4648      	mov	r0, r9
 8016120:	f001 fdc6 	bl	8017cb0 <__s2b>
 8016124:	9007      	str	r0, [sp, #28]
 8016126:	2800      	cmp	r0, #0
 8016128:	f43f af08 	beq.w	8015f3c <_strtod_l+0x434>
 801612c:	9a06      	ldr	r2, [sp, #24]
 801612e:	9b06      	ldr	r3, [sp, #24]
 8016130:	2a00      	cmp	r2, #0
 8016132:	f1c3 0300 	rsb	r3, r3, #0
 8016136:	bfa8      	it	ge
 8016138:	2300      	movge	r3, #0
 801613a:	930e      	str	r3, [sp, #56]	; 0x38
 801613c:	2400      	movs	r4, #0
 801613e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016142:	9316      	str	r3, [sp, #88]	; 0x58
 8016144:	46a0      	mov	r8, r4
 8016146:	9b07      	ldr	r3, [sp, #28]
 8016148:	4648      	mov	r0, r9
 801614a:	6859      	ldr	r1, [r3, #4]
 801614c:	f001 fd2a 	bl	8017ba4 <_Balloc>
 8016150:	9005      	str	r0, [sp, #20]
 8016152:	2800      	cmp	r0, #0
 8016154:	f43f aef6 	beq.w	8015f44 <_strtod_l+0x43c>
 8016158:	9b07      	ldr	r3, [sp, #28]
 801615a:	691a      	ldr	r2, [r3, #16]
 801615c:	3202      	adds	r2, #2
 801615e:	f103 010c 	add.w	r1, r3, #12
 8016162:	0092      	lsls	r2, r2, #2
 8016164:	300c      	adds	r0, #12
 8016166:	f7fe fd35 	bl	8014bd4 <memcpy>
 801616a:	aa1e      	add	r2, sp, #120	; 0x78
 801616c:	a91d      	add	r1, sp, #116	; 0x74
 801616e:	ec4b ab10 	vmov	d0, sl, fp
 8016172:	4648      	mov	r0, r9
 8016174:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016178:	f002 f856 	bl	8018228 <__d2b>
 801617c:	901c      	str	r0, [sp, #112]	; 0x70
 801617e:	2800      	cmp	r0, #0
 8016180:	f43f aee0 	beq.w	8015f44 <_strtod_l+0x43c>
 8016184:	2101      	movs	r1, #1
 8016186:	4648      	mov	r0, r9
 8016188:	f001 fe1e 	bl	8017dc8 <__i2b>
 801618c:	4680      	mov	r8, r0
 801618e:	2800      	cmp	r0, #0
 8016190:	f43f aed8 	beq.w	8015f44 <_strtod_l+0x43c>
 8016194:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016196:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016198:	2e00      	cmp	r6, #0
 801619a:	bfab      	itete	ge
 801619c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801619e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80161a0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80161a2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80161a4:	bfac      	ite	ge
 80161a6:	18f7      	addge	r7, r6, r3
 80161a8:	1b9d      	sublt	r5, r3, r6
 80161aa:	9b04      	ldr	r3, [sp, #16]
 80161ac:	1af6      	subs	r6, r6, r3
 80161ae:	4416      	add	r6, r2
 80161b0:	4b63      	ldr	r3, [pc, #396]	; (8016340 <_strtod_l+0x838>)
 80161b2:	3e01      	subs	r6, #1
 80161b4:	429e      	cmp	r6, r3
 80161b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80161ba:	f280 80af 	bge.w	801631c <_strtod_l+0x814>
 80161be:	1b9b      	subs	r3, r3, r6
 80161c0:	2b1f      	cmp	r3, #31
 80161c2:	eba2 0203 	sub.w	r2, r2, r3
 80161c6:	f04f 0101 	mov.w	r1, #1
 80161ca:	f300 809b 	bgt.w	8016304 <_strtod_l+0x7fc>
 80161ce:	fa01 f303 	lsl.w	r3, r1, r3
 80161d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80161d4:	2300      	movs	r3, #0
 80161d6:	930a      	str	r3, [sp, #40]	; 0x28
 80161d8:	18be      	adds	r6, r7, r2
 80161da:	9b04      	ldr	r3, [sp, #16]
 80161dc:	42b7      	cmp	r7, r6
 80161de:	4415      	add	r5, r2
 80161e0:	441d      	add	r5, r3
 80161e2:	463b      	mov	r3, r7
 80161e4:	bfa8      	it	ge
 80161e6:	4633      	movge	r3, r6
 80161e8:	42ab      	cmp	r3, r5
 80161ea:	bfa8      	it	ge
 80161ec:	462b      	movge	r3, r5
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	bfc2      	ittt	gt
 80161f2:	1af6      	subgt	r6, r6, r3
 80161f4:	1aed      	subgt	r5, r5, r3
 80161f6:	1aff      	subgt	r7, r7, r3
 80161f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161fa:	b1bb      	cbz	r3, 801622c <_strtod_l+0x724>
 80161fc:	4641      	mov	r1, r8
 80161fe:	461a      	mov	r2, r3
 8016200:	4648      	mov	r0, r9
 8016202:	f001 fe81 	bl	8017f08 <__pow5mult>
 8016206:	4680      	mov	r8, r0
 8016208:	2800      	cmp	r0, #0
 801620a:	f43f ae9b 	beq.w	8015f44 <_strtod_l+0x43c>
 801620e:	4601      	mov	r1, r0
 8016210:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016212:	4648      	mov	r0, r9
 8016214:	f001 fde1 	bl	8017dda <__multiply>
 8016218:	900c      	str	r0, [sp, #48]	; 0x30
 801621a:	2800      	cmp	r0, #0
 801621c:	f43f ae92 	beq.w	8015f44 <_strtod_l+0x43c>
 8016220:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016222:	4648      	mov	r0, r9
 8016224:	f001 fcf2 	bl	8017c0c <_Bfree>
 8016228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801622a:	931c      	str	r3, [sp, #112]	; 0x70
 801622c:	2e00      	cmp	r6, #0
 801622e:	dc7a      	bgt.n	8016326 <_strtod_l+0x81e>
 8016230:	9b06      	ldr	r3, [sp, #24]
 8016232:	2b00      	cmp	r3, #0
 8016234:	dd08      	ble.n	8016248 <_strtod_l+0x740>
 8016236:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016238:	9905      	ldr	r1, [sp, #20]
 801623a:	4648      	mov	r0, r9
 801623c:	f001 fe64 	bl	8017f08 <__pow5mult>
 8016240:	9005      	str	r0, [sp, #20]
 8016242:	2800      	cmp	r0, #0
 8016244:	f43f ae7e 	beq.w	8015f44 <_strtod_l+0x43c>
 8016248:	2d00      	cmp	r5, #0
 801624a:	dd08      	ble.n	801625e <_strtod_l+0x756>
 801624c:	462a      	mov	r2, r5
 801624e:	9905      	ldr	r1, [sp, #20]
 8016250:	4648      	mov	r0, r9
 8016252:	f001 fea7 	bl	8017fa4 <__lshift>
 8016256:	9005      	str	r0, [sp, #20]
 8016258:	2800      	cmp	r0, #0
 801625a:	f43f ae73 	beq.w	8015f44 <_strtod_l+0x43c>
 801625e:	2f00      	cmp	r7, #0
 8016260:	dd08      	ble.n	8016274 <_strtod_l+0x76c>
 8016262:	4641      	mov	r1, r8
 8016264:	463a      	mov	r2, r7
 8016266:	4648      	mov	r0, r9
 8016268:	f001 fe9c 	bl	8017fa4 <__lshift>
 801626c:	4680      	mov	r8, r0
 801626e:	2800      	cmp	r0, #0
 8016270:	f43f ae68 	beq.w	8015f44 <_strtod_l+0x43c>
 8016274:	9a05      	ldr	r2, [sp, #20]
 8016276:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016278:	4648      	mov	r0, r9
 801627a:	f001 ff01 	bl	8018080 <__mdiff>
 801627e:	4604      	mov	r4, r0
 8016280:	2800      	cmp	r0, #0
 8016282:	f43f ae5f 	beq.w	8015f44 <_strtod_l+0x43c>
 8016286:	68c3      	ldr	r3, [r0, #12]
 8016288:	930c      	str	r3, [sp, #48]	; 0x30
 801628a:	2300      	movs	r3, #0
 801628c:	60c3      	str	r3, [r0, #12]
 801628e:	4641      	mov	r1, r8
 8016290:	f001 fedc 	bl	801804c <__mcmp>
 8016294:	2800      	cmp	r0, #0
 8016296:	da55      	bge.n	8016344 <_strtod_l+0x83c>
 8016298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801629a:	b9e3      	cbnz	r3, 80162d6 <_strtod_l+0x7ce>
 801629c:	f1ba 0f00 	cmp.w	sl, #0
 80162a0:	d119      	bne.n	80162d6 <_strtod_l+0x7ce>
 80162a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80162a6:	b9b3      	cbnz	r3, 80162d6 <_strtod_l+0x7ce>
 80162a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80162ac:	0d1b      	lsrs	r3, r3, #20
 80162ae:	051b      	lsls	r3, r3, #20
 80162b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80162b4:	d90f      	bls.n	80162d6 <_strtod_l+0x7ce>
 80162b6:	6963      	ldr	r3, [r4, #20]
 80162b8:	b913      	cbnz	r3, 80162c0 <_strtod_l+0x7b8>
 80162ba:	6923      	ldr	r3, [r4, #16]
 80162bc:	2b01      	cmp	r3, #1
 80162be:	dd0a      	ble.n	80162d6 <_strtod_l+0x7ce>
 80162c0:	4621      	mov	r1, r4
 80162c2:	2201      	movs	r2, #1
 80162c4:	4648      	mov	r0, r9
 80162c6:	f001 fe6d 	bl	8017fa4 <__lshift>
 80162ca:	4641      	mov	r1, r8
 80162cc:	4604      	mov	r4, r0
 80162ce:	f001 febd 	bl	801804c <__mcmp>
 80162d2:	2800      	cmp	r0, #0
 80162d4:	dc67      	bgt.n	80163a6 <_strtod_l+0x89e>
 80162d6:	9b04      	ldr	r3, [sp, #16]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d171      	bne.n	80163c0 <_strtod_l+0x8b8>
 80162dc:	e63d      	b.n	8015f5a <_strtod_l+0x452>
 80162de:	f018 0f01 	tst.w	r8, #1
 80162e2:	d004      	beq.n	80162ee <_strtod_l+0x7e6>
 80162e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80162e8:	f7ea f996 	bl	8000618 <__aeabi_dmul>
 80162ec:	2301      	movs	r3, #1
 80162ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80162f2:	3508      	adds	r5, #8
 80162f4:	e6e5      	b.n	80160c2 <_strtod_l+0x5ba>
 80162f6:	f04f 32ff 	mov.w	r2, #4294967295
 80162fa:	fa02 f303 	lsl.w	r3, r2, r3
 80162fe:	ea03 0a0a 	and.w	sl, r3, sl
 8016302:	e6ff      	b.n	8016104 <_strtod_l+0x5fc>
 8016304:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016308:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801630c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016310:	36e2      	adds	r6, #226	; 0xe2
 8016312:	fa01 f306 	lsl.w	r3, r1, r6
 8016316:	930a      	str	r3, [sp, #40]	; 0x28
 8016318:	910f      	str	r1, [sp, #60]	; 0x3c
 801631a:	e75d      	b.n	80161d8 <_strtod_l+0x6d0>
 801631c:	2300      	movs	r3, #0
 801631e:	930a      	str	r3, [sp, #40]	; 0x28
 8016320:	2301      	movs	r3, #1
 8016322:	930f      	str	r3, [sp, #60]	; 0x3c
 8016324:	e758      	b.n	80161d8 <_strtod_l+0x6d0>
 8016326:	4632      	mov	r2, r6
 8016328:	991c      	ldr	r1, [sp, #112]	; 0x70
 801632a:	4648      	mov	r0, r9
 801632c:	f001 fe3a 	bl	8017fa4 <__lshift>
 8016330:	901c      	str	r0, [sp, #112]	; 0x70
 8016332:	2800      	cmp	r0, #0
 8016334:	f47f af7c 	bne.w	8016230 <_strtod_l+0x728>
 8016338:	e604      	b.n	8015f44 <_strtod_l+0x43c>
 801633a:	bf00      	nop
 801633c:	0801abc0 	.word	0x0801abc0
 8016340:	fffffc02 	.word	0xfffffc02
 8016344:	465d      	mov	r5, fp
 8016346:	f040 8086 	bne.w	8016456 <_strtod_l+0x94e>
 801634a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801634c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016350:	b32a      	cbz	r2, 801639e <_strtod_l+0x896>
 8016352:	4aaf      	ldr	r2, [pc, #700]	; (8016610 <_strtod_l+0xb08>)
 8016354:	4293      	cmp	r3, r2
 8016356:	d153      	bne.n	8016400 <_strtod_l+0x8f8>
 8016358:	9b04      	ldr	r3, [sp, #16]
 801635a:	4650      	mov	r0, sl
 801635c:	b1d3      	cbz	r3, 8016394 <_strtod_l+0x88c>
 801635e:	4aad      	ldr	r2, [pc, #692]	; (8016614 <_strtod_l+0xb0c>)
 8016360:	402a      	ands	r2, r5
 8016362:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016366:	f04f 31ff 	mov.w	r1, #4294967295
 801636a:	d816      	bhi.n	801639a <_strtod_l+0x892>
 801636c:	0d12      	lsrs	r2, r2, #20
 801636e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016372:	fa01 f303 	lsl.w	r3, r1, r3
 8016376:	4298      	cmp	r0, r3
 8016378:	d142      	bne.n	8016400 <_strtod_l+0x8f8>
 801637a:	4ba7      	ldr	r3, [pc, #668]	; (8016618 <_strtod_l+0xb10>)
 801637c:	429d      	cmp	r5, r3
 801637e:	d102      	bne.n	8016386 <_strtod_l+0x87e>
 8016380:	3001      	adds	r0, #1
 8016382:	f43f addf 	beq.w	8015f44 <_strtod_l+0x43c>
 8016386:	4ba3      	ldr	r3, [pc, #652]	; (8016614 <_strtod_l+0xb0c>)
 8016388:	402b      	ands	r3, r5
 801638a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801638e:	f04f 0a00 	mov.w	sl, #0
 8016392:	e7a0      	b.n	80162d6 <_strtod_l+0x7ce>
 8016394:	f04f 33ff 	mov.w	r3, #4294967295
 8016398:	e7ed      	b.n	8016376 <_strtod_l+0x86e>
 801639a:	460b      	mov	r3, r1
 801639c:	e7eb      	b.n	8016376 <_strtod_l+0x86e>
 801639e:	bb7b      	cbnz	r3, 8016400 <_strtod_l+0x8f8>
 80163a0:	f1ba 0f00 	cmp.w	sl, #0
 80163a4:	d12c      	bne.n	8016400 <_strtod_l+0x8f8>
 80163a6:	9904      	ldr	r1, [sp, #16]
 80163a8:	4a9a      	ldr	r2, [pc, #616]	; (8016614 <_strtod_l+0xb0c>)
 80163aa:	465b      	mov	r3, fp
 80163ac:	b1f1      	cbz	r1, 80163ec <_strtod_l+0x8e4>
 80163ae:	ea02 010b 	and.w	r1, r2, fp
 80163b2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80163b6:	dc19      	bgt.n	80163ec <_strtod_l+0x8e4>
 80163b8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80163bc:	f77f ae5b 	ble.w	8016076 <_strtod_l+0x56e>
 80163c0:	4a96      	ldr	r2, [pc, #600]	; (801661c <_strtod_l+0xb14>)
 80163c2:	2300      	movs	r3, #0
 80163c4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80163c8:	4650      	mov	r0, sl
 80163ca:	4659      	mov	r1, fp
 80163cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80163d0:	f7ea f922 	bl	8000618 <__aeabi_dmul>
 80163d4:	4682      	mov	sl, r0
 80163d6:	468b      	mov	fp, r1
 80163d8:	2900      	cmp	r1, #0
 80163da:	f47f adbe 	bne.w	8015f5a <_strtod_l+0x452>
 80163de:	2800      	cmp	r0, #0
 80163e0:	f47f adbb 	bne.w	8015f5a <_strtod_l+0x452>
 80163e4:	2322      	movs	r3, #34	; 0x22
 80163e6:	f8c9 3000 	str.w	r3, [r9]
 80163ea:	e5b6      	b.n	8015f5a <_strtod_l+0x452>
 80163ec:	4013      	ands	r3, r2
 80163ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80163f2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80163f6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80163fa:	f04f 3aff 	mov.w	sl, #4294967295
 80163fe:	e76a      	b.n	80162d6 <_strtod_l+0x7ce>
 8016400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016402:	b193      	cbz	r3, 801642a <_strtod_l+0x922>
 8016404:	422b      	tst	r3, r5
 8016406:	f43f af66 	beq.w	80162d6 <_strtod_l+0x7ce>
 801640a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801640c:	9a04      	ldr	r2, [sp, #16]
 801640e:	4650      	mov	r0, sl
 8016410:	4659      	mov	r1, fp
 8016412:	b173      	cbz	r3, 8016432 <_strtod_l+0x92a>
 8016414:	f7ff fb59 	bl	8015aca <sulp>
 8016418:	4602      	mov	r2, r0
 801641a:	460b      	mov	r3, r1
 801641c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016420:	f7e9 ff44 	bl	80002ac <__adddf3>
 8016424:	4682      	mov	sl, r0
 8016426:	468b      	mov	fp, r1
 8016428:	e755      	b.n	80162d6 <_strtod_l+0x7ce>
 801642a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801642c:	ea13 0f0a 	tst.w	r3, sl
 8016430:	e7e9      	b.n	8016406 <_strtod_l+0x8fe>
 8016432:	f7ff fb4a 	bl	8015aca <sulp>
 8016436:	4602      	mov	r2, r0
 8016438:	460b      	mov	r3, r1
 801643a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801643e:	f7e9 ff33 	bl	80002a8 <__aeabi_dsub>
 8016442:	2200      	movs	r2, #0
 8016444:	2300      	movs	r3, #0
 8016446:	4682      	mov	sl, r0
 8016448:	468b      	mov	fp, r1
 801644a:	f7ea fb4d 	bl	8000ae8 <__aeabi_dcmpeq>
 801644e:	2800      	cmp	r0, #0
 8016450:	f47f ae11 	bne.w	8016076 <_strtod_l+0x56e>
 8016454:	e73f      	b.n	80162d6 <_strtod_l+0x7ce>
 8016456:	4641      	mov	r1, r8
 8016458:	4620      	mov	r0, r4
 801645a:	f001 ff34 	bl	80182c6 <__ratio>
 801645e:	ec57 6b10 	vmov	r6, r7, d0
 8016462:	2200      	movs	r2, #0
 8016464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016468:	ee10 0a10 	vmov	r0, s0
 801646c:	4639      	mov	r1, r7
 801646e:	f7ea fb4f 	bl	8000b10 <__aeabi_dcmple>
 8016472:	2800      	cmp	r0, #0
 8016474:	d077      	beq.n	8016566 <_strtod_l+0xa5e>
 8016476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016478:	2b00      	cmp	r3, #0
 801647a:	d04a      	beq.n	8016512 <_strtod_l+0xa0a>
 801647c:	4b68      	ldr	r3, [pc, #416]	; (8016620 <_strtod_l+0xb18>)
 801647e:	2200      	movs	r2, #0
 8016480:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016484:	4f66      	ldr	r7, [pc, #408]	; (8016620 <_strtod_l+0xb18>)
 8016486:	2600      	movs	r6, #0
 8016488:	4b62      	ldr	r3, [pc, #392]	; (8016614 <_strtod_l+0xb0c>)
 801648a:	402b      	ands	r3, r5
 801648c:	930f      	str	r3, [sp, #60]	; 0x3c
 801648e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016490:	4b64      	ldr	r3, [pc, #400]	; (8016624 <_strtod_l+0xb1c>)
 8016492:	429a      	cmp	r2, r3
 8016494:	f040 80ce 	bne.w	8016634 <_strtod_l+0xb2c>
 8016498:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801649c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80164a0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80164a4:	ec4b ab10 	vmov	d0, sl, fp
 80164a8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80164ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80164b0:	f001 fe44 	bl	801813c <__ulp>
 80164b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80164b8:	ec53 2b10 	vmov	r2, r3, d0
 80164bc:	f7ea f8ac 	bl	8000618 <__aeabi_dmul>
 80164c0:	4652      	mov	r2, sl
 80164c2:	465b      	mov	r3, fp
 80164c4:	f7e9 fef2 	bl	80002ac <__adddf3>
 80164c8:	460b      	mov	r3, r1
 80164ca:	4952      	ldr	r1, [pc, #328]	; (8016614 <_strtod_l+0xb0c>)
 80164cc:	4a56      	ldr	r2, [pc, #344]	; (8016628 <_strtod_l+0xb20>)
 80164ce:	4019      	ands	r1, r3
 80164d0:	4291      	cmp	r1, r2
 80164d2:	4682      	mov	sl, r0
 80164d4:	d95b      	bls.n	801658e <_strtod_l+0xa86>
 80164d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164d8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80164dc:	4293      	cmp	r3, r2
 80164de:	d103      	bne.n	80164e8 <_strtod_l+0x9e0>
 80164e0:	9b08      	ldr	r3, [sp, #32]
 80164e2:	3301      	adds	r3, #1
 80164e4:	f43f ad2e 	beq.w	8015f44 <_strtod_l+0x43c>
 80164e8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016618 <_strtod_l+0xb10>
 80164ec:	f04f 3aff 	mov.w	sl, #4294967295
 80164f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80164f2:	4648      	mov	r0, r9
 80164f4:	f001 fb8a 	bl	8017c0c <_Bfree>
 80164f8:	9905      	ldr	r1, [sp, #20]
 80164fa:	4648      	mov	r0, r9
 80164fc:	f001 fb86 	bl	8017c0c <_Bfree>
 8016500:	4641      	mov	r1, r8
 8016502:	4648      	mov	r0, r9
 8016504:	f001 fb82 	bl	8017c0c <_Bfree>
 8016508:	4621      	mov	r1, r4
 801650a:	4648      	mov	r0, r9
 801650c:	f001 fb7e 	bl	8017c0c <_Bfree>
 8016510:	e619      	b.n	8016146 <_strtod_l+0x63e>
 8016512:	f1ba 0f00 	cmp.w	sl, #0
 8016516:	d11a      	bne.n	801654e <_strtod_l+0xa46>
 8016518:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801651c:	b9eb      	cbnz	r3, 801655a <_strtod_l+0xa52>
 801651e:	2200      	movs	r2, #0
 8016520:	4b3f      	ldr	r3, [pc, #252]	; (8016620 <_strtod_l+0xb18>)
 8016522:	4630      	mov	r0, r6
 8016524:	4639      	mov	r1, r7
 8016526:	f7ea fae9 	bl	8000afc <__aeabi_dcmplt>
 801652a:	b9c8      	cbnz	r0, 8016560 <_strtod_l+0xa58>
 801652c:	4630      	mov	r0, r6
 801652e:	4639      	mov	r1, r7
 8016530:	2200      	movs	r2, #0
 8016532:	4b3e      	ldr	r3, [pc, #248]	; (801662c <_strtod_l+0xb24>)
 8016534:	f7ea f870 	bl	8000618 <__aeabi_dmul>
 8016538:	4606      	mov	r6, r0
 801653a:	460f      	mov	r7, r1
 801653c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016540:	9618      	str	r6, [sp, #96]	; 0x60
 8016542:	9319      	str	r3, [sp, #100]	; 0x64
 8016544:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016548:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801654c:	e79c      	b.n	8016488 <_strtod_l+0x980>
 801654e:	f1ba 0f01 	cmp.w	sl, #1
 8016552:	d102      	bne.n	801655a <_strtod_l+0xa52>
 8016554:	2d00      	cmp	r5, #0
 8016556:	f43f ad8e 	beq.w	8016076 <_strtod_l+0x56e>
 801655a:	2200      	movs	r2, #0
 801655c:	4b34      	ldr	r3, [pc, #208]	; (8016630 <_strtod_l+0xb28>)
 801655e:	e78f      	b.n	8016480 <_strtod_l+0x978>
 8016560:	2600      	movs	r6, #0
 8016562:	4f32      	ldr	r7, [pc, #200]	; (801662c <_strtod_l+0xb24>)
 8016564:	e7ea      	b.n	801653c <_strtod_l+0xa34>
 8016566:	4b31      	ldr	r3, [pc, #196]	; (801662c <_strtod_l+0xb24>)
 8016568:	4630      	mov	r0, r6
 801656a:	4639      	mov	r1, r7
 801656c:	2200      	movs	r2, #0
 801656e:	f7ea f853 	bl	8000618 <__aeabi_dmul>
 8016572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016574:	4606      	mov	r6, r0
 8016576:	460f      	mov	r7, r1
 8016578:	b933      	cbnz	r3, 8016588 <_strtod_l+0xa80>
 801657a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801657e:	9010      	str	r0, [sp, #64]	; 0x40
 8016580:	9311      	str	r3, [sp, #68]	; 0x44
 8016582:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016586:	e7df      	b.n	8016548 <_strtod_l+0xa40>
 8016588:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801658c:	e7f9      	b.n	8016582 <_strtod_l+0xa7a>
 801658e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016592:	9b04      	ldr	r3, [sp, #16]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d1ab      	bne.n	80164f0 <_strtod_l+0x9e8>
 8016598:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801659c:	0d1b      	lsrs	r3, r3, #20
 801659e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80165a0:	051b      	lsls	r3, r3, #20
 80165a2:	429a      	cmp	r2, r3
 80165a4:	465d      	mov	r5, fp
 80165a6:	d1a3      	bne.n	80164f0 <_strtod_l+0x9e8>
 80165a8:	4639      	mov	r1, r7
 80165aa:	4630      	mov	r0, r6
 80165ac:	f7ea fae4 	bl	8000b78 <__aeabi_d2iz>
 80165b0:	f7e9 ffc8 	bl	8000544 <__aeabi_i2d>
 80165b4:	460b      	mov	r3, r1
 80165b6:	4602      	mov	r2, r0
 80165b8:	4639      	mov	r1, r7
 80165ba:	4630      	mov	r0, r6
 80165bc:	f7e9 fe74 	bl	80002a8 <__aeabi_dsub>
 80165c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165c2:	4606      	mov	r6, r0
 80165c4:	460f      	mov	r7, r1
 80165c6:	b933      	cbnz	r3, 80165d6 <_strtod_l+0xace>
 80165c8:	f1ba 0f00 	cmp.w	sl, #0
 80165cc:	d103      	bne.n	80165d6 <_strtod_l+0xace>
 80165ce:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80165d2:	2d00      	cmp	r5, #0
 80165d4:	d06d      	beq.n	80166b2 <_strtod_l+0xbaa>
 80165d6:	a30a      	add	r3, pc, #40	; (adr r3, 8016600 <_strtod_l+0xaf8>)
 80165d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165dc:	4630      	mov	r0, r6
 80165de:	4639      	mov	r1, r7
 80165e0:	f7ea fa8c 	bl	8000afc <__aeabi_dcmplt>
 80165e4:	2800      	cmp	r0, #0
 80165e6:	f47f acb8 	bne.w	8015f5a <_strtod_l+0x452>
 80165ea:	a307      	add	r3, pc, #28	; (adr r3, 8016608 <_strtod_l+0xb00>)
 80165ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165f0:	4630      	mov	r0, r6
 80165f2:	4639      	mov	r1, r7
 80165f4:	f7ea faa0 	bl	8000b38 <__aeabi_dcmpgt>
 80165f8:	2800      	cmp	r0, #0
 80165fa:	f43f af79 	beq.w	80164f0 <_strtod_l+0x9e8>
 80165fe:	e4ac      	b.n	8015f5a <_strtod_l+0x452>
 8016600:	94a03595 	.word	0x94a03595
 8016604:	3fdfffff 	.word	0x3fdfffff
 8016608:	35afe535 	.word	0x35afe535
 801660c:	3fe00000 	.word	0x3fe00000
 8016610:	000fffff 	.word	0x000fffff
 8016614:	7ff00000 	.word	0x7ff00000
 8016618:	7fefffff 	.word	0x7fefffff
 801661c:	39500000 	.word	0x39500000
 8016620:	3ff00000 	.word	0x3ff00000
 8016624:	7fe00000 	.word	0x7fe00000
 8016628:	7c9fffff 	.word	0x7c9fffff
 801662c:	3fe00000 	.word	0x3fe00000
 8016630:	bff00000 	.word	0xbff00000
 8016634:	9b04      	ldr	r3, [sp, #16]
 8016636:	b333      	cbz	r3, 8016686 <_strtod_l+0xb7e>
 8016638:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801663a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801663e:	d822      	bhi.n	8016686 <_strtod_l+0xb7e>
 8016640:	a327      	add	r3, pc, #156	; (adr r3, 80166e0 <_strtod_l+0xbd8>)
 8016642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016646:	4630      	mov	r0, r6
 8016648:	4639      	mov	r1, r7
 801664a:	f7ea fa61 	bl	8000b10 <__aeabi_dcmple>
 801664e:	b1a0      	cbz	r0, 801667a <_strtod_l+0xb72>
 8016650:	4639      	mov	r1, r7
 8016652:	4630      	mov	r0, r6
 8016654:	f7ea fab8 	bl	8000bc8 <__aeabi_d2uiz>
 8016658:	2800      	cmp	r0, #0
 801665a:	bf08      	it	eq
 801665c:	2001      	moveq	r0, #1
 801665e:	f7e9 ff61 	bl	8000524 <__aeabi_ui2d>
 8016662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016664:	4606      	mov	r6, r0
 8016666:	460f      	mov	r7, r1
 8016668:	bb03      	cbnz	r3, 80166ac <_strtod_l+0xba4>
 801666a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801666e:	9012      	str	r0, [sp, #72]	; 0x48
 8016670:	9313      	str	r3, [sp, #76]	; 0x4c
 8016672:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016676:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801667a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801667c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801667e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016682:	1a9b      	subs	r3, r3, r2
 8016684:	930b      	str	r3, [sp, #44]	; 0x2c
 8016686:	ed9d 0b08 	vldr	d0, [sp, #32]
 801668a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801668e:	f001 fd55 	bl	801813c <__ulp>
 8016692:	4650      	mov	r0, sl
 8016694:	ec53 2b10 	vmov	r2, r3, d0
 8016698:	4659      	mov	r1, fp
 801669a:	f7e9 ffbd 	bl	8000618 <__aeabi_dmul>
 801669e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80166a2:	f7e9 fe03 	bl	80002ac <__adddf3>
 80166a6:	4682      	mov	sl, r0
 80166a8:	468b      	mov	fp, r1
 80166aa:	e772      	b.n	8016592 <_strtod_l+0xa8a>
 80166ac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80166b0:	e7df      	b.n	8016672 <_strtod_l+0xb6a>
 80166b2:	a30d      	add	r3, pc, #52	; (adr r3, 80166e8 <_strtod_l+0xbe0>)
 80166b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166b8:	f7ea fa20 	bl	8000afc <__aeabi_dcmplt>
 80166bc:	e79c      	b.n	80165f8 <_strtod_l+0xaf0>
 80166be:	2300      	movs	r3, #0
 80166c0:	930d      	str	r3, [sp, #52]	; 0x34
 80166c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80166c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80166c6:	6013      	str	r3, [r2, #0]
 80166c8:	f7ff ba61 	b.w	8015b8e <_strtod_l+0x86>
 80166cc:	2b65      	cmp	r3, #101	; 0x65
 80166ce:	f04f 0200 	mov.w	r2, #0
 80166d2:	f43f ab4e 	beq.w	8015d72 <_strtod_l+0x26a>
 80166d6:	2101      	movs	r1, #1
 80166d8:	4614      	mov	r4, r2
 80166da:	9104      	str	r1, [sp, #16]
 80166dc:	f7ff bacb 	b.w	8015c76 <_strtod_l+0x16e>
 80166e0:	ffc00000 	.word	0xffc00000
 80166e4:	41dfffff 	.word	0x41dfffff
 80166e8:	94a03595 	.word	0x94a03595
 80166ec:	3fcfffff 	.word	0x3fcfffff

080166f0 <_strtod_r>:
 80166f0:	4b05      	ldr	r3, [pc, #20]	; (8016708 <_strtod_r+0x18>)
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	b410      	push	{r4}
 80166f6:	6a1b      	ldr	r3, [r3, #32]
 80166f8:	4c04      	ldr	r4, [pc, #16]	; (801670c <_strtod_r+0x1c>)
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	bf08      	it	eq
 80166fe:	4623      	moveq	r3, r4
 8016700:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016704:	f7ff ba00 	b.w	8015b08 <_strtod_l>
 8016708:	20000184 	.word	0x20000184
 801670c:	200001e8 	.word	0x200001e8

08016710 <strtod>:
 8016710:	4b07      	ldr	r3, [pc, #28]	; (8016730 <strtod+0x20>)
 8016712:	4a08      	ldr	r2, [pc, #32]	; (8016734 <strtod+0x24>)
 8016714:	b410      	push	{r4}
 8016716:	681c      	ldr	r4, [r3, #0]
 8016718:	6a23      	ldr	r3, [r4, #32]
 801671a:	2b00      	cmp	r3, #0
 801671c:	bf08      	it	eq
 801671e:	4613      	moveq	r3, r2
 8016720:	460a      	mov	r2, r1
 8016722:	4601      	mov	r1, r0
 8016724:	4620      	mov	r0, r4
 8016726:	f85d 4b04 	ldr.w	r4, [sp], #4
 801672a:	f7ff b9ed 	b.w	8015b08 <_strtod_l>
 801672e:	bf00      	nop
 8016730:	20000184 	.word	0x20000184
 8016734:	200001e8 	.word	0x200001e8

08016738 <_strtol_l.isra.0>:
 8016738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801673c:	4680      	mov	r8, r0
 801673e:	4689      	mov	r9, r1
 8016740:	4692      	mov	sl, r2
 8016742:	461e      	mov	r6, r3
 8016744:	460f      	mov	r7, r1
 8016746:	463d      	mov	r5, r7
 8016748:	9808      	ldr	r0, [sp, #32]
 801674a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801674e:	f001 fa01 	bl	8017b54 <__locale_ctype_ptr_l>
 8016752:	4420      	add	r0, r4
 8016754:	7843      	ldrb	r3, [r0, #1]
 8016756:	f013 0308 	ands.w	r3, r3, #8
 801675a:	d132      	bne.n	80167c2 <_strtol_l.isra.0+0x8a>
 801675c:	2c2d      	cmp	r4, #45	; 0x2d
 801675e:	d132      	bne.n	80167c6 <_strtol_l.isra.0+0x8e>
 8016760:	787c      	ldrb	r4, [r7, #1]
 8016762:	1cbd      	adds	r5, r7, #2
 8016764:	2201      	movs	r2, #1
 8016766:	2e00      	cmp	r6, #0
 8016768:	d05d      	beq.n	8016826 <_strtol_l.isra.0+0xee>
 801676a:	2e10      	cmp	r6, #16
 801676c:	d109      	bne.n	8016782 <_strtol_l.isra.0+0x4a>
 801676e:	2c30      	cmp	r4, #48	; 0x30
 8016770:	d107      	bne.n	8016782 <_strtol_l.isra.0+0x4a>
 8016772:	782b      	ldrb	r3, [r5, #0]
 8016774:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016778:	2b58      	cmp	r3, #88	; 0x58
 801677a:	d14f      	bne.n	801681c <_strtol_l.isra.0+0xe4>
 801677c:	786c      	ldrb	r4, [r5, #1]
 801677e:	2610      	movs	r6, #16
 8016780:	3502      	adds	r5, #2
 8016782:	2a00      	cmp	r2, #0
 8016784:	bf14      	ite	ne
 8016786:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801678a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801678e:	2700      	movs	r7, #0
 8016790:	fbb1 fcf6 	udiv	ip, r1, r6
 8016794:	4638      	mov	r0, r7
 8016796:	fb06 1e1c 	mls	lr, r6, ip, r1
 801679a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801679e:	2b09      	cmp	r3, #9
 80167a0:	d817      	bhi.n	80167d2 <_strtol_l.isra.0+0x9a>
 80167a2:	461c      	mov	r4, r3
 80167a4:	42a6      	cmp	r6, r4
 80167a6:	dd23      	ble.n	80167f0 <_strtol_l.isra.0+0xb8>
 80167a8:	1c7b      	adds	r3, r7, #1
 80167aa:	d007      	beq.n	80167bc <_strtol_l.isra.0+0x84>
 80167ac:	4584      	cmp	ip, r0
 80167ae:	d31c      	bcc.n	80167ea <_strtol_l.isra.0+0xb2>
 80167b0:	d101      	bne.n	80167b6 <_strtol_l.isra.0+0x7e>
 80167b2:	45a6      	cmp	lr, r4
 80167b4:	db19      	blt.n	80167ea <_strtol_l.isra.0+0xb2>
 80167b6:	fb00 4006 	mla	r0, r0, r6, r4
 80167ba:	2701      	movs	r7, #1
 80167bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80167c0:	e7eb      	b.n	801679a <_strtol_l.isra.0+0x62>
 80167c2:	462f      	mov	r7, r5
 80167c4:	e7bf      	b.n	8016746 <_strtol_l.isra.0+0xe>
 80167c6:	2c2b      	cmp	r4, #43	; 0x2b
 80167c8:	bf04      	itt	eq
 80167ca:	1cbd      	addeq	r5, r7, #2
 80167cc:	787c      	ldrbeq	r4, [r7, #1]
 80167ce:	461a      	mov	r2, r3
 80167d0:	e7c9      	b.n	8016766 <_strtol_l.isra.0+0x2e>
 80167d2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80167d6:	2b19      	cmp	r3, #25
 80167d8:	d801      	bhi.n	80167de <_strtol_l.isra.0+0xa6>
 80167da:	3c37      	subs	r4, #55	; 0x37
 80167dc:	e7e2      	b.n	80167a4 <_strtol_l.isra.0+0x6c>
 80167de:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80167e2:	2b19      	cmp	r3, #25
 80167e4:	d804      	bhi.n	80167f0 <_strtol_l.isra.0+0xb8>
 80167e6:	3c57      	subs	r4, #87	; 0x57
 80167e8:	e7dc      	b.n	80167a4 <_strtol_l.isra.0+0x6c>
 80167ea:	f04f 37ff 	mov.w	r7, #4294967295
 80167ee:	e7e5      	b.n	80167bc <_strtol_l.isra.0+0x84>
 80167f0:	1c7b      	adds	r3, r7, #1
 80167f2:	d108      	bne.n	8016806 <_strtol_l.isra.0+0xce>
 80167f4:	2322      	movs	r3, #34	; 0x22
 80167f6:	f8c8 3000 	str.w	r3, [r8]
 80167fa:	4608      	mov	r0, r1
 80167fc:	f1ba 0f00 	cmp.w	sl, #0
 8016800:	d107      	bne.n	8016812 <_strtol_l.isra.0+0xda>
 8016802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016806:	b102      	cbz	r2, 801680a <_strtol_l.isra.0+0xd2>
 8016808:	4240      	negs	r0, r0
 801680a:	f1ba 0f00 	cmp.w	sl, #0
 801680e:	d0f8      	beq.n	8016802 <_strtol_l.isra.0+0xca>
 8016810:	b10f      	cbz	r7, 8016816 <_strtol_l.isra.0+0xde>
 8016812:	f105 39ff 	add.w	r9, r5, #4294967295
 8016816:	f8ca 9000 	str.w	r9, [sl]
 801681a:	e7f2      	b.n	8016802 <_strtol_l.isra.0+0xca>
 801681c:	2430      	movs	r4, #48	; 0x30
 801681e:	2e00      	cmp	r6, #0
 8016820:	d1af      	bne.n	8016782 <_strtol_l.isra.0+0x4a>
 8016822:	2608      	movs	r6, #8
 8016824:	e7ad      	b.n	8016782 <_strtol_l.isra.0+0x4a>
 8016826:	2c30      	cmp	r4, #48	; 0x30
 8016828:	d0a3      	beq.n	8016772 <_strtol_l.isra.0+0x3a>
 801682a:	260a      	movs	r6, #10
 801682c:	e7a9      	b.n	8016782 <_strtol_l.isra.0+0x4a>
	...

08016830 <_strtol_r>:
 8016830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016832:	4c06      	ldr	r4, [pc, #24]	; (801684c <_strtol_r+0x1c>)
 8016834:	4d06      	ldr	r5, [pc, #24]	; (8016850 <_strtol_r+0x20>)
 8016836:	6824      	ldr	r4, [r4, #0]
 8016838:	6a24      	ldr	r4, [r4, #32]
 801683a:	2c00      	cmp	r4, #0
 801683c:	bf08      	it	eq
 801683e:	462c      	moveq	r4, r5
 8016840:	9400      	str	r4, [sp, #0]
 8016842:	f7ff ff79 	bl	8016738 <_strtol_l.isra.0>
 8016846:	b003      	add	sp, #12
 8016848:	bd30      	pop	{r4, r5, pc}
 801684a:	bf00      	nop
 801684c:	20000184 	.word	0x20000184
 8016850:	200001e8 	.word	0x200001e8

08016854 <strtol>:
 8016854:	4b08      	ldr	r3, [pc, #32]	; (8016878 <strtol+0x24>)
 8016856:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016858:	681c      	ldr	r4, [r3, #0]
 801685a:	4d08      	ldr	r5, [pc, #32]	; (801687c <strtol+0x28>)
 801685c:	6a23      	ldr	r3, [r4, #32]
 801685e:	2b00      	cmp	r3, #0
 8016860:	bf08      	it	eq
 8016862:	462b      	moveq	r3, r5
 8016864:	9300      	str	r3, [sp, #0]
 8016866:	4613      	mov	r3, r2
 8016868:	460a      	mov	r2, r1
 801686a:	4601      	mov	r1, r0
 801686c:	4620      	mov	r0, r4
 801686e:	f7ff ff63 	bl	8016738 <_strtol_l.isra.0>
 8016872:	b003      	add	sp, #12
 8016874:	bd30      	pop	{r4, r5, pc}
 8016876:	bf00      	nop
 8016878:	20000184 	.word	0x20000184
 801687c:	200001e8 	.word	0x200001e8

08016880 <quorem>:
 8016880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016884:	6903      	ldr	r3, [r0, #16]
 8016886:	690c      	ldr	r4, [r1, #16]
 8016888:	42a3      	cmp	r3, r4
 801688a:	4680      	mov	r8, r0
 801688c:	f2c0 8082 	blt.w	8016994 <quorem+0x114>
 8016890:	3c01      	subs	r4, #1
 8016892:	f101 0714 	add.w	r7, r1, #20
 8016896:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801689a:	f100 0614 	add.w	r6, r0, #20
 801689e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80168a2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80168a6:	eb06 030c 	add.w	r3, r6, ip
 80168aa:	3501      	adds	r5, #1
 80168ac:	eb07 090c 	add.w	r9, r7, ip
 80168b0:	9301      	str	r3, [sp, #4]
 80168b2:	fbb0 f5f5 	udiv	r5, r0, r5
 80168b6:	b395      	cbz	r5, 801691e <quorem+0x9e>
 80168b8:	f04f 0a00 	mov.w	sl, #0
 80168bc:	4638      	mov	r0, r7
 80168be:	46b6      	mov	lr, r6
 80168c0:	46d3      	mov	fp, sl
 80168c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80168c6:	b293      	uxth	r3, r2
 80168c8:	fb05 a303 	mla	r3, r5, r3, sl
 80168cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80168d0:	b29b      	uxth	r3, r3
 80168d2:	ebab 0303 	sub.w	r3, fp, r3
 80168d6:	0c12      	lsrs	r2, r2, #16
 80168d8:	f8de b000 	ldr.w	fp, [lr]
 80168dc:	fb05 a202 	mla	r2, r5, r2, sl
 80168e0:	fa13 f38b 	uxtah	r3, r3, fp
 80168e4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80168e8:	fa1f fb82 	uxth.w	fp, r2
 80168ec:	f8de 2000 	ldr.w	r2, [lr]
 80168f0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80168f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80168f8:	b29b      	uxth	r3, r3
 80168fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80168fe:	4581      	cmp	r9, r0
 8016900:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016904:	f84e 3b04 	str.w	r3, [lr], #4
 8016908:	d2db      	bcs.n	80168c2 <quorem+0x42>
 801690a:	f856 300c 	ldr.w	r3, [r6, ip]
 801690e:	b933      	cbnz	r3, 801691e <quorem+0x9e>
 8016910:	9b01      	ldr	r3, [sp, #4]
 8016912:	3b04      	subs	r3, #4
 8016914:	429e      	cmp	r6, r3
 8016916:	461a      	mov	r2, r3
 8016918:	d330      	bcc.n	801697c <quorem+0xfc>
 801691a:	f8c8 4010 	str.w	r4, [r8, #16]
 801691e:	4640      	mov	r0, r8
 8016920:	f001 fb94 	bl	801804c <__mcmp>
 8016924:	2800      	cmp	r0, #0
 8016926:	db25      	blt.n	8016974 <quorem+0xf4>
 8016928:	3501      	adds	r5, #1
 801692a:	4630      	mov	r0, r6
 801692c:	f04f 0c00 	mov.w	ip, #0
 8016930:	f857 2b04 	ldr.w	r2, [r7], #4
 8016934:	f8d0 e000 	ldr.w	lr, [r0]
 8016938:	b293      	uxth	r3, r2
 801693a:	ebac 0303 	sub.w	r3, ip, r3
 801693e:	0c12      	lsrs	r2, r2, #16
 8016940:	fa13 f38e 	uxtah	r3, r3, lr
 8016944:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016948:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801694c:	b29b      	uxth	r3, r3
 801694e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016952:	45b9      	cmp	r9, r7
 8016954:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016958:	f840 3b04 	str.w	r3, [r0], #4
 801695c:	d2e8      	bcs.n	8016930 <quorem+0xb0>
 801695e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016962:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016966:	b92a      	cbnz	r2, 8016974 <quorem+0xf4>
 8016968:	3b04      	subs	r3, #4
 801696a:	429e      	cmp	r6, r3
 801696c:	461a      	mov	r2, r3
 801696e:	d30b      	bcc.n	8016988 <quorem+0x108>
 8016970:	f8c8 4010 	str.w	r4, [r8, #16]
 8016974:	4628      	mov	r0, r5
 8016976:	b003      	add	sp, #12
 8016978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801697c:	6812      	ldr	r2, [r2, #0]
 801697e:	3b04      	subs	r3, #4
 8016980:	2a00      	cmp	r2, #0
 8016982:	d1ca      	bne.n	801691a <quorem+0x9a>
 8016984:	3c01      	subs	r4, #1
 8016986:	e7c5      	b.n	8016914 <quorem+0x94>
 8016988:	6812      	ldr	r2, [r2, #0]
 801698a:	3b04      	subs	r3, #4
 801698c:	2a00      	cmp	r2, #0
 801698e:	d1ef      	bne.n	8016970 <quorem+0xf0>
 8016990:	3c01      	subs	r4, #1
 8016992:	e7ea      	b.n	801696a <quorem+0xea>
 8016994:	2000      	movs	r0, #0
 8016996:	e7ee      	b.n	8016976 <quorem+0xf6>

08016998 <_dtoa_r>:
 8016998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801699c:	ec57 6b10 	vmov	r6, r7, d0
 80169a0:	b097      	sub	sp, #92	; 0x5c
 80169a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80169a4:	9106      	str	r1, [sp, #24]
 80169a6:	4604      	mov	r4, r0
 80169a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80169aa:	9312      	str	r3, [sp, #72]	; 0x48
 80169ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80169b0:	e9cd 6700 	strd	r6, r7, [sp]
 80169b4:	b93d      	cbnz	r5, 80169c6 <_dtoa_r+0x2e>
 80169b6:	2010      	movs	r0, #16
 80169b8:	f7fe f8fc 	bl	8014bb4 <malloc>
 80169bc:	6260      	str	r0, [r4, #36]	; 0x24
 80169be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80169c2:	6005      	str	r5, [r0, #0]
 80169c4:	60c5      	str	r5, [r0, #12]
 80169c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80169c8:	6819      	ldr	r1, [r3, #0]
 80169ca:	b151      	cbz	r1, 80169e2 <_dtoa_r+0x4a>
 80169cc:	685a      	ldr	r2, [r3, #4]
 80169ce:	604a      	str	r2, [r1, #4]
 80169d0:	2301      	movs	r3, #1
 80169d2:	4093      	lsls	r3, r2
 80169d4:	608b      	str	r3, [r1, #8]
 80169d6:	4620      	mov	r0, r4
 80169d8:	f001 f918 	bl	8017c0c <_Bfree>
 80169dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80169de:	2200      	movs	r2, #0
 80169e0:	601a      	str	r2, [r3, #0]
 80169e2:	1e3b      	subs	r3, r7, #0
 80169e4:	bfbb      	ittet	lt
 80169e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80169ea:	9301      	strlt	r3, [sp, #4]
 80169ec:	2300      	movge	r3, #0
 80169ee:	2201      	movlt	r2, #1
 80169f0:	bfac      	ite	ge
 80169f2:	f8c8 3000 	strge.w	r3, [r8]
 80169f6:	f8c8 2000 	strlt.w	r2, [r8]
 80169fa:	4baf      	ldr	r3, [pc, #700]	; (8016cb8 <_dtoa_r+0x320>)
 80169fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016a00:	ea33 0308 	bics.w	r3, r3, r8
 8016a04:	d114      	bne.n	8016a30 <_dtoa_r+0x98>
 8016a06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a08:	f242 730f 	movw	r3, #9999	; 0x270f
 8016a0c:	6013      	str	r3, [r2, #0]
 8016a0e:	9b00      	ldr	r3, [sp, #0]
 8016a10:	b923      	cbnz	r3, 8016a1c <_dtoa_r+0x84>
 8016a12:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016a16:	2800      	cmp	r0, #0
 8016a18:	f000 8542 	beq.w	80174a0 <_dtoa_r+0xb08>
 8016a1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a1e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8016ccc <_dtoa_r+0x334>
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	f000 8544 	beq.w	80174b0 <_dtoa_r+0xb18>
 8016a28:	f10b 0303 	add.w	r3, fp, #3
 8016a2c:	f000 bd3e 	b.w	80174ac <_dtoa_r+0xb14>
 8016a30:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016a34:	2200      	movs	r2, #0
 8016a36:	2300      	movs	r3, #0
 8016a38:	4630      	mov	r0, r6
 8016a3a:	4639      	mov	r1, r7
 8016a3c:	f7ea f854 	bl	8000ae8 <__aeabi_dcmpeq>
 8016a40:	4681      	mov	r9, r0
 8016a42:	b168      	cbz	r0, 8016a60 <_dtoa_r+0xc8>
 8016a44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a46:	2301      	movs	r3, #1
 8016a48:	6013      	str	r3, [r2, #0]
 8016a4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	f000 8524 	beq.w	801749a <_dtoa_r+0xb02>
 8016a52:	4b9a      	ldr	r3, [pc, #616]	; (8016cbc <_dtoa_r+0x324>)
 8016a54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016a56:	f103 3bff 	add.w	fp, r3, #4294967295
 8016a5a:	6013      	str	r3, [r2, #0]
 8016a5c:	f000 bd28 	b.w	80174b0 <_dtoa_r+0xb18>
 8016a60:	aa14      	add	r2, sp, #80	; 0x50
 8016a62:	a915      	add	r1, sp, #84	; 0x54
 8016a64:	ec47 6b10 	vmov	d0, r6, r7
 8016a68:	4620      	mov	r0, r4
 8016a6a:	f001 fbdd 	bl	8018228 <__d2b>
 8016a6e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016a72:	9004      	str	r0, [sp, #16]
 8016a74:	2d00      	cmp	r5, #0
 8016a76:	d07c      	beq.n	8016b72 <_dtoa_r+0x1da>
 8016a78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016a7c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016a80:	46b2      	mov	sl, r6
 8016a82:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016a86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016a8a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016a8e:	2200      	movs	r2, #0
 8016a90:	4b8b      	ldr	r3, [pc, #556]	; (8016cc0 <_dtoa_r+0x328>)
 8016a92:	4650      	mov	r0, sl
 8016a94:	4659      	mov	r1, fp
 8016a96:	f7e9 fc07 	bl	80002a8 <__aeabi_dsub>
 8016a9a:	a381      	add	r3, pc, #516	; (adr r3, 8016ca0 <_dtoa_r+0x308>)
 8016a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aa0:	f7e9 fdba 	bl	8000618 <__aeabi_dmul>
 8016aa4:	a380      	add	r3, pc, #512	; (adr r3, 8016ca8 <_dtoa_r+0x310>)
 8016aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aaa:	f7e9 fbff 	bl	80002ac <__adddf3>
 8016aae:	4606      	mov	r6, r0
 8016ab0:	4628      	mov	r0, r5
 8016ab2:	460f      	mov	r7, r1
 8016ab4:	f7e9 fd46 	bl	8000544 <__aeabi_i2d>
 8016ab8:	a37d      	add	r3, pc, #500	; (adr r3, 8016cb0 <_dtoa_r+0x318>)
 8016aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016abe:	f7e9 fdab 	bl	8000618 <__aeabi_dmul>
 8016ac2:	4602      	mov	r2, r0
 8016ac4:	460b      	mov	r3, r1
 8016ac6:	4630      	mov	r0, r6
 8016ac8:	4639      	mov	r1, r7
 8016aca:	f7e9 fbef 	bl	80002ac <__adddf3>
 8016ace:	4606      	mov	r6, r0
 8016ad0:	460f      	mov	r7, r1
 8016ad2:	f7ea f851 	bl	8000b78 <__aeabi_d2iz>
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	4682      	mov	sl, r0
 8016ada:	2300      	movs	r3, #0
 8016adc:	4630      	mov	r0, r6
 8016ade:	4639      	mov	r1, r7
 8016ae0:	f7ea f80c 	bl	8000afc <__aeabi_dcmplt>
 8016ae4:	b148      	cbz	r0, 8016afa <_dtoa_r+0x162>
 8016ae6:	4650      	mov	r0, sl
 8016ae8:	f7e9 fd2c 	bl	8000544 <__aeabi_i2d>
 8016aec:	4632      	mov	r2, r6
 8016aee:	463b      	mov	r3, r7
 8016af0:	f7e9 fffa 	bl	8000ae8 <__aeabi_dcmpeq>
 8016af4:	b908      	cbnz	r0, 8016afa <_dtoa_r+0x162>
 8016af6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016afa:	f1ba 0f16 	cmp.w	sl, #22
 8016afe:	d859      	bhi.n	8016bb4 <_dtoa_r+0x21c>
 8016b00:	4970      	ldr	r1, [pc, #448]	; (8016cc4 <_dtoa_r+0x32c>)
 8016b02:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016b06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016b0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b0e:	f7ea f813 	bl	8000b38 <__aeabi_dcmpgt>
 8016b12:	2800      	cmp	r0, #0
 8016b14:	d050      	beq.n	8016bb8 <_dtoa_r+0x220>
 8016b16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8016b1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016b20:	1b5d      	subs	r5, r3, r5
 8016b22:	f1b5 0801 	subs.w	r8, r5, #1
 8016b26:	bf49      	itett	mi
 8016b28:	f1c5 0301 	rsbmi	r3, r5, #1
 8016b2c:	2300      	movpl	r3, #0
 8016b2e:	9305      	strmi	r3, [sp, #20]
 8016b30:	f04f 0800 	movmi.w	r8, #0
 8016b34:	bf58      	it	pl
 8016b36:	9305      	strpl	r3, [sp, #20]
 8016b38:	f1ba 0f00 	cmp.w	sl, #0
 8016b3c:	db3e      	blt.n	8016bbc <_dtoa_r+0x224>
 8016b3e:	2300      	movs	r3, #0
 8016b40:	44d0      	add	r8, sl
 8016b42:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016b46:	9307      	str	r3, [sp, #28]
 8016b48:	9b06      	ldr	r3, [sp, #24]
 8016b4a:	2b09      	cmp	r3, #9
 8016b4c:	f200 8090 	bhi.w	8016c70 <_dtoa_r+0x2d8>
 8016b50:	2b05      	cmp	r3, #5
 8016b52:	bfc4      	itt	gt
 8016b54:	3b04      	subgt	r3, #4
 8016b56:	9306      	strgt	r3, [sp, #24]
 8016b58:	9b06      	ldr	r3, [sp, #24]
 8016b5a:	f1a3 0302 	sub.w	r3, r3, #2
 8016b5e:	bfcc      	ite	gt
 8016b60:	2500      	movgt	r5, #0
 8016b62:	2501      	movle	r5, #1
 8016b64:	2b03      	cmp	r3, #3
 8016b66:	f200 808f 	bhi.w	8016c88 <_dtoa_r+0x2f0>
 8016b6a:	e8df f003 	tbb	[pc, r3]
 8016b6e:	7f7d      	.short	0x7f7d
 8016b70:	7131      	.short	0x7131
 8016b72:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016b76:	441d      	add	r5, r3
 8016b78:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016b7c:	2820      	cmp	r0, #32
 8016b7e:	dd13      	ble.n	8016ba8 <_dtoa_r+0x210>
 8016b80:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016b84:	9b00      	ldr	r3, [sp, #0]
 8016b86:	fa08 f800 	lsl.w	r8, r8, r0
 8016b8a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016b8e:	fa23 f000 	lsr.w	r0, r3, r0
 8016b92:	ea48 0000 	orr.w	r0, r8, r0
 8016b96:	f7e9 fcc5 	bl	8000524 <__aeabi_ui2d>
 8016b9a:	2301      	movs	r3, #1
 8016b9c:	4682      	mov	sl, r0
 8016b9e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016ba2:	3d01      	subs	r5, #1
 8016ba4:	9313      	str	r3, [sp, #76]	; 0x4c
 8016ba6:	e772      	b.n	8016a8e <_dtoa_r+0xf6>
 8016ba8:	9b00      	ldr	r3, [sp, #0]
 8016baa:	f1c0 0020 	rsb	r0, r0, #32
 8016bae:	fa03 f000 	lsl.w	r0, r3, r0
 8016bb2:	e7f0      	b.n	8016b96 <_dtoa_r+0x1fe>
 8016bb4:	2301      	movs	r3, #1
 8016bb6:	e7b1      	b.n	8016b1c <_dtoa_r+0x184>
 8016bb8:	900f      	str	r0, [sp, #60]	; 0x3c
 8016bba:	e7b0      	b.n	8016b1e <_dtoa_r+0x186>
 8016bbc:	9b05      	ldr	r3, [sp, #20]
 8016bbe:	eba3 030a 	sub.w	r3, r3, sl
 8016bc2:	9305      	str	r3, [sp, #20]
 8016bc4:	f1ca 0300 	rsb	r3, sl, #0
 8016bc8:	9307      	str	r3, [sp, #28]
 8016bca:	2300      	movs	r3, #0
 8016bcc:	930e      	str	r3, [sp, #56]	; 0x38
 8016bce:	e7bb      	b.n	8016b48 <_dtoa_r+0x1b0>
 8016bd0:	2301      	movs	r3, #1
 8016bd2:	930a      	str	r3, [sp, #40]	; 0x28
 8016bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	dd59      	ble.n	8016c8e <_dtoa_r+0x2f6>
 8016bda:	9302      	str	r3, [sp, #8]
 8016bdc:	4699      	mov	r9, r3
 8016bde:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016be0:	2200      	movs	r2, #0
 8016be2:	6072      	str	r2, [r6, #4]
 8016be4:	2204      	movs	r2, #4
 8016be6:	f102 0014 	add.w	r0, r2, #20
 8016bea:	4298      	cmp	r0, r3
 8016bec:	6871      	ldr	r1, [r6, #4]
 8016bee:	d953      	bls.n	8016c98 <_dtoa_r+0x300>
 8016bf0:	4620      	mov	r0, r4
 8016bf2:	f000 ffd7 	bl	8017ba4 <_Balloc>
 8016bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016bf8:	6030      	str	r0, [r6, #0]
 8016bfa:	f1b9 0f0e 	cmp.w	r9, #14
 8016bfe:	f8d3 b000 	ldr.w	fp, [r3]
 8016c02:	f200 80e6 	bhi.w	8016dd2 <_dtoa_r+0x43a>
 8016c06:	2d00      	cmp	r5, #0
 8016c08:	f000 80e3 	beq.w	8016dd2 <_dtoa_r+0x43a>
 8016c0c:	ed9d 7b00 	vldr	d7, [sp]
 8016c10:	f1ba 0f00 	cmp.w	sl, #0
 8016c14:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016c18:	dd74      	ble.n	8016d04 <_dtoa_r+0x36c>
 8016c1a:	4a2a      	ldr	r2, [pc, #168]	; (8016cc4 <_dtoa_r+0x32c>)
 8016c1c:	f00a 030f 	and.w	r3, sl, #15
 8016c20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016c24:	ed93 7b00 	vldr	d7, [r3]
 8016c28:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016c2c:	06f0      	lsls	r0, r6, #27
 8016c2e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016c32:	d565      	bpl.n	8016d00 <_dtoa_r+0x368>
 8016c34:	4b24      	ldr	r3, [pc, #144]	; (8016cc8 <_dtoa_r+0x330>)
 8016c36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016c3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016c3e:	f7e9 fe15 	bl	800086c <__aeabi_ddiv>
 8016c42:	e9cd 0100 	strd	r0, r1, [sp]
 8016c46:	f006 060f 	and.w	r6, r6, #15
 8016c4a:	2503      	movs	r5, #3
 8016c4c:	4f1e      	ldr	r7, [pc, #120]	; (8016cc8 <_dtoa_r+0x330>)
 8016c4e:	e04c      	b.n	8016cea <_dtoa_r+0x352>
 8016c50:	2301      	movs	r3, #1
 8016c52:	930a      	str	r3, [sp, #40]	; 0x28
 8016c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c56:	4453      	add	r3, sl
 8016c58:	f103 0901 	add.w	r9, r3, #1
 8016c5c:	9302      	str	r3, [sp, #8]
 8016c5e:	464b      	mov	r3, r9
 8016c60:	2b01      	cmp	r3, #1
 8016c62:	bfb8      	it	lt
 8016c64:	2301      	movlt	r3, #1
 8016c66:	e7ba      	b.n	8016bde <_dtoa_r+0x246>
 8016c68:	2300      	movs	r3, #0
 8016c6a:	e7b2      	b.n	8016bd2 <_dtoa_r+0x23a>
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	e7f0      	b.n	8016c52 <_dtoa_r+0x2ba>
 8016c70:	2501      	movs	r5, #1
 8016c72:	2300      	movs	r3, #0
 8016c74:	9306      	str	r3, [sp, #24]
 8016c76:	950a      	str	r5, [sp, #40]	; 0x28
 8016c78:	f04f 33ff 	mov.w	r3, #4294967295
 8016c7c:	9302      	str	r3, [sp, #8]
 8016c7e:	4699      	mov	r9, r3
 8016c80:	2200      	movs	r2, #0
 8016c82:	2312      	movs	r3, #18
 8016c84:	920b      	str	r2, [sp, #44]	; 0x2c
 8016c86:	e7aa      	b.n	8016bde <_dtoa_r+0x246>
 8016c88:	2301      	movs	r3, #1
 8016c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8016c8c:	e7f4      	b.n	8016c78 <_dtoa_r+0x2e0>
 8016c8e:	2301      	movs	r3, #1
 8016c90:	9302      	str	r3, [sp, #8]
 8016c92:	4699      	mov	r9, r3
 8016c94:	461a      	mov	r2, r3
 8016c96:	e7f5      	b.n	8016c84 <_dtoa_r+0x2ec>
 8016c98:	3101      	adds	r1, #1
 8016c9a:	6071      	str	r1, [r6, #4]
 8016c9c:	0052      	lsls	r2, r2, #1
 8016c9e:	e7a2      	b.n	8016be6 <_dtoa_r+0x24e>
 8016ca0:	636f4361 	.word	0x636f4361
 8016ca4:	3fd287a7 	.word	0x3fd287a7
 8016ca8:	8b60c8b3 	.word	0x8b60c8b3
 8016cac:	3fc68a28 	.word	0x3fc68a28
 8016cb0:	509f79fb 	.word	0x509f79fb
 8016cb4:	3fd34413 	.word	0x3fd34413
 8016cb8:	7ff00000 	.word	0x7ff00000
 8016cbc:	0801ab69 	.word	0x0801ab69
 8016cc0:	3ff80000 	.word	0x3ff80000
 8016cc4:	0801ac28 	.word	0x0801ac28
 8016cc8:	0801ac00 	.word	0x0801ac00
 8016ccc:	0801abf1 	.word	0x0801abf1
 8016cd0:	07f1      	lsls	r1, r6, #31
 8016cd2:	d508      	bpl.n	8016ce6 <_dtoa_r+0x34e>
 8016cd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016cdc:	f7e9 fc9c 	bl	8000618 <__aeabi_dmul>
 8016ce0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016ce4:	3501      	adds	r5, #1
 8016ce6:	1076      	asrs	r6, r6, #1
 8016ce8:	3708      	adds	r7, #8
 8016cea:	2e00      	cmp	r6, #0
 8016cec:	d1f0      	bne.n	8016cd0 <_dtoa_r+0x338>
 8016cee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016cf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016cf6:	f7e9 fdb9 	bl	800086c <__aeabi_ddiv>
 8016cfa:	e9cd 0100 	strd	r0, r1, [sp]
 8016cfe:	e01a      	b.n	8016d36 <_dtoa_r+0x39e>
 8016d00:	2502      	movs	r5, #2
 8016d02:	e7a3      	b.n	8016c4c <_dtoa_r+0x2b4>
 8016d04:	f000 80a0 	beq.w	8016e48 <_dtoa_r+0x4b0>
 8016d08:	f1ca 0600 	rsb	r6, sl, #0
 8016d0c:	4b9f      	ldr	r3, [pc, #636]	; (8016f8c <_dtoa_r+0x5f4>)
 8016d0e:	4fa0      	ldr	r7, [pc, #640]	; (8016f90 <_dtoa_r+0x5f8>)
 8016d10:	f006 020f 	and.w	r2, r6, #15
 8016d14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016d20:	f7e9 fc7a 	bl	8000618 <__aeabi_dmul>
 8016d24:	e9cd 0100 	strd	r0, r1, [sp]
 8016d28:	1136      	asrs	r6, r6, #4
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	2502      	movs	r5, #2
 8016d2e:	2e00      	cmp	r6, #0
 8016d30:	d17f      	bne.n	8016e32 <_dtoa_r+0x49a>
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d1e1      	bne.n	8016cfa <_dtoa_r+0x362>
 8016d36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	f000 8087 	beq.w	8016e4c <_dtoa_r+0x4b4>
 8016d3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016d42:	2200      	movs	r2, #0
 8016d44:	4b93      	ldr	r3, [pc, #588]	; (8016f94 <_dtoa_r+0x5fc>)
 8016d46:	4630      	mov	r0, r6
 8016d48:	4639      	mov	r1, r7
 8016d4a:	f7e9 fed7 	bl	8000afc <__aeabi_dcmplt>
 8016d4e:	2800      	cmp	r0, #0
 8016d50:	d07c      	beq.n	8016e4c <_dtoa_r+0x4b4>
 8016d52:	f1b9 0f00 	cmp.w	r9, #0
 8016d56:	d079      	beq.n	8016e4c <_dtoa_r+0x4b4>
 8016d58:	9b02      	ldr	r3, [sp, #8]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	dd35      	ble.n	8016dca <_dtoa_r+0x432>
 8016d5e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016d62:	9308      	str	r3, [sp, #32]
 8016d64:	4639      	mov	r1, r7
 8016d66:	2200      	movs	r2, #0
 8016d68:	4b8b      	ldr	r3, [pc, #556]	; (8016f98 <_dtoa_r+0x600>)
 8016d6a:	4630      	mov	r0, r6
 8016d6c:	f7e9 fc54 	bl	8000618 <__aeabi_dmul>
 8016d70:	e9cd 0100 	strd	r0, r1, [sp]
 8016d74:	9f02      	ldr	r7, [sp, #8]
 8016d76:	3501      	adds	r5, #1
 8016d78:	4628      	mov	r0, r5
 8016d7a:	f7e9 fbe3 	bl	8000544 <__aeabi_i2d>
 8016d7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016d82:	f7e9 fc49 	bl	8000618 <__aeabi_dmul>
 8016d86:	2200      	movs	r2, #0
 8016d88:	4b84      	ldr	r3, [pc, #528]	; (8016f9c <_dtoa_r+0x604>)
 8016d8a:	f7e9 fa8f 	bl	80002ac <__adddf3>
 8016d8e:	4605      	mov	r5, r0
 8016d90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8016d94:	2f00      	cmp	r7, #0
 8016d96:	d15d      	bne.n	8016e54 <_dtoa_r+0x4bc>
 8016d98:	2200      	movs	r2, #0
 8016d9a:	4b81      	ldr	r3, [pc, #516]	; (8016fa0 <_dtoa_r+0x608>)
 8016d9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016da0:	f7e9 fa82 	bl	80002a8 <__aeabi_dsub>
 8016da4:	462a      	mov	r2, r5
 8016da6:	4633      	mov	r3, r6
 8016da8:	e9cd 0100 	strd	r0, r1, [sp]
 8016dac:	f7e9 fec4 	bl	8000b38 <__aeabi_dcmpgt>
 8016db0:	2800      	cmp	r0, #0
 8016db2:	f040 8288 	bne.w	80172c6 <_dtoa_r+0x92e>
 8016db6:	462a      	mov	r2, r5
 8016db8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016dbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016dc0:	f7e9 fe9c 	bl	8000afc <__aeabi_dcmplt>
 8016dc4:	2800      	cmp	r0, #0
 8016dc6:	f040 827c 	bne.w	80172c2 <_dtoa_r+0x92a>
 8016dca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016dce:	e9cd 2300 	strd	r2, r3, [sp]
 8016dd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	f2c0 8150 	blt.w	801707a <_dtoa_r+0x6e2>
 8016dda:	f1ba 0f0e 	cmp.w	sl, #14
 8016dde:	f300 814c 	bgt.w	801707a <_dtoa_r+0x6e2>
 8016de2:	4b6a      	ldr	r3, [pc, #424]	; (8016f8c <_dtoa_r+0x5f4>)
 8016de4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016de8:	ed93 7b00 	vldr	d7, [r3]
 8016dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016df4:	f280 80d8 	bge.w	8016fa8 <_dtoa_r+0x610>
 8016df8:	f1b9 0f00 	cmp.w	r9, #0
 8016dfc:	f300 80d4 	bgt.w	8016fa8 <_dtoa_r+0x610>
 8016e00:	f040 825e 	bne.w	80172c0 <_dtoa_r+0x928>
 8016e04:	2200      	movs	r2, #0
 8016e06:	4b66      	ldr	r3, [pc, #408]	; (8016fa0 <_dtoa_r+0x608>)
 8016e08:	ec51 0b17 	vmov	r0, r1, d7
 8016e0c:	f7e9 fc04 	bl	8000618 <__aeabi_dmul>
 8016e10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016e14:	f7e9 fe86 	bl	8000b24 <__aeabi_dcmpge>
 8016e18:	464f      	mov	r7, r9
 8016e1a:	464e      	mov	r6, r9
 8016e1c:	2800      	cmp	r0, #0
 8016e1e:	f040 8234 	bne.w	801728a <_dtoa_r+0x8f2>
 8016e22:	2331      	movs	r3, #49	; 0x31
 8016e24:	f10b 0501 	add.w	r5, fp, #1
 8016e28:	f88b 3000 	strb.w	r3, [fp]
 8016e2c:	f10a 0a01 	add.w	sl, sl, #1
 8016e30:	e22f      	b.n	8017292 <_dtoa_r+0x8fa>
 8016e32:	07f2      	lsls	r2, r6, #31
 8016e34:	d505      	bpl.n	8016e42 <_dtoa_r+0x4aa>
 8016e36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016e3a:	f7e9 fbed 	bl	8000618 <__aeabi_dmul>
 8016e3e:	3501      	adds	r5, #1
 8016e40:	2301      	movs	r3, #1
 8016e42:	1076      	asrs	r6, r6, #1
 8016e44:	3708      	adds	r7, #8
 8016e46:	e772      	b.n	8016d2e <_dtoa_r+0x396>
 8016e48:	2502      	movs	r5, #2
 8016e4a:	e774      	b.n	8016d36 <_dtoa_r+0x39e>
 8016e4c:	f8cd a020 	str.w	sl, [sp, #32]
 8016e50:	464f      	mov	r7, r9
 8016e52:	e791      	b.n	8016d78 <_dtoa_r+0x3e0>
 8016e54:	4b4d      	ldr	r3, [pc, #308]	; (8016f8c <_dtoa_r+0x5f4>)
 8016e56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016e5a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8016e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d047      	beq.n	8016ef4 <_dtoa_r+0x55c>
 8016e64:	4602      	mov	r2, r0
 8016e66:	460b      	mov	r3, r1
 8016e68:	2000      	movs	r0, #0
 8016e6a:	494e      	ldr	r1, [pc, #312]	; (8016fa4 <_dtoa_r+0x60c>)
 8016e6c:	f7e9 fcfe 	bl	800086c <__aeabi_ddiv>
 8016e70:	462a      	mov	r2, r5
 8016e72:	4633      	mov	r3, r6
 8016e74:	f7e9 fa18 	bl	80002a8 <__aeabi_dsub>
 8016e78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016e7c:	465d      	mov	r5, fp
 8016e7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016e82:	f7e9 fe79 	bl	8000b78 <__aeabi_d2iz>
 8016e86:	4606      	mov	r6, r0
 8016e88:	f7e9 fb5c 	bl	8000544 <__aeabi_i2d>
 8016e8c:	4602      	mov	r2, r0
 8016e8e:	460b      	mov	r3, r1
 8016e90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016e94:	f7e9 fa08 	bl	80002a8 <__aeabi_dsub>
 8016e98:	3630      	adds	r6, #48	; 0x30
 8016e9a:	f805 6b01 	strb.w	r6, [r5], #1
 8016e9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016ea2:	e9cd 0100 	strd	r0, r1, [sp]
 8016ea6:	f7e9 fe29 	bl	8000afc <__aeabi_dcmplt>
 8016eaa:	2800      	cmp	r0, #0
 8016eac:	d163      	bne.n	8016f76 <_dtoa_r+0x5de>
 8016eae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016eb2:	2000      	movs	r0, #0
 8016eb4:	4937      	ldr	r1, [pc, #220]	; (8016f94 <_dtoa_r+0x5fc>)
 8016eb6:	f7e9 f9f7 	bl	80002a8 <__aeabi_dsub>
 8016eba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016ebe:	f7e9 fe1d 	bl	8000afc <__aeabi_dcmplt>
 8016ec2:	2800      	cmp	r0, #0
 8016ec4:	f040 80b7 	bne.w	8017036 <_dtoa_r+0x69e>
 8016ec8:	eba5 030b 	sub.w	r3, r5, fp
 8016ecc:	429f      	cmp	r7, r3
 8016ece:	f77f af7c 	ble.w	8016dca <_dtoa_r+0x432>
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	4b30      	ldr	r3, [pc, #192]	; (8016f98 <_dtoa_r+0x600>)
 8016ed6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016eda:	f7e9 fb9d 	bl	8000618 <__aeabi_dmul>
 8016ede:	2200      	movs	r2, #0
 8016ee0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016ee4:	4b2c      	ldr	r3, [pc, #176]	; (8016f98 <_dtoa_r+0x600>)
 8016ee6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016eea:	f7e9 fb95 	bl	8000618 <__aeabi_dmul>
 8016eee:	e9cd 0100 	strd	r0, r1, [sp]
 8016ef2:	e7c4      	b.n	8016e7e <_dtoa_r+0x4e6>
 8016ef4:	462a      	mov	r2, r5
 8016ef6:	4633      	mov	r3, r6
 8016ef8:	f7e9 fb8e 	bl	8000618 <__aeabi_dmul>
 8016efc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016f00:	eb0b 0507 	add.w	r5, fp, r7
 8016f04:	465e      	mov	r6, fp
 8016f06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f0a:	f7e9 fe35 	bl	8000b78 <__aeabi_d2iz>
 8016f0e:	4607      	mov	r7, r0
 8016f10:	f7e9 fb18 	bl	8000544 <__aeabi_i2d>
 8016f14:	3730      	adds	r7, #48	; 0x30
 8016f16:	4602      	mov	r2, r0
 8016f18:	460b      	mov	r3, r1
 8016f1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f1e:	f7e9 f9c3 	bl	80002a8 <__aeabi_dsub>
 8016f22:	f806 7b01 	strb.w	r7, [r6], #1
 8016f26:	42ae      	cmp	r6, r5
 8016f28:	e9cd 0100 	strd	r0, r1, [sp]
 8016f2c:	f04f 0200 	mov.w	r2, #0
 8016f30:	d126      	bne.n	8016f80 <_dtoa_r+0x5e8>
 8016f32:	4b1c      	ldr	r3, [pc, #112]	; (8016fa4 <_dtoa_r+0x60c>)
 8016f34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016f38:	f7e9 f9b8 	bl	80002ac <__adddf3>
 8016f3c:	4602      	mov	r2, r0
 8016f3e:	460b      	mov	r3, r1
 8016f40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f44:	f7e9 fdf8 	bl	8000b38 <__aeabi_dcmpgt>
 8016f48:	2800      	cmp	r0, #0
 8016f4a:	d174      	bne.n	8017036 <_dtoa_r+0x69e>
 8016f4c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016f50:	2000      	movs	r0, #0
 8016f52:	4914      	ldr	r1, [pc, #80]	; (8016fa4 <_dtoa_r+0x60c>)
 8016f54:	f7e9 f9a8 	bl	80002a8 <__aeabi_dsub>
 8016f58:	4602      	mov	r2, r0
 8016f5a:	460b      	mov	r3, r1
 8016f5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f60:	f7e9 fdcc 	bl	8000afc <__aeabi_dcmplt>
 8016f64:	2800      	cmp	r0, #0
 8016f66:	f43f af30 	beq.w	8016dca <_dtoa_r+0x432>
 8016f6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016f6e:	2b30      	cmp	r3, #48	; 0x30
 8016f70:	f105 32ff 	add.w	r2, r5, #4294967295
 8016f74:	d002      	beq.n	8016f7c <_dtoa_r+0x5e4>
 8016f76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016f7a:	e04a      	b.n	8017012 <_dtoa_r+0x67a>
 8016f7c:	4615      	mov	r5, r2
 8016f7e:	e7f4      	b.n	8016f6a <_dtoa_r+0x5d2>
 8016f80:	4b05      	ldr	r3, [pc, #20]	; (8016f98 <_dtoa_r+0x600>)
 8016f82:	f7e9 fb49 	bl	8000618 <__aeabi_dmul>
 8016f86:	e9cd 0100 	strd	r0, r1, [sp]
 8016f8a:	e7bc      	b.n	8016f06 <_dtoa_r+0x56e>
 8016f8c:	0801ac28 	.word	0x0801ac28
 8016f90:	0801ac00 	.word	0x0801ac00
 8016f94:	3ff00000 	.word	0x3ff00000
 8016f98:	40240000 	.word	0x40240000
 8016f9c:	401c0000 	.word	0x401c0000
 8016fa0:	40140000 	.word	0x40140000
 8016fa4:	3fe00000 	.word	0x3fe00000
 8016fa8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016fac:	465d      	mov	r5, fp
 8016fae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016fb2:	4630      	mov	r0, r6
 8016fb4:	4639      	mov	r1, r7
 8016fb6:	f7e9 fc59 	bl	800086c <__aeabi_ddiv>
 8016fba:	f7e9 fddd 	bl	8000b78 <__aeabi_d2iz>
 8016fbe:	4680      	mov	r8, r0
 8016fc0:	f7e9 fac0 	bl	8000544 <__aeabi_i2d>
 8016fc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016fc8:	f7e9 fb26 	bl	8000618 <__aeabi_dmul>
 8016fcc:	4602      	mov	r2, r0
 8016fce:	460b      	mov	r3, r1
 8016fd0:	4630      	mov	r0, r6
 8016fd2:	4639      	mov	r1, r7
 8016fd4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016fd8:	f7e9 f966 	bl	80002a8 <__aeabi_dsub>
 8016fdc:	f805 6b01 	strb.w	r6, [r5], #1
 8016fe0:	eba5 060b 	sub.w	r6, r5, fp
 8016fe4:	45b1      	cmp	r9, r6
 8016fe6:	4602      	mov	r2, r0
 8016fe8:	460b      	mov	r3, r1
 8016fea:	d139      	bne.n	8017060 <_dtoa_r+0x6c8>
 8016fec:	f7e9 f95e 	bl	80002ac <__adddf3>
 8016ff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016ff4:	4606      	mov	r6, r0
 8016ff6:	460f      	mov	r7, r1
 8016ff8:	f7e9 fd9e 	bl	8000b38 <__aeabi_dcmpgt>
 8016ffc:	b9c8      	cbnz	r0, 8017032 <_dtoa_r+0x69a>
 8016ffe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017002:	4630      	mov	r0, r6
 8017004:	4639      	mov	r1, r7
 8017006:	f7e9 fd6f 	bl	8000ae8 <__aeabi_dcmpeq>
 801700a:	b110      	cbz	r0, 8017012 <_dtoa_r+0x67a>
 801700c:	f018 0f01 	tst.w	r8, #1
 8017010:	d10f      	bne.n	8017032 <_dtoa_r+0x69a>
 8017012:	9904      	ldr	r1, [sp, #16]
 8017014:	4620      	mov	r0, r4
 8017016:	f000 fdf9 	bl	8017c0c <_Bfree>
 801701a:	2300      	movs	r3, #0
 801701c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801701e:	702b      	strb	r3, [r5, #0]
 8017020:	f10a 0301 	add.w	r3, sl, #1
 8017024:	6013      	str	r3, [r2, #0]
 8017026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017028:	2b00      	cmp	r3, #0
 801702a:	f000 8241 	beq.w	80174b0 <_dtoa_r+0xb18>
 801702e:	601d      	str	r5, [r3, #0]
 8017030:	e23e      	b.n	80174b0 <_dtoa_r+0xb18>
 8017032:	f8cd a020 	str.w	sl, [sp, #32]
 8017036:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801703a:	2a39      	cmp	r2, #57	; 0x39
 801703c:	f105 33ff 	add.w	r3, r5, #4294967295
 8017040:	d108      	bne.n	8017054 <_dtoa_r+0x6bc>
 8017042:	459b      	cmp	fp, r3
 8017044:	d10a      	bne.n	801705c <_dtoa_r+0x6c4>
 8017046:	9b08      	ldr	r3, [sp, #32]
 8017048:	3301      	adds	r3, #1
 801704a:	9308      	str	r3, [sp, #32]
 801704c:	2330      	movs	r3, #48	; 0x30
 801704e:	f88b 3000 	strb.w	r3, [fp]
 8017052:	465b      	mov	r3, fp
 8017054:	781a      	ldrb	r2, [r3, #0]
 8017056:	3201      	adds	r2, #1
 8017058:	701a      	strb	r2, [r3, #0]
 801705a:	e78c      	b.n	8016f76 <_dtoa_r+0x5de>
 801705c:	461d      	mov	r5, r3
 801705e:	e7ea      	b.n	8017036 <_dtoa_r+0x69e>
 8017060:	2200      	movs	r2, #0
 8017062:	4b9b      	ldr	r3, [pc, #620]	; (80172d0 <_dtoa_r+0x938>)
 8017064:	f7e9 fad8 	bl	8000618 <__aeabi_dmul>
 8017068:	2200      	movs	r2, #0
 801706a:	2300      	movs	r3, #0
 801706c:	4606      	mov	r6, r0
 801706e:	460f      	mov	r7, r1
 8017070:	f7e9 fd3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8017074:	2800      	cmp	r0, #0
 8017076:	d09a      	beq.n	8016fae <_dtoa_r+0x616>
 8017078:	e7cb      	b.n	8017012 <_dtoa_r+0x67a>
 801707a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801707c:	2a00      	cmp	r2, #0
 801707e:	f000 808b 	beq.w	8017198 <_dtoa_r+0x800>
 8017082:	9a06      	ldr	r2, [sp, #24]
 8017084:	2a01      	cmp	r2, #1
 8017086:	dc6e      	bgt.n	8017166 <_dtoa_r+0x7ce>
 8017088:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801708a:	2a00      	cmp	r2, #0
 801708c:	d067      	beq.n	801715e <_dtoa_r+0x7c6>
 801708e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017092:	9f07      	ldr	r7, [sp, #28]
 8017094:	9d05      	ldr	r5, [sp, #20]
 8017096:	9a05      	ldr	r2, [sp, #20]
 8017098:	2101      	movs	r1, #1
 801709a:	441a      	add	r2, r3
 801709c:	4620      	mov	r0, r4
 801709e:	9205      	str	r2, [sp, #20]
 80170a0:	4498      	add	r8, r3
 80170a2:	f000 fe91 	bl	8017dc8 <__i2b>
 80170a6:	4606      	mov	r6, r0
 80170a8:	2d00      	cmp	r5, #0
 80170aa:	dd0c      	ble.n	80170c6 <_dtoa_r+0x72e>
 80170ac:	f1b8 0f00 	cmp.w	r8, #0
 80170b0:	dd09      	ble.n	80170c6 <_dtoa_r+0x72e>
 80170b2:	4545      	cmp	r5, r8
 80170b4:	9a05      	ldr	r2, [sp, #20]
 80170b6:	462b      	mov	r3, r5
 80170b8:	bfa8      	it	ge
 80170ba:	4643      	movge	r3, r8
 80170bc:	1ad2      	subs	r2, r2, r3
 80170be:	9205      	str	r2, [sp, #20]
 80170c0:	1aed      	subs	r5, r5, r3
 80170c2:	eba8 0803 	sub.w	r8, r8, r3
 80170c6:	9b07      	ldr	r3, [sp, #28]
 80170c8:	b1eb      	cbz	r3, 8017106 <_dtoa_r+0x76e>
 80170ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d067      	beq.n	80171a0 <_dtoa_r+0x808>
 80170d0:	b18f      	cbz	r7, 80170f6 <_dtoa_r+0x75e>
 80170d2:	4631      	mov	r1, r6
 80170d4:	463a      	mov	r2, r7
 80170d6:	4620      	mov	r0, r4
 80170d8:	f000 ff16 	bl	8017f08 <__pow5mult>
 80170dc:	9a04      	ldr	r2, [sp, #16]
 80170de:	4601      	mov	r1, r0
 80170e0:	4606      	mov	r6, r0
 80170e2:	4620      	mov	r0, r4
 80170e4:	f000 fe79 	bl	8017dda <__multiply>
 80170e8:	9904      	ldr	r1, [sp, #16]
 80170ea:	9008      	str	r0, [sp, #32]
 80170ec:	4620      	mov	r0, r4
 80170ee:	f000 fd8d 	bl	8017c0c <_Bfree>
 80170f2:	9b08      	ldr	r3, [sp, #32]
 80170f4:	9304      	str	r3, [sp, #16]
 80170f6:	9b07      	ldr	r3, [sp, #28]
 80170f8:	1bda      	subs	r2, r3, r7
 80170fa:	d004      	beq.n	8017106 <_dtoa_r+0x76e>
 80170fc:	9904      	ldr	r1, [sp, #16]
 80170fe:	4620      	mov	r0, r4
 8017100:	f000 ff02 	bl	8017f08 <__pow5mult>
 8017104:	9004      	str	r0, [sp, #16]
 8017106:	2101      	movs	r1, #1
 8017108:	4620      	mov	r0, r4
 801710a:	f000 fe5d 	bl	8017dc8 <__i2b>
 801710e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017110:	4607      	mov	r7, r0
 8017112:	2b00      	cmp	r3, #0
 8017114:	f000 81d0 	beq.w	80174b8 <_dtoa_r+0xb20>
 8017118:	461a      	mov	r2, r3
 801711a:	4601      	mov	r1, r0
 801711c:	4620      	mov	r0, r4
 801711e:	f000 fef3 	bl	8017f08 <__pow5mult>
 8017122:	9b06      	ldr	r3, [sp, #24]
 8017124:	2b01      	cmp	r3, #1
 8017126:	4607      	mov	r7, r0
 8017128:	dc40      	bgt.n	80171ac <_dtoa_r+0x814>
 801712a:	9b00      	ldr	r3, [sp, #0]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d139      	bne.n	80171a4 <_dtoa_r+0x80c>
 8017130:	9b01      	ldr	r3, [sp, #4]
 8017132:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017136:	2b00      	cmp	r3, #0
 8017138:	d136      	bne.n	80171a8 <_dtoa_r+0x810>
 801713a:	9b01      	ldr	r3, [sp, #4]
 801713c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017140:	0d1b      	lsrs	r3, r3, #20
 8017142:	051b      	lsls	r3, r3, #20
 8017144:	b12b      	cbz	r3, 8017152 <_dtoa_r+0x7ba>
 8017146:	9b05      	ldr	r3, [sp, #20]
 8017148:	3301      	adds	r3, #1
 801714a:	9305      	str	r3, [sp, #20]
 801714c:	f108 0801 	add.w	r8, r8, #1
 8017150:	2301      	movs	r3, #1
 8017152:	9307      	str	r3, [sp, #28]
 8017154:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017156:	2b00      	cmp	r3, #0
 8017158:	d12a      	bne.n	80171b0 <_dtoa_r+0x818>
 801715a:	2001      	movs	r0, #1
 801715c:	e030      	b.n	80171c0 <_dtoa_r+0x828>
 801715e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017160:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017164:	e795      	b.n	8017092 <_dtoa_r+0x6fa>
 8017166:	9b07      	ldr	r3, [sp, #28]
 8017168:	f109 37ff 	add.w	r7, r9, #4294967295
 801716c:	42bb      	cmp	r3, r7
 801716e:	bfbf      	itttt	lt
 8017170:	9b07      	ldrlt	r3, [sp, #28]
 8017172:	9707      	strlt	r7, [sp, #28]
 8017174:	1afa      	sublt	r2, r7, r3
 8017176:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017178:	bfbb      	ittet	lt
 801717a:	189b      	addlt	r3, r3, r2
 801717c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801717e:	1bdf      	subge	r7, r3, r7
 8017180:	2700      	movlt	r7, #0
 8017182:	f1b9 0f00 	cmp.w	r9, #0
 8017186:	bfb5      	itete	lt
 8017188:	9b05      	ldrlt	r3, [sp, #20]
 801718a:	9d05      	ldrge	r5, [sp, #20]
 801718c:	eba3 0509 	sublt.w	r5, r3, r9
 8017190:	464b      	movge	r3, r9
 8017192:	bfb8      	it	lt
 8017194:	2300      	movlt	r3, #0
 8017196:	e77e      	b.n	8017096 <_dtoa_r+0x6fe>
 8017198:	9f07      	ldr	r7, [sp, #28]
 801719a:	9d05      	ldr	r5, [sp, #20]
 801719c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801719e:	e783      	b.n	80170a8 <_dtoa_r+0x710>
 80171a0:	9a07      	ldr	r2, [sp, #28]
 80171a2:	e7ab      	b.n	80170fc <_dtoa_r+0x764>
 80171a4:	2300      	movs	r3, #0
 80171a6:	e7d4      	b.n	8017152 <_dtoa_r+0x7ba>
 80171a8:	9b00      	ldr	r3, [sp, #0]
 80171aa:	e7d2      	b.n	8017152 <_dtoa_r+0x7ba>
 80171ac:	2300      	movs	r3, #0
 80171ae:	9307      	str	r3, [sp, #28]
 80171b0:	693b      	ldr	r3, [r7, #16]
 80171b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80171b6:	6918      	ldr	r0, [r3, #16]
 80171b8:	f000 fdb8 	bl	8017d2c <__hi0bits>
 80171bc:	f1c0 0020 	rsb	r0, r0, #32
 80171c0:	4440      	add	r0, r8
 80171c2:	f010 001f 	ands.w	r0, r0, #31
 80171c6:	d047      	beq.n	8017258 <_dtoa_r+0x8c0>
 80171c8:	f1c0 0320 	rsb	r3, r0, #32
 80171cc:	2b04      	cmp	r3, #4
 80171ce:	dd3b      	ble.n	8017248 <_dtoa_r+0x8b0>
 80171d0:	9b05      	ldr	r3, [sp, #20]
 80171d2:	f1c0 001c 	rsb	r0, r0, #28
 80171d6:	4403      	add	r3, r0
 80171d8:	9305      	str	r3, [sp, #20]
 80171da:	4405      	add	r5, r0
 80171dc:	4480      	add	r8, r0
 80171de:	9b05      	ldr	r3, [sp, #20]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	dd05      	ble.n	80171f0 <_dtoa_r+0x858>
 80171e4:	461a      	mov	r2, r3
 80171e6:	9904      	ldr	r1, [sp, #16]
 80171e8:	4620      	mov	r0, r4
 80171ea:	f000 fedb 	bl	8017fa4 <__lshift>
 80171ee:	9004      	str	r0, [sp, #16]
 80171f0:	f1b8 0f00 	cmp.w	r8, #0
 80171f4:	dd05      	ble.n	8017202 <_dtoa_r+0x86a>
 80171f6:	4639      	mov	r1, r7
 80171f8:	4642      	mov	r2, r8
 80171fa:	4620      	mov	r0, r4
 80171fc:	f000 fed2 	bl	8017fa4 <__lshift>
 8017200:	4607      	mov	r7, r0
 8017202:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017204:	b353      	cbz	r3, 801725c <_dtoa_r+0x8c4>
 8017206:	4639      	mov	r1, r7
 8017208:	9804      	ldr	r0, [sp, #16]
 801720a:	f000 ff1f 	bl	801804c <__mcmp>
 801720e:	2800      	cmp	r0, #0
 8017210:	da24      	bge.n	801725c <_dtoa_r+0x8c4>
 8017212:	2300      	movs	r3, #0
 8017214:	220a      	movs	r2, #10
 8017216:	9904      	ldr	r1, [sp, #16]
 8017218:	4620      	mov	r0, r4
 801721a:	f000 fd0e 	bl	8017c3a <__multadd>
 801721e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017220:	9004      	str	r0, [sp, #16]
 8017222:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017226:	2b00      	cmp	r3, #0
 8017228:	f000 814d 	beq.w	80174c6 <_dtoa_r+0xb2e>
 801722c:	2300      	movs	r3, #0
 801722e:	4631      	mov	r1, r6
 8017230:	220a      	movs	r2, #10
 8017232:	4620      	mov	r0, r4
 8017234:	f000 fd01 	bl	8017c3a <__multadd>
 8017238:	9b02      	ldr	r3, [sp, #8]
 801723a:	2b00      	cmp	r3, #0
 801723c:	4606      	mov	r6, r0
 801723e:	dc4f      	bgt.n	80172e0 <_dtoa_r+0x948>
 8017240:	9b06      	ldr	r3, [sp, #24]
 8017242:	2b02      	cmp	r3, #2
 8017244:	dd4c      	ble.n	80172e0 <_dtoa_r+0x948>
 8017246:	e011      	b.n	801726c <_dtoa_r+0x8d4>
 8017248:	d0c9      	beq.n	80171de <_dtoa_r+0x846>
 801724a:	9a05      	ldr	r2, [sp, #20]
 801724c:	331c      	adds	r3, #28
 801724e:	441a      	add	r2, r3
 8017250:	9205      	str	r2, [sp, #20]
 8017252:	441d      	add	r5, r3
 8017254:	4498      	add	r8, r3
 8017256:	e7c2      	b.n	80171de <_dtoa_r+0x846>
 8017258:	4603      	mov	r3, r0
 801725a:	e7f6      	b.n	801724a <_dtoa_r+0x8b2>
 801725c:	f1b9 0f00 	cmp.w	r9, #0
 8017260:	dc38      	bgt.n	80172d4 <_dtoa_r+0x93c>
 8017262:	9b06      	ldr	r3, [sp, #24]
 8017264:	2b02      	cmp	r3, #2
 8017266:	dd35      	ble.n	80172d4 <_dtoa_r+0x93c>
 8017268:	f8cd 9008 	str.w	r9, [sp, #8]
 801726c:	9b02      	ldr	r3, [sp, #8]
 801726e:	b963      	cbnz	r3, 801728a <_dtoa_r+0x8f2>
 8017270:	4639      	mov	r1, r7
 8017272:	2205      	movs	r2, #5
 8017274:	4620      	mov	r0, r4
 8017276:	f000 fce0 	bl	8017c3a <__multadd>
 801727a:	4601      	mov	r1, r0
 801727c:	4607      	mov	r7, r0
 801727e:	9804      	ldr	r0, [sp, #16]
 8017280:	f000 fee4 	bl	801804c <__mcmp>
 8017284:	2800      	cmp	r0, #0
 8017286:	f73f adcc 	bgt.w	8016e22 <_dtoa_r+0x48a>
 801728a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801728c:	465d      	mov	r5, fp
 801728e:	ea6f 0a03 	mvn.w	sl, r3
 8017292:	f04f 0900 	mov.w	r9, #0
 8017296:	4639      	mov	r1, r7
 8017298:	4620      	mov	r0, r4
 801729a:	f000 fcb7 	bl	8017c0c <_Bfree>
 801729e:	2e00      	cmp	r6, #0
 80172a0:	f43f aeb7 	beq.w	8017012 <_dtoa_r+0x67a>
 80172a4:	f1b9 0f00 	cmp.w	r9, #0
 80172a8:	d005      	beq.n	80172b6 <_dtoa_r+0x91e>
 80172aa:	45b1      	cmp	r9, r6
 80172ac:	d003      	beq.n	80172b6 <_dtoa_r+0x91e>
 80172ae:	4649      	mov	r1, r9
 80172b0:	4620      	mov	r0, r4
 80172b2:	f000 fcab 	bl	8017c0c <_Bfree>
 80172b6:	4631      	mov	r1, r6
 80172b8:	4620      	mov	r0, r4
 80172ba:	f000 fca7 	bl	8017c0c <_Bfree>
 80172be:	e6a8      	b.n	8017012 <_dtoa_r+0x67a>
 80172c0:	2700      	movs	r7, #0
 80172c2:	463e      	mov	r6, r7
 80172c4:	e7e1      	b.n	801728a <_dtoa_r+0x8f2>
 80172c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80172ca:	463e      	mov	r6, r7
 80172cc:	e5a9      	b.n	8016e22 <_dtoa_r+0x48a>
 80172ce:	bf00      	nop
 80172d0:	40240000 	.word	0x40240000
 80172d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	f000 80fa 	beq.w	80174d4 <_dtoa_r+0xb3c>
 80172e0:	2d00      	cmp	r5, #0
 80172e2:	dd05      	ble.n	80172f0 <_dtoa_r+0x958>
 80172e4:	4631      	mov	r1, r6
 80172e6:	462a      	mov	r2, r5
 80172e8:	4620      	mov	r0, r4
 80172ea:	f000 fe5b 	bl	8017fa4 <__lshift>
 80172ee:	4606      	mov	r6, r0
 80172f0:	9b07      	ldr	r3, [sp, #28]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d04c      	beq.n	8017390 <_dtoa_r+0x9f8>
 80172f6:	6871      	ldr	r1, [r6, #4]
 80172f8:	4620      	mov	r0, r4
 80172fa:	f000 fc53 	bl	8017ba4 <_Balloc>
 80172fe:	6932      	ldr	r2, [r6, #16]
 8017300:	3202      	adds	r2, #2
 8017302:	4605      	mov	r5, r0
 8017304:	0092      	lsls	r2, r2, #2
 8017306:	f106 010c 	add.w	r1, r6, #12
 801730a:	300c      	adds	r0, #12
 801730c:	f7fd fc62 	bl	8014bd4 <memcpy>
 8017310:	2201      	movs	r2, #1
 8017312:	4629      	mov	r1, r5
 8017314:	4620      	mov	r0, r4
 8017316:	f000 fe45 	bl	8017fa4 <__lshift>
 801731a:	9b00      	ldr	r3, [sp, #0]
 801731c:	f8cd b014 	str.w	fp, [sp, #20]
 8017320:	f003 0301 	and.w	r3, r3, #1
 8017324:	46b1      	mov	r9, r6
 8017326:	9307      	str	r3, [sp, #28]
 8017328:	4606      	mov	r6, r0
 801732a:	4639      	mov	r1, r7
 801732c:	9804      	ldr	r0, [sp, #16]
 801732e:	f7ff faa7 	bl	8016880 <quorem>
 8017332:	4649      	mov	r1, r9
 8017334:	4605      	mov	r5, r0
 8017336:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801733a:	9804      	ldr	r0, [sp, #16]
 801733c:	f000 fe86 	bl	801804c <__mcmp>
 8017340:	4632      	mov	r2, r6
 8017342:	9000      	str	r0, [sp, #0]
 8017344:	4639      	mov	r1, r7
 8017346:	4620      	mov	r0, r4
 8017348:	f000 fe9a 	bl	8018080 <__mdiff>
 801734c:	68c3      	ldr	r3, [r0, #12]
 801734e:	4602      	mov	r2, r0
 8017350:	bb03      	cbnz	r3, 8017394 <_dtoa_r+0x9fc>
 8017352:	4601      	mov	r1, r0
 8017354:	9008      	str	r0, [sp, #32]
 8017356:	9804      	ldr	r0, [sp, #16]
 8017358:	f000 fe78 	bl	801804c <__mcmp>
 801735c:	9a08      	ldr	r2, [sp, #32]
 801735e:	4603      	mov	r3, r0
 8017360:	4611      	mov	r1, r2
 8017362:	4620      	mov	r0, r4
 8017364:	9308      	str	r3, [sp, #32]
 8017366:	f000 fc51 	bl	8017c0c <_Bfree>
 801736a:	9b08      	ldr	r3, [sp, #32]
 801736c:	b9a3      	cbnz	r3, 8017398 <_dtoa_r+0xa00>
 801736e:	9a06      	ldr	r2, [sp, #24]
 8017370:	b992      	cbnz	r2, 8017398 <_dtoa_r+0xa00>
 8017372:	9a07      	ldr	r2, [sp, #28]
 8017374:	b982      	cbnz	r2, 8017398 <_dtoa_r+0xa00>
 8017376:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801737a:	d029      	beq.n	80173d0 <_dtoa_r+0xa38>
 801737c:	9b00      	ldr	r3, [sp, #0]
 801737e:	2b00      	cmp	r3, #0
 8017380:	dd01      	ble.n	8017386 <_dtoa_r+0x9ee>
 8017382:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017386:	9b05      	ldr	r3, [sp, #20]
 8017388:	1c5d      	adds	r5, r3, #1
 801738a:	f883 8000 	strb.w	r8, [r3]
 801738e:	e782      	b.n	8017296 <_dtoa_r+0x8fe>
 8017390:	4630      	mov	r0, r6
 8017392:	e7c2      	b.n	801731a <_dtoa_r+0x982>
 8017394:	2301      	movs	r3, #1
 8017396:	e7e3      	b.n	8017360 <_dtoa_r+0x9c8>
 8017398:	9a00      	ldr	r2, [sp, #0]
 801739a:	2a00      	cmp	r2, #0
 801739c:	db04      	blt.n	80173a8 <_dtoa_r+0xa10>
 801739e:	d125      	bne.n	80173ec <_dtoa_r+0xa54>
 80173a0:	9a06      	ldr	r2, [sp, #24]
 80173a2:	bb1a      	cbnz	r2, 80173ec <_dtoa_r+0xa54>
 80173a4:	9a07      	ldr	r2, [sp, #28]
 80173a6:	bb0a      	cbnz	r2, 80173ec <_dtoa_r+0xa54>
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	ddec      	ble.n	8017386 <_dtoa_r+0x9ee>
 80173ac:	2201      	movs	r2, #1
 80173ae:	9904      	ldr	r1, [sp, #16]
 80173b0:	4620      	mov	r0, r4
 80173b2:	f000 fdf7 	bl	8017fa4 <__lshift>
 80173b6:	4639      	mov	r1, r7
 80173b8:	9004      	str	r0, [sp, #16]
 80173ba:	f000 fe47 	bl	801804c <__mcmp>
 80173be:	2800      	cmp	r0, #0
 80173c0:	dc03      	bgt.n	80173ca <_dtoa_r+0xa32>
 80173c2:	d1e0      	bne.n	8017386 <_dtoa_r+0x9ee>
 80173c4:	f018 0f01 	tst.w	r8, #1
 80173c8:	d0dd      	beq.n	8017386 <_dtoa_r+0x9ee>
 80173ca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80173ce:	d1d8      	bne.n	8017382 <_dtoa_r+0x9ea>
 80173d0:	9b05      	ldr	r3, [sp, #20]
 80173d2:	9a05      	ldr	r2, [sp, #20]
 80173d4:	1c5d      	adds	r5, r3, #1
 80173d6:	2339      	movs	r3, #57	; 0x39
 80173d8:	7013      	strb	r3, [r2, #0]
 80173da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80173de:	2b39      	cmp	r3, #57	; 0x39
 80173e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80173e4:	d04f      	beq.n	8017486 <_dtoa_r+0xaee>
 80173e6:	3301      	adds	r3, #1
 80173e8:	7013      	strb	r3, [r2, #0]
 80173ea:	e754      	b.n	8017296 <_dtoa_r+0x8fe>
 80173ec:	9a05      	ldr	r2, [sp, #20]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	f102 0501 	add.w	r5, r2, #1
 80173f4:	dd06      	ble.n	8017404 <_dtoa_r+0xa6c>
 80173f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80173fa:	d0e9      	beq.n	80173d0 <_dtoa_r+0xa38>
 80173fc:	f108 0801 	add.w	r8, r8, #1
 8017400:	9b05      	ldr	r3, [sp, #20]
 8017402:	e7c2      	b.n	801738a <_dtoa_r+0x9f2>
 8017404:	9a02      	ldr	r2, [sp, #8]
 8017406:	f805 8c01 	strb.w	r8, [r5, #-1]
 801740a:	eba5 030b 	sub.w	r3, r5, fp
 801740e:	4293      	cmp	r3, r2
 8017410:	d021      	beq.n	8017456 <_dtoa_r+0xabe>
 8017412:	2300      	movs	r3, #0
 8017414:	220a      	movs	r2, #10
 8017416:	9904      	ldr	r1, [sp, #16]
 8017418:	4620      	mov	r0, r4
 801741a:	f000 fc0e 	bl	8017c3a <__multadd>
 801741e:	45b1      	cmp	r9, r6
 8017420:	9004      	str	r0, [sp, #16]
 8017422:	f04f 0300 	mov.w	r3, #0
 8017426:	f04f 020a 	mov.w	r2, #10
 801742a:	4649      	mov	r1, r9
 801742c:	4620      	mov	r0, r4
 801742e:	d105      	bne.n	801743c <_dtoa_r+0xaa4>
 8017430:	f000 fc03 	bl	8017c3a <__multadd>
 8017434:	4681      	mov	r9, r0
 8017436:	4606      	mov	r6, r0
 8017438:	9505      	str	r5, [sp, #20]
 801743a:	e776      	b.n	801732a <_dtoa_r+0x992>
 801743c:	f000 fbfd 	bl	8017c3a <__multadd>
 8017440:	4631      	mov	r1, r6
 8017442:	4681      	mov	r9, r0
 8017444:	2300      	movs	r3, #0
 8017446:	220a      	movs	r2, #10
 8017448:	4620      	mov	r0, r4
 801744a:	f000 fbf6 	bl	8017c3a <__multadd>
 801744e:	4606      	mov	r6, r0
 8017450:	e7f2      	b.n	8017438 <_dtoa_r+0xaa0>
 8017452:	f04f 0900 	mov.w	r9, #0
 8017456:	2201      	movs	r2, #1
 8017458:	9904      	ldr	r1, [sp, #16]
 801745a:	4620      	mov	r0, r4
 801745c:	f000 fda2 	bl	8017fa4 <__lshift>
 8017460:	4639      	mov	r1, r7
 8017462:	9004      	str	r0, [sp, #16]
 8017464:	f000 fdf2 	bl	801804c <__mcmp>
 8017468:	2800      	cmp	r0, #0
 801746a:	dcb6      	bgt.n	80173da <_dtoa_r+0xa42>
 801746c:	d102      	bne.n	8017474 <_dtoa_r+0xadc>
 801746e:	f018 0f01 	tst.w	r8, #1
 8017472:	d1b2      	bne.n	80173da <_dtoa_r+0xa42>
 8017474:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017478:	2b30      	cmp	r3, #48	; 0x30
 801747a:	f105 32ff 	add.w	r2, r5, #4294967295
 801747e:	f47f af0a 	bne.w	8017296 <_dtoa_r+0x8fe>
 8017482:	4615      	mov	r5, r2
 8017484:	e7f6      	b.n	8017474 <_dtoa_r+0xadc>
 8017486:	4593      	cmp	fp, r2
 8017488:	d105      	bne.n	8017496 <_dtoa_r+0xafe>
 801748a:	2331      	movs	r3, #49	; 0x31
 801748c:	f10a 0a01 	add.w	sl, sl, #1
 8017490:	f88b 3000 	strb.w	r3, [fp]
 8017494:	e6ff      	b.n	8017296 <_dtoa_r+0x8fe>
 8017496:	4615      	mov	r5, r2
 8017498:	e79f      	b.n	80173da <_dtoa_r+0xa42>
 801749a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017500 <_dtoa_r+0xb68>
 801749e:	e007      	b.n	80174b0 <_dtoa_r+0xb18>
 80174a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80174a2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017504 <_dtoa_r+0xb6c>
 80174a6:	b11b      	cbz	r3, 80174b0 <_dtoa_r+0xb18>
 80174a8:	f10b 0308 	add.w	r3, fp, #8
 80174ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80174ae:	6013      	str	r3, [r2, #0]
 80174b0:	4658      	mov	r0, fp
 80174b2:	b017      	add	sp, #92	; 0x5c
 80174b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174b8:	9b06      	ldr	r3, [sp, #24]
 80174ba:	2b01      	cmp	r3, #1
 80174bc:	f77f ae35 	ble.w	801712a <_dtoa_r+0x792>
 80174c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174c2:	9307      	str	r3, [sp, #28]
 80174c4:	e649      	b.n	801715a <_dtoa_r+0x7c2>
 80174c6:	9b02      	ldr	r3, [sp, #8]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	dc03      	bgt.n	80174d4 <_dtoa_r+0xb3c>
 80174cc:	9b06      	ldr	r3, [sp, #24]
 80174ce:	2b02      	cmp	r3, #2
 80174d0:	f73f aecc 	bgt.w	801726c <_dtoa_r+0x8d4>
 80174d4:	465d      	mov	r5, fp
 80174d6:	4639      	mov	r1, r7
 80174d8:	9804      	ldr	r0, [sp, #16]
 80174da:	f7ff f9d1 	bl	8016880 <quorem>
 80174de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80174e2:	f805 8b01 	strb.w	r8, [r5], #1
 80174e6:	9a02      	ldr	r2, [sp, #8]
 80174e8:	eba5 030b 	sub.w	r3, r5, fp
 80174ec:	429a      	cmp	r2, r3
 80174ee:	ddb0      	ble.n	8017452 <_dtoa_r+0xaba>
 80174f0:	2300      	movs	r3, #0
 80174f2:	220a      	movs	r2, #10
 80174f4:	9904      	ldr	r1, [sp, #16]
 80174f6:	4620      	mov	r0, r4
 80174f8:	f000 fb9f 	bl	8017c3a <__multadd>
 80174fc:	9004      	str	r0, [sp, #16]
 80174fe:	e7ea      	b.n	80174d6 <_dtoa_r+0xb3e>
 8017500:	0801ab68 	.word	0x0801ab68
 8017504:	0801abe8 	.word	0x0801abe8

08017508 <rshift>:
 8017508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801750a:	6906      	ldr	r6, [r0, #16]
 801750c:	114b      	asrs	r3, r1, #5
 801750e:	429e      	cmp	r6, r3
 8017510:	f100 0414 	add.w	r4, r0, #20
 8017514:	dd30      	ble.n	8017578 <rshift+0x70>
 8017516:	f011 011f 	ands.w	r1, r1, #31
 801751a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801751e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017522:	d108      	bne.n	8017536 <rshift+0x2e>
 8017524:	4621      	mov	r1, r4
 8017526:	42b2      	cmp	r2, r6
 8017528:	460b      	mov	r3, r1
 801752a:	d211      	bcs.n	8017550 <rshift+0x48>
 801752c:	f852 3b04 	ldr.w	r3, [r2], #4
 8017530:	f841 3b04 	str.w	r3, [r1], #4
 8017534:	e7f7      	b.n	8017526 <rshift+0x1e>
 8017536:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801753a:	f1c1 0c20 	rsb	ip, r1, #32
 801753e:	40cd      	lsrs	r5, r1
 8017540:	3204      	adds	r2, #4
 8017542:	4623      	mov	r3, r4
 8017544:	42b2      	cmp	r2, r6
 8017546:	4617      	mov	r7, r2
 8017548:	d30c      	bcc.n	8017564 <rshift+0x5c>
 801754a:	601d      	str	r5, [r3, #0]
 801754c:	b105      	cbz	r5, 8017550 <rshift+0x48>
 801754e:	3304      	adds	r3, #4
 8017550:	1b1a      	subs	r2, r3, r4
 8017552:	42a3      	cmp	r3, r4
 8017554:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017558:	bf08      	it	eq
 801755a:	2300      	moveq	r3, #0
 801755c:	6102      	str	r2, [r0, #16]
 801755e:	bf08      	it	eq
 8017560:	6143      	streq	r3, [r0, #20]
 8017562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017564:	683f      	ldr	r7, [r7, #0]
 8017566:	fa07 f70c 	lsl.w	r7, r7, ip
 801756a:	433d      	orrs	r5, r7
 801756c:	f843 5b04 	str.w	r5, [r3], #4
 8017570:	f852 5b04 	ldr.w	r5, [r2], #4
 8017574:	40cd      	lsrs	r5, r1
 8017576:	e7e5      	b.n	8017544 <rshift+0x3c>
 8017578:	4623      	mov	r3, r4
 801757a:	e7e9      	b.n	8017550 <rshift+0x48>

0801757c <__hexdig_fun>:
 801757c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017580:	2b09      	cmp	r3, #9
 8017582:	d802      	bhi.n	801758a <__hexdig_fun+0xe>
 8017584:	3820      	subs	r0, #32
 8017586:	b2c0      	uxtb	r0, r0
 8017588:	4770      	bx	lr
 801758a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801758e:	2b05      	cmp	r3, #5
 8017590:	d801      	bhi.n	8017596 <__hexdig_fun+0x1a>
 8017592:	3847      	subs	r0, #71	; 0x47
 8017594:	e7f7      	b.n	8017586 <__hexdig_fun+0xa>
 8017596:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801759a:	2b05      	cmp	r3, #5
 801759c:	d801      	bhi.n	80175a2 <__hexdig_fun+0x26>
 801759e:	3827      	subs	r0, #39	; 0x27
 80175a0:	e7f1      	b.n	8017586 <__hexdig_fun+0xa>
 80175a2:	2000      	movs	r0, #0
 80175a4:	4770      	bx	lr

080175a6 <__gethex>:
 80175a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175aa:	b08b      	sub	sp, #44	; 0x2c
 80175ac:	468a      	mov	sl, r1
 80175ae:	9002      	str	r0, [sp, #8]
 80175b0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80175b2:	9306      	str	r3, [sp, #24]
 80175b4:	4690      	mov	r8, r2
 80175b6:	f000 fad0 	bl	8017b5a <__localeconv_l>
 80175ba:	6803      	ldr	r3, [r0, #0]
 80175bc:	9303      	str	r3, [sp, #12]
 80175be:	4618      	mov	r0, r3
 80175c0:	f7e8 fe10 	bl	80001e4 <strlen>
 80175c4:	9b03      	ldr	r3, [sp, #12]
 80175c6:	9001      	str	r0, [sp, #4]
 80175c8:	4403      	add	r3, r0
 80175ca:	f04f 0b00 	mov.w	fp, #0
 80175ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80175d2:	9307      	str	r3, [sp, #28]
 80175d4:	f8da 3000 	ldr.w	r3, [sl]
 80175d8:	3302      	adds	r3, #2
 80175da:	461f      	mov	r7, r3
 80175dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80175e0:	2830      	cmp	r0, #48	; 0x30
 80175e2:	d06c      	beq.n	80176be <__gethex+0x118>
 80175e4:	f7ff ffca 	bl	801757c <__hexdig_fun>
 80175e8:	4604      	mov	r4, r0
 80175ea:	2800      	cmp	r0, #0
 80175ec:	d16a      	bne.n	80176c4 <__gethex+0x11e>
 80175ee:	9a01      	ldr	r2, [sp, #4]
 80175f0:	9903      	ldr	r1, [sp, #12]
 80175f2:	4638      	mov	r0, r7
 80175f4:	f7fe fa42 	bl	8015a7c <strncmp>
 80175f8:	2800      	cmp	r0, #0
 80175fa:	d166      	bne.n	80176ca <__gethex+0x124>
 80175fc:	9b01      	ldr	r3, [sp, #4]
 80175fe:	5cf8      	ldrb	r0, [r7, r3]
 8017600:	18fe      	adds	r6, r7, r3
 8017602:	f7ff ffbb 	bl	801757c <__hexdig_fun>
 8017606:	2800      	cmp	r0, #0
 8017608:	d062      	beq.n	80176d0 <__gethex+0x12a>
 801760a:	4633      	mov	r3, r6
 801760c:	7818      	ldrb	r0, [r3, #0]
 801760e:	2830      	cmp	r0, #48	; 0x30
 8017610:	461f      	mov	r7, r3
 8017612:	f103 0301 	add.w	r3, r3, #1
 8017616:	d0f9      	beq.n	801760c <__gethex+0x66>
 8017618:	f7ff ffb0 	bl	801757c <__hexdig_fun>
 801761c:	fab0 f580 	clz	r5, r0
 8017620:	096d      	lsrs	r5, r5, #5
 8017622:	4634      	mov	r4, r6
 8017624:	f04f 0b01 	mov.w	fp, #1
 8017628:	463a      	mov	r2, r7
 801762a:	4616      	mov	r6, r2
 801762c:	3201      	adds	r2, #1
 801762e:	7830      	ldrb	r0, [r6, #0]
 8017630:	f7ff ffa4 	bl	801757c <__hexdig_fun>
 8017634:	2800      	cmp	r0, #0
 8017636:	d1f8      	bne.n	801762a <__gethex+0x84>
 8017638:	9a01      	ldr	r2, [sp, #4]
 801763a:	9903      	ldr	r1, [sp, #12]
 801763c:	4630      	mov	r0, r6
 801763e:	f7fe fa1d 	bl	8015a7c <strncmp>
 8017642:	b950      	cbnz	r0, 801765a <__gethex+0xb4>
 8017644:	b954      	cbnz	r4, 801765c <__gethex+0xb6>
 8017646:	9b01      	ldr	r3, [sp, #4]
 8017648:	18f4      	adds	r4, r6, r3
 801764a:	4622      	mov	r2, r4
 801764c:	4616      	mov	r6, r2
 801764e:	3201      	adds	r2, #1
 8017650:	7830      	ldrb	r0, [r6, #0]
 8017652:	f7ff ff93 	bl	801757c <__hexdig_fun>
 8017656:	2800      	cmp	r0, #0
 8017658:	d1f8      	bne.n	801764c <__gethex+0xa6>
 801765a:	b10c      	cbz	r4, 8017660 <__gethex+0xba>
 801765c:	1ba4      	subs	r4, r4, r6
 801765e:	00a4      	lsls	r4, r4, #2
 8017660:	7833      	ldrb	r3, [r6, #0]
 8017662:	2b50      	cmp	r3, #80	; 0x50
 8017664:	d001      	beq.n	801766a <__gethex+0xc4>
 8017666:	2b70      	cmp	r3, #112	; 0x70
 8017668:	d140      	bne.n	80176ec <__gethex+0x146>
 801766a:	7873      	ldrb	r3, [r6, #1]
 801766c:	2b2b      	cmp	r3, #43	; 0x2b
 801766e:	d031      	beq.n	80176d4 <__gethex+0x12e>
 8017670:	2b2d      	cmp	r3, #45	; 0x2d
 8017672:	d033      	beq.n	80176dc <__gethex+0x136>
 8017674:	1c71      	adds	r1, r6, #1
 8017676:	f04f 0900 	mov.w	r9, #0
 801767a:	7808      	ldrb	r0, [r1, #0]
 801767c:	f7ff ff7e 	bl	801757c <__hexdig_fun>
 8017680:	1e43      	subs	r3, r0, #1
 8017682:	b2db      	uxtb	r3, r3
 8017684:	2b18      	cmp	r3, #24
 8017686:	d831      	bhi.n	80176ec <__gethex+0x146>
 8017688:	f1a0 0210 	sub.w	r2, r0, #16
 801768c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017690:	f7ff ff74 	bl	801757c <__hexdig_fun>
 8017694:	1e43      	subs	r3, r0, #1
 8017696:	b2db      	uxtb	r3, r3
 8017698:	2b18      	cmp	r3, #24
 801769a:	d922      	bls.n	80176e2 <__gethex+0x13c>
 801769c:	f1b9 0f00 	cmp.w	r9, #0
 80176a0:	d000      	beq.n	80176a4 <__gethex+0xfe>
 80176a2:	4252      	negs	r2, r2
 80176a4:	4414      	add	r4, r2
 80176a6:	f8ca 1000 	str.w	r1, [sl]
 80176aa:	b30d      	cbz	r5, 80176f0 <__gethex+0x14a>
 80176ac:	f1bb 0f00 	cmp.w	fp, #0
 80176b0:	bf0c      	ite	eq
 80176b2:	2706      	moveq	r7, #6
 80176b4:	2700      	movne	r7, #0
 80176b6:	4638      	mov	r0, r7
 80176b8:	b00b      	add	sp, #44	; 0x2c
 80176ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176be:	f10b 0b01 	add.w	fp, fp, #1
 80176c2:	e78a      	b.n	80175da <__gethex+0x34>
 80176c4:	2500      	movs	r5, #0
 80176c6:	462c      	mov	r4, r5
 80176c8:	e7ae      	b.n	8017628 <__gethex+0x82>
 80176ca:	463e      	mov	r6, r7
 80176cc:	2501      	movs	r5, #1
 80176ce:	e7c7      	b.n	8017660 <__gethex+0xba>
 80176d0:	4604      	mov	r4, r0
 80176d2:	e7fb      	b.n	80176cc <__gethex+0x126>
 80176d4:	f04f 0900 	mov.w	r9, #0
 80176d8:	1cb1      	adds	r1, r6, #2
 80176da:	e7ce      	b.n	801767a <__gethex+0xd4>
 80176dc:	f04f 0901 	mov.w	r9, #1
 80176e0:	e7fa      	b.n	80176d8 <__gethex+0x132>
 80176e2:	230a      	movs	r3, #10
 80176e4:	fb03 0202 	mla	r2, r3, r2, r0
 80176e8:	3a10      	subs	r2, #16
 80176ea:	e7cf      	b.n	801768c <__gethex+0xe6>
 80176ec:	4631      	mov	r1, r6
 80176ee:	e7da      	b.n	80176a6 <__gethex+0x100>
 80176f0:	1bf3      	subs	r3, r6, r7
 80176f2:	3b01      	subs	r3, #1
 80176f4:	4629      	mov	r1, r5
 80176f6:	2b07      	cmp	r3, #7
 80176f8:	dc49      	bgt.n	801778e <__gethex+0x1e8>
 80176fa:	9802      	ldr	r0, [sp, #8]
 80176fc:	f000 fa52 	bl	8017ba4 <_Balloc>
 8017700:	9b01      	ldr	r3, [sp, #4]
 8017702:	f100 0914 	add.w	r9, r0, #20
 8017706:	f04f 0b00 	mov.w	fp, #0
 801770a:	f1c3 0301 	rsb	r3, r3, #1
 801770e:	4605      	mov	r5, r0
 8017710:	f8cd 9010 	str.w	r9, [sp, #16]
 8017714:	46da      	mov	sl, fp
 8017716:	9308      	str	r3, [sp, #32]
 8017718:	42b7      	cmp	r7, r6
 801771a:	d33b      	bcc.n	8017794 <__gethex+0x1ee>
 801771c:	9804      	ldr	r0, [sp, #16]
 801771e:	f840 ab04 	str.w	sl, [r0], #4
 8017722:	eba0 0009 	sub.w	r0, r0, r9
 8017726:	1080      	asrs	r0, r0, #2
 8017728:	6128      	str	r0, [r5, #16]
 801772a:	0147      	lsls	r7, r0, #5
 801772c:	4650      	mov	r0, sl
 801772e:	f000 fafd 	bl	8017d2c <__hi0bits>
 8017732:	f8d8 6000 	ldr.w	r6, [r8]
 8017736:	1a3f      	subs	r7, r7, r0
 8017738:	42b7      	cmp	r7, r6
 801773a:	dd64      	ble.n	8017806 <__gethex+0x260>
 801773c:	1bbf      	subs	r7, r7, r6
 801773e:	4639      	mov	r1, r7
 8017740:	4628      	mov	r0, r5
 8017742:	f000 fe0d 	bl	8018360 <__any_on>
 8017746:	4682      	mov	sl, r0
 8017748:	b178      	cbz	r0, 801776a <__gethex+0x1c4>
 801774a:	1e7b      	subs	r3, r7, #1
 801774c:	1159      	asrs	r1, r3, #5
 801774e:	f003 021f 	and.w	r2, r3, #31
 8017752:	f04f 0a01 	mov.w	sl, #1
 8017756:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801775a:	fa0a f202 	lsl.w	r2, sl, r2
 801775e:	420a      	tst	r2, r1
 8017760:	d003      	beq.n	801776a <__gethex+0x1c4>
 8017762:	4553      	cmp	r3, sl
 8017764:	dc46      	bgt.n	80177f4 <__gethex+0x24e>
 8017766:	f04f 0a02 	mov.w	sl, #2
 801776a:	4639      	mov	r1, r7
 801776c:	4628      	mov	r0, r5
 801776e:	f7ff fecb 	bl	8017508 <rshift>
 8017772:	443c      	add	r4, r7
 8017774:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017778:	42a3      	cmp	r3, r4
 801777a:	da52      	bge.n	8017822 <__gethex+0x27c>
 801777c:	4629      	mov	r1, r5
 801777e:	9802      	ldr	r0, [sp, #8]
 8017780:	f000 fa44 	bl	8017c0c <_Bfree>
 8017784:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017786:	2300      	movs	r3, #0
 8017788:	6013      	str	r3, [r2, #0]
 801778a:	27a3      	movs	r7, #163	; 0xa3
 801778c:	e793      	b.n	80176b6 <__gethex+0x110>
 801778e:	3101      	adds	r1, #1
 8017790:	105b      	asrs	r3, r3, #1
 8017792:	e7b0      	b.n	80176f6 <__gethex+0x150>
 8017794:	1e73      	subs	r3, r6, #1
 8017796:	9305      	str	r3, [sp, #20]
 8017798:	9a07      	ldr	r2, [sp, #28]
 801779a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801779e:	4293      	cmp	r3, r2
 80177a0:	d018      	beq.n	80177d4 <__gethex+0x22e>
 80177a2:	f1bb 0f20 	cmp.w	fp, #32
 80177a6:	d107      	bne.n	80177b8 <__gethex+0x212>
 80177a8:	9b04      	ldr	r3, [sp, #16]
 80177aa:	f8c3 a000 	str.w	sl, [r3]
 80177ae:	3304      	adds	r3, #4
 80177b0:	f04f 0a00 	mov.w	sl, #0
 80177b4:	9304      	str	r3, [sp, #16]
 80177b6:	46d3      	mov	fp, sl
 80177b8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80177bc:	f7ff fede 	bl	801757c <__hexdig_fun>
 80177c0:	f000 000f 	and.w	r0, r0, #15
 80177c4:	fa00 f00b 	lsl.w	r0, r0, fp
 80177c8:	ea4a 0a00 	orr.w	sl, sl, r0
 80177cc:	f10b 0b04 	add.w	fp, fp, #4
 80177d0:	9b05      	ldr	r3, [sp, #20]
 80177d2:	e00d      	b.n	80177f0 <__gethex+0x24a>
 80177d4:	9b05      	ldr	r3, [sp, #20]
 80177d6:	9a08      	ldr	r2, [sp, #32]
 80177d8:	4413      	add	r3, r2
 80177da:	42bb      	cmp	r3, r7
 80177dc:	d3e1      	bcc.n	80177a2 <__gethex+0x1fc>
 80177de:	4618      	mov	r0, r3
 80177e0:	9a01      	ldr	r2, [sp, #4]
 80177e2:	9903      	ldr	r1, [sp, #12]
 80177e4:	9309      	str	r3, [sp, #36]	; 0x24
 80177e6:	f7fe f949 	bl	8015a7c <strncmp>
 80177ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177ec:	2800      	cmp	r0, #0
 80177ee:	d1d8      	bne.n	80177a2 <__gethex+0x1fc>
 80177f0:	461e      	mov	r6, r3
 80177f2:	e791      	b.n	8017718 <__gethex+0x172>
 80177f4:	1eb9      	subs	r1, r7, #2
 80177f6:	4628      	mov	r0, r5
 80177f8:	f000 fdb2 	bl	8018360 <__any_on>
 80177fc:	2800      	cmp	r0, #0
 80177fe:	d0b2      	beq.n	8017766 <__gethex+0x1c0>
 8017800:	f04f 0a03 	mov.w	sl, #3
 8017804:	e7b1      	b.n	801776a <__gethex+0x1c4>
 8017806:	da09      	bge.n	801781c <__gethex+0x276>
 8017808:	1bf7      	subs	r7, r6, r7
 801780a:	4629      	mov	r1, r5
 801780c:	463a      	mov	r2, r7
 801780e:	9802      	ldr	r0, [sp, #8]
 8017810:	f000 fbc8 	bl	8017fa4 <__lshift>
 8017814:	1be4      	subs	r4, r4, r7
 8017816:	4605      	mov	r5, r0
 8017818:	f100 0914 	add.w	r9, r0, #20
 801781c:	f04f 0a00 	mov.w	sl, #0
 8017820:	e7a8      	b.n	8017774 <__gethex+0x1ce>
 8017822:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017826:	42a0      	cmp	r0, r4
 8017828:	dd6a      	ble.n	8017900 <__gethex+0x35a>
 801782a:	1b04      	subs	r4, r0, r4
 801782c:	42a6      	cmp	r6, r4
 801782e:	dc2e      	bgt.n	801788e <__gethex+0x2e8>
 8017830:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017834:	2b02      	cmp	r3, #2
 8017836:	d022      	beq.n	801787e <__gethex+0x2d8>
 8017838:	2b03      	cmp	r3, #3
 801783a:	d024      	beq.n	8017886 <__gethex+0x2e0>
 801783c:	2b01      	cmp	r3, #1
 801783e:	d115      	bne.n	801786c <__gethex+0x2c6>
 8017840:	42a6      	cmp	r6, r4
 8017842:	d113      	bne.n	801786c <__gethex+0x2c6>
 8017844:	2e01      	cmp	r6, #1
 8017846:	dc0b      	bgt.n	8017860 <__gethex+0x2ba>
 8017848:	9a06      	ldr	r2, [sp, #24]
 801784a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801784e:	6013      	str	r3, [r2, #0]
 8017850:	2301      	movs	r3, #1
 8017852:	612b      	str	r3, [r5, #16]
 8017854:	f8c9 3000 	str.w	r3, [r9]
 8017858:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801785a:	2762      	movs	r7, #98	; 0x62
 801785c:	601d      	str	r5, [r3, #0]
 801785e:	e72a      	b.n	80176b6 <__gethex+0x110>
 8017860:	1e71      	subs	r1, r6, #1
 8017862:	4628      	mov	r0, r5
 8017864:	f000 fd7c 	bl	8018360 <__any_on>
 8017868:	2800      	cmp	r0, #0
 801786a:	d1ed      	bne.n	8017848 <__gethex+0x2a2>
 801786c:	4629      	mov	r1, r5
 801786e:	9802      	ldr	r0, [sp, #8]
 8017870:	f000 f9cc 	bl	8017c0c <_Bfree>
 8017874:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017876:	2300      	movs	r3, #0
 8017878:	6013      	str	r3, [r2, #0]
 801787a:	2750      	movs	r7, #80	; 0x50
 801787c:	e71b      	b.n	80176b6 <__gethex+0x110>
 801787e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017880:	2b00      	cmp	r3, #0
 8017882:	d0e1      	beq.n	8017848 <__gethex+0x2a2>
 8017884:	e7f2      	b.n	801786c <__gethex+0x2c6>
 8017886:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017888:	2b00      	cmp	r3, #0
 801788a:	d1dd      	bne.n	8017848 <__gethex+0x2a2>
 801788c:	e7ee      	b.n	801786c <__gethex+0x2c6>
 801788e:	1e67      	subs	r7, r4, #1
 8017890:	f1ba 0f00 	cmp.w	sl, #0
 8017894:	d131      	bne.n	80178fa <__gethex+0x354>
 8017896:	b127      	cbz	r7, 80178a2 <__gethex+0x2fc>
 8017898:	4639      	mov	r1, r7
 801789a:	4628      	mov	r0, r5
 801789c:	f000 fd60 	bl	8018360 <__any_on>
 80178a0:	4682      	mov	sl, r0
 80178a2:	117a      	asrs	r2, r7, #5
 80178a4:	2301      	movs	r3, #1
 80178a6:	f007 071f 	and.w	r7, r7, #31
 80178aa:	fa03 f707 	lsl.w	r7, r3, r7
 80178ae:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80178b2:	4621      	mov	r1, r4
 80178b4:	421f      	tst	r7, r3
 80178b6:	4628      	mov	r0, r5
 80178b8:	bf18      	it	ne
 80178ba:	f04a 0a02 	orrne.w	sl, sl, #2
 80178be:	1b36      	subs	r6, r6, r4
 80178c0:	f7ff fe22 	bl	8017508 <rshift>
 80178c4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80178c8:	2702      	movs	r7, #2
 80178ca:	f1ba 0f00 	cmp.w	sl, #0
 80178ce:	d048      	beq.n	8017962 <__gethex+0x3bc>
 80178d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80178d4:	2b02      	cmp	r3, #2
 80178d6:	d015      	beq.n	8017904 <__gethex+0x35e>
 80178d8:	2b03      	cmp	r3, #3
 80178da:	d017      	beq.n	801790c <__gethex+0x366>
 80178dc:	2b01      	cmp	r3, #1
 80178de:	d109      	bne.n	80178f4 <__gethex+0x34e>
 80178e0:	f01a 0f02 	tst.w	sl, #2
 80178e4:	d006      	beq.n	80178f4 <__gethex+0x34e>
 80178e6:	f8d9 3000 	ldr.w	r3, [r9]
 80178ea:	ea4a 0a03 	orr.w	sl, sl, r3
 80178ee:	f01a 0f01 	tst.w	sl, #1
 80178f2:	d10e      	bne.n	8017912 <__gethex+0x36c>
 80178f4:	f047 0710 	orr.w	r7, r7, #16
 80178f8:	e033      	b.n	8017962 <__gethex+0x3bc>
 80178fa:	f04f 0a01 	mov.w	sl, #1
 80178fe:	e7d0      	b.n	80178a2 <__gethex+0x2fc>
 8017900:	2701      	movs	r7, #1
 8017902:	e7e2      	b.n	80178ca <__gethex+0x324>
 8017904:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017906:	f1c3 0301 	rsb	r3, r3, #1
 801790a:	9315      	str	r3, [sp, #84]	; 0x54
 801790c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801790e:	2b00      	cmp	r3, #0
 8017910:	d0f0      	beq.n	80178f4 <__gethex+0x34e>
 8017912:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017916:	f105 0314 	add.w	r3, r5, #20
 801791a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801791e:	eb03 010a 	add.w	r1, r3, sl
 8017922:	f04f 0c00 	mov.w	ip, #0
 8017926:	4618      	mov	r0, r3
 8017928:	f853 2b04 	ldr.w	r2, [r3], #4
 801792c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017930:	d01c      	beq.n	801796c <__gethex+0x3c6>
 8017932:	3201      	adds	r2, #1
 8017934:	6002      	str	r2, [r0, #0]
 8017936:	2f02      	cmp	r7, #2
 8017938:	f105 0314 	add.w	r3, r5, #20
 801793c:	d138      	bne.n	80179b0 <__gethex+0x40a>
 801793e:	f8d8 2000 	ldr.w	r2, [r8]
 8017942:	3a01      	subs	r2, #1
 8017944:	42b2      	cmp	r2, r6
 8017946:	d10a      	bne.n	801795e <__gethex+0x3b8>
 8017948:	1171      	asrs	r1, r6, #5
 801794a:	2201      	movs	r2, #1
 801794c:	f006 061f 	and.w	r6, r6, #31
 8017950:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017954:	fa02 f606 	lsl.w	r6, r2, r6
 8017958:	421e      	tst	r6, r3
 801795a:	bf18      	it	ne
 801795c:	4617      	movne	r7, r2
 801795e:	f047 0720 	orr.w	r7, r7, #32
 8017962:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017964:	601d      	str	r5, [r3, #0]
 8017966:	9b06      	ldr	r3, [sp, #24]
 8017968:	601c      	str	r4, [r3, #0]
 801796a:	e6a4      	b.n	80176b6 <__gethex+0x110>
 801796c:	4299      	cmp	r1, r3
 801796e:	f843 cc04 	str.w	ip, [r3, #-4]
 8017972:	d8d8      	bhi.n	8017926 <__gethex+0x380>
 8017974:	68ab      	ldr	r3, [r5, #8]
 8017976:	4599      	cmp	r9, r3
 8017978:	db12      	blt.n	80179a0 <__gethex+0x3fa>
 801797a:	6869      	ldr	r1, [r5, #4]
 801797c:	9802      	ldr	r0, [sp, #8]
 801797e:	3101      	adds	r1, #1
 8017980:	f000 f910 	bl	8017ba4 <_Balloc>
 8017984:	692a      	ldr	r2, [r5, #16]
 8017986:	3202      	adds	r2, #2
 8017988:	f105 010c 	add.w	r1, r5, #12
 801798c:	4683      	mov	fp, r0
 801798e:	0092      	lsls	r2, r2, #2
 8017990:	300c      	adds	r0, #12
 8017992:	f7fd f91f 	bl	8014bd4 <memcpy>
 8017996:	4629      	mov	r1, r5
 8017998:	9802      	ldr	r0, [sp, #8]
 801799a:	f000 f937 	bl	8017c0c <_Bfree>
 801799e:	465d      	mov	r5, fp
 80179a0:	692b      	ldr	r3, [r5, #16]
 80179a2:	1c5a      	adds	r2, r3, #1
 80179a4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80179a8:	612a      	str	r2, [r5, #16]
 80179aa:	2201      	movs	r2, #1
 80179ac:	615a      	str	r2, [r3, #20]
 80179ae:	e7c2      	b.n	8017936 <__gethex+0x390>
 80179b0:	692a      	ldr	r2, [r5, #16]
 80179b2:	454a      	cmp	r2, r9
 80179b4:	dd0b      	ble.n	80179ce <__gethex+0x428>
 80179b6:	2101      	movs	r1, #1
 80179b8:	4628      	mov	r0, r5
 80179ba:	f7ff fda5 	bl	8017508 <rshift>
 80179be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80179c2:	3401      	adds	r4, #1
 80179c4:	42a3      	cmp	r3, r4
 80179c6:	f6ff aed9 	blt.w	801777c <__gethex+0x1d6>
 80179ca:	2701      	movs	r7, #1
 80179cc:	e7c7      	b.n	801795e <__gethex+0x3b8>
 80179ce:	f016 061f 	ands.w	r6, r6, #31
 80179d2:	d0fa      	beq.n	80179ca <__gethex+0x424>
 80179d4:	449a      	add	sl, r3
 80179d6:	f1c6 0620 	rsb	r6, r6, #32
 80179da:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80179de:	f000 f9a5 	bl	8017d2c <__hi0bits>
 80179e2:	42b0      	cmp	r0, r6
 80179e4:	dbe7      	blt.n	80179b6 <__gethex+0x410>
 80179e6:	e7f0      	b.n	80179ca <__gethex+0x424>

080179e8 <L_shift>:
 80179e8:	f1c2 0208 	rsb	r2, r2, #8
 80179ec:	0092      	lsls	r2, r2, #2
 80179ee:	b570      	push	{r4, r5, r6, lr}
 80179f0:	f1c2 0620 	rsb	r6, r2, #32
 80179f4:	6843      	ldr	r3, [r0, #4]
 80179f6:	6804      	ldr	r4, [r0, #0]
 80179f8:	fa03 f506 	lsl.w	r5, r3, r6
 80179fc:	432c      	orrs	r4, r5
 80179fe:	40d3      	lsrs	r3, r2
 8017a00:	6004      	str	r4, [r0, #0]
 8017a02:	f840 3f04 	str.w	r3, [r0, #4]!
 8017a06:	4288      	cmp	r0, r1
 8017a08:	d3f4      	bcc.n	80179f4 <L_shift+0xc>
 8017a0a:	bd70      	pop	{r4, r5, r6, pc}

08017a0c <__match>:
 8017a0c:	b530      	push	{r4, r5, lr}
 8017a0e:	6803      	ldr	r3, [r0, #0]
 8017a10:	3301      	adds	r3, #1
 8017a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017a16:	b914      	cbnz	r4, 8017a1e <__match+0x12>
 8017a18:	6003      	str	r3, [r0, #0]
 8017a1a:	2001      	movs	r0, #1
 8017a1c:	bd30      	pop	{r4, r5, pc}
 8017a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017a26:	2d19      	cmp	r5, #25
 8017a28:	bf98      	it	ls
 8017a2a:	3220      	addls	r2, #32
 8017a2c:	42a2      	cmp	r2, r4
 8017a2e:	d0f0      	beq.n	8017a12 <__match+0x6>
 8017a30:	2000      	movs	r0, #0
 8017a32:	e7f3      	b.n	8017a1c <__match+0x10>

08017a34 <__hexnan>:
 8017a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a38:	680b      	ldr	r3, [r1, #0]
 8017a3a:	6801      	ldr	r1, [r0, #0]
 8017a3c:	115f      	asrs	r7, r3, #5
 8017a3e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017a42:	f013 031f 	ands.w	r3, r3, #31
 8017a46:	b087      	sub	sp, #28
 8017a48:	bf18      	it	ne
 8017a4a:	3704      	addne	r7, #4
 8017a4c:	2500      	movs	r5, #0
 8017a4e:	1f3e      	subs	r6, r7, #4
 8017a50:	4682      	mov	sl, r0
 8017a52:	4690      	mov	r8, r2
 8017a54:	9301      	str	r3, [sp, #4]
 8017a56:	f847 5c04 	str.w	r5, [r7, #-4]
 8017a5a:	46b1      	mov	r9, r6
 8017a5c:	4634      	mov	r4, r6
 8017a5e:	9502      	str	r5, [sp, #8]
 8017a60:	46ab      	mov	fp, r5
 8017a62:	784a      	ldrb	r2, [r1, #1]
 8017a64:	1c4b      	adds	r3, r1, #1
 8017a66:	9303      	str	r3, [sp, #12]
 8017a68:	b342      	cbz	r2, 8017abc <__hexnan+0x88>
 8017a6a:	4610      	mov	r0, r2
 8017a6c:	9105      	str	r1, [sp, #20]
 8017a6e:	9204      	str	r2, [sp, #16]
 8017a70:	f7ff fd84 	bl	801757c <__hexdig_fun>
 8017a74:	2800      	cmp	r0, #0
 8017a76:	d143      	bne.n	8017b00 <__hexnan+0xcc>
 8017a78:	9a04      	ldr	r2, [sp, #16]
 8017a7a:	9905      	ldr	r1, [sp, #20]
 8017a7c:	2a20      	cmp	r2, #32
 8017a7e:	d818      	bhi.n	8017ab2 <__hexnan+0x7e>
 8017a80:	9b02      	ldr	r3, [sp, #8]
 8017a82:	459b      	cmp	fp, r3
 8017a84:	dd13      	ble.n	8017aae <__hexnan+0x7a>
 8017a86:	454c      	cmp	r4, r9
 8017a88:	d206      	bcs.n	8017a98 <__hexnan+0x64>
 8017a8a:	2d07      	cmp	r5, #7
 8017a8c:	dc04      	bgt.n	8017a98 <__hexnan+0x64>
 8017a8e:	462a      	mov	r2, r5
 8017a90:	4649      	mov	r1, r9
 8017a92:	4620      	mov	r0, r4
 8017a94:	f7ff ffa8 	bl	80179e8 <L_shift>
 8017a98:	4544      	cmp	r4, r8
 8017a9a:	d944      	bls.n	8017b26 <__hexnan+0xf2>
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	f1a4 0904 	sub.w	r9, r4, #4
 8017aa2:	f844 3c04 	str.w	r3, [r4, #-4]
 8017aa6:	f8cd b008 	str.w	fp, [sp, #8]
 8017aaa:	464c      	mov	r4, r9
 8017aac:	461d      	mov	r5, r3
 8017aae:	9903      	ldr	r1, [sp, #12]
 8017ab0:	e7d7      	b.n	8017a62 <__hexnan+0x2e>
 8017ab2:	2a29      	cmp	r2, #41	; 0x29
 8017ab4:	d14a      	bne.n	8017b4c <__hexnan+0x118>
 8017ab6:	3102      	adds	r1, #2
 8017ab8:	f8ca 1000 	str.w	r1, [sl]
 8017abc:	f1bb 0f00 	cmp.w	fp, #0
 8017ac0:	d044      	beq.n	8017b4c <__hexnan+0x118>
 8017ac2:	454c      	cmp	r4, r9
 8017ac4:	d206      	bcs.n	8017ad4 <__hexnan+0xa0>
 8017ac6:	2d07      	cmp	r5, #7
 8017ac8:	dc04      	bgt.n	8017ad4 <__hexnan+0xa0>
 8017aca:	462a      	mov	r2, r5
 8017acc:	4649      	mov	r1, r9
 8017ace:	4620      	mov	r0, r4
 8017ad0:	f7ff ff8a 	bl	80179e8 <L_shift>
 8017ad4:	4544      	cmp	r4, r8
 8017ad6:	d928      	bls.n	8017b2a <__hexnan+0xf6>
 8017ad8:	4643      	mov	r3, r8
 8017ada:	f854 2b04 	ldr.w	r2, [r4], #4
 8017ade:	f843 2b04 	str.w	r2, [r3], #4
 8017ae2:	42a6      	cmp	r6, r4
 8017ae4:	d2f9      	bcs.n	8017ada <__hexnan+0xa6>
 8017ae6:	2200      	movs	r2, #0
 8017ae8:	f843 2b04 	str.w	r2, [r3], #4
 8017aec:	429e      	cmp	r6, r3
 8017aee:	d2fb      	bcs.n	8017ae8 <__hexnan+0xb4>
 8017af0:	6833      	ldr	r3, [r6, #0]
 8017af2:	b91b      	cbnz	r3, 8017afc <__hexnan+0xc8>
 8017af4:	4546      	cmp	r6, r8
 8017af6:	d127      	bne.n	8017b48 <__hexnan+0x114>
 8017af8:	2301      	movs	r3, #1
 8017afa:	6033      	str	r3, [r6, #0]
 8017afc:	2005      	movs	r0, #5
 8017afe:	e026      	b.n	8017b4e <__hexnan+0x11a>
 8017b00:	3501      	adds	r5, #1
 8017b02:	2d08      	cmp	r5, #8
 8017b04:	f10b 0b01 	add.w	fp, fp, #1
 8017b08:	dd06      	ble.n	8017b18 <__hexnan+0xe4>
 8017b0a:	4544      	cmp	r4, r8
 8017b0c:	d9cf      	bls.n	8017aae <__hexnan+0x7a>
 8017b0e:	2300      	movs	r3, #0
 8017b10:	f844 3c04 	str.w	r3, [r4, #-4]
 8017b14:	2501      	movs	r5, #1
 8017b16:	3c04      	subs	r4, #4
 8017b18:	6822      	ldr	r2, [r4, #0]
 8017b1a:	f000 000f 	and.w	r0, r0, #15
 8017b1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017b22:	6020      	str	r0, [r4, #0]
 8017b24:	e7c3      	b.n	8017aae <__hexnan+0x7a>
 8017b26:	2508      	movs	r5, #8
 8017b28:	e7c1      	b.n	8017aae <__hexnan+0x7a>
 8017b2a:	9b01      	ldr	r3, [sp, #4]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d0df      	beq.n	8017af0 <__hexnan+0xbc>
 8017b30:	f04f 32ff 	mov.w	r2, #4294967295
 8017b34:	f1c3 0320 	rsb	r3, r3, #32
 8017b38:	fa22 f303 	lsr.w	r3, r2, r3
 8017b3c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017b40:	401a      	ands	r2, r3
 8017b42:	f847 2c04 	str.w	r2, [r7, #-4]
 8017b46:	e7d3      	b.n	8017af0 <__hexnan+0xbc>
 8017b48:	3e04      	subs	r6, #4
 8017b4a:	e7d1      	b.n	8017af0 <__hexnan+0xbc>
 8017b4c:	2004      	movs	r0, #4
 8017b4e:	b007      	add	sp, #28
 8017b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b54 <__locale_ctype_ptr_l>:
 8017b54:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017b58:	4770      	bx	lr

08017b5a <__localeconv_l>:
 8017b5a:	30f0      	adds	r0, #240	; 0xf0
 8017b5c:	4770      	bx	lr
	...

08017b60 <_localeconv_r>:
 8017b60:	4b04      	ldr	r3, [pc, #16]	; (8017b74 <_localeconv_r+0x14>)
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	6a18      	ldr	r0, [r3, #32]
 8017b66:	4b04      	ldr	r3, [pc, #16]	; (8017b78 <_localeconv_r+0x18>)
 8017b68:	2800      	cmp	r0, #0
 8017b6a:	bf08      	it	eq
 8017b6c:	4618      	moveq	r0, r3
 8017b6e:	30f0      	adds	r0, #240	; 0xf0
 8017b70:	4770      	bx	lr
 8017b72:	bf00      	nop
 8017b74:	20000184 	.word	0x20000184
 8017b78:	200001e8 	.word	0x200001e8

08017b7c <__ascii_mbtowc>:
 8017b7c:	b082      	sub	sp, #8
 8017b7e:	b901      	cbnz	r1, 8017b82 <__ascii_mbtowc+0x6>
 8017b80:	a901      	add	r1, sp, #4
 8017b82:	b142      	cbz	r2, 8017b96 <__ascii_mbtowc+0x1a>
 8017b84:	b14b      	cbz	r3, 8017b9a <__ascii_mbtowc+0x1e>
 8017b86:	7813      	ldrb	r3, [r2, #0]
 8017b88:	600b      	str	r3, [r1, #0]
 8017b8a:	7812      	ldrb	r2, [r2, #0]
 8017b8c:	1c10      	adds	r0, r2, #0
 8017b8e:	bf18      	it	ne
 8017b90:	2001      	movne	r0, #1
 8017b92:	b002      	add	sp, #8
 8017b94:	4770      	bx	lr
 8017b96:	4610      	mov	r0, r2
 8017b98:	e7fb      	b.n	8017b92 <__ascii_mbtowc+0x16>
 8017b9a:	f06f 0001 	mvn.w	r0, #1
 8017b9e:	e7f8      	b.n	8017b92 <__ascii_mbtowc+0x16>

08017ba0 <__malloc_lock>:
 8017ba0:	4770      	bx	lr

08017ba2 <__malloc_unlock>:
 8017ba2:	4770      	bx	lr

08017ba4 <_Balloc>:
 8017ba4:	b570      	push	{r4, r5, r6, lr}
 8017ba6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017ba8:	4604      	mov	r4, r0
 8017baa:	460e      	mov	r6, r1
 8017bac:	b93d      	cbnz	r5, 8017bbe <_Balloc+0x1a>
 8017bae:	2010      	movs	r0, #16
 8017bb0:	f7fd f800 	bl	8014bb4 <malloc>
 8017bb4:	6260      	str	r0, [r4, #36]	; 0x24
 8017bb6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017bba:	6005      	str	r5, [r0, #0]
 8017bbc:	60c5      	str	r5, [r0, #12]
 8017bbe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017bc0:	68eb      	ldr	r3, [r5, #12]
 8017bc2:	b183      	cbz	r3, 8017be6 <_Balloc+0x42>
 8017bc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017bc6:	68db      	ldr	r3, [r3, #12]
 8017bc8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017bcc:	b9b8      	cbnz	r0, 8017bfe <_Balloc+0x5a>
 8017bce:	2101      	movs	r1, #1
 8017bd0:	fa01 f506 	lsl.w	r5, r1, r6
 8017bd4:	1d6a      	adds	r2, r5, #5
 8017bd6:	0092      	lsls	r2, r2, #2
 8017bd8:	4620      	mov	r0, r4
 8017bda:	f000 fbe2 	bl	80183a2 <_calloc_r>
 8017bde:	b160      	cbz	r0, 8017bfa <_Balloc+0x56>
 8017be0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017be4:	e00e      	b.n	8017c04 <_Balloc+0x60>
 8017be6:	2221      	movs	r2, #33	; 0x21
 8017be8:	2104      	movs	r1, #4
 8017bea:	4620      	mov	r0, r4
 8017bec:	f000 fbd9 	bl	80183a2 <_calloc_r>
 8017bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017bf2:	60e8      	str	r0, [r5, #12]
 8017bf4:	68db      	ldr	r3, [r3, #12]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d1e4      	bne.n	8017bc4 <_Balloc+0x20>
 8017bfa:	2000      	movs	r0, #0
 8017bfc:	bd70      	pop	{r4, r5, r6, pc}
 8017bfe:	6802      	ldr	r2, [r0, #0]
 8017c00:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017c04:	2300      	movs	r3, #0
 8017c06:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017c0a:	e7f7      	b.n	8017bfc <_Balloc+0x58>

08017c0c <_Bfree>:
 8017c0c:	b570      	push	{r4, r5, r6, lr}
 8017c0e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017c10:	4606      	mov	r6, r0
 8017c12:	460d      	mov	r5, r1
 8017c14:	b93c      	cbnz	r4, 8017c26 <_Bfree+0x1a>
 8017c16:	2010      	movs	r0, #16
 8017c18:	f7fc ffcc 	bl	8014bb4 <malloc>
 8017c1c:	6270      	str	r0, [r6, #36]	; 0x24
 8017c1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017c22:	6004      	str	r4, [r0, #0]
 8017c24:	60c4      	str	r4, [r0, #12]
 8017c26:	b13d      	cbz	r5, 8017c38 <_Bfree+0x2c>
 8017c28:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017c2a:	686a      	ldr	r2, [r5, #4]
 8017c2c:	68db      	ldr	r3, [r3, #12]
 8017c2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017c32:	6029      	str	r1, [r5, #0]
 8017c34:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017c38:	bd70      	pop	{r4, r5, r6, pc}

08017c3a <__multadd>:
 8017c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c3e:	690d      	ldr	r5, [r1, #16]
 8017c40:	461f      	mov	r7, r3
 8017c42:	4606      	mov	r6, r0
 8017c44:	460c      	mov	r4, r1
 8017c46:	f101 0c14 	add.w	ip, r1, #20
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	f8dc 0000 	ldr.w	r0, [ip]
 8017c50:	b281      	uxth	r1, r0
 8017c52:	fb02 7101 	mla	r1, r2, r1, r7
 8017c56:	0c0f      	lsrs	r7, r1, #16
 8017c58:	0c00      	lsrs	r0, r0, #16
 8017c5a:	fb02 7000 	mla	r0, r2, r0, r7
 8017c5e:	b289      	uxth	r1, r1
 8017c60:	3301      	adds	r3, #1
 8017c62:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8017c66:	429d      	cmp	r5, r3
 8017c68:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017c6c:	f84c 1b04 	str.w	r1, [ip], #4
 8017c70:	dcec      	bgt.n	8017c4c <__multadd+0x12>
 8017c72:	b1d7      	cbz	r7, 8017caa <__multadd+0x70>
 8017c74:	68a3      	ldr	r3, [r4, #8]
 8017c76:	42ab      	cmp	r3, r5
 8017c78:	dc12      	bgt.n	8017ca0 <__multadd+0x66>
 8017c7a:	6861      	ldr	r1, [r4, #4]
 8017c7c:	4630      	mov	r0, r6
 8017c7e:	3101      	adds	r1, #1
 8017c80:	f7ff ff90 	bl	8017ba4 <_Balloc>
 8017c84:	6922      	ldr	r2, [r4, #16]
 8017c86:	3202      	adds	r2, #2
 8017c88:	f104 010c 	add.w	r1, r4, #12
 8017c8c:	4680      	mov	r8, r0
 8017c8e:	0092      	lsls	r2, r2, #2
 8017c90:	300c      	adds	r0, #12
 8017c92:	f7fc ff9f 	bl	8014bd4 <memcpy>
 8017c96:	4621      	mov	r1, r4
 8017c98:	4630      	mov	r0, r6
 8017c9a:	f7ff ffb7 	bl	8017c0c <_Bfree>
 8017c9e:	4644      	mov	r4, r8
 8017ca0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017ca4:	3501      	adds	r5, #1
 8017ca6:	615f      	str	r7, [r3, #20]
 8017ca8:	6125      	str	r5, [r4, #16]
 8017caa:	4620      	mov	r0, r4
 8017cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017cb0 <__s2b>:
 8017cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017cb4:	460c      	mov	r4, r1
 8017cb6:	4615      	mov	r5, r2
 8017cb8:	461f      	mov	r7, r3
 8017cba:	2209      	movs	r2, #9
 8017cbc:	3308      	adds	r3, #8
 8017cbe:	4606      	mov	r6, r0
 8017cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8017cc4:	2100      	movs	r1, #0
 8017cc6:	2201      	movs	r2, #1
 8017cc8:	429a      	cmp	r2, r3
 8017cca:	db20      	blt.n	8017d0e <__s2b+0x5e>
 8017ccc:	4630      	mov	r0, r6
 8017cce:	f7ff ff69 	bl	8017ba4 <_Balloc>
 8017cd2:	9b08      	ldr	r3, [sp, #32]
 8017cd4:	6143      	str	r3, [r0, #20]
 8017cd6:	2d09      	cmp	r5, #9
 8017cd8:	f04f 0301 	mov.w	r3, #1
 8017cdc:	6103      	str	r3, [r0, #16]
 8017cde:	dd19      	ble.n	8017d14 <__s2b+0x64>
 8017ce0:	f104 0809 	add.w	r8, r4, #9
 8017ce4:	46c1      	mov	r9, r8
 8017ce6:	442c      	add	r4, r5
 8017ce8:	f819 3b01 	ldrb.w	r3, [r9], #1
 8017cec:	4601      	mov	r1, r0
 8017cee:	3b30      	subs	r3, #48	; 0x30
 8017cf0:	220a      	movs	r2, #10
 8017cf2:	4630      	mov	r0, r6
 8017cf4:	f7ff ffa1 	bl	8017c3a <__multadd>
 8017cf8:	45a1      	cmp	r9, r4
 8017cfa:	d1f5      	bne.n	8017ce8 <__s2b+0x38>
 8017cfc:	eb08 0405 	add.w	r4, r8, r5
 8017d00:	3c08      	subs	r4, #8
 8017d02:	1b2d      	subs	r5, r5, r4
 8017d04:	1963      	adds	r3, r4, r5
 8017d06:	42bb      	cmp	r3, r7
 8017d08:	db07      	blt.n	8017d1a <__s2b+0x6a>
 8017d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d0e:	0052      	lsls	r2, r2, #1
 8017d10:	3101      	adds	r1, #1
 8017d12:	e7d9      	b.n	8017cc8 <__s2b+0x18>
 8017d14:	340a      	adds	r4, #10
 8017d16:	2509      	movs	r5, #9
 8017d18:	e7f3      	b.n	8017d02 <__s2b+0x52>
 8017d1a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017d1e:	4601      	mov	r1, r0
 8017d20:	3b30      	subs	r3, #48	; 0x30
 8017d22:	220a      	movs	r2, #10
 8017d24:	4630      	mov	r0, r6
 8017d26:	f7ff ff88 	bl	8017c3a <__multadd>
 8017d2a:	e7eb      	b.n	8017d04 <__s2b+0x54>

08017d2c <__hi0bits>:
 8017d2c:	0c02      	lsrs	r2, r0, #16
 8017d2e:	0412      	lsls	r2, r2, #16
 8017d30:	4603      	mov	r3, r0
 8017d32:	b9b2      	cbnz	r2, 8017d62 <__hi0bits+0x36>
 8017d34:	0403      	lsls	r3, r0, #16
 8017d36:	2010      	movs	r0, #16
 8017d38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017d3c:	bf04      	itt	eq
 8017d3e:	021b      	lsleq	r3, r3, #8
 8017d40:	3008      	addeq	r0, #8
 8017d42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017d46:	bf04      	itt	eq
 8017d48:	011b      	lsleq	r3, r3, #4
 8017d4a:	3004      	addeq	r0, #4
 8017d4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017d50:	bf04      	itt	eq
 8017d52:	009b      	lsleq	r3, r3, #2
 8017d54:	3002      	addeq	r0, #2
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	db06      	blt.n	8017d68 <__hi0bits+0x3c>
 8017d5a:	005b      	lsls	r3, r3, #1
 8017d5c:	d503      	bpl.n	8017d66 <__hi0bits+0x3a>
 8017d5e:	3001      	adds	r0, #1
 8017d60:	4770      	bx	lr
 8017d62:	2000      	movs	r0, #0
 8017d64:	e7e8      	b.n	8017d38 <__hi0bits+0xc>
 8017d66:	2020      	movs	r0, #32
 8017d68:	4770      	bx	lr

08017d6a <__lo0bits>:
 8017d6a:	6803      	ldr	r3, [r0, #0]
 8017d6c:	f013 0207 	ands.w	r2, r3, #7
 8017d70:	4601      	mov	r1, r0
 8017d72:	d00b      	beq.n	8017d8c <__lo0bits+0x22>
 8017d74:	07da      	lsls	r2, r3, #31
 8017d76:	d423      	bmi.n	8017dc0 <__lo0bits+0x56>
 8017d78:	0798      	lsls	r0, r3, #30
 8017d7a:	bf49      	itett	mi
 8017d7c:	085b      	lsrmi	r3, r3, #1
 8017d7e:	089b      	lsrpl	r3, r3, #2
 8017d80:	2001      	movmi	r0, #1
 8017d82:	600b      	strmi	r3, [r1, #0]
 8017d84:	bf5c      	itt	pl
 8017d86:	600b      	strpl	r3, [r1, #0]
 8017d88:	2002      	movpl	r0, #2
 8017d8a:	4770      	bx	lr
 8017d8c:	b298      	uxth	r0, r3
 8017d8e:	b9a8      	cbnz	r0, 8017dbc <__lo0bits+0x52>
 8017d90:	0c1b      	lsrs	r3, r3, #16
 8017d92:	2010      	movs	r0, #16
 8017d94:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017d98:	bf04      	itt	eq
 8017d9a:	0a1b      	lsreq	r3, r3, #8
 8017d9c:	3008      	addeq	r0, #8
 8017d9e:	071a      	lsls	r2, r3, #28
 8017da0:	bf04      	itt	eq
 8017da2:	091b      	lsreq	r3, r3, #4
 8017da4:	3004      	addeq	r0, #4
 8017da6:	079a      	lsls	r2, r3, #30
 8017da8:	bf04      	itt	eq
 8017daa:	089b      	lsreq	r3, r3, #2
 8017dac:	3002      	addeq	r0, #2
 8017dae:	07da      	lsls	r2, r3, #31
 8017db0:	d402      	bmi.n	8017db8 <__lo0bits+0x4e>
 8017db2:	085b      	lsrs	r3, r3, #1
 8017db4:	d006      	beq.n	8017dc4 <__lo0bits+0x5a>
 8017db6:	3001      	adds	r0, #1
 8017db8:	600b      	str	r3, [r1, #0]
 8017dba:	4770      	bx	lr
 8017dbc:	4610      	mov	r0, r2
 8017dbe:	e7e9      	b.n	8017d94 <__lo0bits+0x2a>
 8017dc0:	2000      	movs	r0, #0
 8017dc2:	4770      	bx	lr
 8017dc4:	2020      	movs	r0, #32
 8017dc6:	4770      	bx	lr

08017dc8 <__i2b>:
 8017dc8:	b510      	push	{r4, lr}
 8017dca:	460c      	mov	r4, r1
 8017dcc:	2101      	movs	r1, #1
 8017dce:	f7ff fee9 	bl	8017ba4 <_Balloc>
 8017dd2:	2201      	movs	r2, #1
 8017dd4:	6144      	str	r4, [r0, #20]
 8017dd6:	6102      	str	r2, [r0, #16]
 8017dd8:	bd10      	pop	{r4, pc}

08017dda <__multiply>:
 8017dda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dde:	4614      	mov	r4, r2
 8017de0:	690a      	ldr	r2, [r1, #16]
 8017de2:	6923      	ldr	r3, [r4, #16]
 8017de4:	429a      	cmp	r2, r3
 8017de6:	bfb8      	it	lt
 8017de8:	460b      	movlt	r3, r1
 8017dea:	4688      	mov	r8, r1
 8017dec:	bfbc      	itt	lt
 8017dee:	46a0      	movlt	r8, r4
 8017df0:	461c      	movlt	r4, r3
 8017df2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017df6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017dfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017dfe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017e02:	eb07 0609 	add.w	r6, r7, r9
 8017e06:	42b3      	cmp	r3, r6
 8017e08:	bfb8      	it	lt
 8017e0a:	3101      	addlt	r1, #1
 8017e0c:	f7ff feca 	bl	8017ba4 <_Balloc>
 8017e10:	f100 0514 	add.w	r5, r0, #20
 8017e14:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017e18:	462b      	mov	r3, r5
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	4573      	cmp	r3, lr
 8017e1e:	d316      	bcc.n	8017e4e <__multiply+0x74>
 8017e20:	f104 0214 	add.w	r2, r4, #20
 8017e24:	f108 0114 	add.w	r1, r8, #20
 8017e28:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017e2c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017e30:	9300      	str	r3, [sp, #0]
 8017e32:	9b00      	ldr	r3, [sp, #0]
 8017e34:	9201      	str	r2, [sp, #4]
 8017e36:	4293      	cmp	r3, r2
 8017e38:	d80c      	bhi.n	8017e54 <__multiply+0x7a>
 8017e3a:	2e00      	cmp	r6, #0
 8017e3c:	dd03      	ble.n	8017e46 <__multiply+0x6c>
 8017e3e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d05d      	beq.n	8017f02 <__multiply+0x128>
 8017e46:	6106      	str	r6, [r0, #16]
 8017e48:	b003      	add	sp, #12
 8017e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e4e:	f843 2b04 	str.w	r2, [r3], #4
 8017e52:	e7e3      	b.n	8017e1c <__multiply+0x42>
 8017e54:	f8b2 b000 	ldrh.w	fp, [r2]
 8017e58:	f1bb 0f00 	cmp.w	fp, #0
 8017e5c:	d023      	beq.n	8017ea6 <__multiply+0xcc>
 8017e5e:	4689      	mov	r9, r1
 8017e60:	46ac      	mov	ip, r5
 8017e62:	f04f 0800 	mov.w	r8, #0
 8017e66:	f859 4b04 	ldr.w	r4, [r9], #4
 8017e6a:	f8dc a000 	ldr.w	sl, [ip]
 8017e6e:	b2a3      	uxth	r3, r4
 8017e70:	fa1f fa8a 	uxth.w	sl, sl
 8017e74:	fb0b a303 	mla	r3, fp, r3, sl
 8017e78:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017e7c:	f8dc 4000 	ldr.w	r4, [ip]
 8017e80:	4443      	add	r3, r8
 8017e82:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017e86:	fb0b 840a 	mla	r4, fp, sl, r8
 8017e8a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017e8e:	46e2      	mov	sl, ip
 8017e90:	b29b      	uxth	r3, r3
 8017e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017e96:	454f      	cmp	r7, r9
 8017e98:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017e9c:	f84a 3b04 	str.w	r3, [sl], #4
 8017ea0:	d82b      	bhi.n	8017efa <__multiply+0x120>
 8017ea2:	f8cc 8004 	str.w	r8, [ip, #4]
 8017ea6:	9b01      	ldr	r3, [sp, #4]
 8017ea8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017eac:	3204      	adds	r2, #4
 8017eae:	f1ba 0f00 	cmp.w	sl, #0
 8017eb2:	d020      	beq.n	8017ef6 <__multiply+0x11c>
 8017eb4:	682b      	ldr	r3, [r5, #0]
 8017eb6:	4689      	mov	r9, r1
 8017eb8:	46a8      	mov	r8, r5
 8017eba:	f04f 0b00 	mov.w	fp, #0
 8017ebe:	f8b9 c000 	ldrh.w	ip, [r9]
 8017ec2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017ec6:	fb0a 440c 	mla	r4, sl, ip, r4
 8017eca:	445c      	add	r4, fp
 8017ecc:	46c4      	mov	ip, r8
 8017ece:	b29b      	uxth	r3, r3
 8017ed0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017ed4:	f84c 3b04 	str.w	r3, [ip], #4
 8017ed8:	f859 3b04 	ldr.w	r3, [r9], #4
 8017edc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017ee0:	0c1b      	lsrs	r3, r3, #16
 8017ee2:	fb0a b303 	mla	r3, sl, r3, fp
 8017ee6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017eea:	454f      	cmp	r7, r9
 8017eec:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017ef0:	d805      	bhi.n	8017efe <__multiply+0x124>
 8017ef2:	f8c8 3004 	str.w	r3, [r8, #4]
 8017ef6:	3504      	adds	r5, #4
 8017ef8:	e79b      	b.n	8017e32 <__multiply+0x58>
 8017efa:	46d4      	mov	ip, sl
 8017efc:	e7b3      	b.n	8017e66 <__multiply+0x8c>
 8017efe:	46e0      	mov	r8, ip
 8017f00:	e7dd      	b.n	8017ebe <__multiply+0xe4>
 8017f02:	3e01      	subs	r6, #1
 8017f04:	e799      	b.n	8017e3a <__multiply+0x60>
	...

08017f08 <__pow5mult>:
 8017f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f0c:	4615      	mov	r5, r2
 8017f0e:	f012 0203 	ands.w	r2, r2, #3
 8017f12:	4606      	mov	r6, r0
 8017f14:	460f      	mov	r7, r1
 8017f16:	d007      	beq.n	8017f28 <__pow5mult+0x20>
 8017f18:	3a01      	subs	r2, #1
 8017f1a:	4c21      	ldr	r4, [pc, #132]	; (8017fa0 <__pow5mult+0x98>)
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017f22:	f7ff fe8a 	bl	8017c3a <__multadd>
 8017f26:	4607      	mov	r7, r0
 8017f28:	10ad      	asrs	r5, r5, #2
 8017f2a:	d035      	beq.n	8017f98 <__pow5mult+0x90>
 8017f2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017f2e:	b93c      	cbnz	r4, 8017f40 <__pow5mult+0x38>
 8017f30:	2010      	movs	r0, #16
 8017f32:	f7fc fe3f 	bl	8014bb4 <malloc>
 8017f36:	6270      	str	r0, [r6, #36]	; 0x24
 8017f38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017f3c:	6004      	str	r4, [r0, #0]
 8017f3e:	60c4      	str	r4, [r0, #12]
 8017f40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017f44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017f48:	b94c      	cbnz	r4, 8017f5e <__pow5mult+0x56>
 8017f4a:	f240 2171 	movw	r1, #625	; 0x271
 8017f4e:	4630      	mov	r0, r6
 8017f50:	f7ff ff3a 	bl	8017dc8 <__i2b>
 8017f54:	2300      	movs	r3, #0
 8017f56:	f8c8 0008 	str.w	r0, [r8, #8]
 8017f5a:	4604      	mov	r4, r0
 8017f5c:	6003      	str	r3, [r0, #0]
 8017f5e:	f04f 0800 	mov.w	r8, #0
 8017f62:	07eb      	lsls	r3, r5, #31
 8017f64:	d50a      	bpl.n	8017f7c <__pow5mult+0x74>
 8017f66:	4639      	mov	r1, r7
 8017f68:	4622      	mov	r2, r4
 8017f6a:	4630      	mov	r0, r6
 8017f6c:	f7ff ff35 	bl	8017dda <__multiply>
 8017f70:	4639      	mov	r1, r7
 8017f72:	4681      	mov	r9, r0
 8017f74:	4630      	mov	r0, r6
 8017f76:	f7ff fe49 	bl	8017c0c <_Bfree>
 8017f7a:	464f      	mov	r7, r9
 8017f7c:	106d      	asrs	r5, r5, #1
 8017f7e:	d00b      	beq.n	8017f98 <__pow5mult+0x90>
 8017f80:	6820      	ldr	r0, [r4, #0]
 8017f82:	b938      	cbnz	r0, 8017f94 <__pow5mult+0x8c>
 8017f84:	4622      	mov	r2, r4
 8017f86:	4621      	mov	r1, r4
 8017f88:	4630      	mov	r0, r6
 8017f8a:	f7ff ff26 	bl	8017dda <__multiply>
 8017f8e:	6020      	str	r0, [r4, #0]
 8017f90:	f8c0 8000 	str.w	r8, [r0]
 8017f94:	4604      	mov	r4, r0
 8017f96:	e7e4      	b.n	8017f62 <__pow5mult+0x5a>
 8017f98:	4638      	mov	r0, r7
 8017f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f9e:	bf00      	nop
 8017fa0:	0801acf0 	.word	0x0801acf0

08017fa4 <__lshift>:
 8017fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fa8:	460c      	mov	r4, r1
 8017faa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017fae:	6923      	ldr	r3, [r4, #16]
 8017fb0:	6849      	ldr	r1, [r1, #4]
 8017fb2:	eb0a 0903 	add.w	r9, sl, r3
 8017fb6:	68a3      	ldr	r3, [r4, #8]
 8017fb8:	4607      	mov	r7, r0
 8017fba:	4616      	mov	r6, r2
 8017fbc:	f109 0501 	add.w	r5, r9, #1
 8017fc0:	42ab      	cmp	r3, r5
 8017fc2:	db32      	blt.n	801802a <__lshift+0x86>
 8017fc4:	4638      	mov	r0, r7
 8017fc6:	f7ff fded 	bl	8017ba4 <_Balloc>
 8017fca:	2300      	movs	r3, #0
 8017fcc:	4680      	mov	r8, r0
 8017fce:	f100 0114 	add.w	r1, r0, #20
 8017fd2:	461a      	mov	r2, r3
 8017fd4:	4553      	cmp	r3, sl
 8017fd6:	db2b      	blt.n	8018030 <__lshift+0x8c>
 8017fd8:	6920      	ldr	r0, [r4, #16]
 8017fda:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017fde:	f104 0314 	add.w	r3, r4, #20
 8017fe2:	f016 021f 	ands.w	r2, r6, #31
 8017fe6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017fea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017fee:	d025      	beq.n	801803c <__lshift+0x98>
 8017ff0:	f1c2 0e20 	rsb	lr, r2, #32
 8017ff4:	2000      	movs	r0, #0
 8017ff6:	681e      	ldr	r6, [r3, #0]
 8017ff8:	468a      	mov	sl, r1
 8017ffa:	4096      	lsls	r6, r2
 8017ffc:	4330      	orrs	r0, r6
 8017ffe:	f84a 0b04 	str.w	r0, [sl], #4
 8018002:	f853 0b04 	ldr.w	r0, [r3], #4
 8018006:	459c      	cmp	ip, r3
 8018008:	fa20 f00e 	lsr.w	r0, r0, lr
 801800c:	d814      	bhi.n	8018038 <__lshift+0x94>
 801800e:	6048      	str	r0, [r1, #4]
 8018010:	b108      	cbz	r0, 8018016 <__lshift+0x72>
 8018012:	f109 0502 	add.w	r5, r9, #2
 8018016:	3d01      	subs	r5, #1
 8018018:	4638      	mov	r0, r7
 801801a:	f8c8 5010 	str.w	r5, [r8, #16]
 801801e:	4621      	mov	r1, r4
 8018020:	f7ff fdf4 	bl	8017c0c <_Bfree>
 8018024:	4640      	mov	r0, r8
 8018026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801802a:	3101      	adds	r1, #1
 801802c:	005b      	lsls	r3, r3, #1
 801802e:	e7c7      	b.n	8017fc0 <__lshift+0x1c>
 8018030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018034:	3301      	adds	r3, #1
 8018036:	e7cd      	b.n	8017fd4 <__lshift+0x30>
 8018038:	4651      	mov	r1, sl
 801803a:	e7dc      	b.n	8017ff6 <__lshift+0x52>
 801803c:	3904      	subs	r1, #4
 801803e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018042:	f841 2f04 	str.w	r2, [r1, #4]!
 8018046:	459c      	cmp	ip, r3
 8018048:	d8f9      	bhi.n	801803e <__lshift+0x9a>
 801804a:	e7e4      	b.n	8018016 <__lshift+0x72>

0801804c <__mcmp>:
 801804c:	6903      	ldr	r3, [r0, #16]
 801804e:	690a      	ldr	r2, [r1, #16]
 8018050:	1a9b      	subs	r3, r3, r2
 8018052:	b530      	push	{r4, r5, lr}
 8018054:	d10c      	bne.n	8018070 <__mcmp+0x24>
 8018056:	0092      	lsls	r2, r2, #2
 8018058:	3014      	adds	r0, #20
 801805a:	3114      	adds	r1, #20
 801805c:	1884      	adds	r4, r0, r2
 801805e:	4411      	add	r1, r2
 8018060:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018064:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018068:	4295      	cmp	r5, r2
 801806a:	d003      	beq.n	8018074 <__mcmp+0x28>
 801806c:	d305      	bcc.n	801807a <__mcmp+0x2e>
 801806e:	2301      	movs	r3, #1
 8018070:	4618      	mov	r0, r3
 8018072:	bd30      	pop	{r4, r5, pc}
 8018074:	42a0      	cmp	r0, r4
 8018076:	d3f3      	bcc.n	8018060 <__mcmp+0x14>
 8018078:	e7fa      	b.n	8018070 <__mcmp+0x24>
 801807a:	f04f 33ff 	mov.w	r3, #4294967295
 801807e:	e7f7      	b.n	8018070 <__mcmp+0x24>

08018080 <__mdiff>:
 8018080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018084:	460d      	mov	r5, r1
 8018086:	4607      	mov	r7, r0
 8018088:	4611      	mov	r1, r2
 801808a:	4628      	mov	r0, r5
 801808c:	4614      	mov	r4, r2
 801808e:	f7ff ffdd 	bl	801804c <__mcmp>
 8018092:	1e06      	subs	r6, r0, #0
 8018094:	d108      	bne.n	80180a8 <__mdiff+0x28>
 8018096:	4631      	mov	r1, r6
 8018098:	4638      	mov	r0, r7
 801809a:	f7ff fd83 	bl	8017ba4 <_Balloc>
 801809e:	2301      	movs	r3, #1
 80180a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80180a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180a8:	bfa4      	itt	ge
 80180aa:	4623      	movge	r3, r4
 80180ac:	462c      	movge	r4, r5
 80180ae:	4638      	mov	r0, r7
 80180b0:	6861      	ldr	r1, [r4, #4]
 80180b2:	bfa6      	itte	ge
 80180b4:	461d      	movge	r5, r3
 80180b6:	2600      	movge	r6, #0
 80180b8:	2601      	movlt	r6, #1
 80180ba:	f7ff fd73 	bl	8017ba4 <_Balloc>
 80180be:	692b      	ldr	r3, [r5, #16]
 80180c0:	60c6      	str	r6, [r0, #12]
 80180c2:	6926      	ldr	r6, [r4, #16]
 80180c4:	f105 0914 	add.w	r9, r5, #20
 80180c8:	f104 0214 	add.w	r2, r4, #20
 80180cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80180d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80180d4:	f100 0514 	add.w	r5, r0, #20
 80180d8:	f04f 0e00 	mov.w	lr, #0
 80180dc:	f852 ab04 	ldr.w	sl, [r2], #4
 80180e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80180e4:	fa1e f18a 	uxtah	r1, lr, sl
 80180e8:	b2a3      	uxth	r3, r4
 80180ea:	1ac9      	subs	r1, r1, r3
 80180ec:	0c23      	lsrs	r3, r4, #16
 80180ee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80180f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80180f6:	b289      	uxth	r1, r1
 80180f8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80180fc:	45c8      	cmp	r8, r9
 80180fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018102:	4694      	mov	ip, r2
 8018104:	f845 3b04 	str.w	r3, [r5], #4
 8018108:	d8e8      	bhi.n	80180dc <__mdiff+0x5c>
 801810a:	45bc      	cmp	ip, r7
 801810c:	d304      	bcc.n	8018118 <__mdiff+0x98>
 801810e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018112:	b183      	cbz	r3, 8018136 <__mdiff+0xb6>
 8018114:	6106      	str	r6, [r0, #16]
 8018116:	e7c5      	b.n	80180a4 <__mdiff+0x24>
 8018118:	f85c 1b04 	ldr.w	r1, [ip], #4
 801811c:	fa1e f381 	uxtah	r3, lr, r1
 8018120:	141a      	asrs	r2, r3, #16
 8018122:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018126:	b29b      	uxth	r3, r3
 8018128:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801812c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018130:	f845 3b04 	str.w	r3, [r5], #4
 8018134:	e7e9      	b.n	801810a <__mdiff+0x8a>
 8018136:	3e01      	subs	r6, #1
 8018138:	e7e9      	b.n	801810e <__mdiff+0x8e>
	...

0801813c <__ulp>:
 801813c:	4b12      	ldr	r3, [pc, #72]	; (8018188 <__ulp+0x4c>)
 801813e:	ee10 2a90 	vmov	r2, s1
 8018142:	401a      	ands	r2, r3
 8018144:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018148:	2b00      	cmp	r3, #0
 801814a:	dd04      	ble.n	8018156 <__ulp+0x1a>
 801814c:	2000      	movs	r0, #0
 801814e:	4619      	mov	r1, r3
 8018150:	ec41 0b10 	vmov	d0, r0, r1
 8018154:	4770      	bx	lr
 8018156:	425b      	negs	r3, r3
 8018158:	151b      	asrs	r3, r3, #20
 801815a:	2b13      	cmp	r3, #19
 801815c:	f04f 0000 	mov.w	r0, #0
 8018160:	f04f 0100 	mov.w	r1, #0
 8018164:	dc04      	bgt.n	8018170 <__ulp+0x34>
 8018166:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801816a:	fa42 f103 	asr.w	r1, r2, r3
 801816e:	e7ef      	b.n	8018150 <__ulp+0x14>
 8018170:	3b14      	subs	r3, #20
 8018172:	2b1e      	cmp	r3, #30
 8018174:	f04f 0201 	mov.w	r2, #1
 8018178:	bfda      	itte	le
 801817a:	f1c3 031f 	rsble	r3, r3, #31
 801817e:	fa02 f303 	lslle.w	r3, r2, r3
 8018182:	4613      	movgt	r3, r2
 8018184:	4618      	mov	r0, r3
 8018186:	e7e3      	b.n	8018150 <__ulp+0x14>
 8018188:	7ff00000 	.word	0x7ff00000

0801818c <__b2d>:
 801818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801818e:	6905      	ldr	r5, [r0, #16]
 8018190:	f100 0714 	add.w	r7, r0, #20
 8018194:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018198:	1f2e      	subs	r6, r5, #4
 801819a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801819e:	4620      	mov	r0, r4
 80181a0:	f7ff fdc4 	bl	8017d2c <__hi0bits>
 80181a4:	f1c0 0320 	rsb	r3, r0, #32
 80181a8:	280a      	cmp	r0, #10
 80181aa:	600b      	str	r3, [r1, #0]
 80181ac:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018224 <__b2d+0x98>
 80181b0:	dc14      	bgt.n	80181dc <__b2d+0x50>
 80181b2:	f1c0 0e0b 	rsb	lr, r0, #11
 80181b6:	fa24 f10e 	lsr.w	r1, r4, lr
 80181ba:	42b7      	cmp	r7, r6
 80181bc:	ea41 030c 	orr.w	r3, r1, ip
 80181c0:	bf34      	ite	cc
 80181c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80181c6:	2100      	movcs	r1, #0
 80181c8:	3015      	adds	r0, #21
 80181ca:	fa04 f000 	lsl.w	r0, r4, r0
 80181ce:	fa21 f10e 	lsr.w	r1, r1, lr
 80181d2:	ea40 0201 	orr.w	r2, r0, r1
 80181d6:	ec43 2b10 	vmov	d0, r2, r3
 80181da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181dc:	42b7      	cmp	r7, r6
 80181de:	bf3a      	itte	cc
 80181e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80181e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80181e8:	2100      	movcs	r1, #0
 80181ea:	380b      	subs	r0, #11
 80181ec:	d015      	beq.n	801821a <__b2d+0x8e>
 80181ee:	4084      	lsls	r4, r0
 80181f0:	f1c0 0520 	rsb	r5, r0, #32
 80181f4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80181f8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80181fc:	42be      	cmp	r6, r7
 80181fe:	fa21 fc05 	lsr.w	ip, r1, r5
 8018202:	ea44 030c 	orr.w	r3, r4, ip
 8018206:	bf8c      	ite	hi
 8018208:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801820c:	2400      	movls	r4, #0
 801820e:	fa01 f000 	lsl.w	r0, r1, r0
 8018212:	40ec      	lsrs	r4, r5
 8018214:	ea40 0204 	orr.w	r2, r0, r4
 8018218:	e7dd      	b.n	80181d6 <__b2d+0x4a>
 801821a:	ea44 030c 	orr.w	r3, r4, ip
 801821e:	460a      	mov	r2, r1
 8018220:	e7d9      	b.n	80181d6 <__b2d+0x4a>
 8018222:	bf00      	nop
 8018224:	3ff00000 	.word	0x3ff00000

08018228 <__d2b>:
 8018228:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801822c:	460e      	mov	r6, r1
 801822e:	2101      	movs	r1, #1
 8018230:	ec59 8b10 	vmov	r8, r9, d0
 8018234:	4615      	mov	r5, r2
 8018236:	f7ff fcb5 	bl	8017ba4 <_Balloc>
 801823a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801823e:	4607      	mov	r7, r0
 8018240:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018244:	bb34      	cbnz	r4, 8018294 <__d2b+0x6c>
 8018246:	9301      	str	r3, [sp, #4]
 8018248:	f1b8 0300 	subs.w	r3, r8, #0
 801824c:	d027      	beq.n	801829e <__d2b+0x76>
 801824e:	a802      	add	r0, sp, #8
 8018250:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018254:	f7ff fd89 	bl	8017d6a <__lo0bits>
 8018258:	9900      	ldr	r1, [sp, #0]
 801825a:	b1f0      	cbz	r0, 801829a <__d2b+0x72>
 801825c:	9a01      	ldr	r2, [sp, #4]
 801825e:	f1c0 0320 	rsb	r3, r0, #32
 8018262:	fa02 f303 	lsl.w	r3, r2, r3
 8018266:	430b      	orrs	r3, r1
 8018268:	40c2      	lsrs	r2, r0
 801826a:	617b      	str	r3, [r7, #20]
 801826c:	9201      	str	r2, [sp, #4]
 801826e:	9b01      	ldr	r3, [sp, #4]
 8018270:	61bb      	str	r3, [r7, #24]
 8018272:	2b00      	cmp	r3, #0
 8018274:	bf14      	ite	ne
 8018276:	2102      	movne	r1, #2
 8018278:	2101      	moveq	r1, #1
 801827a:	6139      	str	r1, [r7, #16]
 801827c:	b1c4      	cbz	r4, 80182b0 <__d2b+0x88>
 801827e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018282:	4404      	add	r4, r0
 8018284:	6034      	str	r4, [r6, #0]
 8018286:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801828a:	6028      	str	r0, [r5, #0]
 801828c:	4638      	mov	r0, r7
 801828e:	b003      	add	sp, #12
 8018290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018298:	e7d5      	b.n	8018246 <__d2b+0x1e>
 801829a:	6179      	str	r1, [r7, #20]
 801829c:	e7e7      	b.n	801826e <__d2b+0x46>
 801829e:	a801      	add	r0, sp, #4
 80182a0:	f7ff fd63 	bl	8017d6a <__lo0bits>
 80182a4:	9b01      	ldr	r3, [sp, #4]
 80182a6:	617b      	str	r3, [r7, #20]
 80182a8:	2101      	movs	r1, #1
 80182aa:	6139      	str	r1, [r7, #16]
 80182ac:	3020      	adds	r0, #32
 80182ae:	e7e5      	b.n	801827c <__d2b+0x54>
 80182b0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80182b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80182b8:	6030      	str	r0, [r6, #0]
 80182ba:	6918      	ldr	r0, [r3, #16]
 80182bc:	f7ff fd36 	bl	8017d2c <__hi0bits>
 80182c0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80182c4:	e7e1      	b.n	801828a <__d2b+0x62>

080182c6 <__ratio>:
 80182c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182ca:	4688      	mov	r8, r1
 80182cc:	4669      	mov	r1, sp
 80182ce:	4681      	mov	r9, r0
 80182d0:	f7ff ff5c 	bl	801818c <__b2d>
 80182d4:	a901      	add	r1, sp, #4
 80182d6:	4640      	mov	r0, r8
 80182d8:	ec57 6b10 	vmov	r6, r7, d0
 80182dc:	f7ff ff56 	bl	801818c <__b2d>
 80182e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80182e4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80182e8:	eba3 0c02 	sub.w	ip, r3, r2
 80182ec:	e9dd 3200 	ldrd	r3, r2, [sp]
 80182f0:	1a9b      	subs	r3, r3, r2
 80182f2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80182f6:	ec5b ab10 	vmov	sl, fp, d0
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	bfce      	itee	gt
 80182fe:	463a      	movgt	r2, r7
 8018300:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018304:	465a      	movle	r2, fp
 8018306:	4659      	mov	r1, fp
 8018308:	463d      	mov	r5, r7
 801830a:	bfd4      	ite	le
 801830c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018310:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018314:	4630      	mov	r0, r6
 8018316:	ee10 2a10 	vmov	r2, s0
 801831a:	460b      	mov	r3, r1
 801831c:	4629      	mov	r1, r5
 801831e:	f7e8 faa5 	bl	800086c <__aeabi_ddiv>
 8018322:	ec41 0b10 	vmov	d0, r0, r1
 8018326:	b003      	add	sp, #12
 8018328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801832c <__copybits>:
 801832c:	3901      	subs	r1, #1
 801832e:	b510      	push	{r4, lr}
 8018330:	1149      	asrs	r1, r1, #5
 8018332:	6914      	ldr	r4, [r2, #16]
 8018334:	3101      	adds	r1, #1
 8018336:	f102 0314 	add.w	r3, r2, #20
 801833a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801833e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018342:	42a3      	cmp	r3, r4
 8018344:	4602      	mov	r2, r0
 8018346:	d303      	bcc.n	8018350 <__copybits+0x24>
 8018348:	2300      	movs	r3, #0
 801834a:	428a      	cmp	r2, r1
 801834c:	d305      	bcc.n	801835a <__copybits+0x2e>
 801834e:	bd10      	pop	{r4, pc}
 8018350:	f853 2b04 	ldr.w	r2, [r3], #4
 8018354:	f840 2b04 	str.w	r2, [r0], #4
 8018358:	e7f3      	b.n	8018342 <__copybits+0x16>
 801835a:	f842 3b04 	str.w	r3, [r2], #4
 801835e:	e7f4      	b.n	801834a <__copybits+0x1e>

08018360 <__any_on>:
 8018360:	f100 0214 	add.w	r2, r0, #20
 8018364:	6900      	ldr	r0, [r0, #16]
 8018366:	114b      	asrs	r3, r1, #5
 8018368:	4298      	cmp	r0, r3
 801836a:	b510      	push	{r4, lr}
 801836c:	db11      	blt.n	8018392 <__any_on+0x32>
 801836e:	dd0a      	ble.n	8018386 <__any_on+0x26>
 8018370:	f011 011f 	ands.w	r1, r1, #31
 8018374:	d007      	beq.n	8018386 <__any_on+0x26>
 8018376:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801837a:	fa24 f001 	lsr.w	r0, r4, r1
 801837e:	fa00 f101 	lsl.w	r1, r0, r1
 8018382:	428c      	cmp	r4, r1
 8018384:	d10b      	bne.n	801839e <__any_on+0x3e>
 8018386:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801838a:	4293      	cmp	r3, r2
 801838c:	d803      	bhi.n	8018396 <__any_on+0x36>
 801838e:	2000      	movs	r0, #0
 8018390:	bd10      	pop	{r4, pc}
 8018392:	4603      	mov	r3, r0
 8018394:	e7f7      	b.n	8018386 <__any_on+0x26>
 8018396:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801839a:	2900      	cmp	r1, #0
 801839c:	d0f5      	beq.n	801838a <__any_on+0x2a>
 801839e:	2001      	movs	r0, #1
 80183a0:	e7f6      	b.n	8018390 <__any_on+0x30>

080183a2 <_calloc_r>:
 80183a2:	b538      	push	{r3, r4, r5, lr}
 80183a4:	fb02 f401 	mul.w	r4, r2, r1
 80183a8:	4621      	mov	r1, r4
 80183aa:	f7fc fc75 	bl	8014c98 <_malloc_r>
 80183ae:	4605      	mov	r5, r0
 80183b0:	b118      	cbz	r0, 80183ba <_calloc_r+0x18>
 80183b2:	4622      	mov	r2, r4
 80183b4:	2100      	movs	r1, #0
 80183b6:	f7fc fc18 	bl	8014bea <memset>
 80183ba:	4628      	mov	r0, r5
 80183bc:	bd38      	pop	{r3, r4, r5, pc}

080183be <__ssputs_r>:
 80183be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183c2:	688e      	ldr	r6, [r1, #8]
 80183c4:	429e      	cmp	r6, r3
 80183c6:	4682      	mov	sl, r0
 80183c8:	460c      	mov	r4, r1
 80183ca:	4690      	mov	r8, r2
 80183cc:	4699      	mov	r9, r3
 80183ce:	d837      	bhi.n	8018440 <__ssputs_r+0x82>
 80183d0:	898a      	ldrh	r2, [r1, #12]
 80183d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80183d6:	d031      	beq.n	801843c <__ssputs_r+0x7e>
 80183d8:	6825      	ldr	r5, [r4, #0]
 80183da:	6909      	ldr	r1, [r1, #16]
 80183dc:	1a6f      	subs	r7, r5, r1
 80183de:	6965      	ldr	r5, [r4, #20]
 80183e0:	2302      	movs	r3, #2
 80183e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80183e6:	fb95 f5f3 	sdiv	r5, r5, r3
 80183ea:	f109 0301 	add.w	r3, r9, #1
 80183ee:	443b      	add	r3, r7
 80183f0:	429d      	cmp	r5, r3
 80183f2:	bf38      	it	cc
 80183f4:	461d      	movcc	r5, r3
 80183f6:	0553      	lsls	r3, r2, #21
 80183f8:	d530      	bpl.n	801845c <__ssputs_r+0x9e>
 80183fa:	4629      	mov	r1, r5
 80183fc:	f7fc fc4c 	bl	8014c98 <_malloc_r>
 8018400:	4606      	mov	r6, r0
 8018402:	b950      	cbnz	r0, 801841a <__ssputs_r+0x5c>
 8018404:	230c      	movs	r3, #12
 8018406:	f8ca 3000 	str.w	r3, [sl]
 801840a:	89a3      	ldrh	r3, [r4, #12]
 801840c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018410:	81a3      	strh	r3, [r4, #12]
 8018412:	f04f 30ff 	mov.w	r0, #4294967295
 8018416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801841a:	463a      	mov	r2, r7
 801841c:	6921      	ldr	r1, [r4, #16]
 801841e:	f7fc fbd9 	bl	8014bd4 <memcpy>
 8018422:	89a3      	ldrh	r3, [r4, #12]
 8018424:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801842c:	81a3      	strh	r3, [r4, #12]
 801842e:	6126      	str	r6, [r4, #16]
 8018430:	6165      	str	r5, [r4, #20]
 8018432:	443e      	add	r6, r7
 8018434:	1bed      	subs	r5, r5, r7
 8018436:	6026      	str	r6, [r4, #0]
 8018438:	60a5      	str	r5, [r4, #8]
 801843a:	464e      	mov	r6, r9
 801843c:	454e      	cmp	r6, r9
 801843e:	d900      	bls.n	8018442 <__ssputs_r+0x84>
 8018440:	464e      	mov	r6, r9
 8018442:	4632      	mov	r2, r6
 8018444:	4641      	mov	r1, r8
 8018446:	6820      	ldr	r0, [r4, #0]
 8018448:	f000 f919 	bl	801867e <memmove>
 801844c:	68a3      	ldr	r3, [r4, #8]
 801844e:	1b9b      	subs	r3, r3, r6
 8018450:	60a3      	str	r3, [r4, #8]
 8018452:	6823      	ldr	r3, [r4, #0]
 8018454:	441e      	add	r6, r3
 8018456:	6026      	str	r6, [r4, #0]
 8018458:	2000      	movs	r0, #0
 801845a:	e7dc      	b.n	8018416 <__ssputs_r+0x58>
 801845c:	462a      	mov	r2, r5
 801845e:	f000 f927 	bl	80186b0 <_realloc_r>
 8018462:	4606      	mov	r6, r0
 8018464:	2800      	cmp	r0, #0
 8018466:	d1e2      	bne.n	801842e <__ssputs_r+0x70>
 8018468:	6921      	ldr	r1, [r4, #16]
 801846a:	4650      	mov	r0, sl
 801846c:	f7fc fbc6 	bl	8014bfc <_free_r>
 8018470:	e7c8      	b.n	8018404 <__ssputs_r+0x46>
	...

08018474 <_svfiprintf_r>:
 8018474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018478:	461d      	mov	r5, r3
 801847a:	898b      	ldrh	r3, [r1, #12]
 801847c:	061f      	lsls	r7, r3, #24
 801847e:	b09d      	sub	sp, #116	; 0x74
 8018480:	4680      	mov	r8, r0
 8018482:	460c      	mov	r4, r1
 8018484:	4616      	mov	r6, r2
 8018486:	d50f      	bpl.n	80184a8 <_svfiprintf_r+0x34>
 8018488:	690b      	ldr	r3, [r1, #16]
 801848a:	b96b      	cbnz	r3, 80184a8 <_svfiprintf_r+0x34>
 801848c:	2140      	movs	r1, #64	; 0x40
 801848e:	f7fc fc03 	bl	8014c98 <_malloc_r>
 8018492:	6020      	str	r0, [r4, #0]
 8018494:	6120      	str	r0, [r4, #16]
 8018496:	b928      	cbnz	r0, 80184a4 <_svfiprintf_r+0x30>
 8018498:	230c      	movs	r3, #12
 801849a:	f8c8 3000 	str.w	r3, [r8]
 801849e:	f04f 30ff 	mov.w	r0, #4294967295
 80184a2:	e0c8      	b.n	8018636 <_svfiprintf_r+0x1c2>
 80184a4:	2340      	movs	r3, #64	; 0x40
 80184a6:	6163      	str	r3, [r4, #20]
 80184a8:	2300      	movs	r3, #0
 80184aa:	9309      	str	r3, [sp, #36]	; 0x24
 80184ac:	2320      	movs	r3, #32
 80184ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80184b2:	2330      	movs	r3, #48	; 0x30
 80184b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80184b8:	9503      	str	r5, [sp, #12]
 80184ba:	f04f 0b01 	mov.w	fp, #1
 80184be:	4637      	mov	r7, r6
 80184c0:	463d      	mov	r5, r7
 80184c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80184c6:	b10b      	cbz	r3, 80184cc <_svfiprintf_r+0x58>
 80184c8:	2b25      	cmp	r3, #37	; 0x25
 80184ca:	d13e      	bne.n	801854a <_svfiprintf_r+0xd6>
 80184cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80184d0:	d00b      	beq.n	80184ea <_svfiprintf_r+0x76>
 80184d2:	4653      	mov	r3, sl
 80184d4:	4632      	mov	r2, r6
 80184d6:	4621      	mov	r1, r4
 80184d8:	4640      	mov	r0, r8
 80184da:	f7ff ff70 	bl	80183be <__ssputs_r>
 80184de:	3001      	adds	r0, #1
 80184e0:	f000 80a4 	beq.w	801862c <_svfiprintf_r+0x1b8>
 80184e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184e6:	4453      	add	r3, sl
 80184e8:	9309      	str	r3, [sp, #36]	; 0x24
 80184ea:	783b      	ldrb	r3, [r7, #0]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	f000 809d 	beq.w	801862c <_svfiprintf_r+0x1b8>
 80184f2:	2300      	movs	r3, #0
 80184f4:	f04f 32ff 	mov.w	r2, #4294967295
 80184f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80184fc:	9304      	str	r3, [sp, #16]
 80184fe:	9307      	str	r3, [sp, #28]
 8018500:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018504:	931a      	str	r3, [sp, #104]	; 0x68
 8018506:	462f      	mov	r7, r5
 8018508:	2205      	movs	r2, #5
 801850a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801850e:	4850      	ldr	r0, [pc, #320]	; (8018650 <_svfiprintf_r+0x1dc>)
 8018510:	f7e7 fe76 	bl	8000200 <memchr>
 8018514:	9b04      	ldr	r3, [sp, #16]
 8018516:	b9d0      	cbnz	r0, 801854e <_svfiprintf_r+0xda>
 8018518:	06d9      	lsls	r1, r3, #27
 801851a:	bf44      	itt	mi
 801851c:	2220      	movmi	r2, #32
 801851e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018522:	071a      	lsls	r2, r3, #28
 8018524:	bf44      	itt	mi
 8018526:	222b      	movmi	r2, #43	; 0x2b
 8018528:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801852c:	782a      	ldrb	r2, [r5, #0]
 801852e:	2a2a      	cmp	r2, #42	; 0x2a
 8018530:	d015      	beq.n	801855e <_svfiprintf_r+0xea>
 8018532:	9a07      	ldr	r2, [sp, #28]
 8018534:	462f      	mov	r7, r5
 8018536:	2000      	movs	r0, #0
 8018538:	250a      	movs	r5, #10
 801853a:	4639      	mov	r1, r7
 801853c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018540:	3b30      	subs	r3, #48	; 0x30
 8018542:	2b09      	cmp	r3, #9
 8018544:	d94d      	bls.n	80185e2 <_svfiprintf_r+0x16e>
 8018546:	b1b8      	cbz	r0, 8018578 <_svfiprintf_r+0x104>
 8018548:	e00f      	b.n	801856a <_svfiprintf_r+0xf6>
 801854a:	462f      	mov	r7, r5
 801854c:	e7b8      	b.n	80184c0 <_svfiprintf_r+0x4c>
 801854e:	4a40      	ldr	r2, [pc, #256]	; (8018650 <_svfiprintf_r+0x1dc>)
 8018550:	1a80      	subs	r0, r0, r2
 8018552:	fa0b f000 	lsl.w	r0, fp, r0
 8018556:	4318      	orrs	r0, r3
 8018558:	9004      	str	r0, [sp, #16]
 801855a:	463d      	mov	r5, r7
 801855c:	e7d3      	b.n	8018506 <_svfiprintf_r+0x92>
 801855e:	9a03      	ldr	r2, [sp, #12]
 8018560:	1d11      	adds	r1, r2, #4
 8018562:	6812      	ldr	r2, [r2, #0]
 8018564:	9103      	str	r1, [sp, #12]
 8018566:	2a00      	cmp	r2, #0
 8018568:	db01      	blt.n	801856e <_svfiprintf_r+0xfa>
 801856a:	9207      	str	r2, [sp, #28]
 801856c:	e004      	b.n	8018578 <_svfiprintf_r+0x104>
 801856e:	4252      	negs	r2, r2
 8018570:	f043 0302 	orr.w	r3, r3, #2
 8018574:	9207      	str	r2, [sp, #28]
 8018576:	9304      	str	r3, [sp, #16]
 8018578:	783b      	ldrb	r3, [r7, #0]
 801857a:	2b2e      	cmp	r3, #46	; 0x2e
 801857c:	d10c      	bne.n	8018598 <_svfiprintf_r+0x124>
 801857e:	787b      	ldrb	r3, [r7, #1]
 8018580:	2b2a      	cmp	r3, #42	; 0x2a
 8018582:	d133      	bne.n	80185ec <_svfiprintf_r+0x178>
 8018584:	9b03      	ldr	r3, [sp, #12]
 8018586:	1d1a      	adds	r2, r3, #4
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	9203      	str	r2, [sp, #12]
 801858c:	2b00      	cmp	r3, #0
 801858e:	bfb8      	it	lt
 8018590:	f04f 33ff 	movlt.w	r3, #4294967295
 8018594:	3702      	adds	r7, #2
 8018596:	9305      	str	r3, [sp, #20]
 8018598:	4d2e      	ldr	r5, [pc, #184]	; (8018654 <_svfiprintf_r+0x1e0>)
 801859a:	7839      	ldrb	r1, [r7, #0]
 801859c:	2203      	movs	r2, #3
 801859e:	4628      	mov	r0, r5
 80185a0:	f7e7 fe2e 	bl	8000200 <memchr>
 80185a4:	b138      	cbz	r0, 80185b6 <_svfiprintf_r+0x142>
 80185a6:	2340      	movs	r3, #64	; 0x40
 80185a8:	1b40      	subs	r0, r0, r5
 80185aa:	fa03 f000 	lsl.w	r0, r3, r0
 80185ae:	9b04      	ldr	r3, [sp, #16]
 80185b0:	4303      	orrs	r3, r0
 80185b2:	3701      	adds	r7, #1
 80185b4:	9304      	str	r3, [sp, #16]
 80185b6:	7839      	ldrb	r1, [r7, #0]
 80185b8:	4827      	ldr	r0, [pc, #156]	; (8018658 <_svfiprintf_r+0x1e4>)
 80185ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80185be:	2206      	movs	r2, #6
 80185c0:	1c7e      	adds	r6, r7, #1
 80185c2:	f7e7 fe1d 	bl	8000200 <memchr>
 80185c6:	2800      	cmp	r0, #0
 80185c8:	d038      	beq.n	801863c <_svfiprintf_r+0x1c8>
 80185ca:	4b24      	ldr	r3, [pc, #144]	; (801865c <_svfiprintf_r+0x1e8>)
 80185cc:	bb13      	cbnz	r3, 8018614 <_svfiprintf_r+0x1a0>
 80185ce:	9b03      	ldr	r3, [sp, #12]
 80185d0:	3307      	adds	r3, #7
 80185d2:	f023 0307 	bic.w	r3, r3, #7
 80185d6:	3308      	adds	r3, #8
 80185d8:	9303      	str	r3, [sp, #12]
 80185da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185dc:	444b      	add	r3, r9
 80185de:	9309      	str	r3, [sp, #36]	; 0x24
 80185e0:	e76d      	b.n	80184be <_svfiprintf_r+0x4a>
 80185e2:	fb05 3202 	mla	r2, r5, r2, r3
 80185e6:	2001      	movs	r0, #1
 80185e8:	460f      	mov	r7, r1
 80185ea:	e7a6      	b.n	801853a <_svfiprintf_r+0xc6>
 80185ec:	2300      	movs	r3, #0
 80185ee:	3701      	adds	r7, #1
 80185f0:	9305      	str	r3, [sp, #20]
 80185f2:	4619      	mov	r1, r3
 80185f4:	250a      	movs	r5, #10
 80185f6:	4638      	mov	r0, r7
 80185f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80185fc:	3a30      	subs	r2, #48	; 0x30
 80185fe:	2a09      	cmp	r2, #9
 8018600:	d903      	bls.n	801860a <_svfiprintf_r+0x196>
 8018602:	2b00      	cmp	r3, #0
 8018604:	d0c8      	beq.n	8018598 <_svfiprintf_r+0x124>
 8018606:	9105      	str	r1, [sp, #20]
 8018608:	e7c6      	b.n	8018598 <_svfiprintf_r+0x124>
 801860a:	fb05 2101 	mla	r1, r5, r1, r2
 801860e:	2301      	movs	r3, #1
 8018610:	4607      	mov	r7, r0
 8018612:	e7f0      	b.n	80185f6 <_svfiprintf_r+0x182>
 8018614:	ab03      	add	r3, sp, #12
 8018616:	9300      	str	r3, [sp, #0]
 8018618:	4622      	mov	r2, r4
 801861a:	4b11      	ldr	r3, [pc, #68]	; (8018660 <_svfiprintf_r+0x1ec>)
 801861c:	a904      	add	r1, sp, #16
 801861e:	4640      	mov	r0, r8
 8018620:	f7fc fc28 	bl	8014e74 <_printf_float>
 8018624:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018628:	4681      	mov	r9, r0
 801862a:	d1d6      	bne.n	80185da <_svfiprintf_r+0x166>
 801862c:	89a3      	ldrh	r3, [r4, #12]
 801862e:	065b      	lsls	r3, r3, #25
 8018630:	f53f af35 	bmi.w	801849e <_svfiprintf_r+0x2a>
 8018634:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018636:	b01d      	add	sp, #116	; 0x74
 8018638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801863c:	ab03      	add	r3, sp, #12
 801863e:	9300      	str	r3, [sp, #0]
 8018640:	4622      	mov	r2, r4
 8018642:	4b07      	ldr	r3, [pc, #28]	; (8018660 <_svfiprintf_r+0x1ec>)
 8018644:	a904      	add	r1, sp, #16
 8018646:	4640      	mov	r0, r8
 8018648:	f7fc feca 	bl	80153e0 <_printf_i>
 801864c:	e7ea      	b.n	8018624 <_svfiprintf_r+0x1b0>
 801864e:	bf00      	nop
 8018650:	0801acfc 	.word	0x0801acfc
 8018654:	0801ad02 	.word	0x0801ad02
 8018658:	0801ad06 	.word	0x0801ad06
 801865c:	08014e75 	.word	0x08014e75
 8018660:	080183bf 	.word	0x080183bf

08018664 <__ascii_wctomb>:
 8018664:	b149      	cbz	r1, 801867a <__ascii_wctomb+0x16>
 8018666:	2aff      	cmp	r2, #255	; 0xff
 8018668:	bf85      	ittet	hi
 801866a:	238a      	movhi	r3, #138	; 0x8a
 801866c:	6003      	strhi	r3, [r0, #0]
 801866e:	700a      	strbls	r2, [r1, #0]
 8018670:	f04f 30ff 	movhi.w	r0, #4294967295
 8018674:	bf98      	it	ls
 8018676:	2001      	movls	r0, #1
 8018678:	4770      	bx	lr
 801867a:	4608      	mov	r0, r1
 801867c:	4770      	bx	lr

0801867e <memmove>:
 801867e:	4288      	cmp	r0, r1
 8018680:	b510      	push	{r4, lr}
 8018682:	eb01 0302 	add.w	r3, r1, r2
 8018686:	d807      	bhi.n	8018698 <memmove+0x1a>
 8018688:	1e42      	subs	r2, r0, #1
 801868a:	4299      	cmp	r1, r3
 801868c:	d00a      	beq.n	80186a4 <memmove+0x26>
 801868e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018692:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018696:	e7f8      	b.n	801868a <memmove+0xc>
 8018698:	4283      	cmp	r3, r0
 801869a:	d9f5      	bls.n	8018688 <memmove+0xa>
 801869c:	1881      	adds	r1, r0, r2
 801869e:	1ad2      	subs	r2, r2, r3
 80186a0:	42d3      	cmn	r3, r2
 80186a2:	d100      	bne.n	80186a6 <memmove+0x28>
 80186a4:	bd10      	pop	{r4, pc}
 80186a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80186aa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80186ae:	e7f7      	b.n	80186a0 <memmove+0x22>

080186b0 <_realloc_r>:
 80186b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186b2:	4607      	mov	r7, r0
 80186b4:	4614      	mov	r4, r2
 80186b6:	460e      	mov	r6, r1
 80186b8:	b921      	cbnz	r1, 80186c4 <_realloc_r+0x14>
 80186ba:	4611      	mov	r1, r2
 80186bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80186c0:	f7fc baea 	b.w	8014c98 <_malloc_r>
 80186c4:	b922      	cbnz	r2, 80186d0 <_realloc_r+0x20>
 80186c6:	f7fc fa99 	bl	8014bfc <_free_r>
 80186ca:	4625      	mov	r5, r4
 80186cc:	4628      	mov	r0, r5
 80186ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186d0:	f000 f814 	bl	80186fc <_malloc_usable_size_r>
 80186d4:	42a0      	cmp	r0, r4
 80186d6:	d20f      	bcs.n	80186f8 <_realloc_r+0x48>
 80186d8:	4621      	mov	r1, r4
 80186da:	4638      	mov	r0, r7
 80186dc:	f7fc fadc 	bl	8014c98 <_malloc_r>
 80186e0:	4605      	mov	r5, r0
 80186e2:	2800      	cmp	r0, #0
 80186e4:	d0f2      	beq.n	80186cc <_realloc_r+0x1c>
 80186e6:	4631      	mov	r1, r6
 80186e8:	4622      	mov	r2, r4
 80186ea:	f7fc fa73 	bl	8014bd4 <memcpy>
 80186ee:	4631      	mov	r1, r6
 80186f0:	4638      	mov	r0, r7
 80186f2:	f7fc fa83 	bl	8014bfc <_free_r>
 80186f6:	e7e9      	b.n	80186cc <_realloc_r+0x1c>
 80186f8:	4635      	mov	r5, r6
 80186fa:	e7e7      	b.n	80186cc <_realloc_r+0x1c>

080186fc <_malloc_usable_size_r>:
 80186fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018700:	1f18      	subs	r0, r3, #4
 8018702:	2b00      	cmp	r3, #0
 8018704:	bfbc      	itt	lt
 8018706:	580b      	ldrlt	r3, [r1, r0]
 8018708:	18c0      	addlt	r0, r0, r3
 801870a:	4770      	bx	lr

0801870c <asin>:
 801870c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801870e:	ed2d 8b02 	vpush	{d8}
 8018712:	4e26      	ldr	r6, [pc, #152]	; (80187ac <asin+0xa0>)
 8018714:	b08b      	sub	sp, #44	; 0x2c
 8018716:	ec55 4b10 	vmov	r4, r5, d0
 801871a:	f000 fa11 	bl	8018b40 <__ieee754_asin>
 801871e:	f996 3000 	ldrsb.w	r3, [r6]
 8018722:	eeb0 8a40 	vmov.f32	s16, s0
 8018726:	eef0 8a60 	vmov.f32	s17, s1
 801872a:	3301      	adds	r3, #1
 801872c:	d036      	beq.n	801879c <asin+0x90>
 801872e:	4622      	mov	r2, r4
 8018730:	462b      	mov	r3, r5
 8018732:	4620      	mov	r0, r4
 8018734:	4629      	mov	r1, r5
 8018736:	f7e8 fa09 	bl	8000b4c <__aeabi_dcmpun>
 801873a:	4607      	mov	r7, r0
 801873c:	bb70      	cbnz	r0, 801879c <asin+0x90>
 801873e:	ec45 4b10 	vmov	d0, r4, r5
 8018742:	f001 fc51 	bl	8019fe8 <fabs>
 8018746:	2200      	movs	r2, #0
 8018748:	4b19      	ldr	r3, [pc, #100]	; (80187b0 <asin+0xa4>)
 801874a:	ec51 0b10 	vmov	r0, r1, d0
 801874e:	f7e8 f9f3 	bl	8000b38 <__aeabi_dcmpgt>
 8018752:	b318      	cbz	r0, 801879c <asin+0x90>
 8018754:	2301      	movs	r3, #1
 8018756:	9300      	str	r3, [sp, #0]
 8018758:	4816      	ldr	r0, [pc, #88]	; (80187b4 <asin+0xa8>)
 801875a:	4b17      	ldr	r3, [pc, #92]	; (80187b8 <asin+0xac>)
 801875c:	9301      	str	r3, [sp, #4]
 801875e:	9708      	str	r7, [sp, #32]
 8018760:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8018764:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8018768:	f001 fc52 	bl	801a010 <nan>
 801876c:	f996 3000 	ldrsb.w	r3, [r6]
 8018770:	2b02      	cmp	r3, #2
 8018772:	ed8d 0b06 	vstr	d0, [sp, #24]
 8018776:	d104      	bne.n	8018782 <asin+0x76>
 8018778:	f7fc f9f2 	bl	8014b60 <__errno>
 801877c:	2321      	movs	r3, #33	; 0x21
 801877e:	6003      	str	r3, [r0, #0]
 8018780:	e004      	b.n	801878c <asin+0x80>
 8018782:	4668      	mov	r0, sp
 8018784:	f001 fc41 	bl	801a00a <matherr>
 8018788:	2800      	cmp	r0, #0
 801878a:	d0f5      	beq.n	8018778 <asin+0x6c>
 801878c:	9b08      	ldr	r3, [sp, #32]
 801878e:	b11b      	cbz	r3, 8018798 <asin+0x8c>
 8018790:	f7fc f9e6 	bl	8014b60 <__errno>
 8018794:	9b08      	ldr	r3, [sp, #32]
 8018796:	6003      	str	r3, [r0, #0]
 8018798:	ed9d 8b06 	vldr	d8, [sp, #24]
 801879c:	eeb0 0a48 	vmov.f32	s0, s16
 80187a0:	eef0 0a68 	vmov.f32	s1, s17
 80187a4:	b00b      	add	sp, #44	; 0x2c
 80187a6:	ecbd 8b02 	vpop	{d8}
 80187aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187ac:	20000354 	.word	0x20000354
 80187b0:	3ff00000 	.word	0x3ff00000
 80187b4:	0801ad01 	.word	0x0801ad01
 80187b8:	0801ae0e 	.word	0x0801ae0e

080187bc <atan2>:
 80187bc:	f000 bbd0 	b.w	8018f60 <__ieee754_atan2>

080187c0 <pow>:
 80187c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187c4:	ed2d 8b04 	vpush	{d8-d9}
 80187c8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8018a9c <pow+0x2dc>
 80187cc:	b08d      	sub	sp, #52	; 0x34
 80187ce:	ec57 6b10 	vmov	r6, r7, d0
 80187d2:	ec55 4b11 	vmov	r4, r5, d1
 80187d6:	f000 fca3 	bl	8019120 <__ieee754_pow>
 80187da:	f999 3000 	ldrsb.w	r3, [r9]
 80187de:	9300      	str	r3, [sp, #0]
 80187e0:	3301      	adds	r3, #1
 80187e2:	eeb0 8a40 	vmov.f32	s16, s0
 80187e6:	eef0 8a60 	vmov.f32	s17, s1
 80187ea:	46c8      	mov	r8, r9
 80187ec:	d05f      	beq.n	80188ae <pow+0xee>
 80187ee:	4622      	mov	r2, r4
 80187f0:	462b      	mov	r3, r5
 80187f2:	4620      	mov	r0, r4
 80187f4:	4629      	mov	r1, r5
 80187f6:	f7e8 f9a9 	bl	8000b4c <__aeabi_dcmpun>
 80187fa:	4683      	mov	fp, r0
 80187fc:	2800      	cmp	r0, #0
 80187fe:	d156      	bne.n	80188ae <pow+0xee>
 8018800:	4632      	mov	r2, r6
 8018802:	463b      	mov	r3, r7
 8018804:	4630      	mov	r0, r6
 8018806:	4639      	mov	r1, r7
 8018808:	f7e8 f9a0 	bl	8000b4c <__aeabi_dcmpun>
 801880c:	9001      	str	r0, [sp, #4]
 801880e:	b1e8      	cbz	r0, 801884c <pow+0x8c>
 8018810:	2200      	movs	r2, #0
 8018812:	2300      	movs	r3, #0
 8018814:	4620      	mov	r0, r4
 8018816:	4629      	mov	r1, r5
 8018818:	f7e8 f966 	bl	8000ae8 <__aeabi_dcmpeq>
 801881c:	2800      	cmp	r0, #0
 801881e:	d046      	beq.n	80188ae <pow+0xee>
 8018820:	2301      	movs	r3, #1
 8018822:	9302      	str	r3, [sp, #8]
 8018824:	4b96      	ldr	r3, [pc, #600]	; (8018a80 <pow+0x2c0>)
 8018826:	9303      	str	r3, [sp, #12]
 8018828:	4b96      	ldr	r3, [pc, #600]	; (8018a84 <pow+0x2c4>)
 801882a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801882e:	2200      	movs	r2, #0
 8018830:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018834:	9b00      	ldr	r3, [sp, #0]
 8018836:	2b02      	cmp	r3, #2
 8018838:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801883c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018840:	d033      	beq.n	80188aa <pow+0xea>
 8018842:	a802      	add	r0, sp, #8
 8018844:	f001 fbe1 	bl	801a00a <matherr>
 8018848:	bb48      	cbnz	r0, 801889e <pow+0xde>
 801884a:	e05d      	b.n	8018908 <pow+0x148>
 801884c:	f04f 0a00 	mov.w	sl, #0
 8018850:	f04f 0b00 	mov.w	fp, #0
 8018854:	4652      	mov	r2, sl
 8018856:	465b      	mov	r3, fp
 8018858:	4630      	mov	r0, r6
 801885a:	4639      	mov	r1, r7
 801885c:	f7e8 f944 	bl	8000ae8 <__aeabi_dcmpeq>
 8018860:	ec4b ab19 	vmov	d9, sl, fp
 8018864:	2800      	cmp	r0, #0
 8018866:	d054      	beq.n	8018912 <pow+0x152>
 8018868:	4652      	mov	r2, sl
 801886a:	465b      	mov	r3, fp
 801886c:	4620      	mov	r0, r4
 801886e:	4629      	mov	r1, r5
 8018870:	f7e8 f93a 	bl	8000ae8 <__aeabi_dcmpeq>
 8018874:	4680      	mov	r8, r0
 8018876:	b318      	cbz	r0, 80188c0 <pow+0x100>
 8018878:	2301      	movs	r3, #1
 801887a:	9302      	str	r3, [sp, #8]
 801887c:	4b80      	ldr	r3, [pc, #512]	; (8018a80 <pow+0x2c0>)
 801887e:	9303      	str	r3, [sp, #12]
 8018880:	9b01      	ldr	r3, [sp, #4]
 8018882:	930a      	str	r3, [sp, #40]	; 0x28
 8018884:	9b00      	ldr	r3, [sp, #0]
 8018886:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801888a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801888e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8018892:	2b00      	cmp	r3, #0
 8018894:	d0d5      	beq.n	8018842 <pow+0x82>
 8018896:	4b7b      	ldr	r3, [pc, #492]	; (8018a84 <pow+0x2c4>)
 8018898:	2200      	movs	r2, #0
 801889a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801889e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80188a0:	b11b      	cbz	r3, 80188aa <pow+0xea>
 80188a2:	f7fc f95d 	bl	8014b60 <__errno>
 80188a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80188a8:	6003      	str	r3, [r0, #0]
 80188aa:	ed9d 8b08 	vldr	d8, [sp, #32]
 80188ae:	eeb0 0a48 	vmov.f32	s0, s16
 80188b2:	eef0 0a68 	vmov.f32	s1, s17
 80188b6:	b00d      	add	sp, #52	; 0x34
 80188b8:	ecbd 8b04 	vpop	{d8-d9}
 80188bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188c0:	ec45 4b10 	vmov	d0, r4, r5
 80188c4:	f001 fb99 	bl	8019ffa <finite>
 80188c8:	2800      	cmp	r0, #0
 80188ca:	d0f0      	beq.n	80188ae <pow+0xee>
 80188cc:	4652      	mov	r2, sl
 80188ce:	465b      	mov	r3, fp
 80188d0:	4620      	mov	r0, r4
 80188d2:	4629      	mov	r1, r5
 80188d4:	f7e8 f912 	bl	8000afc <__aeabi_dcmplt>
 80188d8:	2800      	cmp	r0, #0
 80188da:	d0e8      	beq.n	80188ae <pow+0xee>
 80188dc:	2301      	movs	r3, #1
 80188de:	9302      	str	r3, [sp, #8]
 80188e0:	4b67      	ldr	r3, [pc, #412]	; (8018a80 <pow+0x2c0>)
 80188e2:	9303      	str	r3, [sp, #12]
 80188e4:	f999 3000 	ldrsb.w	r3, [r9]
 80188e8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80188ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80188f0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80188f4:	b913      	cbnz	r3, 80188fc <pow+0x13c>
 80188f6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80188fa:	e7a2      	b.n	8018842 <pow+0x82>
 80188fc:	4962      	ldr	r1, [pc, #392]	; (8018a88 <pow+0x2c8>)
 80188fe:	2000      	movs	r0, #0
 8018900:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018904:	2b02      	cmp	r3, #2
 8018906:	d19c      	bne.n	8018842 <pow+0x82>
 8018908:	f7fc f92a 	bl	8014b60 <__errno>
 801890c:	2321      	movs	r3, #33	; 0x21
 801890e:	6003      	str	r3, [r0, #0]
 8018910:	e7c5      	b.n	801889e <pow+0xde>
 8018912:	eeb0 0a48 	vmov.f32	s0, s16
 8018916:	eef0 0a68 	vmov.f32	s1, s17
 801891a:	f001 fb6e 	bl	8019ffa <finite>
 801891e:	9000      	str	r0, [sp, #0]
 8018920:	2800      	cmp	r0, #0
 8018922:	f040 8081 	bne.w	8018a28 <pow+0x268>
 8018926:	ec47 6b10 	vmov	d0, r6, r7
 801892a:	f001 fb66 	bl	8019ffa <finite>
 801892e:	2800      	cmp	r0, #0
 8018930:	d07a      	beq.n	8018a28 <pow+0x268>
 8018932:	ec45 4b10 	vmov	d0, r4, r5
 8018936:	f001 fb60 	bl	8019ffa <finite>
 801893a:	2800      	cmp	r0, #0
 801893c:	d074      	beq.n	8018a28 <pow+0x268>
 801893e:	ec53 2b18 	vmov	r2, r3, d8
 8018942:	ee18 0a10 	vmov	r0, s16
 8018946:	4619      	mov	r1, r3
 8018948:	f7e8 f900 	bl	8000b4c <__aeabi_dcmpun>
 801894c:	f999 9000 	ldrsb.w	r9, [r9]
 8018950:	4b4b      	ldr	r3, [pc, #300]	; (8018a80 <pow+0x2c0>)
 8018952:	b1b0      	cbz	r0, 8018982 <pow+0x1c2>
 8018954:	2201      	movs	r2, #1
 8018956:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801895a:	9b00      	ldr	r3, [sp, #0]
 801895c:	930a      	str	r3, [sp, #40]	; 0x28
 801895e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018962:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018966:	f1b9 0f00 	cmp.w	r9, #0
 801896a:	d0c4      	beq.n	80188f6 <pow+0x136>
 801896c:	4652      	mov	r2, sl
 801896e:	465b      	mov	r3, fp
 8018970:	4650      	mov	r0, sl
 8018972:	4659      	mov	r1, fp
 8018974:	f7e7 ff7a 	bl	800086c <__aeabi_ddiv>
 8018978:	f1b9 0f02 	cmp.w	r9, #2
 801897c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018980:	e7c1      	b.n	8018906 <pow+0x146>
 8018982:	2203      	movs	r2, #3
 8018984:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018988:	900a      	str	r0, [sp, #40]	; 0x28
 801898a:	4629      	mov	r1, r5
 801898c:	4620      	mov	r0, r4
 801898e:	2200      	movs	r2, #0
 8018990:	4b3e      	ldr	r3, [pc, #248]	; (8018a8c <pow+0x2cc>)
 8018992:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018996:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801899a:	f7e7 fe3d 	bl	8000618 <__aeabi_dmul>
 801899e:	4604      	mov	r4, r0
 80189a0:	460d      	mov	r5, r1
 80189a2:	f1b9 0f00 	cmp.w	r9, #0
 80189a6:	d124      	bne.n	80189f2 <pow+0x232>
 80189a8:	4b39      	ldr	r3, [pc, #228]	; (8018a90 <pow+0x2d0>)
 80189aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80189ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80189b2:	4630      	mov	r0, r6
 80189b4:	4652      	mov	r2, sl
 80189b6:	465b      	mov	r3, fp
 80189b8:	4639      	mov	r1, r7
 80189ba:	f7e8 f89f 	bl	8000afc <__aeabi_dcmplt>
 80189be:	2800      	cmp	r0, #0
 80189c0:	d056      	beq.n	8018a70 <pow+0x2b0>
 80189c2:	ec45 4b10 	vmov	d0, r4, r5
 80189c6:	f001 fb2b 	bl	801a020 <rint>
 80189ca:	4622      	mov	r2, r4
 80189cc:	462b      	mov	r3, r5
 80189ce:	ec51 0b10 	vmov	r0, r1, d0
 80189d2:	f7e8 f889 	bl	8000ae8 <__aeabi_dcmpeq>
 80189d6:	b920      	cbnz	r0, 80189e2 <pow+0x222>
 80189d8:	4b2e      	ldr	r3, [pc, #184]	; (8018a94 <pow+0x2d4>)
 80189da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80189de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80189e2:	f998 3000 	ldrsb.w	r3, [r8]
 80189e6:	2b02      	cmp	r3, #2
 80189e8:	d142      	bne.n	8018a70 <pow+0x2b0>
 80189ea:	f7fc f8b9 	bl	8014b60 <__errno>
 80189ee:	2322      	movs	r3, #34	; 0x22
 80189f0:	e78d      	b.n	801890e <pow+0x14e>
 80189f2:	4b29      	ldr	r3, [pc, #164]	; (8018a98 <pow+0x2d8>)
 80189f4:	2200      	movs	r2, #0
 80189f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80189fa:	4630      	mov	r0, r6
 80189fc:	4652      	mov	r2, sl
 80189fe:	465b      	mov	r3, fp
 8018a00:	4639      	mov	r1, r7
 8018a02:	f7e8 f87b 	bl	8000afc <__aeabi_dcmplt>
 8018a06:	2800      	cmp	r0, #0
 8018a08:	d0eb      	beq.n	80189e2 <pow+0x222>
 8018a0a:	ec45 4b10 	vmov	d0, r4, r5
 8018a0e:	f001 fb07 	bl	801a020 <rint>
 8018a12:	4622      	mov	r2, r4
 8018a14:	462b      	mov	r3, r5
 8018a16:	ec51 0b10 	vmov	r0, r1, d0
 8018a1a:	f7e8 f865 	bl	8000ae8 <__aeabi_dcmpeq>
 8018a1e:	2800      	cmp	r0, #0
 8018a20:	d1df      	bne.n	80189e2 <pow+0x222>
 8018a22:	2200      	movs	r2, #0
 8018a24:	4b18      	ldr	r3, [pc, #96]	; (8018a88 <pow+0x2c8>)
 8018a26:	e7da      	b.n	80189de <pow+0x21e>
 8018a28:	2200      	movs	r2, #0
 8018a2a:	2300      	movs	r3, #0
 8018a2c:	ec51 0b18 	vmov	r0, r1, d8
 8018a30:	f7e8 f85a 	bl	8000ae8 <__aeabi_dcmpeq>
 8018a34:	2800      	cmp	r0, #0
 8018a36:	f43f af3a 	beq.w	80188ae <pow+0xee>
 8018a3a:	ec47 6b10 	vmov	d0, r6, r7
 8018a3e:	f001 fadc 	bl	8019ffa <finite>
 8018a42:	2800      	cmp	r0, #0
 8018a44:	f43f af33 	beq.w	80188ae <pow+0xee>
 8018a48:	ec45 4b10 	vmov	d0, r4, r5
 8018a4c:	f001 fad5 	bl	8019ffa <finite>
 8018a50:	2800      	cmp	r0, #0
 8018a52:	f43f af2c 	beq.w	80188ae <pow+0xee>
 8018a56:	2304      	movs	r3, #4
 8018a58:	9302      	str	r3, [sp, #8]
 8018a5a:	4b09      	ldr	r3, [pc, #36]	; (8018a80 <pow+0x2c0>)
 8018a5c:	9303      	str	r3, [sp, #12]
 8018a5e:	2300      	movs	r3, #0
 8018a60:	930a      	str	r3, [sp, #40]	; 0x28
 8018a62:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018a66:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018a6a:	ed8d 9b08 	vstr	d9, [sp, #32]
 8018a6e:	e7b8      	b.n	80189e2 <pow+0x222>
 8018a70:	a802      	add	r0, sp, #8
 8018a72:	f001 faca 	bl	801a00a <matherr>
 8018a76:	2800      	cmp	r0, #0
 8018a78:	f47f af11 	bne.w	801889e <pow+0xde>
 8018a7c:	e7b5      	b.n	80189ea <pow+0x22a>
 8018a7e:	bf00      	nop
 8018a80:	0801ae13 	.word	0x0801ae13
 8018a84:	3ff00000 	.word	0x3ff00000
 8018a88:	fff00000 	.word	0xfff00000
 8018a8c:	3fe00000 	.word	0x3fe00000
 8018a90:	47efffff 	.word	0x47efffff
 8018a94:	c7efffff 	.word	0xc7efffff
 8018a98:	7ff00000 	.word	0x7ff00000
 8018a9c:	20000354 	.word	0x20000354

08018aa0 <sqrtf>:
 8018aa0:	b510      	push	{r4, lr}
 8018aa2:	ed2d 8b02 	vpush	{d8}
 8018aa6:	b08a      	sub	sp, #40	; 0x28
 8018aa8:	eeb0 8a40 	vmov.f32	s16, s0
 8018aac:	f001 f8f6 	bl	8019c9c <__ieee754_sqrtf>
 8018ab0:	4b21      	ldr	r3, [pc, #132]	; (8018b38 <sqrtf+0x98>)
 8018ab2:	f993 4000 	ldrsb.w	r4, [r3]
 8018ab6:	1c63      	adds	r3, r4, #1
 8018ab8:	d02c      	beq.n	8018b14 <sqrtf+0x74>
 8018aba:	eeb4 8a48 	vcmp.f32	s16, s16
 8018abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ac2:	d627      	bvs.n	8018b14 <sqrtf+0x74>
 8018ac4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018acc:	d522      	bpl.n	8018b14 <sqrtf+0x74>
 8018ace:	2301      	movs	r3, #1
 8018ad0:	9300      	str	r3, [sp, #0]
 8018ad2:	4b1a      	ldr	r3, [pc, #104]	; (8018b3c <sqrtf+0x9c>)
 8018ad4:	9301      	str	r3, [sp, #4]
 8018ad6:	ee18 0a10 	vmov	r0, s16
 8018ada:	2300      	movs	r3, #0
 8018adc:	9308      	str	r3, [sp, #32]
 8018ade:	f7e7 fd43 	bl	8000568 <__aeabi_f2d>
 8018ae2:	2200      	movs	r2, #0
 8018ae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018ae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018aec:	2300      	movs	r3, #0
 8018aee:	b9ac      	cbnz	r4, 8018b1c <sqrtf+0x7c>
 8018af0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018af4:	4668      	mov	r0, sp
 8018af6:	f001 fa88 	bl	801a00a <matherr>
 8018afa:	b1b8      	cbz	r0, 8018b2c <sqrtf+0x8c>
 8018afc:	9b08      	ldr	r3, [sp, #32]
 8018afe:	b11b      	cbz	r3, 8018b08 <sqrtf+0x68>
 8018b00:	f7fc f82e 	bl	8014b60 <__errno>
 8018b04:	9b08      	ldr	r3, [sp, #32]
 8018b06:	6003      	str	r3, [r0, #0]
 8018b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018b0c:	f7e8 f87c 	bl	8000c08 <__aeabi_d2f>
 8018b10:	ee00 0a10 	vmov	s0, r0
 8018b14:	b00a      	add	sp, #40	; 0x28
 8018b16:	ecbd 8b02 	vpop	{d8}
 8018b1a:	bd10      	pop	{r4, pc}
 8018b1c:	4610      	mov	r0, r2
 8018b1e:	4619      	mov	r1, r3
 8018b20:	f7e7 fea4 	bl	800086c <__aeabi_ddiv>
 8018b24:	2c02      	cmp	r4, #2
 8018b26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018b2a:	d1e3      	bne.n	8018af4 <sqrtf+0x54>
 8018b2c:	f7fc f818 	bl	8014b60 <__errno>
 8018b30:	2321      	movs	r3, #33	; 0x21
 8018b32:	6003      	str	r3, [r0, #0]
 8018b34:	e7e2      	b.n	8018afc <sqrtf+0x5c>
 8018b36:	bf00      	nop
 8018b38:	20000354 	.word	0x20000354
 8018b3c:	0801ae17 	.word	0x0801ae17

08018b40 <__ieee754_asin>:
 8018b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b44:	ec55 4b10 	vmov	r4, r5, d0
 8018b48:	4bcb      	ldr	r3, [pc, #812]	; (8018e78 <__ieee754_asin+0x338>)
 8018b4a:	b087      	sub	sp, #28
 8018b4c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8018b50:	429f      	cmp	r7, r3
 8018b52:	9501      	str	r5, [sp, #4]
 8018b54:	dd31      	ble.n	8018bba <__ieee754_asin+0x7a>
 8018b56:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8018b5a:	ee10 3a10 	vmov	r3, s0
 8018b5e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8018b62:	433b      	orrs	r3, r7
 8018b64:	d117      	bne.n	8018b96 <__ieee754_asin+0x56>
 8018b66:	a3aa      	add	r3, pc, #680	; (adr r3, 8018e10 <__ieee754_asin+0x2d0>)
 8018b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b6c:	ee10 0a10 	vmov	r0, s0
 8018b70:	4629      	mov	r1, r5
 8018b72:	f7e7 fd51 	bl	8000618 <__aeabi_dmul>
 8018b76:	a3a8      	add	r3, pc, #672	; (adr r3, 8018e18 <__ieee754_asin+0x2d8>)
 8018b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b7c:	4606      	mov	r6, r0
 8018b7e:	460f      	mov	r7, r1
 8018b80:	4620      	mov	r0, r4
 8018b82:	4629      	mov	r1, r5
 8018b84:	f7e7 fd48 	bl	8000618 <__aeabi_dmul>
 8018b88:	4602      	mov	r2, r0
 8018b8a:	460b      	mov	r3, r1
 8018b8c:	4630      	mov	r0, r6
 8018b8e:	4639      	mov	r1, r7
 8018b90:	f7e7 fb8c 	bl	80002ac <__adddf3>
 8018b94:	e00a      	b.n	8018bac <__ieee754_asin+0x6c>
 8018b96:	ee10 2a10 	vmov	r2, s0
 8018b9a:	462b      	mov	r3, r5
 8018b9c:	4620      	mov	r0, r4
 8018b9e:	4629      	mov	r1, r5
 8018ba0:	f7e7 fb82 	bl	80002a8 <__aeabi_dsub>
 8018ba4:	4602      	mov	r2, r0
 8018ba6:	460b      	mov	r3, r1
 8018ba8:	f7e7 fe60 	bl	800086c <__aeabi_ddiv>
 8018bac:	4604      	mov	r4, r0
 8018bae:	460d      	mov	r5, r1
 8018bb0:	ec45 4b10 	vmov	d0, r4, r5
 8018bb4:	b007      	add	sp, #28
 8018bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bba:	4bb0      	ldr	r3, [pc, #704]	; (8018e7c <__ieee754_asin+0x33c>)
 8018bbc:	429f      	cmp	r7, r3
 8018bbe:	dc11      	bgt.n	8018be4 <__ieee754_asin+0xa4>
 8018bc0:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8018bc4:	f280 80ae 	bge.w	8018d24 <__ieee754_asin+0x1e4>
 8018bc8:	a395      	add	r3, pc, #596	; (adr r3, 8018e20 <__ieee754_asin+0x2e0>)
 8018bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bce:	ee10 0a10 	vmov	r0, s0
 8018bd2:	4629      	mov	r1, r5
 8018bd4:	f7e7 fb6a 	bl	80002ac <__adddf3>
 8018bd8:	2200      	movs	r2, #0
 8018bda:	4ba9      	ldr	r3, [pc, #676]	; (8018e80 <__ieee754_asin+0x340>)
 8018bdc:	f7e7 ffac 	bl	8000b38 <__aeabi_dcmpgt>
 8018be0:	2800      	cmp	r0, #0
 8018be2:	d1e5      	bne.n	8018bb0 <__ieee754_asin+0x70>
 8018be4:	ec45 4b10 	vmov	d0, r4, r5
 8018be8:	f001 f9fe 	bl	8019fe8 <fabs>
 8018bec:	2000      	movs	r0, #0
 8018bee:	ec53 2b10 	vmov	r2, r3, d0
 8018bf2:	49a3      	ldr	r1, [pc, #652]	; (8018e80 <__ieee754_asin+0x340>)
 8018bf4:	f7e7 fb58 	bl	80002a8 <__aeabi_dsub>
 8018bf8:	2200      	movs	r2, #0
 8018bfa:	4ba2      	ldr	r3, [pc, #648]	; (8018e84 <__ieee754_asin+0x344>)
 8018bfc:	f7e7 fd0c 	bl	8000618 <__aeabi_dmul>
 8018c00:	a389      	add	r3, pc, #548	; (adr r3, 8018e28 <__ieee754_asin+0x2e8>)
 8018c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c06:	4604      	mov	r4, r0
 8018c08:	460d      	mov	r5, r1
 8018c0a:	f7e7 fd05 	bl	8000618 <__aeabi_dmul>
 8018c0e:	a388      	add	r3, pc, #544	; (adr r3, 8018e30 <__ieee754_asin+0x2f0>)
 8018c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c14:	f7e7 fb4a 	bl	80002ac <__adddf3>
 8018c18:	4622      	mov	r2, r4
 8018c1a:	462b      	mov	r3, r5
 8018c1c:	f7e7 fcfc 	bl	8000618 <__aeabi_dmul>
 8018c20:	a385      	add	r3, pc, #532	; (adr r3, 8018e38 <__ieee754_asin+0x2f8>)
 8018c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c26:	f7e7 fb3f 	bl	80002a8 <__aeabi_dsub>
 8018c2a:	4622      	mov	r2, r4
 8018c2c:	462b      	mov	r3, r5
 8018c2e:	f7e7 fcf3 	bl	8000618 <__aeabi_dmul>
 8018c32:	a383      	add	r3, pc, #524	; (adr r3, 8018e40 <__ieee754_asin+0x300>)
 8018c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c38:	f7e7 fb38 	bl	80002ac <__adddf3>
 8018c3c:	4622      	mov	r2, r4
 8018c3e:	462b      	mov	r3, r5
 8018c40:	f7e7 fcea 	bl	8000618 <__aeabi_dmul>
 8018c44:	a380      	add	r3, pc, #512	; (adr r3, 8018e48 <__ieee754_asin+0x308>)
 8018c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c4a:	f7e7 fb2d 	bl	80002a8 <__aeabi_dsub>
 8018c4e:	4622      	mov	r2, r4
 8018c50:	462b      	mov	r3, r5
 8018c52:	f7e7 fce1 	bl	8000618 <__aeabi_dmul>
 8018c56:	a37e      	add	r3, pc, #504	; (adr r3, 8018e50 <__ieee754_asin+0x310>)
 8018c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c5c:	f7e7 fb26 	bl	80002ac <__adddf3>
 8018c60:	4622      	mov	r2, r4
 8018c62:	462b      	mov	r3, r5
 8018c64:	f7e7 fcd8 	bl	8000618 <__aeabi_dmul>
 8018c68:	a37b      	add	r3, pc, #492	; (adr r3, 8018e58 <__ieee754_asin+0x318>)
 8018c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c6e:	4680      	mov	r8, r0
 8018c70:	4689      	mov	r9, r1
 8018c72:	4620      	mov	r0, r4
 8018c74:	4629      	mov	r1, r5
 8018c76:	f7e7 fccf 	bl	8000618 <__aeabi_dmul>
 8018c7a:	a379      	add	r3, pc, #484	; (adr r3, 8018e60 <__ieee754_asin+0x320>)
 8018c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c80:	f7e7 fb12 	bl	80002a8 <__aeabi_dsub>
 8018c84:	4622      	mov	r2, r4
 8018c86:	462b      	mov	r3, r5
 8018c88:	f7e7 fcc6 	bl	8000618 <__aeabi_dmul>
 8018c8c:	a376      	add	r3, pc, #472	; (adr r3, 8018e68 <__ieee754_asin+0x328>)
 8018c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c92:	f7e7 fb0b 	bl	80002ac <__adddf3>
 8018c96:	4622      	mov	r2, r4
 8018c98:	462b      	mov	r3, r5
 8018c9a:	f7e7 fcbd 	bl	8000618 <__aeabi_dmul>
 8018c9e:	a374      	add	r3, pc, #464	; (adr r3, 8018e70 <__ieee754_asin+0x330>)
 8018ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ca4:	f7e7 fb00 	bl	80002a8 <__aeabi_dsub>
 8018ca8:	4622      	mov	r2, r4
 8018caa:	462b      	mov	r3, r5
 8018cac:	f7e7 fcb4 	bl	8000618 <__aeabi_dmul>
 8018cb0:	4b73      	ldr	r3, [pc, #460]	; (8018e80 <__ieee754_asin+0x340>)
 8018cb2:	2200      	movs	r2, #0
 8018cb4:	f7e7 fafa 	bl	80002ac <__adddf3>
 8018cb8:	ec45 4b10 	vmov	d0, r4, r5
 8018cbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018cc0:	f000 ff3c 	bl	8019b3c <__ieee754_sqrt>
 8018cc4:	4b70      	ldr	r3, [pc, #448]	; (8018e88 <__ieee754_asin+0x348>)
 8018cc6:	429f      	cmp	r7, r3
 8018cc8:	ec5b ab10 	vmov	sl, fp, d0
 8018ccc:	f340 80de 	ble.w	8018e8c <__ieee754_asin+0x34c>
 8018cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018cd4:	4640      	mov	r0, r8
 8018cd6:	4649      	mov	r1, r9
 8018cd8:	f7e7 fdc8 	bl	800086c <__aeabi_ddiv>
 8018cdc:	4652      	mov	r2, sl
 8018cde:	465b      	mov	r3, fp
 8018ce0:	f7e7 fc9a 	bl	8000618 <__aeabi_dmul>
 8018ce4:	4652      	mov	r2, sl
 8018ce6:	465b      	mov	r3, fp
 8018ce8:	f7e7 fae0 	bl	80002ac <__adddf3>
 8018cec:	4602      	mov	r2, r0
 8018cee:	460b      	mov	r3, r1
 8018cf0:	f7e7 fadc 	bl	80002ac <__adddf3>
 8018cf4:	a348      	add	r3, pc, #288	; (adr r3, 8018e18 <__ieee754_asin+0x2d8>)
 8018cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cfa:	f7e7 fad5 	bl	80002a8 <__aeabi_dsub>
 8018cfe:	4602      	mov	r2, r0
 8018d00:	460b      	mov	r3, r1
 8018d02:	a143      	add	r1, pc, #268	; (adr r1, 8018e10 <__ieee754_asin+0x2d0>)
 8018d04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018d08:	f7e7 face 	bl	80002a8 <__aeabi_dsub>
 8018d0c:	9b01      	ldr	r3, [sp, #4]
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	bfdc      	itt	le
 8018d12:	4602      	movle	r2, r0
 8018d14:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8018d18:	4604      	mov	r4, r0
 8018d1a:	460d      	mov	r5, r1
 8018d1c:	bfdc      	itt	le
 8018d1e:	4614      	movle	r4, r2
 8018d20:	461d      	movle	r5, r3
 8018d22:	e745      	b.n	8018bb0 <__ieee754_asin+0x70>
 8018d24:	ee10 2a10 	vmov	r2, s0
 8018d28:	ee10 0a10 	vmov	r0, s0
 8018d2c:	462b      	mov	r3, r5
 8018d2e:	4629      	mov	r1, r5
 8018d30:	f7e7 fc72 	bl	8000618 <__aeabi_dmul>
 8018d34:	a33c      	add	r3, pc, #240	; (adr r3, 8018e28 <__ieee754_asin+0x2e8>)
 8018d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d3a:	4606      	mov	r6, r0
 8018d3c:	460f      	mov	r7, r1
 8018d3e:	f7e7 fc6b 	bl	8000618 <__aeabi_dmul>
 8018d42:	a33b      	add	r3, pc, #236	; (adr r3, 8018e30 <__ieee754_asin+0x2f0>)
 8018d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d48:	f7e7 fab0 	bl	80002ac <__adddf3>
 8018d4c:	4632      	mov	r2, r6
 8018d4e:	463b      	mov	r3, r7
 8018d50:	f7e7 fc62 	bl	8000618 <__aeabi_dmul>
 8018d54:	a338      	add	r3, pc, #224	; (adr r3, 8018e38 <__ieee754_asin+0x2f8>)
 8018d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d5a:	f7e7 faa5 	bl	80002a8 <__aeabi_dsub>
 8018d5e:	4632      	mov	r2, r6
 8018d60:	463b      	mov	r3, r7
 8018d62:	f7e7 fc59 	bl	8000618 <__aeabi_dmul>
 8018d66:	a336      	add	r3, pc, #216	; (adr r3, 8018e40 <__ieee754_asin+0x300>)
 8018d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d6c:	f7e7 fa9e 	bl	80002ac <__adddf3>
 8018d70:	4632      	mov	r2, r6
 8018d72:	463b      	mov	r3, r7
 8018d74:	f7e7 fc50 	bl	8000618 <__aeabi_dmul>
 8018d78:	a333      	add	r3, pc, #204	; (adr r3, 8018e48 <__ieee754_asin+0x308>)
 8018d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d7e:	f7e7 fa93 	bl	80002a8 <__aeabi_dsub>
 8018d82:	4632      	mov	r2, r6
 8018d84:	463b      	mov	r3, r7
 8018d86:	f7e7 fc47 	bl	8000618 <__aeabi_dmul>
 8018d8a:	a331      	add	r3, pc, #196	; (adr r3, 8018e50 <__ieee754_asin+0x310>)
 8018d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d90:	f7e7 fa8c 	bl	80002ac <__adddf3>
 8018d94:	4632      	mov	r2, r6
 8018d96:	463b      	mov	r3, r7
 8018d98:	f7e7 fc3e 	bl	8000618 <__aeabi_dmul>
 8018d9c:	a32e      	add	r3, pc, #184	; (adr r3, 8018e58 <__ieee754_asin+0x318>)
 8018d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018da2:	4680      	mov	r8, r0
 8018da4:	4689      	mov	r9, r1
 8018da6:	4630      	mov	r0, r6
 8018da8:	4639      	mov	r1, r7
 8018daa:	f7e7 fc35 	bl	8000618 <__aeabi_dmul>
 8018dae:	a32c      	add	r3, pc, #176	; (adr r3, 8018e60 <__ieee754_asin+0x320>)
 8018db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018db4:	f7e7 fa78 	bl	80002a8 <__aeabi_dsub>
 8018db8:	4632      	mov	r2, r6
 8018dba:	463b      	mov	r3, r7
 8018dbc:	f7e7 fc2c 	bl	8000618 <__aeabi_dmul>
 8018dc0:	a329      	add	r3, pc, #164	; (adr r3, 8018e68 <__ieee754_asin+0x328>)
 8018dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dc6:	f7e7 fa71 	bl	80002ac <__adddf3>
 8018dca:	4632      	mov	r2, r6
 8018dcc:	463b      	mov	r3, r7
 8018dce:	f7e7 fc23 	bl	8000618 <__aeabi_dmul>
 8018dd2:	a327      	add	r3, pc, #156	; (adr r3, 8018e70 <__ieee754_asin+0x330>)
 8018dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dd8:	f7e7 fa66 	bl	80002a8 <__aeabi_dsub>
 8018ddc:	4632      	mov	r2, r6
 8018dde:	463b      	mov	r3, r7
 8018de0:	f7e7 fc1a 	bl	8000618 <__aeabi_dmul>
 8018de4:	2200      	movs	r2, #0
 8018de6:	4b26      	ldr	r3, [pc, #152]	; (8018e80 <__ieee754_asin+0x340>)
 8018de8:	f7e7 fa60 	bl	80002ac <__adddf3>
 8018dec:	4602      	mov	r2, r0
 8018dee:	460b      	mov	r3, r1
 8018df0:	4640      	mov	r0, r8
 8018df2:	4649      	mov	r1, r9
 8018df4:	f7e7 fd3a 	bl	800086c <__aeabi_ddiv>
 8018df8:	4622      	mov	r2, r4
 8018dfa:	462b      	mov	r3, r5
 8018dfc:	f7e7 fc0c 	bl	8000618 <__aeabi_dmul>
 8018e00:	4602      	mov	r2, r0
 8018e02:	460b      	mov	r3, r1
 8018e04:	4620      	mov	r0, r4
 8018e06:	4629      	mov	r1, r5
 8018e08:	e6c2      	b.n	8018b90 <__ieee754_asin+0x50>
 8018e0a:	bf00      	nop
 8018e0c:	f3af 8000 	nop.w
 8018e10:	54442d18 	.word	0x54442d18
 8018e14:	3ff921fb 	.word	0x3ff921fb
 8018e18:	33145c07 	.word	0x33145c07
 8018e1c:	3c91a626 	.word	0x3c91a626
 8018e20:	8800759c 	.word	0x8800759c
 8018e24:	7e37e43c 	.word	0x7e37e43c
 8018e28:	0dfdf709 	.word	0x0dfdf709
 8018e2c:	3f023de1 	.word	0x3f023de1
 8018e30:	7501b288 	.word	0x7501b288
 8018e34:	3f49efe0 	.word	0x3f49efe0
 8018e38:	b5688f3b 	.word	0xb5688f3b
 8018e3c:	3fa48228 	.word	0x3fa48228
 8018e40:	0e884455 	.word	0x0e884455
 8018e44:	3fc9c155 	.word	0x3fc9c155
 8018e48:	03eb6f7d 	.word	0x03eb6f7d
 8018e4c:	3fd4d612 	.word	0x3fd4d612
 8018e50:	55555555 	.word	0x55555555
 8018e54:	3fc55555 	.word	0x3fc55555
 8018e58:	b12e9282 	.word	0xb12e9282
 8018e5c:	3fb3b8c5 	.word	0x3fb3b8c5
 8018e60:	1b8d0159 	.word	0x1b8d0159
 8018e64:	3fe6066c 	.word	0x3fe6066c
 8018e68:	9c598ac8 	.word	0x9c598ac8
 8018e6c:	40002ae5 	.word	0x40002ae5
 8018e70:	1c8a2d4b 	.word	0x1c8a2d4b
 8018e74:	40033a27 	.word	0x40033a27
 8018e78:	3fefffff 	.word	0x3fefffff
 8018e7c:	3fdfffff 	.word	0x3fdfffff
 8018e80:	3ff00000 	.word	0x3ff00000
 8018e84:	3fe00000 	.word	0x3fe00000
 8018e88:	3fef3332 	.word	0x3fef3332
 8018e8c:	ee10 2a10 	vmov	r2, s0
 8018e90:	ee10 0a10 	vmov	r0, s0
 8018e94:	465b      	mov	r3, fp
 8018e96:	4659      	mov	r1, fp
 8018e98:	f7e7 fa08 	bl	80002ac <__adddf3>
 8018e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018ea0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018ea4:	4640      	mov	r0, r8
 8018ea6:	4649      	mov	r1, r9
 8018ea8:	f7e7 fce0 	bl	800086c <__aeabi_ddiv>
 8018eac:	4602      	mov	r2, r0
 8018eae:	460b      	mov	r3, r1
 8018eb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018eb4:	f7e7 fbb0 	bl	8000618 <__aeabi_dmul>
 8018eb8:	2600      	movs	r6, #0
 8018eba:	4680      	mov	r8, r0
 8018ebc:	4689      	mov	r9, r1
 8018ebe:	4632      	mov	r2, r6
 8018ec0:	465b      	mov	r3, fp
 8018ec2:	4630      	mov	r0, r6
 8018ec4:	4659      	mov	r1, fp
 8018ec6:	f7e7 fba7 	bl	8000618 <__aeabi_dmul>
 8018eca:	4602      	mov	r2, r0
 8018ecc:	460b      	mov	r3, r1
 8018ece:	4620      	mov	r0, r4
 8018ed0:	4629      	mov	r1, r5
 8018ed2:	f7e7 f9e9 	bl	80002a8 <__aeabi_dsub>
 8018ed6:	4632      	mov	r2, r6
 8018ed8:	4604      	mov	r4, r0
 8018eda:	460d      	mov	r5, r1
 8018edc:	465b      	mov	r3, fp
 8018ede:	4650      	mov	r0, sl
 8018ee0:	4659      	mov	r1, fp
 8018ee2:	f7e7 f9e3 	bl	80002ac <__adddf3>
 8018ee6:	4602      	mov	r2, r0
 8018ee8:	460b      	mov	r3, r1
 8018eea:	4620      	mov	r0, r4
 8018eec:	4629      	mov	r1, r5
 8018eee:	f7e7 fcbd 	bl	800086c <__aeabi_ddiv>
 8018ef2:	4602      	mov	r2, r0
 8018ef4:	460b      	mov	r3, r1
 8018ef6:	f7e7 f9d9 	bl	80002ac <__adddf3>
 8018efa:	4602      	mov	r2, r0
 8018efc:	460b      	mov	r3, r1
 8018efe:	a114      	add	r1, pc, #80	; (adr r1, 8018f50 <__ieee754_asin+0x410>)
 8018f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f04:	f7e7 f9d0 	bl	80002a8 <__aeabi_dsub>
 8018f08:	4602      	mov	r2, r0
 8018f0a:	460b      	mov	r3, r1
 8018f0c:	4640      	mov	r0, r8
 8018f0e:	4649      	mov	r1, r9
 8018f10:	f7e7 f9ca 	bl	80002a8 <__aeabi_dsub>
 8018f14:	465f      	mov	r7, fp
 8018f16:	4604      	mov	r4, r0
 8018f18:	460d      	mov	r5, r1
 8018f1a:	4632      	mov	r2, r6
 8018f1c:	465b      	mov	r3, fp
 8018f1e:	4630      	mov	r0, r6
 8018f20:	4639      	mov	r1, r7
 8018f22:	f7e7 f9c3 	bl	80002ac <__adddf3>
 8018f26:	4602      	mov	r2, r0
 8018f28:	460b      	mov	r3, r1
 8018f2a:	a10b      	add	r1, pc, #44	; (adr r1, 8018f58 <__ieee754_asin+0x418>)
 8018f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f30:	f7e7 f9ba 	bl	80002a8 <__aeabi_dsub>
 8018f34:	4602      	mov	r2, r0
 8018f36:	460b      	mov	r3, r1
 8018f38:	4620      	mov	r0, r4
 8018f3a:	4629      	mov	r1, r5
 8018f3c:	f7e7 f9b4 	bl	80002a8 <__aeabi_dsub>
 8018f40:	4602      	mov	r2, r0
 8018f42:	460b      	mov	r3, r1
 8018f44:	a104      	add	r1, pc, #16	; (adr r1, 8018f58 <__ieee754_asin+0x418>)
 8018f46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018f4a:	e6dd      	b.n	8018d08 <__ieee754_asin+0x1c8>
 8018f4c:	f3af 8000 	nop.w
 8018f50:	33145c07 	.word	0x33145c07
 8018f54:	3c91a626 	.word	0x3c91a626
 8018f58:	54442d18 	.word	0x54442d18
 8018f5c:	3fe921fb 	.word	0x3fe921fb

08018f60 <__ieee754_atan2>:
 8018f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f64:	ec57 6b11 	vmov	r6, r7, d1
 8018f68:	4273      	negs	r3, r6
 8018f6a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8018f6e:	4333      	orrs	r3, r6
 8018f70:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8019118 <__ieee754_atan2+0x1b8>
 8018f74:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8018f78:	4573      	cmp	r3, lr
 8018f7a:	ec51 0b10 	vmov	r0, r1, d0
 8018f7e:	ee11 8a10 	vmov	r8, s2
 8018f82:	d80a      	bhi.n	8018f9a <__ieee754_atan2+0x3a>
 8018f84:	4244      	negs	r4, r0
 8018f86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018f8a:	4304      	orrs	r4, r0
 8018f8c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8018f90:	4574      	cmp	r4, lr
 8018f92:	468c      	mov	ip, r1
 8018f94:	ee10 9a10 	vmov	r9, s0
 8018f98:	d907      	bls.n	8018faa <__ieee754_atan2+0x4a>
 8018f9a:	4632      	mov	r2, r6
 8018f9c:	463b      	mov	r3, r7
 8018f9e:	f7e7 f985 	bl	80002ac <__adddf3>
 8018fa2:	ec41 0b10 	vmov	d0, r0, r1
 8018fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018faa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8018fae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018fb2:	4334      	orrs	r4, r6
 8018fb4:	d103      	bne.n	8018fbe <__ieee754_atan2+0x5e>
 8018fb6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018fba:	f000 be75 	b.w	8019ca8 <atan>
 8018fbe:	17bc      	asrs	r4, r7, #30
 8018fc0:	f004 0402 	and.w	r4, r4, #2
 8018fc4:	ea53 0909 	orrs.w	r9, r3, r9
 8018fc8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8018fcc:	d107      	bne.n	8018fde <__ieee754_atan2+0x7e>
 8018fce:	2c02      	cmp	r4, #2
 8018fd0:	d073      	beq.n	80190ba <__ieee754_atan2+0x15a>
 8018fd2:	2c03      	cmp	r4, #3
 8018fd4:	d1e5      	bne.n	8018fa2 <__ieee754_atan2+0x42>
 8018fd6:	a13e      	add	r1, pc, #248	; (adr r1, 80190d0 <__ieee754_atan2+0x170>)
 8018fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018fdc:	e7e1      	b.n	8018fa2 <__ieee754_atan2+0x42>
 8018fde:	ea52 0808 	orrs.w	r8, r2, r8
 8018fe2:	d106      	bne.n	8018ff2 <__ieee754_atan2+0x92>
 8018fe4:	f1bc 0f00 	cmp.w	ip, #0
 8018fe8:	da6b      	bge.n	80190c2 <__ieee754_atan2+0x162>
 8018fea:	a13b      	add	r1, pc, #236	; (adr r1, 80190d8 <__ieee754_atan2+0x178>)
 8018fec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018ff0:	e7d7      	b.n	8018fa2 <__ieee754_atan2+0x42>
 8018ff2:	4572      	cmp	r2, lr
 8018ff4:	d120      	bne.n	8019038 <__ieee754_atan2+0xd8>
 8018ff6:	4293      	cmp	r3, r2
 8018ff8:	d111      	bne.n	801901e <__ieee754_atan2+0xbe>
 8018ffa:	2c02      	cmp	r4, #2
 8018ffc:	d007      	beq.n	801900e <__ieee754_atan2+0xae>
 8018ffe:	2c03      	cmp	r4, #3
 8019000:	d009      	beq.n	8019016 <__ieee754_atan2+0xb6>
 8019002:	2c01      	cmp	r4, #1
 8019004:	d155      	bne.n	80190b2 <__ieee754_atan2+0x152>
 8019006:	a136      	add	r1, pc, #216	; (adr r1, 80190e0 <__ieee754_atan2+0x180>)
 8019008:	e9d1 0100 	ldrd	r0, r1, [r1]
 801900c:	e7c9      	b.n	8018fa2 <__ieee754_atan2+0x42>
 801900e:	a136      	add	r1, pc, #216	; (adr r1, 80190e8 <__ieee754_atan2+0x188>)
 8019010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019014:	e7c5      	b.n	8018fa2 <__ieee754_atan2+0x42>
 8019016:	a136      	add	r1, pc, #216	; (adr r1, 80190f0 <__ieee754_atan2+0x190>)
 8019018:	e9d1 0100 	ldrd	r0, r1, [r1]
 801901c:	e7c1      	b.n	8018fa2 <__ieee754_atan2+0x42>
 801901e:	2c02      	cmp	r4, #2
 8019020:	d04b      	beq.n	80190ba <__ieee754_atan2+0x15a>
 8019022:	2c03      	cmp	r4, #3
 8019024:	d0d7      	beq.n	8018fd6 <__ieee754_atan2+0x76>
 8019026:	2c01      	cmp	r4, #1
 8019028:	f04f 0000 	mov.w	r0, #0
 801902c:	d102      	bne.n	8019034 <__ieee754_atan2+0xd4>
 801902e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019032:	e7b6      	b.n	8018fa2 <__ieee754_atan2+0x42>
 8019034:	2100      	movs	r1, #0
 8019036:	e7b4      	b.n	8018fa2 <__ieee754_atan2+0x42>
 8019038:	4573      	cmp	r3, lr
 801903a:	d0d3      	beq.n	8018fe4 <__ieee754_atan2+0x84>
 801903c:	1a9b      	subs	r3, r3, r2
 801903e:	151b      	asrs	r3, r3, #20
 8019040:	2b3c      	cmp	r3, #60	; 0x3c
 8019042:	dc1e      	bgt.n	8019082 <__ieee754_atan2+0x122>
 8019044:	2f00      	cmp	r7, #0
 8019046:	da01      	bge.n	801904c <__ieee754_atan2+0xec>
 8019048:	333c      	adds	r3, #60	; 0x3c
 801904a:	db1e      	blt.n	801908a <__ieee754_atan2+0x12a>
 801904c:	4632      	mov	r2, r6
 801904e:	463b      	mov	r3, r7
 8019050:	f7e7 fc0c 	bl	800086c <__aeabi_ddiv>
 8019054:	ec41 0b10 	vmov	d0, r0, r1
 8019058:	f000 ffc6 	bl	8019fe8 <fabs>
 801905c:	f000 fe24 	bl	8019ca8 <atan>
 8019060:	ec51 0b10 	vmov	r0, r1, d0
 8019064:	2c01      	cmp	r4, #1
 8019066:	d013      	beq.n	8019090 <__ieee754_atan2+0x130>
 8019068:	2c02      	cmp	r4, #2
 801906a:	d015      	beq.n	8019098 <__ieee754_atan2+0x138>
 801906c:	2c00      	cmp	r4, #0
 801906e:	d098      	beq.n	8018fa2 <__ieee754_atan2+0x42>
 8019070:	a321      	add	r3, pc, #132	; (adr r3, 80190f8 <__ieee754_atan2+0x198>)
 8019072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019076:	f7e7 f917 	bl	80002a8 <__aeabi_dsub>
 801907a:	a321      	add	r3, pc, #132	; (adr r3, 8019100 <__ieee754_atan2+0x1a0>)
 801907c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019080:	e014      	b.n	80190ac <__ieee754_atan2+0x14c>
 8019082:	a121      	add	r1, pc, #132	; (adr r1, 8019108 <__ieee754_atan2+0x1a8>)
 8019084:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019088:	e7ec      	b.n	8019064 <__ieee754_atan2+0x104>
 801908a:	2000      	movs	r0, #0
 801908c:	2100      	movs	r1, #0
 801908e:	e7e9      	b.n	8019064 <__ieee754_atan2+0x104>
 8019090:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019094:	4619      	mov	r1, r3
 8019096:	e784      	b.n	8018fa2 <__ieee754_atan2+0x42>
 8019098:	a317      	add	r3, pc, #92	; (adr r3, 80190f8 <__ieee754_atan2+0x198>)
 801909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801909e:	f7e7 f903 	bl	80002a8 <__aeabi_dsub>
 80190a2:	4602      	mov	r2, r0
 80190a4:	460b      	mov	r3, r1
 80190a6:	a116      	add	r1, pc, #88	; (adr r1, 8019100 <__ieee754_atan2+0x1a0>)
 80190a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80190ac:	f7e7 f8fc 	bl	80002a8 <__aeabi_dsub>
 80190b0:	e777      	b.n	8018fa2 <__ieee754_atan2+0x42>
 80190b2:	a117      	add	r1, pc, #92	; (adr r1, 8019110 <__ieee754_atan2+0x1b0>)
 80190b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80190b8:	e773      	b.n	8018fa2 <__ieee754_atan2+0x42>
 80190ba:	a111      	add	r1, pc, #68	; (adr r1, 8019100 <__ieee754_atan2+0x1a0>)
 80190bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80190c0:	e76f      	b.n	8018fa2 <__ieee754_atan2+0x42>
 80190c2:	a111      	add	r1, pc, #68	; (adr r1, 8019108 <__ieee754_atan2+0x1a8>)
 80190c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80190c8:	e76b      	b.n	8018fa2 <__ieee754_atan2+0x42>
 80190ca:	bf00      	nop
 80190cc:	f3af 8000 	nop.w
 80190d0:	54442d18 	.word	0x54442d18
 80190d4:	c00921fb 	.word	0xc00921fb
 80190d8:	54442d18 	.word	0x54442d18
 80190dc:	bff921fb 	.word	0xbff921fb
 80190e0:	54442d18 	.word	0x54442d18
 80190e4:	bfe921fb 	.word	0xbfe921fb
 80190e8:	7f3321d2 	.word	0x7f3321d2
 80190ec:	4002d97c 	.word	0x4002d97c
 80190f0:	7f3321d2 	.word	0x7f3321d2
 80190f4:	c002d97c 	.word	0xc002d97c
 80190f8:	33145c07 	.word	0x33145c07
 80190fc:	3ca1a626 	.word	0x3ca1a626
 8019100:	54442d18 	.word	0x54442d18
 8019104:	400921fb 	.word	0x400921fb
 8019108:	54442d18 	.word	0x54442d18
 801910c:	3ff921fb 	.word	0x3ff921fb
 8019110:	54442d18 	.word	0x54442d18
 8019114:	3fe921fb 	.word	0x3fe921fb
 8019118:	7ff00000 	.word	0x7ff00000
 801911c:	00000000 	.word	0x00000000

08019120 <__ieee754_pow>:
 8019120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019124:	b091      	sub	sp, #68	; 0x44
 8019126:	ed8d 1b00 	vstr	d1, [sp]
 801912a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801912e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8019132:	ea58 0302 	orrs.w	r3, r8, r2
 8019136:	ec57 6b10 	vmov	r6, r7, d0
 801913a:	f000 84be 	beq.w	8019aba <__ieee754_pow+0x99a>
 801913e:	4b7a      	ldr	r3, [pc, #488]	; (8019328 <__ieee754_pow+0x208>)
 8019140:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8019144:	429c      	cmp	r4, r3
 8019146:	463d      	mov	r5, r7
 8019148:	ee10 aa10 	vmov	sl, s0
 801914c:	dc09      	bgt.n	8019162 <__ieee754_pow+0x42>
 801914e:	d103      	bne.n	8019158 <__ieee754_pow+0x38>
 8019150:	b93e      	cbnz	r6, 8019162 <__ieee754_pow+0x42>
 8019152:	45a0      	cmp	r8, r4
 8019154:	dc0d      	bgt.n	8019172 <__ieee754_pow+0x52>
 8019156:	e001      	b.n	801915c <__ieee754_pow+0x3c>
 8019158:	4598      	cmp	r8, r3
 801915a:	dc02      	bgt.n	8019162 <__ieee754_pow+0x42>
 801915c:	4598      	cmp	r8, r3
 801915e:	d10e      	bne.n	801917e <__ieee754_pow+0x5e>
 8019160:	b16a      	cbz	r2, 801917e <__ieee754_pow+0x5e>
 8019162:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019166:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801916a:	ea54 030a 	orrs.w	r3, r4, sl
 801916e:	f000 84a4 	beq.w	8019aba <__ieee754_pow+0x99a>
 8019172:	486e      	ldr	r0, [pc, #440]	; (801932c <__ieee754_pow+0x20c>)
 8019174:	b011      	add	sp, #68	; 0x44
 8019176:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801917a:	f000 bf49 	b.w	801a010 <nan>
 801917e:	2d00      	cmp	r5, #0
 8019180:	da53      	bge.n	801922a <__ieee754_pow+0x10a>
 8019182:	4b6b      	ldr	r3, [pc, #428]	; (8019330 <__ieee754_pow+0x210>)
 8019184:	4598      	cmp	r8, r3
 8019186:	dc4d      	bgt.n	8019224 <__ieee754_pow+0x104>
 8019188:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801918c:	4598      	cmp	r8, r3
 801918e:	dd4c      	ble.n	801922a <__ieee754_pow+0x10a>
 8019190:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019194:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019198:	2b14      	cmp	r3, #20
 801919a:	dd26      	ble.n	80191ea <__ieee754_pow+0xca>
 801919c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80191a0:	fa22 f103 	lsr.w	r1, r2, r3
 80191a4:	fa01 f303 	lsl.w	r3, r1, r3
 80191a8:	4293      	cmp	r3, r2
 80191aa:	d13e      	bne.n	801922a <__ieee754_pow+0x10a>
 80191ac:	f001 0101 	and.w	r1, r1, #1
 80191b0:	f1c1 0b02 	rsb	fp, r1, #2
 80191b4:	2a00      	cmp	r2, #0
 80191b6:	d15b      	bne.n	8019270 <__ieee754_pow+0x150>
 80191b8:	4b5b      	ldr	r3, [pc, #364]	; (8019328 <__ieee754_pow+0x208>)
 80191ba:	4598      	cmp	r8, r3
 80191bc:	d124      	bne.n	8019208 <__ieee754_pow+0xe8>
 80191be:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80191c2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80191c6:	ea53 030a 	orrs.w	r3, r3, sl
 80191ca:	f000 8476 	beq.w	8019aba <__ieee754_pow+0x99a>
 80191ce:	4b59      	ldr	r3, [pc, #356]	; (8019334 <__ieee754_pow+0x214>)
 80191d0:	429c      	cmp	r4, r3
 80191d2:	dd2d      	ble.n	8019230 <__ieee754_pow+0x110>
 80191d4:	f1b9 0f00 	cmp.w	r9, #0
 80191d8:	f280 8473 	bge.w	8019ac2 <__ieee754_pow+0x9a2>
 80191dc:	2000      	movs	r0, #0
 80191de:	2100      	movs	r1, #0
 80191e0:	ec41 0b10 	vmov	d0, r0, r1
 80191e4:	b011      	add	sp, #68	; 0x44
 80191e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191ea:	2a00      	cmp	r2, #0
 80191ec:	d13e      	bne.n	801926c <__ieee754_pow+0x14c>
 80191ee:	f1c3 0314 	rsb	r3, r3, #20
 80191f2:	fa48 f103 	asr.w	r1, r8, r3
 80191f6:	fa01 f303 	lsl.w	r3, r1, r3
 80191fa:	4543      	cmp	r3, r8
 80191fc:	f040 8469 	bne.w	8019ad2 <__ieee754_pow+0x9b2>
 8019200:	f001 0101 	and.w	r1, r1, #1
 8019204:	f1c1 0b02 	rsb	fp, r1, #2
 8019208:	4b4b      	ldr	r3, [pc, #300]	; (8019338 <__ieee754_pow+0x218>)
 801920a:	4598      	cmp	r8, r3
 801920c:	d118      	bne.n	8019240 <__ieee754_pow+0x120>
 801920e:	f1b9 0f00 	cmp.w	r9, #0
 8019212:	f280 845a 	bge.w	8019aca <__ieee754_pow+0x9aa>
 8019216:	4948      	ldr	r1, [pc, #288]	; (8019338 <__ieee754_pow+0x218>)
 8019218:	4632      	mov	r2, r6
 801921a:	463b      	mov	r3, r7
 801921c:	2000      	movs	r0, #0
 801921e:	f7e7 fb25 	bl	800086c <__aeabi_ddiv>
 8019222:	e7dd      	b.n	80191e0 <__ieee754_pow+0xc0>
 8019224:	f04f 0b02 	mov.w	fp, #2
 8019228:	e7c4      	b.n	80191b4 <__ieee754_pow+0x94>
 801922a:	f04f 0b00 	mov.w	fp, #0
 801922e:	e7c1      	b.n	80191b4 <__ieee754_pow+0x94>
 8019230:	f1b9 0f00 	cmp.w	r9, #0
 8019234:	dad2      	bge.n	80191dc <__ieee754_pow+0xbc>
 8019236:	e9dd 0300 	ldrd	r0, r3, [sp]
 801923a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801923e:	e7cf      	b.n	80191e0 <__ieee754_pow+0xc0>
 8019240:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8019244:	d106      	bne.n	8019254 <__ieee754_pow+0x134>
 8019246:	4632      	mov	r2, r6
 8019248:	463b      	mov	r3, r7
 801924a:	4610      	mov	r0, r2
 801924c:	4619      	mov	r1, r3
 801924e:	f7e7 f9e3 	bl	8000618 <__aeabi_dmul>
 8019252:	e7c5      	b.n	80191e0 <__ieee754_pow+0xc0>
 8019254:	4b39      	ldr	r3, [pc, #228]	; (801933c <__ieee754_pow+0x21c>)
 8019256:	4599      	cmp	r9, r3
 8019258:	d10a      	bne.n	8019270 <__ieee754_pow+0x150>
 801925a:	2d00      	cmp	r5, #0
 801925c:	db08      	blt.n	8019270 <__ieee754_pow+0x150>
 801925e:	ec47 6b10 	vmov	d0, r6, r7
 8019262:	b011      	add	sp, #68	; 0x44
 8019264:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019268:	f000 bc68 	b.w	8019b3c <__ieee754_sqrt>
 801926c:	f04f 0b00 	mov.w	fp, #0
 8019270:	ec47 6b10 	vmov	d0, r6, r7
 8019274:	f000 feb8 	bl	8019fe8 <fabs>
 8019278:	ec51 0b10 	vmov	r0, r1, d0
 801927c:	f1ba 0f00 	cmp.w	sl, #0
 8019280:	d127      	bne.n	80192d2 <__ieee754_pow+0x1b2>
 8019282:	b124      	cbz	r4, 801928e <__ieee754_pow+0x16e>
 8019284:	4b2c      	ldr	r3, [pc, #176]	; (8019338 <__ieee754_pow+0x218>)
 8019286:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801928a:	429a      	cmp	r2, r3
 801928c:	d121      	bne.n	80192d2 <__ieee754_pow+0x1b2>
 801928e:	f1b9 0f00 	cmp.w	r9, #0
 8019292:	da05      	bge.n	80192a0 <__ieee754_pow+0x180>
 8019294:	4602      	mov	r2, r0
 8019296:	460b      	mov	r3, r1
 8019298:	2000      	movs	r0, #0
 801929a:	4927      	ldr	r1, [pc, #156]	; (8019338 <__ieee754_pow+0x218>)
 801929c:	f7e7 fae6 	bl	800086c <__aeabi_ddiv>
 80192a0:	2d00      	cmp	r5, #0
 80192a2:	da9d      	bge.n	80191e0 <__ieee754_pow+0xc0>
 80192a4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80192a8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80192ac:	ea54 030b 	orrs.w	r3, r4, fp
 80192b0:	d108      	bne.n	80192c4 <__ieee754_pow+0x1a4>
 80192b2:	4602      	mov	r2, r0
 80192b4:	460b      	mov	r3, r1
 80192b6:	4610      	mov	r0, r2
 80192b8:	4619      	mov	r1, r3
 80192ba:	f7e6 fff5 	bl	80002a8 <__aeabi_dsub>
 80192be:	4602      	mov	r2, r0
 80192c0:	460b      	mov	r3, r1
 80192c2:	e7ac      	b.n	801921e <__ieee754_pow+0xfe>
 80192c4:	f1bb 0f01 	cmp.w	fp, #1
 80192c8:	d18a      	bne.n	80191e0 <__ieee754_pow+0xc0>
 80192ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80192ce:	4619      	mov	r1, r3
 80192d0:	e786      	b.n	80191e0 <__ieee754_pow+0xc0>
 80192d2:	0fed      	lsrs	r5, r5, #31
 80192d4:	1e6b      	subs	r3, r5, #1
 80192d6:	930d      	str	r3, [sp, #52]	; 0x34
 80192d8:	ea5b 0303 	orrs.w	r3, fp, r3
 80192dc:	d102      	bne.n	80192e4 <__ieee754_pow+0x1c4>
 80192de:	4632      	mov	r2, r6
 80192e0:	463b      	mov	r3, r7
 80192e2:	e7e8      	b.n	80192b6 <__ieee754_pow+0x196>
 80192e4:	4b16      	ldr	r3, [pc, #88]	; (8019340 <__ieee754_pow+0x220>)
 80192e6:	4598      	cmp	r8, r3
 80192e8:	f340 80fe 	ble.w	80194e8 <__ieee754_pow+0x3c8>
 80192ec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80192f0:	4598      	cmp	r8, r3
 80192f2:	dd0a      	ble.n	801930a <__ieee754_pow+0x1ea>
 80192f4:	4b0f      	ldr	r3, [pc, #60]	; (8019334 <__ieee754_pow+0x214>)
 80192f6:	429c      	cmp	r4, r3
 80192f8:	dc0d      	bgt.n	8019316 <__ieee754_pow+0x1f6>
 80192fa:	f1b9 0f00 	cmp.w	r9, #0
 80192fe:	f6bf af6d 	bge.w	80191dc <__ieee754_pow+0xbc>
 8019302:	a307      	add	r3, pc, #28	; (adr r3, 8019320 <__ieee754_pow+0x200>)
 8019304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019308:	e79f      	b.n	801924a <__ieee754_pow+0x12a>
 801930a:	4b0e      	ldr	r3, [pc, #56]	; (8019344 <__ieee754_pow+0x224>)
 801930c:	429c      	cmp	r4, r3
 801930e:	ddf4      	ble.n	80192fa <__ieee754_pow+0x1da>
 8019310:	4b09      	ldr	r3, [pc, #36]	; (8019338 <__ieee754_pow+0x218>)
 8019312:	429c      	cmp	r4, r3
 8019314:	dd18      	ble.n	8019348 <__ieee754_pow+0x228>
 8019316:	f1b9 0f00 	cmp.w	r9, #0
 801931a:	dcf2      	bgt.n	8019302 <__ieee754_pow+0x1e2>
 801931c:	e75e      	b.n	80191dc <__ieee754_pow+0xbc>
 801931e:	bf00      	nop
 8019320:	8800759c 	.word	0x8800759c
 8019324:	7e37e43c 	.word	0x7e37e43c
 8019328:	7ff00000 	.word	0x7ff00000
 801932c:	0801ad01 	.word	0x0801ad01
 8019330:	433fffff 	.word	0x433fffff
 8019334:	3fefffff 	.word	0x3fefffff
 8019338:	3ff00000 	.word	0x3ff00000
 801933c:	3fe00000 	.word	0x3fe00000
 8019340:	41e00000 	.word	0x41e00000
 8019344:	3feffffe 	.word	0x3feffffe
 8019348:	2200      	movs	r2, #0
 801934a:	4b63      	ldr	r3, [pc, #396]	; (80194d8 <__ieee754_pow+0x3b8>)
 801934c:	f7e6 ffac 	bl	80002a8 <__aeabi_dsub>
 8019350:	a355      	add	r3, pc, #340	; (adr r3, 80194a8 <__ieee754_pow+0x388>)
 8019352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019356:	4604      	mov	r4, r0
 8019358:	460d      	mov	r5, r1
 801935a:	f7e7 f95d 	bl	8000618 <__aeabi_dmul>
 801935e:	a354      	add	r3, pc, #336	; (adr r3, 80194b0 <__ieee754_pow+0x390>)
 8019360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019364:	4606      	mov	r6, r0
 8019366:	460f      	mov	r7, r1
 8019368:	4620      	mov	r0, r4
 801936a:	4629      	mov	r1, r5
 801936c:	f7e7 f954 	bl	8000618 <__aeabi_dmul>
 8019370:	2200      	movs	r2, #0
 8019372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019376:	4b59      	ldr	r3, [pc, #356]	; (80194dc <__ieee754_pow+0x3bc>)
 8019378:	4620      	mov	r0, r4
 801937a:	4629      	mov	r1, r5
 801937c:	f7e7 f94c 	bl	8000618 <__aeabi_dmul>
 8019380:	4602      	mov	r2, r0
 8019382:	460b      	mov	r3, r1
 8019384:	a14c      	add	r1, pc, #304	; (adr r1, 80194b8 <__ieee754_pow+0x398>)
 8019386:	e9d1 0100 	ldrd	r0, r1, [r1]
 801938a:	f7e6 ff8d 	bl	80002a8 <__aeabi_dsub>
 801938e:	4622      	mov	r2, r4
 8019390:	462b      	mov	r3, r5
 8019392:	f7e7 f941 	bl	8000618 <__aeabi_dmul>
 8019396:	4602      	mov	r2, r0
 8019398:	460b      	mov	r3, r1
 801939a:	2000      	movs	r0, #0
 801939c:	4950      	ldr	r1, [pc, #320]	; (80194e0 <__ieee754_pow+0x3c0>)
 801939e:	f7e6 ff83 	bl	80002a8 <__aeabi_dsub>
 80193a2:	4622      	mov	r2, r4
 80193a4:	462b      	mov	r3, r5
 80193a6:	4680      	mov	r8, r0
 80193a8:	4689      	mov	r9, r1
 80193aa:	4620      	mov	r0, r4
 80193ac:	4629      	mov	r1, r5
 80193ae:	f7e7 f933 	bl	8000618 <__aeabi_dmul>
 80193b2:	4602      	mov	r2, r0
 80193b4:	460b      	mov	r3, r1
 80193b6:	4640      	mov	r0, r8
 80193b8:	4649      	mov	r1, r9
 80193ba:	f7e7 f92d 	bl	8000618 <__aeabi_dmul>
 80193be:	a340      	add	r3, pc, #256	; (adr r3, 80194c0 <__ieee754_pow+0x3a0>)
 80193c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193c4:	f7e7 f928 	bl	8000618 <__aeabi_dmul>
 80193c8:	4602      	mov	r2, r0
 80193ca:	460b      	mov	r3, r1
 80193cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80193d0:	f7e6 ff6a 	bl	80002a8 <__aeabi_dsub>
 80193d4:	4602      	mov	r2, r0
 80193d6:	460b      	mov	r3, r1
 80193d8:	4604      	mov	r4, r0
 80193da:	460d      	mov	r5, r1
 80193dc:	4630      	mov	r0, r6
 80193de:	4639      	mov	r1, r7
 80193e0:	f7e6 ff64 	bl	80002ac <__adddf3>
 80193e4:	2000      	movs	r0, #0
 80193e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80193ea:	4632      	mov	r2, r6
 80193ec:	463b      	mov	r3, r7
 80193ee:	f7e6 ff5b 	bl	80002a8 <__aeabi_dsub>
 80193f2:	4602      	mov	r2, r0
 80193f4:	460b      	mov	r3, r1
 80193f6:	4620      	mov	r0, r4
 80193f8:	4629      	mov	r1, r5
 80193fa:	f7e6 ff55 	bl	80002a8 <__aeabi_dsub>
 80193fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019400:	f10b 33ff 	add.w	r3, fp, #4294967295
 8019404:	4313      	orrs	r3, r2
 8019406:	4606      	mov	r6, r0
 8019408:	460f      	mov	r7, r1
 801940a:	f040 81eb 	bne.w	80197e4 <__ieee754_pow+0x6c4>
 801940e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80194c8 <__ieee754_pow+0x3a8>
 8019412:	e9dd 4500 	ldrd	r4, r5, [sp]
 8019416:	2400      	movs	r4, #0
 8019418:	4622      	mov	r2, r4
 801941a:	462b      	mov	r3, r5
 801941c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019420:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019424:	f7e6 ff40 	bl	80002a8 <__aeabi_dsub>
 8019428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801942c:	f7e7 f8f4 	bl	8000618 <__aeabi_dmul>
 8019430:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019434:	4680      	mov	r8, r0
 8019436:	4689      	mov	r9, r1
 8019438:	4630      	mov	r0, r6
 801943a:	4639      	mov	r1, r7
 801943c:	f7e7 f8ec 	bl	8000618 <__aeabi_dmul>
 8019440:	4602      	mov	r2, r0
 8019442:	460b      	mov	r3, r1
 8019444:	4640      	mov	r0, r8
 8019446:	4649      	mov	r1, r9
 8019448:	f7e6 ff30 	bl	80002ac <__adddf3>
 801944c:	4622      	mov	r2, r4
 801944e:	462b      	mov	r3, r5
 8019450:	4680      	mov	r8, r0
 8019452:	4689      	mov	r9, r1
 8019454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019458:	f7e7 f8de 	bl	8000618 <__aeabi_dmul>
 801945c:	460b      	mov	r3, r1
 801945e:	4604      	mov	r4, r0
 8019460:	460d      	mov	r5, r1
 8019462:	4602      	mov	r2, r0
 8019464:	4649      	mov	r1, r9
 8019466:	4640      	mov	r0, r8
 8019468:	e9cd 4500 	strd	r4, r5, [sp]
 801946c:	f7e6 ff1e 	bl	80002ac <__adddf3>
 8019470:	4b1c      	ldr	r3, [pc, #112]	; (80194e4 <__ieee754_pow+0x3c4>)
 8019472:	4299      	cmp	r1, r3
 8019474:	4606      	mov	r6, r0
 8019476:	460f      	mov	r7, r1
 8019478:	468b      	mov	fp, r1
 801947a:	f340 82f7 	ble.w	8019a6c <__ieee754_pow+0x94c>
 801947e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8019482:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8019486:	4303      	orrs	r3, r0
 8019488:	f000 81ea 	beq.w	8019860 <__ieee754_pow+0x740>
 801948c:	a310      	add	r3, pc, #64	; (adr r3, 80194d0 <__ieee754_pow+0x3b0>)
 801948e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019496:	f7e7 f8bf 	bl	8000618 <__aeabi_dmul>
 801949a:	a30d      	add	r3, pc, #52	; (adr r3, 80194d0 <__ieee754_pow+0x3b0>)
 801949c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194a0:	e6d5      	b.n	801924e <__ieee754_pow+0x12e>
 80194a2:	bf00      	nop
 80194a4:	f3af 8000 	nop.w
 80194a8:	60000000 	.word	0x60000000
 80194ac:	3ff71547 	.word	0x3ff71547
 80194b0:	f85ddf44 	.word	0xf85ddf44
 80194b4:	3e54ae0b 	.word	0x3e54ae0b
 80194b8:	55555555 	.word	0x55555555
 80194bc:	3fd55555 	.word	0x3fd55555
 80194c0:	652b82fe 	.word	0x652b82fe
 80194c4:	3ff71547 	.word	0x3ff71547
 80194c8:	00000000 	.word	0x00000000
 80194cc:	bff00000 	.word	0xbff00000
 80194d0:	8800759c 	.word	0x8800759c
 80194d4:	7e37e43c 	.word	0x7e37e43c
 80194d8:	3ff00000 	.word	0x3ff00000
 80194dc:	3fd00000 	.word	0x3fd00000
 80194e0:	3fe00000 	.word	0x3fe00000
 80194e4:	408fffff 	.word	0x408fffff
 80194e8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80194ec:	f04f 0200 	mov.w	r2, #0
 80194f0:	da05      	bge.n	80194fe <__ieee754_pow+0x3de>
 80194f2:	4bd3      	ldr	r3, [pc, #844]	; (8019840 <__ieee754_pow+0x720>)
 80194f4:	f7e7 f890 	bl	8000618 <__aeabi_dmul>
 80194f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80194fc:	460c      	mov	r4, r1
 80194fe:	1523      	asrs	r3, r4, #20
 8019500:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019504:	4413      	add	r3, r2
 8019506:	9309      	str	r3, [sp, #36]	; 0x24
 8019508:	4bce      	ldr	r3, [pc, #824]	; (8019844 <__ieee754_pow+0x724>)
 801950a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801950e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019512:	429c      	cmp	r4, r3
 8019514:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019518:	dd08      	ble.n	801952c <__ieee754_pow+0x40c>
 801951a:	4bcb      	ldr	r3, [pc, #812]	; (8019848 <__ieee754_pow+0x728>)
 801951c:	429c      	cmp	r4, r3
 801951e:	f340 815e 	ble.w	80197de <__ieee754_pow+0x6be>
 8019522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019524:	3301      	adds	r3, #1
 8019526:	9309      	str	r3, [sp, #36]	; 0x24
 8019528:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801952c:	f04f 0a00 	mov.w	sl, #0
 8019530:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8019534:	930c      	str	r3, [sp, #48]	; 0x30
 8019536:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019538:	4bc4      	ldr	r3, [pc, #784]	; (801984c <__ieee754_pow+0x72c>)
 801953a:	4413      	add	r3, r2
 801953c:	ed93 7b00 	vldr	d7, [r3]
 8019540:	4629      	mov	r1, r5
 8019542:	ec53 2b17 	vmov	r2, r3, d7
 8019546:	ed8d 7b06 	vstr	d7, [sp, #24]
 801954a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801954e:	f7e6 feab 	bl	80002a8 <__aeabi_dsub>
 8019552:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019556:	4606      	mov	r6, r0
 8019558:	460f      	mov	r7, r1
 801955a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801955e:	f7e6 fea5 	bl	80002ac <__adddf3>
 8019562:	4602      	mov	r2, r0
 8019564:	460b      	mov	r3, r1
 8019566:	2000      	movs	r0, #0
 8019568:	49b9      	ldr	r1, [pc, #740]	; (8019850 <__ieee754_pow+0x730>)
 801956a:	f7e7 f97f 	bl	800086c <__aeabi_ddiv>
 801956e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8019572:	4602      	mov	r2, r0
 8019574:	460b      	mov	r3, r1
 8019576:	4630      	mov	r0, r6
 8019578:	4639      	mov	r1, r7
 801957a:	f7e7 f84d 	bl	8000618 <__aeabi_dmul>
 801957e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019582:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8019586:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801958a:	2300      	movs	r3, #0
 801958c:	9302      	str	r3, [sp, #8]
 801958e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019592:	106d      	asrs	r5, r5, #1
 8019594:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019598:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801959c:	2200      	movs	r2, #0
 801959e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80195a2:	4640      	mov	r0, r8
 80195a4:	4649      	mov	r1, r9
 80195a6:	4614      	mov	r4, r2
 80195a8:	461d      	mov	r5, r3
 80195aa:	f7e7 f835 	bl	8000618 <__aeabi_dmul>
 80195ae:	4602      	mov	r2, r0
 80195b0:	460b      	mov	r3, r1
 80195b2:	4630      	mov	r0, r6
 80195b4:	4639      	mov	r1, r7
 80195b6:	f7e6 fe77 	bl	80002a8 <__aeabi_dsub>
 80195ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80195be:	4606      	mov	r6, r0
 80195c0:	460f      	mov	r7, r1
 80195c2:	4620      	mov	r0, r4
 80195c4:	4629      	mov	r1, r5
 80195c6:	f7e6 fe6f 	bl	80002a8 <__aeabi_dsub>
 80195ca:	4602      	mov	r2, r0
 80195cc:	460b      	mov	r3, r1
 80195ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80195d2:	f7e6 fe69 	bl	80002a8 <__aeabi_dsub>
 80195d6:	4642      	mov	r2, r8
 80195d8:	464b      	mov	r3, r9
 80195da:	f7e7 f81d 	bl	8000618 <__aeabi_dmul>
 80195de:	4602      	mov	r2, r0
 80195e0:	460b      	mov	r3, r1
 80195e2:	4630      	mov	r0, r6
 80195e4:	4639      	mov	r1, r7
 80195e6:	f7e6 fe5f 	bl	80002a8 <__aeabi_dsub>
 80195ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80195ee:	f7e7 f813 	bl	8000618 <__aeabi_dmul>
 80195f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80195f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80195fa:	4610      	mov	r0, r2
 80195fc:	4619      	mov	r1, r3
 80195fe:	f7e7 f80b 	bl	8000618 <__aeabi_dmul>
 8019602:	a37b      	add	r3, pc, #492	; (adr r3, 80197f0 <__ieee754_pow+0x6d0>)
 8019604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019608:	4604      	mov	r4, r0
 801960a:	460d      	mov	r5, r1
 801960c:	f7e7 f804 	bl	8000618 <__aeabi_dmul>
 8019610:	a379      	add	r3, pc, #484	; (adr r3, 80197f8 <__ieee754_pow+0x6d8>)
 8019612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019616:	f7e6 fe49 	bl	80002ac <__adddf3>
 801961a:	4622      	mov	r2, r4
 801961c:	462b      	mov	r3, r5
 801961e:	f7e6 fffb 	bl	8000618 <__aeabi_dmul>
 8019622:	a377      	add	r3, pc, #476	; (adr r3, 8019800 <__ieee754_pow+0x6e0>)
 8019624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019628:	f7e6 fe40 	bl	80002ac <__adddf3>
 801962c:	4622      	mov	r2, r4
 801962e:	462b      	mov	r3, r5
 8019630:	f7e6 fff2 	bl	8000618 <__aeabi_dmul>
 8019634:	a374      	add	r3, pc, #464	; (adr r3, 8019808 <__ieee754_pow+0x6e8>)
 8019636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801963a:	f7e6 fe37 	bl	80002ac <__adddf3>
 801963e:	4622      	mov	r2, r4
 8019640:	462b      	mov	r3, r5
 8019642:	f7e6 ffe9 	bl	8000618 <__aeabi_dmul>
 8019646:	a372      	add	r3, pc, #456	; (adr r3, 8019810 <__ieee754_pow+0x6f0>)
 8019648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801964c:	f7e6 fe2e 	bl	80002ac <__adddf3>
 8019650:	4622      	mov	r2, r4
 8019652:	462b      	mov	r3, r5
 8019654:	f7e6 ffe0 	bl	8000618 <__aeabi_dmul>
 8019658:	a36f      	add	r3, pc, #444	; (adr r3, 8019818 <__ieee754_pow+0x6f8>)
 801965a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801965e:	f7e6 fe25 	bl	80002ac <__adddf3>
 8019662:	4622      	mov	r2, r4
 8019664:	4606      	mov	r6, r0
 8019666:	460f      	mov	r7, r1
 8019668:	462b      	mov	r3, r5
 801966a:	4620      	mov	r0, r4
 801966c:	4629      	mov	r1, r5
 801966e:	f7e6 ffd3 	bl	8000618 <__aeabi_dmul>
 8019672:	4602      	mov	r2, r0
 8019674:	460b      	mov	r3, r1
 8019676:	4630      	mov	r0, r6
 8019678:	4639      	mov	r1, r7
 801967a:	f7e6 ffcd 	bl	8000618 <__aeabi_dmul>
 801967e:	4642      	mov	r2, r8
 8019680:	4604      	mov	r4, r0
 8019682:	460d      	mov	r5, r1
 8019684:	464b      	mov	r3, r9
 8019686:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801968a:	f7e6 fe0f 	bl	80002ac <__adddf3>
 801968e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019692:	f7e6 ffc1 	bl	8000618 <__aeabi_dmul>
 8019696:	4622      	mov	r2, r4
 8019698:	462b      	mov	r3, r5
 801969a:	f7e6 fe07 	bl	80002ac <__adddf3>
 801969e:	4642      	mov	r2, r8
 80196a0:	4606      	mov	r6, r0
 80196a2:	460f      	mov	r7, r1
 80196a4:	464b      	mov	r3, r9
 80196a6:	4640      	mov	r0, r8
 80196a8:	4649      	mov	r1, r9
 80196aa:	f7e6 ffb5 	bl	8000618 <__aeabi_dmul>
 80196ae:	2200      	movs	r2, #0
 80196b0:	4b68      	ldr	r3, [pc, #416]	; (8019854 <__ieee754_pow+0x734>)
 80196b2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80196b6:	f7e6 fdf9 	bl	80002ac <__adddf3>
 80196ba:	4632      	mov	r2, r6
 80196bc:	463b      	mov	r3, r7
 80196be:	f7e6 fdf5 	bl	80002ac <__adddf3>
 80196c2:	9802      	ldr	r0, [sp, #8]
 80196c4:	460d      	mov	r5, r1
 80196c6:	4604      	mov	r4, r0
 80196c8:	4602      	mov	r2, r0
 80196ca:	460b      	mov	r3, r1
 80196cc:	4640      	mov	r0, r8
 80196ce:	4649      	mov	r1, r9
 80196d0:	f7e6 ffa2 	bl	8000618 <__aeabi_dmul>
 80196d4:	2200      	movs	r2, #0
 80196d6:	4680      	mov	r8, r0
 80196d8:	4689      	mov	r9, r1
 80196da:	4b5e      	ldr	r3, [pc, #376]	; (8019854 <__ieee754_pow+0x734>)
 80196dc:	4620      	mov	r0, r4
 80196de:	4629      	mov	r1, r5
 80196e0:	f7e6 fde2 	bl	80002a8 <__aeabi_dsub>
 80196e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80196e8:	f7e6 fdde 	bl	80002a8 <__aeabi_dsub>
 80196ec:	4602      	mov	r2, r0
 80196ee:	460b      	mov	r3, r1
 80196f0:	4630      	mov	r0, r6
 80196f2:	4639      	mov	r1, r7
 80196f4:	f7e6 fdd8 	bl	80002a8 <__aeabi_dsub>
 80196f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80196fc:	f7e6 ff8c 	bl	8000618 <__aeabi_dmul>
 8019700:	4622      	mov	r2, r4
 8019702:	4606      	mov	r6, r0
 8019704:	460f      	mov	r7, r1
 8019706:	462b      	mov	r3, r5
 8019708:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801970c:	f7e6 ff84 	bl	8000618 <__aeabi_dmul>
 8019710:	4602      	mov	r2, r0
 8019712:	460b      	mov	r3, r1
 8019714:	4630      	mov	r0, r6
 8019716:	4639      	mov	r1, r7
 8019718:	f7e6 fdc8 	bl	80002ac <__adddf3>
 801971c:	4606      	mov	r6, r0
 801971e:	460f      	mov	r7, r1
 8019720:	4602      	mov	r2, r0
 8019722:	460b      	mov	r3, r1
 8019724:	4640      	mov	r0, r8
 8019726:	4649      	mov	r1, r9
 8019728:	f7e6 fdc0 	bl	80002ac <__adddf3>
 801972c:	9802      	ldr	r0, [sp, #8]
 801972e:	a33c      	add	r3, pc, #240	; (adr r3, 8019820 <__ieee754_pow+0x700>)
 8019730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019734:	4604      	mov	r4, r0
 8019736:	460d      	mov	r5, r1
 8019738:	f7e6 ff6e 	bl	8000618 <__aeabi_dmul>
 801973c:	4642      	mov	r2, r8
 801973e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019742:	464b      	mov	r3, r9
 8019744:	4620      	mov	r0, r4
 8019746:	4629      	mov	r1, r5
 8019748:	f7e6 fdae 	bl	80002a8 <__aeabi_dsub>
 801974c:	4602      	mov	r2, r0
 801974e:	460b      	mov	r3, r1
 8019750:	4630      	mov	r0, r6
 8019752:	4639      	mov	r1, r7
 8019754:	f7e6 fda8 	bl	80002a8 <__aeabi_dsub>
 8019758:	a333      	add	r3, pc, #204	; (adr r3, 8019828 <__ieee754_pow+0x708>)
 801975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801975e:	f7e6 ff5b 	bl	8000618 <__aeabi_dmul>
 8019762:	a333      	add	r3, pc, #204	; (adr r3, 8019830 <__ieee754_pow+0x710>)
 8019764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019768:	4606      	mov	r6, r0
 801976a:	460f      	mov	r7, r1
 801976c:	4620      	mov	r0, r4
 801976e:	4629      	mov	r1, r5
 8019770:	f7e6 ff52 	bl	8000618 <__aeabi_dmul>
 8019774:	4602      	mov	r2, r0
 8019776:	460b      	mov	r3, r1
 8019778:	4630      	mov	r0, r6
 801977a:	4639      	mov	r1, r7
 801977c:	f7e6 fd96 	bl	80002ac <__adddf3>
 8019780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019782:	4b35      	ldr	r3, [pc, #212]	; (8019858 <__ieee754_pow+0x738>)
 8019784:	4413      	add	r3, r2
 8019786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801978a:	f7e6 fd8f 	bl	80002ac <__adddf3>
 801978e:	4604      	mov	r4, r0
 8019790:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019792:	460d      	mov	r5, r1
 8019794:	f7e6 fed6 	bl	8000544 <__aeabi_i2d>
 8019798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801979a:	4b30      	ldr	r3, [pc, #192]	; (801985c <__ieee754_pow+0x73c>)
 801979c:	4413      	add	r3, r2
 801979e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80197a2:	4606      	mov	r6, r0
 80197a4:	460f      	mov	r7, r1
 80197a6:	4622      	mov	r2, r4
 80197a8:	462b      	mov	r3, r5
 80197aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80197ae:	f7e6 fd7d 	bl	80002ac <__adddf3>
 80197b2:	4642      	mov	r2, r8
 80197b4:	464b      	mov	r3, r9
 80197b6:	f7e6 fd79 	bl	80002ac <__adddf3>
 80197ba:	4632      	mov	r2, r6
 80197bc:	463b      	mov	r3, r7
 80197be:	f7e6 fd75 	bl	80002ac <__adddf3>
 80197c2:	9802      	ldr	r0, [sp, #8]
 80197c4:	4632      	mov	r2, r6
 80197c6:	463b      	mov	r3, r7
 80197c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80197cc:	f7e6 fd6c 	bl	80002a8 <__aeabi_dsub>
 80197d0:	4642      	mov	r2, r8
 80197d2:	464b      	mov	r3, r9
 80197d4:	f7e6 fd68 	bl	80002a8 <__aeabi_dsub>
 80197d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80197dc:	e607      	b.n	80193ee <__ieee754_pow+0x2ce>
 80197de:	f04f 0a01 	mov.w	sl, #1
 80197e2:	e6a5      	b.n	8019530 <__ieee754_pow+0x410>
 80197e4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8019838 <__ieee754_pow+0x718>
 80197e8:	e613      	b.n	8019412 <__ieee754_pow+0x2f2>
 80197ea:	bf00      	nop
 80197ec:	f3af 8000 	nop.w
 80197f0:	4a454eef 	.word	0x4a454eef
 80197f4:	3fca7e28 	.word	0x3fca7e28
 80197f8:	93c9db65 	.word	0x93c9db65
 80197fc:	3fcd864a 	.word	0x3fcd864a
 8019800:	a91d4101 	.word	0xa91d4101
 8019804:	3fd17460 	.word	0x3fd17460
 8019808:	518f264d 	.word	0x518f264d
 801980c:	3fd55555 	.word	0x3fd55555
 8019810:	db6fabff 	.word	0xdb6fabff
 8019814:	3fdb6db6 	.word	0x3fdb6db6
 8019818:	33333303 	.word	0x33333303
 801981c:	3fe33333 	.word	0x3fe33333
 8019820:	e0000000 	.word	0xe0000000
 8019824:	3feec709 	.word	0x3feec709
 8019828:	dc3a03fd 	.word	0xdc3a03fd
 801982c:	3feec709 	.word	0x3feec709
 8019830:	145b01f5 	.word	0x145b01f5
 8019834:	be3e2fe0 	.word	0xbe3e2fe0
 8019838:	00000000 	.word	0x00000000
 801983c:	3ff00000 	.word	0x3ff00000
 8019840:	43400000 	.word	0x43400000
 8019844:	0003988e 	.word	0x0003988e
 8019848:	000bb679 	.word	0x000bb679
 801984c:	0801ae20 	.word	0x0801ae20
 8019850:	3ff00000 	.word	0x3ff00000
 8019854:	40080000 	.word	0x40080000
 8019858:	0801ae40 	.word	0x0801ae40
 801985c:	0801ae30 	.word	0x0801ae30
 8019860:	a3b4      	add	r3, pc, #720	; (adr r3, 8019b34 <__ieee754_pow+0xa14>)
 8019862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019866:	4640      	mov	r0, r8
 8019868:	4649      	mov	r1, r9
 801986a:	f7e6 fd1f 	bl	80002ac <__adddf3>
 801986e:	4622      	mov	r2, r4
 8019870:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019874:	462b      	mov	r3, r5
 8019876:	4630      	mov	r0, r6
 8019878:	4639      	mov	r1, r7
 801987a:	f7e6 fd15 	bl	80002a8 <__aeabi_dsub>
 801987e:	4602      	mov	r2, r0
 8019880:	460b      	mov	r3, r1
 8019882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019886:	f7e7 f957 	bl	8000b38 <__aeabi_dcmpgt>
 801988a:	2800      	cmp	r0, #0
 801988c:	f47f adfe 	bne.w	801948c <__ieee754_pow+0x36c>
 8019890:	4aa3      	ldr	r2, [pc, #652]	; (8019b20 <__ieee754_pow+0xa00>)
 8019892:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019896:	4293      	cmp	r3, r2
 8019898:	f340 810a 	ble.w	8019ab0 <__ieee754_pow+0x990>
 801989c:	151b      	asrs	r3, r3, #20
 801989e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80198a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80198a6:	fa4a f303 	asr.w	r3, sl, r3
 80198aa:	445b      	add	r3, fp
 80198ac:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80198b0:	4e9c      	ldr	r6, [pc, #624]	; (8019b24 <__ieee754_pow+0xa04>)
 80198b2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80198b6:	4116      	asrs	r6, r2
 80198b8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80198bc:	2000      	movs	r0, #0
 80198be:	ea23 0106 	bic.w	r1, r3, r6
 80198c2:	f1c2 0214 	rsb	r2, r2, #20
 80198c6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80198ca:	fa4a fa02 	asr.w	sl, sl, r2
 80198ce:	f1bb 0f00 	cmp.w	fp, #0
 80198d2:	4602      	mov	r2, r0
 80198d4:	460b      	mov	r3, r1
 80198d6:	4620      	mov	r0, r4
 80198d8:	4629      	mov	r1, r5
 80198da:	bfb8      	it	lt
 80198dc:	f1ca 0a00 	rsblt	sl, sl, #0
 80198e0:	f7e6 fce2 	bl	80002a8 <__aeabi_dsub>
 80198e4:	e9cd 0100 	strd	r0, r1, [sp]
 80198e8:	4642      	mov	r2, r8
 80198ea:	464b      	mov	r3, r9
 80198ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80198f0:	f7e6 fcdc 	bl	80002ac <__adddf3>
 80198f4:	2000      	movs	r0, #0
 80198f6:	a378      	add	r3, pc, #480	; (adr r3, 8019ad8 <__ieee754_pow+0x9b8>)
 80198f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198fc:	4604      	mov	r4, r0
 80198fe:	460d      	mov	r5, r1
 8019900:	f7e6 fe8a 	bl	8000618 <__aeabi_dmul>
 8019904:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019908:	4606      	mov	r6, r0
 801990a:	460f      	mov	r7, r1
 801990c:	4620      	mov	r0, r4
 801990e:	4629      	mov	r1, r5
 8019910:	f7e6 fcca 	bl	80002a8 <__aeabi_dsub>
 8019914:	4602      	mov	r2, r0
 8019916:	460b      	mov	r3, r1
 8019918:	4640      	mov	r0, r8
 801991a:	4649      	mov	r1, r9
 801991c:	f7e6 fcc4 	bl	80002a8 <__aeabi_dsub>
 8019920:	a36f      	add	r3, pc, #444	; (adr r3, 8019ae0 <__ieee754_pow+0x9c0>)
 8019922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019926:	f7e6 fe77 	bl	8000618 <__aeabi_dmul>
 801992a:	a36f      	add	r3, pc, #444	; (adr r3, 8019ae8 <__ieee754_pow+0x9c8>)
 801992c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019930:	4680      	mov	r8, r0
 8019932:	4689      	mov	r9, r1
 8019934:	4620      	mov	r0, r4
 8019936:	4629      	mov	r1, r5
 8019938:	f7e6 fe6e 	bl	8000618 <__aeabi_dmul>
 801993c:	4602      	mov	r2, r0
 801993e:	460b      	mov	r3, r1
 8019940:	4640      	mov	r0, r8
 8019942:	4649      	mov	r1, r9
 8019944:	f7e6 fcb2 	bl	80002ac <__adddf3>
 8019948:	4604      	mov	r4, r0
 801994a:	460d      	mov	r5, r1
 801994c:	4602      	mov	r2, r0
 801994e:	460b      	mov	r3, r1
 8019950:	4630      	mov	r0, r6
 8019952:	4639      	mov	r1, r7
 8019954:	f7e6 fcaa 	bl	80002ac <__adddf3>
 8019958:	4632      	mov	r2, r6
 801995a:	463b      	mov	r3, r7
 801995c:	4680      	mov	r8, r0
 801995e:	4689      	mov	r9, r1
 8019960:	f7e6 fca2 	bl	80002a8 <__aeabi_dsub>
 8019964:	4602      	mov	r2, r0
 8019966:	460b      	mov	r3, r1
 8019968:	4620      	mov	r0, r4
 801996a:	4629      	mov	r1, r5
 801996c:	f7e6 fc9c 	bl	80002a8 <__aeabi_dsub>
 8019970:	4642      	mov	r2, r8
 8019972:	4606      	mov	r6, r0
 8019974:	460f      	mov	r7, r1
 8019976:	464b      	mov	r3, r9
 8019978:	4640      	mov	r0, r8
 801997a:	4649      	mov	r1, r9
 801997c:	f7e6 fe4c 	bl	8000618 <__aeabi_dmul>
 8019980:	a35b      	add	r3, pc, #364	; (adr r3, 8019af0 <__ieee754_pow+0x9d0>)
 8019982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019986:	4604      	mov	r4, r0
 8019988:	460d      	mov	r5, r1
 801998a:	f7e6 fe45 	bl	8000618 <__aeabi_dmul>
 801998e:	a35a      	add	r3, pc, #360	; (adr r3, 8019af8 <__ieee754_pow+0x9d8>)
 8019990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019994:	f7e6 fc88 	bl	80002a8 <__aeabi_dsub>
 8019998:	4622      	mov	r2, r4
 801999a:	462b      	mov	r3, r5
 801999c:	f7e6 fe3c 	bl	8000618 <__aeabi_dmul>
 80199a0:	a357      	add	r3, pc, #348	; (adr r3, 8019b00 <__ieee754_pow+0x9e0>)
 80199a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199a6:	f7e6 fc81 	bl	80002ac <__adddf3>
 80199aa:	4622      	mov	r2, r4
 80199ac:	462b      	mov	r3, r5
 80199ae:	f7e6 fe33 	bl	8000618 <__aeabi_dmul>
 80199b2:	a355      	add	r3, pc, #340	; (adr r3, 8019b08 <__ieee754_pow+0x9e8>)
 80199b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199b8:	f7e6 fc76 	bl	80002a8 <__aeabi_dsub>
 80199bc:	4622      	mov	r2, r4
 80199be:	462b      	mov	r3, r5
 80199c0:	f7e6 fe2a 	bl	8000618 <__aeabi_dmul>
 80199c4:	a352      	add	r3, pc, #328	; (adr r3, 8019b10 <__ieee754_pow+0x9f0>)
 80199c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199ca:	f7e6 fc6f 	bl	80002ac <__adddf3>
 80199ce:	4622      	mov	r2, r4
 80199d0:	462b      	mov	r3, r5
 80199d2:	f7e6 fe21 	bl	8000618 <__aeabi_dmul>
 80199d6:	4602      	mov	r2, r0
 80199d8:	460b      	mov	r3, r1
 80199da:	4640      	mov	r0, r8
 80199dc:	4649      	mov	r1, r9
 80199de:	f7e6 fc63 	bl	80002a8 <__aeabi_dsub>
 80199e2:	4604      	mov	r4, r0
 80199e4:	460d      	mov	r5, r1
 80199e6:	4602      	mov	r2, r0
 80199e8:	460b      	mov	r3, r1
 80199ea:	4640      	mov	r0, r8
 80199ec:	4649      	mov	r1, r9
 80199ee:	f7e6 fe13 	bl	8000618 <__aeabi_dmul>
 80199f2:	2200      	movs	r2, #0
 80199f4:	e9cd 0100 	strd	r0, r1, [sp]
 80199f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80199fc:	4620      	mov	r0, r4
 80199fe:	4629      	mov	r1, r5
 8019a00:	f7e6 fc52 	bl	80002a8 <__aeabi_dsub>
 8019a04:	4602      	mov	r2, r0
 8019a06:	460b      	mov	r3, r1
 8019a08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019a0c:	f7e6 ff2e 	bl	800086c <__aeabi_ddiv>
 8019a10:	4632      	mov	r2, r6
 8019a12:	4604      	mov	r4, r0
 8019a14:	460d      	mov	r5, r1
 8019a16:	463b      	mov	r3, r7
 8019a18:	4640      	mov	r0, r8
 8019a1a:	4649      	mov	r1, r9
 8019a1c:	f7e6 fdfc 	bl	8000618 <__aeabi_dmul>
 8019a20:	4632      	mov	r2, r6
 8019a22:	463b      	mov	r3, r7
 8019a24:	f7e6 fc42 	bl	80002ac <__adddf3>
 8019a28:	4602      	mov	r2, r0
 8019a2a:	460b      	mov	r3, r1
 8019a2c:	4620      	mov	r0, r4
 8019a2e:	4629      	mov	r1, r5
 8019a30:	f7e6 fc3a 	bl	80002a8 <__aeabi_dsub>
 8019a34:	4642      	mov	r2, r8
 8019a36:	464b      	mov	r3, r9
 8019a38:	f7e6 fc36 	bl	80002a8 <__aeabi_dsub>
 8019a3c:	4602      	mov	r2, r0
 8019a3e:	460b      	mov	r3, r1
 8019a40:	2000      	movs	r0, #0
 8019a42:	4939      	ldr	r1, [pc, #228]	; (8019b28 <__ieee754_pow+0xa08>)
 8019a44:	f7e6 fc30 	bl	80002a8 <__aeabi_dsub>
 8019a48:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8019a4c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8019a50:	4602      	mov	r2, r0
 8019a52:	460b      	mov	r3, r1
 8019a54:	da2f      	bge.n	8019ab6 <__ieee754_pow+0x996>
 8019a56:	4650      	mov	r0, sl
 8019a58:	ec43 2b10 	vmov	d0, r2, r3
 8019a5c:	f000 fb64 	bl	801a128 <scalbn>
 8019a60:	ec51 0b10 	vmov	r0, r1, d0
 8019a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019a68:	f7ff bbf1 	b.w	801924e <__ieee754_pow+0x12e>
 8019a6c:	4b2f      	ldr	r3, [pc, #188]	; (8019b2c <__ieee754_pow+0xa0c>)
 8019a6e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019a72:	429e      	cmp	r6, r3
 8019a74:	f77f af0c 	ble.w	8019890 <__ieee754_pow+0x770>
 8019a78:	4b2d      	ldr	r3, [pc, #180]	; (8019b30 <__ieee754_pow+0xa10>)
 8019a7a:	440b      	add	r3, r1
 8019a7c:	4303      	orrs	r3, r0
 8019a7e:	d00b      	beq.n	8019a98 <__ieee754_pow+0x978>
 8019a80:	a325      	add	r3, pc, #148	; (adr r3, 8019b18 <__ieee754_pow+0x9f8>)
 8019a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019a8a:	f7e6 fdc5 	bl	8000618 <__aeabi_dmul>
 8019a8e:	a322      	add	r3, pc, #136	; (adr r3, 8019b18 <__ieee754_pow+0x9f8>)
 8019a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a94:	f7ff bbdb 	b.w	801924e <__ieee754_pow+0x12e>
 8019a98:	4622      	mov	r2, r4
 8019a9a:	462b      	mov	r3, r5
 8019a9c:	f7e6 fc04 	bl	80002a8 <__aeabi_dsub>
 8019aa0:	4642      	mov	r2, r8
 8019aa2:	464b      	mov	r3, r9
 8019aa4:	f7e7 f83e 	bl	8000b24 <__aeabi_dcmpge>
 8019aa8:	2800      	cmp	r0, #0
 8019aaa:	f43f aef1 	beq.w	8019890 <__ieee754_pow+0x770>
 8019aae:	e7e7      	b.n	8019a80 <__ieee754_pow+0x960>
 8019ab0:	f04f 0a00 	mov.w	sl, #0
 8019ab4:	e718      	b.n	80198e8 <__ieee754_pow+0x7c8>
 8019ab6:	4621      	mov	r1, r4
 8019ab8:	e7d4      	b.n	8019a64 <__ieee754_pow+0x944>
 8019aba:	2000      	movs	r0, #0
 8019abc:	491a      	ldr	r1, [pc, #104]	; (8019b28 <__ieee754_pow+0xa08>)
 8019abe:	f7ff bb8f 	b.w	80191e0 <__ieee754_pow+0xc0>
 8019ac2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019ac6:	f7ff bb8b 	b.w	80191e0 <__ieee754_pow+0xc0>
 8019aca:	4630      	mov	r0, r6
 8019acc:	4639      	mov	r1, r7
 8019ace:	f7ff bb87 	b.w	80191e0 <__ieee754_pow+0xc0>
 8019ad2:	4693      	mov	fp, r2
 8019ad4:	f7ff bb98 	b.w	8019208 <__ieee754_pow+0xe8>
 8019ad8:	00000000 	.word	0x00000000
 8019adc:	3fe62e43 	.word	0x3fe62e43
 8019ae0:	fefa39ef 	.word	0xfefa39ef
 8019ae4:	3fe62e42 	.word	0x3fe62e42
 8019ae8:	0ca86c39 	.word	0x0ca86c39
 8019aec:	be205c61 	.word	0xbe205c61
 8019af0:	72bea4d0 	.word	0x72bea4d0
 8019af4:	3e663769 	.word	0x3e663769
 8019af8:	c5d26bf1 	.word	0xc5d26bf1
 8019afc:	3ebbbd41 	.word	0x3ebbbd41
 8019b00:	af25de2c 	.word	0xaf25de2c
 8019b04:	3f11566a 	.word	0x3f11566a
 8019b08:	16bebd93 	.word	0x16bebd93
 8019b0c:	3f66c16c 	.word	0x3f66c16c
 8019b10:	5555553e 	.word	0x5555553e
 8019b14:	3fc55555 	.word	0x3fc55555
 8019b18:	c2f8f359 	.word	0xc2f8f359
 8019b1c:	01a56e1f 	.word	0x01a56e1f
 8019b20:	3fe00000 	.word	0x3fe00000
 8019b24:	000fffff 	.word	0x000fffff
 8019b28:	3ff00000 	.word	0x3ff00000
 8019b2c:	4090cbff 	.word	0x4090cbff
 8019b30:	3f6f3400 	.word	0x3f6f3400
 8019b34:	652b82fe 	.word	0x652b82fe
 8019b38:	3c971547 	.word	0x3c971547

08019b3c <__ieee754_sqrt>:
 8019b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b40:	4955      	ldr	r1, [pc, #340]	; (8019c98 <__ieee754_sqrt+0x15c>)
 8019b42:	ec55 4b10 	vmov	r4, r5, d0
 8019b46:	43a9      	bics	r1, r5
 8019b48:	462b      	mov	r3, r5
 8019b4a:	462a      	mov	r2, r5
 8019b4c:	d112      	bne.n	8019b74 <__ieee754_sqrt+0x38>
 8019b4e:	ee10 2a10 	vmov	r2, s0
 8019b52:	ee10 0a10 	vmov	r0, s0
 8019b56:	4629      	mov	r1, r5
 8019b58:	f7e6 fd5e 	bl	8000618 <__aeabi_dmul>
 8019b5c:	4602      	mov	r2, r0
 8019b5e:	460b      	mov	r3, r1
 8019b60:	4620      	mov	r0, r4
 8019b62:	4629      	mov	r1, r5
 8019b64:	f7e6 fba2 	bl	80002ac <__adddf3>
 8019b68:	4604      	mov	r4, r0
 8019b6a:	460d      	mov	r5, r1
 8019b6c:	ec45 4b10 	vmov	d0, r4, r5
 8019b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b74:	2d00      	cmp	r5, #0
 8019b76:	ee10 0a10 	vmov	r0, s0
 8019b7a:	4621      	mov	r1, r4
 8019b7c:	dc0f      	bgt.n	8019b9e <__ieee754_sqrt+0x62>
 8019b7e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019b82:	4330      	orrs	r0, r6
 8019b84:	d0f2      	beq.n	8019b6c <__ieee754_sqrt+0x30>
 8019b86:	b155      	cbz	r5, 8019b9e <__ieee754_sqrt+0x62>
 8019b88:	ee10 2a10 	vmov	r2, s0
 8019b8c:	4620      	mov	r0, r4
 8019b8e:	4629      	mov	r1, r5
 8019b90:	f7e6 fb8a 	bl	80002a8 <__aeabi_dsub>
 8019b94:	4602      	mov	r2, r0
 8019b96:	460b      	mov	r3, r1
 8019b98:	f7e6 fe68 	bl	800086c <__aeabi_ddiv>
 8019b9c:	e7e4      	b.n	8019b68 <__ieee754_sqrt+0x2c>
 8019b9e:	151b      	asrs	r3, r3, #20
 8019ba0:	d073      	beq.n	8019c8a <__ieee754_sqrt+0x14e>
 8019ba2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019ba6:	07dd      	lsls	r5, r3, #31
 8019ba8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019bac:	bf48      	it	mi
 8019bae:	0fc8      	lsrmi	r0, r1, #31
 8019bb0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8019bb4:	bf44      	itt	mi
 8019bb6:	0049      	lslmi	r1, r1, #1
 8019bb8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8019bbc:	2500      	movs	r5, #0
 8019bbe:	1058      	asrs	r0, r3, #1
 8019bc0:	0fcb      	lsrs	r3, r1, #31
 8019bc2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8019bc6:	0049      	lsls	r1, r1, #1
 8019bc8:	2316      	movs	r3, #22
 8019bca:	462c      	mov	r4, r5
 8019bcc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8019bd0:	19a7      	adds	r7, r4, r6
 8019bd2:	4297      	cmp	r7, r2
 8019bd4:	bfde      	ittt	le
 8019bd6:	19bc      	addle	r4, r7, r6
 8019bd8:	1bd2      	suble	r2, r2, r7
 8019bda:	19ad      	addle	r5, r5, r6
 8019bdc:	0fcf      	lsrs	r7, r1, #31
 8019bde:	3b01      	subs	r3, #1
 8019be0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8019be4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019be8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019bec:	d1f0      	bne.n	8019bd0 <__ieee754_sqrt+0x94>
 8019bee:	f04f 0c20 	mov.w	ip, #32
 8019bf2:	469e      	mov	lr, r3
 8019bf4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019bf8:	42a2      	cmp	r2, r4
 8019bfa:	eb06 070e 	add.w	r7, r6, lr
 8019bfe:	dc02      	bgt.n	8019c06 <__ieee754_sqrt+0xca>
 8019c00:	d112      	bne.n	8019c28 <__ieee754_sqrt+0xec>
 8019c02:	428f      	cmp	r7, r1
 8019c04:	d810      	bhi.n	8019c28 <__ieee754_sqrt+0xec>
 8019c06:	2f00      	cmp	r7, #0
 8019c08:	eb07 0e06 	add.w	lr, r7, r6
 8019c0c:	da42      	bge.n	8019c94 <__ieee754_sqrt+0x158>
 8019c0e:	f1be 0f00 	cmp.w	lr, #0
 8019c12:	db3f      	blt.n	8019c94 <__ieee754_sqrt+0x158>
 8019c14:	f104 0801 	add.w	r8, r4, #1
 8019c18:	1b12      	subs	r2, r2, r4
 8019c1a:	428f      	cmp	r7, r1
 8019c1c:	bf88      	it	hi
 8019c1e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019c22:	1bc9      	subs	r1, r1, r7
 8019c24:	4433      	add	r3, r6
 8019c26:	4644      	mov	r4, r8
 8019c28:	0052      	lsls	r2, r2, #1
 8019c2a:	f1bc 0c01 	subs.w	ip, ip, #1
 8019c2e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8019c32:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019c36:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019c3a:	d1dd      	bne.n	8019bf8 <__ieee754_sqrt+0xbc>
 8019c3c:	430a      	orrs	r2, r1
 8019c3e:	d006      	beq.n	8019c4e <__ieee754_sqrt+0x112>
 8019c40:	1c5c      	adds	r4, r3, #1
 8019c42:	bf13      	iteet	ne
 8019c44:	3301      	addne	r3, #1
 8019c46:	3501      	addeq	r5, #1
 8019c48:	4663      	moveq	r3, ip
 8019c4a:	f023 0301 	bicne.w	r3, r3, #1
 8019c4e:	106a      	asrs	r2, r5, #1
 8019c50:	085b      	lsrs	r3, r3, #1
 8019c52:	07e9      	lsls	r1, r5, #31
 8019c54:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019c58:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019c5c:	bf48      	it	mi
 8019c5e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8019c62:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8019c66:	461c      	mov	r4, r3
 8019c68:	e780      	b.n	8019b6c <__ieee754_sqrt+0x30>
 8019c6a:	0aca      	lsrs	r2, r1, #11
 8019c6c:	3815      	subs	r0, #21
 8019c6e:	0549      	lsls	r1, r1, #21
 8019c70:	2a00      	cmp	r2, #0
 8019c72:	d0fa      	beq.n	8019c6a <__ieee754_sqrt+0x12e>
 8019c74:	02d6      	lsls	r6, r2, #11
 8019c76:	d50a      	bpl.n	8019c8e <__ieee754_sqrt+0x152>
 8019c78:	f1c3 0420 	rsb	r4, r3, #32
 8019c7c:	fa21 f404 	lsr.w	r4, r1, r4
 8019c80:	1e5d      	subs	r5, r3, #1
 8019c82:	4099      	lsls	r1, r3
 8019c84:	4322      	orrs	r2, r4
 8019c86:	1b43      	subs	r3, r0, r5
 8019c88:	e78b      	b.n	8019ba2 <__ieee754_sqrt+0x66>
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	e7f0      	b.n	8019c70 <__ieee754_sqrt+0x134>
 8019c8e:	0052      	lsls	r2, r2, #1
 8019c90:	3301      	adds	r3, #1
 8019c92:	e7ef      	b.n	8019c74 <__ieee754_sqrt+0x138>
 8019c94:	46a0      	mov	r8, r4
 8019c96:	e7bf      	b.n	8019c18 <__ieee754_sqrt+0xdc>
 8019c98:	7ff00000 	.word	0x7ff00000

08019c9c <__ieee754_sqrtf>:
 8019c9c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019ca0:	4770      	bx	lr
 8019ca2:	0000      	movs	r0, r0
 8019ca4:	0000      	movs	r0, r0
	...

08019ca8 <atan>:
 8019ca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cac:	ec55 4b10 	vmov	r4, r5, d0
 8019cb0:	4bc3      	ldr	r3, [pc, #780]	; (8019fc0 <atan+0x318>)
 8019cb2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019cb6:	429e      	cmp	r6, r3
 8019cb8:	46ab      	mov	fp, r5
 8019cba:	dd18      	ble.n	8019cee <atan+0x46>
 8019cbc:	4bc1      	ldr	r3, [pc, #772]	; (8019fc4 <atan+0x31c>)
 8019cbe:	429e      	cmp	r6, r3
 8019cc0:	dc01      	bgt.n	8019cc6 <atan+0x1e>
 8019cc2:	d109      	bne.n	8019cd8 <atan+0x30>
 8019cc4:	b144      	cbz	r4, 8019cd8 <atan+0x30>
 8019cc6:	4622      	mov	r2, r4
 8019cc8:	462b      	mov	r3, r5
 8019cca:	4620      	mov	r0, r4
 8019ccc:	4629      	mov	r1, r5
 8019cce:	f7e6 faed 	bl	80002ac <__adddf3>
 8019cd2:	4604      	mov	r4, r0
 8019cd4:	460d      	mov	r5, r1
 8019cd6:	e006      	b.n	8019ce6 <atan+0x3e>
 8019cd8:	f1bb 0f00 	cmp.w	fp, #0
 8019cdc:	f340 8131 	ble.w	8019f42 <atan+0x29a>
 8019ce0:	a59b      	add	r5, pc, #620	; (adr r5, 8019f50 <atan+0x2a8>)
 8019ce2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019ce6:	ec45 4b10 	vmov	d0, r4, r5
 8019cea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cee:	4bb6      	ldr	r3, [pc, #728]	; (8019fc8 <atan+0x320>)
 8019cf0:	429e      	cmp	r6, r3
 8019cf2:	dc14      	bgt.n	8019d1e <atan+0x76>
 8019cf4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8019cf8:	429e      	cmp	r6, r3
 8019cfa:	dc0d      	bgt.n	8019d18 <atan+0x70>
 8019cfc:	a396      	add	r3, pc, #600	; (adr r3, 8019f58 <atan+0x2b0>)
 8019cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d02:	ee10 0a10 	vmov	r0, s0
 8019d06:	4629      	mov	r1, r5
 8019d08:	f7e6 fad0 	bl	80002ac <__adddf3>
 8019d0c:	2200      	movs	r2, #0
 8019d0e:	4baf      	ldr	r3, [pc, #700]	; (8019fcc <atan+0x324>)
 8019d10:	f7e6 ff12 	bl	8000b38 <__aeabi_dcmpgt>
 8019d14:	2800      	cmp	r0, #0
 8019d16:	d1e6      	bne.n	8019ce6 <atan+0x3e>
 8019d18:	f04f 3aff 	mov.w	sl, #4294967295
 8019d1c:	e02b      	b.n	8019d76 <atan+0xce>
 8019d1e:	f000 f963 	bl	8019fe8 <fabs>
 8019d22:	4bab      	ldr	r3, [pc, #684]	; (8019fd0 <atan+0x328>)
 8019d24:	429e      	cmp	r6, r3
 8019d26:	ec55 4b10 	vmov	r4, r5, d0
 8019d2a:	f300 80bf 	bgt.w	8019eac <atan+0x204>
 8019d2e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8019d32:	429e      	cmp	r6, r3
 8019d34:	f300 80a0 	bgt.w	8019e78 <atan+0x1d0>
 8019d38:	ee10 2a10 	vmov	r2, s0
 8019d3c:	ee10 0a10 	vmov	r0, s0
 8019d40:	462b      	mov	r3, r5
 8019d42:	4629      	mov	r1, r5
 8019d44:	f7e6 fab2 	bl	80002ac <__adddf3>
 8019d48:	2200      	movs	r2, #0
 8019d4a:	4ba0      	ldr	r3, [pc, #640]	; (8019fcc <atan+0x324>)
 8019d4c:	f7e6 faac 	bl	80002a8 <__aeabi_dsub>
 8019d50:	2200      	movs	r2, #0
 8019d52:	4606      	mov	r6, r0
 8019d54:	460f      	mov	r7, r1
 8019d56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019d5a:	4620      	mov	r0, r4
 8019d5c:	4629      	mov	r1, r5
 8019d5e:	f7e6 faa5 	bl	80002ac <__adddf3>
 8019d62:	4602      	mov	r2, r0
 8019d64:	460b      	mov	r3, r1
 8019d66:	4630      	mov	r0, r6
 8019d68:	4639      	mov	r1, r7
 8019d6a:	f7e6 fd7f 	bl	800086c <__aeabi_ddiv>
 8019d6e:	f04f 0a00 	mov.w	sl, #0
 8019d72:	4604      	mov	r4, r0
 8019d74:	460d      	mov	r5, r1
 8019d76:	4622      	mov	r2, r4
 8019d78:	462b      	mov	r3, r5
 8019d7a:	4620      	mov	r0, r4
 8019d7c:	4629      	mov	r1, r5
 8019d7e:	f7e6 fc4b 	bl	8000618 <__aeabi_dmul>
 8019d82:	4602      	mov	r2, r0
 8019d84:	460b      	mov	r3, r1
 8019d86:	4680      	mov	r8, r0
 8019d88:	4689      	mov	r9, r1
 8019d8a:	f7e6 fc45 	bl	8000618 <__aeabi_dmul>
 8019d8e:	a374      	add	r3, pc, #464	; (adr r3, 8019f60 <atan+0x2b8>)
 8019d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d94:	4606      	mov	r6, r0
 8019d96:	460f      	mov	r7, r1
 8019d98:	f7e6 fc3e 	bl	8000618 <__aeabi_dmul>
 8019d9c:	a372      	add	r3, pc, #456	; (adr r3, 8019f68 <atan+0x2c0>)
 8019d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019da2:	f7e6 fa83 	bl	80002ac <__adddf3>
 8019da6:	4632      	mov	r2, r6
 8019da8:	463b      	mov	r3, r7
 8019daa:	f7e6 fc35 	bl	8000618 <__aeabi_dmul>
 8019dae:	a370      	add	r3, pc, #448	; (adr r3, 8019f70 <atan+0x2c8>)
 8019db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019db4:	f7e6 fa7a 	bl	80002ac <__adddf3>
 8019db8:	4632      	mov	r2, r6
 8019dba:	463b      	mov	r3, r7
 8019dbc:	f7e6 fc2c 	bl	8000618 <__aeabi_dmul>
 8019dc0:	a36d      	add	r3, pc, #436	; (adr r3, 8019f78 <atan+0x2d0>)
 8019dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dc6:	f7e6 fa71 	bl	80002ac <__adddf3>
 8019dca:	4632      	mov	r2, r6
 8019dcc:	463b      	mov	r3, r7
 8019dce:	f7e6 fc23 	bl	8000618 <__aeabi_dmul>
 8019dd2:	a36b      	add	r3, pc, #428	; (adr r3, 8019f80 <atan+0x2d8>)
 8019dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dd8:	f7e6 fa68 	bl	80002ac <__adddf3>
 8019ddc:	4632      	mov	r2, r6
 8019dde:	463b      	mov	r3, r7
 8019de0:	f7e6 fc1a 	bl	8000618 <__aeabi_dmul>
 8019de4:	a368      	add	r3, pc, #416	; (adr r3, 8019f88 <atan+0x2e0>)
 8019de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dea:	f7e6 fa5f 	bl	80002ac <__adddf3>
 8019dee:	4642      	mov	r2, r8
 8019df0:	464b      	mov	r3, r9
 8019df2:	f7e6 fc11 	bl	8000618 <__aeabi_dmul>
 8019df6:	a366      	add	r3, pc, #408	; (adr r3, 8019f90 <atan+0x2e8>)
 8019df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dfc:	4680      	mov	r8, r0
 8019dfe:	4689      	mov	r9, r1
 8019e00:	4630      	mov	r0, r6
 8019e02:	4639      	mov	r1, r7
 8019e04:	f7e6 fc08 	bl	8000618 <__aeabi_dmul>
 8019e08:	a363      	add	r3, pc, #396	; (adr r3, 8019f98 <atan+0x2f0>)
 8019e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e0e:	f7e6 fa4b 	bl	80002a8 <__aeabi_dsub>
 8019e12:	4632      	mov	r2, r6
 8019e14:	463b      	mov	r3, r7
 8019e16:	f7e6 fbff 	bl	8000618 <__aeabi_dmul>
 8019e1a:	a361      	add	r3, pc, #388	; (adr r3, 8019fa0 <atan+0x2f8>)
 8019e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e20:	f7e6 fa42 	bl	80002a8 <__aeabi_dsub>
 8019e24:	4632      	mov	r2, r6
 8019e26:	463b      	mov	r3, r7
 8019e28:	f7e6 fbf6 	bl	8000618 <__aeabi_dmul>
 8019e2c:	a35e      	add	r3, pc, #376	; (adr r3, 8019fa8 <atan+0x300>)
 8019e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e32:	f7e6 fa39 	bl	80002a8 <__aeabi_dsub>
 8019e36:	4632      	mov	r2, r6
 8019e38:	463b      	mov	r3, r7
 8019e3a:	f7e6 fbed 	bl	8000618 <__aeabi_dmul>
 8019e3e:	a35c      	add	r3, pc, #368	; (adr r3, 8019fb0 <atan+0x308>)
 8019e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e44:	f7e6 fa30 	bl	80002a8 <__aeabi_dsub>
 8019e48:	4632      	mov	r2, r6
 8019e4a:	463b      	mov	r3, r7
 8019e4c:	f7e6 fbe4 	bl	8000618 <__aeabi_dmul>
 8019e50:	4602      	mov	r2, r0
 8019e52:	460b      	mov	r3, r1
 8019e54:	4640      	mov	r0, r8
 8019e56:	4649      	mov	r1, r9
 8019e58:	f7e6 fa28 	bl	80002ac <__adddf3>
 8019e5c:	4622      	mov	r2, r4
 8019e5e:	462b      	mov	r3, r5
 8019e60:	f7e6 fbda 	bl	8000618 <__aeabi_dmul>
 8019e64:	f1ba 3fff 	cmp.w	sl, #4294967295
 8019e68:	4602      	mov	r2, r0
 8019e6a:	460b      	mov	r3, r1
 8019e6c:	d14b      	bne.n	8019f06 <atan+0x25e>
 8019e6e:	4620      	mov	r0, r4
 8019e70:	4629      	mov	r1, r5
 8019e72:	f7e6 fa19 	bl	80002a8 <__aeabi_dsub>
 8019e76:	e72c      	b.n	8019cd2 <atan+0x2a>
 8019e78:	ee10 0a10 	vmov	r0, s0
 8019e7c:	2200      	movs	r2, #0
 8019e7e:	4b53      	ldr	r3, [pc, #332]	; (8019fcc <atan+0x324>)
 8019e80:	4629      	mov	r1, r5
 8019e82:	f7e6 fa11 	bl	80002a8 <__aeabi_dsub>
 8019e86:	2200      	movs	r2, #0
 8019e88:	4606      	mov	r6, r0
 8019e8a:	460f      	mov	r7, r1
 8019e8c:	4b4f      	ldr	r3, [pc, #316]	; (8019fcc <atan+0x324>)
 8019e8e:	4620      	mov	r0, r4
 8019e90:	4629      	mov	r1, r5
 8019e92:	f7e6 fa0b 	bl	80002ac <__adddf3>
 8019e96:	4602      	mov	r2, r0
 8019e98:	460b      	mov	r3, r1
 8019e9a:	4630      	mov	r0, r6
 8019e9c:	4639      	mov	r1, r7
 8019e9e:	f7e6 fce5 	bl	800086c <__aeabi_ddiv>
 8019ea2:	f04f 0a01 	mov.w	sl, #1
 8019ea6:	4604      	mov	r4, r0
 8019ea8:	460d      	mov	r5, r1
 8019eaa:	e764      	b.n	8019d76 <atan+0xce>
 8019eac:	4b49      	ldr	r3, [pc, #292]	; (8019fd4 <atan+0x32c>)
 8019eae:	429e      	cmp	r6, r3
 8019eb0:	dc1d      	bgt.n	8019eee <atan+0x246>
 8019eb2:	ee10 0a10 	vmov	r0, s0
 8019eb6:	2200      	movs	r2, #0
 8019eb8:	4b47      	ldr	r3, [pc, #284]	; (8019fd8 <atan+0x330>)
 8019eba:	4629      	mov	r1, r5
 8019ebc:	f7e6 f9f4 	bl	80002a8 <__aeabi_dsub>
 8019ec0:	2200      	movs	r2, #0
 8019ec2:	4606      	mov	r6, r0
 8019ec4:	460f      	mov	r7, r1
 8019ec6:	4b44      	ldr	r3, [pc, #272]	; (8019fd8 <atan+0x330>)
 8019ec8:	4620      	mov	r0, r4
 8019eca:	4629      	mov	r1, r5
 8019ecc:	f7e6 fba4 	bl	8000618 <__aeabi_dmul>
 8019ed0:	2200      	movs	r2, #0
 8019ed2:	4b3e      	ldr	r3, [pc, #248]	; (8019fcc <atan+0x324>)
 8019ed4:	f7e6 f9ea 	bl	80002ac <__adddf3>
 8019ed8:	4602      	mov	r2, r0
 8019eda:	460b      	mov	r3, r1
 8019edc:	4630      	mov	r0, r6
 8019ede:	4639      	mov	r1, r7
 8019ee0:	f7e6 fcc4 	bl	800086c <__aeabi_ddiv>
 8019ee4:	f04f 0a02 	mov.w	sl, #2
 8019ee8:	4604      	mov	r4, r0
 8019eea:	460d      	mov	r5, r1
 8019eec:	e743      	b.n	8019d76 <atan+0xce>
 8019eee:	462b      	mov	r3, r5
 8019ef0:	ee10 2a10 	vmov	r2, s0
 8019ef4:	2000      	movs	r0, #0
 8019ef6:	4939      	ldr	r1, [pc, #228]	; (8019fdc <atan+0x334>)
 8019ef8:	f7e6 fcb8 	bl	800086c <__aeabi_ddiv>
 8019efc:	f04f 0a03 	mov.w	sl, #3
 8019f00:	4604      	mov	r4, r0
 8019f02:	460d      	mov	r5, r1
 8019f04:	e737      	b.n	8019d76 <atan+0xce>
 8019f06:	4b36      	ldr	r3, [pc, #216]	; (8019fe0 <atan+0x338>)
 8019f08:	4e36      	ldr	r6, [pc, #216]	; (8019fe4 <atan+0x33c>)
 8019f0a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8019f0e:	4456      	add	r6, sl
 8019f10:	449a      	add	sl, r3
 8019f12:	e9da 2300 	ldrd	r2, r3, [sl]
 8019f16:	f7e6 f9c7 	bl	80002a8 <__aeabi_dsub>
 8019f1a:	4622      	mov	r2, r4
 8019f1c:	462b      	mov	r3, r5
 8019f1e:	f7e6 f9c3 	bl	80002a8 <__aeabi_dsub>
 8019f22:	4602      	mov	r2, r0
 8019f24:	460b      	mov	r3, r1
 8019f26:	e9d6 0100 	ldrd	r0, r1, [r6]
 8019f2a:	f7e6 f9bd 	bl	80002a8 <__aeabi_dsub>
 8019f2e:	f1bb 0f00 	cmp.w	fp, #0
 8019f32:	4604      	mov	r4, r0
 8019f34:	460d      	mov	r5, r1
 8019f36:	f6bf aed6 	bge.w	8019ce6 <atan+0x3e>
 8019f3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019f3e:	461d      	mov	r5, r3
 8019f40:	e6d1      	b.n	8019ce6 <atan+0x3e>
 8019f42:	a51d      	add	r5, pc, #116	; (adr r5, 8019fb8 <atan+0x310>)
 8019f44:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019f48:	e6cd      	b.n	8019ce6 <atan+0x3e>
 8019f4a:	bf00      	nop
 8019f4c:	f3af 8000 	nop.w
 8019f50:	54442d18 	.word	0x54442d18
 8019f54:	3ff921fb 	.word	0x3ff921fb
 8019f58:	8800759c 	.word	0x8800759c
 8019f5c:	7e37e43c 	.word	0x7e37e43c
 8019f60:	e322da11 	.word	0xe322da11
 8019f64:	3f90ad3a 	.word	0x3f90ad3a
 8019f68:	24760deb 	.word	0x24760deb
 8019f6c:	3fa97b4b 	.word	0x3fa97b4b
 8019f70:	a0d03d51 	.word	0xa0d03d51
 8019f74:	3fb10d66 	.word	0x3fb10d66
 8019f78:	c54c206e 	.word	0xc54c206e
 8019f7c:	3fb745cd 	.word	0x3fb745cd
 8019f80:	920083ff 	.word	0x920083ff
 8019f84:	3fc24924 	.word	0x3fc24924
 8019f88:	5555550d 	.word	0x5555550d
 8019f8c:	3fd55555 	.word	0x3fd55555
 8019f90:	2c6a6c2f 	.word	0x2c6a6c2f
 8019f94:	bfa2b444 	.word	0xbfa2b444
 8019f98:	52defd9a 	.word	0x52defd9a
 8019f9c:	3fadde2d 	.word	0x3fadde2d
 8019fa0:	af749a6d 	.word	0xaf749a6d
 8019fa4:	3fb3b0f2 	.word	0x3fb3b0f2
 8019fa8:	fe231671 	.word	0xfe231671
 8019fac:	3fbc71c6 	.word	0x3fbc71c6
 8019fb0:	9998ebc4 	.word	0x9998ebc4
 8019fb4:	3fc99999 	.word	0x3fc99999
 8019fb8:	54442d18 	.word	0x54442d18
 8019fbc:	bff921fb 	.word	0xbff921fb
 8019fc0:	440fffff 	.word	0x440fffff
 8019fc4:	7ff00000 	.word	0x7ff00000
 8019fc8:	3fdbffff 	.word	0x3fdbffff
 8019fcc:	3ff00000 	.word	0x3ff00000
 8019fd0:	3ff2ffff 	.word	0x3ff2ffff
 8019fd4:	40037fff 	.word	0x40037fff
 8019fd8:	3ff80000 	.word	0x3ff80000
 8019fdc:	bff00000 	.word	0xbff00000
 8019fe0:	0801ae70 	.word	0x0801ae70
 8019fe4:	0801ae50 	.word	0x0801ae50

08019fe8 <fabs>:
 8019fe8:	ec51 0b10 	vmov	r0, r1, d0
 8019fec:	ee10 2a10 	vmov	r2, s0
 8019ff0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019ff4:	ec43 2b10 	vmov	d0, r2, r3
 8019ff8:	4770      	bx	lr

08019ffa <finite>:
 8019ffa:	ee10 3a90 	vmov	r3, s1
 8019ffe:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801a002:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a006:	0fc0      	lsrs	r0, r0, #31
 801a008:	4770      	bx	lr

0801a00a <matherr>:
 801a00a:	2000      	movs	r0, #0
 801a00c:	4770      	bx	lr
	...

0801a010 <nan>:
 801a010:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a018 <nan+0x8>
 801a014:	4770      	bx	lr
 801a016:	bf00      	nop
 801a018:	00000000 	.word	0x00000000
 801a01c:	7ff80000 	.word	0x7ff80000

0801a020 <rint>:
 801a020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a022:	ec51 0b10 	vmov	r0, r1, d0
 801a026:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a02a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801a02e:	2e13      	cmp	r6, #19
 801a030:	460b      	mov	r3, r1
 801a032:	ee10 4a10 	vmov	r4, s0
 801a036:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801a03a:	dc56      	bgt.n	801a0ea <rint+0xca>
 801a03c:	2e00      	cmp	r6, #0
 801a03e:	da2b      	bge.n	801a098 <rint+0x78>
 801a040:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801a044:	4302      	orrs	r2, r0
 801a046:	d023      	beq.n	801a090 <rint+0x70>
 801a048:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801a04c:	4302      	orrs	r2, r0
 801a04e:	4254      	negs	r4, r2
 801a050:	4314      	orrs	r4, r2
 801a052:	0c4b      	lsrs	r3, r1, #17
 801a054:	0b24      	lsrs	r4, r4, #12
 801a056:	045b      	lsls	r3, r3, #17
 801a058:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801a05c:	ea44 0103 	orr.w	r1, r4, r3
 801a060:	460b      	mov	r3, r1
 801a062:	492f      	ldr	r1, [pc, #188]	; (801a120 <rint+0x100>)
 801a064:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801a068:	e9d1 6700 	ldrd	r6, r7, [r1]
 801a06c:	4602      	mov	r2, r0
 801a06e:	4639      	mov	r1, r7
 801a070:	4630      	mov	r0, r6
 801a072:	f7e6 f91b 	bl	80002ac <__adddf3>
 801a076:	e9cd 0100 	strd	r0, r1, [sp]
 801a07a:	463b      	mov	r3, r7
 801a07c:	4632      	mov	r2, r6
 801a07e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a082:	f7e6 f911 	bl	80002a8 <__aeabi_dsub>
 801a086:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a08a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801a08e:	4639      	mov	r1, r7
 801a090:	ec41 0b10 	vmov	d0, r0, r1
 801a094:	b003      	add	sp, #12
 801a096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a098:	4a22      	ldr	r2, [pc, #136]	; (801a124 <rint+0x104>)
 801a09a:	4132      	asrs	r2, r6
 801a09c:	ea01 0702 	and.w	r7, r1, r2
 801a0a0:	4307      	orrs	r7, r0
 801a0a2:	d0f5      	beq.n	801a090 <rint+0x70>
 801a0a4:	0852      	lsrs	r2, r2, #1
 801a0a6:	4011      	ands	r1, r2
 801a0a8:	430c      	orrs	r4, r1
 801a0aa:	d00b      	beq.n	801a0c4 <rint+0xa4>
 801a0ac:	ea23 0202 	bic.w	r2, r3, r2
 801a0b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801a0b4:	2e13      	cmp	r6, #19
 801a0b6:	fa43 f306 	asr.w	r3, r3, r6
 801a0ba:	bf0c      	ite	eq
 801a0bc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801a0c0:	2400      	movne	r4, #0
 801a0c2:	4313      	orrs	r3, r2
 801a0c4:	4916      	ldr	r1, [pc, #88]	; (801a120 <rint+0x100>)
 801a0c6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801a0ca:	4622      	mov	r2, r4
 801a0cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a0d0:	4620      	mov	r0, r4
 801a0d2:	4629      	mov	r1, r5
 801a0d4:	f7e6 f8ea 	bl	80002ac <__adddf3>
 801a0d8:	e9cd 0100 	strd	r0, r1, [sp]
 801a0dc:	4622      	mov	r2, r4
 801a0de:	462b      	mov	r3, r5
 801a0e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a0e4:	f7e6 f8e0 	bl	80002a8 <__aeabi_dsub>
 801a0e8:	e7d2      	b.n	801a090 <rint+0x70>
 801a0ea:	2e33      	cmp	r6, #51	; 0x33
 801a0ec:	dd07      	ble.n	801a0fe <rint+0xde>
 801a0ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801a0f2:	d1cd      	bne.n	801a090 <rint+0x70>
 801a0f4:	ee10 2a10 	vmov	r2, s0
 801a0f8:	f7e6 f8d8 	bl	80002ac <__adddf3>
 801a0fc:	e7c8      	b.n	801a090 <rint+0x70>
 801a0fe:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801a102:	f04f 32ff 	mov.w	r2, #4294967295
 801a106:	40f2      	lsrs	r2, r6
 801a108:	4210      	tst	r0, r2
 801a10a:	d0c1      	beq.n	801a090 <rint+0x70>
 801a10c:	0852      	lsrs	r2, r2, #1
 801a10e:	4210      	tst	r0, r2
 801a110:	bf1f      	itttt	ne
 801a112:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801a116:	ea20 0202 	bicne.w	r2, r0, r2
 801a11a:	4134      	asrne	r4, r6
 801a11c:	4314      	orrne	r4, r2
 801a11e:	e7d1      	b.n	801a0c4 <rint+0xa4>
 801a120:	0801ae90 	.word	0x0801ae90
 801a124:	000fffff 	.word	0x000fffff

0801a128 <scalbn>:
 801a128:	b570      	push	{r4, r5, r6, lr}
 801a12a:	ec55 4b10 	vmov	r4, r5, d0
 801a12e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801a132:	4606      	mov	r6, r0
 801a134:	462b      	mov	r3, r5
 801a136:	b9aa      	cbnz	r2, 801a164 <scalbn+0x3c>
 801a138:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a13c:	4323      	orrs	r3, r4
 801a13e:	d03b      	beq.n	801a1b8 <scalbn+0x90>
 801a140:	4b31      	ldr	r3, [pc, #196]	; (801a208 <scalbn+0xe0>)
 801a142:	4629      	mov	r1, r5
 801a144:	2200      	movs	r2, #0
 801a146:	ee10 0a10 	vmov	r0, s0
 801a14a:	f7e6 fa65 	bl	8000618 <__aeabi_dmul>
 801a14e:	4b2f      	ldr	r3, [pc, #188]	; (801a20c <scalbn+0xe4>)
 801a150:	429e      	cmp	r6, r3
 801a152:	4604      	mov	r4, r0
 801a154:	460d      	mov	r5, r1
 801a156:	da12      	bge.n	801a17e <scalbn+0x56>
 801a158:	a327      	add	r3, pc, #156	; (adr r3, 801a1f8 <scalbn+0xd0>)
 801a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a15e:	f7e6 fa5b 	bl	8000618 <__aeabi_dmul>
 801a162:	e009      	b.n	801a178 <scalbn+0x50>
 801a164:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801a168:	428a      	cmp	r2, r1
 801a16a:	d10c      	bne.n	801a186 <scalbn+0x5e>
 801a16c:	ee10 2a10 	vmov	r2, s0
 801a170:	4620      	mov	r0, r4
 801a172:	4629      	mov	r1, r5
 801a174:	f7e6 f89a 	bl	80002ac <__adddf3>
 801a178:	4604      	mov	r4, r0
 801a17a:	460d      	mov	r5, r1
 801a17c:	e01c      	b.n	801a1b8 <scalbn+0x90>
 801a17e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a182:	460b      	mov	r3, r1
 801a184:	3a36      	subs	r2, #54	; 0x36
 801a186:	4432      	add	r2, r6
 801a188:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a18c:	428a      	cmp	r2, r1
 801a18e:	dd0b      	ble.n	801a1a8 <scalbn+0x80>
 801a190:	ec45 4b11 	vmov	d1, r4, r5
 801a194:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801a200 <scalbn+0xd8>
 801a198:	f000 f83c 	bl	801a214 <copysign>
 801a19c:	a318      	add	r3, pc, #96	; (adr r3, 801a200 <scalbn+0xd8>)
 801a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1a2:	ec51 0b10 	vmov	r0, r1, d0
 801a1a6:	e7da      	b.n	801a15e <scalbn+0x36>
 801a1a8:	2a00      	cmp	r2, #0
 801a1aa:	dd08      	ble.n	801a1be <scalbn+0x96>
 801a1ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a1b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a1b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a1b8:	ec45 4b10 	vmov	d0, r4, r5
 801a1bc:	bd70      	pop	{r4, r5, r6, pc}
 801a1be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a1c2:	da0d      	bge.n	801a1e0 <scalbn+0xb8>
 801a1c4:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a1c8:	429e      	cmp	r6, r3
 801a1ca:	ec45 4b11 	vmov	d1, r4, r5
 801a1ce:	dce1      	bgt.n	801a194 <scalbn+0x6c>
 801a1d0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801a1f8 <scalbn+0xd0>
 801a1d4:	f000 f81e 	bl	801a214 <copysign>
 801a1d8:	a307      	add	r3, pc, #28	; (adr r3, 801a1f8 <scalbn+0xd0>)
 801a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1de:	e7e0      	b.n	801a1a2 <scalbn+0x7a>
 801a1e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a1e4:	3236      	adds	r2, #54	; 0x36
 801a1e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a1ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a1ee:	4620      	mov	r0, r4
 801a1f0:	4629      	mov	r1, r5
 801a1f2:	2200      	movs	r2, #0
 801a1f4:	4b06      	ldr	r3, [pc, #24]	; (801a210 <scalbn+0xe8>)
 801a1f6:	e7b2      	b.n	801a15e <scalbn+0x36>
 801a1f8:	c2f8f359 	.word	0xc2f8f359
 801a1fc:	01a56e1f 	.word	0x01a56e1f
 801a200:	8800759c 	.word	0x8800759c
 801a204:	7e37e43c 	.word	0x7e37e43c
 801a208:	43500000 	.word	0x43500000
 801a20c:	ffff3cb0 	.word	0xffff3cb0
 801a210:	3c900000 	.word	0x3c900000

0801a214 <copysign>:
 801a214:	ec51 0b10 	vmov	r0, r1, d0
 801a218:	ee11 0a90 	vmov	r0, s3
 801a21c:	ee10 2a10 	vmov	r2, s0
 801a220:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801a224:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801a228:	ea41 0300 	orr.w	r3, r1, r0
 801a22c:	ec43 2b10 	vmov	d0, r2, r3
 801a230:	4770      	bx	lr
	...

0801a234 <_init>:
 801a234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a236:	bf00      	nop
 801a238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a23a:	bc08      	pop	{r3}
 801a23c:	469e      	mov	lr, r3
 801a23e:	4770      	bx	lr

0801a240 <_fini>:
 801a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a242:	bf00      	nop
 801a244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a246:	bc08      	pop	{r3}
 801a248:	469e      	mov	lr, r3
 801a24a:	4770      	bx	lr
