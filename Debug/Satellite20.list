
Satellite20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b3cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  0801b560  0801b560  0002b560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c410  0801c410  0003036c  2**0
                  CONTENTS
  4 .ARM          00000008  0801c410  0801c410  0002c410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c418  0801c418  0003036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c418  0801c418  0002c418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c41c  0801c41c  0002c41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  0801c420  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009ff4  20000370  0801c78c  00030370  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000a364  0801c78c  0003a364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045cde  00000000  00000000  0003039c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c2a  00000000  00000000  0007607a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002868  00000000  00000000  0007dca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002530  00000000  00000000  00080510  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d7bd  00000000  00000000  00082a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b9c0  00000000  00000000  000b01fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d74d6  00000000  00000000  000dbbbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b3093  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bac4  00000000  00000000  001b3110  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  001bebd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000370 	.word	0x20000370
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b544 	.word	0x0801b544

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000374 	.word	0x20000374
 80001cc:	0801b544 	.word	0x0801b544

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc6:	f000 b9bd 	b.w	8001044 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f84d 	bl	8000d78 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f840 	bl	8000d78 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f82f 	bl	8000d78 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f821 	bl	8000d78 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b972 	b.w	8001044 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4688      	mov	r8, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14b      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4615      	mov	r5, r2
 8000d8a:	d967      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0720 	rsb	r7, r2, #32
 8000d96:	fa01 f302 	lsl.w	r3, r1, r2
 8000d9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d9e:	4095      	lsls	r5, r2
 8000da0:	ea47 0803 	orr.w	r8, r7, r3
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000db0:	fa1f fc85 	uxth.w	ip, r5
 8000db4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18eb      	adds	r3, r5, r3
 8000dc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dca:	f080 811b 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8118 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000dd4:	3f02      	subs	r7, #2
 8000dd6:	442b      	add	r3, r5
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	192c      	adds	r4, r5, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x290>
 8000e00:	3802      	subs	r0, #2
 8000e02:	442c      	add	r4, r5
 8000e04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e08:	eba4 040c 	sub.w	r4, r4, ip
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	b11e      	cbz	r6, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c6 4300 	strd	r4, r3, [r6]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xbe>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80eb 	beq.w	8000ffe <__udivmoddi4+0x286>
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e2e:	4638      	mov	r0, r7
 8000e30:	4639      	mov	r1, r7
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f783 	clz	r7, r3
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d147      	bne.n	8000ece <__udivmoddi4+0x156>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd0>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80fa 	bhi.w	800103c <__udivmoddi4+0x2c4>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4698      	mov	r8, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000e56:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xe8>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 808f 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e6a:	1b49      	subs	r1, r1, r5
 8000e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e70:	fa1f f885 	uxth.w	r8, r5
 8000e74:	2701      	movs	r7, #1
 8000e76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e7a:	0c23      	lsrs	r3, r4, #16
 8000e7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb08 f10c 	mul.w	r1, r8, ip
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8c:	18eb      	adds	r3, r5, r3
 8000e8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	f200 80cd 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e9a:	4684      	mov	ip, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	b2a3      	uxth	r3, r4
 8000ea0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ea8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eac:	fb08 f800 	mul.w	r8, r8, r0
 8000eb0:	45a0      	cmp	r8, r4
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x14c>
 8000eb4:	192c      	adds	r4, r5, r4
 8000eb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eba:	d202      	bcs.n	8000ec2 <__udivmoddi4+0x14a>
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	f200 80b6 	bhi.w	800102e <__udivmoddi4+0x2b6>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	eba4 0408 	sub.w	r4, r4, r8
 8000ec8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ecc:	e79f      	b.n	8000e0e <__udivmoddi4+0x96>
 8000ece:	f1c7 0c20 	rsb	ip, r7, #32
 8000ed2:	40bb      	lsls	r3, r7
 8000ed4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ed8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000edc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ee0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ee4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ee8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000eec:	4325      	orrs	r5, r4
 8000eee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ef2:	0c2c      	lsrs	r4, r5, #16
 8000ef4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ef8:	fa1f fa8e 	uxth.w	sl, lr
 8000efc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f00:	fb09 f40a 	mul.w	r4, r9, sl
 8000f04:	429c      	cmp	r4, r3
 8000f06:	fa02 f207 	lsl.w	r2, r2, r7
 8000f0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1e 0303 	adds.w	r3, lr, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	f080 8087 	bcs.w	800102a <__udivmoddi4+0x2b2>
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	f240 8084 	bls.w	800102a <__udivmoddi4+0x2b2>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4473      	add	r3, lr
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	b2ad      	uxth	r5, r5
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f3c:	45a2      	cmp	sl, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1e 0404 	adds.w	r4, lr, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f48:	d26b      	bcs.n	8001022 <__udivmoddi4+0x2aa>
 8000f4a:	45a2      	cmp	sl, r4
 8000f4c:	d969      	bls.n	8001022 <__udivmoddi4+0x2aa>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4474      	add	r4, lr
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	eba4 040a 	sub.w	r4, r4, sl
 8000f5e:	454c      	cmp	r4, r9
 8000f60:	46c2      	mov	sl, r8
 8000f62:	464b      	mov	r3, r9
 8000f64:	d354      	bcc.n	8001010 <__udivmoddi4+0x298>
 8000f66:	d051      	beq.n	800100c <__udivmoddi4+0x294>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d069      	beq.n	8001040 <__udivmoddi4+0x2c8>
 8000f6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f70:	eb64 0403 	sbc.w	r4, r4, r3
 8000f74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f78:	40fd      	lsrs	r5, r7
 8000f7a:	40fc      	lsrs	r4, r7
 8000f7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f80:	e9c6 5400 	strd	r5, r4, [r6]
 8000f84:	2700      	movs	r7, #0
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f90:	4095      	lsls	r5, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f9e:	4338      	orrs	r0, r7
 8000fa0:	0c01      	lsrs	r1, r0, #16
 8000fa2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fa6:	fa1f f885 	uxth.w	r8, r5
 8000faa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb07 f308 	mul.w	r3, r7, r8
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x256>
 8000fbe:	1869      	adds	r1, r5, r1
 8000fc0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fc4:	d22f      	bcs.n	8001026 <__udivmoddi4+0x2ae>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d92d      	bls.n	8001026 <__udivmoddi4+0x2ae>
 8000fca:	3f02      	subs	r7, #2
 8000fcc:	4429      	add	r1, r5
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	b281      	uxth	r1, r0
 8000fd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb00 f308 	mul.w	r3, r0, r8
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x27e>
 8000fe6:	1869      	adds	r1, r5, r1
 8000fe8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fec:	d217      	bcs.n	800101e <__udivmoddi4+0x2a6>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d915      	bls.n	800101e <__udivmoddi4+0x2a6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4429      	add	r1, r5
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ffc:	e73b      	b.n	8000e76 <__udivmoddi4+0xfe>
 8000ffe:	4637      	mov	r7, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e709      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001004:	4607      	mov	r7, r0
 8001006:	e6e7      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001008:	4618      	mov	r0, r3
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x8c>
 800100c:	4541      	cmp	r1, r8
 800100e:	d2ab      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001010:	ebb8 0a02 	subs.w	sl, r8, r2
 8001014:	eb69 020e 	sbc.w	r2, r9, lr
 8001018:	3801      	subs	r0, #1
 800101a:	4613      	mov	r3, r2
 800101c:	e7a4      	b.n	8000f68 <__udivmoddi4+0x1f0>
 800101e:	4660      	mov	r0, ip
 8001020:	e7e9      	b.n	8000ff6 <__udivmoddi4+0x27e>
 8001022:	4618      	mov	r0, r3
 8001024:	e795      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001026:	4667      	mov	r7, ip
 8001028:	e7d1      	b.n	8000fce <__udivmoddi4+0x256>
 800102a:	4681      	mov	r9, r0
 800102c:	e77c      	b.n	8000f28 <__udivmoddi4+0x1b0>
 800102e:	3802      	subs	r0, #2
 8001030:	442c      	add	r4, r5
 8001032:	e747      	b.n	8000ec4 <__udivmoddi4+0x14c>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	442b      	add	r3, r5
 800103a:	e72f      	b.n	8000e9c <__udivmoddi4+0x124>
 800103c:	4638      	mov	r0, r7
 800103e:	e708      	b.n	8000e52 <__udivmoddi4+0xda>
 8001040:	4637      	mov	r7, r6
 8001042:	e6e9      	b.n	8000e18 <__udivmoddi4+0xa0>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <println>:

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
};
static inline void println(char* str)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	2140      	movs	r1, #64	; 0x40
 8001054:	4820      	ldr	r0, [pc, #128]	; (80010d8 <println+0x90>)
 8001056:	f004 feb7 	bl	8005dc8 <HAL_GPIO_WritePin>

	printLen = strlen(str);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff f8c2 	bl	80001e4 <strlen>
 8001060:	4602      	mov	r2, r0
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <println+0x94>)
 8001064:	601a      	str	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < printLen; i++)
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	e009      	b.n	8001080 <println+0x38>
	{
		printBuffer[i] = str[i];
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	441a      	add	r2, r3
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	7811      	ldrb	r1, [r2, #0]
 8001076:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <println+0x98>)
 8001078:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	3301      	adds	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <println+0x94>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	d3f0      	bcc.n	800106c <println+0x24>
	}
	printBuffer[printLen] = '\n';
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <println+0x94>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <println+0x98>)
 8001090:	210a      	movs	r1, #10
 8001092:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <println+0x94>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	4a11      	ldr	r2, [pc, #68]	; (80010e0 <println+0x98>)
 800109c:	210d      	movs	r1, #13
 800109e:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <println+0x94>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	3302      	adds	r3, #2
 80010a6:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <println+0x98>)
 80010a8:	2100      	movs	r1, #0
 80010aa:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 80010ac:	bf00      	nop
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <println+0x94>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	3303      	adds	r3, #3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4619      	mov	r1, r3
 80010ba:	4809      	ldr	r0, [pc, #36]	; (80010e0 <println+0x98>)
 80010bc:	f014 f838 	bl	8015130 <CDC_Transmit_FS>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d0f3      	beq.n	80010ae <println+0x66>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2140      	movs	r1, #64	; 0x40
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <println+0x90>)
 80010cc:	f004 fe7c 	bl	8005dc8 <HAL_GPIO_WritePin>
	#endif
};
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40020800 	.word	0x40020800
 80010dc:	20000390 	.word	0x20000390
 80010e0:	20000394 	.word	0x20000394

080010e4 <setMotors>:
// DRV8838 has max of 250kHz PWM frequency
// Motors will automatically turn off after (TIM4->ARR * 1ms) time, default 100ms
// Any new value applied will reset timeout timer

void setMotors(float dutyL, float dutyR)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80010ee:	edc7 0a00 	vstr	s1, [r7]
	if (motorsEnabled)
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <setMotors+0x90>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d037      	beq.n	800116a <setMotors+0x86>
	{
		TIM5->CCR2 = (uint32_t)((float)TIM5->ARR * (1 - dutyL));
 80010fa:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <setMotors+0x94>)
 80010fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800110a:	edd7 7a01 	vldr	s15, [r7, #4]
 800110e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <setMotors+0x94>)
 8001118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800111c:	ee17 2a90 	vmov	r2, s15
 8001120:	639a      	str	r2, [r3, #56]	; 0x38
		TIM5->CCR4 = (uint32_t)((float)TIM5->ARR * (1 - dutyR));
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <setMotors+0x94>)
 8001124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800112e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001132:	edd7 7a00 	vldr	s15, [r7]
 8001136:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800113a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <setMotors+0x94>)
 8001140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001144:	ee17 2a90 	vmov	r2, s15
 8001148:	641a      	str	r2, [r3, #64]	; 0x40
		TIM5->CNT = 0;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <setMotors+0x94>)
 800114c:	2200      	movs	r2, #0
 800114e:	625a      	str	r2, [r3, #36]	; 0x24

		TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <setMotors+0x98>)
 8001152:	2200      	movs	r2, #0
 8001154:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	2104      	movs	r1, #4
 800115a:	4809      	ldr	r0, [pc, #36]	; (8001180 <setMotors+0x9c>)
 800115c:	f004 fe34 	bl	8005dc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2101      	movs	r1, #1
 8001164:	4806      	ldr	r0, [pc, #24]	; (8001180 <setMotors+0x9c>)
 8001166:	f004 fe2f 	bl	8005dc8 <HAL_GPIO_WritePin>
	}
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000038c 	.word	0x2000038c
 8001178:	40000c00 	.word	0x40000c00
 800117c:	40000800 	.word	0x40000800
 8001180:	40020000 	.word	0x40020000

08001184 <haltMotors>:

void haltMotors(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
	// Function called on TIM4 overflow interrupt
	TIM5->CCR2 = TIM5->ARR;
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <haltMotors+0x24>)
 800118a:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <haltMotors+0x24>)
 800118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118e:	6393      	str	r3, [r2, #56]	; 0x38
	TIM5->CCR4 = TIM5->ARR;
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <haltMotors+0x24>)
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <haltMotors+0x24>)
 8001194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001196:	6413      	str	r3, [r2, #64]	; 0x40

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <haltMotors+0x28>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40000c00 	.word	0x40000c00
 80011ac:	40000800 	.word	0x40000800

080011b0 <enableMotors>:

void enableMotors(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	if (!motorsEnabled)
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <enableMotors+0x70>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	f083 0301 	eor.w	r3, r3, #1
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d02b      	beq.n	800121a <enableMotors+0x6a>
	{
		haltMotors();
 80011c2:	f7ff ffdf 	bl	8001184 <haltMotors>
		motorsEnabled = true;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <enableMotors+0x70>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]

		//MAX_PWM_FREQ = 42000000 / (2 * PWM_RESOLUTION); // 82031 Hz for 256 resolution
		//setPwmFrequency(MAX_PWM_FREQ);

		motL_forward = true;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <enableMotors+0x74>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
		motR_forward = true;
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <enableMotors+0x78>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]

		// flip direction based on config
		HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, motL_forward ^ MOTOR_L_DIR);
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <enableMotors+0x74>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	2101      	movs	r1, #1
 80011e0:	4812      	ldr	r0, [pc, #72]	; (800122c <enableMotors+0x7c>)
 80011e2:	f004 fdf1 	bl	8005dc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, motR_forward ^ MOTOR_R_DIR);
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <enableMotors+0x78>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	2104      	movs	r1, #4
 80011ee:	480f      	ldr	r0, [pc, #60]	; (800122c <enableMotors+0x7c>)
 80011f0:	f004 fdea 	bl	8005dc8 <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Start(Get_TIM5_Instance(), TIM_CHANNEL_2);
 80011f4:	f013 f8e2 	bl	80143bc <Get_TIM5_Instance>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2104      	movs	r1, #4
 80011fc:	4618      	mov	r0, r3
 80011fe:	f009 fd15 	bl	800ac2c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(Get_TIM5_Instance(), TIM_CHANNEL_4);
 8001202:	f013 f8db 	bl	80143bc <Get_TIM5_Instance>
 8001206:	4603      	mov	r3, r0
 8001208:	210c      	movs	r1, #12
 800120a:	4618      	mov	r0, r3
 800120c:	f009 fd0e 	bl	800ac2c <HAL_TIM_PWM_Start>

		haltMotors();
 8001210:	f7ff ffb8 	bl	8001184 <haltMotors>
		println("[MOT] MOTORS ENABLED!!");
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <enableMotors+0x80>)
 8001216:	f7ff ff17 	bl	8001048 <println>
	}
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000038c 	.word	0x2000038c
 8001224:	20000000 	.word	0x20000000
 8001228:	20000001 	.word	0x20000001
 800122c:	40020000 	.word	0x40020000
 8001230:	0801b560 	.word	0x0801b560

08001234 <disableMotors>:

void disableMotors(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	if (motorsEnabled)
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <disableMotors+0x3c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d015      	beq.n	800126c <disableMotors+0x38>
	{
		haltMotors();
 8001240:	f7ff ffa0 	bl	8001184 <haltMotors>
		motorsEnabled = false;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <disableMotors+0x3c>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Stop(Get_TIM5_Instance(), TIM_CHANNEL_2);
 800124a:	f013 f8b7 	bl	80143bc <Get_TIM5_Instance>
 800124e:	4603      	mov	r3, r0
 8001250:	2104      	movs	r1, #4
 8001252:	4618      	mov	r0, r3
 8001254:	f009 fd28 	bl	800aca8 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(Get_TIM5_Instance(), TIM_CHANNEL_4);
 8001258:	f013 f8b0 	bl	80143bc <Get_TIM5_Instance>
 800125c:	4603      	mov	r3, r0
 800125e:	210c      	movs	r1, #12
 8001260:	4618      	mov	r0, r3
 8001262:	f009 fd21 	bl	800aca8 <HAL_TIM_PWM_Stop>
		println("[MOT] Motors DISABLED!!!!!!!1");
 8001266:	4803      	ldr	r0, [pc, #12]	; (8001274 <disableMotors+0x40>)
 8001268:	f7ff feee 	bl	8001048 <println>
	}
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	2000038c 	.word	0x2000038c
 8001274:	0801b578 	.word	0x0801b578

08001278 <SD_init>:
    return FR_OK;
}


FRESULT SD_init()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

	if (BSP_SD_Init() != MSD_OK) return FR_NOT_READY;
 800127e:	f010 ff79 	bl	8012174 <BSP_SD_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SD_init+0x14>
 8001288:	2303      	movs	r3, #3
 800128a:	e027      	b.n	80012dc <SD_init+0x64>

	if (FATFS_UnLinkDriver(SDPath) != 0) return FR_NOT_READY;
 800128c:	4815      	ldr	r0, [pc, #84]	; (80012e4 <SD_init+0x6c>)
 800128e:	f010 ff63 	bl	8012158 <FATFS_UnLinkDriver>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SD_init+0x24>
 8001298:	2303      	movs	r3, #3
 800129a:	e01f      	b.n	80012dc <SD_init+0x64>

	if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0) return FR_NOT_READY;
 800129c:	4911      	ldr	r1, [pc, #68]	; (80012e4 <SD_init+0x6c>)
 800129e:	4812      	ldr	r0, [pc, #72]	; (80012e8 <SD_init+0x70>)
 80012a0:	f010 ff12 	bl	80120c8 <FATFS_LinkDriver>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SD_init+0x36>
 80012aa:	2303      	movs	r3, #3
 80012ac:	e016      	b.n	80012dc <SD_init+0x64>

	f_mount(0, SDPath, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	490c      	ldr	r1, [pc, #48]	; (80012e4 <SD_init+0x6c>)
 80012b2:	2000      	movs	r0, #0
 80012b4:	f010 f960 	bl	8011578 <f_mount>
	FRESULT mountStatus = f_mount(&fso, SDPath, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	490a      	ldr	r1, [pc, #40]	; (80012e4 <SD_init+0x6c>)
 80012bc:	480b      	ldr	r0, [pc, #44]	; (80012ec <SD_init+0x74>)
 80012be:	f010 f95b 	bl	8011578 <f_mount>
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	if (mountStatus != FR_OK)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <SD_init+0x62>
	{
		f_mount(0, SDPath, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	4905      	ldr	r1, [pc, #20]	; (80012e4 <SD_init+0x6c>)
 80012d0:	2000      	movs	r0, #0
 80012d2:	f010 f951 	bl	8011578 <f_mount>
		return mountStatus;
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	e000      	b.n	80012dc <SD_init+0x64>
	}

	return FR_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20006744 	.word	0x20006744
 80012e8:	0801bef8 	.word	0x0801bef8
 80012ec:	20001c34 	.word	0x20001c34

080012f0 <SD_newFile>:

	return FR_OK;
}

FRESULT SD_newFile(char* path)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	stato = f_open(&fileo, path, FA_CREATE_ALWAYS);
 80012f8:	2208      	movs	r2, #8
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	480d      	ldr	r0, [pc, #52]	; (8001334 <SD_newFile+0x44>)
 80012fe:	f010 f981 	bl	8011604 <f_open>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <SD_newFile+0x48>)
 8001308:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK)
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <SD_newFile+0x48>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <SD_newFile+0x32>
	{
		f_mount(0, SDPath, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	4909      	ldr	r1, [pc, #36]	; (800133c <SD_newFile+0x4c>)
 8001316:	2000      	movs	r0, #0
 8001318:	f010 f92e 	bl	8011578 <f_mount>
		return stato;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SD_newFile+0x48>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	e004      	b.n	800132c <SD_newFile+0x3c>


	//DateTime now = getTime();
	//SD_setFileTime(path, &now);

	f_close(&fileo);
 8001322:	4804      	ldr	r0, [pc, #16]	; (8001334 <SD_newFile+0x44>)
 8001324:	f010 fd4c 	bl	8011dc0 <f_close>
	return stato;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <SD_newFile+0x48>)
 800132a:	781b      	ldrb	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000c04 	.word	0x20000c04
 8001338:	20000c00 	.word	0x20000c00
 800133c:	20006744 	.word	0x20006744

08001340 <SD_writeToFile>:
{
	return f_unlink(path);
}

FRESULT SD_writeToFile(char* path, char* content)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	stato = f_open(&fileo, path,  FA_WRITE | FA_OPEN_APPEND);
 800134a:	2232      	movs	r2, #50	; 0x32
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4815      	ldr	r0, [pc, #84]	; (80013a4 <SD_writeToFile+0x64>)
 8001350:	f010 f958 	bl	8011604 <f_open>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <SD_writeToFile+0x68>)
 800135a:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <SD_writeToFile+0x68>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <SD_writeToFile+0x2a>
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <SD_writeToFile+0x68>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	e017      	b.n	800139a <SD_writeToFile+0x5a>

	stato = f_write(&fileo, content, strlen(content), &testByteo);
 800136a:	6838      	ldr	r0, [r7, #0]
 800136c:	f7fe ff3a 	bl	80001e4 <strlen>
 8001370:	4602      	mov	r2, r0
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <SD_writeToFile+0x6c>)
 8001374:	6839      	ldr	r1, [r7, #0]
 8001376:	480b      	ldr	r0, [pc, #44]	; (80013a4 <SD_writeToFile+0x64>)
 8001378:	f010 fb10 	bl	801199c <f_write>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <SD_writeToFile+0x68>)
 8001382:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <SD_writeToFile+0x68>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <SD_writeToFile+0x52>
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <SD_writeToFile+0x68>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	e003      	b.n	800139a <SD_writeToFile+0x5a>

	return f_close(&fileo);
 8001392:	4804      	ldr	r0, [pc, #16]	; (80013a4 <SD_writeToFile+0x64>)
 8001394:	f010 fd14 	bl	8011dc0 <f_close>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000c04 	.word	0x20000c04
 80013a8:	20000c00 	.word	0x20000c00
 80013ac:	20002c68 	.word	0x20002c68

080013b0 <SD_newDirectory>:
	//########################
	return FR_OK;
}

FRESULT SD_newDirectory(char* path)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ implement: tree -> multiple '/'
	return f_mkdir(path);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f010 fd2b 	bl	8011e14 <f_mkdir>
 80013be:	4603      	mov	r3, r0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <millis>:
#include "main.h"
#include "run.h"

// TIM5 has 32-bit counter -> takes longer to overflow
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <millis+0x1c>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	099b      	lsrs	r3, r3, #6
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	10624dd3 	.word	0x10624dd3

080013e8 <SX1278_write>:
//#### SPI communication with SX1278 ####
uint64_t frf = 0;
uint8_t frf_bytes[8] = {0};

void SX1278_write(SPI_HandleTypeDef* spi, uint8_t data)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
	// writes byte [data] on SPI bus
	HAL_SPI_Transmit(spi, &data, 1, 1000);
 80013f4:	1cf9      	adds	r1, r7, #3
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	2201      	movs	r2, #1
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f009 f800 	bl	800a402 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001402:	bf00      	nop
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f009 fad2 	bl	800a9ae <HAL_SPI_GetState>
 800140a:	4603      	mov	r3, r0
 800140c:	2b01      	cmp	r3, #1
 800140e:	d1f9      	bne.n	8001404 <SX1278_write+0x1c>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <SX1278_command>:
void SX1278_command(SX1278* inst, uint8_t addr, uint8_t cmd)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	70fb      	strb	r3, [r7, #3]
 8001424:	4613      	mov	r3, r2
 8001426:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a18      	ldr	r0, [r3, #32]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	8a5b      	ldrh	r3, [r3, #18]
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	f004 fcc8 	bl	8005dc8 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4619      	mov	r1, r3
 8001446:	4610      	mov	r0, r2
 8001448:	f7ff ffce 	bl	80013e8 <SX1278_write>
	SX1278_write(inst->spi, cmd);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001450:	78ba      	ldrb	r2, [r7, #2]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ffc7 	bl	80013e8 <SX1278_write>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a18      	ldr	r0, [r3, #32]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	8a5b      	ldrh	r3, [r3, #18]
 8001462:	2201      	movs	r2, #1
 8001464:	4619      	mov	r1, r3
 8001466:	f004 fcaf 	bl	8005dc8 <HAL_GPIO_WritePin>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <SX1278_command_burst>:
void SX1278_command_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	461a      	mov	r2, r3
 800147e:	460b      	mov	r3, r1
 8001480:	72fb      	strb	r3, [r7, #11]
 8001482:	4613      	mov	r3, r2
 8001484:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 8001486:	7abb      	ldrb	r3, [r7, #10]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d92d      	bls.n	80014e8 <SX1278_command_burst+0x76>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6a18      	ldr	r0, [r3, #32]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8a5b      	ldrh	r3, [r3, #18]
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	f004 fc96 	bl	8005dc8 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014a0:	7afb      	ldrb	r3, [r7, #11]
 80014a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	4619      	mov	r1, r3
 80014aa:	4610      	mov	r0, r2
 80014ac:	f7ff ff9c 	bl	80013e8 <SX1278_write>
	for (i = 0; i < len; i++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	75fb      	strb	r3, [r7, #23]
 80014b4:	e00b      	b.n	80014ce <SX1278_command_burst+0x5c>
	{
		SX1278_write(inst->spi, *(buff + i));	//explanation: *(buff + i) = buff[i]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff ff90 	bl	80013e8 <SX1278_write>
	for (i = 0; i < len; i++)
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	3301      	adds	r3, #1
 80014cc:	75fb      	strb	r3, [r7, #23]
 80014ce:	7dfa      	ldrb	r2, [r7, #23]
 80014d0:	7abb      	ldrb	r3, [r7, #10]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d3ef      	bcc.n	80014b6 <SX1278_command_burst+0x44>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a18      	ldr	r0, [r3, #32]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8a5b      	ldrh	r3, [r3, #18]
 80014de:	2201      	movs	r2, #1
 80014e0:	4619      	mov	r1, r3
 80014e2:	f004 fc71 	bl	8005dc8 <HAL_GPIO_WritePin>
 80014e6:	e000      	b.n	80014ea <SX1278_command_burst+0x78>
	if (len <= 1) return;
 80014e8:	bf00      	nop
}
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <SX1278_read>:

uint8_t SX1278_read(SPI_HandleTypeDef* spi)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	6078      	str	r0, [r7, #4]
	// reads byte from SPI bus
	uint8_t txByte = 0x00;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80014fc:	2300      	movs	r3, #0
 80014fe:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(spi, &txByte, &rxByte, 1, 1000);
 8001500:	f107 020e 	add.w	r2, r7, #14
 8001504:	f107 010f 	add.w	r1, r7, #15
 8001508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2301      	movs	r3, #1
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f009 f8aa 	bl	800a66a <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001516:	bf00      	nop
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f009 fa48 	bl	800a9ae <HAL_SPI_GetState>
 800151e:	4603      	mov	r3, r0
 8001520:	2b01      	cmp	r3, #1
 8001522:	d1f9      	bne.n	8001518 <SX1278_read+0x28>

	return rxByte;
 8001524:	7bbb      	ldrb	r3, [r7, #14]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <SX1278_read_address>:
uint8_t SX1278_read_address(SX1278* inst, uint8_t addr)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	70fb      	strb	r3, [r7, #3]
	uint8_t recv;

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a18      	ldr	r0, [r3, #32]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	8a5b      	ldrh	r3, [r3, #18]
 8001542:	2200      	movs	r2, #0
 8001544:	4619      	mov	r1, r3
 8001546:	f004 fc3f 	bl	8005dc8 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	78fa      	ldrb	r2, [r7, #3]
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff48 	bl	80013e8 <SX1278_write>
	recv = SX1278_read(inst->spi);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ffc7 	bl	80014f0 <SX1278_read>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a18      	ldr	r0, [r3, #32]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	8a5b      	ldrh	r3, [r3, #18]
 800156e:	2201      	movs	r2, #1
 8001570:	4619      	mov	r1, r3
 8001572:	f004 fc29 	bl	8005dc8 <HAL_GPIO_WritePin>

	return recv;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <SX1278_read_burst>:
void SX1278_read_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	461a      	mov	r2, r3
 800158c:	460b      	mov	r3, r1
 800158e:	72fb      	strb	r3, [r7, #11]
 8001590:	4613      	mov	r3, r2
 8001592:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 8001594:	7abb      	ldrb	r3, [r7, #10]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d92b      	bls.n	80015f2 <SX1278_read_burst+0x72>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6a18      	ldr	r0, [r3, #32]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8a5b      	ldrh	r3, [r3, #18]
 80015a2:	2200      	movs	r2, #0
 80015a4:	4619      	mov	r1, r3
 80015a6:	f004 fc0f 	bl	8005dc8 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ae:	7afa      	ldrb	r2, [r7, #11]
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff ff18 	bl	80013e8 <SX1278_write>
	for (i = 0; i < len; i++)
 80015b8:	2300      	movs	r3, #0
 80015ba:	75fb      	strb	r3, [r7, #23]
 80015bc:	e00c      	b.n	80015d8 <SX1278_read_burst+0x58>
	{
		*(buff + i) = SX1278_read(inst->spi);	//explanation: *(buff + i) = buff[i]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	18d4      	adds	r4, r2, r3
 80015c8:	4608      	mov	r0, r1
 80015ca:	f7ff ff91 	bl	80014f0 <SX1278_read>
 80015ce:	4603      	mov	r3, r0
 80015d0:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
 80015d4:	3301      	adds	r3, #1
 80015d6:	75fb      	strb	r3, [r7, #23]
 80015d8:	7dfa      	ldrb	r2, [r7, #23]
 80015da:	7abb      	ldrb	r3, [r7, #10]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3ee      	bcc.n	80015be <SX1278_read_burst+0x3e>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6a18      	ldr	r0, [r3, #32]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8a5b      	ldrh	r3, [r3, #18]
 80015e8:	2201      	movs	r2, #1
 80015ea:	4619      	mov	r1, r3
 80015ec:	f004 fbec 	bl	8005dc8 <HAL_GPIO_WritePin>
 80015f0:	e000      	b.n	80015f4 <SX1278_read_burst+0x74>
	if (len <= 1) return;
 80015f2:	bf00      	nop
}
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd90      	pop	{r4, r7, pc}
	...

080015fc <SX1278_init>:

//#### SX1278 usage functions ####

bool SX1278_init(SX1278* inst)
{
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	inst->active = false;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	SX1278_reset(inst);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 fab9 	bl	8001b84 <SX1278_reset>

	//unable to establish the connection with module
	uint8_t recvVersion = SX1278_read_address(inst, REG_LR_VERSION);
 8001612:	2142      	movs	r1, #66	; 0x42
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff8a 	bl	800152e <SX1278_read_address>
 800161a:	4603      	mov	r3, r0
 800161c:	73fb      	strb	r3, [r7, #15]
	//printLen = s//printf(//printBuffer, "Recv: %x\r\n", recvVersion);
	//printv(//printBuffer, //printLen);
	if (recvVersion != 0x12)
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	2b12      	cmp	r3, #18
 8001622:	d001      	beq.n	8001628 <SX1278_init+0x2c>
	{
		//println("[LoRa] Abort: Unable to access version register, SPI not working!");
		return false;
 8001624:	2300      	movs	r3, #0
 8001626:	e0d7      	b.n	80017d8 <SX1278_init+0x1dc>
	}

	//changes must be performed in a Sleep mode
	SX1278_sleep(inst);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fa8b 	bl	8001b44 <SX1278_sleep>

	//HAL_Delay(15);

	//0x88 = 1_00_0_1_000 = Lora, FSK, (r), LowFreq, Sleep
	SX1278_command(inst, LR_RegOpMode, 0x88);
 800162e:	2288      	movs	r2, #136	; 0x88
 8001630:	2101      	movs	r1, #1
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fef0 	bl	8001418 <SX1278_command>

	//SX1278_command(inst, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	frf = inst->config.frequency;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f04f 0400 	mov.w	r4, #0
 8001640:	4a67      	ldr	r2, [pc, #412]	; (80017e0 <SX1278_init+0x1e4>)
 8001642:	e9c2 3400 	strd	r3, r4, [r2]
	frf <<= 14;
 8001646:	4b66      	ldr	r3, [pc, #408]	; (80017e0 <SX1278_init+0x1e4>)
 8001648:	e9d3 1200 	ldrd	r1, r2, [r3]
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	f04f 0400 	mov.w	r4, #0
 8001654:	0394      	lsls	r4, r2, #14
 8001656:	ea44 4491 	orr.w	r4, r4, r1, lsr #18
 800165a:	038b      	lsls	r3, r1, #14
 800165c:	4a60      	ldr	r2, [pc, #384]	; (80017e0 <SX1278_init+0x1e4>)
 800165e:	e9c2 3400 	strd	r3, r4, [r2]
	frf /= 1000000;
 8001662:	4b5f      	ldr	r3, [pc, #380]	; (80017e0 <SX1278_init+0x1e4>)
 8001664:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001668:	4a5e      	ldr	r2, [pc, #376]	; (80017e4 <SX1278_init+0x1e8>)
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	f7ff fb6b 	bl	8000d48 <__aeabi_uldivmod>
 8001672:	4603      	mov	r3, r0
 8001674:	460c      	mov	r4, r1
 8001676:	4a5a      	ldr	r2, [pc, #360]	; (80017e0 <SX1278_init+0x1e4>)
 8001678:	e9c2 3400 	strd	r3, r4, [r2]
	memcpy(frf_bytes, &frf, 8);
 800167c:	4b5a      	ldr	r3, [pc, #360]	; (80017e8 <SX1278_init+0x1ec>)
 800167e:	4a58      	ldr	r2, [pc, #352]	; (80017e0 <SX1278_init+0x1e4>)
 8001680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001684:	e883 0003 	stmia.w	r3, {r0, r1}
	SX1278_command(inst, LR_RegFrMsb, frf_bytes[2]);
 8001688:	4b57      	ldr	r3, [pc, #348]	; (80017e8 <SX1278_init+0x1ec>)
 800168a:	789b      	ldrb	r3, [r3, #2]
 800168c:	461a      	mov	r2, r3
 800168e:	2106      	movs	r1, #6
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fec1 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegFrMid, frf_bytes[1]);
 8001696:	4b54      	ldr	r3, [pc, #336]	; (80017e8 <SX1278_init+0x1ec>)
 8001698:	785b      	ldrb	r3, [r3, #1]
 800169a:	461a      	mov	r2, r3
 800169c:	2107      	movs	r1, #7
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff feba 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegFrLsb, frf_bytes[0]);
 80016a4:	4b50      	ldr	r3, [pc, #320]	; (80017e8 <SX1278_init+0x1ec>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	2108      	movs	r1, #8
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff feb3 	bl	8001418 <SX1278_command>
	//printLen = s//printf(//printBuffer, "[LoRa] Frequency setting: %x_%x_%x\r\n", frf_bytes[2], frf_bytes[1], frf_bytes[0]);
	//printv(//printBuffer, //printLen);

	SX1278_command(inst, LR_RegPaConfig, inst->config.power);	//Setting transmit power
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	791b      	ldrb	r3, [r3, #4]
 80016b6:	461a      	mov	r2, r3
 80016b8:	2109      	movs	r1, #9
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff feac 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegOcp, 0x2B);			// [was 0x0B] Over current protection set to 100mA
 80016c0:	222b      	movs	r2, #43	; 0x2b
 80016c2:	210b      	movs	r1, #11
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff fea7 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegLna, 0x23);			// LNA settings: G1 - max gain, Boost on
 80016ca:	2223      	movs	r2, #35	; 0x23
 80016cc:	210c      	movs	r1, #12
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fea2 	bl	8001418 <SX1278_command>
	SX1278_command(inst, REG_LR_PADAC, 0x87);		//high power setting +20dBm
 80016d4:	2287      	movs	r2, #135	; 0x87
 80016d6:	214d      	movs	r1, #77	; 0x4d
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff fe9d 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegHopPeriod, 0x00);	//frequency hopping off
 80016de:	2200      	movs	r2, #0
 80016e0:	2124      	movs	r1, #36	; 0x24
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fe98 	bl	8001418 <SX1278_command>

	if (inst->config.spreadingFactor == SX1278_SF_6)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	795b      	ldrb	r3, [r3, #5]
 80016ec:	2b06      	cmp	r3, #6
 80016ee:	d139      	bne.n	8001764 <SX1278_init+0x168>
	{
		uint8_t tmp;
		//implicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x01));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	79db      	ldrb	r3, [r3, #7]
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	799b      	ldrb	r3, [r3, #6]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	4413      	add	r3, r2
 8001702:	b2db      	uxtb	r3, r3
 8001704:	3301      	adds	r3, #1
 8001706:	b2db      	uxtb	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	211d      	movs	r1, #29
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fe83 	bl	8001418 <SX1278_command>
		//SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + (uint8_t)(inst->config.rxTimeoutSymb >> 8)));
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	795b      	ldrb	r3, [r3, #5]
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	b2da      	uxtb	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7a1b      	ldrb	r3, [r3, #8]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	b2db      	uxtb	r3, r3
 8001722:	4413      	add	r3, r2
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	211e      	movs	r1, #30
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff fe74 	bl	8001418 <SX1278_command>
		tmp = SX1278_read_address(inst, 0x31);
 8001730:	2131      	movs	r1, #49	; 0x31
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff fefb 	bl	800152e <SX1278_read_address>
 8001738:	4603      	mov	r3, r0
 800173a:	73bb      	strb	r3, [r7, #14]
		tmp &= 0xF8;
 800173c:	7bbb      	ldrb	r3, [r7, #14]
 800173e:	f023 0307 	bic.w	r3, r3, #7
 8001742:	73bb      	strb	r3, [r7, #14]
		tmp |= 0x05;
 8001744:	7bbb      	ldrb	r3, [r7, #14]
 8001746:	f043 0305 	orr.w	r3, r3, #5
 800174a:	73bb      	strb	r3, [r7, #14]
		SX1278_command(inst, 0x31, tmp);
 800174c:	7bbb      	ldrb	r3, [r7, #14]
 800174e:	461a      	mov	r2, r3
 8001750:	2131      	movs	r1, #49	; 0x31
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fe60 	bl	8001418 <SX1278_command>
		SX1278_command(inst, 0x37, 0x0C);
 8001758:	220c      	movs	r2, #12
 800175a:	2137      	movs	r1, #55	; 0x37
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff fe5b 	bl	8001418 <SX1278_command>
 8001762:	e01d      	b.n	80017a0 <SX1278_init+0x1a4>
	}
	else
	{
		//explicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x00));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	79db      	ldrb	r3, [r3, #7]
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	b2da      	uxtb	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	799b      	ldrb	r3, [r3, #6]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4413      	add	r3, r2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	211d      	movs	r1, #29
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fe4b 	bl	8001418 <SX1278_command>
		//SFactor &  LNA gain set by the internal AGC loop
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + 0x00));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	795b      	ldrb	r3, [r3, #5]
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	b2da      	uxtb	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7a1b      	ldrb	r3, [r3, #8]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4413      	add	r3, r2
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	211e      	movs	r1, #30
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fe3c 	bl	8001418 <SX1278_command>
	}

	//SX1278_command(inst, LR_RegSymbTimeoutLsb, (uint8_t)(inst->config.rxTimeoutSymb & 0x00FF));	//recievier timeout value [timeout = symbtimeout*ts]
	SX1278_command(inst, LR_RegSymbTimeoutLsb, 0x64);	//recievier timeout value [timeout = symbtimeout*ts]
 80017a0:	2264      	movs	r2, #100	; 0x64
 80017a2:	211f      	movs	r1, #31
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fe37 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleMsb, 0x00);		//Setting the preable length?
 80017aa:	2200      	movs	r2, #0
 80017ac:	2120      	movs	r1, #32
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fe32 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleLsb, 12);		//8+4=12byte Preamble
 80017b4:	220c      	movs	r2, #12
 80017b6:	2121      	movs	r1, #33	; 0x21
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fe2d 	bl	8001418 <SX1278_command>
	SX1278_command(inst, REG_LR_DIOMAPPING2, 0x01);		//RegDioMapping2 DIO5=00, DIO4=01
 80017be:	2201      	movs	r2, #1
 80017c0:	2141      	movs	r1, #65	; 0x41
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fe28 	bl	8001418 <SX1278_command>

	SX1278_standby(inst);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f9cb 	bl	8001b64 <SX1278_standby>

	inst->active = true;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	return true;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}
 80017e0:	20000598 	.word	0x20000598
 80017e4:	000f4240 	.word	0x000f4240
 80017e8:	200005a0 	.word	0x200005a0

080017ec <SX1278_transmit>:

bool SX1278_transmit(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	4613      	mov	r3, r2
 80017f8:	71fb      	strb	r3, [r7, #7]
	// check if the module is ready for the transmission
	if (inst->mode == STANDBY)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	7b1b      	ldrb	r3, [r3, #12]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d12b      	bne.n	800185a <SX1278_transmit+0x6e>
	{
		//println("[LoRa] Starting transmission...");
		inst->txDone = false;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		SX1278_tx_mode(inst);
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 f932 	bl	8001a74 <SX1278_tx_mode>
		SX1278_tx_input(inst, txBuffer, length);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	461a      	mov	r2, r3
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 f86c 	bl	80018f4 <SX1278_tx_input>
		SX1278_tx_push(inst);
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 f898 	bl	8001952 <SX1278_tx_push>

		if (inst->useDio0IRQ)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <SX1278_transmit+0x4c>
		{
			//waiting for interrupt
			//println("[LoRa] Transmission pushed! Waiting for an interrupt...");
			inst->pendingIRQ = true;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);

			return SX1278_tx_finish(inst);
		}

		return true;
 8001834:	2301      	movs	r3, #1
 8001836:	e011      	b.n	800185c <SX1278_transmit+0x70>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 8001838:	bf00      	nop
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	69da      	ldr	r2, [r3, #28]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8a1b      	ldrh	r3, [r3, #16]
 8001842:	4619      	mov	r1, r3
 8001844:	4610      	mov	r0, r2
 8001846:	f004 faa7 	bl	8005d98 <HAL_GPIO_ReadPin>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f4      	beq.n	800183a <SX1278_transmit+0x4e>
			return SX1278_tx_finish(inst);
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f000 f88b 	bl	800196c <SX1278_tx_finish>
 8001856:	4603      	mov	r3, r0
 8001858:	e000      	b.n	800185c <SX1278_transmit+0x70>
	}
	else
	{
		//println("[LoRa] Cannot transmit...standby");
		return false;
 800185a:	2300      	movs	r3, #0
	}
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <SX1278_receive>:

bool SX1278_receive(SX1278* inst)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	// [!!] writes data to the inst->rxBuffer
	if (inst->mode == STANDBY)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7b1b      	ldrb	r3, [r3, #12]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d13a      	bne.n	80018ea <SX1278_receive+0x86>
	{
		//println("[LoRa] Starting receiving...");
		SX1278_rx_mode(inst);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f929 	bl	8001acc <SX1278_rx_mode>

		if (inst->useDio0IRQ)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00a      	beq.n	800189a <SX1278_receive+0x36>
		{
			//waiting for interrupt
			//println("[LoRa] Receiver set! Waiting for an interrupt...");
			inst->pendingIRQ = true;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			inst->rxStart = millis();
 800188c:	f7ff fd9c 	bl	80013c8 <millis>
 8001890:	4602      	mov	r2, r0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	63da      	str	r2, [r3, #60]	; 0x3c

			SX1278_rx_get_packet(inst);
			return inst->newPacket;
		}

		return true;
 8001896:	2301      	movs	r3, #1
 8001898:	e028      	b.n	80018ec <SX1278_receive+0x88>
			uint32_t recvStart = millis();
 800189a:	f7ff fd95 	bl	80013c8 <millis>
 800189e:	60f8      	str	r0, [r7, #12]
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET)
 80018a0:	e011      	b.n	80018c6 <SX1278_receive+0x62>
				if (millis() - recvStart >= inst->config.rxTimeoutSymb)
 80018a2:	f7ff fd91 	bl	80013c8 <millis>
 80018a6:	4602      	mov	r2, r0
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	8952      	ldrh	r2, [r2, #10]
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d308      	bcc.n	80018c6 <SX1278_receive+0x62>
					SX1278_rx_get_packet(inst);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f87e 	bl	80019b6 <SX1278_rx_get_packet>
					inst->rxTimeout = true;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					return false;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e012      	b.n	80018ec <SX1278_receive+0x88>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69da      	ldr	r2, [r3, #28]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	8a1b      	ldrh	r3, [r3, #16]
 80018ce:	4619      	mov	r1, r3
 80018d0:	4610      	mov	r0, r2
 80018d2:	f004 fa61 	bl	8005d98 <HAL_GPIO_ReadPin>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0e2      	beq.n	80018a2 <SX1278_receive+0x3e>
			SX1278_rx_get_packet(inst);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f86a 	bl	80019b6 <SX1278_rx_get_packet>
			return inst->newPacket;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018e8:	e000      	b.n	80018ec <SX1278_receive+0x88>
	}
	else
	{
		//println("[LoRa] Cannot receive...standby");
		return false;
 80018ea:	2300      	movs	r3, #0
	}
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <SX1278_tx_input>:

//#### Data send / receive routines ####

void SX1278_tx_input(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	4613      	mov	r3, r2
 8001900:	71fb      	strb	r3, [r7, #7]
	SX1278_command(inst, LR_RegPayloadLength, length);	//(this register must difine when the data long of one byte in SF is 6)
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	461a      	mov	r2, r3
 8001906:	2122      	movs	r1, #34	; 0x22
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f7ff fd85 	bl	8001418 <SX1278_command>
	SX1278_command_burst(inst, 0x00, txBuffer, length);
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	2100      	movs	r1, #0
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f7ff fdac 	bl	8001472 <SX1278_command_burst>

	//sprintf(inst->lastPacket, (char*)txBuffer);
	uint8_t l;
	for (l = 0; l < length; l++)
 800191a:	2300      	movs	r3, #0
 800191c:	75fb      	strb	r3, [r7, #23]
 800191e:	e00c      	b.n	800193a <SX1278_tx_input+0x46>
	{
		inst->txBuffer[l] = txBuffer[l];
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	441a      	add	r2, r3
 8001926:	7dfb      	ldrb	r3, [r7, #23]
 8001928:	7811      	ldrb	r1, [r2, #0]
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4413      	add	r3, r2
 800192e:	460a      	mov	r2, r1
 8001930:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	for (l = 0; l < length; l++)
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	3301      	adds	r3, #1
 8001938:	75fb      	strb	r3, [r7, #23]
 800193a:	7dfa      	ldrb	r2, [r7, #23]
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	429a      	cmp	r2, r3
 8001940:	d3ee      	bcc.n	8001920 <SX1278_tx_input+0x2c>
	}
	inst->txLen = length;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	79fa      	ldrb	r2, [r7, #7]
 8001946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <SX1278_tx_push>:
void SX1278_tx_push(SX1278* inst)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
	//set module to TX mode and transmit
	SX1278_command(inst, LR_RegOpMode, 0x8b);
 800195a:	228b      	movs	r2, #139	; 0x8b
 800195c:	2101      	movs	r1, #1
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fd5a 	bl	8001418 <SX1278_command>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <SX1278_tx_finish>:
bool SX1278_tx_finish(SX1278* inst)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 8001974:	2112      	movs	r1, #18
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fdd9 	bl	800152e <SX1278_read_address>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->txDone = ((inst->irqStatus & IRQ_LR_TXDONE) > 0x00);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	bfcc      	ite	gt
 8001994:	2301      	movgt	r3, #1
 8001996:	2300      	movle	r3, #0
 8001998:	b2da      	uxtb	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	SX1278_clearLoRaIrq(inst);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f9d2 	bl	8001d4a <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f8dc 	bl	8001b64 <SX1278_standby>

	//printLen = s//printf(//printBuffer, "[LoRa] Transmission finished! IRQ status: %d (<-should be 8)\r\n", inst->irqStatus);
	//printv(//printBuffer, //printLen);
	return true;
 80019ac:	2301      	movs	r3, #1
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <SX1278_rx_get_packet>:

bool SX1278_rx_get_packet(SX1278* inst)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;

	SX1278_update_IRQ_status(inst);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f980 	bl	8001cc4 <SX1278_update_IRQ_status>

	memset(inst->rxBuffer, 0x00, SX1278_MAX_PACKET);	//clear rxBuffer
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3344      	adds	r3, #68	; 0x44
 80019c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f014 f85b 	bl	8015a8a <memset>

	addr = SX1278_read_address(inst, LR_RegFifoRxCurrentaddr);	//get last packet address
 80019d4:	2110      	movs	r1, #16
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fda9 	bl	800152e <SX1278_read_address>
 80019dc:	4603      	mov	r3, r0
 80019de:	73bb      	strb	r3, [r7, #14]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);				//set fifo pointer to this address
 80019e0:	7bbb      	ldrb	r3, [r7, #14]
 80019e2:	461a      	mov	r2, r3
 80019e4:	210d      	movs	r1, #13
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff fd16 	bl	8001418 <SX1278_command>

	//When SpreadingFactor = 6, use Implicit Header mode (Excluding internal packet length)
	if (inst->config.spreadingFactor == SX1278_SF_6)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	795b      	ldrb	r3, [r3, #5]
 80019f0:	2b06      	cmp	r3, #6
 80019f2:	d104      	bne.n	80019fe <SX1278_rx_get_packet+0x48>
	{
		// ??? not sure what to put here
		packet_size = inst->txLen;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e005      	b.n	8001a0a <SX1278_rx_get_packet+0x54>
	}
	else
	{
		packet_size = SX1278_read_address(inst, LR_RegRxNbBytes); //get the number of received bytes
 80019fe:	2113      	movs	r1, #19
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff fd94 	bl	800152e <SX1278_read_address>
 8001a06:	4603      	mov	r3, r0
 8001a08:	73fb      	strb	r3, [r7, #15]
	}

	SX1278_read_burst(inst, 0x00, inst->rxBuffer, packet_size);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	2100      	movs	r1, #0
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff fdb3 	bl	8001580 <SX1278_read_burst>

	inst->newPacket = inst->rxDone && !inst->rxTimeout && !(inst->crcError && !LR_VALIDATE_CRCERROR);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d009      	beq.n	8001a38 <SX1278_rx_get_packet+0x82>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001a2a:	f083 0301 	eor.w	r3, r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <SX1278_rx_get_packet+0x82>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <SX1278_rx_get_packet+0x84>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rssi = SX1278_getRSSI(inst);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f98c 	bl	8001d64 <SX1278_getRSSI>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	635a      	str	r2, [r3, #52]	; 0x34
	inst->rxLen = packet_size;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7bfa      	ldrb	r2, [r7, #15]
 8001a56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	SX1278_clearLoRaIrq(inst);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f975 	bl	8001d4a <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f87f 	bl	8001b64 <SX1278_standby>
	{
		//printLen = s//printf(//printBuffer, "[LoRa] Valid packet received!\r\n");
	}
	//printv(//printBuffer, //printLen);

	return inst->newPacket;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <SX1278_tx_mode>:

//#### Functions to change SX1278 operation mode ####

void SX1278_tx_mode(SX1278* inst)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Transmit mode.");
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f964 	bl	8001d4a <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x41);	//DIO0=01, DIO1=00, DIO2=00, DIO3=01
 8001a82:	2241      	movs	r2, #65	; 0x41
 8001a84:	2140      	movs	r1, #64	; 0x40
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fcc6 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0xF7);	//Open TxDone interrupt
 8001a8c:	22f7      	movs	r2, #247	; 0xf7
 8001a8e:	2111      	movs	r1, #17
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff fcc1 	bl	8001418 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoTxBaseAddr);	//read tx_fifo beginning adress in memory
 8001a96:	210e      	movs	r1, #14
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff fd48 	bl	800152e <SX1278_read_address>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	210d      	movs	r1, #13
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff fcb5 	bl	8001418 <SX1278_command>

	inst->txLen = 0;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	inst->txDone = false;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	inst->mode = TX;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	731a      	strb	r2, [r3, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <SX1278_rx_mode>:

void SX1278_rx_mode(SX1278* inst)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	SX1278_standby(inst);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f845 	bl	8001b64 <SX1278_standby>
	//println("[LoRa] Goes into Receive mode.");
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f935 	bl	8001d4a <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x01);	//DIO=00, DIO1=00,DIO2=00, DIO3=01
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	2140      	movs	r1, #64	; 0x40
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fc97 	bl	8001418 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0x1F);	//Open RxDone, RxTimeout, crcError interrupt
 8001aea:	221f      	movs	r2, #31
 8001aec:	2111      	movs	r1, #17
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fc92 	bl	8001418 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoRxBaseAddr);	//read rx_fifo beginning adress in memory
 8001af4:	210f      	movs	r1, #15
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fd19 	bl	800152e <SX1278_read_address>
 8001afc:	4603      	mov	r3, r0
 8001afe:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	461a      	mov	r2, r3
 8001b04:	210d      	movs	r1, #13
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fc86 	bl	8001418 <SX1278_command>

	SX1278_command(inst, LR_RegOpMode, 0x8d);				//0x8d = 1_00_0_1_101 = Lora, FSK, (r), Low Frequency mode, Rx mode
 8001b0c:	228d      	movs	r2, #141	; 0x8d
 8001b0e:	2101      	movs	r1, #1
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fc81 	bl	8001418 <SX1278_command>

	inst->crcError = false;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rxLen = 0;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	inst->newPacket = false;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rxDone = false;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->mode = RX;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	731a      	strb	r2, [r3, #12]
	//println("[LoRa] Finished setting RX mode.");
}
 8001b3c:	bf00      	nop
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <SX1278_sleep>:

void SX1278_sleep(SX1278* inst)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Sleep mode.");
	SX1278_command(inst, LR_RegOpMode, 0x08);
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	2101      	movs	r1, #1
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff fc61 	bl	8001418 <SX1278_command>
	inst->mode = SLEEP;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	731a      	strb	r2, [r3, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <SX1278_standby>:

void SX1278_standby(SX1278* inst)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Goes into Standby mode.");
	SX1278_command(inst, LR_RegOpMode, 0x09);
 8001b6c:	2209      	movs	r2, #9
 8001b6e:	2101      	movs	r1, #1
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fc51 	bl	8001418 <SX1278_command>
	inst->mode = STANDBY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	731a      	strb	r2, [r3, #12]
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <SX1278_reset>:

void SX1278_reset(SX1278* inst) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	//println("[LoRa] Resetting...");
	inst->newPacket = true;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->rxTimeout = false;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->rxDone = false;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	inst->crcError = false;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rssi = 1;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	635a      	str	r2, [r3, #52]	; 0x34
	inst->newPacket = false;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->pendingIRQ = false;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	inst->txLen = 0;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	inst->rxLen = 0;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	inst->mode = SLEEP;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	731a      	strb	r2, [r3, #12]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a18      	ldr	r0, [r3, #32]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	8a5b      	ldrh	r3, [r3, #18]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4619      	mov	r1, r3
 8001be4:	f004 f8f0 	bl	8005dc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_RESET);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6998      	ldr	r0, [r3, #24]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	89db      	ldrh	r3, [r3, #14]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f004 f8e8 	bl	8005dc8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f003 fa67 	bl	80050cc <HAL_Delay>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_SET);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6998      	ldr	r0, [r3, #24]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	89db      	ldrh	r3, [r3, #14]
 8001c06:	2201      	movs	r2, #1
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f004 f8dd 	bl	8005dc8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001c0e:	2064      	movs	r0, #100	; 0x64
 8001c10:	f003 fa5c 	bl	80050cc <HAL_Delay>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <SX1278_dio0_IRQ>:

//#### Interrupt methods ####

bool SX1278_dio0_IRQ(SX1278* inst)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	//function to call when dio0 rises, used only when waiting for the DIO0 interrupt
	//finishes transmit and receive routines
	if (inst->useDio0IRQ && inst->pendingIRQ)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d01e      	beq.n	8001c6c <SX1278_dio0_IRQ+0x50>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d019      	beq.n	8001c6c <SX1278_dio0_IRQ+0x50>
	{
		if (inst->mode == TX)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7b1b      	ldrb	r3, [r3, #12]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d104      	bne.n	8001c4a <SX1278_dio0_IRQ+0x2e>
		{
			return SX1278_tx_finish(inst);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff fe93 	bl	800196c <SX1278_tx_finish>
 8001c46:	4603      	mov	r3, r0
 8001c48:	e011      	b.n	8001c6e <SX1278_dio0_IRQ+0x52>
		}
		else if (inst->mode == RX)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	7b1b      	ldrb	r3, [r3, #12]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d104      	bne.n	8001c5c <SX1278_dio0_IRQ+0x40>
		{
			return SX1278_rx_get_packet(inst);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff feaf 	bl	80019b6 <SX1278_rx_get_packet>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	e008      	b.n	8001c6e <SX1278_dio0_IRQ+0x52>
		}
		else
		{
			SX1278_clearLoRaIrq(inst);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f874 	bl	8001d4a <SX1278_clearLoRaIrq>
			SX1278_standby(inst);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ff7e 	bl	8001b64 <SX1278_standby>
			return false;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e000      	b.n	8001c6e <SX1278_dio0_IRQ+0x52>
		inst->pendingIRQ = false;
		return true;
	}
	else
	{
		return false;
 8001c6c:	2300      	movs	r3, #0
	}
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <SX1278_intTimeout>:

bool SX1278_intTimeout(SX1278* inst)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
	if ((millis() - inst->rxStart >= inst->config.rxTimeoutSymb) && inst->mode == RX && inst->pendingIRQ)
 8001c7e:	f7ff fba3 	bl	80013c8 <millis>
 8001c82:	4602      	mov	r2, r0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	8952      	ldrh	r2, [r2, #10]
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d313      	bcc.n	8001cba <SX1278_intTimeout+0x44>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7b1b      	ldrb	r3, [r3, #12]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d10f      	bne.n	8001cba <SX1278_intTimeout+0x44>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00a      	beq.n	8001cba <SX1278_intTimeout+0x44>
	{
		inst->rxTimeout = true;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		inst->rxStart = millis();
 8001cac:	f7ff fb8c 	bl	80013c8 <millis>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	63da      	str	r2, [r3, #60]	; 0x3c

		return true;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <SX1278_intTimeout+0x46>
	}
	return false;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <SX1278_update_IRQ_status>:

void SX1278_update_IRQ_status(SX1278* inst)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 8001ccc:	2112      	movs	r1, #18
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff fc2d 	bl	800152e <SX1278_read_address>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	inst->rxDone = 	  ((inst->irqStatus & IRQ_LR_RXDONE) > 0x00);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bfcc      	ite	gt
 8001cec:	2301      	movgt	r3, #1
 8001cee:	2300      	movle	r3, #0
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	// || inst->rxDone ##################################################### might cause error when reading this value!!!!!!!!!!!!!!!!!!!!!!!
	inst->rxTimeout = ((inst->irqStatus & IRQ_LR_RXTIMEOUT) > 0x00) || !(inst->rxDone);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	dc07      	bgt.n	8001d16 <SX1278_update_IRQ_status+0x52>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001d0c:	f083 0301 	eor.w	r3, r3, #1
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <SX1278_update_IRQ_status+0x56>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <SX1278_update_IRQ_status+0x58>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	inst->crcError =  ((inst->irqStatus & IRQ_LR_CRCERROR) > 0x00);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d2e:	f003 0320 	and.w	r3, r3, #32
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	bfcc      	ite	gt
 8001d36:	2301      	movgt	r3, #1
 8001d38:	2300      	movle	r3, #0
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278* inst)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegIrqFlags, 0xFF);
 8001d52:	22ff      	movs	r2, #255	; 0xff
 8001d54:	2112      	movs	r1, #18
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff fb5e 	bl	8001418 <SX1278_command>
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <SX1278_getRSSI>:

int SX1278_getRSSI(SX1278* inst)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  return (-164 + SX1278_read_address(inst, LR_RegPktRssiValue));
 8001d6c:	211a      	movs	r1, #26
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff fbdd 	bl	800152e <SX1278_read_address>
 8001d74:	4603      	mov	r3, r0
 8001d76:	3ba4      	subs	r3, #164	; 0xa4
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <read_data>:
#include "bmp280.h"
#include "run.h"

static inline int read_data(BMP280 *inst, uint8_t addr, uint8_t *value, uint8_t len) {
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b08b      	sub	sp, #44	; 0x2c
 8001d84:	af04      	add	r7, sp, #16
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	72fb      	strb	r3, [r7, #11]
 8001d90:	4613      	mov	r3, r2
 8001d92:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (inst->addr << 1);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	889b      	ldrh	r3, [r3, #4]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK) return 0;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	7afb      	ldrb	r3, [r7, #11]
 8001da2:	b29c      	uxth	r4, r3
 8001da4:	7abb      	ldrb	r3, [r7, #10]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	8af9      	ldrh	r1, [r7, #22]
 8001daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dae:	9202      	str	r2, [sp, #8]
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	2301      	movs	r3, #1
 8001db8:	4622      	mov	r2, r4
 8001dba:	f004 fa5b 	bl	8006274 <HAL_I2C_Mem_Read>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <read_data+0x48>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e000      	b.n	8001dca <read_data+0x4a>
	else return 1;
 8001dc8:	2301      	movs	r3, #1
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	371c      	adds	r7, #28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}

08001dd2 <write_register8>:

static int write_register8(BMP280 *inst, uint8_t addr, uint8_t value) {
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b088      	sub	sp, #32
 8001dd6:	af04      	add	r7, sp, #16
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	70fb      	strb	r3, [r7, #3]
 8001dde:	4613      	mov	r3, r2
 8001de0:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (inst->addr << 1);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	889b      	ldrh	r3, [r3, #4]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(inst->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK) return 0;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	89f9      	ldrh	r1, [r7, #14]
 8001df4:	f242 7310 	movw	r3, #10000	; 0x2710
 8001df8:	9302      	str	r3, [sp, #8]
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	1cbb      	adds	r3, r7, #2
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	2301      	movs	r3, #1
 8001e04:	f004 f93c 	bl	8006080 <HAL_I2C_Mem_Write>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <write_register8+0x40>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <write_register8+0x42>
	else return 1;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <read_register16>:

static bool read_register16(BMP280 *inst, uint8_t addr, uint16_t *value) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af04      	add	r7, sp, #16
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	460b      	mov	r3, r1
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (inst->addr << 1);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	889b      	ldrh	r3, [r3, #4]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, rx_buff, 2, 5000) == HAL_OK)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	7afb      	ldrb	r3, [r7, #11]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	8af9      	ldrh	r1, [r7, #22]
 8001e3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e40:	9302      	str	r3, [sp, #8]
 8001e42:	2302      	movs	r3, #2
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f004 fa11 	bl	8006274 <HAL_I2C_Mem_Read>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10b      	bne.n	8001e70 <read_register16+0x54>
	{
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001e58:	7d7b      	ldrb	r3, [r7, #21]
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	b21a      	sxth	r2, r3
 8001e5e:	7d3b      	ldrb	r3, [r7, #20]
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	4313      	orrs	r3, r2
 8001e64:	b21b      	sxth	r3, r3
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	801a      	strh	r2, [r3, #0]
		return true;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <read_register16+0x56>
	}
	else return false;
 8001e70:	2300      	movs	r3, #0

}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <read_calibration_data>:

static bool read_calibration_data(BMP280 *inst)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
	return (read_register16(inst, 0x88, &inst->dig_T1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	330c      	adds	r3, #12
 8001e86:	461a      	mov	r2, r3
 8001e88:	2188      	movs	r1, #136	; 0x88
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffc6 	bl	8001e1c <read_register16>
 8001e90:	4603      	mov	r3, r0
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d06f      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8a, (uint16_t *) &inst->dig_T2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	330e      	adds	r3, #14
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	218a      	movs	r1, #138	; 0x8a
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ffbc 	bl	8001e1c <read_register16>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d065      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8c, (uint16_t *) &inst->dig_T3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3310      	adds	r3, #16
 8001eae:	461a      	mov	r2, r3
 8001eb0:	218c      	movs	r1, #140	; 0x8c
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ffb2 	bl	8001e1c <read_register16>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d05b      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8e, &inst->dig_P1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3312      	adds	r3, #18
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	218e      	movs	r1, #142	; 0x8e
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffa8 	bl	8001e1c <read_register16>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d051      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x90, (uint16_t *) &inst->dig_P2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3314      	adds	r3, #20
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2190      	movs	r1, #144	; 0x90
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ff9e 	bl	8001e1c <read_register16>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d047      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x92, (uint16_t *) &inst->dig_P3)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3316      	adds	r3, #22
 8001eea:	461a      	mov	r2, r3
 8001eec:	2192      	movs	r1, #146	; 0x92
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ff94 	bl	8001e1c <read_register16>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d03d      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3318      	adds	r3, #24
 8001efe:	461a      	mov	r2, r3
 8001f00:	2194      	movs	r1, #148	; 0x94
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ff8a 	bl	8001e1c <read_register16>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d033      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	331a      	adds	r3, #26
 8001f12:	461a      	mov	r2, r3
 8001f14:	2196      	movs	r1, #150	; 0x96
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ff80 	bl	8001e1c <read_register16>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d029      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	331c      	adds	r3, #28
 8001f26:	461a      	mov	r2, r3
 8001f28:	2198      	movs	r1, #152	; 0x98
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ff76 	bl	8001e1c <read_register16>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d01f      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	331e      	adds	r3, #30
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	219a      	movs	r1, #154	; 0x9a
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ff6c 	bl	8001e1c <read_register16>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d015      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3320      	adds	r3, #32
 8001f4e:	461a      	mov	r2, r3
 8001f50:	219c      	movs	r1, #156	; 0x9c
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ff62 	bl	8001e1c <read_register16>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3322      	adds	r3, #34	; 0x22
 8001f62:	461a      	mov	r2, r3
 8001f64:	219e      	movs	r1, #158	; 0x9e
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ff58 	bl	8001e1c <read_register16>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <read_calibration_data+0xfc>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <read_calibration_data+0xfe>
 8001f76:	2300      	movs	r3, #0
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <bmp280_init>:

bool bmp280_init(BMP280 *inst, BMP280_config *params)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
	inst->active = false;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	if (inst->addr != BMP280_I2C_ADDRESS_0 && inst->addr != BMP280_I2C_ADDRESS_1) return false;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	889b      	ldrh	r3, [r3, #4]
 8001f9c:	2b76      	cmp	r3, #118	; 0x76
 8001f9e:	d005      	beq.n	8001fac <bmp280_init+0x26>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	889b      	ldrh	r3, [r3, #4]
 8001fa4:	2b77      	cmp	r3, #119	; 0x77
 8001fa6:	d001      	beq.n	8001fac <bmp280_init+0x26>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e073      	b.n	8002094 <bmp280_init+0x10e>
	if (read_data(inst, BMP280_REG_ID, &inst->id, 1)) return false;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1d9a      	adds	r2, r3, #6
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	21d0      	movs	r1, #208	; 0xd0
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff fee3 	bl	8001d80 <read_data>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <bmp280_init+0x3e>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e067      	b.n	8002094 <bmp280_init+0x10e>
	if (inst->id != BMP280_CHIP_ID) return false;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	799b      	ldrb	r3, [r3, #6]
 8001fc8:	2b58      	cmp	r3, #88	; 0x58
 8001fca:	d001      	beq.n	8001fd0 <bmp280_init+0x4a>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e061      	b.n	8002094 <bmp280_init+0x10e>

	// Soft reset.
	if (write_register8(inst, BMP280_REG_RESET, BMP280_RESET_VALUE)) return false;
 8001fd0:	22b6      	movs	r2, #182	; 0xb6
 8001fd2:	21e0      	movs	r1, #224	; 0xe0
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff fefc 	bl	8001dd2 <write_register8>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <bmp280_init+0x5e>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e057      	b.n	8002094 <bmp280_init+0x10e>

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(inst, BMP280_REG_STATUS, &status, 1) && (status & 1) == 0) break;
 8001fe4:	f107 020d 	add.w	r2, r7, #13
 8001fe8:	2301      	movs	r3, #1
 8001fea:	21f3      	movs	r1, #243	; 0xf3
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff fec7 	bl	8001d80 <read_data>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f5      	bne.n	8001fe4 <bmp280_init+0x5e>
 8001ff8:	7b7b      	ldrb	r3, [r7, #13]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <bmp280_init+0x5e>
	}

	if (!read_calibration_data(inst)) return false;
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ff39 	bl	8001e7a <read_calibration_data>
 8002008:	4603      	mov	r3, r0
 800200a:	f083 0301 	eor.w	r3, r3, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d100      	bne.n	8002016 <bmp280_init+0x90>
 8002014:	e001      	b.n	800201a <bmp280_init+0x94>
 8002016:	2300      	movs	r3, #0
 8002018:	e03c      	b.n	8002094 <bmp280_init+0x10e>

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	791b      	ldrb	r3, [r3, #4]
 800201e:	015b      	lsls	r3, r3, #5
 8002020:	b25a      	sxtb	r2, r3
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	785b      	ldrb	r3, [r3, #1]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	b25b      	sxtb	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b25b      	sxtb	r3, r3
 800202e:	73fb      	strb	r3, [r7, #15]
	if (write_register8(inst, BMP280_REG_CONFIG, config)) return false;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	461a      	mov	r2, r3
 8002034:	21f5      	movs	r1, #245	; 0xf5
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fecb 	bl	8001dd2 <write_register8>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <bmp280_init+0xc0>
 8002042:	2300      	movs	r3, #0
 8002044:	e026      	b.n	8002094 <bmp280_init+0x10e>

	if (params->mode == BMP280_MODE_FORCED) {
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d102      	bne.n	8002054 <bmp280_init+0xce>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5) | (params->oversampling_pressure << 2) | (params->mode);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	78db      	ldrb	r3, [r3, #3]
 8002058:	015b      	lsls	r3, r3, #5
 800205a:	b25a      	sxtb	r2, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	789b      	ldrb	r3, [r3, #2]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	b25b      	sxtb	r3, r3
 8002064:	4313      	orrs	r3, r2
 8002066:	b25a      	sxtb	r2, r3
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b25b      	sxtb	r3, r3
 800206e:	4313      	orrs	r3, r2
 8002070:	b25b      	sxtb	r3, r3
 8002072:	73bb      	strb	r3, [r7, #14]

	if (write_register8(inst, BMP280_REG_CTRL, ctrl)) return false;
 8002074:	7bbb      	ldrb	r3, [r7, #14]
 8002076:	461a      	mov	r2, r3
 8002078:	21f4      	movs	r1, #244	; 0xf4
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fea9 	bl	8001dd2 <write_register8>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <bmp280_init+0x104>
 8002086:	2300      	movs	r3, #0
 8002088:	e004      	b.n	8002094 <bmp280_init+0x10e>

	inst->active = true;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	return true;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280 *inst, int32_t adc_temp,
		int32_t *fine_temp) {
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	10da      	asrs	r2, r3, #3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	899b      	ldrh	r3, [r3, #12]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	1ad3      	subs	r3, r2, r3
			* (int32_t) inst->dig_T2) >> 11;
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 80020be:	12db      	asrs	r3, r3, #11
 80020c0:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	111b      	asrs	r3, r3, #4
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	8992      	ldrh	r2, [r2, #12]
 80020ca:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) inst->dig_T1)) >> 12)
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	1112      	asrs	r2, r2, #4
 80020d0:	68f9      	ldr	r1, [r7, #12]
 80020d2:	8989      	ldrh	r1, [r1, #12]
 80020d4:	1a52      	subs	r2, r2, r1
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	131b      	asrs	r3, r3, #12
			* (int32_t) inst->dig_T3) >> 14;
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 80020e6:	139b      	asrs	r3, r3, #14
 80020e8:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	441a      	add	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	3380      	adds	r3, #128	; 0x80
 8002100:	121b      	asrs	r3, r3, #8
}
 8002102:	4618      	mov	r0, r3
 8002104:	371c      	adds	r7, #28
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280 *inst, int32_t adc_press,
		int32_t fine_temp) {
 800210e:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4619      	mov	r1, r3
 8002120:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002124:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8002128:	f142 34ff 	adc.w	r4, r2, #4294967295
 800212c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) inst->dig_P6;
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	6a3a      	ldr	r2, [r7, #32]
 8002134:	fb02 f203 	mul.w	r2, r2, r3
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	6a39      	ldr	r1, [r7, #32]
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	441a      	add	r2, r3
 8002142:	6a39      	ldr	r1, [r7, #32]
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	fba1 3403 	umull	r3, r4, r1, r3
 800214a:	4422      	add	r2, r4
 800214c:	4614      	mov	r4, r2
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8002154:	b211      	sxth	r1, r2
 8002156:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800215a:	fb01 f504 	mul.w	r5, r1, r4
 800215e:	fb03 f002 	mul.w	r0, r3, r2
 8002162:	4428      	add	r0, r5
 8002164:	fba3 3401 	umull	r3, r4, r3, r1
 8002168:	1902      	adds	r2, r0, r4
 800216a:	4614      	mov	r4, r2
 800216c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8002170:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) inst->dig_P5) << 17);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800217a:	b21b      	sxth	r3, r3
 800217c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002180:	6a3a      	ldr	r2, [r7, #32]
 8002182:	fb04 f102 	mul.w	r1, r4, r2
 8002186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002188:	fb03 f202 	mul.w	r2, r3, r2
 800218c:	1888      	adds	r0, r1, r2
 800218e:	6a3a      	ldr	r2, [r7, #32]
 8002190:	fba2 1203 	umull	r1, r2, r2, r3
 8002194:	1883      	adds	r3, r0, r2
 8002196:	461a      	mov	r2, r3
 8002198:	f04f 0500 	mov.w	r5, #0
 800219c:	f04f 0600 	mov.w	r6, #0
 80021a0:	0456      	lsls	r6, r2, #17
 80021a2:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80021a6:	044d      	lsls	r5, r1, #17
 80021a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80021ac:	186b      	adds	r3, r5, r1
 80021ae:	eb46 0402 	adc.w	r4, r6, r2
 80021b2:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) inst->dig_P4) << 35);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80021bc:	b219      	sxth	r1, r3
 80021be:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80021c2:	f04f 0500 	mov.w	r5, #0
 80021c6:	f04f 0600 	mov.w	r6, #0
 80021ca:	00ce      	lsls	r6, r1, #3
 80021cc:	2500      	movs	r5, #0
 80021ce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80021d2:	186b      	adds	r3, r5, r1
 80021d4:	eb46 0402 	adc.w	r4, r6, r2
 80021d8:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	6a3a      	ldr	r2, [r7, #32]
 80021e0:	fb02 f203 	mul.w	r2, r2, r3
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	6a39      	ldr	r1, [r7, #32]
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	441a      	add	r2, r3
 80021ee:	6a39      	ldr	r1, [r7, #32]
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	fba1 3403 	umull	r3, r4, r1, r3
 80021f6:	4422      	add	r2, r4
 80021f8:	4614      	mov	r4, r2
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8002200:	b211      	sxth	r1, r2
 8002202:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002206:	fb01 f504 	mul.w	r5, r1, r4
 800220a:	fb03 f002 	mul.w	r0, r3, r2
 800220e:	4428      	add	r0, r5
 8002210:	fba3 3401 	umull	r3, r4, r3, r1
 8002214:	1902      	adds	r2, r0, r4
 8002216:	4614      	mov	r4, r2
 8002218:	f04f 0100 	mov.w	r1, #0
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	0a19      	lsrs	r1, r3, #8
 8002222:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8002226:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) inst->dig_P2) << 12);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800222e:	b21b      	sxth	r3, r3
 8002230:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002234:	6a38      	ldr	r0, [r7, #32]
 8002236:	fb04 f500 	mul.w	r5, r4, r0
 800223a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800223c:	fb03 f000 	mul.w	r0, r3, r0
 8002240:	4428      	add	r0, r5
 8002242:	6a3d      	ldr	r5, [r7, #32]
 8002244:	fba5 5603 	umull	r5, r6, r5, r3
 8002248:	1983      	adds	r3, r0, r6
 800224a:	461e      	mov	r6, r3
 800224c:	f04f 0b00 	mov.w	fp, #0
 8002250:	f04f 0c00 	mov.w	ip, #0
 8002254:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8002258:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 800225c:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8002260:	eb1b 0301 	adds.w	r3, fp, r1
 8002264:	eb4c 0402 	adc.w	r4, ip, r2
 8002268:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) inst->dig_P1) >> 33;
 800226c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002270:	1c19      	adds	r1, r3, #0
 8002272:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8a5b      	ldrh	r3, [r3, #18]
 800227a:	b29b      	uxth	r3, r3
 800227c:	f04f 0400 	mov.w	r4, #0
 8002280:	fb03 f502 	mul.w	r5, r3, r2
 8002284:	fb01 f004 	mul.w	r0, r1, r4
 8002288:	4428      	add	r0, r5
 800228a:	fba1 3403 	umull	r3, r4, r1, r3
 800228e:	1902      	adds	r2, r0, r4
 8002290:	4614      	mov	r4, r2
 8002292:	f04f 0100 	mov.w	r1, #0
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	1061      	asrs	r1, r4, #1
 800229c:	17e2      	asrs	r2, r4, #31
 800229e:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 80022a2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80022a6:	4323      	orrs	r3, r4
 80022a8:	d101      	bne.n	80022ae <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 80022aa:	2300      	movs	r3, #0
 80022ac:	e0d4      	b.n	8002458 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80022b4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80022b8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	ea4f 0963 	mov.w	r9, r3, asr #1
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80022c8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80022cc:	4645      	mov	r5, r8
 80022ce:	464e      	mov	r6, r9
 80022d0:	1aed      	subs	r5, r5, r3
 80022d2:	eb66 0604 	sbc.w	r6, r6, r4
 80022d6:	46a8      	mov	r8, r5
 80022d8:	46b1      	mov	r9, r6
 80022da:	eb18 0308 	adds.w	r3, r8, r8
 80022de:	eb49 0409 	adc.w	r4, r9, r9
 80022e2:	4698      	mov	r8, r3
 80022e4:	46a1      	mov	r9, r4
 80022e6:	eb18 0805 	adds.w	r8, r8, r5
 80022ea:	eb49 0906 	adc.w	r9, r9, r6
 80022ee:	f04f 0100 	mov.w	r1, #0
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80022fa:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80022fe:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8002302:	eb18 0801 	adds.w	r8, r8, r1
 8002306:	eb49 0902 	adc.w	r9, r9, r2
 800230a:	f04f 0100 	mov.w	r1, #0
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002316:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800231a:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800231e:	4688      	mov	r8, r1
 8002320:	4691      	mov	r9, r2
 8002322:	eb18 0805 	adds.w	r8, r8, r5
 8002326:	eb49 0906 	adc.w	r9, r9, r6
 800232a:	f04f 0100 	mov.w	r1, #0
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002336:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800233a:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800233e:	4688      	mov	r8, r1
 8002340:	4691      	mov	r9, r2
 8002342:	eb18 0005 	adds.w	r0, r8, r5
 8002346:	eb49 0106 	adc.w	r1, r9, r6
 800234a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800234e:	f7fe fcab 	bl	8000ca8 <__aeabi_ldivmod>
 8002352:	4603      	mov	r3, r0
 8002354:	460c      	mov	r4, r1
 8002356:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) inst->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002360:	b219      	sxth	r1, r3
 8002362:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002366:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	f04f 0400 	mov.w	r4, #0
 8002372:	0b6b      	lsrs	r3, r5, #13
 8002374:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002378:	1374      	asrs	r4, r6, #13
 800237a:	fb03 f502 	mul.w	r5, r3, r2
 800237e:	fb01 f004 	mul.w	r0, r1, r4
 8002382:	4428      	add	r0, r5
 8002384:	fba1 1203 	umull	r1, r2, r1, r3
 8002388:	1883      	adds	r3, r0, r2
 800238a:	461a      	mov	r2, r3
 800238c:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	f04f 0400 	mov.w	r4, #0
 8002398:	0b6b      	lsrs	r3, r5, #13
 800239a:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800239e:	1374      	asrs	r4, r6, #13
 80023a0:	fb03 f502 	mul.w	r5, r3, r2
 80023a4:	fb01 f004 	mul.w	r0, r1, r4
 80023a8:	4428      	add	r0, r5
 80023aa:	fba1 1203 	umull	r1, r2, r1, r3
 80023ae:	1883      	adds	r3, r0, r2
 80023b0:	461a      	mov	r2, r3
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	f04f 0400 	mov.w	r4, #0
 80023ba:	0e4b      	lsrs	r3, r1, #25
 80023bc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80023c0:	1654      	asrs	r4, r2, #25
 80023c2:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) inst->dig_P8 * p) >> 19;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	fb04 f102 	mul.w	r1, r4, r2
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	fb03 f202 	mul.w	r2, r3, r2
 80023de:	1888      	adds	r0, r1, r2
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	fba2 1203 	umull	r1, r2, r2, r3
 80023e6:	1883      	adds	r3, r0, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	f04f 0400 	mov.w	r4, #0
 80023f2:	0ccb      	lsrs	r3, r1, #19
 80023f4:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80023f8:	14d4      	asrs	r4, r2, #19
 80023fa:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) inst->dig_P7 << 4);
 80023fe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002402:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002406:	eb11 0803 	adds.w	r8, r1, r3
 800240a:	eb42 0904 	adc.w	r9, r2, r4
 800240e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002412:	eb13 0508 	adds.w	r5, r3, r8
 8002416:	eb44 0609 	adc.w	r6, r4, r9
 800241a:	f04f 0100 	mov.w	r1, #0
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	0a29      	lsrs	r1, r5, #8
 8002424:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8002428:	1232      	asrs	r2, r6, #8
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002430:	b21d      	sxth	r5, r3
 8002432:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8002436:	f04f 0800 	mov.w	r8, #0
 800243a:	f04f 0900 	mov.w	r9, #0
 800243e:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8002442:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8002446:	ea4f 1805 	mov.w	r8, r5, lsl #4
 800244a:	eb18 0301 	adds.w	r3, r8, r1
 800244e:	eb49 0402 	adc.w	r4, r9, r2
 8002452:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8002456:	693b      	ldr	r3, [r7, #16]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3728      	adds	r7, #40	; 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08002462 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280 *inst, int32_t *temperature, uint32_t *pressure) {
 8002462:	b580      	push	{r7, lr}
 8002464:	b08a      	sub	sp, #40	; 0x28
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[6];

	// Need to read in one sequence to ensure they match.
	size_t size = 6;
 800246e:	2306      	movs	r3, #6
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
	if (read_data(inst, 0xf7, data, size)) return false;
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f107 0214 	add.w	r2, r7, #20
 800247a:	21f7      	movs	r1, #247	; 0xf7
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f7ff fc7f 	bl	8001d80 <read_data>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <bmp280_read_fixed+0x2a>
 8002488:	2300      	movs	r3, #0
 800248a:	e027      	b.n	80024dc <bmp280_read_fixed+0x7a>

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800248c:	7d3b      	ldrb	r3, [r7, #20]
 800248e:	031a      	lsls	r2, r3, #12
 8002490:	7d7b      	ldrb	r3, [r7, #21]
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	4313      	orrs	r3, r2
 8002496:	7dba      	ldrb	r2, [r7, #22]
 8002498:	0912      	lsrs	r2, r2, #4
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	4313      	orrs	r3, r2
 800249e:	623b      	str	r3, [r7, #32]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
 80024a2:	031a      	lsls	r2, r3, #12
 80024a4:	7e3b      	ldrb	r3, [r7, #24]
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	4313      	orrs	r3, r2
 80024aa:	7e7a      	ldrb	r2, [r7, #25]
 80024ac:	0912      	lsrs	r2, r2, #4
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61fb      	str	r3, [r7, #28]

	int32_t fine_temp;
	*temperature = compensate_temperature(inst, adc_temp, &fine_temp);
 80024b4:	f107 0310 	add.w	r3, r7, #16
 80024b8:	461a      	mov	r2, r3
 80024ba:	69f9      	ldr	r1, [r7, #28]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f7ff fded 	bl	800209c <compensate_temperature>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(inst, adc_pressure, fine_temp);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	461a      	mov	r2, r3
 80024cc:	6a39      	ldr	r1, [r7, #32]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f7ff fe1d 	bl	800210e <compensate_pressure>
 80024d4:	4602      	mov	r2, r0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	601a      	str	r2, [r3, #0]

	return true;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3728      	adds	r7, #40	; 0x28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <bmp280_read_float>:

bool bmp280_read_float(BMP280 *inst, float *temperature, float *pressure)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	if (bmp280_read_fixed(inst, &fixed_temperature, &fixed_pressure))
 80024f0:	f107 0210 	add.w	r2, r7, #16
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	4619      	mov	r1, r3
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f7ff ffb1 	bl	8002462 <bmp280_read_fixed>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d021      	beq.n	800254a <bmp280_read_float+0x66>
	{
		*temperature = (float) fixed_temperature / 100;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002510:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002554 <bmp280_read_float+0x70>
 8002514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002528:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002558 <bmp280_read_float+0x74>
 800252c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	edc3 7a00 	vstr	s15, [r3]

		inst->temperature = *temperature;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	62da      	str	r2, [r3, #44]	; 0x2c
		inst->pressure = *pressure;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	629a      	str	r2, [r3, #40]	; 0x28
		return true;
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <bmp280_read_float+0x68>
	}

	return false;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	42c80000 	.word	0x42c80000
 8002558:	43800000 	.word	0x43800000

0800255c <bmp280_update>:

bool bmp280_update(BMP280 *inst)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	// uneccessary, to change
	float te;
	float pre;
	return bmp280_read_float(inst, &te, &pre);
 8002564:	f107 0208 	add.w	r2, r7, #8
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	4619      	mov	r1, r3
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ffb8 	bl	80024e4 <bmp280_read_float>
 8002574:	4603      	mov	r3, r0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <println>:
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8002588:	2201      	movs	r2, #1
 800258a:	2140      	movs	r1, #64	; 0x40
 800258c:	4820      	ldr	r0, [pc, #128]	; (8002610 <println+0x90>)
 800258e:	f003 fc1b 	bl	8005dc8 <HAL_GPIO_WritePin>
	printLen = strlen(str);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fd fe26 	bl	80001e4 <strlen>
 8002598:	4602      	mov	r2, r0
 800259a:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <println+0x94>)
 800259c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < printLen; i++)
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]
 80025a2:	e009      	b.n	80025b8 <println+0x38>
		printBuffer[i] = str[i];
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	441a      	add	r2, r3
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	7811      	ldrb	r1, [r2, #0]
 80025ae:	4a1a      	ldr	r2, [pc, #104]	; (8002618 <println+0x98>)
 80025b0:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	3301      	adds	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <println+0x94>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d3f0      	bcc.n	80025a4 <println+0x24>
	printBuffer[printLen] = '\n';
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <println+0x94>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a14      	ldr	r2, [pc, #80]	; (8002618 <println+0x98>)
 80025c8:	210a      	movs	r1, #10
 80025ca:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <println+0x94>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3301      	adds	r3, #1
 80025d2:	4a11      	ldr	r2, [pc, #68]	; (8002618 <println+0x98>)
 80025d4:	210d      	movs	r1, #13
 80025d6:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <println+0x94>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	3302      	adds	r3, #2
 80025de:	4a0e      	ldr	r2, [pc, #56]	; (8002618 <println+0x98>)
 80025e0:	2100      	movs	r1, #0
 80025e2:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 80025e4:	bf00      	nop
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <println+0x94>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3303      	adds	r3, #3
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	4619      	mov	r1, r3
 80025f2:	4809      	ldr	r0, [pc, #36]	; (8002618 <println+0x98>)
 80025f4:	f012 fd9c 	bl	8015130 <CDC_Transmit_FS>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d0f3      	beq.n	80025e6 <println+0x66>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80025fe:	2200      	movs	r2, #0
 8002600:	2140      	movs	r1, #64	; 0x40
 8002602:	4803      	ldr	r0, [pc, #12]	; (8002610 <println+0x90>)
 8002604:	f003 fbe0 	bl	8005dc8 <HAL_GPIO_WritePin>
};
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40020800 	.word	0x40020800
 8002614:	200005a8 	.word	0x200005a8
 8002618:	200005ac 	.word	0x200005ac

0800261c <millis>:
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
 8002620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <millis+0x1c>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	099b      	lsrs	r3, r3, #6
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	10624dd3 	.word	0x10624dd3

0800263c <GPS_read>:
		@brief Read one character from the GPS device
		@return The character that we received, or 0 if nothing was available
*/
/**************************************************************************/
char GPS_read(GPS* inst)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	////println("[GPS] read()");
	static uint32_t firstChar = 0; // first character received in current sentence
	uint32_t tStart = millis();		// as close as we can get to time char was sent
 8002644:	f7ff ffea 	bl	800261c <millis>
 8002648:	6138      	str	r0, [r7, #16]
	char c = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]

	if (inst->paused) return c;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <GPS_read+0x20>
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	e073      	b.n	8002744 <GPS_read+0x108>

	HAL_StatusTypeDef status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]
	//status = HAL_UART_Receive(inst->uart, ca, 1, 50);
	if (status == HAL_OK)
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d168      	bne.n	8002738 <GPS_read+0xfc>
	{
		//print("Status: ");
		//print_int(status);
		//println("");
		c = (char)inst->uartBuffer[0];
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800266c:	75fb      	strb	r3, [r7, #23]

		inst->currentline[inst->lineidx++] = c;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800267a:	b2db      	uxtb	r3, r3
 800267c:	1c59      	adds	r1, r3, #1
 800267e:	b2c8      	uxtb	r0, r1
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	f881 01c8 	strb.w	r0, [r1, #456]	; 0x1c8
 8002686:	4413      	add	r3, r2
 8002688:	7dfa      	ldrb	r2, [r7, #23]
 800268a:	701a      	strb	r2, [r3, #0]
		if (inst->lineidx >= MAXLINELENGTH) inst->lineidx = MAXLINELENGTH - 1; // ensure there is someplace to put the next received character
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b77      	cmp	r3, #119	; 0x77
 8002696:	d903      	bls.n	80026a0 <GPS_read+0x64>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2277      	movs	r2, #119	; 0x77
 800269c:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

		if (c == '\n')
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
 80026a2:	2b0a      	cmp	r3, #10
 80026a4:	d141      	bne.n	800272a <GPS_read+0xee>
		{
			inst->currentline[inst->lineidx] = 0;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	4413      	add	r3, r2
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]

			if (inst->currentline == inst->line1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	33d8      	adds	r3, #216	; 0xd8
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d10c      	bne.n	80026e2 <GPS_read+0xa6>
			{
				inst->currentline = inst->line2;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
				inst->lastline = inst->line1;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 80026e0:	e00b      	b.n	80026fa <GPS_read+0xbe>
			}
			else
			{
				inst->currentline = inst->line1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
				inst->lastline = inst->line2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
			}

			// Serial.//println("----");
			// Serial.//println((char* )lastline);
			// Serial.//println("----");
			inst->lineidx = 0;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
			inst->recvdflag = true;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
			inst->recvdTime = millis(); // time we got the end of the string
 800270a:	f7ff ff87 	bl	800261c <millis>
 800270e:	4602      	mov	r2, r0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			inst->sentTime = firstChar;
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <GPS_read+0x110>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			firstChar = 0; // there are no characters yet
 8002720:	4b0a      	ldr	r3, [pc, #40]	; (800274c <GPS_read+0x110>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
			return c;			// wait until next character to set time
 8002726:	7dfb      	ldrb	r3, [r7, #23]
 8002728:	e00c      	b.n	8002744 <GPS_read+0x108>
		}

		if (firstChar == 0) firstChar = tStart;
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <GPS_read+0x110>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d102      	bne.n	8002738 <GPS_read+0xfc>
 8002732:	4a06      	ldr	r2, [pc, #24]	; (800274c <GPS_read+0x110>)
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	6013      	str	r3, [r2, #0]
	}
	//wait for finished transmission
	////println("[GPS] read() ... waiting");
//	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);
	//print("Status: "); print_int(status); print(" c: "); print_char(c); println("");
	if (status != HAL_OK) return 0x00;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <GPS_read+0x106>
 800273e:	2300      	movs	r3, #0
 8002740:	e000      	b.n	8002744 <GPS_read+0x108>
	////println("[GPS] finished");
	return c;
 8002742:	7dfb      	ldrb	r3, [r7, #23]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200007ac 	.word	0x200007ac

08002750 <GPS_init>:
/*!
		@brief Initialization code used by all constructor types
*/
/**************************************************************************/
bool GPS_init(GPS* inst)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	// UART instance, code ##########################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$@@@@@@@@@@@@@@
	//println("[GPS] init()");
	inst->active = false;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	inst->recvdflag = false;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	inst->inStandbyMode = false;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	inst->paused = false;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	inst->lineidx = 0;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	inst->currentline = inst->line1;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
	inst->lastline = inst->line2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0

	// uint8_t
	inst->gpsTime.hour = 0;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = 0;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = 0;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	inst->gpsTime.year = 0;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	inst->gpsTime.month = 0;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->gpsTime.dayM = 0;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->fixquality = 0;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	inst->fixquality_3d = 0;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	inst->satellites = 0;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	// bool
	inst->fix = false;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	// char
	inst->lat = 0;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 0;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 0;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	// uint16_t
	inst->gpsTime.msecond = 0;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	875a      	strh	r2, [r3, #58]	; 0x3a
	// float
	inst->latitude = 0.0;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	63da      	str	r2, [r3, #60]	; 0x3c
	inst->longitude = 0.0;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	641a      	str	r2, [r3, #64]	; 0x40
	inst->geoidheight = 0.0;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
	inst->altitude = 0.0;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	659a      	str	r2, [r3, #88]	; 0x58
	inst->speed = 0.0;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	65da      	str	r2, [r3, #92]	; 0x5c
	inst->angle = 0.0;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	661a      	str	r2, [r3, #96]	; 0x60
	inst->magvariation = 0.0;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	665a      	str	r2, [r3, #100]	; 0x64
	inst->HDOP = 0.0;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	669a      	str	r2, [r3, #104]	; 0x68
	inst->VDOP = 0.0;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	66da      	str	r2, [r3, #108]	; 0x6c
	inst->PDOP = 0.0;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	671a      	str	r2, [r3, #112]	; 0x70

	inst->lastUpdate = 0; // millis() when last full sentence successfully parsed
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	inst->lastFix = 0;  // millis() when last fix received
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	inst->lastTime = 0; // millis() when last time received
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	inst->lastDate = 0; // millis() when last date received
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	inst->recvdTime = 0; // millis() when last full sentence received
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	inst->sentTime = 0; // millis() when first character of last full sentence received
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	inst->lat = 'X';
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2258      	movs	r2, #88	; 0x58
 800288a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	inst->lon = 'X';
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2258      	movs	r2, #88	; 0x58
 8002892:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	inst->mag = 'X';
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2258      	movs	r2, #88	; 0x58
 800289a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

	inst->thisCheck = 0;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
	memset(inst->thisSource, 0x00, NMEA_MAX_SOURCE_ID);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3304      	adds	r3, #4
 80028a8:	2203      	movs	r2, #3
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f013 f8ec 	bl	8015a8a <memset>
	memset(inst->thisSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3307      	adds	r3, #7
 80028b6:	2214      	movs	r2, #20
 80028b8:	2100      	movs	r1, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f013 f8e5 	bl	8015a8a <memset>
	memset(inst->lastSource, 0x00, NMEA_MAX_SOURCE_ID);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	331b      	adds	r3, #27
 80028c4:	2203      	movs	r2, #3
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f013 f8de 	bl	8015a8a <memset>
	memset(inst->lastSentence, 0x00, NMEA_MAX_SENTENCE_ID);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	331e      	adds	r3, #30
 80028d2:	2214      	movs	r2, #20
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f013 f8d7 	bl	8015a8a <memset>

	memset(inst->txtTXT, 0x00, 63);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3388      	adds	r3, #136	; 0x88
 80028e0:	223f      	movs	r2, #63	; 0x3f
 80028e2:	2100      	movs	r1, #0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f013 f8d0 	bl	8015a8a <memset>
	inst->txtTot = 0;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	inst->txtID = 0;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	inst->txtN = 0;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	inst->sources[0] = "II";
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a41      	ldr	r2, [pc, #260]	; (8002a0c <GPS_init+0x2bc>)
 8002906:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	inst->sources[1] = "WI";
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a40      	ldr	r2, [pc, #256]	; (8002a10 <GPS_init+0x2c0>)
 800290e:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	inst->sources[2] = "GP";
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a3f      	ldr	r2, [pc, #252]	; (8002a14 <GPS_init+0x2c4>)
 8002916:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	inst->sources[3] = "GN";
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a3e      	ldr	r2, [pc, #248]	; (8002a18 <GPS_init+0x2c8>)
 800291e:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	inst->sources[4] = "ZZZ";
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a3d      	ldr	r2, [pc, #244]	; (8002a1c <GPS_init+0x2cc>)
 8002926:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	inst->sentences_parsed[0] = "GGA";
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a3c      	ldr	r2, [pc, #240]	; (8002a20 <GPS_init+0x2d0>)
 800292e:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	inst->sentences_parsed[1] = "GLL";
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a3b      	ldr	r2, [pc, #236]	; (8002a24 <GPS_init+0x2d4>)
 8002936:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	inst->sentences_parsed[2] = "GSA";
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a3a      	ldr	r2, [pc, #232]	; (8002a28 <GPS_init+0x2d8>)
 800293e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	inst->sentences_parsed[3] = "RMC";
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a39      	ldr	r2, [pc, #228]	; (8002a2c <GPS_init+0x2dc>)
 8002946:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	inst->sentences_parsed[4] = "ZZZ";
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a33      	ldr	r2, [pc, #204]	; (8002a1c <GPS_init+0x2cc>)
 800294e:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	inst->sentences_known[0] = "ZZZ";
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a31      	ldr	r2, [pc, #196]	; (8002a1c <GPS_init+0x2cc>)
 8002956:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	//GPS_standby(inst);
	//GPS_wakeup(inst);

	HAL_Delay(1000);
 800295a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800295e:	f002 fbb5 	bl	80050cc <HAL_Delay>

	GPS_sendCommand(inst, PMTK_SET_NMEA_OUTPUT_ALLDATA);
 8002962:	4933      	ldr	r1, [pc, #204]	; (8002a30 <GPS_init+0x2e0>)
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f867 	bl	8002a38 <GPS_sendCommand>

	HAL_Delay(1000);
 800296a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800296e:	f002 fbad 	bl	80050cc <HAL_Delay>

	GPS_sendCommand(inst, PMTK_SET_NMEA_UPDATE_5HZ);
 8002972:	4930      	ldr	r1, [pc, #192]	; (8002a34 <GPS_init+0x2e4>)
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f85f 	bl	8002a38 <GPS_sendCommand>

	HAL_Delay(1000);
 800297a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800297e:	f002 fba5 	bl	80050cc <HAL_Delay>

	//GPS_sendCommand(inst, PMTK_API_SET_FIX_CTL_1HZ);
	//GPS_sendCommand(inst, PGCMD_ANTENNA);
	//GPS_sendCommand(inst, PMTK_Q_RELEASE);

	HAL_UART_Receive_IT(inst->uart, inst->uartBuffer, 1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f203 231e 	addw	r3, r3, #542	; 0x21e
 800298e:	2201      	movs	r2, #1
 8002990:	4619      	mov	r1, r3
 8002992:	f008 ff99 	bl	800b8c8 <HAL_UART_Receive_IT>

	uint32_t timeout = millis();
 8002996:	f7ff fe41 	bl	800261c <millis>
 800299a:	60f8      	str	r0, [r7, #12]

	while (millis() - timeout <= 1000)
 800299c:	e029      	b.n	80029f2 <GPS_init+0x2a2>
	{
		//GPS_read(inst);
		if (GPS_newNMEAreceived(inst))
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 ffc3 	bl	800392a <GPS_newNMEAreceived>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d023      	beq.n	80029f2 <GPS_init+0x2a2>
		{
			// not exact, but works now
			println(GPS_lastNMEA(inst));
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 ffcb 	bl	8003946 <GPS_lastNMEA>
 80029b0:	4603      	mov	r3, r0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fde4 	bl	8002580 <println>
			GPS_parse(inst, GPS_lastNMEA(inst));
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 ffc4 	bl	8003946 <GPS_lastNMEA>
 80029be:	4603      	mov	r3, r0
 80029c0:	4619      	mov	r1, r3
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f868 	bl	8002a98 <GPS_parse>
			if (GPS_lastNMEA(inst)[0] == '$' && GPS_lastNMEA(inst)[1] == 'G')
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 ffbc 	bl	8003946 <GPS_lastNMEA>
 80029ce:	4603      	mov	r3, r0
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b24      	cmp	r3, #36	; 0x24
 80029d4:	d10d      	bne.n	80029f2 <GPS_init+0x2a2>
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 ffb5 	bl	8003946 <GPS_lastNMEA>
 80029dc:	4603      	mov	r3, r0
 80029de:	3301      	adds	r3, #1
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b47      	cmp	r3, #71	; 0x47
 80029e4:	d105      	bne.n	80029f2 <GPS_init+0x2a2>
			{
				//GPS_sendCommand(inst, PMTK_SET_NMEA_OUTPUT_RMCGGAGSA);
				//GPS_sendCommand(inst, PMTK_SET_NMEA_UPDATE_1HZ);
				inst->active = true;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
				return true;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e008      	b.n	8002a04 <GPS_init+0x2b4>
	while (millis() - timeout <= 1000)
 80029f2:	f7ff fe13 	bl	800261c <millis>
 80029f6:	4602      	mov	r2, r0
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a00:	d9cd      	bls.n	800299e <GPS_init+0x24e>

			}
		}
	}
	return true;
 8002a02:	2301      	movs	r3, #1
//	return false;
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	0801b62c 	.word	0x0801b62c
 8002a10:	0801b630 	.word	0x0801b630
 8002a14:	0801b634 	.word	0x0801b634
 8002a18:	0801b638 	.word	0x0801b638
 8002a1c:	0801b63c 	.word	0x0801b63c
 8002a20:	0801b640 	.word	0x0801b640
 8002a24:	0801b644 	.word	0x0801b644
 8002a28:	0801b648 	.word	0x0801b648
 8002a2c:	0801b64c 	.word	0x0801b64c
 8002a30:	0801b650 	.word	0x0801b650
 8002a34:	0801b684 	.word	0x0801b684

08002a38 <GPS_sendCommand>:
		@brief Send a command to the GPS device
		@param str Pointer to a string holding the command to send
*/
/**************************************************************************/
void GPS_sendCommand(GPS* inst, char* str)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
	//println("[GPS] sendCommand()");
	// NOT THIS //printLN, code !!!!!!!!!!!!!!@@@@@@@@@@@@@@@@@@@#################$$$$$$$$$$$$$$$$$$$$$$$$$$
	HAL_UART_Transmit(inst->uart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 8002a48:	6838      	ldr	r0, [r7, #0]
 8002a4a:	f7fd fbcb 	bl	80001e4 <strlen>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295
 8002a56:	6839      	ldr	r1, [r7, #0]
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f008 fe9c 	bl	800b796 <HAL_UART_Transmit>
	//println("[GPS] sendCommand()... waiting");
	// wait for finished transmission
	while (HAL_UART_GetState(inst->uart) != HAL_UART_STATE_READY);
 8002a5e:	bf00      	nop
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002a66:	4618      	mov	r0, r3
 8002a68:	f009 f894 	bl	800bb94 <HAL_UART_GetState>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	d1f6      	bne.n	8002a60 <GPS_sendCommand+0x28>
	uint8_t nla[2] = {(uint8_t)('\r'), (uint8_t)('\n')};
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <GPS_sendCommand+0x5c>)
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(inst->uart, nla, 2, HAL_MAX_DELAY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
 8002a7e:	f107 010c 	add.w	r1, r7, #12
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295
 8002a86:	2202      	movs	r2, #2
 8002a88:	f008 fe85 	bl	800b796 <HAL_UART_Transmit>
	//println("[GPS] finished");
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd90      	pop	{r4, r7, pc}
 8002a94:	0801b694 	.word	0x0801b694

08002a98 <GPS_parse>:
		@return True if we parsed it, false if it has an invalid checksum or invalid
	 data
*/
/**************************************************************************/
bool GPS_parse(GPS* inst, char* nmea)
{
 8002a98:	b590      	push	{r4, r7, lr}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
	// do checksum check
	if (!GPS_check(inst, nmea)) return false;
 8002aa2:	6839      	ldr	r1, [r7, #0]
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fb65 	bl	8003174 <GPS_check>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f083 0301 	eor.w	r3, r3, #1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <GPS_parse+0x22>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e355      	b.n	8003166 <GPS_parse+0x6ce>
	// passed the check, so there's a valid source in thisSource and a valid
	// sentence in thisSentence

	// look for a few common sentences
	char* p = nmea; // Pointer to move through the sentence -- good parsers are
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	617b      	str	r3, [r7, #20]
									// non-destructive
	p = strchr(p, ',') + 1; // Skip to the character after the next comma, then check sentence.
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	6978      	ldr	r0, [r7, #20]
 8002ac2:	f013 ff16 	bl	80168f2 <strchr>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	3301      	adds	r3, #1
 8002aca:	617b      	str	r3, [r7, #20]

	if (!strcmp(inst->thisSentence, "GGA"))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3307      	adds	r3, #7
 8002ad0:	49a5      	ldr	r1, [pc, #660]	; (8002d68 <GPS_parse+0x2d0>)
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fb7c 	bl	80001d0 <strcmp>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 80e6 	bne.w	8002cac <GPS_parse+0x214>
	{
		// found GGA
		// get time
		GPS_parseTime(inst, p);
 8002ae0:	6979      	ldr	r1, [r7, #20]
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fcc6 	bl	8003474 <GPS_parseTime>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	6978      	ldr	r0, [r7, #20]
 8002aec:	f013 ff01 	bl	80168f2 <strchr>
 8002af0:	4603      	mov	r3, r0
 8002af2:	3301      	adds	r3, #1
 8002af4:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8002af6:	6979      	ldr	r1, [r7, #20]
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fd09 	bl	8003510 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	6978      	ldr	r0, [r7, #20]
 8002b02:	f013 fef6 	bl	80168f2 <strchr>
 8002b06:	4603      	mov	r3, r0
 8002b08:	3301      	adds	r3, #1
 8002b0a:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002b0c:	6979      	ldr	r1, [r7, #20]
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fdb4 	bl	800367c <GPS_parseLatDir>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f083 0301 	eor.w	r3, r3, #1
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <GPS_parse+0x8c>
 8002b20:	2300      	movs	r3, #0
 8002b22:	e320      	b.n	8003166 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	6978      	ldr	r0, [r7, #20]
 8002b28:	f013 fee3 	bl	80168f2 <strchr>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	3301      	adds	r3, #1
 8002b30:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002b32:	6979      	ldr	r1, [r7, #20]
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fde1 	bl	80036fc <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	6978      	ldr	r0, [r7, #20]
 8002b3e:	f013 fed8 	bl	80168f2 <strchr>
 8002b42:	4603      	mov	r3, r0
 8002b44:	3301      	adds	r3, #1
 8002b46:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002b48:	6979      	ldr	r1, [r7, #20]
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fe7e 	bl	800384c <GPS_parseLonDir>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f083 0301 	eor.w	r3, r3, #1
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <GPS_parse+0xc8>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e302      	b.n	8003166 <GPS_parse+0x6ce>

		p = strchr(p, ',') + 1;
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	6978      	ldr	r0, [r7, #20]
 8002b64:	f013 fec5 	bl	80168f2 <strchr>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8002b6e:	6979      	ldr	r1, [r7, #20]
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 fc66 	bl	8003442 <GPS_isEmpty>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f083 0301 	eor.w	r3, r3, #1
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01b      	beq.n	8002bba <GPS_parse+0x122>
		{
			inst->fixquality = atoi(p);
 8002b82:	6978      	ldr	r0, [r7, #20]
 8002b84:	f012 ff34 	bl	80159f0 <atoi>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			if (inst->fixquality > 0)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <GPS_parse+0x11a>
			{
				inst->fix = true;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
				inst->lastFix = inst->sentTime;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8002bb0:	e003      	b.n	8002bba <GPS_parse+0x122>
			}
			else inst->fix = false;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		}

		p = strchr(p, ',') + 1;
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	6978      	ldr	r0, [r7, #20]
 8002bbe:	f013 fe98 	bl	80168f2 <strchr>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->satellites = atoi(p);
 8002bc8:	6979      	ldr	r1, [r7, #20]
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fc39 	bl	8003442 <GPS_isEmpty>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f083 0301 	eor.w	r3, r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <GPS_parse+0x154>
 8002bdc:	6978      	ldr	r0, [r7, #20]
 8002bde:	f012 ff07 	bl	80159f0 <atoi>
 8002be2:	4603      	mov	r3, r0
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

		p = strchr(p, ',') + 1;
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	6978      	ldr	r0, [r7, #20]
 8002bf0:	f013 fe7f 	bl	80168f2 <strchr>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 8002bfa:	6979      	ldr	r1, [r7, #20]
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fc20 	bl	8003442 <GPS_isEmpty>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f083 0301 	eor.w	r3, r3, #1
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <GPS_parse+0x18e>
 8002c0e:	6978      	ldr	r0, [r7, #20]
 8002c10:	f012 feeb 	bl	80159ea <atof>
 8002c14:	ec54 3b10 	vmov	r3, r4, d0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	f7fd fff4 	bl	8000c08 <__aeabi_d2f>
 8002c20:	4602      	mov	r2, r0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	669a      	str	r2, [r3, #104]	; 0x68

		p = strchr(p, ',') + 1;
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	6978      	ldr	r0, [r7, #20]
 8002c2a:	f013 fe62 	bl	80168f2 <strchr>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	3301      	adds	r3, #1
 8002c32:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->altitude = (float)atof(p);
 8002c34:	6979      	ldr	r1, [r7, #20]
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fc03 	bl	8003442 <GPS_isEmpty>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f083 0301 	eor.w	r3, r3, #1
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00b      	beq.n	8002c60 <GPS_parse+0x1c8>
 8002c48:	6978      	ldr	r0, [r7, #20]
 8002c4a:	f012 fece 	bl	80159ea <atof>
 8002c4e:	ec54 3b10 	vmov	r3, r4, d0
 8002c52:	4618      	mov	r0, r3
 8002c54:	4621      	mov	r1, r4
 8002c56:	f7fd ffd7 	bl	8000c08 <__aeabi_d2f>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	659a      	str	r2, [r3, #88]	; 0x58

		p = strchr(p, ',') + 1;
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	6978      	ldr	r0, [r7, #20]
 8002c64:	f013 fe45 	bl	80168f2 <strchr>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]
		p = strchr(p, ',') + 1;
 8002c6e:	212c      	movs	r1, #44	; 0x2c
 8002c70:	6978      	ldr	r0, [r7, #20]
 8002c72:	f013 fe3e 	bl	80168f2 <strchr>
 8002c76:	4603      	mov	r3, r0
 8002c78:	3301      	adds	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->geoidheight = (float)atof(p);
 8002c7c:	6979      	ldr	r1, [r7, #20]
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fbdf 	bl	8003442 <GPS_isEmpty>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f083 0301 	eor.w	r3, r3, #1
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8251 	beq.w	8003134 <GPS_parse+0x69c>
 8002c92:	6978      	ldr	r0, [r7, #20]
 8002c94:	f012 fea9 	bl	80159ea <atof>
 8002c98:	ec54 3b10 	vmov	r3, r4, d0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	f7fd ffb2 	bl	8000c08 <__aeabi_d2f>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	655a      	str	r2, [r3, #84]	; 0x54
 8002caa:	e243      	b.n	8003134 <GPS_parse+0x69c>
	}

	else if (!strcmp(inst->thisSentence, "RMC"))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3307      	adds	r3, #7
 8002cb0:	492e      	ldr	r1, [pc, #184]	; (8002d6c <GPS_parse+0x2d4>)
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fa8c 	bl	80001d0 <strcmp>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f040 80e3 	bne.w	8002e86 <GPS_parse+0x3ee>
	{
		// found RMC
		// get time
		GPS_parseTime(inst, p);
 8002cc0:	6979      	ldr	r1, [r7, #20]
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fbd6 	bl	8003474 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002cc8:	212c      	movs	r1, #44	; 0x2c
 8002cca:	6978      	ldr	r0, [r7, #20]
 8002ccc:	f013 fe11 	bl	80168f2 <strchr>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002cd6:	6979      	ldr	r1, [r7, #20]
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fe00 	bl	80038de <GPS_parseFix>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f083 0301 	eor.w	r3, r3, #1
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <GPS_parse+0x256>
 8002cea:	2300      	movs	r3, #0
 8002cec:	e23b      	b.n	8003166 <GPS_parse+0x6ce>

		// parse out latitude
		p = strchr(p, ',') + 1;
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	6978      	ldr	r0, [r7, #20]
 8002cf2:	f013 fdfe 	bl	80168f2 <strchr>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	617b      	str	r3, [r7, #20]
		GPS_parseLat(inst, p);
 8002cfc:	6979      	ldr	r1, [r7, #20]
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fc06 	bl	8003510 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	6978      	ldr	r0, [r7, #20]
 8002d08:	f013 fdf3 	bl	80168f2 <strchr>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	3301      	adds	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002d12:	6979      	ldr	r1, [r7, #20]
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fcb1 	bl	800367c <GPS_parseLatDir>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f083 0301 	eor.w	r3, r3, #1
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <GPS_parse+0x292>
 8002d26:	2300      	movs	r3, #0
 8002d28:	e21d      	b.n	8003166 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002d2a:	212c      	movs	r1, #44	; 0x2c
 8002d2c:	6978      	ldr	r0, [r7, #20]
 8002d2e:	f013 fde0 	bl	80168f2 <strchr>
 8002d32:	4603      	mov	r3, r0
 8002d34:	3301      	adds	r3, #1
 8002d36:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002d38:	6979      	ldr	r1, [r7, #20]
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fcde 	bl	80036fc <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002d40:	212c      	movs	r1, #44	; 0x2c
 8002d42:	6978      	ldr	r0, [r7, #20]
 8002d44:	f013 fdd5 	bl	80168f2 <strchr>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002d4e:	6979      	ldr	r1, [r7, #20]
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fd7b 	bl	800384c <GPS_parseLonDir>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f083 0301 	eor.w	r3, r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d006      	beq.n	8002d70 <GPS_parse+0x2d8>
 8002d62:	2300      	movs	r3, #0
 8002d64:	e1ff      	b.n	8003166 <GPS_parse+0x6ce>
 8002d66:	bf00      	nop
 8002d68:	0801b640 	.word	0x0801b640
 8002d6c:	0801b64c 	.word	0x0801b64c

		// speed
		p = strchr(p, ',') + 1;
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	6978      	ldr	r0, [r7, #20]
 8002d74:	f013 fdbd 	bl	80168f2 <strchr>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->speed = (float)atof(p);
 8002d7e:	6979      	ldr	r1, [r7, #20]
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fb5e 	bl	8003442 <GPS_isEmpty>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f083 0301 	eor.w	r3, r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <GPS_parse+0x312>
 8002d92:	6978      	ldr	r0, [r7, #20]
 8002d94:	f012 fe29 	bl	80159ea <atof>
 8002d98:	ec54 3b10 	vmov	r3, r4, d0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	4621      	mov	r1, r4
 8002da0:	f7fd ff32 	bl	8000c08 <__aeabi_d2f>
 8002da4:	4602      	mov	r2, r0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	65da      	str	r2, [r3, #92]	; 0x5c

		// angle
		p = strchr(p, ',') + 1;
 8002daa:	212c      	movs	r1, #44	; 0x2c
 8002dac:	6978      	ldr	r0, [r7, #20]
 8002dae:	f013 fda0 	bl	80168f2 <strchr>
 8002db2:	4603      	mov	r3, r0
 8002db4:	3301      	adds	r3, #1
 8002db6:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->angle = (float)atof(p);
 8002db8:	6979      	ldr	r1, [r7, #20]
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fb41 	bl	8003442 <GPS_isEmpty>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f083 0301 	eor.w	r3, r3, #1
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00b      	beq.n	8002de4 <GPS_parse+0x34c>
 8002dcc:	6978      	ldr	r0, [r7, #20]
 8002dce:	f012 fe0c 	bl	80159ea <atof>
 8002dd2:	ec54 3b10 	vmov	r3, r4, d0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	4621      	mov	r1, r4
 8002dda:	f7fd ff15 	bl	8000c08 <__aeabi_d2f>
 8002dde:	4602      	mov	r2, r0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	661a      	str	r2, [r3, #96]	; 0x60

		p = strchr(p, ',') + 1;
 8002de4:	212c      	movs	r1, #44	; 0x2c
 8002de6:	6978      	ldr	r0, [r7, #20]
 8002de8:	f013 fd83 	bl	80168f2 <strchr>
 8002dec:	4603      	mov	r3, r0
 8002dee:	3301      	adds	r3, #1
 8002df0:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p))
 8002df2:	6979      	ldr	r1, [r7, #20]
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fb24 	bl	8003442 <GPS_isEmpty>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f083 0301 	eor.w	r3, r3, #1
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 8196 	beq.w	8003134 <GPS_parse+0x69c>
		{
			uint32_t fulldate = (float)atof(p);
 8002e08:	6978      	ldr	r0, [r7, #20]
 8002e0a:	f012 fdee 	bl	80159ea <atof>
 8002e0e:	ec54 3b10 	vmov	r3, r4, d0
 8002e12:	4618      	mov	r0, r3
 8002e14:	4621      	mov	r1, r4
 8002e16:	f7fd fef7 	bl	8000c08 <__aeabi_d2f>
 8002e1a:	ee07 0a90 	vmov	s15, r0
 8002e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e22:	ee17 3a90 	vmov	r3, s15
 8002e26:	60fb      	str	r3, [r7, #12]
			inst->gpsTime.dayM = fulldate / 10000;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a8b      	ldr	r2, [pc, #556]	; (8003058 <GPS_parse+0x5c0>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	0b5b      	lsrs	r3, r3, #13
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			inst->gpsTime.month = (fulldate % 10000) / 100;
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4b86      	ldr	r3, [pc, #536]	; (8003058 <GPS_parse+0x5c0>)
 8002e3e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e42:	0b5b      	lsrs	r3, r3, #13
 8002e44:	f242 7110 	movw	r1, #10000	; 0x2710
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	4a83      	ldr	r2, [pc, #524]	; (800305c <GPS_parse+0x5c4>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	095b      	lsrs	r3, r3, #5
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			inst->gpsTime.year = (fulldate % 100);
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4b7e      	ldr	r3, [pc, #504]	; (800305c <GPS_parse+0x5c4>)
 8002e62:	fba3 1302 	umull	r1, r3, r3, r2
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	2164      	movs	r1, #100	; 0x64
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			inst->lastDate = inst->sentTime;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8002e84:	e156      	b.n	8003134 <GPS_parse+0x69c>
		}
	}

	else if (!strcmp(inst->thisSentence, "GLL"))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3307      	adds	r3, #7
 8002e8a:	4975      	ldr	r1, [pc, #468]	; (8003060 <GPS_parse+0x5c8>)
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd f99f 	bl	80001d0 <strcmp>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d153      	bne.n	8002f40 <GPS_parse+0x4a8>
	{
		// found GLL
		// parse out latitude
		GPS_parseLat(inst, p);
 8002e98:	6979      	ldr	r1, [r7, #20]
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fb38 	bl	8003510 <GPS_parseLat>
		p = strchr(p, ',') + 1;
 8002ea0:	212c      	movs	r1, #44	; 0x2c
 8002ea2:	6978      	ldr	r0, [r7, #20]
 8002ea4:	f013 fd25 	bl	80168f2 <strchr>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	3301      	adds	r3, #1
 8002eac:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLatDir(inst, p)) return false;
 8002eae:	6979      	ldr	r1, [r7, #20]
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fbe3 	bl	800367c <GPS_parseLatDir>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f083 0301 	eor.w	r3, r3, #1
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <GPS_parse+0x42e>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e14f      	b.n	8003166 <GPS_parse+0x6ce>

		// parse out longitude
		p = strchr(p, ',') + 1;
 8002ec6:	212c      	movs	r1, #44	; 0x2c
 8002ec8:	6978      	ldr	r0, [r7, #20]
 8002eca:	f013 fd12 	bl	80168f2 <strchr>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	617b      	str	r3, [r7, #20]
		GPS_parseLon(inst, p);
 8002ed4:	6979      	ldr	r1, [r7, #20]
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fc10 	bl	80036fc <GPS_parseLon>
		p = strchr(p, ',') + 1;
 8002edc:	212c      	movs	r1, #44	; 0x2c
 8002ede:	6978      	ldr	r0, [r7, #20]
 8002ee0:	f013 fd07 	bl	80168f2 <strchr>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	617b      	str	r3, [r7, #20]
		if (!GPS_parseLonDir(inst, p)) return false;
 8002eea:	6979      	ldr	r1, [r7, #20]
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fcad 	bl	800384c <GPS_parseLonDir>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f083 0301 	eor.w	r3, r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <GPS_parse+0x46a>
 8002efe:	2300      	movs	r3, #0
 8002f00:	e131      	b.n	8003166 <GPS_parse+0x6ce>

		// get time
		p = strchr(p, ',') + 1;
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	6978      	ldr	r0, [r7, #20]
 8002f06:	f013 fcf4 	bl	80168f2 <strchr>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	617b      	str	r3, [r7, #20]
		GPS_parseTime(inst, p);
 8002f10:	6979      	ldr	r1, [r7, #20]
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 faae 	bl	8003474 <GPS_parseTime>

		// fix or no fix
		p = strchr(p, ',') + 1;
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f013 fce9 	bl	80168f2 <strchr>
 8002f20:	4603      	mov	r3, r0
 8002f22:	3301      	adds	r3, #1
 8002f24:	617b      	str	r3, [r7, #20]
		if (!GPS_parseFix(inst, p)) return false;
 8002f26:	6979      	ldr	r1, [r7, #20]
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fcd8 	bl	80038de <GPS_parseFix>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f083 0301 	eor.w	r3, r3, #1
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80fc 	beq.w	8003134 <GPS_parse+0x69c>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e112      	b.n	8003166 <GPS_parse+0x6ce>
	}

	else if (!strcmp(inst->thisSentence, "GSA"))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3307      	adds	r3, #7
 8002f44:	4947      	ldr	r1, [pc, #284]	; (8003064 <GPS_parse+0x5cc>)
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd f942 	bl	80001d0 <strcmp>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f040 808a 	bne.w	8003068 <GPS_parse+0x5d0>
	{
		// found GSA
		// parse out Auto selection, but ignore them
		// parse out 3d fixquality
		p = strchr(p, ',') + 1;
 8002f54:	212c      	movs	r1, #44	; 0x2c
 8002f56:	6978      	ldr	r0, [r7, #20]
 8002f58:	f013 fccb 	bl	80168f2 <strchr>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	3301      	adds	r3, #1
 8002f60:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->fixquality_3d = atoi(p);
 8002f62:	6979      	ldr	r1, [r7, #20]
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fa6c 	bl	8003442 <GPS_isEmpty>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f083 0301 	eor.w	r3, r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d007      	beq.n	8002f86 <GPS_parse+0x4ee>
 8002f76:	6978      	ldr	r0, [r7, #20]
 8002f78:	f012 fd3a 	bl	80159f0 <atoi>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
		// skip 12 Satellite PDNs without interpreting them
		for (int i = 0; i < 12; i++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	e009      	b.n	8002fa0 <GPS_parse+0x508>
		{
			p = strchr(p, ',') + 1;
 8002f8c:	212c      	movs	r1, #44	; 0x2c
 8002f8e:	6978      	ldr	r0, [r7, #20]
 8002f90:	f013 fcaf 	bl	80168f2 <strchr>
 8002f94:	4603      	mov	r3, r0
 8002f96:	3301      	adds	r3, #1
 8002f98:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < 12; i++)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	2b0b      	cmp	r3, #11
 8002fa4:	ddf2      	ble.n	8002f8c <GPS_parse+0x4f4>
		}
		
		// parse out PDOP
		p = strchr(p, ',') + 1;
 8002fa6:	212c      	movs	r1, #44	; 0x2c
 8002fa8:	6978      	ldr	r0, [r7, #20]
 8002faa:	f013 fca2 	bl	80168f2 <strchr>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->PDOP = (float)atof(p);
 8002fb4:	6979      	ldr	r1, [r7, #20]
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fa43 	bl	8003442 <GPS_isEmpty>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f083 0301 	eor.w	r3, r3, #1
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00b      	beq.n	8002fe0 <GPS_parse+0x548>
 8002fc8:	6978      	ldr	r0, [r7, #20]
 8002fca:	f012 fd0e 	bl	80159ea <atof>
 8002fce:	ec54 3b10 	vmov	r3, r4, d0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	f7fd fe17 	bl	8000c08 <__aeabi_d2f>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	671a      	str	r2, [r3, #112]	; 0x70
		
		// parse out HDOP, we also parse this from the GGA sentence. Chipset should
		// report the same for both
		p = strchr(p, ',') + 1;
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	6978      	ldr	r0, [r7, #20]
 8002fe4:	f013 fc85 	bl	80168f2 <strchr>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	3301      	adds	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->HDOP = (float)atof(p);
 8002fee:	6979      	ldr	r1, [r7, #20]
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fa26 	bl	8003442 <GPS_isEmpty>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f083 0301 	eor.w	r3, r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00b      	beq.n	800301a <GPS_parse+0x582>
 8003002:	6978      	ldr	r0, [r7, #20]
 8003004:	f012 fcf1 	bl	80159ea <atof>
 8003008:	ec54 3b10 	vmov	r3, r4, d0
 800300c:	4618      	mov	r0, r3
 800300e:	4621      	mov	r1, r4
 8003010:	f7fd fdfa 	bl	8000c08 <__aeabi_d2f>
 8003014:	4602      	mov	r2, r0
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	669a      	str	r2, [r3, #104]	; 0x68
		
		// parse out VDOP
		p = strchr(p, ',') + 1;
 800301a:	212c      	movs	r1, #44	; 0x2c
 800301c:	6978      	ldr	r0, [r7, #20]
 800301e:	f013 fc68 	bl	80168f2 <strchr>
 8003022:	4603      	mov	r3, r0
 8003024:	3301      	adds	r3, #1
 8003026:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->VDOP = (float)atof(p);
 8003028:	6979      	ldr	r1, [r7, #20]
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fa09 	bl	8003442 <GPS_isEmpty>
 8003030:	4603      	mov	r3, r0
 8003032:	f083 0301 	eor.w	r3, r3, #1
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d07b      	beq.n	8003134 <GPS_parse+0x69c>
 800303c:	6978      	ldr	r0, [r7, #20]
 800303e:	f012 fcd4 	bl	80159ea <atof>
 8003042:	ec54 3b10 	vmov	r3, r4, d0
 8003046:	4618      	mov	r0, r3
 8003048:	4621      	mov	r1, r4
 800304a:	f7fd fddd 	bl	8000c08 <__aeabi_d2f>
 800304e:	4602      	mov	r2, r0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	66da      	str	r2, [r3, #108]	; 0x6c
 8003054:	e06e      	b.n	8003134 <GPS_parse+0x69c>
 8003056:	bf00      	nop
 8003058:	d1b71759 	.word	0xd1b71759
 800305c:	51eb851f 	.word	0x51eb851f
 8003060:	0801b644 	.word	0x0801b644
 8003064:	0801b648 	.word	0x0801b648
	}

#ifdef NMEA_EXTENSIONS // Sentences not required for basic GPS functionality
	else if (!strcmp(inst->thisSentence, "TXT"))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3307      	adds	r3, #7
 800306c:	4940      	ldr	r1, [pc, #256]	; (8003170 <GPS_parse+0x6d8>)
 800306e:	4618      	mov	r0, r3
 8003070:	f7fd f8ae 	bl	80001d0 <strcmp>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d15a      	bne.n	8003130 <GPS_parse+0x698>
	{ //*******************************TXT
		if (!GPS_isEmpty(inst, p)) inst->txtTot = atoi(p);
 800307a:	6979      	ldr	r1, [r7, #20]
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f9e0 	bl	8003442 <GPS_isEmpty>
 8003082:	4603      	mov	r3, r0
 8003084:	f083 0301 	eor.w	r3, r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d006      	beq.n	800309c <GPS_parse+0x604>
 800308e:	6978      	ldr	r0, [r7, #20]
 8003090:	f012 fcae 	bl	80159f0 <atoi>
 8003094:	4602      	mov	r2, r0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		p = strchr(p, ',') + 1;
 800309c:	212c      	movs	r1, #44	; 0x2c
 800309e:	6978      	ldr	r0, [r7, #20]
 80030a0:	f013 fc27 	bl	80168f2 <strchr>
 80030a4:	4603      	mov	r3, r0
 80030a6:	3301      	adds	r3, #1
 80030a8:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtN = atoi(p);
 80030aa:	6979      	ldr	r1, [r7, #20]
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f9c8 	bl	8003442 <GPS_isEmpty>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f083 0301 	eor.w	r3, r3, #1
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d006      	beq.n	80030cc <GPS_parse+0x634>
 80030be:	6978      	ldr	r0, [r7, #20]
 80030c0:	f012 fc96 	bl	80159f0 <atoi>
 80030c4:	4602      	mov	r2, r0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		p = strchr(p, ',') + 1;
 80030cc:	212c      	movs	r1, #44	; 0x2c
 80030ce:	6978      	ldr	r0, [r7, #20]
 80030d0:	f013 fc0f 	bl	80168f2 <strchr>
 80030d4:	4603      	mov	r3, r0
 80030d6:	3301      	adds	r3, #1
 80030d8:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) inst->txtID = atoi(p);
 80030da:	6979      	ldr	r1, [r7, #20]
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f9b0 	bl	8003442 <GPS_isEmpty>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f083 0301 	eor.w	r3, r3, #1
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <GPS_parse+0x664>
 80030ee:	6978      	ldr	r0, [r7, #20]
 80030f0:	f012 fc7e 	bl	80159f0 <atoi>
 80030f4:	4602      	mov	r2, r0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		p = strchr(p, ',') + 1;
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	6978      	ldr	r0, [r7, #20]
 8003100:	f013 fbf7 	bl	80168f2 <strchr>
 8003104:	4603      	mov	r3, r0
 8003106:	3301      	adds	r3, #1
 8003108:	617b      	str	r3, [r7, #20]
		if (!GPS_isEmpty(inst, p)) GPS_parseStr(inst, inst->txtTXT, p, 61); // copy the text to NMEA TXT max of 61 characters
 800310a:	6979      	ldr	r1, [r7, #20]
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f998 	bl	8003442 <GPS_isEmpty>
 8003112:	4603      	mov	r3, r0
 8003114:	f083 0301 	eor.w	r3, r3, #1
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <GPS_parse+0x69c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8003124:	233d      	movs	r3, #61	; 0x3d
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f923 	bl	8003374 <GPS_parseStr>
 800312e:	e001      	b.n	8003134 <GPS_parse+0x69c>
	}
#endif // NMEA_EXTENSIONS

	// we dont parse the remaining, yet!
	else return false;
 8003130:	2300      	movs	r3, #0
 8003132:	e018      	b.n	8003166 <GPS_parse+0x6ce>

	// Record the successful parsing of where the last data came from and when
	strcpy(inst->lastSource, inst->thisSource);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f103 021b 	add.w	r2, r3, #27
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3304      	adds	r3, #4
 800313e:	4619      	mov	r1, r3
 8003140:	4610      	mov	r0, r2
 8003142:	f013 fbe3 	bl	801690c <strcpy>
	strcpy(inst->lastSentence, inst->thisSentence);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f103 021e 	add.w	r2, r3, #30
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3307      	adds	r3, #7
 8003150:	4619      	mov	r1, r3
 8003152:	4610      	mov	r0, r2
 8003154:	f013 fbda 	bl	801690c <strcpy>
	inst->lastUpdate = millis();
 8003158:	f7ff fa60 	bl	800261c <millis>
 800315c:	4602      	mov	r2, r0
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	return true;
 8003164:	2301      	movs	r3, #1
}
 8003166:	4618      	mov	r0, r3
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	bd90      	pop	{r4, r7, pc}
 800316e:	bf00      	nop
 8003170:	0801b698 	.word	0x0801b698

08003174 <GPS_check>:
		@param nmea Pointer to the NMEA string
		@return True if well formed, false if it has problems
*/
/**************************************************************************/
bool GPS_check(GPS* inst, char* nmea)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	; 0x28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
	inst->thisCheck = 0; // new check
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
	if (*nmea != '$') return false; // doesn't start with $
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b24      	cmp	r3, #36	; 0x24
 800318a:	d001      	beq.n	8003190 <GPS_check+0x1c>
 800318c:	2300      	movs	r3, #0
 800318e:	e0ad      	b.n	80032ec <GPS_check+0x178>
	else inst->thisCheck += NMEA_HAS_DOLLAR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	601a      	str	r2, [r3, #0]
	// do checksum check -- first look if we even have one -- ignore all but last
	//* 
	char* ast = nmea; // not strchr(nmea,'*'); for first* 
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
	while (*ast) ast++; // go to the end
 800319e:	e002      	b.n	80031a6 <GPS_check+0x32>
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	3301      	adds	r3, #1
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f8      	bne.n	80031a0 <GPS_check+0x2c>
	while (*ast != '*' && ast > nmea) ast--; // then back to*	if it's there
 80031ae:	e002      	b.n	80031b6 <GPS_check+0x42>
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	3b01      	subs	r3, #1
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b2a      	cmp	r3, #42	; 0x2a
 80031bc:	d003      	beq.n	80031c6 <GPS_check+0x52>
 80031be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d8f4      	bhi.n	80031b0 <GPS_check+0x3c>
	if (*ast != '*') return false; // there is no asterisk
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b2a      	cmp	r3, #42	; 0x2a
 80031cc:	d001      	beq.n	80031d2 <GPS_check+0x5e>
 80031ce:	2300      	movs	r3, #0
 80031d0:	e08c      	b.n	80032ec <GPS_check+0x178>
	else
	{
		uint16_t sum = GPS_parseHex(inst, *(ast + 1)) * 16; // extract checksum
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	3301      	adds	r3, #1
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	4619      	mov	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fbc4 	bl	8003968 <GPS_parseHex>
 80031e0:	4603      	mov	r3, r0
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	847b      	strh	r3, [r7, #34]	; 0x22
		sum += GPS_parseHex(inst, *(ast + 2));
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	3302      	adds	r3, #2
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	4619      	mov	r1, r3
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fbb9 	bl	8003968 <GPS_parseHex>
 80031f6:	4603      	mov	r3, r0
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80031fc:	4413      	add	r3, r2
 80031fe:	847b      	strh	r3, [r7, #34]	; 0x22
		char* p = nmea; // check checksum
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	61bb      	str	r3, [r7, #24]
		for (char* p1 = p + 1; p1 < ast; p1++)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	3301      	adds	r3, #1
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	e008      	b.n	800321e <GPS_check+0xaa>
		{
			sum ^=* p1;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	b29a      	uxth	r2, r3
 8003212:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003214:	4053      	eors	r3, r2
 8003216:	847b      	strh	r3, [r7, #34]	; 0x22
		for (char* p1 = p + 1; p1 < ast; p1++)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	3301      	adds	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	429a      	cmp	r2, r3
 8003224:	d3f2      	bcc.n	800320c <GPS_check+0x98>
		}
		if (sum != 0) return false; // bad checksum :(
 8003226:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <GPS_check+0xbc>
 800322c:	2300      	movs	r3, #0
 800322e:	e05d      	b.n	80032ec <GPS_check+0x178>
		else inst->thisCheck += NMEA_HAS_CHECKSUM;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	1c9a      	adds	r2, r3, #2
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
	}
	// extract source of variable length
	char* p = nmea + 1;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
	const char* src = GPS_tokenOnList(inst, p, inst->sources);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003246:	461a      	mov	r2, r3
 8003248:	6979      	ldr	r1, [r7, #20]
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f852 	bl	80032f4 <GPS_tokenOnList>
 8003250:	6138      	str	r0, [r7, #16]
	if (src)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01f      	beq.n	8003298 <GPS_check+0x124>
	{
		strcpy(inst->thisSource, src);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3304      	adds	r3, #4
 800325c:	6939      	ldr	r1, [r7, #16]
 800325e:	4618      	mov	r0, r3
 8003260:	f013 fb54 	bl	801690c <strcpy>
		inst->thisCheck += NMEA_HAS_SOURCE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f103 020a 	add.w	r2, r3, #10
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	601a      	str	r2, [r3, #0]
	}
	else return false;
	p += strlen(src);
 8003270:	6938      	ldr	r0, [r7, #16]
 8003272:	f7fc ffb7 	bl	80001e4 <strlen>
 8003276:	4602      	mov	r2, r0
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	4413      	add	r3, r2
 800327c:	617b      	str	r3, [r7, #20]
	// extract sentence id and check if parsed
	const char* snc = GPS_tokenOnList(inst, p, inst->sentences_parsed);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003284:	461a      	mov	r2, r3
 8003286:	6979      	ldr	r1, [r7, #20]
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f833 	bl	80032f4 <GPS_tokenOnList>
 800328e:	60f8      	str	r0, [r7, #12]
	if (snc)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00f      	beq.n	80032b6 <GPS_check+0x142>
 8003296:	e001      	b.n	800329c <GPS_check+0x128>
	else return false;
 8003298:	2300      	movs	r3, #0
 800329a:	e027      	b.n	80032ec <GPS_check+0x178>
	{
		strcpy(inst->thisSentence, snc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3307      	adds	r3, #7
 80032a0:	68f9      	ldr	r1, [r7, #12]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f013 fb32 	bl	801690c <strcpy>
		inst->thisCheck += NMEA_HAS_SENTENCE_P + NMEA_HAS_SENTENCE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	e019      	b.n	80032ea <GPS_check+0x176>
	}
	else
	{ // check if known
		snc = GPS_tokenOnList(inst, p, inst->sentences_known);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80032bc:	461a      	mov	r2, r3
 80032be:	6979      	ldr	r1, [r7, #20]
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f817 	bl	80032f4 <GPS_tokenOnList>
 80032c6:	60f8      	str	r0, [r7, #12]
		if (snc)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00d      	beq.n	80032ea <GPS_check+0x176>
		{
			strcpy(inst->thisSentence, snc);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3307      	adds	r3, #7
 80032d2:	68f9      	ldr	r1, [r7, #12]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f013 fb19 	bl	801690c <strcpy>
			inst->thisCheck += NMEA_HAS_SENTENCE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f103 0214 	add.w	r2, r3, #20
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	601a      	str	r2, [r3, #0]
			return false;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e000      	b.n	80032ec <GPS_check+0x178>
		}
	}
	return true; // passed all the tests
 80032ea:	2301      	movs	r3, #1
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3728      	adds	r7, #40	; 0x28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <GPS_tokenOnList>:
		@param list A list of strings, with the final entry starting "ZZ"
		@return Pointer to the found token, or NULL if it fails
*/
/**************************************************************************/
const char* GPS_tokenOnList(GPS* inst, char* token, const char* *list)
{
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
	int i = 0; // index in the list
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 8003304:	e01e      	b.n	8003344 <GPS_tokenOnList+0x50>
	{ // stop at terminator and don't crash without it
		// test for a match on the sentence name
		if (!strncmp((const char* )list[i], (const char* )token, strlen(list[i]))) return list[i];
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	681c      	ldr	r4, [r3, #0]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4413      	add	r3, r2
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fc ff62 	bl	80001e4 <strlen>
 8003320:	4603      	mov	r3, r0
 8003322:	461a      	mov	r2, r3
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	4620      	mov	r0, r4
 8003328:	f013 faf8 	bl	801691c <strncmp>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d105      	bne.n	800333e <GPS_tokenOnList+0x4a>
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	e014      	b.n	8003368 <GPS_tokenOnList+0x74>
		i++;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	3301      	adds	r3, #1
 8003342:	617b      	str	r3, [r7, #20]
	while (strncmp(list[i], "ZZ", 2) && i < 1000)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	4413      	add	r3, r2
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2202      	movs	r2, #2
 8003350:	4907      	ldr	r1, [pc, #28]	; (8003370 <GPS_tokenOnList+0x7c>)
 8003352:	4618      	mov	r0, r3
 8003354:	f013 fae2 	bl	801691c <strncmp>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <GPS_tokenOnList+0x72>
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003364:	dbcf      	blt.n	8003306 <GPS_tokenOnList+0x12>
	}
	return NULL; // couldn't find a match
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	bd90      	pop	{r4, r7, pc}
 8003370:	0801b69c 	.word	0x0801b69c

08003374 <GPS_parseStr>:
		@param n Max permitted size of string including terminating 0
		@return Pointer to the string buffer
*/
/**************************************************************************/
char* GPS_parseStr(GPS* inst, char* buff, char* p, int n)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08c      	sub	sp, #48	; 0x30
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
	char* e = strchr(p, ',');
 8003382:	212c      	movs	r1, #44	; 0x2c
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f013 fab4 	bl	80168f2 <strchr>
 800338a:	62f8      	str	r0, [r7, #44]	; 0x2c
	int len = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (e) 
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	2b00      	cmp	r3, #0
 8003394:	d018      	beq.n	80033c8 <GPS_parseStr+0x54>
	{
		len = min(e - p, n - 1);
 8003396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	3b01      	subs	r3, #1
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	4293      	cmp	r3, r2
 80033aa:	bfa8      	it	ge
 80033ac:	4613      	movge	r3, r2
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
		strncpy(buff, p, len); // copy up to the comma
 80033b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b2:	461a      	mov	r2, r3
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	68b8      	ldr	r0, [r7, #8]
 80033b8:	f013 fac2 	bl	8016940 <strncpy>
		buff[len] = 0;
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	4413      	add	r3, r2
 80033c2:	2200      	movs	r2, #0
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	e037      	b.n	8003438 <GPS_parseStr+0xc4>
	}
	else
	{
		e = strchr(p, '*');
 80033c8:	212a      	movs	r1, #42	; 0x2a
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f013 fa91 	bl	80168f2 <strchr>
 80033d0:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (e)
 80033d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01b      	beq.n	8003410 <GPS_parseStr+0x9c>
		{
			len = min(e - p, n - 1);
 80033d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	61fb      	str	r3, [r7, #28]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	4293      	cmp	r3, r2
 80033ec:	bfa8      	it	ge
 80033ee:	4613      	movge	r3, r2
 80033f0:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or up to the* 
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	461a      	mov	r2, r3
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	68b8      	ldr	r0, [r7, #8]
 80033fa:	f013 faa1 	bl	8016940 <strncpy>
			buff[e - p] = 0;
 80033fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	461a      	mov	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	4413      	add	r3, r2
 800340a:	2200      	movs	r2, #0
 800340c:	701a      	strb	r2, [r3, #0]
 800340e:	e013      	b.n	8003438 <GPS_parseStr+0xc4>
		}
		else
		{
			len = min((int)strlen(p), n - 1);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7fc fee7 	bl	80001e4 <strlen>
 8003416:	4603      	mov	r3, r0
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	3b01      	subs	r3, #1
 800341e:	623b      	str	r3, [r7, #32]
 8003420:	6a3a      	ldr	r2, [r7, #32]
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	4293      	cmp	r3, r2
 8003426:	bfa8      	it	ge
 8003428:	4613      	movge	r3, r2
 800342a:	62bb      	str	r3, [r7, #40]	; 0x28
			strncpy(buff, p, len); // or to the end or max capacity
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	461a      	mov	r2, r3
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	68b8      	ldr	r0, [r7, #8]
 8003434:	f013 fa84 	bl	8016940 <strncpy>
		}
	}
	return buff;
 8003438:	68bb      	ldr	r3, [r7, #8]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3730      	adds	r7, #48	; 0x30
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <GPS_isEmpty>:
		@param pStart Pointer to the location of the token in the NMEA string
		@return true if empty field, false if something there
*/
/**************************************************************************/
bool GPS_isEmpty(GPS* inst, char* pStart)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
	if (',' !=* pStart && '*' !=* pStart && pStart != NULL) return false;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b2c      	cmp	r3, #44	; 0x2c
 8003452:	d008      	beq.n	8003466 <GPS_isEmpty+0x24>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b2a      	cmp	r3, #42	; 0x2a
 800345a:	d004      	beq.n	8003466 <GPS_isEmpty+0x24>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <GPS_isEmpty+0x24>
 8003462:	2300      	movs	r3, #0
 8003464:	e000      	b.n	8003468 <GPS_isEmpty+0x26>
	else return true;
 8003466:	2301      	movs	r3, #1
}
 8003468:	4618      	mov	r0, r3
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <GPS_parseTime>:
		@brief Parse a part of an NMEA string for time
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseTime(GPS* inst, char* p)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
	// get time
	uint32_t time = atol(p);
 800347e:	6838      	ldr	r0, [r7, #0]
 8003480:	f012 faba 	bl	80159f8 <atol>
 8003484:	4603      	mov	r3, r0
 8003486:	60fb      	str	r3, [r7, #12]
	inst->gpsTime.hour = time / 10000;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4a1f      	ldr	r2, [pc, #124]	; (8003508 <GPS_parseTime+0x94>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	0b5b      	lsrs	r3, r3, #13
 8003492:	b2da      	uxtb	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	inst->gpsTime.minute = (time % 10000) / 100;
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <GPS_parseTime+0x94>)
 800349e:	fba3 1302 	umull	r1, r3, r3, r2
 80034a2:	0b5b      	lsrs	r3, r3, #13
 80034a4:	f242 7110 	movw	r1, #10000	; 0x2710
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	4a17      	ldr	r2, [pc, #92]	; (800350c <GPS_parseTime+0x98>)
 80034b0:	fba2 2303 	umull	r2, r3, r2, r3
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	inst->gpsTime.second = (time % 100);
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4b12      	ldr	r3, [pc, #72]	; (800350c <GPS_parseTime+0x98>)
 80034c2:	fba3 1302 	umull	r1, r3, r3, r2
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	2164      	movs	r1, #100	; 0x64
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	p = strchr(p, '.') + 1;
 80034d8:	212e      	movs	r1, #46	; 0x2e
 80034da:	6838      	ldr	r0, [r7, #0]
 80034dc:	f013 fa09 	bl	80168f2 <strchr>
 80034e0:	4603      	mov	r3, r0
 80034e2:	3301      	adds	r3, #1
 80034e4:	603b      	str	r3, [r7, #0]
	inst->gpsTime.msecond = (uint32_t)atoi(p);
 80034e6:	6838      	ldr	r0, [r7, #0]
 80034e8:	f012 fa82 	bl	80159f0 <atoi>
 80034ec:	4603      	mov	r3, r0
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	875a      	strh	r2, [r3, #58]	; 0x3a
	inst->lastTime = inst->sentTime;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	d1b71759 	.word	0xd1b71759
 800350c:	51eb851f 	.word	0x51eb851f

08003510 <GPS_parseLat>:
		@brief Parse a part of an NMEA string for latitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLat(GPS* inst, char* p)
{
 8003510:	b5b0      	push	{r4, r5, r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
	//int32_t degree;
	//long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 800351a:	6839      	ldr	r1, [r7, #0]
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff ff90 	bl	8003442 <GPS_isEmpty>
 8003522:	4603      	mov	r3, r0
 8003524:	f083 0301 	eor.w	r3, r3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 8092 	beq.w	8003654 <GPS_parseLat+0x144>
	{
		strncpy(degreebuff, p, 2);
 8003530:	f107 030c 	add.w	r3, r7, #12
 8003534:	2202      	movs	r2, #2
 8003536:	6839      	ldr	r1, [r7, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f013 fa01 	bl	8016940 <strncpy>
		p += 2;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	3302      	adds	r3, #2
 8003542:	603b      	str	r3, [r7, #0]
		degreebuff[2] = '\0';
 8003544:	2300      	movs	r3, #0
 8003546:	73bb      	strb	r3, [r7, #14]
		long degree = atol(degreebuff) * 10000000;
 8003548:	f107 030c 	add.w	r3, r7, #12
 800354c:	4618      	mov	r0, r3
 800354e:	f012 fa53 	bl	80159f8 <atol>
 8003552:	4602      	mov	r2, r0
 8003554:	4b44      	ldr	r3, [pc, #272]	; (8003668 <GPS_parseLat+0x158>)
 8003556:	fb03 f302 	mul.w	r3, r3, r2
 800355a:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 800355c:	f107 030c 	add.w	r3, r7, #12
 8003560:	2202      	movs	r2, #2
 8003562:	6839      	ldr	r1, [r7, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f013 f9eb 	bl	8016940 <strncpy>
		p += 3;										// skip decimal point
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	3303      	adds	r3, #3
 800356e:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 8003570:	f107 030c 	add.w	r3, r7, #12
 8003574:	3302      	adds	r3, #2
 8003576:	2204      	movs	r2, #4
 8003578:	6839      	ldr	r1, [r7, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f013 f9e0 	bl	8016940 <strncpy>
		degreebuff[6] = '\0';
 8003580:	2300      	movs	r3, #0
 8003582:	74bb      	strb	r3, [r7, #18]
		long minutes = 50*	atol(degreebuff) / 3;
 8003584:	f107 030c 	add.w	r3, r7, #12
 8003588:	4618      	mov	r0, r3
 800358a:	f012 fa35 	bl	80159f8 <atol>
 800358e:	4602      	mov	r2, r0
 8003590:	2332      	movs	r3, #50	; 0x32
 8003592:	fb03 f302 	mul.w	r3, r3, r2
 8003596:	4a35      	ldr	r2, [pc, #212]	; (800366c <GPS_parseLat+0x15c>)
 8003598:	fb82 1203 	smull	r1, r2, r2, r3
 800359c:	17db      	asrs	r3, r3, #31
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	61bb      	str	r3, [r7, #24]
		inst->latitude_fixed = degree + minutes;
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	441a      	add	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	645a      	str	r2, [r3, #68]	; 0x44
		inst->latitude = degree / 100000 + minutes * 0.000006;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	4a30      	ldr	r2, [pc, #192]	; (8003670 <GPS_parseLat+0x160>)
 80035b0:	fb82 1203 	smull	r1, r2, r2, r3
 80035b4:	1352      	asrs	r2, r2, #13
 80035b6:	17db      	asrs	r3, r3, #31
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fc ffc2 	bl	8000544 <__aeabi_i2d>
 80035c0:	4604      	mov	r4, r0
 80035c2:	460d      	mov	r5, r1
 80035c4:	69b8      	ldr	r0, [r7, #24]
 80035c6:	f7fc ffbd 	bl	8000544 <__aeabi_i2d>
 80035ca:	a325      	add	r3, pc, #148	; (adr r3, 8003660 <GPS_parseLat+0x150>)
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f7fd f822 	bl	8000618 <__aeabi_dmul>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4620      	mov	r0, r4
 80035da:	4629      	mov	r1, r5
 80035dc:	f7fc fe66 	bl	80002ac <__adddf3>
 80035e0:	4603      	mov	r3, r0
 80035e2:	460c      	mov	r4, r1
 80035e4:	4618      	mov	r0, r3
 80035e6:	4621      	mov	r1, r4
 80035e8:	f7fd fb0e 	bl	8000c08 <__aeabi_d2f>
 80035ec:	4602      	mov	r2, r0
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	63da      	str	r2, [r3, #60]	; 0x3c
		inst->latitudeDegrees = (inst->latitude - 100 * (int)(inst->latitude / 100)) / 60.0;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80035fe:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8003674 <GPS_parseLat+0x164>
 8003602:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800360a:	ee17 2a90 	vmov	r2, s15
 800360e:	2364      	movs	r3, #100	; 0x64
 8003610:	fb03 f302 	mul.w	r3, r3, r2
 8003614:	ee07 3a90 	vmov	s15, r3
 8003618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800361c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003620:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003678 <GPS_parseLat+0x168>
 8003624:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitudeDegrees += (int)(inst->latitude / 100);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800363a:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8003674 <GPS_parseLat+0x164>
 800363e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800364a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	}
}
 8003654:	bf00      	nop
 8003656:	3720      	adds	r7, #32
 8003658:	46bd      	mov	sp, r7
 800365a:	bdb0      	pop	{r4, r5, r7, pc}
 800365c:	f3af 8000 	nop.w
 8003660:	7110e454 	.word	0x7110e454
 8003664:	3ed92a73 	.word	0x3ed92a73
 8003668:	00989680 	.word	0x00989680
 800366c:	55555556 	.word	0x55555556
 8003670:	14f8b589 	.word	0x14f8b589
 8003674:	42c80000 	.word	0x42c80000
 8003678:	42700000 	.word	0x42700000

0800367c <GPS_parseLatDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLatDir(GPS* inst, char* p)
{
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
	if (p[0] == 'S')
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b53      	cmp	r3, #83	; 0x53
 800368c:	d11c      	bne.n	80036c8 <GPS_parseLatDir+0x4c>
	{
		inst->lat = 'S';
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2253      	movs	r2, #83	; 0x53
 8003692:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		inst->latitudeDegrees *= -1.0;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369a:	4618      	mov	r0, r3
 800369c:	f7fc ff64 	bl	8000568 <__aeabi_f2d>
 80036a0:	4603      	mov	r3, r0
 80036a2:	460c      	mov	r4, r1
 80036a4:	4618      	mov	r0, r3
 80036a6:	4621      	mov	r1, r4
 80036a8:	f7fd faae 	bl	8000c08 <__aeabi_d2f>
 80036ac:	4603      	mov	r3, r0
 80036ae:	ee07 3a90 	vmov	s15, r3
 80036b2:	eef1 7a67 	vneg.f32	s15, s15
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		inst->latitude_fixed *= -1;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c0:	425a      	negs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
 80036c6:	e013      	b.n	80036f0 <GPS_parseLatDir+0x74>
	}
	else if (p[0] == 'N') inst->lat = 'N';
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b4e      	cmp	r3, #78	; 0x4e
 80036ce:	d104      	bne.n	80036da <GPS_parseLatDir+0x5e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	224e      	movs	r2, #78	; 0x4e
 80036d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80036d8:	e00a      	b.n	80036f0 <GPS_parseLatDir+0x74>
	else if (p[0] == ',') inst->lat = 0;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b2c      	cmp	r3, #44	; 0x2c
 80036e0:	d104      	bne.n	80036ec <GPS_parseLatDir+0x70>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80036ea:	e001      	b.n	80036f0 <GPS_parseLatDir+0x74>
	else return false;
 80036ec:	2300      	movs	r3, #0
 80036ee:	e000      	b.n	80036f2 <GPS_parseLatDir+0x76>
	
	return true;
 80036f0:	2301      	movs	r3, #1
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd90      	pop	{r4, r7, pc}
	...

080036fc <GPS_parseLon>:
		@brief Parse a part of an NMEA string for longitude angle
		@param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void GPS_parseLon(GPS* inst, char* p)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
	int32_t degree;
	long minutes;
	char degreebuff[10];
	if (!GPS_isEmpty(inst, p))
 8003706:	6839      	ldr	r1, [r7, #0]
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff fe9a 	bl	8003442 <GPS_isEmpty>
 800370e:	4603      	mov	r3, r0
 8003710:	f083 0301 	eor.w	r3, r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8088 	beq.w	800382c <GPS_parseLon+0x130>
	{
		strncpy(degreebuff, p, 3);
 800371c:	f107 030c 	add.w	r3, r7, #12
 8003720:	2203      	movs	r2, #3
 8003722:	6839      	ldr	r1, [r7, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f013 f90b 	bl	8016940 <strncpy>
		p += 3;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	3303      	adds	r3, #3
 800372e:	603b      	str	r3, [r7, #0]
		degreebuff[3] = '\0';
 8003730:	2300      	movs	r3, #0
 8003732:	73fb      	strb	r3, [r7, #15]
		degree = atol(degreebuff)*	10000000;
 8003734:	f107 030c 	add.w	r3, r7, #12
 8003738:	4618      	mov	r0, r3
 800373a:	f012 f95d 	bl	80159f8 <atol>
 800373e:	4602      	mov	r2, r0
 8003740:	4b3c      	ldr	r3, [pc, #240]	; (8003834 <GPS_parseLon+0x138>)
 8003742:	fb03 f302 	mul.w	r3, r3, r2
 8003746:	61fb      	str	r3, [r7, #28]
		strncpy(degreebuff, p, 2); // minutes
 8003748:	f107 030c 	add.w	r3, r7, #12
 800374c:	2202      	movs	r2, #2
 800374e:	6839      	ldr	r1, [r7, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f013 f8f5 	bl	8016940 <strncpy>
		p += 3;										// skip decimal point
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	3303      	adds	r3, #3
 800375a:	603b      	str	r3, [r7, #0]
		strncpy(degreebuff + 2, p, 4);
 800375c:	f107 030c 	add.w	r3, r7, #12
 8003760:	3302      	adds	r3, #2
 8003762:	2204      	movs	r2, #4
 8003764:	6839      	ldr	r1, [r7, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f013 f8ea 	bl	8016940 <strncpy>
		degreebuff[6] = '\0';
 800376c:	2300      	movs	r3, #0
 800376e:	74bb      	strb	r3, [r7, #18]
		minutes = 50 * atol(degreebuff) / 3;
 8003770:	f107 030c 	add.w	r3, r7, #12
 8003774:	4618      	mov	r0, r3
 8003776:	f012 f93f 	bl	80159f8 <atol>
 800377a:	4602      	mov	r2, r0
 800377c:	2332      	movs	r3, #50	; 0x32
 800377e:	fb03 f302 	mul.w	r3, r3, r2
 8003782:	4a2d      	ldr	r2, [pc, #180]	; (8003838 <GPS_parseLon+0x13c>)
 8003784:	fb82 1203 	smull	r1, r2, r2, r3
 8003788:	17db      	asrs	r3, r3, #31
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	61bb      	str	r3, [r7, #24]
		inst->longitude_fixed = degree + minutes;
 800378e:	69fa      	ldr	r2, [r7, #28]
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	441a      	add	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	649a      	str	r2, [r3, #72]	; 0x48
		inst->longitude = degree / 100000 + minutes * 0.000006f;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	4a28      	ldr	r2, [pc, #160]	; (800383c <GPS_parseLon+0x140>)
 800379c:	fb82 1203 	smull	r1, r2, r2, r3
 80037a0:	1352      	asrs	r2, r2, #13
 80037a2:	17db      	asrs	r3, r3, #31
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	ee07 3a90 	vmov	s15, r3
 80037aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	ee07 3a90 	vmov	s15, r3
 80037b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037b8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003840 <GPS_parseLon+0x144>
 80037bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80037c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		inst->longitudeDegrees = (inst->longitude - 100 * (int)(inst->longitude / 100)) / 60.0;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80037d6:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8003844 <GPS_parseLon+0x148>
 80037da:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80037de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037e2:	ee17 2a90 	vmov	r2, s15
 80037e6:	2364      	movs	r3, #100	; 0x64
 80037e8:	fb03 f302 	mul.w	r3, r3, r2
 80037ec:	ee07 3a90 	vmov	s15, r3
 80037f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037f8:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003848 <GPS_parseLon+0x14c>
 80037fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		inst->longitudeDegrees += (int)(inst->longitude / 100);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8003812:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8003844 <GPS_parseLon+0x148>
 8003816:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800381a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800381e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	}
}
 800382c:	bf00      	nop
 800382e:	3720      	adds	r7, #32
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	00989680 	.word	0x00989680
 8003838:	55555556 	.word	0x55555556
 800383c:	14f8b589 	.word	0x14f8b589
 8003840:	36c9539c 	.word	0x36c9539c
 8003844:	42c80000 	.word	0x42c80000
 8003848:	42700000 	.word	0x42700000

0800384c <GPS_parseLonDir>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseLonDir(GPS* inst, char* p)
{
 800384c:	b590      	push	{r4, r7, lr}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
	if (!GPS_isEmpty(inst, p))
 8003856:	6839      	ldr	r1, [r7, #0]
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff fdf2 	bl	8003442 <GPS_isEmpty>
 800385e:	4603      	mov	r3, r0
 8003860:	f083 0301 	eor.w	r3, r3, #1
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d034      	beq.n	80038d4 <GPS_parseLonDir+0x88>
	{
		if (p[0] == 'W')
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b57      	cmp	r3, #87	; 0x57
 8003870:	d11c      	bne.n	80038ac <GPS_parseLonDir+0x60>
		{
			inst->lon = 'W';
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2257      	movs	r2, #87	; 0x57
 8003876:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
			inst->longitudeDegrees *= -1.0;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387e:	4618      	mov	r0, r3
 8003880:	f7fc fe72 	bl	8000568 <__aeabi_f2d>
 8003884:	4603      	mov	r3, r0
 8003886:	460c      	mov	r4, r1
 8003888:	4618      	mov	r0, r3
 800388a:	4621      	mov	r1, r4
 800388c:	f7fd f9bc 	bl	8000c08 <__aeabi_d2f>
 8003890:	4603      	mov	r3, r0
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef1 7a67 	vneg.f32	s15, s15
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			inst->longitude_fixed *= -1;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a4:	425a      	negs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	649a      	str	r2, [r3, #72]	; 0x48
 80038aa:	e013      	b.n	80038d4 <GPS_parseLonDir+0x88>
		}
		else if (p[0] == 'E') inst->lon = 'E';
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b45      	cmp	r3, #69	; 0x45
 80038b2:	d104      	bne.n	80038be <GPS_parseLonDir+0x72>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2245      	movs	r2, #69	; 0x45
 80038b8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80038bc:	e00a      	b.n	80038d4 <GPS_parseLonDir+0x88>
		else if (p[0] == ',') inst->lon = 0;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b2c      	cmp	r3, #44	; 0x2c
 80038c4:	d104      	bne.n	80038d0 <GPS_parseLonDir+0x84>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80038ce:	e001      	b.n	80038d4 <GPS_parseLonDir+0x88>
		else return false;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e000      	b.n	80038d6 <GPS_parseLonDir+0x8a>
	}
	return true;
 80038d4:	2301      	movs	r3, #1
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd90      	pop	{r4, r7, pc}

080038de <GPS_parseFix>:
		@param p Pointer to the location of the token in the NMEA string
		@return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool GPS_parseFix(GPS* inst, char* p)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
	if (p[0] == 'A')
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b41      	cmp	r3, #65	; 0x41
 80038ee:	d10a      	bne.n	8003906 <GPS_parseFix+0x28>
	{
		inst->fix = true;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		inst->lastFix = inst->sentTime;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8003904:	e00a      	b.n	800391c <GPS_parseFix+0x3e>
	}
	else if (p[0] == 'V') inst->fix = false;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b56      	cmp	r3, #86	; 0x56
 800390c:	d104      	bne.n	8003918 <GPS_parseFix+0x3a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8003916:	e001      	b.n	800391c <GPS_parseFix+0x3e>
	else return false;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <GPS_parseFix+0x40>
	return true;
 800391c:	2301      	movs	r3, #1
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <GPS_newNMEAreceived>:
/*!
		@brief Check to see if a new NMEA line has been received
		@return True if received, false if not
*/
/**************************************************************************/
bool GPS_newNMEAreceived(GPS* inst) { return inst->recvdflag; }
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8003938:	b2db      	uxtb	r3, r3
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <GPS_lastNMEA>:
		@brief Returns the last NMEA line received and unsets the received flag
		@return Pointer to the last line string
*/
/**************************************************************************/
char* GPS_lastNMEA(GPS* inst)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
	inst->recvdflag = false;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	return (char*)inst->lastline;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
}
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <GPS_parseHex>:
	 character
*/
/**************************************************************************/
// read a Hex value and return the decimal equivalent
uint8_t GPS_parseHex(GPS* inst, char c)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	70fb      	strb	r3, [r7, #3]
	if (c < '0') return 0;
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	2b2f      	cmp	r3, #47	; 0x2f
 8003978:	d801      	bhi.n	800397e <GPS_parseHex+0x16>
 800397a:	2300      	movs	r3, #0
 800397c:	e013      	b.n	80039a6 <GPS_parseHex+0x3e>
	if (c <= '9') return c - '0';
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	2b39      	cmp	r3, #57	; 0x39
 8003982:	d803      	bhi.n	800398c <GPS_parseHex+0x24>
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	3b30      	subs	r3, #48	; 0x30
 8003988:	b2db      	uxtb	r3, r3
 800398a:	e00c      	b.n	80039a6 <GPS_parseHex+0x3e>
	if (c < 'A') return 0;
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d801      	bhi.n	8003996 <GPS_parseHex+0x2e>
 8003992:	2300      	movs	r3, #0
 8003994:	e007      	b.n	80039a6 <GPS_parseHex+0x3e>
	if (c <= 'F') return (c - 'A') + 10;
 8003996:	78fb      	ldrb	r3, [r7, #3]
 8003998:	2b46      	cmp	r3, #70	; 0x46
 800399a:	d803      	bhi.n	80039a4 <GPS_parseHex+0x3c>
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	3b37      	subs	r3, #55	; 0x37
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	e000      	b.n	80039a6 <GPS_parseHex+0x3e>
	// if (c > 'F')
	return 0;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <MPU_readByte>:
	print_int(data);
	println("");*/
	//i2c.write(address, data_write, 2, 0);
}
char MPU_readByte(uint8_t address, uint8_t subAddress)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b088      	sub	sp, #32
 80039b6:	af04      	add	r7, sp, #16
 80039b8:	4603      	mov	r3, r0
 80039ba:	460a      	mov	r2, r1
 80039bc:	71fb      	strb	r3, [r7, #7]
 80039be:	4613      	mov	r3, r2
 80039c0:	71bb      	strb	r3, [r7, #6]
	uint8_t data[1]; // `data` will store the register data


	//i2c.write(address, data_write, 1, 1); // no stop
	HAL_I2C_Mem_Read(Get_I2C1_Instance(), address, subAddress, 1, data, 1, 2);
 80039c2:	f010 fcc9 	bl	8014358 <Get_I2C1_Instance>
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	b299      	uxth	r1, r3
 80039ca:	79bb      	ldrb	r3, [r7, #6]
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	2302      	movs	r3, #2
 80039d0:	9302      	str	r3, [sp, #8]
 80039d2:	2301      	movs	r3, #1
 80039d4:	9301      	str	r3, [sp, #4]
 80039d6:	f107 030c 	add.w	r3, r7, #12
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	2301      	movs	r3, #1
 80039de:	f002 fc49 	bl	8006274 <HAL_I2C_Mem_Read>
	/*print("Read:");
	print_int(data[0]);
	println("");*/
	//i2c.read(address, data, 1, 0);

	return (char)data[0];
 80039e2:	7b3b      	ldrb	r3, [r7, #12]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <MPU_readBytes>:
void MPU_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t* dest)
{     
 80039ec:	b590      	push	{r4, r7, lr}
 80039ee:	b08d      	sub	sp, #52	; 0x34
 80039f0:	af04      	add	r7, sp, #16
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	4603      	mov	r3, r0
 80039f6:	71fb      	strb	r3, [r7, #7]
 80039f8:	460b      	mov	r3, r1
 80039fa:	71bb      	strb	r3, [r7, #6]
 80039fc:	4613      	mov	r3, r2
 80039fe:	717b      	strb	r3, [r7, #5]
	uint8_t data[14];

	HAL_I2C_Mem_Read(Get_I2C1_Instance(), address, subAddress, 1, data, count, 2);
 8003a00:	f010 fcaa 	bl	8014358 <Get_I2C1_Instance>
 8003a04:	4604      	mov	r4, r0
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	b299      	uxth	r1, r3
 8003a0a:	79bb      	ldrb	r3, [r7, #6]
 8003a0c:	b298      	uxth	r0, r3
 8003a0e:	797b      	ldrb	r3, [r7, #5]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2202      	movs	r2, #2
 8003a14:	9202      	str	r2, [sp, #8]
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	f107 030c 	add.w	r3, r7, #12
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	2301      	movs	r3, #1
 8003a20:	4602      	mov	r2, r0
 8003a22:	4620      	mov	r0, r4
 8003a24:	f002 fc26 	bl	8006274 <HAL_I2C_Mem_Read>

	/*
	i2c.write(address, data_write, 1, 1); // no stop
	i2c.read(address, data, count, 0);
	*/
	int ii = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61fb      	str	r3, [r7, #28]
	for(ii = 0; ii < count; ii++)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	e00b      	b.n	8003a4a <MPU_readBytes+0x5e>
	{
		dest[ii] = data[ii];
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	4413      	add	r3, r2
 8003a38:	f107 010c 	add.w	r1, r7, #12
 8003a3c:	69fa      	ldr	r2, [r7, #28]
 8003a3e:	440a      	add	r2, r1
 8003a40:	7812      	ldrb	r2, [r2, #0]
 8003a42:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	3301      	adds	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	797b      	ldrb	r3, [r7, #5]
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	dbef      	blt.n	8003a32 <MPU_readBytes+0x46>
	}
} 
 8003a52:	bf00      	nop
 8003a54:	3724      	adds	r7, #36	; 0x24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd90      	pop	{r4, r7, pc}

08003a5a <MPU_readAccelData>:
			break;
	}
}

void MPU_readAccelData(int16_t* destination)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z accel register data stored here
	MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
 8003a62:	f107 0308 	add.w	r3, r7, #8
 8003a66:	2206      	movs	r2, #6
 8003a68:	213b      	movs	r1, #59	; 0x3b
 8003a6a:	20d2      	movs	r0, #210	; 0xd2
 8003a6c:	f7ff ffbe 	bl	80039ec <MPU_readBytes>
	destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 8003a70:	7a3b      	ldrb	r3, [r7, #8]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	b21a      	sxth	r2, r3
 8003a76:	7a7b      	ldrb	r3, [r7, #9]
 8003a78:	b21b      	sxth	r3, r3
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	b21a      	sxth	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);  
 8003a82:	7abb      	ldrb	r3, [r7, #10]
 8003a84:	021b      	lsls	r3, r3, #8
 8003a86:	b219      	sxth	r1, r3
 8003a88:	7afb      	ldrb	r3, [r7, #11]
 8003a8a:	b21a      	sxth	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3302      	adds	r3, #2
 8003a90:	430a      	orrs	r2, r1
 8003a92:	b212      	sxth	r2, r2
 8003a94:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]); 
 8003a96:	7b3b      	ldrb	r3, [r7, #12]
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	b219      	sxth	r1, r3
 8003a9c:	7b7b      	ldrb	r3, [r7, #13]
 8003a9e:	b21a      	sxth	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	b212      	sxth	r2, r2
 8003aa8:	801a      	strh	r2, [r3, #0]
}
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <MPU_readGyroData>:
void MPU_readGyroData(int16_t* destination)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
 8003aba:	f107 0308 	add.w	r3, r7, #8
 8003abe:	2206      	movs	r2, #6
 8003ac0:	2143      	movs	r1, #67	; 0x43
 8003ac2:	20d2      	movs	r0, #210	; 0xd2
 8003ac4:	f7ff ff92 	bl	80039ec <MPU_readBytes>
	destination[0] = (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]);  // Turn the MSB and LSB into a signed 16-bit value
 8003ac8:	7a3b      	ldrb	r3, [r7, #8]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	b21a      	sxth	r2, r3
 8003ace:	7a7b      	ldrb	r3, [r7, #9]
 8003ad0:	b21b      	sxth	r3, r3
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	b21a      	sxth	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]);  
 8003ada:	7abb      	ldrb	r3, [r7, #10]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	b219      	sxth	r1, r3
 8003ae0:	7afb      	ldrb	r3, [r7, #11]
 8003ae2:	b21a      	sxth	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3302      	adds	r3, #2
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	b212      	sxth	r2, r2
 8003aec:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]); 
 8003aee:	7b3b      	ldrb	r3, [r7, #12]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	b219      	sxth	r1, r3
 8003af4:	7b7b      	ldrb	r3, [r7, #13]
 8003af6:	b21a      	sxth	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3304      	adds	r3, #4
 8003afc:	430a      	orrs	r2, r1
 8003afe:	b212      	sxth	r2, r2
 8003b00:	801a      	strh	r2, [r3, #0]
}
 8003b02:	bf00      	nop
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <MPU_readMagData>:
void MPU_readMagData(int16_t* destination)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if(MPU_readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01)
 8003b12:	2102      	movs	r1, #2
 8003b14:	2018      	movs	r0, #24
 8003b16:	f7ff ff4c 	bl	80039b2 <MPU_readByte>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d02a      	beq.n	8003b7a <MPU_readMagData+0x70>
	{ // wait for magnetometer data ready bit to be set
		MPU_readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
 8003b24:	f107 0308 	add.w	r3, r7, #8
 8003b28:	2207      	movs	r2, #7
 8003b2a:	2103      	movs	r1, #3
 8003b2c:	2018      	movs	r0, #24
 8003b2e:	f7ff ff5d 	bl	80039ec <MPU_readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 8003b32:	7bbb      	ldrb	r3, [r7, #14]
 8003b34:	73fb      	strb	r3, [r7, #15]
		if(!(c & 0x08))
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d11c      	bne.n	8003b7a <MPU_readMagData+0x70>
		{ // Check if magnetic sensor overflow set, if not then report data
			destination[0] = (int16_t)(((int16_t)rawData[1] << 8) | rawData[0]);  // Turn the MSB and LSB into a signed 16-bit value
 8003b40:	7a7b      	ldrb	r3, [r7, #9]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	b21a      	sxth	r2, r3
 8003b46:	7a3b      	ldrb	r3, [r7, #8]
 8003b48:	b21b      	sxth	r3, r3
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	b21a      	sxth	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	801a      	strh	r2, [r3, #0]
			destination[1] = (int16_t)(((int16_t)rawData[3] << 8) | rawData[2]);  // Data stored as little Endian
 8003b52:	7afb      	ldrb	r3, [r7, #11]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	b219      	sxth	r1, r3
 8003b58:	7abb      	ldrb	r3, [r7, #10]
 8003b5a:	b21a      	sxth	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3302      	adds	r3, #2
 8003b60:	430a      	orrs	r2, r1
 8003b62:	b212      	sxth	r2, r2
 8003b64:	801a      	strh	r2, [r3, #0]
			destination[2] = (int16_t)(((int16_t)rawData[5] << 8) | rawData[4]); 
 8003b66:	7b7b      	ldrb	r3, [r7, #13]
 8003b68:	021b      	lsls	r3, r3, #8
 8003b6a:	b219      	sxth	r1, r3
 8003b6c:	7b3b      	ldrb	r3, [r7, #12]
 8003b6e:	b21a      	sxth	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	430a      	orrs	r2, r1
 8003b76:	b212      	sxth	r2, r2
 8003b78:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <MadgwickQuaternionUpdate>:
	dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
	dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
}

void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b0b2      	sub	sp, #200	; 0xc8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8003b8e:	edc7 0a08 	vstr	s1, [r7, #32]
 8003b92:	ed87 1a07 	vstr	s2, [r7, #28]
 8003b96:	edc7 1a06 	vstr	s3, [r7, #24]
 8003b9a:	ed87 2a05 	vstr	s4, [r7, #20]
 8003b9e:	edc7 2a04 	vstr	s5, [r7, #16]
 8003ba2:	ed87 3a03 	vstr	s6, [r7, #12]
 8003ba6:	edc7 3a02 	vstr	s7, [r7, #8]
 8003baa:	ed87 4a01 	vstr	s8, [r7, #4]
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 8003bae:	4b7a      	ldr	r3, [pc, #488]	; (8003d98 <MadgwickQuaternionUpdate+0x214>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bb6:	4b78      	ldr	r3, [pc, #480]	; (8003d98 <MadgwickQuaternionUpdate+0x214>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bbe:	4b76      	ldr	r3, [pc, #472]	; (8003d98 <MadgwickQuaternionUpdate+0x214>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003bc6:	4b74      	ldr	r3, [pc, #464]	; (8003d98 <MadgwickQuaternionUpdate+0x214>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0f * q1;
 8003bce:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003bd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bd6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	float _2q2 = 2.0f * q2;
 8003bda:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003bde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003be2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	float _2q3 = 2.0f * q3;
 8003be6:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003bea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bee:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	float _2q4 = 2.0f * q4;
 8003bf2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003bf6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bfa:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	float _2q1q3 = 2.0f * q1 * q3;
 8003bfe:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003c02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c06:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8003c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c0e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	float _2q3q4 = 2.0f * q3 * q4;
 8003c12:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003c16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c1a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c22:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	float q1q1 = q1 * q1;
 8003c26:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8003c2a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c32:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	float q1q2 = q1 * q2;
 8003c36:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8003c3a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c42:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float q1q3 = q1 * q3;
 8003c46:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8003c4a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c52:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	float q1q4 = q1 * q4;
 8003c56:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8003c5a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c62:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float q2q2 = q2 * q2;
 8003c66:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8003c6a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c72:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float q2q3 = q2 * q3;
 8003c76:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8003c7a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c82:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float q2q4 = q2 * q4;
 8003c86:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8003c8a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c92:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float q3q3 = q3 * q3;
 8003c96:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8003c9a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float q3q4 = q3 * q4;
 8003ca6:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8003caa:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb2:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float q4q4 = q4 * q4;
 8003cb6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003cba:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	// Normalise accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
 8003cc6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003cca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003cce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cd2:	edd7 6a08 	vldr	s13, [r7, #32]
 8003cd6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003cda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ce6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf6:	f015 fda5 	bl	8019844 <sqrtf>
 8003cfa:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	if (norm == 0.0f) return; // handle NaN
 8003cfe:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003d02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0a:	f000 85cc 	beq.w	80048a6 <MadgwickQuaternionUpdate+0xd22>
	norm = 1.0f/norm;
 8003d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d12:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8003d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d1a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	ax *= norm;
 8003d1e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003d22:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	ay *= norm;
 8003d2e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003d32:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3a:	edc7 7a08 	vstr	s15, [r7, #32]
	az *= norm;
 8003d3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d42:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4a:	edc7 7a07 	vstr	s15, [r7, #28]

	// Normalise magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
 8003d4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d52:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d5a:	edd7 6a02 	vldr	s13, [r7, #8]
 8003d5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d6a:	edd7 6a01 	vldr	s13, [r7, #4]
 8003d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d7e:	f015 fd61 	bl	8019844 <sqrtf>
 8003d82:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	if (norm == 0.0f) return; // handle NaN
 8003d86:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003d8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d92:	f000 858a 	beq.w	80048aa <MadgwickQuaternionUpdate+0xd26>
 8003d96:	e001      	b.n	8003d9c <MadgwickQuaternionUpdate+0x218>
 8003d98:	200031f8 	.word	0x200031f8
	norm = 1.0f/norm;
 8003d9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003da0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8003da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003da8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	mx *= norm;
 8003dac:	ed97 7a03 	vldr	s14, [r7, #12]
 8003db0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db8:	edc7 7a03 	vstr	s15, [r7, #12]
	my *= norm;
 8003dbc:	ed97 7a02 	vldr	s14, [r7, #8]
 8003dc0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc8:	edc7 7a02 	vstr	s15, [r7, #8]
	mz *= norm;
 8003dcc:	ed97 7a01 	vldr	s14, [r7, #4]
 8003dd0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd8:	edc7 7a01 	vstr	s15, [r7, #4]

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
 8003ddc:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003de0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003de4:	ed97 7a03 	vldr	s14, [r7, #12]
 8003de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dec:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	_2q1my = 2.0f * q1 * my;
 8003df0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003df4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003df8:	ed97 7a02 	vldr	s14, [r7, #8]
 8003dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e00:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	_2q1mz = 2.0f * q1 * mz;
 8003e04:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003e08:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e14:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q2mx = 2.0f * q2 * mx;
 8003e18:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003e1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e20:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e28:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8003e2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e30:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003e34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e38:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8003e3c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e48:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8003e4c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e58:	edd7 6a03 	vldr	s13, [r7, #12]
 8003e5c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e68:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8003e6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e70:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e74:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e80:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8003e84:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e8c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e98:	edd7 6a03 	vldr	s13, [r7, #12]
 8003e9c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ea4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ea8:	edd7 6a03 	vldr	s13, [r7, #12]
 8003eac:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eb8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8003ebc:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8003ec0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ec8:	edd7 6a02 	vldr	s13, [r7, #8]
 8003ecc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ed8:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8003edc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ee4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ee8:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8003eec:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ef4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ef8:	edd7 6a02 	vldr	s13, [r7, #8]
 8003efc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f08:	edd7 6a02 	vldr	s13, [r7, #8]
 8003f0c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f18:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8003f1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f24:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f30:	edd7 6a02 	vldr	s13, [r7, #8]
 8003f34:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f40:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_2bx = sqrtf(hx * hx + hy * hy);
 8003f44:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003f48:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003f4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f50:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8003f54:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f60:	eeb0 0a67 	vmov.f32	s0, s15
 8003f64:	f015 fc6e 	bl	8019844 <sqrtf>
 8003f68:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8003f6c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003f70:	eeb1 7a67 	vneg.f32	s14, s15
 8003f74:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003f78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f7c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8003f80:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f8c:	edd7 6a01 	vldr	s13, [r7, #4]
 8003f90:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f9c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8003fa0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003fa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fac:	edd7 6a01 	vldr	s13, [r7, #4]
 8003fb0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fbc:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8003fc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003fc8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fd4:	edd7 6a01 	vldr	s13, [r7, #4]
 8003fd8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003fdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fe0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fe4:	edd7 6a01 	vldr	s13, [r7, #4]
 8003fe8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8003fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ff4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4bx = 2.0f * _2bx;
 8003ff8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003ffc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004000:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_4bz = 2.0f * _2bz;
 8004004:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004008:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800400c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8004010:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004014:	eeb1 7a67 	vneg.f32	s14, s15
 8004018:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800401c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004020:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004024:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004028:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800402c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004030:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004034:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8004038:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800403c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004040:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004044:	edd7 7a08 	vldr	s15, [r7, #32]
 8004048:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800404c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004054:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004058:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800405c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004060:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004064:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004068:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800406c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004070:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004074:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004078:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800407c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004080:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8004084:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8004088:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800408c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004090:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004094:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004098:	edd7 7a03 	vldr	s15, [r7, #12]
 800409c:	ee76 7a67 	vsub.f32	s15, s12, s15
 80040a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040a8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80040ac:	eef1 6a67 	vneg.f32	s13, s15
 80040b0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80040b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040b8:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80040bc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80040c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80040c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80040c8:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80040cc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80040d0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80040d4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80040d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80040dc:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80040e0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80040e4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80040e8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80040ec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80040f0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80040f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80040f8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80040fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004100:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004104:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8004108:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800410c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004110:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8004114:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004118:	ee36 6a27 	vadd.f32	s12, s12, s15
 800411c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004120:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004124:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8004128:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800412c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004130:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004134:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004138:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800413c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004140:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004144:	edd7 7a01 	vldr	s15, [r7, #4]
 8004148:	ee76 7a67 	vsub.f32	s15, s12, s15
 800414c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004154:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8004158:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800415c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004160:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004164:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004168:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800416c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004170:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004178:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800417c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004180:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004184:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004188:	edd7 7a08 	vldr	s15, [r7, #32]
 800418c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004190:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8004194:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004198:	ee37 7a27 	vadd.f32	s14, s14, s15
 800419c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80041a0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80041a4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80041a8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80041ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041b0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80041b4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80041b8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80041bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041c0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80041c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80041c8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80041cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041d4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80041d8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80041dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041e0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80041e4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80041e8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80041ec:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80041f0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80041f4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80041f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80041fc:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8004200:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8004204:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004208:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800420c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004210:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004214:	edd7 7a03 	vldr	s15, [r7, #12]
 8004218:	ee76 7a67 	vsub.f32	s15, s12, s15
 800421c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004220:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004224:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8004228:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800422c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004230:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8004234:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004238:	ee66 7a27 	vmul.f32	s15, s12, s15
 800423c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004240:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8004244:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8004248:	ee36 6a67 	vsub.f32	s12, s12, s15
 800424c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004250:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004254:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8004258:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800425c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8004260:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004264:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004268:	ee36 6a27 	vadd.f32	s12, s12, s15
 800426c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004270:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004278:	ee37 7a27 	vadd.f32	s14, s14, s15
 800427c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8004280:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004284:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004288:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 800428c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004290:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004294:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004298:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 800429c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80042a0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80042a4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80042a8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80042ac:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80042b0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80042b4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80042b8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80042bc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80042c0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80042c4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80042c8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80042cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80042d0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80042d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042dc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80042e0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80042e4:	eeb1 7a67 	vneg.f32	s14, s15
 80042e8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80042ec:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80042f0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80042f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80042f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80042fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004300:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004304:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8004308:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800430c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004310:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004314:	edd7 7a08 	vldr	s15, [r7, #32]
 8004318:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800431c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004324:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004328:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800432c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004330:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004334:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004338:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800433c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004340:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004344:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004348:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800434c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004350:	edd7 7a07 	vldr	s15, [r7, #28]
 8004354:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800435c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004360:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004364:	eef1 6a67 	vneg.f32	s13, s15
 8004368:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800436c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004370:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8004374:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004378:	ee66 7a27 	vmul.f32	s15, s12, s15
 800437c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004380:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004384:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8004388:	ee36 6a67 	vsub.f32	s12, s12, s15
 800438c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004390:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004394:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004398:	ee26 6a27 	vmul.f32	s12, s12, s15
 800439c:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 80043a0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80043a4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80043a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80043ac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80043b0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80043b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80043b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80043bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043c4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80043c8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80043cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80043d0:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80043d4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80043d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80043dc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80043e0:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80043e4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80043e8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80043ec:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80043f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80043f4:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80043f8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80043fc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8004400:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004404:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004408:	ee36 6a27 	vadd.f32	s12, s12, s15
 800440c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004410:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004418:	ee37 7a27 	vadd.f32	s14, s14, s15
 800441c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8004420:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004424:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004428:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 800442c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004430:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004434:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004438:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 800443c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004440:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004444:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004448:	ee26 6a27 	vmul.f32	s12, s12, s15
 800444c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8004450:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004454:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004458:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800445c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8004460:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004464:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004468:	ee36 6a27 	vadd.f32	s12, s12, s15
 800446c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004470:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800447c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8004480:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004484:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004488:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800448c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004490:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004494:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004498:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800449c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044a0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80044a4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80044a8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80044ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80044b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80044b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80044b8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80044bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044c4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80044c8:	eef1 6a67 	vneg.f32	s13, s15
 80044cc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80044d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80044d4:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80044d8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80044dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80044e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80044e4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80044e8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80044ec:	ee36 6a67 	vsub.f32	s12, s12, s15
 80044f0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80044f4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80044f8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80044fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004500:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8004504:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8004508:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800450c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004510:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004514:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004518:	edd7 7a03 	vldr	s15, [r7, #12]
 800451c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004524:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004528:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800452c:	eef1 6a67 	vneg.f32	s13, s15
 8004530:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8004534:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004538:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800453c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004540:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004544:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004548:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 800454c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8004550:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004554:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004558:	ee26 6a27 	vmul.f32	s12, s12, s15
 800455c:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8004560:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8004564:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8004568:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800456c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004570:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004574:	edd7 7a02 	vldr	s15, [r7, #8]
 8004578:	ee76 7a67 	vsub.f32	s15, s12, s15
 800457c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004580:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004584:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8004588:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800458c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004590:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8004594:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004598:	ee36 6a27 	vadd.f32	s12, s12, s15
 800459c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80045a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80045a4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80045a8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80045ac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80045b0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80045b4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80045b8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80045bc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80045c0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80045c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80045c8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80045cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045d4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 80045d8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80045dc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80045e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045e4:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80045e8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80045ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045f4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80045f8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80045fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004600:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004604:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8004608:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800460c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004614:	eeb0 0a67 	vmov.f32	s0, s15
 8004618:	f015 f914 	bl	8019844 <sqrtf>
 800461c:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	norm = 1.0f/norm;
 8004620:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004624:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8004628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800462c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	s1 *= norm;
 8004630:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004634:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	s2 *= norm;
 8004640:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004644:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	s3 *= norm;
 8004650:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004654:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	s4 *= norm;
 8004660:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004664:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Compute rate of change of quaternion
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8004670:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004674:	eeb1 7a67 	vneg.f32	s14, s15
 8004678:	edd7 7a06 	vldr	s15, [r7, #24]
 800467c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004680:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8004684:	edd7 7a05 	vldr	s15, [r7, #20]
 8004688:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800468c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004690:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8004694:	edd7 7a04 	vldr	s15, [r7, #16]
 8004698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800469c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80046a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80046a8:	4b82      	ldr	r3, [pc, #520]	; (80048b4 <MadgwickQuaternionUpdate+0xd30>)
 80046aa:	edd3 6a00 	vldr	s13, [r3]
 80046ae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80046b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ba:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 80046be:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80046c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80046c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046ca:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80046ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80046d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046da:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80046de:	edd7 7a05 	vldr	s15, [r7, #20]
 80046e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80046ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80046f2:	4b70      	ldr	r3, [pc, #448]	; (80048b4 <MadgwickQuaternionUpdate+0xd30>)
 80046f4:	edd3 6a00 	vldr	s13, [r3]
 80046f8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80046fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004704:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 8004708:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800470c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004714:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8004718:	edd7 7a04 	vldr	s15, [r7, #16]
 800471c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004720:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004724:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8004728:	edd7 7a06 	vldr	s15, [r7, #24]
 800472c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004734:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004738:	ee27 7a87 	vmul.f32	s14, s15, s14
 800473c:	4b5d      	ldr	r3, [pc, #372]	; (80048b4 <MadgwickQuaternionUpdate+0xd30>)
 800473e:	edd3 6a00 	vldr	s13, [r3]
 8004742:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800474a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800474e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8004752:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004756:	edd7 7a04 	vldr	s15, [r7, #16]
 800475a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800475e:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8004762:	edd7 7a05 	vldr	s15, [r7, #20]
 8004766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800476a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800476e:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8004772:	edd7 7a06 	vldr	s15, [r7, #24]
 8004776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800477a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800477e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004782:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004786:	4b4b      	ldr	r3, [pc, #300]	; (80048b4 <MadgwickQuaternionUpdate+0xd30>)
 8004788:	edd3 6a00 	vldr	s13, [r3]
 800478c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004798:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Integrate to yield quaternion
	q1 += qDot1 * deltat;
 800479c:	4b46      	ldr	r3, [pc, #280]	; (80048b8 <MadgwickQuaternionUpdate+0xd34>)
 800479e:	ed93 7a00 	vldr	s14, [r3]
 80047a2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80047a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047aa:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80047ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047b2:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	q2 += qDot2 * deltat;
 80047b6:	4b40      	ldr	r3, [pc, #256]	; (80048b8 <MadgwickQuaternionUpdate+0xd34>)
 80047b8:	ed93 7a00 	vldr	s14, [r3]
 80047bc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80047c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c4:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80047c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047cc:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	q3 += qDot3 * deltat;
 80047d0:	4b39      	ldr	r3, [pc, #228]	; (80048b8 <MadgwickQuaternionUpdate+0xd34>)
 80047d2:	ed93 7a00 	vldr	s14, [r3]
 80047d6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80047da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047de:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80047e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047e6:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	q4 += qDot4 * deltat;
 80047ea:	4b33      	ldr	r3, [pc, #204]	; (80048b8 <MadgwickQuaternionUpdate+0xd34>)
 80047ec:	ed93 7a00 	vldr	s14, [r3]
 80047f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80047f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f8:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80047fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004800:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8004804:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004808:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800480c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004810:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8004814:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8004818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800481c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004820:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8004824:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8004828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800482c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004830:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8004834:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800483c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004840:	eeb0 0a67 	vmov.f32	s0, s15
 8004844:	f014 fffe 	bl	8019844 <sqrtf>
 8004848:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	norm = 1.0f/norm;
 800484c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004850:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8004854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004858:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q[0] = q1 * norm;
 800485c:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8004860:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004868:	4b14      	ldr	r3, [pc, #80]	; (80048bc <MadgwickQuaternionUpdate+0xd38>)
 800486a:	edc3 7a00 	vstr	s15, [r3]
	q[1] = q2 * norm;
 800486e:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8004872:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487a:	4b10      	ldr	r3, [pc, #64]	; (80048bc <MadgwickQuaternionUpdate+0xd38>)
 800487c:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] = q3 * norm;
 8004880:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8004884:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8004888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <MadgwickQuaternionUpdate+0xd38>)
 800488e:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] = q4 * norm;
 8004892:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004896:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800489a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489e:	4b07      	ldr	r3, [pc, #28]	; (80048bc <MadgwickQuaternionUpdate+0xd38>)
 80048a0:	edc3 7a03 	vstr	s15, [r3, #12]
 80048a4:	e002      	b.n	80048ac <MadgwickQuaternionUpdate+0xd28>
	if (norm == 0.0f) return; // handle NaN
 80048a6:	bf00      	nop
 80048a8:	e000      	b.n	80048ac <MadgwickQuaternionUpdate+0xd28>
	if (norm == 0.0f) return; // handle NaN
 80048aa:	bf00      	nop

}
 80048ac:	37c8      	adds	r7, #200	; 0xc8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	200031ac 	.word	0x200031ac
 80048b8:	200031e0 	.word	0x200031e0
 80048bc:	200031f8 	.word	0x200031f8

080048c0 <millis>:
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	4a04      	ldr	r2, [pc, #16]	; (80048dc <millis+0x1c>)
 80048cc:	fba2 2303 	umull	r2, r3, r2, r3
 80048d0:	099b      	lsrs	r3, r3, #6
 80048d2:	4618      	mov	r0, r3
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	10624dd3 	.word	0x10624dd3

080048e0 <getTime>:
	rtc_date.Date = dateTime->dayM;
	if (HAL_RTC_SetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN) != HAL_OK) return false;
}

static inline DateTime getTime(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08c      	sub	sp, #48	; 0x30
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 80048e8:	f107 031c 	add.w	r3, r7, #28
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	605a      	str	r2, [r3, #4]
 80048f2:	609a      	str	r2, [r3, #8]
 80048f4:	60da      	str	r2, [r3, #12]
 80048f6:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 80048f8:	2300      	movs	r3, #0
 80048fa:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 80048fc:	f107 030c 	add.w	r3, r7, #12
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	605a      	str	r2, [r3, #4]
 8004906:	811a      	strh	r2, [r3, #8]

	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 8004908:	f00f fd44 	bl	8014394 <Get_RTC_Instance>
 800490c:	f107 031c 	add.w	r3, r7, #28
 8004910:	2200      	movs	r2, #0
 8004912:	4619      	mov	r1, r3
 8004914:	f004 f913 	bl	8008b3e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 8004918:	f00f fd3c 	bl	8014394 <Get_RTC_Instance>
 800491c:	f107 0318 	add.w	r3, r7, #24
 8004920:	2200      	movs	r2, #0
 8004922:	4619      	mov	r1, r3
 8004924:	f004 f969 	bl	8008bfa <HAL_RTC_GetDate>

	toReturn.year = rtc_date.Year;
 8004928:	7efb      	ldrb	r3, [r7, #27]
 800492a:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 800492c:	7e7b      	ldrb	r3, [r7, #25]
 800492e:	737b      	strb	r3, [r7, #13]
	//toReturn.dayY = rtc_date.
	toReturn.dayM = rtc_date.Date;
 8004930:	7ebb      	ldrb	r3, [r7, #26]
 8004932:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8004934:	7e3b      	ldrb	r3, [r7, #24]
 8004936:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 8004938:	7f3b      	ldrb	r3, [r7, #28]
 800493a:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 800493c:	7f7b      	ldrb	r3, [r7, #29]
 800493e:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 8004940:	7fbb      	ldrb	r3, [r7, #30]
 8004942:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 8004944:	f7ff ffbc 	bl	80048c0 <millis>
 8004948:	4602      	mov	r2, r0
 800494a:	4b0c      	ldr	r3, [pc, #48]	; (800497c <getTime+0x9c>)
 800494c:	fba3 1302 	umull	r1, r3, r3, r2
 8004950:	099b      	lsrs	r3, r3, #6
 8004952:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	b29b      	uxth	r3, r3
 800495e:	82bb      	strh	r3, [r7, #20]

	return toReturn;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	461a      	mov	r2, r3
 8004964:	f107 030c 	add.w	r3, r7, #12
 8004968:	cb03      	ldmia	r3!, {r0, r1}
 800496a:	6010      	str	r0, [r2, #0]
 800496c:	6051      	str	r1, [r2, #4]
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	8113      	strh	r3, [r2, #8]
}
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	3730      	adds	r7, #48	; 0x30
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	10624dd3 	.word	0x10624dd3

08004980 <log_new>:
#include "motors.h"
#include "sx1278.h"
#include "run.h"

void log_new()
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af02      	add	r7, sp, #8
	DateTime now = getTime();
 8004986:	1d3b      	adds	r3, r7, #4
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff ffa9 	bl	80048e0 <getTime>
	sprintf(directoryName, "/%02d%02d%02d%02d", now.hour, now.minute, now.dayM, now.month);
 800498e:	7a3b      	ldrb	r3, [r7, #8]
 8004990:	4619      	mov	r1, r3
 8004992:	7a7b      	ldrb	r3, [r7, #9]
 8004994:	4618      	mov	r0, r3
 8004996:	79bb      	ldrb	r3, [r7, #6]
 8004998:	797a      	ldrb	r2, [r7, #5]
 800499a:	9201      	str	r2, [sp, #4]
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	4603      	mov	r3, r0
 80049a0:	460a      	mov	r2, r1
 80049a2:	4957      	ldr	r1, [pc, #348]	; (8004b00 <log_new+0x180>)
 80049a4:	4857      	ldr	r0, [pc, #348]	; (8004b04 <log_new+0x184>)
 80049a6:	f011 ff75 	bl	8016894 <siprintf>
	sprintf(directoryNameCopy, directoryName);
 80049aa:	4956      	ldr	r1, [pc, #344]	; (8004b04 <log_new+0x184>)
 80049ac:	4856      	ldr	r0, [pc, #344]	; (8004b08 <log_new+0x188>)
 80049ae:	f011 ff71 	bl	8016894 <siprintf>

	SD_init();
 80049b2:	f7fc fc61 	bl	8001278 <SD_init>
	SD_newDirectory((char*)directoryName);
 80049b6:	4853      	ldr	r0, [pc, #332]	; (8004b04 <log_new+0x184>)
 80049b8:	f7fc fcfa 	bl	80013b0 <SD_newDirectory>
	SD_newFile(strcat(directoryName, "/LOG.TXT"));
 80049bc:	4851      	ldr	r0, [pc, #324]	; (8004b04 <log_new+0x184>)
 80049be:	f7fb fc11 	bl	80001e4 <strlen>
 80049c2:	4603      	mov	r3, r0
 80049c4:	461a      	mov	r2, r3
 80049c6:	4b4f      	ldr	r3, [pc, #316]	; (8004b04 <log_new+0x184>)
 80049c8:	4413      	add	r3, r2
 80049ca:	4950      	ldr	r1, [pc, #320]	; (8004b0c <log_new+0x18c>)
 80049cc:	461a      	mov	r2, r3
 80049ce:	460b      	mov	r3, r1
 80049d0:	cb03      	ldmia	r3!, {r0, r1}
 80049d2:	6010      	str	r0, [r2, #0]
 80049d4:	6051      	str	r1, [r2, #4]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	7213      	strb	r3, [r2, #8]
 80049da:	4b4a      	ldr	r3, [pc, #296]	; (8004b04 <log_new+0x184>)
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fc fc87 	bl	80012f0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 80049e2:	4949      	ldr	r1, [pc, #292]	; (8004b08 <log_new+0x188>)
 80049e4:	4847      	ldr	r0, [pc, #284]	; (8004b04 <log_new+0x184>)
 80049e6:	f011 ff55 	bl	8016894 <siprintf>
	SD_newFile(strcat(directoryName, "/BMP.TXT"));
 80049ea:	4846      	ldr	r0, [pc, #280]	; (8004b04 <log_new+0x184>)
 80049ec:	f7fb fbfa 	bl	80001e4 <strlen>
 80049f0:	4603      	mov	r3, r0
 80049f2:	461a      	mov	r2, r3
 80049f4:	4b43      	ldr	r3, [pc, #268]	; (8004b04 <log_new+0x184>)
 80049f6:	4413      	add	r3, r2
 80049f8:	4945      	ldr	r1, [pc, #276]	; (8004b10 <log_new+0x190>)
 80049fa:	461a      	mov	r2, r3
 80049fc:	460b      	mov	r3, r1
 80049fe:	cb03      	ldmia	r3!, {r0, r1}
 8004a00:	6010      	str	r0, [r2, #0]
 8004a02:	6051      	str	r1, [r2, #4]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	7213      	strb	r3, [r2, #8]
 8004a08:	4b3e      	ldr	r3, [pc, #248]	; (8004b04 <log_new+0x184>)
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fc fc70 	bl	80012f0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8004a10:	493d      	ldr	r1, [pc, #244]	; (8004b08 <log_new+0x188>)
 8004a12:	483c      	ldr	r0, [pc, #240]	; (8004b04 <log_new+0x184>)
 8004a14:	f011 ff3e 	bl	8016894 <siprintf>
	SD_newFile(strcat(directoryName, "/GPS.TXT"));
 8004a18:	483a      	ldr	r0, [pc, #232]	; (8004b04 <log_new+0x184>)
 8004a1a:	f7fb fbe3 	bl	80001e4 <strlen>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	461a      	mov	r2, r3
 8004a22:	4b38      	ldr	r3, [pc, #224]	; (8004b04 <log_new+0x184>)
 8004a24:	4413      	add	r3, r2
 8004a26:	493b      	ldr	r1, [pc, #236]	; (8004b14 <log_new+0x194>)
 8004a28:	461a      	mov	r2, r3
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	cb03      	ldmia	r3!, {r0, r1}
 8004a2e:	6010      	str	r0, [r2, #0]
 8004a30:	6051      	str	r1, [r2, #4]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	7213      	strb	r3, [r2, #8]
 8004a36:	4b33      	ldr	r3, [pc, #204]	; (8004b04 <log_new+0x184>)
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fc fc59 	bl	80012f0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8004a3e:	4932      	ldr	r1, [pc, #200]	; (8004b08 <log_new+0x188>)
 8004a40:	4830      	ldr	r0, [pc, #192]	; (8004b04 <log_new+0x184>)
 8004a42:	f011 ff27 	bl	8016894 <siprintf>
	SD_newFile(strcat(directoryName, "/IMU.TXT"));
 8004a46:	482f      	ldr	r0, [pc, #188]	; (8004b04 <log_new+0x184>)
 8004a48:	f7fb fbcc 	bl	80001e4 <strlen>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	461a      	mov	r2, r3
 8004a50:	4b2c      	ldr	r3, [pc, #176]	; (8004b04 <log_new+0x184>)
 8004a52:	4413      	add	r3, r2
 8004a54:	4930      	ldr	r1, [pc, #192]	; (8004b18 <log_new+0x198>)
 8004a56:	461a      	mov	r2, r3
 8004a58:	460b      	mov	r3, r1
 8004a5a:	cb03      	ldmia	r3!, {r0, r1}
 8004a5c:	6010      	str	r0, [r2, #0]
 8004a5e:	6051      	str	r1, [r2, #4]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	7213      	strb	r3, [r2, #8]
 8004a64:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <log_new+0x184>)
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fc fc42 	bl	80012f0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8004a6c:	4926      	ldr	r1, [pc, #152]	; (8004b08 <log_new+0x188>)
 8004a6e:	4825      	ldr	r0, [pc, #148]	; (8004b04 <log_new+0x184>)
 8004a70:	f011 ff10 	bl	8016894 <siprintf>
	SD_newFile(strcat(directoryName, "/MOT.TXT"));
 8004a74:	4823      	ldr	r0, [pc, #140]	; (8004b04 <log_new+0x184>)
 8004a76:	f7fb fbb5 	bl	80001e4 <strlen>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4b21      	ldr	r3, [pc, #132]	; (8004b04 <log_new+0x184>)
 8004a80:	4413      	add	r3, r2
 8004a82:	4926      	ldr	r1, [pc, #152]	; (8004b1c <log_new+0x19c>)
 8004a84:	461a      	mov	r2, r3
 8004a86:	460b      	mov	r3, r1
 8004a88:	cb03      	ldmia	r3!, {r0, r1}
 8004a8a:	6010      	str	r0, [r2, #0]
 8004a8c:	6051      	str	r1, [r2, #4]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	7213      	strb	r3, [r2, #8]
 8004a92:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <log_new+0x184>)
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fc fc2b 	bl	80012f0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8004a9a:	491b      	ldr	r1, [pc, #108]	; (8004b08 <log_new+0x188>)
 8004a9c:	4819      	ldr	r0, [pc, #100]	; (8004b04 <log_new+0x184>)
 8004a9e:	f011 fef9 	bl	8016894 <siprintf>
	SD_newFile(strcat(directoryName, "/RADIO.TXT"));
 8004aa2:	4818      	ldr	r0, [pc, #96]	; (8004b04 <log_new+0x184>)
 8004aa4:	f7fb fb9e 	bl	80001e4 <strlen>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	461a      	mov	r2, r3
 8004aac:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <log_new+0x184>)
 8004aae:	4413      	add	r3, r2
 8004ab0:	491b      	ldr	r1, [pc, #108]	; (8004b20 <log_new+0x1a0>)
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	cb03      	ldmia	r3!, {r0, r1}
 8004ab8:	6010      	str	r0, [r2, #0]
 8004aba:	6051      	str	r1, [r2, #4]
 8004abc:	8819      	ldrh	r1, [r3, #0]
 8004abe:	789b      	ldrb	r3, [r3, #2]
 8004ac0:	8111      	strh	r1, [r2, #8]
 8004ac2:	7293      	strb	r3, [r2, #10]
 8004ac4:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <log_new+0x184>)
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fc fc12 	bl	80012f0 <SD_newFile>
	sprintf(directoryName, directoryNameCopy);
 8004acc:	490e      	ldr	r1, [pc, #56]	; (8004b08 <log_new+0x188>)
 8004ace:	480d      	ldr	r0, [pc, #52]	; (8004b04 <log_new+0x184>)
 8004ad0:	f011 fee0 	bl	8016894 <siprintf>

	logBufferIndex = 0;
 8004ad4:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <log_new+0x1a4>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 8004ada:	4b13      	ldr	r3, [pc, #76]	; (8004b28 <log_new+0x1a8>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 8004ae0:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <log_new+0x1ac>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 8004ae6:	4b12      	ldr	r3, [pc, #72]	; (8004b30 <log_new+0x1b0>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 8004aec:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <log_new+0x1b4>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 8004af2:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <log_new+0x1b8>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	801a      	strh	r2, [r3, #0]
}
 8004af8:	bf00      	nop
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	0801b7e4 	.word	0x0801b7e4
 8004b04:	200062a0 	.word	0x200062a0
 8004b08:	20004230 	.word	0x20004230
 8004b0c:	0801b7f8 	.word	0x0801b7f8
 8004b10:	0801b804 	.word	0x0801b804
 8004b14:	0801b810 	.word	0x0801b810
 8004b18:	0801b81c 	.word	0x0801b81c
 8004b1c:	0801b828 	.word	0x0801b828
 8004b20:	0801b834 	.word	0x0801b834
 8004b24:	200062c4 	.word	0x200062c4
 8004b28:	200062c2 	.word	0x200062c2
 8004b2c:	20004e9c 	.word	0x20004e9c
 8004b30:	200062c6 	.word	0x200062c6
 8004b34:	20004a98 	.word	0x20004a98
 8004b38:	20004a74 	.word	0x20004a74

08004b3c <log_save>:

void log_save()
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
	//__disable_irq();


	if (logBufferIndex > 0)
 8004b40:	4b7c      	ldr	r3, [pc, #496]	; (8004d34 <log_save+0x1f8>)
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01b      	beq.n	8004b80 <log_save+0x44>
	{
		sprintf(openedPath, strcat(directoryName, "/LOG.TXT"));
 8004b48:	487b      	ldr	r0, [pc, #492]	; (8004d38 <log_save+0x1fc>)
 8004b4a:	f7fb fb4b 	bl	80001e4 <strlen>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	461a      	mov	r2, r3
 8004b52:	4b79      	ldr	r3, [pc, #484]	; (8004d38 <log_save+0x1fc>)
 8004b54:	4413      	add	r3, r2
 8004b56:	4979      	ldr	r1, [pc, #484]	; (8004d3c <log_save+0x200>)
 8004b58:	461a      	mov	r2, r3
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	cb03      	ldmia	r3!, {r0, r1}
 8004b5e:	6010      	str	r0, [r2, #0]
 8004b60:	6051      	str	r1, [r2, #4]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	7213      	strb	r3, [r2, #8]
 8004b66:	4b74      	ldr	r3, [pc, #464]	; (8004d38 <log_save+0x1fc>)
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4875      	ldr	r0, [pc, #468]	; (8004d40 <log_save+0x204>)
 8004b6c:	f011 fe92 	bl	8016894 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8004b70:	4974      	ldr	r1, [pc, #464]	; (8004d44 <log_save+0x208>)
 8004b72:	4871      	ldr	r0, [pc, #452]	; (8004d38 <log_save+0x1fc>)
 8004b74:	f011 fe8e 	bl	8016894 <siprintf>
		SD_writeToFile(openedPath, logBuffer);
 8004b78:	4973      	ldr	r1, [pc, #460]	; (8004d48 <log_save+0x20c>)
 8004b7a:	4871      	ldr	r0, [pc, #452]	; (8004d40 <log_save+0x204>)
 8004b7c:	f7fc fbe0 	bl	8001340 <SD_writeToFile>
	}

	if (bmpBufferIndex > 0)
 8004b80:	4b72      	ldr	r3, [pc, #456]	; (8004d4c <log_save+0x210>)
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01b      	beq.n	8004bc0 <log_save+0x84>
	{
		sprintf(openedPath, strcat(directoryName, "/BMP.TXT"));
 8004b88:	486b      	ldr	r0, [pc, #428]	; (8004d38 <log_save+0x1fc>)
 8004b8a:	f7fb fb2b 	bl	80001e4 <strlen>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	461a      	mov	r2, r3
 8004b92:	4b69      	ldr	r3, [pc, #420]	; (8004d38 <log_save+0x1fc>)
 8004b94:	4413      	add	r3, r2
 8004b96:	496e      	ldr	r1, [pc, #440]	; (8004d50 <log_save+0x214>)
 8004b98:	461a      	mov	r2, r3
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	cb03      	ldmia	r3!, {r0, r1}
 8004b9e:	6010      	str	r0, [r2, #0]
 8004ba0:	6051      	str	r1, [r2, #4]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	7213      	strb	r3, [r2, #8]
 8004ba6:	4b64      	ldr	r3, [pc, #400]	; (8004d38 <log_save+0x1fc>)
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4865      	ldr	r0, [pc, #404]	; (8004d40 <log_save+0x204>)
 8004bac:	f011 fe72 	bl	8016894 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8004bb0:	4964      	ldr	r1, [pc, #400]	; (8004d44 <log_save+0x208>)
 8004bb2:	4861      	ldr	r0, [pc, #388]	; (8004d38 <log_save+0x1fc>)
 8004bb4:	f011 fe6e 	bl	8016894 <siprintf>
		SD_writeToFile(openedPath, bmpBuffer);
 8004bb8:	4966      	ldr	r1, [pc, #408]	; (8004d54 <log_save+0x218>)
 8004bba:	4861      	ldr	r0, [pc, #388]	; (8004d40 <log_save+0x204>)
 8004bbc:	f7fc fbc0 	bl	8001340 <SD_writeToFile>
	}

	if (gpsBufferIndex > 0)
 8004bc0:	4b65      	ldr	r3, [pc, #404]	; (8004d58 <log_save+0x21c>)
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01b      	beq.n	8004c00 <log_save+0xc4>
	{
		sprintf(openedPath, strcat(directoryName, "/GPS.TXT"));
 8004bc8:	485b      	ldr	r0, [pc, #364]	; (8004d38 <log_save+0x1fc>)
 8004bca:	f7fb fb0b 	bl	80001e4 <strlen>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4b59      	ldr	r3, [pc, #356]	; (8004d38 <log_save+0x1fc>)
 8004bd4:	4413      	add	r3, r2
 8004bd6:	4961      	ldr	r1, [pc, #388]	; (8004d5c <log_save+0x220>)
 8004bd8:	461a      	mov	r2, r3
 8004bda:	460b      	mov	r3, r1
 8004bdc:	cb03      	ldmia	r3!, {r0, r1}
 8004bde:	6010      	str	r0, [r2, #0]
 8004be0:	6051      	str	r1, [r2, #4]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	7213      	strb	r3, [r2, #8]
 8004be6:	4b54      	ldr	r3, [pc, #336]	; (8004d38 <log_save+0x1fc>)
 8004be8:	4619      	mov	r1, r3
 8004bea:	4855      	ldr	r0, [pc, #340]	; (8004d40 <log_save+0x204>)
 8004bec:	f011 fe52 	bl	8016894 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8004bf0:	4954      	ldr	r1, [pc, #336]	; (8004d44 <log_save+0x208>)
 8004bf2:	4851      	ldr	r0, [pc, #324]	; (8004d38 <log_save+0x1fc>)
 8004bf4:	f011 fe4e 	bl	8016894 <siprintf>
		SD_writeToFile(openedPath, gpsBuffer);
 8004bf8:	4959      	ldr	r1, [pc, #356]	; (8004d60 <log_save+0x224>)
 8004bfa:	4851      	ldr	r0, [pc, #324]	; (8004d40 <log_save+0x204>)
 8004bfc:	f7fc fba0 	bl	8001340 <SD_writeToFile>
	}

	if (imuBufferIndex > 0)
 8004c00:	4b58      	ldr	r3, [pc, #352]	; (8004d64 <log_save+0x228>)
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01b      	beq.n	8004c40 <log_save+0x104>
	{
		sprintf(openedPath, strcat(directoryName, "/IMU.TXT"));
 8004c08:	484b      	ldr	r0, [pc, #300]	; (8004d38 <log_save+0x1fc>)
 8004c0a:	f7fb faeb 	bl	80001e4 <strlen>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	461a      	mov	r2, r3
 8004c12:	4b49      	ldr	r3, [pc, #292]	; (8004d38 <log_save+0x1fc>)
 8004c14:	4413      	add	r3, r2
 8004c16:	4954      	ldr	r1, [pc, #336]	; (8004d68 <log_save+0x22c>)
 8004c18:	461a      	mov	r2, r3
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	cb03      	ldmia	r3!, {r0, r1}
 8004c1e:	6010      	str	r0, [r2, #0]
 8004c20:	6051      	str	r1, [r2, #4]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	7213      	strb	r3, [r2, #8]
 8004c26:	4b44      	ldr	r3, [pc, #272]	; (8004d38 <log_save+0x1fc>)
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4845      	ldr	r0, [pc, #276]	; (8004d40 <log_save+0x204>)
 8004c2c:	f011 fe32 	bl	8016894 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8004c30:	4944      	ldr	r1, [pc, #272]	; (8004d44 <log_save+0x208>)
 8004c32:	4841      	ldr	r0, [pc, #260]	; (8004d38 <log_save+0x1fc>)
 8004c34:	f011 fe2e 	bl	8016894 <siprintf>
		SD_writeToFile(openedPath, imuBuffer);
 8004c38:	494c      	ldr	r1, [pc, #304]	; (8004d6c <log_save+0x230>)
 8004c3a:	4841      	ldr	r0, [pc, #260]	; (8004d40 <log_save+0x204>)
 8004c3c:	f7fc fb80 	bl	8001340 <SD_writeToFile>
	}

	if (motBufferIndex > 0)
 8004c40:	4b4b      	ldr	r3, [pc, #300]	; (8004d70 <log_save+0x234>)
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01b      	beq.n	8004c80 <log_save+0x144>
	{
		sprintf(openedPath, strcat(directoryName, "/MOT.TXT"));
 8004c48:	483b      	ldr	r0, [pc, #236]	; (8004d38 <log_save+0x1fc>)
 8004c4a:	f7fb facb 	bl	80001e4 <strlen>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	461a      	mov	r2, r3
 8004c52:	4b39      	ldr	r3, [pc, #228]	; (8004d38 <log_save+0x1fc>)
 8004c54:	4413      	add	r3, r2
 8004c56:	4947      	ldr	r1, [pc, #284]	; (8004d74 <log_save+0x238>)
 8004c58:	461a      	mov	r2, r3
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	cb03      	ldmia	r3!, {r0, r1}
 8004c5e:	6010      	str	r0, [r2, #0]
 8004c60:	6051      	str	r1, [r2, #4]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	7213      	strb	r3, [r2, #8]
 8004c66:	4b34      	ldr	r3, [pc, #208]	; (8004d38 <log_save+0x1fc>)
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4835      	ldr	r0, [pc, #212]	; (8004d40 <log_save+0x204>)
 8004c6c:	f011 fe12 	bl	8016894 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8004c70:	4934      	ldr	r1, [pc, #208]	; (8004d44 <log_save+0x208>)
 8004c72:	4831      	ldr	r0, [pc, #196]	; (8004d38 <log_save+0x1fc>)
 8004c74:	f011 fe0e 	bl	8016894 <siprintf>
		SD_writeToFile(openedPath, motBuffer);
 8004c78:	493f      	ldr	r1, [pc, #252]	; (8004d78 <log_save+0x23c>)
 8004c7a:	4831      	ldr	r0, [pc, #196]	; (8004d40 <log_save+0x204>)
 8004c7c:	f7fc fb60 	bl	8001340 <SD_writeToFile>
	}

	if (radioBufferIndex > 0)
 8004c80:	4b3e      	ldr	r3, [pc, #248]	; (8004d7c <log_save+0x240>)
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01d      	beq.n	8004cc4 <log_save+0x188>
	{
		sprintf(openedPath, strcat(directoryName, "/RADIO.TXT"));
 8004c88:	482b      	ldr	r0, [pc, #172]	; (8004d38 <log_save+0x1fc>)
 8004c8a:	f7fb faab 	bl	80001e4 <strlen>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	461a      	mov	r2, r3
 8004c92:	4b29      	ldr	r3, [pc, #164]	; (8004d38 <log_save+0x1fc>)
 8004c94:	4413      	add	r3, r2
 8004c96:	493a      	ldr	r1, [pc, #232]	; (8004d80 <log_save+0x244>)
 8004c98:	461a      	mov	r2, r3
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	cb03      	ldmia	r3!, {r0, r1}
 8004c9e:	6010      	str	r0, [r2, #0]
 8004ca0:	6051      	str	r1, [r2, #4]
 8004ca2:	8819      	ldrh	r1, [r3, #0]
 8004ca4:	789b      	ldrb	r3, [r3, #2]
 8004ca6:	8111      	strh	r1, [r2, #8]
 8004ca8:	7293      	strb	r3, [r2, #10]
 8004caa:	4b23      	ldr	r3, [pc, #140]	; (8004d38 <log_save+0x1fc>)
 8004cac:	4619      	mov	r1, r3
 8004cae:	4824      	ldr	r0, [pc, #144]	; (8004d40 <log_save+0x204>)
 8004cb0:	f011 fdf0 	bl	8016894 <siprintf>
		sprintf(directoryName, directoryNameCopy);
 8004cb4:	4923      	ldr	r1, [pc, #140]	; (8004d44 <log_save+0x208>)
 8004cb6:	4820      	ldr	r0, [pc, #128]	; (8004d38 <log_save+0x1fc>)
 8004cb8:	f011 fdec 	bl	8016894 <siprintf>
		SD_writeToFile(openedPath, radioBuffer);
 8004cbc:	4931      	ldr	r1, [pc, #196]	; (8004d84 <log_save+0x248>)
 8004cbe:	4820      	ldr	r0, [pc, #128]	; (8004d40 <log_save+0x204>)
 8004cc0:	f7fc fb3e 	bl	8001340 <SD_writeToFile>
	}


	logBufferIndex = 0;
 8004cc4:	4b1b      	ldr	r3, [pc, #108]	; (8004d34 <log_save+0x1f8>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	801a      	strh	r2, [r3, #0]
	bmpBufferIndex = 0;
 8004cca:	4b20      	ldr	r3, [pc, #128]	; (8004d4c <log_save+0x210>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	801a      	strh	r2, [r3, #0]
	gpsBufferIndex = 0;
 8004cd0:	4b21      	ldr	r3, [pc, #132]	; (8004d58 <log_save+0x21c>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	801a      	strh	r2, [r3, #0]
	imuBufferIndex = 0;
 8004cd6:	4b23      	ldr	r3, [pc, #140]	; (8004d64 <log_save+0x228>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	801a      	strh	r2, [r3, #0]
	motBufferIndex = 0;
 8004cdc:	4b24      	ldr	r3, [pc, #144]	; (8004d70 <log_save+0x234>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	801a      	strh	r2, [r3, #0]
	radioBufferIndex = 0;
 8004ce2:	4b26      	ldr	r3, [pc, #152]	; (8004d7c <log_save+0x240>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	801a      	strh	r2, [r3, #0]
	memset(logBuffer, 0x00, 1024);
 8004ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cec:	2100      	movs	r1, #0
 8004cee:	4816      	ldr	r0, [pc, #88]	; (8004d48 <log_save+0x20c>)
 8004cf0:	f010 fecb 	bl	8015a8a <memset>
	memset(bmpBuffer, 0x00, 1024);
 8004cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	4816      	ldr	r0, [pc, #88]	; (8004d54 <log_save+0x218>)
 8004cfc:	f010 fec5 	bl	8015a8a <memset>
	memset(gpsBuffer, 0x00, 1024);
 8004d00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d04:	2100      	movs	r1, #0
 8004d06:	4816      	ldr	r0, [pc, #88]	; (8004d60 <log_save+0x224>)
 8004d08:	f010 febf 	bl	8015a8a <memset>
	memset(imuBuffer, 0x00, 1024);
 8004d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d10:	2100      	movs	r1, #0
 8004d12:	4816      	ldr	r0, [pc, #88]	; (8004d6c <log_save+0x230>)
 8004d14:	f010 feb9 	bl	8015a8a <memset>
	memset(motBuffer, 0x00, 1024);
 8004d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4816      	ldr	r0, [pc, #88]	; (8004d78 <log_save+0x23c>)
 8004d20:	f010 feb3 	bl	8015a8a <memset>
	memset(radioBuffer, 0x00, 4096);
 8004d24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d28:	2100      	movs	r1, #0
 8004d2a:	4816      	ldr	r0, [pc, #88]	; (8004d84 <log_save+0x248>)
 8004d2c:	f010 fead 	bl	8015a8a <memset>
}
 8004d30:	bf00      	nop
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	200062c4 	.word	0x200062c4
 8004d38:	200062a0 	.word	0x200062a0
 8004d3c:	0801b7f8 	.word	0x0801b7f8
 8004d40:	20004654 	.word	0x20004654
 8004d44:	20004230 	.word	0x20004230
 8004d48:	20005ea0 	.word	0x20005ea0
 8004d4c:	200062c2 	.word	0x200062c2
 8004d50:	0801b804 	.word	0x0801b804
 8004d54:	200062c8 	.word	0x200062c8
 8004d58:	20004e9c 	.word	0x20004e9c
 8004d5c:	0801b810 	.word	0x0801b810
 8004d60:	20004250 	.word	0x20004250
 8004d64:	200062c6 	.word	0x200062c6
 8004d68:	0801b81c 	.word	0x0801b81c
 8004d6c:	20004a9c 	.word	0x20004a9c
 8004d70:	20004a98 	.word	0x20004a98
 8004d74:	0801b828 	.word	0x0801b828
 8004d78:	20004674 	.word	0x20004674
 8004d7c:	20004a74 	.word	0x20004a74
 8004d80:	0801b834 	.word	0x0801b834
 8004d84:	20003230 	.word	0x20003230

08004d88 <log_print>:


void log_print(char* line)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
	if (logBufferIndex < 950)
 8004d90:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <log_print+0x4c>)
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d816      	bhi.n	8004dca <log_print+0x42>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 8004d9c:	f7ff fd90 	bl	80048c0 <millis>
 8004da0:	4603      	mov	r3, r0
 8004da2:	461a      	mov	r2, r3
 8004da4:	490c      	ldr	r1, [pc, #48]	; (8004dd8 <log_print+0x50>)
 8004da6:	480d      	ldr	r0, [pc, #52]	; (8004ddc <log_print+0x54>)
 8004da8:	f011 fd74 	bl	8016894 <siprintf>
		strcat(logBuffer, line);
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	480c      	ldr	r0, [pc, #48]	; (8004de0 <log_print+0x58>)
 8004db0:	f011 fd90 	bl	80168d4 <strcat>
		strcat(logBuffer, timestamp);
 8004db4:	4909      	ldr	r1, [pc, #36]	; (8004ddc <log_print+0x54>)
 8004db6:	480a      	ldr	r0, [pc, #40]	; (8004de0 <log_print+0x58>)
 8004db8:	f011 fd8c 	bl	80168d4 <strcat>
		logBufferIndex = strlen(logBuffer);
 8004dbc:	4808      	ldr	r0, [pc, #32]	; (8004de0 <log_print+0x58>)
 8004dbe:	f7fb fa11 	bl	80001e4 <strlen>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	4b03      	ldr	r3, [pc, #12]	; (8004dd4 <log_print+0x4c>)
 8004dc8:	801a      	strh	r2, [r3, #0]
	}
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	200062c4 	.word	0x200062c4
 8004dd8:	0801b840 	.word	0x0801b840
 8004ddc:	20004a78 	.word	0x20004a78
 8004de0:	20005ea0 	.word	0x20005ea0

08004de4 <log_bmp>:

void log_bmp(BMP280* bmp)
{
 8004de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	6078      	str	r0, [r7, #4]
	if (bmpBufferIndex < 950)
 8004dec:	4b1e      	ldr	r3, [pc, #120]	; (8004e68 <log_bmp+0x84>)
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d832      	bhi.n	8004e5e <log_bmp+0x7a>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 8004df8:	f7ff fd62 	bl	80048c0 <millis>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	461a      	mov	r2, r3
 8004e00:	491a      	ldr	r1, [pc, #104]	; (8004e6c <log_bmp+0x88>)
 8004e02:	481b      	ldr	r0, [pc, #108]	; (8004e70 <log_bmp+0x8c>)
 8004e04:	f011 fd46 	bl	8016894 <siprintf>
		sprintf(tempBuffer, "%.02f %.02f", bmp->pressure, bmp->temperature);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fb fbab 	bl	8000568 <__aeabi_f2d>
 8004e12:	4605      	mov	r5, r0
 8004e14:	460e      	mov	r6, r1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fb fba4 	bl	8000568 <__aeabi_f2d>
 8004e20:	4603      	mov	r3, r0
 8004e22:	460c      	mov	r4, r1
 8004e24:	e9cd 3400 	strd	r3, r4, [sp]
 8004e28:	462a      	mov	r2, r5
 8004e2a:	4633      	mov	r3, r6
 8004e2c:	4911      	ldr	r1, [pc, #68]	; (8004e74 <log_bmp+0x90>)
 8004e2e:	4812      	ldr	r0, [pc, #72]	; (8004e78 <log_bmp+0x94>)
 8004e30:	f011 fd30 	bl	8016894 <siprintf>
		strcat(tempBuffer, timestamp);
 8004e34:	490e      	ldr	r1, [pc, #56]	; (8004e70 <log_bmp+0x8c>)
 8004e36:	4810      	ldr	r0, [pc, #64]	; (8004e78 <log_bmp+0x94>)
 8004e38:	f011 fd4c 	bl	80168d4 <strcat>
		strcat(bmpBuffer, tempBuffer);
 8004e3c:	490e      	ldr	r1, [pc, #56]	; (8004e78 <log_bmp+0x94>)
 8004e3e:	480f      	ldr	r0, [pc, #60]	; (8004e7c <log_bmp+0x98>)
 8004e40:	f011 fd48 	bl	80168d4 <strcat>
		bmpBufferIndex = strlen(bmpBuffer);
 8004e44:	480d      	ldr	r0, [pc, #52]	; (8004e7c <log_bmp+0x98>)
 8004e46:	f7fb f9cd 	bl	80001e4 <strlen>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <log_bmp+0x84>)
 8004e50:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8004e52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e56:	2100      	movs	r1, #0
 8004e58:	4807      	ldr	r0, [pc, #28]	; (8004e78 <log_bmp+0x94>)
 8004e5a:	f010 fe16 	bl	8015a8a <memset>
	}
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e66:	bf00      	nop
 8004e68:	200062c2 	.word	0x200062c2
 8004e6c:	0801b840 	.word	0x0801b840
 8004e70:	20004a78 	.word	0x20004a78
 8004e74:	0801b848 	.word	0x0801b848
 8004e78:	20004ea0 	.word	0x20004ea0
 8004e7c:	200062c8 	.word	0x200062c8

08004e80 <log_imu>:

		memset(tempBuffer, 0x00, 1024);
	}
}
void log_imu(float* eulers)
{
 8004e80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e84:	b086      	sub	sp, #24
 8004e86:	af04      	add	r7, sp, #16
 8004e88:	6078      	str	r0, [r7, #4]
	if (imuBufferIndex < 950)
 8004e8a:	4b24      	ldr	r3, [pc, #144]	; (8004f1c <log_imu+0x9c>)
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d83d      	bhi.n	8004f12 <log_imu+0x92>
	{
		sprintf(timestamp, "\t@%lu\r\n", millis());
 8004e96:	f7ff fd13 	bl	80048c0 <millis>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4920      	ldr	r1, [pc, #128]	; (8004f20 <log_imu+0xa0>)
 8004ea0:	4820      	ldr	r0, [pc, #128]	; (8004f24 <log_imu+0xa4>)
 8004ea2:	f011 fcf7 	bl	8016894 <siprintf>
		sprintf(tempBuffer, "%.02f %.02f %.02f", eulers[0], eulers[1], eulers[2]);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fb fb5c 	bl	8000568 <__aeabi_f2d>
 8004eb0:	4680      	mov	r8, r0
 8004eb2:	4689      	mov	r9, r1
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fb fb54 	bl	8000568 <__aeabi_f2d>
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	460d      	mov	r5, r1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3308      	adds	r3, #8
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fb fb4c 	bl	8000568 <__aeabi_f2d>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ed8:	e9cd 4500 	strd	r4, r5, [sp]
 8004edc:	4642      	mov	r2, r8
 8004ede:	464b      	mov	r3, r9
 8004ee0:	4911      	ldr	r1, [pc, #68]	; (8004f28 <log_imu+0xa8>)
 8004ee2:	4812      	ldr	r0, [pc, #72]	; (8004f2c <log_imu+0xac>)
 8004ee4:	f011 fcd6 	bl	8016894 <siprintf>
		strcat(tempBuffer, timestamp);
 8004ee8:	490e      	ldr	r1, [pc, #56]	; (8004f24 <log_imu+0xa4>)
 8004eea:	4810      	ldr	r0, [pc, #64]	; (8004f2c <log_imu+0xac>)
 8004eec:	f011 fcf2 	bl	80168d4 <strcat>
		strcat(imuBuffer, tempBuffer);
 8004ef0:	490e      	ldr	r1, [pc, #56]	; (8004f2c <log_imu+0xac>)
 8004ef2:	480f      	ldr	r0, [pc, #60]	; (8004f30 <log_imu+0xb0>)
 8004ef4:	f011 fcee 	bl	80168d4 <strcat>
		imuBufferIndex = strlen(imuBuffer);
 8004ef8:	480d      	ldr	r0, [pc, #52]	; (8004f30 <log_imu+0xb0>)
 8004efa:	f7fb f973 	bl	80001e4 <strlen>
 8004efe:	4603      	mov	r3, r0
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <log_imu+0x9c>)
 8004f04:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8004f06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4807      	ldr	r0, [pc, #28]	; (8004f2c <log_imu+0xac>)
 8004f0e:	f010 fdbc 	bl	8015a8a <memset>
	}
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f1c:	200062c6 	.word	0x200062c6
 8004f20:	0801b840 	.word	0x0801b840
 8004f24:	20004a78 	.word	0x20004a78
 8004f28:	0801b860 	.word	0x0801b860
 8004f2c:	20004ea0 	.word	0x20004ea0
 8004f30:	20004a9c 	.word	0x20004a9c

08004f34 <log_radio>:

		memset(tempBuffer, 0x00, 1024);
	}
}
void log_radio(SX1278* radio, bool transmit)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	70fb      	strb	r3, [r7, #3]
	if (radioBufferIndex < 3700)
 8004f40:	4b22      	ldr	r3, [pc, #136]	; (8004fcc <log_radio+0x98>)
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	f640 6273 	movw	r2, #3699	; 0xe73
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d83a      	bhi.n	8004fc2 <log_radio+0x8e>
	{
		sprintf(timestamp, "]\t@%lu\r\n", millis());
 8004f4c:	f7ff fcb8 	bl	80048c0 <millis>
 8004f50:	4603      	mov	r3, r0
 8004f52:	461a      	mov	r2, r3
 8004f54:	491e      	ldr	r1, [pc, #120]	; (8004fd0 <log_radio+0x9c>)
 8004f56:	481f      	ldr	r0, [pc, #124]	; (8004fd4 <log_radio+0xa0>)
 8004f58:	f011 fc9c 	bl	8016894 <siprintf>

		if (transmit)
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00d      	beq.n	8004f7e <log_radio+0x4a>
		{
			sprintf(tempBuffer, "TX\t[");
 8004f62:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <log_radio+0xa4>)
 8004f64:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <log_radio+0xa8>)
 8004f66:	6810      	ldr	r0, [r2, #0]
 8004f68:	6018      	str	r0, [r3, #0]
 8004f6a:	7912      	ldrb	r2, [r2, #4]
 8004f6c:	711a      	strb	r2, [r3, #4]
			strcat(tempBuffer, radio->txBuffer);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004f74:	4619      	mov	r1, r3
 8004f76:	4818      	ldr	r0, [pc, #96]	; (8004fd8 <log_radio+0xa4>)
 8004f78:	f011 fcac 	bl	80168d4 <strcat>
 8004f7c:	e00c      	b.n	8004f98 <log_radio+0x64>
		}
		else
		{
			sprintf(tempBuffer, "RX\t%d\t[", radio->rssi);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f82:	461a      	mov	r2, r3
 8004f84:	4916      	ldr	r1, [pc, #88]	; (8004fe0 <log_radio+0xac>)
 8004f86:	4814      	ldr	r0, [pc, #80]	; (8004fd8 <log_radio+0xa4>)
 8004f88:	f011 fc84 	bl	8016894 <siprintf>
			strcat(tempBuffer, radio->rxBuffer);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3344      	adds	r3, #68	; 0x44
 8004f90:	4619      	mov	r1, r3
 8004f92:	4811      	ldr	r0, [pc, #68]	; (8004fd8 <log_radio+0xa4>)
 8004f94:	f011 fc9e 	bl	80168d4 <strcat>
		}

		strcat(tempBuffer, timestamp);
 8004f98:	490e      	ldr	r1, [pc, #56]	; (8004fd4 <log_radio+0xa0>)
 8004f9a:	480f      	ldr	r0, [pc, #60]	; (8004fd8 <log_radio+0xa4>)
 8004f9c:	f011 fc9a 	bl	80168d4 <strcat>
		strcat(radioBuffer, tempBuffer);
 8004fa0:	490d      	ldr	r1, [pc, #52]	; (8004fd8 <log_radio+0xa4>)
 8004fa2:	4810      	ldr	r0, [pc, #64]	; (8004fe4 <log_radio+0xb0>)
 8004fa4:	f011 fc96 	bl	80168d4 <strcat>
		radioBufferIndex = strlen(radioBuffer);
 8004fa8:	480e      	ldr	r0, [pc, #56]	; (8004fe4 <log_radio+0xb0>)
 8004faa:	f7fb f91b 	bl	80001e4 <strlen>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <log_radio+0x98>)
 8004fb4:	801a      	strh	r2, [r3, #0]

		memset(tempBuffer, 0x00, 1024);
 8004fb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fba:	2100      	movs	r1, #0
 8004fbc:	4806      	ldr	r0, [pc, #24]	; (8004fd8 <log_radio+0xa4>)
 8004fbe:	f010 fd64 	bl	8015a8a <memset>
	}
}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20004a74 	.word	0x20004a74
 8004fd0:	0801b880 	.word	0x0801b880
 8004fd4:	20004a78 	.word	0x20004a78
 8004fd8:	20004ea0 	.word	0x20004ea0
 8004fdc:	0801b88c 	.word	0x0801b88c
 8004fe0:	0801b894 	.word	0x0801b894
 8004fe4:	20003230 	.word	0x20003230

08004fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fec:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <HAL_Init+0x40>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a0d      	ldr	r2, [pc, #52]	; (8005028 <HAL_Init+0x40>)
 8004ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_Init+0x40>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a0a      	ldr	r2, [pc, #40]	; (8005028 <HAL_Init+0x40>)
 8004ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005004:	4b08      	ldr	r3, [pc, #32]	; (8005028 <HAL_Init+0x40>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a07      	ldr	r2, [pc, #28]	; (8005028 <HAL_Init+0x40>)
 800500a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005010:	2003      	movs	r0, #3
 8005012:	f000 f94d 	bl	80052b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005016:	2000      	movs	r0, #0
 8005018:	f000 f808 	bl	800502c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800501c:	f00f fc04 	bl	8014828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40023c00 	.word	0x40023c00

0800502c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005034:	4b12      	ldr	r3, [pc, #72]	; (8005080 <HAL_InitTick+0x54>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	4b12      	ldr	r3, [pc, #72]	; (8005084 <HAL_InitTick+0x58>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	4619      	mov	r1, r3
 800503e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005042:	fbb3 f3f1 	udiv	r3, r3, r1
 8005046:	fbb2 f3f3 	udiv	r3, r2, r3
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f965 	bl	800531a <HAL_SYSTICK_Config>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e00e      	b.n	8005078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b0f      	cmp	r3, #15
 800505e:	d80a      	bhi.n	8005076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005060:	2200      	movs	r2, #0
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	f04f 30ff 	mov.w	r0, #4294967295
 8005068:	f000 f92d 	bl	80052c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800506c:	4a06      	ldr	r2, [pc, #24]	; (8005088 <HAL_InitTick+0x5c>)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	e000      	b.n	8005078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
}
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	20000134 	.word	0x20000134
 8005084:	20000008 	.word	0x20000008
 8005088:	20000004 	.word	0x20000004

0800508c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005090:	4b06      	ldr	r3, [pc, #24]	; (80050ac <HAL_IncTick+0x20>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <HAL_IncTick+0x24>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4413      	add	r3, r2
 800509c:	4a04      	ldr	r2, [pc, #16]	; (80050b0 <HAL_IncTick+0x24>)
 800509e:	6013      	str	r3, [r2, #0]
}
 80050a0:	bf00      	nop
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	20000008 	.word	0x20000008
 80050b0:	2000673c 	.word	0x2000673c

080050b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  return uwTick;
 80050b8:	4b03      	ldr	r3, [pc, #12]	; (80050c8 <HAL_GetTick+0x14>)
 80050ba:	681b      	ldr	r3, [r3, #0]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	2000673c 	.word	0x2000673c

080050cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050d4:	f7ff ffee 	bl	80050b4 <HAL_GetTick>
 80050d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d005      	beq.n	80050f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050e6:	4b09      	ldr	r3, [pc, #36]	; (800510c <HAL_Delay+0x40>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80050f2:	bf00      	nop
 80050f4:	f7ff ffde 	bl	80050b4 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	429a      	cmp	r2, r3
 8005102:	d8f7      	bhi.n	80050f4 <HAL_Delay+0x28>
  {
  }
}
 8005104:	bf00      	nop
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	20000008 	.word	0x20000008

08005110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005120:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <__NVIC_SetPriorityGrouping+0x44>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800512c:	4013      	ands	r3, r2
 800512e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800513c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005142:	4a04      	ldr	r2, [pc, #16]	; (8005154 <__NVIC_SetPriorityGrouping+0x44>)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	60d3      	str	r3, [r2, #12]
}
 8005148:	bf00      	nop
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	e000ed00 	.word	0xe000ed00

08005158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800515c:	4b04      	ldr	r3, [pc, #16]	; (8005170 <__NVIC_GetPriorityGrouping+0x18>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	0a1b      	lsrs	r3, r3, #8
 8005162:	f003 0307 	and.w	r3, r3, #7
}
 8005166:	4618      	mov	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	e000ed00 	.word	0xe000ed00

08005174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800517e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005182:	2b00      	cmp	r3, #0
 8005184:	db0b      	blt.n	800519e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005186:	79fb      	ldrb	r3, [r7, #7]
 8005188:	f003 021f 	and.w	r2, r3, #31
 800518c:	4907      	ldr	r1, [pc, #28]	; (80051ac <__NVIC_EnableIRQ+0x38>)
 800518e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	2001      	movs	r0, #1
 8005196:	fa00 f202 	lsl.w	r2, r0, r2
 800519a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	e000e100 	.word	0xe000e100

080051b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	6039      	str	r1, [r7, #0]
 80051ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	db0a      	blt.n	80051da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	490c      	ldr	r1, [pc, #48]	; (80051fc <__NVIC_SetPriority+0x4c>)
 80051ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ce:	0112      	lsls	r2, r2, #4
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	440b      	add	r3, r1
 80051d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051d8:	e00a      	b.n	80051f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	4908      	ldr	r1, [pc, #32]	; (8005200 <__NVIC_SetPriority+0x50>)
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	3b04      	subs	r3, #4
 80051e8:	0112      	lsls	r2, r2, #4
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	440b      	add	r3, r1
 80051ee:	761a      	strb	r2, [r3, #24]
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	e000e100 	.word	0xe000e100
 8005200:	e000ed00 	.word	0xe000ed00

08005204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005204:	b480      	push	{r7}
 8005206:	b089      	sub	sp, #36	; 0x24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f1c3 0307 	rsb	r3, r3, #7
 800521e:	2b04      	cmp	r3, #4
 8005220:	bf28      	it	cs
 8005222:	2304      	movcs	r3, #4
 8005224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	3304      	adds	r3, #4
 800522a:	2b06      	cmp	r3, #6
 800522c:	d902      	bls.n	8005234 <NVIC_EncodePriority+0x30>
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	3b03      	subs	r3, #3
 8005232:	e000      	b.n	8005236 <NVIC_EncodePriority+0x32>
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005238:	f04f 32ff 	mov.w	r2, #4294967295
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	43da      	mvns	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	401a      	ands	r2, r3
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800524c:	f04f 31ff 	mov.w	r1, #4294967295
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	fa01 f303 	lsl.w	r3, r1, r3
 8005256:	43d9      	mvns	r1, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800525c:	4313      	orrs	r3, r2
         );
}
 800525e:	4618      	mov	r0, r3
 8005260:	3724      	adds	r7, #36	; 0x24
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
	...

0800526c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3b01      	subs	r3, #1
 8005278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800527c:	d301      	bcc.n	8005282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800527e:	2301      	movs	r3, #1
 8005280:	e00f      	b.n	80052a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005282:	4a0a      	ldr	r2, [pc, #40]	; (80052ac <SysTick_Config+0x40>)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3b01      	subs	r3, #1
 8005288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800528a:	210f      	movs	r1, #15
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	f7ff ff8e 	bl	80051b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <SysTick_Config+0x40>)
 8005296:	2200      	movs	r2, #0
 8005298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800529a:	4b04      	ldr	r3, [pc, #16]	; (80052ac <SysTick_Config+0x40>)
 800529c:	2207      	movs	r2, #7
 800529e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	e000e010 	.word	0xe000e010

080052b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff ff29 	bl	8005110 <__NVIC_SetPriorityGrouping>
}
 80052be:	bf00      	nop
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b086      	sub	sp, #24
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	4603      	mov	r3, r0
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607a      	str	r2, [r7, #4]
 80052d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052d8:	f7ff ff3e 	bl	8005158 <__NVIC_GetPriorityGrouping>
 80052dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	6978      	ldr	r0, [r7, #20]
 80052e4:	f7ff ff8e 	bl	8005204 <NVIC_EncodePriority>
 80052e8:	4602      	mov	r2, r0
 80052ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ee:	4611      	mov	r1, r2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff ff5d 	bl	80051b0 <__NVIC_SetPriority>
}
 80052f6:	bf00      	nop
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b082      	sub	sp, #8
 8005302:	af00      	add	r7, sp, #0
 8005304:	4603      	mov	r3, r0
 8005306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff ff31 	bl	8005174 <__NVIC_EnableIRQ>
}
 8005312:	bf00      	nop
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff ffa2 	bl	800526c <SysTick_Config>
 8005328:	4603      	mov	r3, r0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005340:	f7ff feb8 	bl	80050b4 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e099      	b.n	8005484 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0201 	bic.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005370:	e00f      	b.n	8005392 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005372:	f7ff fe9f 	bl	80050b4 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b05      	cmp	r3, #5
 800537e:	d908      	bls.n	8005392 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2203      	movs	r2, #3
 800538a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e078      	b.n	8005484 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e8      	bne.n	8005372 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4b38      	ldr	r3, [pc, #224]	; (800548c <HAL_DMA_Init+0x158>)
 80053ac:	4013      	ands	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d107      	bne.n	80053fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	4313      	orrs	r3, r2
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f023 0307 	bic.w	r3, r3, #7
 8005412:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	2b04      	cmp	r3, #4
 8005424:	d117      	bne.n	8005456 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00e      	beq.n	8005456 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fa99 	bl	8005970 <DMA_CheckFifoParam>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d008      	beq.n	8005456 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2240      	movs	r2, #64	; 0x40
 8005448:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005452:	2301      	movs	r3, #1
 8005454:	e016      	b.n	8005484 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fa50 	bl	8005904 <DMA_CalcBaseAndBitshift>
 8005464:	4603      	mov	r3, r0
 8005466:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546c:	223f      	movs	r2, #63	; 0x3f
 800546e:	409a      	lsls	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	f010803f 	.word	0xf010803f

08005490 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_DMA_Start_IT+0x26>
 80054b2:	2302      	movs	r3, #2
 80054b4:	e048      	b.n	8005548 <HAL_DMA_Start_IT+0xb8>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d137      	bne.n	800553a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 f9e2 	bl	80058a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e8:	223f      	movs	r2, #63	; 0x3f
 80054ea:	409a      	lsls	r2, r3
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0216 	orr.w	r2, r2, #22
 80054fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695a      	ldr	r2, [r3, #20]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800550e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	2b00      	cmp	r3, #0
 8005516:	d007      	beq.n	8005528 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0208 	orr.w	r2, r2, #8
 8005526:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	e005      	b.n	8005546 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005542:	2302      	movs	r3, #2
 8005544:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005546:	7dfb      	ldrb	r3, [r7, #23]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d004      	beq.n	800556e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2280      	movs	r2, #128	; 0x80
 8005568:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e00c      	b.n	8005588 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2205      	movs	r2, #5
 8005572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0201 	bic.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055a0:	4b92      	ldr	r3, [pc, #584]	; (80057ec <HAL_DMA_IRQHandler+0x258>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a92      	ldr	r2, [pc, #584]	; (80057f0 <HAL_DMA_IRQHandler+0x25c>)
 80055a6:	fba2 2303 	umull	r2, r3, r2, r3
 80055aa:	0a9b      	lsrs	r3, r3, #10
 80055ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055be:	2208      	movs	r2, #8
 80055c0:	409a      	lsls	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d01a      	beq.n	8005600 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d013      	beq.n	8005600 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0204 	bic.w	r2, r2, #4
 80055e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ec:	2208      	movs	r2, #8
 80055ee:	409a      	lsls	r2, r3
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f8:	f043 0201 	orr.w	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005604:	2201      	movs	r2, #1
 8005606:	409a      	lsls	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4013      	ands	r3, r2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d012      	beq.n	8005636 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005622:	2201      	movs	r2, #1
 8005624:	409a      	lsls	r2, r3
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562e:	f043 0202 	orr.w	r2, r3, #2
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563a:	2204      	movs	r2, #4
 800563c:	409a      	lsls	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4013      	ands	r3, r2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d012      	beq.n	800566c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00b      	beq.n	800566c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005658:	2204      	movs	r2, #4
 800565a:	409a      	lsls	r2, r3
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005664:	f043 0204 	orr.w	r2, r3, #4
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005670:	2210      	movs	r2, #16
 8005672:	409a      	lsls	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4013      	ands	r3, r2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d043      	beq.n	8005704 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0308 	and.w	r3, r3, #8
 8005686:	2b00      	cmp	r3, #0
 8005688:	d03c      	beq.n	8005704 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568e:	2210      	movs	r2, #16
 8005690:	409a      	lsls	r2, r3
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d018      	beq.n	80056d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d108      	bne.n	80056c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d024      	beq.n	8005704 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	4798      	blx	r3
 80056c2:	e01f      	b.n	8005704 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01b      	beq.n	8005704 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	4798      	blx	r3
 80056d4:	e016      	b.n	8005704 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d107      	bne.n	80056f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0208 	bic.w	r2, r2, #8
 80056f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005708:	2220      	movs	r2, #32
 800570a:	409a      	lsls	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4013      	ands	r3, r2
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 808e 	beq.w	8005832 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 8086 	beq.w	8005832 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800572a:	2220      	movs	r2, #32
 800572c:	409a      	lsls	r2, r3
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b05      	cmp	r3, #5
 800573c:	d136      	bne.n	80057ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0216 	bic.w	r2, r2, #22
 800574c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695a      	ldr	r2, [r3, #20]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800575c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	2b00      	cmp	r3, #0
 8005764:	d103      	bne.n	800576e <HAL_DMA_IRQHandler+0x1da>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800576a:	2b00      	cmp	r3, #0
 800576c:	d007      	beq.n	800577e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0208 	bic.w	r2, r2, #8
 800577c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005782:	223f      	movs	r2, #63	; 0x3f
 8005784:	409a      	lsls	r2, r3
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d07d      	beq.n	800589e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	4798      	blx	r3
        }
        return;
 80057aa:	e078      	b.n	800589e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d01c      	beq.n	80057f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d108      	bne.n	80057da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d030      	beq.n	8005832 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	4798      	blx	r3
 80057d8:	e02b      	b.n	8005832 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d027      	beq.n	8005832 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	4798      	blx	r3
 80057ea:	e022      	b.n	8005832 <HAL_DMA_IRQHandler+0x29e>
 80057ec:	20000134 	.word	0x20000134
 80057f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10f      	bne.n	8005822 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0210 	bic.w	r2, r2, #16
 8005810:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005836:	2b00      	cmp	r3, #0
 8005838:	d032      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d022      	beq.n	800588c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2205      	movs	r2, #5
 800584a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0201 	bic.w	r2, r2, #1
 800585c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	3301      	adds	r3, #1
 8005862:	60bb      	str	r3, [r7, #8]
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	429a      	cmp	r2, r3
 8005868:	d307      	bcc.n	800587a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f2      	bne.n	800585e <HAL_DMA_IRQHandler+0x2ca>
 8005878:	e000      	b.n	800587c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800587a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	4798      	blx	r3
 800589c:	e000      	b.n	80058a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800589e:	bf00      	nop
    }
  }
}
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop

080058a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	2b40      	cmp	r3, #64	; 0x40
 80058d4:	d108      	bne.n	80058e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80058e6:	e007      	b.n	80058f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	60da      	str	r2, [r3, #12]
}
 80058f8:	bf00      	nop
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	b2db      	uxtb	r3, r3
 8005912:	3b10      	subs	r3, #16
 8005914:	4a14      	ldr	r2, [pc, #80]	; (8005968 <DMA_CalcBaseAndBitshift+0x64>)
 8005916:	fba2 2303 	umull	r2, r3, r2, r3
 800591a:	091b      	lsrs	r3, r3, #4
 800591c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800591e:	4a13      	ldr	r2, [pc, #76]	; (800596c <DMA_CalcBaseAndBitshift+0x68>)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b03      	cmp	r3, #3
 8005930:	d909      	bls.n	8005946 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800593a:	f023 0303 	bic.w	r3, r3, #3
 800593e:	1d1a      	adds	r2, r3, #4
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	659a      	str	r2, [r3, #88]	; 0x58
 8005944:	e007      	b.n	8005956 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800594e:	f023 0303 	bic.w	r3, r3, #3
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	aaaaaaab 	.word	0xaaaaaaab
 800596c:	0801be70 	.word	0x0801be70

08005970 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d11f      	bne.n	80059ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b03      	cmp	r3, #3
 800598e:	d855      	bhi.n	8005a3c <DMA_CheckFifoParam+0xcc>
 8005990:	a201      	add	r2, pc, #4	; (adr r2, 8005998 <DMA_CheckFifoParam+0x28>)
 8005992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005996:	bf00      	nop
 8005998:	080059a9 	.word	0x080059a9
 800599c:	080059bb 	.word	0x080059bb
 80059a0:	080059a9 	.word	0x080059a9
 80059a4:	08005a3d 	.word	0x08005a3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d045      	beq.n	8005a40 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b8:	e042      	b.n	8005a40 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059c2:	d13f      	bne.n	8005a44 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059c8:	e03c      	b.n	8005a44 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d2:	d121      	bne.n	8005a18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d836      	bhi.n	8005a48 <DMA_CheckFifoParam+0xd8>
 80059da:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <DMA_CheckFifoParam+0x70>)
 80059dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e0:	080059f1 	.word	0x080059f1
 80059e4:	080059f7 	.word	0x080059f7
 80059e8:	080059f1 	.word	0x080059f1
 80059ec:	08005a09 	.word	0x08005a09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	73fb      	strb	r3, [r7, #15]
      break;
 80059f4:	e02f      	b.n	8005a56 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d024      	beq.n	8005a4c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a06:	e021      	b.n	8005a4c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a10:	d11e      	bne.n	8005a50 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a16:	e01b      	b.n	8005a50 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d902      	bls.n	8005a24 <DMA_CheckFifoParam+0xb4>
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d003      	beq.n	8005a2a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a22:	e018      	b.n	8005a56 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	73fb      	strb	r3, [r7, #15]
      break;
 8005a28:	e015      	b.n	8005a56 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00e      	beq.n	8005a54 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	73fb      	strb	r3, [r7, #15]
      break;
 8005a3a:	e00b      	b.n	8005a54 <DMA_CheckFifoParam+0xe4>
      break;
 8005a3c:	bf00      	nop
 8005a3e:	e00a      	b.n	8005a56 <DMA_CheckFifoParam+0xe6>
      break;
 8005a40:	bf00      	nop
 8005a42:	e008      	b.n	8005a56 <DMA_CheckFifoParam+0xe6>
      break;
 8005a44:	bf00      	nop
 8005a46:	e006      	b.n	8005a56 <DMA_CheckFifoParam+0xe6>
      break;
 8005a48:	bf00      	nop
 8005a4a:	e004      	b.n	8005a56 <DMA_CheckFifoParam+0xe6>
      break;
 8005a4c:	bf00      	nop
 8005a4e:	e002      	b.n	8005a56 <DMA_CheckFifoParam+0xe6>
      break;   
 8005a50:	bf00      	nop
 8005a52:	e000      	b.n	8005a56 <DMA_CheckFifoParam+0xe6>
      break;
 8005a54:	bf00      	nop
    }
  } 
  
  return status; 
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b089      	sub	sp, #36	; 0x24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	e16b      	b.n	8005d58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a80:	2201      	movs	r2, #1
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4013      	ands	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	f040 815a 	bne.w	8005d52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d003      	beq.n	8005aae <HAL_GPIO_Init+0x4a>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b12      	cmp	r3, #18
 8005aac:	d123      	bne.n	8005af6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	08da      	lsrs	r2, r3, #3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3208      	adds	r2, #8
 8005ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	220f      	movs	r2, #15
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	43db      	mvns	r3, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	691a      	ldr	r2, [r3, #16]
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	08da      	lsrs	r2, r3, #3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3208      	adds	r2, #8
 8005af0:	69b9      	ldr	r1, [r7, #24]
 8005af2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	2203      	movs	r2, #3
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	43db      	mvns	r3, r3
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f003 0203 	and.w	r2, r3, #3
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d00b      	beq.n	8005b4a <HAL_GPIO_Init+0xe6>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d007      	beq.n	8005b4a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b3e:	2b11      	cmp	r3, #17
 8005b40:	d003      	beq.n	8005b4a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b12      	cmp	r3, #18
 8005b48:	d130      	bne.n	8005bac <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	2203      	movs	r2, #3
 8005b56:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5a:	43db      	mvns	r3, r3
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b80:	2201      	movs	r2, #1
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	091b      	lsrs	r3, r3, #4
 8005b96:	f003 0201 	and.w	r2, r3, #1
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80b4 	beq.w	8005d52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	4b5f      	ldr	r3, [pc, #380]	; (8005d6c <HAL_GPIO_Init+0x308>)
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf2:	4a5e      	ldr	r2, [pc, #376]	; (8005d6c <HAL_GPIO_Init+0x308>)
 8005bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8005bfa:	4b5c      	ldr	r3, [pc, #368]	; (8005d6c <HAL_GPIO_Init+0x308>)
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c06:	4a5a      	ldr	r2, [pc, #360]	; (8005d70 <HAL_GPIO_Init+0x30c>)
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	089b      	lsrs	r3, r3, #2
 8005c0c:	3302      	adds	r3, #2
 8005c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	220f      	movs	r2, #15
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	43db      	mvns	r3, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4013      	ands	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a51      	ldr	r2, [pc, #324]	; (8005d74 <HAL_GPIO_Init+0x310>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d02b      	beq.n	8005c8a <HAL_GPIO_Init+0x226>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a50      	ldr	r2, [pc, #320]	; (8005d78 <HAL_GPIO_Init+0x314>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d025      	beq.n	8005c86 <HAL_GPIO_Init+0x222>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a4f      	ldr	r2, [pc, #316]	; (8005d7c <HAL_GPIO_Init+0x318>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d01f      	beq.n	8005c82 <HAL_GPIO_Init+0x21e>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a4e      	ldr	r2, [pc, #312]	; (8005d80 <HAL_GPIO_Init+0x31c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d019      	beq.n	8005c7e <HAL_GPIO_Init+0x21a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a4d      	ldr	r2, [pc, #308]	; (8005d84 <HAL_GPIO_Init+0x320>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d013      	beq.n	8005c7a <HAL_GPIO_Init+0x216>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a4c      	ldr	r2, [pc, #304]	; (8005d88 <HAL_GPIO_Init+0x324>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00d      	beq.n	8005c76 <HAL_GPIO_Init+0x212>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a4b      	ldr	r2, [pc, #300]	; (8005d8c <HAL_GPIO_Init+0x328>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d007      	beq.n	8005c72 <HAL_GPIO_Init+0x20e>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a4a      	ldr	r2, [pc, #296]	; (8005d90 <HAL_GPIO_Init+0x32c>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d101      	bne.n	8005c6e <HAL_GPIO_Init+0x20a>
 8005c6a:	2307      	movs	r3, #7
 8005c6c:	e00e      	b.n	8005c8c <HAL_GPIO_Init+0x228>
 8005c6e:	2308      	movs	r3, #8
 8005c70:	e00c      	b.n	8005c8c <HAL_GPIO_Init+0x228>
 8005c72:	2306      	movs	r3, #6
 8005c74:	e00a      	b.n	8005c8c <HAL_GPIO_Init+0x228>
 8005c76:	2305      	movs	r3, #5
 8005c78:	e008      	b.n	8005c8c <HAL_GPIO_Init+0x228>
 8005c7a:	2304      	movs	r3, #4
 8005c7c:	e006      	b.n	8005c8c <HAL_GPIO_Init+0x228>
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e004      	b.n	8005c8c <HAL_GPIO_Init+0x228>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e002      	b.n	8005c8c <HAL_GPIO_Init+0x228>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <HAL_GPIO_Init+0x228>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	f002 0203 	and.w	r2, r2, #3
 8005c92:	0092      	lsls	r2, r2, #2
 8005c94:	4093      	lsls	r3, r2
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c9c:	4934      	ldr	r1, [pc, #208]	; (8005d70 <HAL_GPIO_Init+0x30c>)
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	089b      	lsrs	r3, r3, #2
 8005ca2:	3302      	adds	r3, #2
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005caa:	4b3a      	ldr	r3, [pc, #232]	; (8005d94 <HAL_GPIO_Init+0x330>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	43db      	mvns	r3, r3
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005cce:	4a31      	ldr	r2, [pc, #196]	; (8005d94 <HAL_GPIO_Init+0x330>)
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005cd4:	4b2f      	ldr	r3, [pc, #188]	; (8005d94 <HAL_GPIO_Init+0x330>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	43db      	mvns	r3, r3
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005cf8:	4a26      	ldr	r2, [pc, #152]	; (8005d94 <HAL_GPIO_Init+0x330>)
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cfe:	4b25      	ldr	r3, [pc, #148]	; (8005d94 <HAL_GPIO_Init+0x330>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	43db      	mvns	r3, r3
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d22:	4a1c      	ldr	r2, [pc, #112]	; (8005d94 <HAL_GPIO_Init+0x330>)
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d28:	4b1a      	ldr	r3, [pc, #104]	; (8005d94 <HAL_GPIO_Init+0x330>)
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	43db      	mvns	r3, r3
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	4013      	ands	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d4c:	4a11      	ldr	r2, [pc, #68]	; (8005d94 <HAL_GPIO_Init+0x330>)
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	3301      	adds	r3, #1
 8005d56:	61fb      	str	r3, [r7, #28]
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	2b0f      	cmp	r3, #15
 8005d5c:	f67f ae90 	bls.w	8005a80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d60:	bf00      	nop
 8005d62:	3724      	adds	r7, #36	; 0x24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	40013800 	.word	0x40013800
 8005d74:	40020000 	.word	0x40020000
 8005d78:	40020400 	.word	0x40020400
 8005d7c:	40020800 	.word	0x40020800
 8005d80:	40020c00 	.word	0x40020c00
 8005d84:	40021000 	.word	0x40021000
 8005d88:	40021400 	.word	0x40021400
 8005d8c:	40021800 	.word	0x40021800
 8005d90:	40021c00 	.word	0x40021c00
 8005d94:	40013c00 	.word	0x40013c00

08005d98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	887b      	ldrh	r3, [r7, #2]
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
 8005db4:	e001      	b.n	8005dba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005db6:	2300      	movs	r3, #0
 8005db8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	807b      	strh	r3, [r7, #2]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005dd8:	787b      	ldrb	r3, [r7, #1]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dde:	887a      	ldrh	r2, [r7, #2]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005de4:	e003      	b.n	8005dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005de6:	887b      	ldrh	r3, [r7, #2]
 8005de8:	041a      	lsls	r2, r3, #16
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	619a      	str	r2, [r3, #24]
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	460b      	mov	r3, r1
 8005e04:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695a      	ldr	r2, [r3, #20]
 8005e0a:	887b      	ldrh	r3, [r7, #2]
 8005e0c:	401a      	ands	r2, r3
 8005e0e:	887b      	ldrh	r3, [r7, #2]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d104      	bne.n	8005e1e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e14:	887b      	ldrh	r3, [r7, #2]
 8005e16:	041a      	lsls	r2, r3, #16
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005e1c:	e002      	b.n	8005e24 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005e1e:	887a      	ldrh	r2, [r7, #2]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	619a      	str	r2, [r3, #24]
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e10f      	b.n	8006062 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f00e fd0e 	bl	8014878 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2224      	movs	r2, #36	; 0x24
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0201 	bic.w	r2, r2, #1
 8005e72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e74:	f002 fcc8 	bl	8008808 <HAL_RCC_GetPCLK1Freq>
 8005e78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	4a7b      	ldr	r2, [pc, #492]	; (800606c <HAL_I2C_Init+0x23c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d807      	bhi.n	8005e94 <HAL_I2C_Init+0x64>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4a7a      	ldr	r2, [pc, #488]	; (8006070 <HAL_I2C_Init+0x240>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	bf94      	ite	ls
 8005e8c:	2301      	movls	r3, #1
 8005e8e:	2300      	movhi	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	e006      	b.n	8005ea2 <HAL_I2C_Init+0x72>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4a77      	ldr	r2, [pc, #476]	; (8006074 <HAL_I2C_Init+0x244>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	bf94      	ite	ls
 8005e9c:	2301      	movls	r3, #1
 8005e9e:	2300      	movhi	r3, #0
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e0db      	b.n	8006062 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4a72      	ldr	r2, [pc, #456]	; (8006078 <HAL_I2C_Init+0x248>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	0c9b      	lsrs	r3, r3, #18
 8005eb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4a64      	ldr	r2, [pc, #400]	; (800606c <HAL_I2C_Init+0x23c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d802      	bhi.n	8005ee4 <HAL_I2C_Init+0xb4>
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	e009      	b.n	8005ef8 <HAL_I2C_Init+0xc8>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	4a63      	ldr	r2, [pc, #396]	; (800607c <HAL_I2C_Init+0x24c>)
 8005ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef4:	099b      	lsrs	r3, r3, #6
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6812      	ldr	r2, [r2, #0]
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	4956      	ldr	r1, [pc, #344]	; (800606c <HAL_I2C_Init+0x23c>)
 8005f14:	428b      	cmp	r3, r1
 8005f16:	d80d      	bhi.n	8005f34 <HAL_I2C_Init+0x104>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	1e59      	subs	r1, r3, #1
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f26:	3301      	adds	r3, #1
 8005f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	bf38      	it	cc
 8005f30:	2304      	movcc	r3, #4
 8005f32:	e04f      	b.n	8005fd4 <HAL_I2C_Init+0x1a4>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d111      	bne.n	8005f60 <HAL_I2C_Init+0x130>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	1e58      	subs	r0, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6859      	ldr	r1, [r3, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	440b      	add	r3, r1
 8005f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f4e:	3301      	adds	r3, #1
 8005f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	bf0c      	ite	eq
 8005f58:	2301      	moveq	r3, #1
 8005f5a:	2300      	movne	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	e012      	b.n	8005f86 <HAL_I2C_Init+0x156>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	1e58      	subs	r0, r3, #1
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6859      	ldr	r1, [r3, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	0099      	lsls	r1, r3, #2
 8005f70:	440b      	add	r3, r1
 8005f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f76:	3301      	adds	r3, #1
 8005f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	bf0c      	ite	eq
 8005f80:	2301      	moveq	r3, #1
 8005f82:	2300      	movne	r3, #0
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <HAL_I2C_Init+0x15e>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e022      	b.n	8005fd4 <HAL_I2C_Init+0x1a4>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10e      	bne.n	8005fb4 <HAL_I2C_Init+0x184>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	1e58      	subs	r0, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6859      	ldr	r1, [r3, #4]
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	440b      	add	r3, r1
 8005fa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fa8:	3301      	adds	r3, #1
 8005faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb2:	e00f      	b.n	8005fd4 <HAL_I2C_Init+0x1a4>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	1e58      	subs	r0, r3, #1
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6859      	ldr	r1, [r3, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	0099      	lsls	r1, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fca:	3301      	adds	r3, #1
 8005fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	6809      	ldr	r1, [r1, #0]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69da      	ldr	r2, [r3, #28]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006002:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6911      	ldr	r1, [r2, #16]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	68d2      	ldr	r2, [r2, #12]
 800600e:	4311      	orrs	r1, r2
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	430b      	orrs	r3, r1
 8006016:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695a      	ldr	r2, [r3, #20]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	000186a0 	.word	0x000186a0
 8006070:	001e847f 	.word	0x001e847f
 8006074:	003d08ff 	.word	0x003d08ff
 8006078:	431bde83 	.word	0x431bde83
 800607c:	10624dd3 	.word	0x10624dd3

08006080 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af02      	add	r7, sp, #8
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	4608      	mov	r0, r1
 800608a:	4611      	mov	r1, r2
 800608c:	461a      	mov	r2, r3
 800608e:	4603      	mov	r3, r0
 8006090:	817b      	strh	r3, [r7, #10]
 8006092:	460b      	mov	r3, r1
 8006094:	813b      	strh	r3, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800609a:	f7ff f80b 	bl	80050b4 <HAL_GetTick>
 800609e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	f040 80d9 	bne.w	8006260 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	2319      	movs	r3, #25
 80060b4:	2201      	movs	r2, #1
 80060b6:	496d      	ldr	r1, [pc, #436]	; (800626c <HAL_I2C_Mem_Write+0x1ec>)
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 fc5b 	bl	8006974 <I2C_WaitOnFlagUntilTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80060c4:	2302      	movs	r3, #2
 80060c6:	e0cc      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_I2C_Mem_Write+0x56>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e0c5      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d007      	beq.n	80060fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800610a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2221      	movs	r2, #33	; 0x21
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2240      	movs	r2, #64	; 0x40
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a3a      	ldr	r2, [r7, #32]
 8006126:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800612c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4a4d      	ldr	r2, [pc, #308]	; (8006270 <HAL_I2C_Mem_Write+0x1f0>)
 800613c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800613e:	88f8      	ldrh	r0, [r7, #6]
 8006140:	893a      	ldrh	r2, [r7, #8]
 8006142:	8979      	ldrh	r1, [r7, #10]
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	4603      	mov	r3, r0
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 fab6 	bl	80066c0 <I2C_RequestMemoryWrite>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d052      	beq.n	8006200 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e081      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fcdc 	bl	8006b20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00d      	beq.n	800618a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	2b04      	cmp	r3, #4
 8006174:	d107      	bne.n	8006186 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006184:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e06b      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	781a      	ldrb	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a4:	3b01      	subs	r3, #1
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d11b      	bne.n	8006200 <HAL_I2C_Mem_Write+0x180>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d017      	beq.n	8006200 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	781a      	ldrb	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1aa      	bne.n	800615e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 fcc8 	bl	8006ba2 <I2C_WaitOnBTFFlagUntilTimeout>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00d      	beq.n	8006234 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621c:	2b04      	cmp	r3, #4
 800621e:	d107      	bne.n	8006230 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800622e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e016      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	e000      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006260:	2302      	movs	r3, #2
  }
}
 8006262:	4618      	mov	r0, r3
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	00100002 	.word	0x00100002
 8006270:	ffff0000 	.word	0xffff0000

08006274 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08c      	sub	sp, #48	; 0x30
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	4608      	mov	r0, r1
 800627e:	4611      	mov	r1, r2
 8006280:	461a      	mov	r2, r3
 8006282:	4603      	mov	r3, r0
 8006284:	817b      	strh	r3, [r7, #10]
 8006286:	460b      	mov	r3, r1
 8006288:	813b      	strh	r3, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800628e:	f7fe ff11 	bl	80050b4 <HAL_GetTick>
 8006292:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b20      	cmp	r3, #32
 800629e:	f040 8208 	bne.w	80066b2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	2319      	movs	r3, #25
 80062a8:	2201      	movs	r2, #1
 80062aa:	497b      	ldr	r1, [pc, #492]	; (8006498 <HAL_I2C_Mem_Read+0x224>)
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 fb61 	bl	8006974 <I2C_WaitOnFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80062b8:	2302      	movs	r3, #2
 80062ba:	e1fb      	b.n	80066b4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_I2C_Mem_Read+0x56>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e1f4      	b.n	80066b4 <HAL_I2C_Mem_Read+0x440>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d007      	beq.n	80062f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2222      	movs	r2, #34	; 0x22
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2240      	movs	r2, #64	; 0x40
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800631a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006320:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4a5b      	ldr	r2, [pc, #364]	; (800649c <HAL_I2C_Mem_Read+0x228>)
 8006330:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006332:	88f8      	ldrh	r0, [r7, #6]
 8006334:	893a      	ldrh	r2, [r7, #8]
 8006336:	8979      	ldrh	r1, [r7, #10]
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	9301      	str	r3, [sp, #4]
 800633c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	4603      	mov	r3, r0
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 fa46 	bl	80067d4 <I2C_RequestMemoryRead>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e1b0      	b.n	80066b4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006356:	2b00      	cmp	r3, #0
 8006358:	d113      	bne.n	8006382 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800635a:	2300      	movs	r3, #0
 800635c:	623b      	str	r3, [r7, #32]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	623b      	str	r3, [r7, #32]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	623b      	str	r3, [r7, #32]
 800636e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	e184      	b.n	800668c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006386:	2b01      	cmp	r3, #1
 8006388:	d11b      	bne.n	80063c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006398:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639a:	2300      	movs	r3, #0
 800639c:	61fb      	str	r3, [r7, #28]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	61fb      	str	r3, [r7, #28]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	61fb      	str	r3, [r7, #28]
 80063ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	e164      	b.n	800668c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d11b      	bne.n	8006402 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ea:	2300      	movs	r3, #0
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	61bb      	str	r3, [r7, #24]
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	e144      	b.n	800668c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006402:	2300      	movs	r3, #0
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	617b      	str	r3, [r7, #20]
 8006416:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006418:	e138      	b.n	800668c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641e:	2b03      	cmp	r3, #3
 8006420:	f200 80f1 	bhi.w	8006606 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006428:	2b01      	cmp	r3, #1
 800642a:	d123      	bne.n	8006474 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800642c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 fbf7 	bl	8006c24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e139      	b.n	80066b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	691a      	ldr	r2, [r3, #16]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006452:	1c5a      	adds	r2, r3, #1
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006472:	e10b      	b.n	800668c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006478:	2b02      	cmp	r3, #2
 800647a:	d14e      	bne.n	800651a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	2200      	movs	r2, #0
 8006484:	4906      	ldr	r1, [pc, #24]	; (80064a0 <HAL_I2C_Mem_Read+0x22c>)
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 fa74 	bl	8006974 <I2C_WaitOnFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d008      	beq.n	80064a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e10e      	b.n	80066b4 <HAL_I2C_Mem_Read+0x440>
 8006496:	bf00      	nop
 8006498:	00100002 	.word	0x00100002
 800649c:	ffff0000 	.word	0xffff0000
 80064a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650e:	b29b      	uxth	r3, r3
 8006510:	3b01      	subs	r3, #1
 8006512:	b29a      	uxth	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006518:	e0b8      	b.n	800668c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006520:	2200      	movs	r2, #0
 8006522:	4966      	ldr	r1, [pc, #408]	; (80066bc <HAL_I2C_Mem_Read+0x448>)
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 fa25 	bl	8006974 <I2C_WaitOnFlagUntilTimeout>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e0bf      	b.n	80066b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006542:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691a      	ldr	r2, [r3, #16]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657c:	2200      	movs	r2, #0
 800657e:	494f      	ldr	r1, [pc, #316]	; (80066bc <HAL_I2C_Mem_Read+0x448>)
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 f9f7 	bl	8006974 <I2C_WaitOnFlagUntilTimeout>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e091      	b.n	80066b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800659e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	691a      	ldr	r2, [r3, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	691a      	ldr	r2, [r3, #16]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	b2d2      	uxtb	r2, r2
 80065de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ee:	3b01      	subs	r3, #1
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006604:	e042      	b.n	800668c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006608:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 fb0a 	bl	8006c24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e04c      	b.n	80066b4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	691a      	ldr	r2, [r3, #16]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	b2d2      	uxtb	r2, r2
 8006626:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006636:	3b01      	subs	r3, #1
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006642:	b29b      	uxth	r3, r3
 8006644:	3b01      	subs	r3, #1
 8006646:	b29a      	uxth	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b04      	cmp	r3, #4
 8006658:	d118      	bne.n	800668c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006676:	3b01      	subs	r3, #1
 8006678:	b29a      	uxth	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006682:	b29b      	uxth	r3, r3
 8006684:	3b01      	subs	r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006690:	2b00      	cmp	r3, #0
 8006692:	f47f aec2 	bne.w	800641a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2220      	movs	r2, #32
 800669a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	e000      	b.n	80066b4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80066b2:	2302      	movs	r3, #2
  }
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3728      	adds	r7, #40	; 0x28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	00010004 	.word	0x00010004

080066c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b088      	sub	sp, #32
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	4608      	mov	r0, r1
 80066ca:	4611      	mov	r1, r2
 80066cc:	461a      	mov	r2, r3
 80066ce:	4603      	mov	r3, r0
 80066d0:	817b      	strh	r3, [r7, #10]
 80066d2:	460b      	mov	r3, r1
 80066d4:	813b      	strh	r3, [r7, #8]
 80066d6:	4613      	mov	r3, r2
 80066d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 f93c 	bl	8006974 <I2C_WaitOnFlagUntilTimeout>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e05f      	b.n	80067c6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006706:	897b      	ldrh	r3, [r7, #10]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	461a      	mov	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006714:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	6a3a      	ldr	r2, [r7, #32]
 800671a:	492d      	ldr	r1, [pc, #180]	; (80067d0 <I2C_RequestMemoryWrite+0x110>)
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 f980 	bl	8006a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e04c      	b.n	80067c6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800672c:	2300      	movs	r3, #0
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006744:	6a39      	ldr	r1, [r7, #32]
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 f9ea 	bl	8006b20 <I2C_WaitOnTXEFlagUntilTimeout>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00d      	beq.n	800676e <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	2b04      	cmp	r3, #4
 8006758:	d107      	bne.n	800676a <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006768:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e02b      	b.n	80067c6 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800676e:	88fb      	ldrh	r3, [r7, #6]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d105      	bne.n	8006780 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006774:	893b      	ldrh	r3, [r7, #8]
 8006776:	b2da      	uxtb	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	611a      	str	r2, [r3, #16]
 800677e:	e021      	b.n	80067c4 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006780:	893b      	ldrh	r3, [r7, #8]
 8006782:	0a1b      	lsrs	r3, r3, #8
 8006784:	b29b      	uxth	r3, r3
 8006786:	b2da      	uxtb	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800678e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006790:	6a39      	ldr	r1, [r7, #32]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 f9c4 	bl	8006b20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00d      	beq.n	80067ba <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d107      	bne.n	80067b6 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e005      	b.n	80067c6 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067ba:	893b      	ldrh	r3, [r7, #8]
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	00010002 	.word	0x00010002

080067d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af02      	add	r7, sp, #8
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	4608      	mov	r0, r1
 80067de:	4611      	mov	r1, r2
 80067e0:	461a      	mov	r2, r3
 80067e2:	4603      	mov	r3, r0
 80067e4:	817b      	strh	r3, [r7, #10]
 80067e6:	460b      	mov	r3, r1
 80067e8:	813b      	strh	r3, [r7, #8]
 80067ea:	4613      	mov	r3, r2
 80067ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800680c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	2200      	movs	r2, #0
 8006816:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 f8aa 	bl	8006974 <I2C_WaitOnFlagUntilTimeout>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e09e      	b.n	8006968 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800682a:	897b      	ldrh	r3, [r7, #10]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	461a      	mov	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006838:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	6a3a      	ldr	r2, [r7, #32]
 800683e:	494c      	ldr	r1, [pc, #304]	; (8006970 <I2C_RequestMemoryRead+0x19c>)
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 f8ee 	bl	8006a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e08b      	b.n	8006968 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006850:	2300      	movs	r3, #0
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	617b      	str	r3, [r7, #20]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	617b      	str	r3, [r7, #20]
 8006864:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006868:	6a39      	ldr	r1, [r7, #32]
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 f958 	bl	8006b20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00d      	beq.n	8006892 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	2b04      	cmp	r3, #4
 800687c:	d107      	bne.n	800688e <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800688c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e06a      	b.n	8006968 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006892:	88fb      	ldrh	r3, [r7, #6]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d105      	bne.n	80068a4 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006898:	893b      	ldrh	r3, [r7, #8]
 800689a:	b2da      	uxtb	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	611a      	str	r2, [r3, #16]
 80068a2:	e021      	b.n	80068e8 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80068a4:	893b      	ldrh	r3, [r7, #8]
 80068a6:	0a1b      	lsrs	r3, r3, #8
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b4:	6a39      	ldr	r1, [r7, #32]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f932 	bl	8006b20 <I2C_WaitOnTXEFlagUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00d      	beq.n	80068de <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d107      	bne.n	80068da <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e044      	b.n	8006968 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068de:	893b      	ldrh	r3, [r7, #8]
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ea:	6a39      	ldr	r1, [r7, #32]
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 f917 	bl	8006b20 <I2C_WaitOnTXEFlagUntilTimeout>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00d      	beq.n	8006914 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d107      	bne.n	8006910 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800690e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e029      	b.n	8006968 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006922:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	2200      	movs	r2, #0
 800692c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 f81f 	bl	8006974 <I2C_WaitOnFlagUntilTimeout>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e013      	b.n	8006968 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006940:	897b      	ldrh	r3, [r7, #10]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	f043 0301 	orr.w	r3, r3, #1
 8006948:	b2da      	uxtb	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	6a3a      	ldr	r2, [r7, #32]
 8006954:	4906      	ldr	r1, [pc, #24]	; (8006970 <I2C_RequestMemoryRead+0x19c>)
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 f863 	bl	8006a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e000      	b.n	8006968 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	00010002 	.word	0x00010002

08006974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	4613      	mov	r3, r2
 8006982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006984:	e025      	b.n	80069d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698c:	d021      	beq.n	80069d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800698e:	f7fe fb91 	bl	80050b4 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d302      	bcc.n	80069a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d116      	bne.n	80069d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	f043 0220 	orr.w	r2, r3, #32
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e023      	b.n	8006a1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	0c1b      	lsrs	r3, r3, #16
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d10d      	bne.n	80069f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	43da      	mvns	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4013      	ands	r3, r2
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	bf0c      	ite	eq
 80069ee:	2301      	moveq	r3, #1
 80069f0:	2300      	movne	r3, #0
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	e00c      	b.n	8006a12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	43da      	mvns	r2, r3
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4013      	ands	r3, r2
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	bf0c      	ite	eq
 8006a0a:	2301      	moveq	r3, #1
 8006a0c:	2300      	movne	r3, #0
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d0b6      	beq.n	8006986 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	607a      	str	r2, [r7, #4]
 8006a2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a30:	e051      	b.n	8006ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a40:	d123      	bne.n	8006a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	f043 0204 	orr.w	r2, r3, #4
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e046      	b.n	8006b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a90:	d021      	beq.n	8006ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a92:	f7fe fb0f 	bl	80050b4 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d302      	bcc.n	8006aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d116      	bne.n	8006ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	f043 0220 	orr.w	r2, r3, #32
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e020      	b.n	8006b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	0c1b      	lsrs	r3, r3, #16
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d10c      	bne.n	8006afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	43da      	mvns	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	4013      	ands	r3, r2
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	bf14      	ite	ne
 8006af2:	2301      	movne	r3, #1
 8006af4:	2300      	moveq	r3, #0
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	e00b      	b.n	8006b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	43da      	mvns	r2, r3
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	4013      	ands	r3, r2
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	bf14      	ite	ne
 8006b0c:	2301      	movne	r3, #1
 8006b0e:	2300      	moveq	r3, #0
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d18d      	bne.n	8006a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b2c:	e02d      	b.n	8006b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f8ce 	bl	8006cd0 <I2C_IsAcknowledgeFailed>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e02d      	b.n	8006b9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b44:	d021      	beq.n	8006b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b46:	f7fe fab5 	bl	80050b4 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d302      	bcc.n	8006b5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d116      	bne.n	8006b8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	f043 0220 	orr.w	r2, r3, #32
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e007      	b.n	8006b9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b94:	2b80      	cmp	r3, #128	; 0x80
 8006b96:	d1ca      	bne.n	8006b2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bae:	e02d      	b.n	8006c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f88d 	bl	8006cd0 <I2C_IsAcknowledgeFailed>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e02d      	b.n	8006c1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc6:	d021      	beq.n	8006c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bc8:	f7fe fa74 	bl	80050b4 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d302      	bcc.n	8006bde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d116      	bne.n	8006c0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf8:	f043 0220 	orr.w	r2, r3, #32
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e007      	b.n	8006c1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d1ca      	bne.n	8006bb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c30:	e042      	b.n	8006cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	f003 0310 	and.w	r3, r3, #16
 8006c3c:	2b10      	cmp	r3, #16
 8006c3e:	d119      	bne.n	8006c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f06f 0210 	mvn.w	r2, #16
 8006c48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e029      	b.n	8006cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c74:	f7fe fa1e 	bl	80050b4 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d302      	bcc.n	8006c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d116      	bne.n	8006cb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca4:	f043 0220 	orr.w	r2, r3, #32
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e007      	b.n	8006cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc2:	2b40      	cmp	r3, #64	; 0x40
 8006cc4:	d1b5      	bne.n	8006c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce6:	d11b      	bne.n	8006d20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006cf0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	f043 0204 	orr.w	r2, r3, #4
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e000      	b.n	8006d22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006d2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d30:	b08f      	sub	sp, #60	; 0x3c
 8006d32:	af0a      	add	r7, sp, #40	; 0x28
 8006d34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e10f      	b.n	8006f60 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d106      	bne.n	8006d60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f00e fa0e 	bl	801517c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2203      	movs	r2, #3
 8006d64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d102      	bne.n	8006d7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f006 f911 	bl	800cfa6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	603b      	str	r3, [r7, #0]
 8006d8a:	687e      	ldr	r6, [r7, #4]
 8006d8c:	466d      	mov	r5, sp
 8006d8e:	f106 0410 	add.w	r4, r6, #16
 8006d92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006da2:	1d33      	adds	r3, r6, #4
 8006da4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006da6:	6838      	ldr	r0, [r7, #0]
 8006da8:	f005 ffe8 	bl	800cd7c <USB_CoreInit>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d005      	beq.n	8006dbe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2202      	movs	r2, #2
 8006db6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e0d0      	b.n	8006f60 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f006 f8ff 	bl	800cfc8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]
 8006dce:	e04a      	b.n	8006e66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006dd0:	7bfa      	ldrb	r2, [r7, #15]
 8006dd2:	6879      	ldr	r1, [r7, #4]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	1a9b      	subs	r3, r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	440b      	add	r3, r1
 8006dde:	333d      	adds	r3, #61	; 0x3d
 8006de0:	2201      	movs	r2, #1
 8006de2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006de4:	7bfa      	ldrb	r2, [r7, #15]
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	4613      	mov	r3, r2
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	1a9b      	subs	r3, r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	440b      	add	r3, r1
 8006df2:	333c      	adds	r3, #60	; 0x3c
 8006df4:	7bfa      	ldrb	r2, [r7, #15]
 8006df6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006df8:	7bfa      	ldrb	r2, [r7, #15]
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	b298      	uxth	r0, r3
 8006dfe:	6879      	ldr	r1, [r7, #4]
 8006e00:	4613      	mov	r3, r2
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	1a9b      	subs	r3, r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	440b      	add	r3, r1
 8006e0a:	3342      	adds	r3, #66	; 0x42
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006e10:	7bfa      	ldrb	r2, [r7, #15]
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	4613      	mov	r3, r2
 8006e16:	00db      	lsls	r3, r3, #3
 8006e18:	1a9b      	subs	r3, r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	440b      	add	r3, r1
 8006e1e:	333f      	adds	r3, #63	; 0x3f
 8006e20:	2200      	movs	r2, #0
 8006e22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006e24:	7bfa      	ldrb	r2, [r7, #15]
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	1a9b      	subs	r3, r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	440b      	add	r3, r1
 8006e32:	3344      	adds	r3, #68	; 0x44
 8006e34:	2200      	movs	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006e38:	7bfa      	ldrb	r2, [r7, #15]
 8006e3a:	6879      	ldr	r1, [r7, #4]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	1a9b      	subs	r3, r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	440b      	add	r3, r1
 8006e46:	3348      	adds	r3, #72	; 0x48
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006e4c:	7bfa      	ldrb	r2, [r7, #15]
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4613      	mov	r3, r2
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	1a9b      	subs	r3, r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	3350      	adds	r3, #80	; 0x50
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	3301      	adds	r3, #1
 8006e64:	73fb      	strb	r3, [r7, #15]
 8006e66:	7bfa      	ldrb	r2, [r7, #15]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d3af      	bcc.n	8006dd0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]
 8006e74:	e044      	b.n	8006f00 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006e76:	7bfa      	ldrb	r2, [r7, #15]
 8006e78:	6879      	ldr	r1, [r7, #4]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	1a9b      	subs	r3, r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	440b      	add	r3, r1
 8006e84:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006e88:	2200      	movs	r2, #0
 8006e8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006e8c:	7bfa      	ldrb	r2, [r7, #15]
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	4613      	mov	r3, r2
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	1a9b      	subs	r3, r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	440b      	add	r3, r1
 8006e9a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006e9e:	7bfa      	ldrb	r2, [r7, #15]
 8006ea0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006ea2:	7bfa      	ldrb	r2, [r7, #15]
 8006ea4:	6879      	ldr	r1, [r7, #4]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	1a9b      	subs	r3, r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	440b      	add	r3, r1
 8006eb0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006eb8:	7bfa      	ldrb	r2, [r7, #15]
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	1a9b      	subs	r3, r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006ece:	7bfa      	ldrb	r2, [r7, #15]
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006ee4:	7bfa      	ldrb	r2, [r7, #15]
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	1a9b      	subs	r3, r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	440b      	add	r3, r1
 8006ef2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
 8006efc:	3301      	adds	r3, #1
 8006efe:	73fb      	strb	r3, [r7, #15]
 8006f00:	7bfa      	ldrb	r2, [r7, #15]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d3b5      	bcc.n	8006e76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	687e      	ldr	r6, [r7, #4]
 8006f12:	466d      	mov	r5, sp
 8006f14:	f106 0410 	add.w	r4, r6, #16
 8006f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006f24:	e885 0003 	stmia.w	r5, {r0, r1}
 8006f28:	1d33      	adds	r3, r6, #4
 8006f2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f2c:	6838      	ldr	r0, [r7, #0]
 8006f2e:	f006 f875 	bl	800d01c <USB_DevInit>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d005      	beq.n	8006f44 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e00d      	b.n	8006f60 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f007 f86a 	bl	800e032 <USB_DevDisconnect>

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d101      	bne.n	8006f84 <HAL_PCD_Start+0x1c>
 8006f80:	2302      	movs	r3, #2
 8006f82:	e020      	b.n	8006fc6 <HAL_PCD_Start+0x5e>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d109      	bne.n	8006fa8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d005      	beq.n	8006fa8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f007 f828 	bl	800e002 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f005 ffe4 	bl	800cf84 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006fce:	b590      	push	{r4, r7, lr}
 8006fd0:	b08d      	sub	sp, #52	; 0x34
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fdc:	6a3b      	ldr	r3, [r7, #32]
 8006fde:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f007 f8cf 	bl	800e188 <USB_GetMode>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f040 838e 	bne.w	800770e <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f007 f833 	bl	800e062 <USB_ReadInterrupts>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 8384 	beq.w	800770c <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4618      	mov	r0, r3
 800700a:	f007 f82a 	bl	800e062 <USB_ReadInterrupts>
 800700e:	4603      	mov	r3, r0
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b02      	cmp	r3, #2
 8007016:	d107      	bne.n	8007028 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	695a      	ldr	r2, [r3, #20]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f002 0202 	and.w	r2, r2, #2
 8007026:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	f007 f818 	bl	800e062 <USB_ReadInterrupts>
 8007032:	4603      	mov	r3, r0
 8007034:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007038:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800703c:	d17b      	bne.n	8007136 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4618      	mov	r0, r3
 8007048:	f007 f81e 	bl	800e088 <USB_ReadDevAllOutEpInterrupt>
 800704c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800704e:	e06f      	b.n	8007130 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d064      	beq.n	8007124 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	4611      	mov	r1, r2
 8007064:	4618      	mov	r0, r3
 8007066:	f007 f843 	bl	800e0f0 <USB_ReadDevOutEPInterrupt>
 800706a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00c      	beq.n	8007090 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007082:	461a      	mov	r2, r3
 8007084:	2301      	movs	r3, #1
 8007086:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fe0e 	bl	8007cac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	f003 0308 	and.w	r3, r3, #8
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00c      	beq.n	80070b4 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800709a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 ff0d 	bl	8007ebc <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ae:	461a      	mov	r2, r3
 80070b0:	2308      	movs	r3, #8
 80070b2:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	f003 0310 	and.w	r3, r3, #16
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d008      	beq.n	80070d0 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ca:	461a      	mov	r2, r3
 80070cc:	2310      	movs	r3, #16
 80070ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	f003 0320 	and.w	r3, r3, #32
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d015      	beq.n	8007106 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d108      	bne.n	80070f4 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070ec:	461a      	mov	r2, r3
 80070ee:	2101      	movs	r1, #1
 80070f0:	f007 f88e 	bl	800e210 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007100:	461a      	mov	r2, r3
 8007102:	2320      	movs	r3, #32
 8007104:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d009      	beq.n	8007124 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711c:	461a      	mov	r2, r3
 800711e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007122:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	3301      	adds	r3, #1
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712c:	085b      	lsrs	r3, r3, #1
 800712e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007132:	2b00      	cmp	r3, #0
 8007134:	d18c      	bne.n	8007050 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4618      	mov	r0, r3
 800713c:	f006 ff91 	bl	800e062 <USB_ReadInterrupts>
 8007140:	4603      	mov	r3, r0
 8007142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007146:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800714a:	f040 80c4 	bne.w	80072d6 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4618      	mov	r0, r3
 8007154:	f006 ffb2 	bl	800e0bc <USB_ReadDevAllInEpInterrupt>
 8007158:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800715e:	e0b6      	b.n	80072ce <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 80ab 	beq.w	80072c2 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007172:	b2d2      	uxtb	r2, r2
 8007174:	4611      	mov	r1, r2
 8007176:	4618      	mov	r0, r3
 8007178:	f006 ffd8 	bl	800e12c <USB_ReadDevInEPInterrupt>
 800717c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b00      	cmp	r3, #0
 8007186:	d05b      	beq.n	8007240 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	f003 030f 	and.w	r3, r3, #15
 800718e:	2201      	movs	r2, #1
 8007190:	fa02 f303 	lsl.w	r3, r2, r3
 8007194:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	43db      	mvns	r3, r3
 80071a2:	69f9      	ldr	r1, [r7, #28]
 80071a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071a8:	4013      	ands	r3, r2
 80071aa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b8:	461a      	mov	r2, r3
 80071ba:	2301      	movs	r3, #1
 80071bc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d11b      	bne.n	80071fe <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ca:	4613      	mov	r3, r2
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	1a9b      	subs	r3, r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	440b      	add	r3, r1
 80071d4:	3348      	adds	r3, #72	; 0x48
 80071d6:	6819      	ldr	r1, [r3, #0]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071dc:	4613      	mov	r3, r2
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	1a9b      	subs	r3, r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4403      	add	r3, r0
 80071e6:	3344      	adds	r3, #68	; 0x44
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4419      	add	r1, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071f0:	4613      	mov	r3, r2
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	1a9b      	subs	r3, r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4403      	add	r3, r0
 80071fa:	3348      	adds	r3, #72	; 0x48
 80071fc:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	b2db      	uxtb	r3, r3
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f00e f83a 	bl	801527e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d116      	bne.n	8007240 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	d113      	bne.n	8007240 <HAL_PCD_IRQHandler+0x272>
 8007218:	6879      	ldr	r1, [r7, #4]
 800721a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800721c:	4613      	mov	r3, r2
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	1a9b      	subs	r3, r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	440b      	add	r3, r1
 8007226:	3350      	adds	r3, #80	; 0x50
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d108      	bne.n	8007240 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007238:	461a      	mov	r2, r3
 800723a:	2101      	movs	r1, #1
 800723c:	f006 ffe8 	bl	800e210 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	f003 0308 	and.w	r3, r3, #8
 8007246:	2b00      	cmp	r3, #0
 8007248:	d008      	beq.n	800725c <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	4413      	add	r3, r2
 8007252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007256:	461a      	mov	r2, r3
 8007258:	2308      	movs	r3, #8
 800725a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	f003 0310 	and.w	r3, r3, #16
 8007262:	2b00      	cmp	r3, #0
 8007264:	d008      	beq.n	8007278 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007272:	461a      	mov	r2, r3
 8007274:	2310      	movs	r3, #16
 8007276:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727e:	2b00      	cmp	r3, #0
 8007280:	d008      	beq.n	8007294 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728e:	461a      	mov	r2, r3
 8007290:	2340      	movs	r3, #64	; 0x40
 8007292:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d008      	beq.n	80072b0 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072aa:	461a      	mov	r2, r3
 80072ac:	2302      	movs	r3, #2
 80072ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80072ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fc67 	bl	8007b90 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	3301      	adds	r3, #1
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80072c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ca:	085b      	lsrs	r3, r3, #1
 80072cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f47f af45 	bne.w	8007160 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4618      	mov	r0, r3
 80072dc:	f006 fec1 	bl	800e062 <USB_ReadInterrupts>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072ea:	d122      	bne.n	8007332 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	69fa      	ldr	r2, [r7, #28]
 80072f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072fa:	f023 0301 	bic.w	r3, r3, #1
 80072fe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007306:	2b01      	cmp	r3, #1
 8007308:	d108      	bne.n	800731c <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007312:	2100      	movs	r1, #0
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fe89 	bl	800802c <HAL_PCDEx_LPM_Callback>
 800731a:	e002      	b.n	8007322 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f00e f825 	bl	801536c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	695a      	ldr	r2, [r3, #20]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007330:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4618      	mov	r0, r3
 8007338:	f006 fe93 	bl	800e062 <USB_ReadInterrupts>
 800733c:	4603      	mov	r3, r0
 800733e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007346:	d112      	bne.n	800736e <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b01      	cmp	r3, #1
 8007356:	d102      	bne.n	800735e <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f00d ffe1 	bl	8015320 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	695a      	ldr	r2, [r3, #20]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800736c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f006 fe75 	bl	800e062 <USB_ReadInterrupts>
 8007378:	4603      	mov	r3, r0
 800737a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800737e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007382:	f040 80a7 	bne.w	80074d4 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007394:	f023 0301 	bic.w	r3, r3, #1
 8007398:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2110      	movs	r1, #16
 80073a0:	4618      	mov	r0, r3
 80073a2:	f005 ffad 	bl	800d300 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073a6:	2300      	movs	r3, #0
 80073a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073aa:	e036      	b.n	800741a <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80073ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b8:	461a      	mov	r2, r3
 80073ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073be:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073d0:	0151      	lsls	r1, r2, #5
 80073d2:	69fa      	ldr	r2, [r7, #28]
 80073d4:	440a      	add	r2, r1
 80073d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80073e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ec:	461a      	mov	r2, r3
 80073ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007404:	0151      	lsls	r1, r2, #5
 8007406:	69fa      	ldr	r2, [r7, #28]
 8007408:	440a      	add	r2, r1
 800740a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800740e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007412:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007416:	3301      	adds	r3, #1
 8007418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007420:	429a      	cmp	r2, r3
 8007422:	d3c3      	bcc.n	80073ac <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	69fa      	ldr	r2, [r7, #28]
 800742e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007432:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007436:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743c:	2b00      	cmp	r3, #0
 800743e:	d016      	beq.n	800746e <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007450:	f043 030b 	orr.w	r3, r3, #11
 8007454:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007460:	69fa      	ldr	r2, [r7, #28]
 8007462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007466:	f043 030b 	orr.w	r3, r3, #11
 800746a:	6453      	str	r3, [r2, #68]	; 0x44
 800746c:	e015      	b.n	800749a <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	69fa      	ldr	r2, [r7, #28]
 8007478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800747c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007480:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007484:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	69fa      	ldr	r2, [r7, #28]
 8007490:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007494:	f043 030b 	orr.w	r3, r3, #11
 8007498:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69fa      	ldr	r2, [r7, #28]
 80074a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074a8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80074ac:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6818      	ldr	r0, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80074be:	461a      	mov	r2, r3
 80074c0:	f006 fea6 	bl	800e210 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	695a      	ldr	r2, [r3, #20]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80074d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4618      	mov	r0, r3
 80074da:	f006 fdc2 	bl	800e062 <USB_ReadInterrupts>
 80074de:	4603      	mov	r3, r0
 80074e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e8:	d124      	bne.n	8007534 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f006 fe58 	bl	800e1a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f005 ff62 	bl	800d3c2 <USB_GetDevSpeed>
 80074fe:	4603      	mov	r3, r0
 8007500:	461a      	mov	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681c      	ldr	r4, [r3, #0]
 800750a:	f001 f971 	bl	80087f0 <HAL_RCC_GetHCLKFreq>
 800750e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007514:	b2db      	uxtb	r3, r3
 8007516:	461a      	mov	r2, r3
 8007518:	4620      	mov	r0, r4
 800751a:	f005 fc91 	bl	800ce40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f00d fed5 	bl	80152ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	695a      	ldr	r2, [r3, #20]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007532:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4618      	mov	r0, r3
 800753a:	f006 fd92 	bl	800e062 <USB_ReadInterrupts>
 800753e:	4603      	mov	r3, r0
 8007540:	f003 0310 	and.w	r3, r3, #16
 8007544:	2b10      	cmp	r3, #16
 8007546:	d161      	bne.n	800760c <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 0210 	bic.w	r2, r2, #16
 8007556:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f003 020f 	and.w	r2, r3, #15
 8007564:	4613      	mov	r3, r2
 8007566:	00db      	lsls	r3, r3, #3
 8007568:	1a9b      	subs	r3, r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	4413      	add	r3, r2
 8007574:	3304      	adds	r3, #4
 8007576:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	0c5b      	lsrs	r3, r3, #17
 800757c:	f003 030f 	and.w	r3, r3, #15
 8007580:	2b02      	cmp	r3, #2
 8007582:	d124      	bne.n	80075ce <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800758a:	4013      	ands	r3, r2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d035      	beq.n	80075fc <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	091b      	lsrs	r3, r3, #4
 8007598:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800759a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800759e:	b29b      	uxth	r3, r3
 80075a0:	461a      	mov	r2, r3
 80075a2:	6a38      	ldr	r0, [r7, #32]
 80075a4:	f006 fc0a 	bl	800ddbc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	68da      	ldr	r2, [r3, #12]
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	091b      	lsrs	r3, r3, #4
 80075b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075b4:	441a      	add	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	699a      	ldr	r2, [r3, #24]
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	091b      	lsrs	r3, r3, #4
 80075c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075c6:	441a      	add	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	619a      	str	r2, [r3, #24]
 80075cc:	e016      	b.n	80075fc <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	0c5b      	lsrs	r3, r3, #17
 80075d2:	f003 030f 	and.w	r3, r3, #15
 80075d6:	2b06      	cmp	r3, #6
 80075d8:	d110      	bne.n	80075fc <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80075e0:	2208      	movs	r2, #8
 80075e2:	4619      	mov	r1, r3
 80075e4:	6a38      	ldr	r0, [r7, #32]
 80075e6:	f006 fbe9 	bl	800ddbc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	699a      	ldr	r2, [r3, #24]
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	091b      	lsrs	r3, r3, #4
 80075f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075f6:	441a      	add	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	699a      	ldr	r2, [r3, #24]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0210 	orr.w	r2, r2, #16
 800760a:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4618      	mov	r0, r3
 8007612:	f006 fd26 	bl	800e062 <USB_ReadInterrupts>
 8007616:	4603      	mov	r3, r0
 8007618:	f003 0308 	and.w	r3, r3, #8
 800761c:	2b08      	cmp	r3, #8
 800761e:	d10a      	bne.n	8007636 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f00d fe46 	bl	80152b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	695a      	ldr	r2, [r3, #20]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f002 0208 	and.w	r2, r2, #8
 8007634:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4618      	mov	r0, r3
 800763c:	f006 fd11 	bl	800e062 <USB_ReadInterrupts>
 8007640:	4603      	mov	r3, r0
 8007642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800764a:	d10f      	bne.n	800766c <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	b2db      	uxtb	r3, r3
 8007654:	4619      	mov	r1, r3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f00d fea8 	bl	80153ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	695a      	ldr	r2, [r3, #20]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800766a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4618      	mov	r0, r3
 8007672:	f006 fcf6 	bl	800e062 <USB_ReadInterrupts>
 8007676:	4603      	mov	r3, r0
 8007678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800767c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007680:	d10f      	bne.n	80076a2 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	b2db      	uxtb	r3, r3
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f00d fe7b 	bl	8015388 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	695a      	ldr	r2, [r3, #20]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80076a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f006 fcdb 	bl	800e062 <USB_ReadInterrupts>
 80076ac:	4603      	mov	r3, r0
 80076ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b6:	d10a      	bne.n	80076ce <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f00d fe89 	bl	80153d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	695a      	ldr	r2, [r3, #20]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80076cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f006 fcc5 	bl	800e062 <USB_ReadInterrupts>
 80076d8:	4603      	mov	r3, r0
 80076da:	f003 0304 	and.w	r3, r3, #4
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d115      	bne.n	800770e <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f00d fe79 	bl	80153ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	6859      	ldr	r1, [r3, #4]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	430a      	orrs	r2, r1
 8007708:	605a      	str	r2, [r3, #4]
 800770a:	e000      	b.n	800770e <HAL_PCD_IRQHandler+0x740>
      return;
 800770c:	bf00      	nop
    }
  }
}
 800770e:	3734      	adds	r7, #52	; 0x34
 8007710:	46bd      	mov	sp, r7
 8007712:	bd90      	pop	{r4, r7, pc}

08007714 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007726:	2b01      	cmp	r3, #1
 8007728:	d101      	bne.n	800772e <HAL_PCD_SetAddress+0x1a>
 800772a:	2302      	movs	r3, #2
 800772c:	e013      	b.n	8007756 <HAL_PCD_SetAddress+0x42>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	78fa      	ldrb	r2, [r7, #3]
 800773a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	78fa      	ldrb	r2, [r7, #3]
 8007744:	4611      	mov	r1, r2
 8007746:	4618      	mov	r0, r3
 8007748:	f006 fc35 	bl	800dfb6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	4608      	mov	r0, r1
 8007768:	4611      	mov	r1, r2
 800776a:	461a      	mov	r2, r3
 800776c:	4603      	mov	r3, r0
 800776e:	70fb      	strb	r3, [r7, #3]
 8007770:	460b      	mov	r3, r1
 8007772:	803b      	strh	r3, [r7, #0]
 8007774:	4613      	mov	r3, r2
 8007776:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800777c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007780:	2b00      	cmp	r3, #0
 8007782:	da0f      	bge.n	80077a4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	f003 020f 	and.w	r2, r3, #15
 800778a:	4613      	mov	r3, r2
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	1a9b      	subs	r3, r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	3338      	adds	r3, #56	; 0x38
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	4413      	add	r3, r2
 8007798:	3304      	adds	r3, #4
 800779a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2201      	movs	r2, #1
 80077a0:	705a      	strb	r2, [r3, #1]
 80077a2:	e00f      	b.n	80077c4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077a4:	78fb      	ldrb	r3, [r7, #3]
 80077a6:	f003 020f 	and.w	r2, r3, #15
 80077aa:	4613      	mov	r3, r2
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	1a9b      	subs	r3, r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	4413      	add	r3, r2
 80077ba:	3304      	adds	r3, #4
 80077bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80077c4:	78fb      	ldrb	r3, [r7, #3]
 80077c6:	f003 030f 	and.w	r3, r3, #15
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80077d0:	883a      	ldrh	r2, [r7, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	78ba      	ldrb	r2, [r7, #2]
 80077da:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	785b      	ldrb	r3, [r3, #1]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d004      	beq.n	80077ee <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80077ee:	78bb      	ldrb	r3, [r7, #2]
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d102      	bne.n	80077fa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007800:	2b01      	cmp	r3, #1
 8007802:	d101      	bne.n	8007808 <HAL_PCD_EP_Open+0xaa>
 8007804:	2302      	movs	r3, #2
 8007806:	e00e      	b.n	8007826 <HAL_PCD_EP_Open+0xc8>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68f9      	ldr	r1, [r7, #12]
 8007816:	4618      	mov	r0, r3
 8007818:	f005 fdf8 	bl	800d40c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007824:	7afb      	ldrb	r3, [r7, #11]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	460b      	mov	r3, r1
 8007838:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800783a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800783e:	2b00      	cmp	r3, #0
 8007840:	da0f      	bge.n	8007862 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007842:	78fb      	ldrb	r3, [r7, #3]
 8007844:	f003 020f 	and.w	r2, r3, #15
 8007848:	4613      	mov	r3, r2
 800784a:	00db      	lsls	r3, r3, #3
 800784c:	1a9b      	subs	r3, r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	3338      	adds	r3, #56	; 0x38
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	4413      	add	r3, r2
 8007856:	3304      	adds	r3, #4
 8007858:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2201      	movs	r2, #1
 800785e:	705a      	strb	r2, [r3, #1]
 8007860:	e00f      	b.n	8007882 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007862:	78fb      	ldrb	r3, [r7, #3]
 8007864:	f003 020f 	and.w	r2, r3, #15
 8007868:	4613      	mov	r3, r2
 800786a:	00db      	lsls	r3, r3, #3
 800786c:	1a9b      	subs	r3, r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	4413      	add	r3, r2
 8007878:	3304      	adds	r3, #4
 800787a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007882:	78fb      	ldrb	r3, [r7, #3]
 8007884:	f003 030f 	and.w	r3, r3, #15
 8007888:	b2da      	uxtb	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007894:	2b01      	cmp	r3, #1
 8007896:	d101      	bne.n	800789c <HAL_PCD_EP_Close+0x6e>
 8007898:	2302      	movs	r3, #2
 800789a:	e00e      	b.n	80078ba <HAL_PCD_EP_Close+0x8c>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68f9      	ldr	r1, [r7, #12]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f005 fe36 	bl	800d51c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b086      	sub	sp, #24
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	607a      	str	r2, [r7, #4]
 80078cc:	603b      	str	r3, [r7, #0]
 80078ce:	460b      	mov	r3, r1
 80078d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078d2:	7afb      	ldrb	r3, [r7, #11]
 80078d4:	f003 020f 	and.w	r2, r3, #15
 80078d8:	4613      	mov	r3, r2
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	1a9b      	subs	r3, r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	4413      	add	r3, r2
 80078e8:	3304      	adds	r3, #4
 80078ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	2200      	movs	r2, #0
 80078fc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	2200      	movs	r2, #0
 8007902:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007904:	7afb      	ldrb	r3, [r7, #11]
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	b2da      	uxtb	r2, r3
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d102      	bne.n	800791e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800791e:	7afb      	ldrb	r3, [r7, #11]
 8007920:	f003 030f 	and.w	r3, r3, #15
 8007924:	2b00      	cmp	r3, #0
 8007926:	d109      	bne.n	800793c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6818      	ldr	r0, [r3, #0]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	b2db      	uxtb	r3, r3
 8007932:	461a      	mov	r2, r3
 8007934:	6979      	ldr	r1, [r7, #20]
 8007936:	f006 f8b9 	bl	800daac <USB_EP0StartXfer>
 800793a:	e008      	b.n	800794e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6818      	ldr	r0, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	b2db      	uxtb	r3, r3
 8007946:	461a      	mov	r2, r3
 8007948:	6979      	ldr	r1, [r7, #20]
 800794a:	f005 fe6b 	bl	800d624 <USB_EPStartXfer>
  }

  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007964:	78fb      	ldrb	r3, [r7, #3]
 8007966:	f003 020f 	and.w	r2, r3, #15
 800796a:	6879      	ldr	r1, [r7, #4]
 800796c:	4613      	mov	r3, r2
 800796e:	00db      	lsls	r3, r3, #3
 8007970:	1a9b      	subs	r3, r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	440b      	add	r3, r1
 8007976:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800797a:	681b      	ldr	r3, [r3, #0]
}
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	607a      	str	r2, [r7, #4]
 8007992:	603b      	str	r3, [r7, #0]
 8007994:	460b      	mov	r3, r1
 8007996:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007998:	7afb      	ldrb	r3, [r7, #11]
 800799a:	f003 020f 	and.w	r2, r3, #15
 800799e:	4613      	mov	r3, r2
 80079a0:	00db      	lsls	r3, r3, #3
 80079a2:	1a9b      	subs	r3, r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	3338      	adds	r3, #56	; 0x38
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4413      	add	r3, r2
 80079ac:	3304      	adds	r3, #4
 80079ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	2200      	movs	r2, #0
 80079c0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2201      	movs	r2, #1
 80079c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079c8:	7afb      	ldrb	r3, [r7, #11]
 80079ca:	f003 030f 	and.w	r3, r3, #15
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d102      	bne.n	80079e2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80079e2:	7afb      	ldrb	r3, [r7, #11]
 80079e4:	f003 030f 	and.w	r3, r3, #15
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d109      	bne.n	8007a00 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6818      	ldr	r0, [r3, #0]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	461a      	mov	r2, r3
 80079f8:	6979      	ldr	r1, [r7, #20]
 80079fa:	f006 f857 	bl	800daac <USB_EP0StartXfer>
 80079fe:	e008      	b.n	8007a12 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6818      	ldr	r0, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	6979      	ldr	r1, [r7, #20]
 8007a0e:	f005 fe09 	bl	800d624 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007a28:	78fb      	ldrb	r3, [r7, #3]
 8007a2a:	f003 020f 	and.w	r2, r3, #15
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d901      	bls.n	8007a3a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e050      	b.n	8007adc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	da0f      	bge.n	8007a62 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a42:	78fb      	ldrb	r3, [r7, #3]
 8007a44:	f003 020f 	and.w	r2, r3, #15
 8007a48:	4613      	mov	r3, r2
 8007a4a:	00db      	lsls	r3, r3, #3
 8007a4c:	1a9b      	subs	r3, r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	3338      	adds	r3, #56	; 0x38
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	4413      	add	r3, r2
 8007a56:	3304      	adds	r3, #4
 8007a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	705a      	strb	r2, [r3, #1]
 8007a60:	e00d      	b.n	8007a7e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007a62:	78fa      	ldrb	r2, [r7, #3]
 8007a64:	4613      	mov	r3, r2
 8007a66:	00db      	lsls	r3, r3, #3
 8007a68:	1a9b      	subs	r3, r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	4413      	add	r3, r2
 8007a74:	3304      	adds	r3, #4
 8007a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a84:	78fb      	ldrb	r3, [r7, #3]
 8007a86:	f003 030f 	and.w	r3, r3, #15
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d101      	bne.n	8007a9e <HAL_PCD_EP_SetStall+0x82>
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	e01e      	b.n	8007adc <HAL_PCD_EP_SetStall+0xc0>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68f9      	ldr	r1, [r7, #12]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f006 f9ae 	bl	800de0e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	f003 030f 	and.w	r3, r3, #15
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10a      	bne.n	8007ad2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6818      	ldr	r0, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	b2d9      	uxtb	r1, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007acc:	461a      	mov	r2, r3
 8007ace:	f006 fb9f 	bl	800e210 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	460b      	mov	r3, r1
 8007aee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	f003 020f 	and.w	r2, r3, #15
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d901      	bls.n	8007b02 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e042      	b.n	8007b88 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	da0f      	bge.n	8007b2a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b0a:	78fb      	ldrb	r3, [r7, #3]
 8007b0c:	f003 020f 	and.w	r2, r3, #15
 8007b10:	4613      	mov	r3, r2
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	3338      	adds	r3, #56	; 0x38
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	3304      	adds	r3, #4
 8007b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2201      	movs	r2, #1
 8007b26:	705a      	strb	r2, [r3, #1]
 8007b28:	e00f      	b.n	8007b4a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	f003 020f 	and.w	r2, r3, #15
 8007b30:	4613      	mov	r3, r2
 8007b32:	00db      	lsls	r3, r3, #3
 8007b34:	1a9b      	subs	r3, r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	4413      	add	r3, r2
 8007b40:	3304      	adds	r3, #4
 8007b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b50:	78fb      	ldrb	r3, [r7, #3]
 8007b52:	f003 030f 	and.w	r3, r3, #15
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d101      	bne.n	8007b6a <HAL_PCD_EP_ClrStall+0x86>
 8007b66:	2302      	movs	r3, #2
 8007b68:	e00e      	b.n	8007b88 <HAL_PCD_EP_ClrStall+0xa4>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68f9      	ldr	r1, [r7, #12]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f006 f9b6 	bl	800deea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08a      	sub	sp, #40	; 0x28
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	1a9b      	subs	r3, r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	3338      	adds	r3, #56	; 0x38
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	699a      	ldr	r2, [r3, #24]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	695b      	ldr	r3, [r3, #20]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d901      	bls.n	8007bc8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e06c      	b.n	8007ca2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	695a      	ldr	r2, [r3, #20]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d902      	bls.n	8007be4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	3303      	adds	r3, #3
 8007be8:	089b      	lsrs	r3, r3, #2
 8007bea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007bec:	e02b      	b.n	8007c46 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	695a      	ldr	r2, [r3, #20]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d902      	bls.n	8007c0a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	3303      	adds	r3, #3
 8007c0e:	089b      	lsrs	r3, r3, #2
 8007c10:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	68d9      	ldr	r1, [r3, #12]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	4603      	mov	r3, r0
 8007c28:	6978      	ldr	r0, [r7, #20]
 8007c2a:	f006 f892 	bl	800dd52 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	441a      	add	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	699a      	ldr	r2, [r3, #24]
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	441a      	add	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d809      	bhi.n	8007c70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	699a      	ldr	r2, [r3, #24]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d203      	bcs.n	8007c70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1be      	bne.n	8007bee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	695a      	ldr	r2, [r3, #20]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d811      	bhi.n	8007ca0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	f003 030f 	and.w	r3, r3, #15
 8007c82:	2201      	movs	r2, #1
 8007c84:	fa02 f303 	lsl.w	r3, r2, r3
 8007c88:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	43db      	mvns	r3, r3
 8007c96:	6939      	ldr	r1, [r7, #16]
 8007c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3720      	adds	r7, #32
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	333c      	adds	r3, #60	; 0x3c
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	f040 80b3 	bne.w	8007e4a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	f003 0308 	and.w	r3, r3, #8
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d028      	beq.n	8007d40 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	4a70      	ldr	r2, [pc, #448]	; (8007eb4 <PCD_EP_OutXfrComplete_int+0x208>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d90e      	bls.n	8007d14 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d009      	beq.n	8007d14 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	015a      	lsls	r2, r3, #5
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	4413      	add	r3, r2
 8007d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d12:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f00d fa85 	bl	8015224 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6818      	ldr	r0, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d24:	461a      	mov	r2, r3
 8007d26:	2101      	movs	r1, #1
 8007d28:	f006 fa72 	bl	800e210 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d38:	461a      	mov	r2, r3
 8007d3a:	2308      	movs	r3, #8
 8007d3c:	6093      	str	r3, [r2, #8]
 8007d3e:	e0b3      	b.n	8007ea8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f003 0320 	and.w	r3, r3, #32
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d009      	beq.n	8007d5e <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	015a      	lsls	r2, r3, #5
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d56:	461a      	mov	r2, r3
 8007d58:	2320      	movs	r3, #32
 8007d5a:	6093      	str	r3, [r2, #8]
 8007d5c:	e0a4      	b.n	8007ea8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f040 809f 	bne.w	8007ea8 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	4a51      	ldr	r2, [pc, #324]	; (8007eb4 <PCD_EP_OutXfrComplete_int+0x208>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d90f      	bls.n	8007d92 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00a      	beq.n	8007d92 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d88:	461a      	mov	r2, r3
 8007d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d8e:	6093      	str	r3, [r2, #8]
 8007d90:	e08a      	b.n	8007ea8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007d92:	6879      	ldr	r1, [r7, #4]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	4613      	mov	r3, r2
 8007d98:	00db      	lsls	r3, r3, #3
 8007d9a:	1a9b      	subs	r3, r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	440b      	add	r3, r1
 8007da0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007da4:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	0159      	lsls	r1, r3, #5
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	440b      	add	r3, r1
 8007dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007db8:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	1a9b      	subs	r3, r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4403      	add	r3, r0
 8007dc8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007dcc:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	00db      	lsls	r3, r3, #3
 8007dd6:	1a9b      	subs	r3, r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	440b      	add	r3, r1
 8007ddc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007de0:	6819      	ldr	r1, [r3, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	4613      	mov	r3, r2
 8007de8:	00db      	lsls	r3, r3, #3
 8007dea:	1a9b      	subs	r3, r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4403      	add	r3, r0
 8007df0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4419      	add	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	1a9b      	subs	r3, r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4403      	add	r3, r0
 8007e06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e0a:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f00d fa18 	bl	8015248 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d144      	bne.n	8007ea8 <PCD_EP_OutXfrComplete_int+0x1fc>
 8007e1e:	6879      	ldr	r1, [r7, #4]
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	4613      	mov	r3, r2
 8007e24:	00db      	lsls	r3, r3, #3
 8007e26:	1a9b      	subs	r3, r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	440b      	add	r3, r1
 8007e2c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d138      	bne.n	8007ea8 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007e40:	461a      	mov	r2, r3
 8007e42:	2101      	movs	r1, #1
 8007e44:	f006 f9e4 	bl	800e210 <USB_EP0_OutStart>
 8007e48:	e02e      	b.n	8007ea8 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4a1a      	ldr	r2, [pc, #104]	; (8007eb8 <PCD_EP_OutXfrComplete_int+0x20c>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d124      	bne.n	8007e9c <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e6e:	6093      	str	r3, [r2, #8]
 8007e70:	e01a      	b.n	8007ea8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	f003 0320 	and.w	r3, r3, #32
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d008      	beq.n	8007e8e <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e88:	461a      	mov	r2, r3
 8007e8a:	2320      	movs	r3, #32
 8007e8c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	4619      	mov	r1, r3
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f00d f9d7 	bl	8015248 <HAL_PCD_DataOutStageCallback>
 8007e9a:	e005      	b.n	8007ea8 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f00d f9d0 	bl	8015248 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	4f54300a 	.word	0x4f54300a
 8007eb8:	4f54310a 	.word	0x4f54310a

08007ebc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	333c      	adds	r3, #60	; 0x3c
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d113      	bne.n	8007f1a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	4a1f      	ldr	r2, [pc, #124]	; (8007f74 <PCD_EP_OutSetupPacket_int+0xb8>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d922      	bls.n	8007f40 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d01d      	beq.n	8007f40 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f10:	461a      	mov	r2, r3
 8007f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f16:	6093      	str	r3, [r2, #8]
 8007f18:	e012      	b.n	8007f40 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	4a16      	ldr	r2, [pc, #88]	; (8007f78 <PCD_EP_OutSetupPacket_int+0xbc>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d10e      	bne.n	8007f40 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d009      	beq.n	8007f40 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f38:	461a      	mov	r2, r3
 8007f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f00d f96f 	bl	8015224 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4a0a      	ldr	r2, [pc, #40]	; (8007f74 <PCD_EP_OutSetupPacket_int+0xb8>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d90c      	bls.n	8007f68 <PCD_EP_OutSetupPacket_int+0xac>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d108      	bne.n	8007f68 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6818      	ldr	r0, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007f60:	461a      	mov	r2, r3
 8007f62:	2101      	movs	r1, #1
 8007f64:	f006 f954 	bl	800e210 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	4f54300a 	.word	0x4f54300a
 8007f78:	4f54310a 	.word	0x4f54310a

08007f7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	70fb      	strb	r3, [r7, #3]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d107      	bne.n	8007faa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007f9a:	883b      	ldrh	r3, [r7, #0]
 8007f9c:	0419      	lsls	r1, r3, #16
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	629a      	str	r2, [r3, #40]	; 0x28
 8007fa8:	e028      	b.n	8007ffc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb0:	0c1b      	lsrs	r3, r3, #16
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007fb8:	2300      	movs	r3, #0
 8007fba:	73fb      	strb	r3, [r7, #15]
 8007fbc:	e00d      	b.n	8007fda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
 8007fc4:	3340      	adds	r3, #64	; 0x40
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	0c1b      	lsrs	r3, r3, #16
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	73fb      	strb	r3, [r7, #15]
 8007fda:	7bfa      	ldrb	r2, [r7, #15]
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d3ec      	bcc.n	8007fbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007fe4:	883b      	ldrh	r3, [r7, #0]
 8007fe6:	0418      	lsls	r0, r3, #16
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6819      	ldr	r1, [r3, #0]
 8007fec:	78fb      	ldrb	r3, [r7, #3]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	4302      	orrs	r2, r0
 8007ff4:	3340      	adds	r3, #64	; 0x40
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	440b      	add	r3, r1
 8007ffa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	460b      	mov	r3, r1
 8008014:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	887a      	ldrh	r2, [r7, #2]
 800801c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e22d      	b.n	80084b2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d075      	beq.n	800814e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008062:	4ba3      	ldr	r3, [pc, #652]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f003 030c 	and.w	r3, r3, #12
 800806a:	2b04      	cmp	r3, #4
 800806c:	d00c      	beq.n	8008088 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800806e:	4ba0      	ldr	r3, [pc, #640]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008076:	2b08      	cmp	r3, #8
 8008078:	d112      	bne.n	80080a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800807a:	4b9d      	ldr	r3, [pc, #628]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008086:	d10b      	bne.n	80080a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008088:	4b99      	ldr	r3, [pc, #612]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d05b      	beq.n	800814c <HAL_RCC_OscConfig+0x108>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d157      	bne.n	800814c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e208      	b.n	80084b2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a8:	d106      	bne.n	80080b8 <HAL_RCC_OscConfig+0x74>
 80080aa:	4b91      	ldr	r3, [pc, #580]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a90      	ldr	r2, [pc, #576]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80080b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080b4:	6013      	str	r3, [r2, #0]
 80080b6:	e01d      	b.n	80080f4 <HAL_RCC_OscConfig+0xb0>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080c0:	d10c      	bne.n	80080dc <HAL_RCC_OscConfig+0x98>
 80080c2:	4b8b      	ldr	r3, [pc, #556]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a8a      	ldr	r2, [pc, #552]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80080c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	4b88      	ldr	r3, [pc, #544]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a87      	ldr	r2, [pc, #540]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80080d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	e00b      	b.n	80080f4 <HAL_RCC_OscConfig+0xb0>
 80080dc:	4b84      	ldr	r3, [pc, #528]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a83      	ldr	r2, [pc, #524]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80080e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	4b81      	ldr	r3, [pc, #516]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a80      	ldr	r2, [pc, #512]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80080ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d013      	beq.n	8008124 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080fc:	f7fc ffda 	bl	80050b4 <HAL_GetTick>
 8008100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008102:	e008      	b.n	8008116 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008104:	f7fc ffd6 	bl	80050b4 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b64      	cmp	r3, #100	; 0x64
 8008110:	d901      	bls.n	8008116 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e1cd      	b.n	80084b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008116:	4b76      	ldr	r3, [pc, #472]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d0f0      	beq.n	8008104 <HAL_RCC_OscConfig+0xc0>
 8008122:	e014      	b.n	800814e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008124:	f7fc ffc6 	bl	80050b4 <HAL_GetTick>
 8008128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800812a:	e008      	b.n	800813e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800812c:	f7fc ffc2 	bl	80050b4 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	2b64      	cmp	r3, #100	; 0x64
 8008138:	d901      	bls.n	800813e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e1b9      	b.n	80084b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800813e:	4b6c      	ldr	r3, [pc, #432]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1f0      	bne.n	800812c <HAL_RCC_OscConfig+0xe8>
 800814a:	e000      	b.n	800814e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800814c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0302 	and.w	r3, r3, #2
 8008156:	2b00      	cmp	r3, #0
 8008158:	d063      	beq.n	8008222 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800815a:	4b65      	ldr	r3, [pc, #404]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f003 030c 	and.w	r3, r3, #12
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00b      	beq.n	800817e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008166:	4b62      	ldr	r3, [pc, #392]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800816e:	2b08      	cmp	r3, #8
 8008170:	d11c      	bne.n	80081ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008172:	4b5f      	ldr	r3, [pc, #380]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d116      	bne.n	80081ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800817e:	4b5c      	ldr	r3, [pc, #368]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0302 	and.w	r3, r3, #2
 8008186:	2b00      	cmp	r3, #0
 8008188:	d005      	beq.n	8008196 <HAL_RCC_OscConfig+0x152>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d001      	beq.n	8008196 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e18d      	b.n	80084b2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008196:	4b56      	ldr	r3, [pc, #344]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	00db      	lsls	r3, r3, #3
 80081a4:	4952      	ldr	r1, [pc, #328]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081aa:	e03a      	b.n	8008222 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d020      	beq.n	80081f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081b4:	4b4f      	ldr	r3, [pc, #316]	; (80082f4 <HAL_RCC_OscConfig+0x2b0>)
 80081b6:	2201      	movs	r2, #1
 80081b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ba:	f7fc ff7b 	bl	80050b4 <HAL_GetTick>
 80081be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081c0:	e008      	b.n	80081d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081c2:	f7fc ff77 	bl	80050b4 <HAL_GetTick>
 80081c6:	4602      	mov	r2, r0
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d901      	bls.n	80081d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e16e      	b.n	80084b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081d4:	4b46      	ldr	r3, [pc, #280]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d0f0      	beq.n	80081c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081e0:	4b43      	ldr	r3, [pc, #268]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	00db      	lsls	r3, r3, #3
 80081ee:	4940      	ldr	r1, [pc, #256]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	600b      	str	r3, [r1, #0]
 80081f4:	e015      	b.n	8008222 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081f6:	4b3f      	ldr	r3, [pc, #252]	; (80082f4 <HAL_RCC_OscConfig+0x2b0>)
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081fc:	f7fc ff5a 	bl	80050b4 <HAL_GetTick>
 8008200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008202:	e008      	b.n	8008216 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008204:	f7fc ff56 	bl	80050b4 <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	2b02      	cmp	r3, #2
 8008210:	d901      	bls.n	8008216 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e14d      	b.n	80084b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008216:	4b36      	ldr	r3, [pc, #216]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1f0      	bne.n	8008204 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0308 	and.w	r3, r3, #8
 800822a:	2b00      	cmp	r3, #0
 800822c:	d030      	beq.n	8008290 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d016      	beq.n	8008264 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008236:	4b30      	ldr	r3, [pc, #192]	; (80082f8 <HAL_RCC_OscConfig+0x2b4>)
 8008238:	2201      	movs	r2, #1
 800823a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800823c:	f7fc ff3a 	bl	80050b4 <HAL_GetTick>
 8008240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008242:	e008      	b.n	8008256 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008244:	f7fc ff36 	bl	80050b4 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	2b02      	cmp	r3, #2
 8008250:	d901      	bls.n	8008256 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e12d      	b.n	80084b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008256:	4b26      	ldr	r3, [pc, #152]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 8008258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800825a:	f003 0302 	and.w	r3, r3, #2
 800825e:	2b00      	cmp	r3, #0
 8008260:	d0f0      	beq.n	8008244 <HAL_RCC_OscConfig+0x200>
 8008262:	e015      	b.n	8008290 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008264:	4b24      	ldr	r3, [pc, #144]	; (80082f8 <HAL_RCC_OscConfig+0x2b4>)
 8008266:	2200      	movs	r2, #0
 8008268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800826a:	f7fc ff23 	bl	80050b4 <HAL_GetTick>
 800826e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008270:	e008      	b.n	8008284 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008272:	f7fc ff1f 	bl	80050b4 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d901      	bls.n	8008284 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e116      	b.n	80084b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008284:	4b1a      	ldr	r3, [pc, #104]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 8008286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1f0      	bne.n	8008272 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 80a0 	beq.w	80083de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800829e:	2300      	movs	r3, #0
 80082a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082a2:	4b13      	ldr	r3, [pc, #76]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80082a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10f      	bne.n	80082ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082ae:	2300      	movs	r3, #0
 80082b0:	60fb      	str	r3, [r7, #12]
 80082b2:	4b0f      	ldr	r3, [pc, #60]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80082b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b6:	4a0e      	ldr	r2, [pc, #56]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80082b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082bc:	6413      	str	r3, [r2, #64]	; 0x40
 80082be:	4b0c      	ldr	r3, [pc, #48]	; (80082f0 <HAL_RCC_OscConfig+0x2ac>)
 80082c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082c6:	60fb      	str	r3, [r7, #12]
 80082c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80082ca:	2301      	movs	r3, #1
 80082cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082ce:	4b0b      	ldr	r3, [pc, #44]	; (80082fc <HAL_RCC_OscConfig+0x2b8>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d121      	bne.n	800831e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082da:	4b08      	ldr	r3, [pc, #32]	; (80082fc <HAL_RCC_OscConfig+0x2b8>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a07      	ldr	r2, [pc, #28]	; (80082fc <HAL_RCC_OscConfig+0x2b8>)
 80082e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082e6:	f7fc fee5 	bl	80050b4 <HAL_GetTick>
 80082ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082ec:	e011      	b.n	8008312 <HAL_RCC_OscConfig+0x2ce>
 80082ee:	bf00      	nop
 80082f0:	40023800 	.word	0x40023800
 80082f4:	42470000 	.word	0x42470000
 80082f8:	42470e80 	.word	0x42470e80
 80082fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008300:	f7fc fed8 	bl	80050b4 <HAL_GetTick>
 8008304:	4602      	mov	r2, r0
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	2b02      	cmp	r3, #2
 800830c:	d901      	bls.n	8008312 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e0cf      	b.n	80084b2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008312:	4b6a      	ldr	r3, [pc, #424]	; (80084bc <HAL_RCC_OscConfig+0x478>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800831a:	2b00      	cmp	r3, #0
 800831c:	d0f0      	beq.n	8008300 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d106      	bne.n	8008334 <HAL_RCC_OscConfig+0x2f0>
 8008326:	4b66      	ldr	r3, [pc, #408]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 8008328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832a:	4a65      	ldr	r2, [pc, #404]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 800832c:	f043 0301 	orr.w	r3, r3, #1
 8008330:	6713      	str	r3, [r2, #112]	; 0x70
 8008332:	e01c      	b.n	800836e <HAL_RCC_OscConfig+0x32a>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	2b05      	cmp	r3, #5
 800833a:	d10c      	bne.n	8008356 <HAL_RCC_OscConfig+0x312>
 800833c:	4b60      	ldr	r3, [pc, #384]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 800833e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008340:	4a5f      	ldr	r2, [pc, #380]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 8008342:	f043 0304 	orr.w	r3, r3, #4
 8008346:	6713      	str	r3, [r2, #112]	; 0x70
 8008348:	4b5d      	ldr	r3, [pc, #372]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 800834a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834c:	4a5c      	ldr	r2, [pc, #368]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 800834e:	f043 0301 	orr.w	r3, r3, #1
 8008352:	6713      	str	r3, [r2, #112]	; 0x70
 8008354:	e00b      	b.n	800836e <HAL_RCC_OscConfig+0x32a>
 8008356:	4b5a      	ldr	r3, [pc, #360]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 8008358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835a:	4a59      	ldr	r2, [pc, #356]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 800835c:	f023 0301 	bic.w	r3, r3, #1
 8008360:	6713      	str	r3, [r2, #112]	; 0x70
 8008362:	4b57      	ldr	r3, [pc, #348]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 8008364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008366:	4a56      	ldr	r2, [pc, #344]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 8008368:	f023 0304 	bic.w	r3, r3, #4
 800836c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d015      	beq.n	80083a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008376:	f7fc fe9d 	bl	80050b4 <HAL_GetTick>
 800837a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800837c:	e00a      	b.n	8008394 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800837e:	f7fc fe99 	bl	80050b4 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	f241 3288 	movw	r2, #5000	; 0x1388
 800838c:	4293      	cmp	r3, r2
 800838e:	d901      	bls.n	8008394 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e08e      	b.n	80084b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008394:	4b4a      	ldr	r3, [pc, #296]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 8008396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008398:	f003 0302 	and.w	r3, r3, #2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d0ee      	beq.n	800837e <HAL_RCC_OscConfig+0x33a>
 80083a0:	e014      	b.n	80083cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083a2:	f7fc fe87 	bl	80050b4 <HAL_GetTick>
 80083a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083a8:	e00a      	b.n	80083c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083aa:	f7fc fe83 	bl	80050b4 <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d901      	bls.n	80083c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e078      	b.n	80084b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083c0:	4b3f      	ldr	r3, [pc, #252]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 80083c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c4:	f003 0302 	and.w	r3, r3, #2
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1ee      	bne.n	80083aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d105      	bne.n	80083de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083d2:	4b3b      	ldr	r3, [pc, #236]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 80083d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d6:	4a3a      	ldr	r2, [pc, #232]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 80083d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d064      	beq.n	80084b0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083e6:	4b36      	ldr	r3, [pc, #216]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f003 030c 	and.w	r3, r3, #12
 80083ee:	2b08      	cmp	r3, #8
 80083f0:	d05c      	beq.n	80084ac <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d141      	bne.n	800847e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083fa:	4b32      	ldr	r3, [pc, #200]	; (80084c4 <HAL_RCC_OscConfig+0x480>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008400:	f7fc fe58 	bl	80050b4 <HAL_GetTick>
 8008404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008406:	e008      	b.n	800841a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008408:	f7fc fe54 	bl	80050b4 <HAL_GetTick>
 800840c:	4602      	mov	r2, r0
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	2b02      	cmp	r3, #2
 8008414:	d901      	bls.n	800841a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e04b      	b.n	80084b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800841a:	4b29      	ldr	r3, [pc, #164]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1f0      	bne.n	8008408 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	69da      	ldr	r2, [r3, #28]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	431a      	orrs	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	019b      	lsls	r3, r3, #6
 8008436:	431a      	orrs	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843c:	085b      	lsrs	r3, r3, #1
 800843e:	3b01      	subs	r3, #1
 8008440:	041b      	lsls	r3, r3, #16
 8008442:	431a      	orrs	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008448:	061b      	lsls	r3, r3, #24
 800844a:	491d      	ldr	r1, [pc, #116]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 800844c:	4313      	orrs	r3, r2
 800844e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008450:	4b1c      	ldr	r3, [pc, #112]	; (80084c4 <HAL_RCC_OscConfig+0x480>)
 8008452:	2201      	movs	r2, #1
 8008454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008456:	f7fc fe2d 	bl	80050b4 <HAL_GetTick>
 800845a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800845c:	e008      	b.n	8008470 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800845e:	f7fc fe29 	bl	80050b4 <HAL_GetTick>
 8008462:	4602      	mov	r2, r0
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	2b02      	cmp	r3, #2
 800846a:	d901      	bls.n	8008470 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e020      	b.n	80084b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008470:	4b13      	ldr	r3, [pc, #76]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d0f0      	beq.n	800845e <HAL_RCC_OscConfig+0x41a>
 800847c:	e018      	b.n	80084b0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800847e:	4b11      	ldr	r3, [pc, #68]	; (80084c4 <HAL_RCC_OscConfig+0x480>)
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008484:	f7fc fe16 	bl	80050b4 <HAL_GetTick>
 8008488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800848a:	e008      	b.n	800849e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800848c:	f7fc fe12 	bl	80050b4 <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	2b02      	cmp	r3, #2
 8008498:	d901      	bls.n	800849e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e009      	b.n	80084b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800849e:	4b08      	ldr	r3, [pc, #32]	; (80084c0 <HAL_RCC_OscConfig+0x47c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1f0      	bne.n	800848c <HAL_RCC_OscConfig+0x448>
 80084aa:	e001      	b.n	80084b0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e000      	b.n	80084b2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3718      	adds	r7, #24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	40007000 	.word	0x40007000
 80084c0:	40023800 	.word	0x40023800
 80084c4:	42470060 	.word	0x42470060

080084c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084d8:	2301      	movs	r3, #1
 80084da:	e0ca      	b.n	8008672 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084dc:	4b67      	ldr	r3, [pc, #412]	; (800867c <HAL_RCC_ClockConfig+0x1b4>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 030f 	and.w	r3, r3, #15
 80084e4:	683a      	ldr	r2, [r7, #0]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d90c      	bls.n	8008504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084ea:	4b64      	ldr	r3, [pc, #400]	; (800867c <HAL_RCC_ClockConfig+0x1b4>)
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	b2d2      	uxtb	r2, r2
 80084f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084f2:	4b62      	ldr	r3, [pc, #392]	; (800867c <HAL_RCC_ClockConfig+0x1b4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 030f 	and.w	r3, r3, #15
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d001      	beq.n	8008504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e0b6      	b.n	8008672 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0302 	and.w	r3, r3, #2
 800850c:	2b00      	cmp	r3, #0
 800850e:	d020      	beq.n	8008552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0304 	and.w	r3, r3, #4
 8008518:	2b00      	cmp	r3, #0
 800851a:	d005      	beq.n	8008528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800851c:	4b58      	ldr	r3, [pc, #352]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	4a57      	ldr	r2, [pc, #348]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 8008522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0308 	and.w	r3, r3, #8
 8008530:	2b00      	cmp	r3, #0
 8008532:	d005      	beq.n	8008540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008534:	4b52      	ldr	r3, [pc, #328]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	4a51      	ldr	r2, [pc, #324]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 800853a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800853e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008540:	4b4f      	ldr	r3, [pc, #316]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	494c      	ldr	r1, [pc, #304]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 800854e:	4313      	orrs	r3, r2
 8008550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d044      	beq.n	80085e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d107      	bne.n	8008576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008566:	4b46      	ldr	r3, [pc, #280]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d119      	bne.n	80085a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e07d      	b.n	8008672 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	2b02      	cmp	r3, #2
 800857c:	d003      	beq.n	8008586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008582:	2b03      	cmp	r3, #3
 8008584:	d107      	bne.n	8008596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008586:	4b3e      	ldr	r3, [pc, #248]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d109      	bne.n	80085a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e06d      	b.n	8008672 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008596:	4b3a      	ldr	r3, [pc, #232]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0302 	and.w	r3, r3, #2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e065      	b.n	8008672 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085a6:	4b36      	ldr	r3, [pc, #216]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f023 0203 	bic.w	r2, r3, #3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	4933      	ldr	r1, [pc, #204]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085b8:	f7fc fd7c 	bl	80050b4 <HAL_GetTick>
 80085bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085be:	e00a      	b.n	80085d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085c0:	f7fc fd78 	bl	80050b4 <HAL_GetTick>
 80085c4:	4602      	mov	r2, r0
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d901      	bls.n	80085d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e04d      	b.n	8008672 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085d6:	4b2a      	ldr	r3, [pc, #168]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f003 020c 	and.w	r2, r3, #12
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d1eb      	bne.n	80085c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085e8:	4b24      	ldr	r3, [pc, #144]	; (800867c <HAL_RCC_ClockConfig+0x1b4>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 030f 	and.w	r3, r3, #15
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d20c      	bcs.n	8008610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085f6:	4b21      	ldr	r3, [pc, #132]	; (800867c <HAL_RCC_ClockConfig+0x1b4>)
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	b2d2      	uxtb	r2, r2
 80085fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085fe:	4b1f      	ldr	r3, [pc, #124]	; (800867c <HAL_RCC_ClockConfig+0x1b4>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 030f 	and.w	r3, r3, #15
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	429a      	cmp	r2, r3
 800860a:	d001      	beq.n	8008610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e030      	b.n	8008672 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0304 	and.w	r3, r3, #4
 8008618:	2b00      	cmp	r3, #0
 800861a:	d008      	beq.n	800862e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800861c:	4b18      	ldr	r3, [pc, #96]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	4915      	ldr	r1, [pc, #84]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 800862a:	4313      	orrs	r3, r2
 800862c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0308 	and.w	r3, r3, #8
 8008636:	2b00      	cmp	r3, #0
 8008638:	d009      	beq.n	800864e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800863a:	4b11      	ldr	r3, [pc, #68]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	490d      	ldr	r1, [pc, #52]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 800864a:	4313      	orrs	r3, r2
 800864c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800864e:	f000 f81d 	bl	800868c <HAL_RCC_GetSysClockFreq>
 8008652:	4601      	mov	r1, r0
 8008654:	4b0a      	ldr	r3, [pc, #40]	; (8008680 <HAL_RCC_ClockConfig+0x1b8>)
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	091b      	lsrs	r3, r3, #4
 800865a:	f003 030f 	and.w	r3, r3, #15
 800865e:	4a09      	ldr	r2, [pc, #36]	; (8008684 <HAL_RCC_ClockConfig+0x1bc>)
 8008660:	5cd3      	ldrb	r3, [r2, r3]
 8008662:	fa21 f303 	lsr.w	r3, r1, r3
 8008666:	4a08      	ldr	r2, [pc, #32]	; (8008688 <HAL_RCC_ClockConfig+0x1c0>)
 8008668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800866a:	2000      	movs	r0, #0
 800866c:	f7fc fcde 	bl	800502c <HAL_InitTick>

  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	40023c00 	.word	0x40023c00
 8008680:	40023800 	.word	0x40023800
 8008684:	0801bf0c 	.word	0x0801bf0c
 8008688:	20000134 	.word	0x20000134

0800868c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800868c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008692:	2300      	movs	r3, #0
 8008694:	607b      	str	r3, [r7, #4]
 8008696:	2300      	movs	r3, #0
 8008698:	60fb      	str	r3, [r7, #12]
 800869a:	2300      	movs	r3, #0
 800869c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086a2:	4b50      	ldr	r3, [pc, #320]	; (80087e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f003 030c 	and.w	r3, r3, #12
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d007      	beq.n	80086be <HAL_RCC_GetSysClockFreq+0x32>
 80086ae:	2b08      	cmp	r3, #8
 80086b0:	d008      	beq.n	80086c4 <HAL_RCC_GetSysClockFreq+0x38>
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f040 808d 	bne.w	80087d2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80086b8:	4b4b      	ldr	r3, [pc, #300]	; (80087e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80086ba:	60bb      	str	r3, [r7, #8]
       break;
 80086bc:	e08c      	b.n	80087d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80086be:	4b4b      	ldr	r3, [pc, #300]	; (80087ec <HAL_RCC_GetSysClockFreq+0x160>)
 80086c0:	60bb      	str	r3, [r7, #8]
      break;
 80086c2:	e089      	b.n	80087d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80086c4:	4b47      	ldr	r3, [pc, #284]	; (80087e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80086ce:	4b45      	ldr	r3, [pc, #276]	; (80087e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d023      	beq.n	8008722 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086da:	4b42      	ldr	r3, [pc, #264]	; (80087e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	099b      	lsrs	r3, r3, #6
 80086e0:	f04f 0400 	mov.w	r4, #0
 80086e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80086e8:	f04f 0200 	mov.w	r2, #0
 80086ec:	ea03 0501 	and.w	r5, r3, r1
 80086f0:	ea04 0602 	and.w	r6, r4, r2
 80086f4:	4a3d      	ldr	r2, [pc, #244]	; (80087ec <HAL_RCC_GetSysClockFreq+0x160>)
 80086f6:	fb02 f106 	mul.w	r1, r2, r6
 80086fa:	2200      	movs	r2, #0
 80086fc:	fb02 f205 	mul.w	r2, r2, r5
 8008700:	440a      	add	r2, r1
 8008702:	493a      	ldr	r1, [pc, #232]	; (80087ec <HAL_RCC_GetSysClockFreq+0x160>)
 8008704:	fba5 0101 	umull	r0, r1, r5, r1
 8008708:	1853      	adds	r3, r2, r1
 800870a:	4619      	mov	r1, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f04f 0400 	mov.w	r4, #0
 8008712:	461a      	mov	r2, r3
 8008714:	4623      	mov	r3, r4
 8008716:	f7f8 fb17 	bl	8000d48 <__aeabi_uldivmod>
 800871a:	4603      	mov	r3, r0
 800871c:	460c      	mov	r4, r1
 800871e:	60fb      	str	r3, [r7, #12]
 8008720:	e049      	b.n	80087b6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008722:	4b30      	ldr	r3, [pc, #192]	; (80087e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	099b      	lsrs	r3, r3, #6
 8008728:	f04f 0400 	mov.w	r4, #0
 800872c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008730:	f04f 0200 	mov.w	r2, #0
 8008734:	ea03 0501 	and.w	r5, r3, r1
 8008738:	ea04 0602 	and.w	r6, r4, r2
 800873c:	4629      	mov	r1, r5
 800873e:	4632      	mov	r2, r6
 8008740:	f04f 0300 	mov.w	r3, #0
 8008744:	f04f 0400 	mov.w	r4, #0
 8008748:	0154      	lsls	r4, r2, #5
 800874a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800874e:	014b      	lsls	r3, r1, #5
 8008750:	4619      	mov	r1, r3
 8008752:	4622      	mov	r2, r4
 8008754:	1b49      	subs	r1, r1, r5
 8008756:	eb62 0206 	sbc.w	r2, r2, r6
 800875a:	f04f 0300 	mov.w	r3, #0
 800875e:	f04f 0400 	mov.w	r4, #0
 8008762:	0194      	lsls	r4, r2, #6
 8008764:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008768:	018b      	lsls	r3, r1, #6
 800876a:	1a5b      	subs	r3, r3, r1
 800876c:	eb64 0402 	sbc.w	r4, r4, r2
 8008770:	f04f 0100 	mov.w	r1, #0
 8008774:	f04f 0200 	mov.w	r2, #0
 8008778:	00e2      	lsls	r2, r4, #3
 800877a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800877e:	00d9      	lsls	r1, r3, #3
 8008780:	460b      	mov	r3, r1
 8008782:	4614      	mov	r4, r2
 8008784:	195b      	adds	r3, r3, r5
 8008786:	eb44 0406 	adc.w	r4, r4, r6
 800878a:	f04f 0100 	mov.w	r1, #0
 800878e:	f04f 0200 	mov.w	r2, #0
 8008792:	02a2      	lsls	r2, r4, #10
 8008794:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008798:	0299      	lsls	r1, r3, #10
 800879a:	460b      	mov	r3, r1
 800879c:	4614      	mov	r4, r2
 800879e:	4618      	mov	r0, r3
 80087a0:	4621      	mov	r1, r4
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f04f 0400 	mov.w	r4, #0
 80087a8:	461a      	mov	r2, r3
 80087aa:	4623      	mov	r3, r4
 80087ac:	f7f8 facc 	bl	8000d48 <__aeabi_uldivmod>
 80087b0:	4603      	mov	r3, r0
 80087b2:	460c      	mov	r4, r1
 80087b4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80087b6:	4b0b      	ldr	r3, [pc, #44]	; (80087e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	0c1b      	lsrs	r3, r3, #16
 80087bc:	f003 0303 	and.w	r3, r3, #3
 80087c0:	3301      	adds	r3, #1
 80087c2:	005b      	lsls	r3, r3, #1
 80087c4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ce:	60bb      	str	r3, [r7, #8]
      break;
 80087d0:	e002      	b.n	80087d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087d2:	4b05      	ldr	r3, [pc, #20]	; (80087e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80087d4:	60bb      	str	r3, [r7, #8]
      break;
 80087d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087d8:	68bb      	ldr	r3, [r7, #8]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087e2:	bf00      	nop
 80087e4:	40023800 	.word	0x40023800
 80087e8:	00f42400 	.word	0x00f42400
 80087ec:	00b71b00 	.word	0x00b71b00

080087f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087f0:	b480      	push	{r7}
 80087f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087f4:	4b03      	ldr	r3, [pc, #12]	; (8008804 <HAL_RCC_GetHCLKFreq+0x14>)
 80087f6:	681b      	ldr	r3, [r3, #0]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	20000134 	.word	0x20000134

08008808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800880c:	f7ff fff0 	bl	80087f0 <HAL_RCC_GetHCLKFreq>
 8008810:	4601      	mov	r1, r0
 8008812:	4b05      	ldr	r3, [pc, #20]	; (8008828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	0a9b      	lsrs	r3, r3, #10
 8008818:	f003 0307 	and.w	r3, r3, #7
 800881c:	4a03      	ldr	r2, [pc, #12]	; (800882c <HAL_RCC_GetPCLK1Freq+0x24>)
 800881e:	5cd3      	ldrb	r3, [r2, r3]
 8008820:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008824:	4618      	mov	r0, r3
 8008826:	bd80      	pop	{r7, pc}
 8008828:	40023800 	.word	0x40023800
 800882c:	0801bf1c 	.word	0x0801bf1c

08008830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008834:	f7ff ffdc 	bl	80087f0 <HAL_RCC_GetHCLKFreq>
 8008838:	4601      	mov	r1, r0
 800883a:	4b05      	ldr	r3, [pc, #20]	; (8008850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	0b5b      	lsrs	r3, r3, #13
 8008840:	f003 0307 	and.w	r3, r3, #7
 8008844:	4a03      	ldr	r2, [pc, #12]	; (8008854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008846:	5cd3      	ldrb	r3, [r2, r3]
 8008848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800884c:	4618      	mov	r0, r3
 800884e:	bd80      	pop	{r7, pc}
 8008850:	40023800 	.word	0x40023800
 8008854:	0801bf1c 	.word	0x0801bf1c

08008858 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008860:	2300      	movs	r3, #0
 8008862:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008864:	2300      	movs	r3, #0
 8008866:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	2b00      	cmp	r3, #0
 8008872:	d105      	bne.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800887c:	2b00      	cmp	r3, #0
 800887e:	d035      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008880:	4b62      	ldr	r3, [pc, #392]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008882:	2200      	movs	r2, #0
 8008884:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008886:	f7fc fc15 	bl	80050b4 <HAL_GetTick>
 800888a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800888c:	e008      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800888e:	f7fc fc11 	bl	80050b4 <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	2b02      	cmp	r3, #2
 800889a:	d901      	bls.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800889c:	2303      	movs	r3, #3
 800889e:	e0b0      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088a0:	4b5b      	ldr	r3, [pc, #364]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1f0      	bne.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	019a      	lsls	r2, r3, #6
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	071b      	lsls	r3, r3, #28
 80088b8:	4955      	ldr	r1, [pc, #340]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088ba:	4313      	orrs	r3, r2
 80088bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80088c0:	4b52      	ldr	r3, [pc, #328]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80088c2:	2201      	movs	r2, #1
 80088c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088c6:	f7fc fbf5 	bl	80050b4 <HAL_GetTick>
 80088ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088cc:	e008      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80088ce:	f7fc fbf1 	bl	80050b4 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d901      	bls.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088dc:	2303      	movs	r3, #3
 80088de:	e090      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088e0:	4b4b      	ldr	r3, [pc, #300]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d0f0      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0302 	and.w	r3, r3, #2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 8083 	beq.w	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80088fa:	2300      	movs	r3, #0
 80088fc:	60fb      	str	r3, [r7, #12]
 80088fe:	4b44      	ldr	r3, [pc, #272]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008902:	4a43      	ldr	r2, [pc, #268]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008908:	6413      	str	r3, [r2, #64]	; 0x40
 800890a:	4b41      	ldr	r3, [pc, #260]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800890c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008912:	60fb      	str	r3, [r7, #12]
 8008914:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008916:	4b3f      	ldr	r3, [pc, #252]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a3e      	ldr	r2, [pc, #248]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800891c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008920:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008922:	f7fc fbc7 	bl	80050b4 <HAL_GetTick>
 8008926:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008928:	e008      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800892a:	f7fc fbc3 	bl	80050b4 <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	2b02      	cmp	r3, #2
 8008936:	d901      	bls.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e062      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800893c:	4b35      	ldr	r3, [pc, #212]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008944:	2b00      	cmp	r3, #0
 8008946:	d0f0      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008948:	4b31      	ldr	r3, [pc, #196]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800894a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008950:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d02f      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	429a      	cmp	r2, r3
 8008964:	d028      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008966:	4b2a      	ldr	r3, [pc, #168]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800896e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008970:	4b29      	ldr	r3, [pc, #164]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008972:	2201      	movs	r2, #1
 8008974:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008976:	4b28      	ldr	r3, [pc, #160]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008978:	2200      	movs	r2, #0
 800897a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800897c:	4a24      	ldr	r2, [pc, #144]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008982:	4b23      	ldr	r3, [pc, #140]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b01      	cmp	r3, #1
 800898c:	d114      	bne.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800898e:	f7fc fb91 	bl	80050b4 <HAL_GetTick>
 8008992:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008994:	e00a      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008996:	f7fc fb8d 	bl	80050b4 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d901      	bls.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e02a      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089ac:	4b18      	ldr	r3, [pc, #96]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0ee      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089c4:	d10d      	bne.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80089c6:	4b12      	ldr	r3, [pc, #72]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80089d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089da:	490d      	ldr	r1, [pc, #52]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	608b      	str	r3, [r1, #8]
 80089e0:	e005      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 80089e2:	4b0b      	ldr	r3, [pc, #44]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	4a0a      	ldr	r2, [pc, #40]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089e8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80089ec:	6093      	str	r3, [r2, #8]
 80089ee:	4b08      	ldr	r3, [pc, #32]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089fa:	4905      	ldr	r1, [pc, #20]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	42470068 	.word	0x42470068
 8008a10:	40023800 	.word	0x40023800
 8008a14:	40007000 	.word	0x40007000
 8008a18:	42470e40 	.word	0x42470e40

08008a1c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d101      	bne.n	8008a2e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e083      	b.n	8008b36 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	7f5b      	ldrb	r3, [r3, #29]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d105      	bne.n	8008a44 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f00b ff62 	bl	8014908 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2202      	movs	r2, #2
 8008a48:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	22ca      	movs	r2, #202	; 0xca
 8008a50:	625a      	str	r2, [r3, #36]	; 0x24
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2253      	movs	r2, #83	; 0x53
 8008a58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f944 	bl	8008ce8 <RTC_EnterInitMode>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d008      	beq.n	8008a78 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	22ff      	movs	r2, #255	; 0xff
 8008a6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2204      	movs	r2, #4
 8008a72:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e05e      	b.n	8008b36 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	6812      	ldr	r2, [r2, #0]
 8008a82:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a8a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6899      	ldr	r1, [r3, #8]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	431a      	orrs	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	431a      	orrs	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	68d2      	ldr	r2, [r2, #12]
 8008ab2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6919      	ldr	r1, [r3, #16]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	041a      	lsls	r2, r3, #16
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ad6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f003 0320 	and.w	r3, r3, #32
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10e      	bne.n	8008b04 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f8d6 	bl	8008c98 <HAL_RTC_WaitForSynchro>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d008      	beq.n	8008b04 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	22ff      	movs	r2, #255	; 0xff
 8008af8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2204      	movs	r2, #4
 8008afe:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e018      	b.n	8008b36 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b12:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699a      	ldr	r2, [r3, #24]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	22ff      	movs	r2, #255	; 0xff
 8008b2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008b34:	2300      	movs	r3, #0
  }
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b086      	sub	sp, #24
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	60f8      	str	r0, [r7, #12]
 8008b46:	60b9      	str	r1, [r7, #8]
 8008b48:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008b70:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008b74:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	0c1b      	lsrs	r3, r3, #16
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	0a1b      	lsrs	r3, r3, #8
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	0c1b      	lsrs	r3, r3, #16
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d11a      	bne.n	8008bf0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 f8be 	bl	8008d40 <RTC_Bcd2ToByte>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	785b      	ldrb	r3, [r3, #1]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 f8b5 	bl	8008d40 <RTC_Bcd2ToByte>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	461a      	mov	r2, r3
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	789b      	ldrb	r3, [r3, #2]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 f8ac 	bl	8008d40 <RTC_Bcd2ToByte>
 8008be8:	4603      	mov	r3, r0
 8008bea:	461a      	mov	r2, r3
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b086      	sub	sp, #24
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	60f8      	str	r0, [r7, #12]
 8008c02:	60b9      	str	r1, [r7, #8]
 8008c04:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008c14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c18:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	0c1b      	lsrs	r3, r3, #16
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	0a1b      	lsrs	r3, r3, #8
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	f003 031f 	and.w	r3, r3, #31
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	0b5b      	lsrs	r3, r3, #13
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	f003 0307 	and.w	r3, r3, #7
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d11a      	bne.n	8008c8e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	78db      	ldrb	r3, [r3, #3]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f000 f86f 	bl	8008d40 <RTC_Bcd2ToByte>
 8008c62:	4603      	mov	r3, r0
 8008c64:	461a      	mov	r2, r3
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	785b      	ldrb	r3, [r3, #1]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 f866 	bl	8008d40 <RTC_Bcd2ToByte>
 8008c74:	4603      	mov	r3, r0
 8008c76:	461a      	mov	r2, r3
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	789b      	ldrb	r3, [r3, #2]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f000 f85d 	bl	8008d40 <RTC_Bcd2ToByte>
 8008c86:	4603      	mov	r3, r0
 8008c88:	461a      	mov	r2, r3
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008cb2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008cb4:	f7fc f9fe 	bl	80050b4 <HAL_GetTick>
 8008cb8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008cba:	e009      	b.n	8008cd0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008cbc:	f7fc f9fa 	bl	80050b4 <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cca:	d901      	bls.n	8008cd0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e007      	b.n	8008ce0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f003 0320 	and.w	r3, r3, #32
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0ee      	beq.n	8008cbc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d119      	bne.n	8008d36 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f04f 32ff 	mov.w	r2, #4294967295
 8008d0a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d0c:	f7fc f9d2 	bl	80050b4 <HAL_GetTick>
 8008d10:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008d12:	e009      	b.n	8008d28 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008d14:	f7fc f9ce 	bl	80050b4 <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d22:	d901      	bls.n	8008d28 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e007      	b.n	8008d38 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0ee      	beq.n	8008d14 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	4603      	mov	r3, r0
 8008d48:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008d4e:	79fb      	ldrb	r3, [r7, #7]
 8008d50:	091b      	lsrs	r3, r3, #4
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	461a      	mov	r2, r3
 8008d56:	4613      	mov	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	4413      	add	r3, r2
 8008d5c:	005b      	lsls	r3, r3, #1
 8008d5e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008d60:	79fb      	ldrb	r3, [r7, #7]
 8008d62:	f003 030f 	and.w	r3, r3, #15
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	4413      	add	r3, r2
 8008d6e:	b2db      	uxtb	r3, r3
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d101      	bne.n	8008d8e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e01d      	b.n	8008dca <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d105      	bne.n	8008da6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f00b fdc7 	bl	8014934 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2203      	movs	r2, #3
 8008daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f810 	bl	8008dd4 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
	...

08008dd4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008dd4:	b5b0      	push	{r4, r5, r7, lr}
 8008dd6:	b08e      	sub	sp, #56	; 0x38
 8008dd8:	af04      	add	r7, sp, #16
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008de4:	2300      	movs	r3, #0
 8008de6:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008de8:	2300      	movs	r3, #0
 8008dea:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008dec:	2300      	movs	r3, #0
 8008dee:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008df0:	2300      	movs	r3, #0
 8008df2:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008df4:	2376      	movs	r3, #118	; 0x76
 8008df6:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681d      	ldr	r5, [r3, #0]
 8008dfc:	466c      	mov	r4, sp
 8008dfe:	f107 0318 	add.w	r3, r7, #24
 8008e02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e0a:	f107 030c 	add.w	r3, r7, #12
 8008e0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e10:	4628      	mov	r0, r5
 8008e12:	f003 fa53 	bl	800c2bc <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8008e16:	4b1c      	ldr	r3, [pc, #112]	; (8008e88 <HAL_SD_InitCard+0xb4>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f003 fa94 	bl	800c34e <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008e26:	4b18      	ldr	r3, [pc, #96]	; (8008e88 <HAL_SD_InitCard+0xb4>)
 8008e28:	2201      	movs	r2, #1
 8008e2a:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8008e2c:	2002      	movs	r0, #2
 8008e2e:	f7fc f94d 	bl	80050cc <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fffe 	bl	8009e34 <SD_PowerON>
 8008e38:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00b      	beq.n	8008e58 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e013      	b.n	8008e80 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 ff22 	bl	8009ca2 <SD_InitCard>
 8008e5e:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00b      	beq.n	8008e7e <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	431a      	orrs	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e000      	b.n	8008e80 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3728      	adds	r7, #40	; 0x28
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bdb0      	pop	{r4, r5, r7, pc}
 8008e88:	422580a0 	.word	0x422580a0

08008e8c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b08c      	sub	sp, #48	; 0x30
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
 8008e98:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d107      	bne.n	8008eb4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e0ad      	b.n	8009010 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	f040 80a6 	bne.w	800900e <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	441a      	add	r2, r3
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d907      	bls.n	8008ee6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eda:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e094      	b.n	8009010 <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2203      	movs	r2, #3
 8008eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	6812      	ldr	r2, [r2, #0]
 8008f00:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8008f04:	f043 0302 	orr.w	r3, r3, #2
 8008f08:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0e:	4a42      	ldr	r2, [pc, #264]	; (8009018 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8008f10:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f16:	4a41      	ldr	r2, [pc, #260]	; (800901c <HAL_SD_ReadBlocks_DMA+0x190>)
 8008f18:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1e:	2200      	movs	r2, #0
 8008f20:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3380      	adds	r3, #128	; 0x80
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	025b      	lsls	r3, r3, #9
 8008f34:	089b      	lsrs	r3, r3, #2
 8008f36:	f7fc faab 	bl	8005490 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008f3a:	4b39      	ldr	r3, [pc, #228]	; (8009020 <HAL_SD_ReadBlocks_DMA+0x194>)
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d002      	beq.n	8008f4e <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	025b      	lsls	r3, r3, #9
 8008f4c:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f52:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	025b      	lsls	r3, r3, #9
 8008f58:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008f5a:	2390      	movs	r3, #144	; 0x90
 8008f5c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008f5e:	2302      	movs	r3, #2
 8008f60:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008f66:	2301      	movs	r3, #1
 8008f68:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f107 0214 	add.w	r2, r7, #20
 8008f72:	4611      	mov	r1, r2
 8008f74:	4618      	mov	r0, r3
 8008f76:	f003 fa52 	bl	800c41e <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f82:	4618      	mov	r0, r3
 8008f84:	f003 fa77 	bl	800c476 <SDMMC_CmdBlockLength>
 8008f88:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d010      	beq.n	8008fb2 <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008f98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa0:	431a      	orrs	r2, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e02e      	b.n	8009010 <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d90a      	bls.n	8008fce <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2282      	movs	r2, #130	; 0x82
 8008fbc:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	6879      	ldr	r1, [r7, #4]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f003 fa9e 	bl	800c506 <SDMMC_CmdReadMultiBlock>
 8008fca:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008fcc:	e009      	b.n	8008fe2 <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2281      	movs	r2, #129	; 0x81
 8008fd2:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f003 fa6f 	bl	800c4be <SDMMC_CmdReadSingleBlock>
 8008fe0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d010      	beq.n	800900a <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008ff0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e002      	b.n	8009010 <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	e000      	b.n	8009010 <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800900e:	2302      	movs	r3, #2
  }
}
 8009010:	4618      	mov	r0, r3
 8009012:	3730      	adds	r7, #48	; 0x30
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	08009ab3 	.word	0x08009ab3
 800901c:	08009b21 	.word	0x08009b21
 8009020:	4225858c 	.word	0x4225858c

08009024 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b08c      	sub	sp, #48	; 0x30
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
 8009030:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009032:	2300      	movs	r3, #0
 8009034:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d107      	bne.n	800904c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009040:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e0ad      	b.n	80091a8 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b01      	cmp	r3, #1
 8009056:	f040 80a6 	bne.w	80091a6 <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	441a      	add	r2, r3
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800906a:	429a      	cmp	r2, r3
 800906c:	d907      	bls.n	800907e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009072:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e094      	b.n	80091a8 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2203      	movs	r2, #3
 8009082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2200      	movs	r2, #0
 800908c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	6812      	ldr	r2, [r2, #0]
 8009098:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800909c:	f043 0302 	orr.w	r3, r3, #2
 80090a0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	4a42      	ldr	r2, [pc, #264]	; (80091b0 <HAL_SD_WriteBlocks_DMA+0x18c>)
 80090a8:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ae:	4a41      	ldr	r2, [pc, #260]	; (80091b4 <HAL_SD_WriteBlocks_DMA+0x190>)
 80090b0:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b6:	2200      	movs	r2, #0
 80090b8:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d002      	beq.n	80090c8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	025b      	lsls	r3, r3, #9
 80090c6:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80090d0:	4618      	mov	r0, r3
 80090d2:	f003 f9d0 	bl	800c476 <SDMMC_CmdBlockLength>
 80090d6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d010      	beq.n	8009100 <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80090e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ee:	431a      	orrs	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e053      	b.n	80091a8 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d90a      	bls.n	800911c <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	22a0      	movs	r2, #160	; 0xa0
 800910a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6879      	ldr	r1, [r7, #4]
 8009112:	4618      	mov	r0, r3
 8009114:	f003 fa3f 	bl	800c596 <SDMMC_CmdWriteMultiBlock>
 8009118:	62f8      	str	r0, [r7, #44]	; 0x2c
 800911a:	e009      	b.n	8009130 <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2290      	movs	r2, #144	; 0x90
 8009120:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6879      	ldr	r1, [r7, #4]
 8009128:	4618      	mov	r0, r3
 800912a:	f003 fa10 	bl	800c54e <SDMMC_CmdWriteSingleBlock>
 800912e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009132:	2b00      	cmp	r3, #0
 8009134:	d010      	beq.n	8009158 <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800913e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009146:	431a      	orrs	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e027      	b.n	80091a8 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009158:	4b17      	ldr	r3, [pc, #92]	; (80091b8 <HAL_SD_WriteBlocks_DMA+0x194>)
 800915a:	2201      	movs	r2, #1
 800915c:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3380      	adds	r3, #128	; 0x80
 800916a:	461a      	mov	r2, r3
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	025b      	lsls	r3, r3, #9
 8009170:	089b      	lsrs	r3, r3, #2
 8009172:	f7fc f98d 	bl	8005490 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009176:	f04f 33ff 	mov.w	r3, #4294967295
 800917a:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	025b      	lsls	r3, r3, #9
 8009180:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009182:	2390      	movs	r3, #144	; 0x90
 8009184:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009186:	2300      	movs	r3, #0
 8009188:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800918a:	2300      	movs	r3, #0
 800918c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800918e:	2301      	movs	r3, #1
 8009190:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f107 0214 	add.w	r2, r7, #20
 800919a:	4611      	mov	r1, r2
 800919c:	4618      	mov	r0, r3
 800919e:	f003 f93e 	bl	800c41e <SDIO_ConfigData>
    
    return HAL_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	e000      	b.n	80091a8 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 80091a6:	2302      	movs	r3, #2
  }
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3730      	adds	r7, #48	; 0x30
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	08009a89 	.word	0x08009a89
 80091b4:	08009b21 	.word	0x08009b21
 80091b8:	4225858c 	.word	0x4225858c

080091bc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80091c4:	2300      	movs	r3, #0
 80091c6:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 808d 	beq.w	80092f2 <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80091e0:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	6812      	ldr	r2, [r2, #0]
 80091ec:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80091f0:	f023 0302 	bic.w	r3, r3, #2
 80091f4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fa:	f003 0308 	and.w	r3, r3, #8
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d03a      	beq.n	8009278 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009206:	f003 0302 	and.w	r3, r3, #2
 800920a:	2b00      	cmp	r3, #0
 800920c:	d105      	bne.n	800921a <HAL_SD_IRQHandler+0x5e>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009212:	f003 0320 	and.w	r3, r3, #32
 8009216:	2b00      	cmp	r3, #0
 8009218:	d011      	beq.n	800923e <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4618      	mov	r0, r3
 8009220:	f003 f9de 	bl	800c5e0 <SDMMC_CmdStopTransfer>
 8009224:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d008      	beq.n	800923e <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	431a      	orrs	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f925 	bl	8009488 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009246:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	2b00      	cmp	r3, #0
 800925a:	d105      	bne.n	8009268 <HAL_SD_IRQHandler+0xac>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009260:	f003 0302 	and.w	r3, r3, #2
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f009 f80f 	bl	801228c <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 800926e:	e103      	b.n	8009478 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f009 f801 	bl	8012278 <HAL_SD_TxCpltCallback>
}
 8009276:	e0ff      	b.n	8009478 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800927c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 80f9 	beq.w	8009478 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928a:	f003 0320 	and.w	r3, r3, #32
 800928e:	2b00      	cmp	r3, #0
 8009290:	d011      	beq.n	80092b6 <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4618      	mov	r0, r3
 8009298:	f003 f9a2 	bl	800c5e0 <SDMMC_CmdStopTransfer>
 800929c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d008      	beq.n	80092b6 <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	431a      	orrs	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f8e9 	bl	8009488 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ba:	f003 0301 	and.w	r3, r3, #1
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f040 80da 	bne.w	8009478 <HAL_SD_IRQHandler+0x2bc>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c8:	f003 0302 	and.w	r3, r3, #2
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f040 80d3 	bne.w	8009478 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f022 0208 	bic.w	r2, r2, #8
 80092e0:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f008 ffc4 	bl	8012278 <HAL_SD_TxCpltCallback>
}
 80092f0:	e0c2      	b.n	8009478 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d008      	beq.n	8009312 <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009308:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 ffef 	bl	800a2ee <SD_Write_IT>
}
 8009310:	e0b2      	b.n	8009478 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d008      	beq.n	8009332 <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009328:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 ffb7 	bl	800a29e <SD_Read_IT>
}
 8009330:	e0a2      	b.n	8009478 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009338:	f240 233a 	movw	r3, #570	; 0x23a
 800933c:	4013      	ands	r3, r2
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 809a 	beq.w	8009478 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934a:	f003 0302 	and.w	r3, r3, #2
 800934e:	2b00      	cmp	r3, #0
 8009350:	d005      	beq.n	800935e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009356:	f043 0202 	orr.w	r2, r3, #2
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009364:	f003 0308 	and.w	r3, r3, #8
 8009368:	2b00      	cmp	r3, #0
 800936a:	d005      	beq.n	8009378 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009370:	f043 0208 	orr.w	r2, r3, #8
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937e:	f003 0320 	and.w	r3, r3, #32
 8009382:	2b00      	cmp	r3, #0
 8009384:	d005      	beq.n	8009392 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938a:	f043 0220 	orr.w	r2, r3, #32
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009398:	f003 0310 	and.w	r3, r3, #16
 800939c:	2b00      	cmp	r3, #0
 800939e:	d005      	beq.n	80093ac <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a4:	f043 0210 	orr.w	r2, r3, #16
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d005      	beq.n	80093c6 <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093be:	f043 0208 	orr.w	r2, r3, #8
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80093ce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	6812      	ldr	r2, [r2, #0]
 80093da:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80093de:	f023 0302 	bic.w	r3, r3, #2
 80093e2:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d036      	beq.n	800945e <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d011      	beq.n	800941c <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fc:	4a20      	ldr	r2, [pc, #128]	; (8009480 <HAL_SD_IRQHandler+0x2c4>)
 80093fe:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009404:	4618      	mov	r0, r3
 8009406:	f7fc f8a3 	bl	8005550 <HAL_DMA_Abort_IT>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d033      	beq.n	8009478 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009414:	4618      	mov	r0, r3
 8009416:	f000 fbc8 	bl	8009baa <SD_DMATxAbort>
}
 800941a:	e02d      	b.n	8009478 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009420:	2b00      	cmp	r3, #0
 8009422:	d011      	beq.n	8009448 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009428:	4a16      	ldr	r2, [pc, #88]	; (8009484 <HAL_SD_IRQHandler+0x2c8>)
 800942a:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009430:	4618      	mov	r0, r3
 8009432:	f7fc f88d 	bl	8005550 <HAL_DMA_Abort_IT>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d01d      	beq.n	8009478 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009440:	4618      	mov	r0, r3
 8009442:	f000 fbf0 	bl	8009c26 <SD_DMARxAbort>
}
 8009446:	e017      	b.n	8009478 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f008 ff04 	bl	8012264 <HAL_SD_AbortCallback>
}
 800945c:	e00c      	b.n	8009478 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009462:	f003 0308 	and.w	r3, r3, #8
 8009466:	2b00      	cmp	r3, #0
 8009468:	d006      	beq.n	8009478 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2201      	movs	r2, #1
 800946e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f808 	bl	8009488 <HAL_SD_ErrorCallback>
}
 8009478:	bf00      	nop
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	08009bab 	.word	0x08009bab
 8009484:	08009c27 	.word	0x08009c27

08009488 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80094a6:	2300      	movs	r3, #0
 80094a8:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094ae:	0e1b      	lsrs	r3, r3, #24
 80094b0:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	099b      	lsrs	r3, r3, #6
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	f003 0303 	and.w	r3, r3, #3
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	089b      	lsrs	r3, r3, #2
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	f003 030f 	and.w	r3, r3, #15
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	f003 0303 	and.w	r3, r3, #3
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094e4:	0c1b      	lsrs	r3, r3, #16
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094f6:	0a1b      	lsrs	r3, r3, #8
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009508:	b2db      	uxtb	r3, r3
 800950a:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	b2da      	uxtb	r2, r3
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009518:	0e1b      	lsrs	r3, r3, #24
 800951a:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	b29b      	uxth	r3, r3
 8009520:	011b      	lsls	r3, r3, #4
 8009522:	b29a      	uxth	r2, r3
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800952c:	0c1b      	lsrs	r3, r3, #16
 800952e:	b2db      	uxtb	r3, r3
 8009530:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	88db      	ldrh	r3, [r3, #6]
 8009536:	b29a      	uxth	r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	091b      	lsrs	r3, r3, #4
 800953c:	b29b      	uxth	r3, r3
 800953e:	f003 030f 	and.w	r3, r3, #15
 8009542:	b29b      	uxth	r3, r3
 8009544:	4313      	orrs	r3, r2
 8009546:	b29a      	uxth	r2, r3
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	b2db      	uxtb	r3, r3
 8009550:	f003 030f 	and.w	r3, r3, #15
 8009554:	b2da      	uxtb	r2, r3
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800955e:	0a1b      	lsrs	r3, r3, #8
 8009560:	b2db      	uxtb	r3, r3
 8009562:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	09db      	lsrs	r3, r3, #7
 8009568:	b2db      	uxtb	r3, r3
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	b2da      	uxtb	r2, r3
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	099b      	lsrs	r3, r3, #6
 8009578:	b2db      	uxtb	r3, r3
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	b2da      	uxtb	r2, r3
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	095b      	lsrs	r3, r3, #5
 8009588:	b2db      	uxtb	r3, r3
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	b2da      	uxtb	r2, r3
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	091b      	lsrs	r3, r3, #4
 8009598:	b2db      	uxtb	r3, r3
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2200      	movs	r2, #0
 80095a8:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f040 8087 	bne.w	80096c2 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	029b      	lsls	r3, r3, #10
 80095b8:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	691a      	ldr	r2, [r3, #16]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	431a      	orrs	r2, r3
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095da:	0e1b      	lsrs	r3, r3, #24
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	691a      	ldr	r2, [r3, #16]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	099b      	lsrs	r3, r3, #6
 80095e8:	f003 0303 	and.w	r3, r3, #3
 80095ec:	431a      	orrs	r2, r3
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	08db      	lsrs	r3, r3, #3
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	f003 0307 	and.w	r3, r3, #7
 80095fc:	b2da      	uxtb	r2, r3
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	b2db      	uxtb	r3, r3
 8009606:	f003 0307 	and.w	r3, r3, #7
 800960a:	b2da      	uxtb	r2, r3
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009614:	0c1b      	lsrs	r3, r3, #16
 8009616:	b2db      	uxtb	r3, r3
 8009618:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	095b      	lsrs	r3, r3, #5
 800961e:	b2db      	uxtb	r3, r3
 8009620:	f003 0307 	and.w	r3, r3, #7
 8009624:	b2da      	uxtb	r2, r3
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	089b      	lsrs	r3, r3, #2
 800962e:	b2db      	uxtb	r3, r3
 8009630:	f003 0307 	and.w	r3, r3, #7
 8009634:	b2da      	uxtb	r2, r3
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	b2db      	uxtb	r3, r3
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	b2db      	uxtb	r3, r3
 8009642:	f003 0306 	and.w	r3, r3, #6
 8009646:	b2da      	uxtb	r2, r3
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009650:	0a1b      	lsrs	r3, r3, #8
 8009652:	b2db      	uxtb	r3, r3
 8009654:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	7e1b      	ldrb	r3, [r3, #24]
 800965a:	b2da      	uxtb	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	09db      	lsrs	r3, r3, #7
 8009660:	b2db      	uxtb	r3, r3
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	b2db      	uxtb	r3, r3
 8009668:	4313      	orrs	r3, r2
 800966a:	b2da      	uxtb	r2, r3
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	7e1b      	ldrb	r3, [r3, #24]
 800967e:	b2db      	uxtb	r3, r3
 8009680:	3302      	adds	r3, #2
 8009682:	2201      	movs	r2, #1
 8009684:	fa02 f303 	lsl.w	r3, r2, r3
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800968c:	fb02 f203 	mul.w	r2, r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	7a1b      	ldrb	r3, [r3, #8]
 8009698:	b2db      	uxtb	r3, r3
 800969a:	461a      	mov	r2, r3
 800969c:	2301      	movs	r3, #1
 800969e:	fa03 f202 	lsl.w	r2, r3, r2
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80096ae:	0a52      	lsrs	r2, r2, #9
 80096b0:	fb02 f203 	mul.w	r2, r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096be:	661a      	str	r2, [r3, #96]	; 0x60
 80096c0:	e04d      	b.n	800975e <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d138      	bne.n	800973c <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	041b      	lsls	r3, r3, #16
 80096d6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096e2:	0e1b      	lsrs	r3, r3, #24
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	691a      	ldr	r2, [r3, #16]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	021b      	lsls	r3, r3, #8
 80096f0:	431a      	orrs	r2, r3
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096fa:	0c1b      	lsrs	r3, r3, #16
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	691a      	ldr	r2, [r3, #16]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	431a      	orrs	r2, r3
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009710:	0a1b      	lsrs	r3, r3, #8
 8009712:	b2db      	uxtb	r3, r3
 8009714:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	3301      	adds	r3, #1
 800971c:	029a      	lsls	r2, r3, #10
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	655a      	str	r2, [r3, #84]	; 0x54
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009730:	659a      	str	r2, [r3, #88]	; 0x58
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	661a      	str	r2, [r3, #96]	; 0x60
 800973a:	e010      	b.n	800975e <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009744:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2201      	movs	r2, #1
 8009756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e0c1      	b.n	80098e2 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	099b      	lsrs	r3, r3, #6
 8009762:	b2db      	uxtb	r3, r3
 8009764:	f003 0301 	and.w	r3, r3, #1
 8009768:	b2da      	uxtb	r2, r3
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	b2db      	uxtb	r3, r3
 8009772:	005b      	lsls	r3, r3, #1
 8009774:	b2db      	uxtb	r3, r3
 8009776:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800977a:	b2da      	uxtb	r2, r3
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009784:	b2db      	uxtb	r3, r3
 8009786:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	7e9b      	ldrb	r3, [r3, #26]
 800978c:	b2da      	uxtb	r2, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	09db      	lsrs	r3, r3, #7
 8009792:	b2db      	uxtb	r3, r3
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	b2db      	uxtb	r3, r3
 800979a:	4313      	orrs	r3, r2
 800979c:	b2da      	uxtb	r2, r3
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097b4:	0e1b      	lsrs	r3, r3, #24
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	09db      	lsrs	r3, r3, #7
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	095b      	lsrs	r3, r3, #5
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	f003 0303 	and.w	r3, r3, #3
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	089b      	lsrs	r3, r3, #2
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	f003 0307 	and.w	r3, r3, #7
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	f003 030c 	and.w	r3, r3, #12
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009800:	0c1b      	lsrs	r3, r3, #16
 8009802:	b2db      	uxtb	r3, r3
 8009804:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	7fdb      	ldrb	r3, [r3, #31]
 800980a:	b2da      	uxtb	r2, r3
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	099b      	lsrs	r3, r3, #6
 8009810:	b2db      	uxtb	r3, r3
 8009812:	f003 0303 	and.w	r3, r3, #3
 8009816:	b2db      	uxtb	r3, r3
 8009818:	4313      	orrs	r3, r2
 800981a:	b2da      	uxtb	r2, r3
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	095b      	lsrs	r3, r3, #5
 8009824:	b2db      	uxtb	r3, r3
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	b2da      	uxtb	r2, r3
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	b2db      	uxtb	r3, r3
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	b2da      	uxtb	r2, r3
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800984e:	0a1b      	lsrs	r3, r3, #8
 8009850:	b2db      	uxtb	r3, r3
 8009852:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	09db      	lsrs	r3, r3, #7
 8009858:	b2db      	uxtb	r3, r3
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	b2da      	uxtb	r2, r3
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	099b      	lsrs	r3, r3, #6
 800986a:	b2db      	uxtb	r3, r3
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	b2da      	uxtb	r2, r3
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	095b      	lsrs	r3, r3, #5
 800987c:	b2db      	uxtb	r3, r3
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	b2da      	uxtb	r2, r3
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	091b      	lsrs	r3, r3, #4
 800988e:	b2db      	uxtb	r3, r3
 8009890:	f003 0301 	and.w	r3, r3, #1
 8009894:	b2da      	uxtb	r2, r3
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	089b      	lsrs	r3, r3, #2
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	f003 0303 	and.w	r3, r3, #3
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	f003 0303 	and.w	r3, r3, #3
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	085b      	lsrs	r3, r3, #1
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098d0:	b2da      	uxtb	r2, r3
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b083      	sub	sp, #12
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009946:	b5b0      	push	{r4, r5, r7, lr}
 8009948:	b08e      	sub	sp, #56	; 0x38
 800994a:	af04      	add	r7, sp, #16
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009950:	2300      	movs	r3, #0
 8009952:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2203      	movs	r2, #3
 8009958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009960:	2b03      	cmp	r3, #3
 8009962:	d02e      	beq.n	80099c2 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800996a:	d106      	bne.n	800997a <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009970:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	639a      	str	r2, [r3, #56]	; 0x38
 8009978:	e029      	b.n	80099ce <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009980:	d10a      	bne.n	8009998 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fb28 	bl	8009fd8 <SD_WideBus_Enable>
 8009988:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	431a      	orrs	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	639a      	str	r2, [r3, #56]	; 0x38
 8009996:	e01a      	b.n	80099ce <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10a      	bne.n	80099b4 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fb67 	bl	800a072 <SD_WideBus_Disable>
 80099a4:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	431a      	orrs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	639a      	str	r2, [r3, #56]	; 0x38
 80099b2:	e00c      	b.n	80099ce <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	639a      	str	r2, [r3, #56]	; 0x38
 80099c0:	e005      	b.n	80099ce <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00a      	beq.n	80099ec <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80099de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	e024      	b.n	8009a36 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681d      	ldr	r5, [r3, #0]
 8009a12:	466c      	mov	r4, sp
 8009a14:	f107 0318 	add.w	r3, r7, #24
 8009a18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a20:	f107 030c 	add.w	r3, r7, #12
 8009a24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a26:	4628      	mov	r0, r5
 8009a28:	f002 fc48 	bl	800c2bc <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3728      	adds	r7, #40	; 0x28
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bdb0      	pop	{r4, r5, r7, pc}

08009a3e <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b086      	sub	sp, #24
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8009a46:	2304      	movs	r3, #4
 8009a48:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8009a52:	f107 030c 	add.w	r3, r7, #12
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fa93 	bl	8009f84 <SD_SendStatus>
 8009a5e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d005      	beq.n	8009a72 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	431a      	orrs	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	0a5b      	lsrs	r3, r3, #9
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	f003 030f 	and.w	r3, r3, #15
 8009a7c:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8009a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3718      	adds	r7, #24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a94:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009aa4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009aa6:	bf00      	nop
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr

08009ab2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b084      	sub	sp, #16
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abe:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac8:	2b82      	cmp	r3, #130	; 0x82
 8009aca:	d111      	bne.n	8009af0 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f002 fd85 	bl	800c5e0 <SDMMC_CmdStopTransfer>
 8009ad6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d008      	beq.n	8009af0 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	431a      	orrs	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f7ff fccc 	bl	8009488 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f022 0208 	bic.w	r2, r2, #8
 8009afe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009b08:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f008 fbba 	bl	801228c <HAL_SD_RxCpltCallback>
#endif
}
 8009b18:	bf00      	nop
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d004      	beq.n	8009b42 <SD_DMAError+0x22>
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d12c      	bne.n	8009b9c <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009b4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009b5a:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f7ff ff68 	bl	8009a3e <HAL_SD_GetCardState>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009b72:	7afb      	ldrb	r3, [r7, #11]
 8009b74:	2b06      	cmp	r3, #6
 8009b76:	d002      	beq.n	8009b7e <SD_DMAError+0x5e>
 8009b78:	7afb      	ldrb	r3, [r7, #11]
 8009b7a:	2b05      	cmp	r3, #5
 8009b7c:	d10a      	bne.n	8009b94 <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f002 fd2c 	bl	800c5e0 <SDMMC_CmdStopTransfer>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8e:	431a      	orrs	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f7ff fc73 	bl	8009488 <HAL_SD_ErrorCallback>
#endif
}
 8009ba2:	bf00      	nop
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b084      	sub	sp, #16
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d002      	beq.n	8009bc6 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d127      	bne.n	8009c1e <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f7ff ff35 	bl	8009a3e <HAL_SD_GetCardState>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009be6:	7afb      	ldrb	r3, [r7, #11]
 8009be8:	2b06      	cmp	r3, #6
 8009bea:	d002      	beq.n	8009bf2 <SD_DMATxAbort+0x48>
 8009bec:	7afb      	ldrb	r3, [r7, #11]
 8009bee:	2b05      	cmp	r3, #5
 8009bf0:	d115      	bne.n	8009c1e <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f002 fcf2 	bl	800c5e0 <SDMMC_CmdStopTransfer>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c02:	431a      	orrs	r2, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d003      	beq.n	8009c18 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f008 fb27 	bl	8012264 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8009c16:	e002      	b.n	8009c1e <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f7ff fc35 	bl	8009488 <HAL_SD_ErrorCallback>
}
 8009c1e:	bf00      	nop
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c32:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d127      	bne.n	8009c9a <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f7ff fef7 	bl	8009a3e <HAL_SD_GetCardState>
 8009c50:	4603      	mov	r3, r0
 8009c52:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2200      	movs	r2, #0
 8009c58:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009c62:	7afb      	ldrb	r3, [r7, #11]
 8009c64:	2b06      	cmp	r3, #6
 8009c66:	d002      	beq.n	8009c6e <SD_DMARxAbort+0x48>
 8009c68:	7afb      	ldrb	r3, [r7, #11]
 8009c6a:	2b05      	cmp	r3, #5
 8009c6c:	d115      	bne.n	8009c9a <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f002 fcb4 	bl	800c5e0 <SDMMC_CmdStopTransfer>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7e:	431a      	orrs	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d003      	beq.n	8009c94 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f008 fae9 	bl	8012264 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8009c92:	e002      	b.n	8009c9a <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f7ff fbf7 	bl	8009488 <HAL_SD_ErrorCallback>
}
 8009c9a:	bf00      	nop
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ca2:	b5b0      	push	{r4, r5, r7, lr}
 8009ca4:	b094      	sub	sp, #80	; 0x50
 8009ca6:	af04      	add	r7, sp, #16
 8009ca8:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009caa:	2300      	movs	r3, #0
 8009cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f002 fb57 	bl	800c36a <SDIO_GetPowerState>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d102      	bne.n	8009cc8 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009cc2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009cc6:	e0b1      	b.n	8009e2c <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ccc:	2b03      	cmp	r3, #3
 8009cce:	d02f      	beq.n	8009d30 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f002 fd9d 	bl	800c814 <SDMMC_CmdSendCID>
 8009cda:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <SD_InitCard+0x44>
    {
      return errorstate;
 8009ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce4:	e0a2      	b.n	8009e2c <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2100      	movs	r1, #0
 8009cec:	4618      	mov	r0, r3
 8009cee:	f002 fb81 	bl	800c3f4 <SDIO_GetResponse>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2104      	movs	r1, #4
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f002 fb78 	bl	800c3f4 <SDIO_GetResponse>
 8009d04:	4602      	mov	r2, r0
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2108      	movs	r1, #8
 8009d10:	4618      	mov	r0, r3
 8009d12:	f002 fb6f 	bl	800c3f4 <SDIO_GetResponse>
 8009d16:	4602      	mov	r2, r0
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	210c      	movs	r1, #12
 8009d22:	4618      	mov	r0, r3
 8009d24:	f002 fb66 	bl	800c3f4 <SDIO_GetResponse>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d34:	2b03      	cmp	r3, #3
 8009d36:	d00d      	beq.n	8009d54 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f107 020e 	add.w	r2, r7, #14
 8009d40:	4611      	mov	r1, r2
 8009d42:	4618      	mov	r0, r3
 8009d44:	f002 fda7 	bl	800c896 <SDMMC_CmdSetRelAdd>
 8009d48:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d001      	beq.n	8009d54 <SD_InitCard+0xb2>
    {
      return errorstate;
 8009d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d52:	e06b      	b.n	8009e2c <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d58:	2b03      	cmp	r3, #3
 8009d5a:	d036      	beq.n	8009dca <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009d5c:	89fb      	ldrh	r3, [r7, #14]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d6c:	041b      	lsls	r3, r3, #16
 8009d6e:	4619      	mov	r1, r3
 8009d70:	4610      	mov	r0, r2
 8009d72:	f002 fd6f 	bl	800c854 <SDMMC_CmdSendCSD>
 8009d76:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <SD_InitCard+0xe0>
    {
      return errorstate;
 8009d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d80:	e054      	b.n	8009e2c <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2100      	movs	r1, #0
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f002 fb33 	bl	800c3f4 <SDIO_GetResponse>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2104      	movs	r1, #4
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f002 fb2a 	bl	800c3f4 <SDIO_GetResponse>
 8009da0:	4602      	mov	r2, r0
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2108      	movs	r1, #8
 8009dac:	4618      	mov	r0, r3
 8009dae:	f002 fb21 	bl	800c3f4 <SDIO_GetResponse>
 8009db2:	4602      	mov	r2, r0
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	210c      	movs	r1, #12
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f002 fb18 	bl	800c3f4 <SDIO_GetResponse>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2104      	movs	r1, #4
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f002 fb0f 	bl	800c3f4 <SDIO_GetResponse>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	0d1a      	lsrs	r2, r3, #20
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8009dde:	f107 0310 	add.w	r3, r7, #16
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7ff fb59 	bl	800949c <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6819      	ldr	r1, [r3, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009df2:	041b      	lsls	r3, r3, #16
 8009df4:	f04f 0400 	mov.w	r4, #0
 8009df8:	461a      	mov	r2, r3
 8009dfa:	4623      	mov	r3, r4
 8009dfc:	4608      	mov	r0, r1
 8009dfe:	f002 fc13 	bl	800c628 <SDMMC_CmdSelDesel>
 8009e02:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <SD_InitCard+0x16c>
  {
    return errorstate;
 8009e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e0c:	e00e      	b.n	8009e2c <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681d      	ldr	r5, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	466c      	mov	r4, sp
 8009e16:	f103 0210 	add.w	r2, r3, #16
 8009e1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8009e1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e20:	3304      	adds	r3, #4
 8009e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e24:	4628      	mov	r0, r5
 8009e26:	f002 fa49 	bl	800c2bc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3740      	adds	r7, #64	; 0x40
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bdb0      	pop	{r4, r5, r7, pc}

08009e34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009e40:	2300      	movs	r3, #0
 8009e42:	617b      	str	r3, [r7, #20]
 8009e44:	2300      	movs	r3, #0
 8009e46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f002 fc0e 	bl	800c672 <SDMMC_CmdGoIdleState>
 8009e56:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <SD_PowerON+0x2e>
  {
    return errorstate;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	e08c      	b.n	8009f7c <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f002 fc23 	bl	800c6b2 <SDMMC_CmdOperCond>
 8009e6c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d03d      	beq.n	8009ef0 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8009e7a:	e032      	b.n	8009ee2 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	1c5a      	adds	r2, r3, #1
 8009e80:	60ba      	str	r2, [r7, #8]
 8009e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d102      	bne.n	8009e90 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009e8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e8e:	e075      	b.n	8009f7c <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2100      	movs	r1, #0
 8009e96:	4618      	mov	r0, r3
 8009e98:	f002 fc2c 	bl	800c6f4 <SDMMC_CmdAppCommand>
 8009e9c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ea4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ea8:	e068      	b.n	8009f7c <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2100      	movs	r1, #0
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f002 fc43 	bl	800c73c <SDMMC_CmdAppOperCommand>
 8009eb6:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d002      	beq.n	8009ec4 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ebe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ec2:	e05b      	b.n	8009f7c <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2100      	movs	r1, #0
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f002 fa92 	bl	800c3f4 <SDIO_GetResponse>
 8009ed0:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	0fdb      	lsrs	r3, r3, #31
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d101      	bne.n	8009ede <SD_PowerON+0xaa>
 8009eda:	2301      	movs	r3, #1
 8009edc:	e000      	b.n	8009ee0 <SD_PowerON+0xac>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d0c9      	beq.n	8009e7c <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	645a      	str	r2, [r3, #68]	; 0x44
 8009eee:	e044      	b.n	8009f7a <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8009ef6:	e031      	b.n	8009f5c <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	1c5a      	adds	r2, r3, #1
 8009efc:	60ba      	str	r2, [r7, #8]
 8009efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d102      	bne.n	8009f0c <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009f06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f0a:	e037      	b.n	8009f7c <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2100      	movs	r1, #0
 8009f12:	4618      	mov	r0, r3
 8009f14:	f002 fbee 	bl	800c6f4 <SDMMC_CmdAppCommand>
 8009f18:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <SD_PowerON+0xf0>
      {
        return errorstate;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	e02b      	b.n	8009f7c <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f002 fc05 	bl	800c73c <SDMMC_CmdAppOperCommand>
 8009f32:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d001      	beq.n	8009f3e <SD_PowerON+0x10a>
      {
        return errorstate;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	e01e      	b.n	8009f7c <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2100      	movs	r1, #0
 8009f44:	4618      	mov	r0, r3
 8009f46:	f002 fa55 	bl	800c3f4 <SDIO_GetResponse>
 8009f4a:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	0fdb      	lsrs	r3, r3, #31
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d101      	bne.n	8009f58 <SD_PowerON+0x124>
 8009f54:	2301      	movs	r3, #1
 8009f56:	e000      	b.n	8009f5a <SD_PowerON+0x126>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d0ca      	beq.n	8009ef8 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d003      	beq.n	8009f74 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	645a      	str	r2, [r3, #68]	; 0x44
 8009f72:	e002      	b.n	8009f7a <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3718      	adds	r7, #24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d102      	bne.n	8009f9e <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8009f98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f9c:	e018      	b.n	8009fd0 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fa6:	041b      	lsls	r3, r3, #16
 8009fa8:	4619      	mov	r1, r3
 8009faa:	4610      	mov	r0, r2
 8009fac:	f002 fc96 	bl	800c8dc <SDMMC_CmdSendStatus>
 8009fb0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <SD_SendStatus+0x38>
  {
    return errorstate;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	e009      	b.n	8009fd0 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f002 fa16 	bl	800c3f4 <SDIO_GetResponse>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	60fb      	str	r3, [r7, #12]
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f002 f9fe 	bl	800c3f4 <SDIO_GetResponse>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ffe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a002:	d102      	bne.n	800a00a <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a008:	e02f      	b.n	800a06a <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a00a:	f107 030c 	add.w	r3, r7, #12
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 f87b 	bl	800a10c <SD_FindSCR>
 800a016:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	e023      	b.n	800a06a <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d01c      	beq.n	800a066 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a034:	041b      	lsls	r3, r3, #16
 800a036:	4619      	mov	r1, r3
 800a038:	4610      	mov	r0, r2
 800a03a:	f002 fb5b 	bl	800c6f4 <SDMMC_CmdAppCommand>
 800a03e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d001      	beq.n	800a04a <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	e00f      	b.n	800a06a <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2102      	movs	r1, #2
 800a050:	4618      	mov	r0, r3
 800a052:	f002 fb98 	bl	800c786 <SDMMC_CmdBusWidth>
 800a056:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	e003      	b.n	800a06a <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800a062:	2300      	movs	r3, #0
 800a064:	e001      	b.n	800a06a <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a066:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b086      	sub	sp, #24
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a07a:	2300      	movs	r3, #0
 800a07c:	60fb      	str	r3, [r7, #12]
 800a07e:	2300      	movs	r3, #0
 800a080:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a082:	2300      	movs	r3, #0
 800a084:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2100      	movs	r1, #0
 800a08c:	4618      	mov	r0, r3
 800a08e:	f002 f9b1 	bl	800c3f4 <SDIO_GetResponse>
 800a092:	4603      	mov	r3, r0
 800a094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a098:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a09c:	d102      	bne.n	800a0a4 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a09e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0a2:	e02f      	b.n	800a104 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a0a4:	f107 030c 	add.w	r3, r7, #12
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f82e 	bl	800a10c <SD_FindSCR>
 800a0b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	e023      	b.n	800a104 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d01c      	beq.n	800a100 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ce:	041b      	lsls	r3, r3, #16
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	f002 fb0e 	bl	800c6f4 <SDMMC_CmdAppCommand>
 800a0d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d001      	beq.n	800a0e4 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	e00f      	b.n	800a104 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f002 fb4b 	bl	800c786 <SDMMC_CmdBusWidth>
 800a0f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	e003      	b.n	800a104 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	e001      	b.n	800a104 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a100:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a104:	4618      	mov	r0, r3
 800a106:	3718      	adds	r7, #24
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a10c:	b590      	push	{r4, r7, lr}
 800a10e:	b08f      	sub	sp, #60	; 0x3c
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a116:	2300      	movs	r3, #0
 800a118:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800a11a:	f7fa ffcb 	bl	80050b4 <HAL_GetTick>
 800a11e:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 800a120:	2300      	movs	r3, #0
 800a122:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a124:	2300      	movs	r3, #0
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	2300      	movs	r3, #0
 800a12a:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2108      	movs	r1, #8
 800a132:	4618      	mov	r0, r3
 800a134:	f002 f99f 	bl	800c476 <SDMMC_CmdBlockLength>
 800a138:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800a13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d001      	beq.n	800a144 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a142:	e0a8      	b.n	800a296 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a14c:	041b      	lsls	r3, r3, #16
 800a14e:	4619      	mov	r1, r3
 800a150:	4610      	mov	r0, r2
 800a152:	f002 facf 	bl	800c6f4 <SDMMC_CmdAppCommand>
 800a156:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800a158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a160:	e099      	b.n	800a296 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a162:	f04f 33ff 	mov.w	r3, #4294967295
 800a166:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 800a168:	2308      	movs	r3, #8
 800a16a:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a16c:	2330      	movs	r3, #48	; 0x30
 800a16e:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a170:	2302      	movs	r3, #2
 800a172:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a174:	2300      	movs	r3, #0
 800a176:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a178:	2301      	movs	r3, #1
 800a17a:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f107 0214 	add.w	r2, r7, #20
 800a184:	4611      	mov	r1, r2
 800a186:	4618      	mov	r0, r3
 800a188:	f002 f949 	bl	800c41e <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4618      	mov	r0, r3
 800a192:	f002 fb1c 	bl	800c7ce <SDMMC_CmdSendSCR>
 800a196:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d022      	beq.n	800a1e4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a0:	e079      	b.n	800a296 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00e      	beq.n	800a1ce <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6819      	ldr	r1, [r3, #0]
 800a1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	f107 020c 	add.w	r2, r7, #12
 800a1bc:	18d4      	adds	r4, r2, r3
 800a1be:	4608      	mov	r0, r1
 800a1c0:	f002 f8a7 	bl	800c312 <SDIO_ReadFIFO>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	6023      	str	r3, [r4, #0]
      index++;
 800a1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a1ce:	f7fa ff71 	bl	80050b4 <HAL_GetTick>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1dc:	d102      	bne.n	800a1e4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a1de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1e2:	e058      	b.n	800a296 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1ea:	f240 432a 	movw	r3, #1066	; 0x42a
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d0d6      	beq.n	800a1a2 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1fa:	f003 0308 	and.w	r3, r3, #8
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d005      	beq.n	800a20e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2208      	movs	r2, #8
 800a208:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a20a:	2308      	movs	r3, #8
 800a20c:	e043      	b.n	800a296 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a214:	f003 0302 	and.w	r3, r3, #2
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d005      	beq.n	800a228 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2202      	movs	r2, #2
 800a222:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a224:	2302      	movs	r3, #2
 800a226:	e036      	b.n	800a296 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a22e:	f003 0320 	and.w	r3, r3, #32
 800a232:	2b00      	cmp	r3, #0
 800a234:	d005      	beq.n	800a242 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2220      	movs	r2, #32
 800a23c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800a23e:	2320      	movs	r3, #32
 800a240:	e029      	b.n	800a296 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a24a:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	061a      	lsls	r2, r3, #24
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	021b      	lsls	r3, r3, #8
 800a254:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a258:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	0a1b      	lsrs	r3, r3, #8
 800a25e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800a262:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800a26e:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800a270:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	061a      	lsls	r2, r3, #24
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	021b      	lsls	r3, r3, #8
 800a27a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a27e:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	0a1b      	lsrs	r3, r3, #8
 800a284:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800a288:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	0e1b      	lsrs	r3, r3, #24
 800a28e:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	373c      	adds	r7, #60	; 0x3c
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd90      	pop	{r4, r7, pc}

0800a29e <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a29e:	b590      	push	{r4, r7, lr}
 800a2a0:	b085      	sub	sp, #20
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ae:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	e00d      	b.n	800a2d2 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6819      	ldr	r1, [r3, #0]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	18d4      	adds	r4, r2, r3
 800a2c2:	4608      	mov	r0, r1
 800a2c4:	f002 f825 	bl	800c312 <SDIO_ReadFIFO>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	60fb      	str	r3, [r7, #12]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2b07      	cmp	r3, #7
 800a2d6:	d9ee      	bls.n	800a2b6 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2dc:	f103 0220 	add.w	r2, r3, #32
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd90      	pop	{r4, r7, pc}

0800a2ee <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b084      	sub	sp, #16
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 800a300:	2300      	movs	r3, #0
 800a302:	60fb      	str	r3, [r7, #12]
 800a304:	e00b      	b.n	800a31e <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6818      	ldr	r0, [r3, #0]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	4413      	add	r3, r2
 800a312:	4619      	mov	r1, r3
 800a314:	f002 f80a 	bl	800c32c <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	3301      	adds	r3, #1
 800a31c:	60fb      	str	r3, [r7, #12]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b07      	cmp	r3, #7
 800a322:	d9f0      	bls.n	800a306 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a1b      	ldr	r3, [r3, #32]
 800a328:	f103 0220 	add.w	r2, r3, #32
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b082      	sub	sp, #8
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d101      	bne.n	800a34c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	e056      	b.n	800a3fa <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d106      	bne.n	800a36c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f00a fbe4 	bl	8014b34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2202      	movs	r2, #2
 800a370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a382:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685a      	ldr	r2, [r3, #4]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	431a      	orrs	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	431a      	orrs	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	431a      	orrs	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	695b      	ldr	r3, [r3, #20]
 800a39e:	431a      	orrs	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3a8:	431a      	orrs	r2, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	69db      	ldr	r3, [r3, #28]
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a1b      	ldr	r3, [r3, #32]
 800a3b4:	ea42 0103 	orr.w	r1, r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	430a      	orrs	r2, r1
 800a3c2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	0c1b      	lsrs	r3, r3, #16
 800a3ca:	f003 0104 	and.w	r1, r3, #4
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	430a      	orrs	r2, r1
 800a3d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	69da      	ldr	r2, [r3, #28]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a3e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b088      	sub	sp, #32
 800a406:	af00      	add	r7, sp, #0
 800a408:	60f8      	str	r0, [r7, #12]
 800a40a:	60b9      	str	r1, [r7, #8]
 800a40c:	603b      	str	r3, [r7, #0]
 800a40e:	4613      	mov	r3, r2
 800a410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a412:	2300      	movs	r3, #0
 800a414:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d101      	bne.n	800a424 <HAL_SPI_Transmit+0x22>
 800a420:	2302      	movs	r3, #2
 800a422:	e11e      	b.n	800a662 <HAL_SPI_Transmit+0x260>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a42c:	f7fa fe42 	bl	80050b4 <HAL_GetTick>
 800a430:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a432:	88fb      	ldrh	r3, [r7, #6]
 800a434:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d002      	beq.n	800a448 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a442:	2302      	movs	r3, #2
 800a444:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a446:	e103      	b.n	800a650 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <HAL_SPI_Transmit+0x52>
 800a44e:	88fb      	ldrh	r3, [r7, #6]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d102      	bne.n	800a45a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a458:	e0fa      	b.n	800a650 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2203      	movs	r2, #3
 800a45e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	88fa      	ldrh	r2, [r7, #6]
 800a472:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	88fa      	ldrh	r2, [r7, #6]
 800a478:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4a0:	d107      	bne.n	800a4b2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4bc:	2b40      	cmp	r3, #64	; 0x40
 800a4be:	d007      	beq.n	800a4d0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4d8:	d14b      	bne.n	800a572 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d002      	beq.n	800a4e8 <HAL_SPI_Transmit+0xe6>
 800a4e2:	8afb      	ldrh	r3, [r7, #22]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d13e      	bne.n	800a566 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ec:	881a      	ldrh	r2, [r3, #0]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f8:	1c9a      	adds	r2, r3, #2
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a502:	b29b      	uxth	r3, r3
 800a504:	3b01      	subs	r3, #1
 800a506:	b29a      	uxth	r2, r3
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a50c:	e02b      	b.n	800a566 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	f003 0302 	and.w	r3, r3, #2
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d112      	bne.n	800a542 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a520:	881a      	ldrh	r2, [r3, #0]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52c:	1c9a      	adds	r2, r3, #2
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a536:	b29b      	uxth	r3, r3
 800a538:	3b01      	subs	r3, #1
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	86da      	strh	r2, [r3, #54]	; 0x36
 800a540:	e011      	b.n	800a566 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a542:	f7fa fdb7 	bl	80050b4 <HAL_GetTick>
 800a546:	4602      	mov	r2, r0
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	1ad3      	subs	r3, r2, r3
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	429a      	cmp	r2, r3
 800a550:	d803      	bhi.n	800a55a <HAL_SPI_Transmit+0x158>
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a558:	d102      	bne.n	800a560 <HAL_SPI_Transmit+0x15e>
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d102      	bne.n	800a566 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a560:	2303      	movs	r3, #3
 800a562:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a564:	e074      	b.n	800a650 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1ce      	bne.n	800a50e <HAL_SPI_Transmit+0x10c>
 800a570:	e04c      	b.n	800a60c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d002      	beq.n	800a580 <HAL_SPI_Transmit+0x17e>
 800a57a:	8afb      	ldrh	r3, [r7, #22]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d140      	bne.n	800a602 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	330c      	adds	r3, #12
 800a58a:	7812      	ldrb	r2, [r2, #0]
 800a58c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a592:	1c5a      	adds	r2, r3, #1
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a5a6:	e02c      	b.n	800a602 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	f003 0302 	and.w	r3, r3, #2
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d113      	bne.n	800a5de <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	330c      	adds	r3, #12
 800a5c0:	7812      	ldrb	r2, [r2, #0]
 800a5c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c8:	1c5a      	adds	r2, r3, #1
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	86da      	strh	r2, [r3, #54]	; 0x36
 800a5dc:	e011      	b.n	800a602 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5de:	f7fa fd69 	bl	80050b4 <HAL_GetTick>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	1ad3      	subs	r3, r2, r3
 800a5e8:	683a      	ldr	r2, [r7, #0]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d803      	bhi.n	800a5f6 <HAL_SPI_Transmit+0x1f4>
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f4:	d102      	bne.n	800a5fc <HAL_SPI_Transmit+0x1fa>
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d102      	bne.n	800a602 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a600:	e026      	b.n	800a650 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a606:	b29b      	uxth	r3, r3
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d1cd      	bne.n	800a5a8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a60c:	69ba      	ldr	r2, [r7, #24]
 800a60e:	6839      	ldr	r1, [r7, #0]
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f000 fa45 	bl	800aaa0 <SPI_EndRxTxTransaction>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d002      	beq.n	800a622 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2220      	movs	r2, #32
 800a620:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10a      	bne.n	800a640 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a62a:	2300      	movs	r3, #0
 800a62c:	613b      	str	r3, [r7, #16]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	613b      	str	r3, [r7, #16]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	613b      	str	r3, [r7, #16]
 800a63e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a644:	2b00      	cmp	r3, #0
 800a646:	d002      	beq.n	800a64e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	77fb      	strb	r3, [r7, #31]
 800a64c:	e000      	b.n	800a650 <HAL_SPI_Transmit+0x24e>
  }

error:
 800a64e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a660:	7ffb      	ldrb	r3, [r7, #31]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3720      	adds	r7, #32
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b08c      	sub	sp, #48	; 0x30
 800a66e:	af00      	add	r7, sp, #0
 800a670:	60f8      	str	r0, [r7, #12]
 800a672:	60b9      	str	r1, [r7, #8]
 800a674:	607a      	str	r2, [r7, #4]
 800a676:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a678:	2301      	movs	r3, #1
 800a67a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a67c:	2300      	movs	r3, #0
 800a67e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d101      	bne.n	800a690 <HAL_SPI_TransmitReceive+0x26>
 800a68c:	2302      	movs	r3, #2
 800a68e:	e18a      	b.n	800a9a6 <HAL_SPI_TransmitReceive+0x33c>
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2201      	movs	r2, #1
 800a694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a698:	f7fa fd0c 	bl	80050b4 <HAL_GetTick>
 800a69c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a6ae:	887b      	ldrh	r3, [r7, #2]
 800a6b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a6b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d00f      	beq.n	800a6da <HAL_SPI_TransmitReceive+0x70>
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6c0:	d107      	bne.n	800a6d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d103      	bne.n	800a6d2 <HAL_SPI_TransmitReceive+0x68>
 800a6ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6ce:	2b04      	cmp	r3, #4
 800a6d0:	d003      	beq.n	800a6da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a6d2:	2302      	movs	r3, #2
 800a6d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a6d8:	e15b      	b.n	800a992 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d005      	beq.n	800a6ec <HAL_SPI_TransmitReceive+0x82>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d002      	beq.n	800a6ec <HAL_SPI_TransmitReceive+0x82>
 800a6e6:	887b      	ldrh	r3, [r7, #2]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d103      	bne.n	800a6f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a6f2:	e14e      	b.n	800a992 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	2b04      	cmp	r3, #4
 800a6fe:	d003      	beq.n	800a708 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2205      	movs	r2, #5
 800a704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	887a      	ldrh	r2, [r7, #2]
 800a718:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	887a      	ldrh	r2, [r7, #2]
 800a71e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	887a      	ldrh	r2, [r7, #2]
 800a72a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	887a      	ldrh	r2, [r7, #2]
 800a730:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a748:	2b40      	cmp	r3, #64	; 0x40
 800a74a:	d007      	beq.n	800a75c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a75a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a764:	d178      	bne.n	800a858 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d002      	beq.n	800a774 <HAL_SPI_TransmitReceive+0x10a>
 800a76e:	8b7b      	ldrh	r3, [r7, #26]
 800a770:	2b01      	cmp	r3, #1
 800a772:	d166      	bne.n	800a842 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a778:	881a      	ldrh	r2, [r3, #0]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a784:	1c9a      	adds	r2, r3, #2
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a78e:	b29b      	uxth	r3, r3
 800a790:	3b01      	subs	r3, #1
 800a792:	b29a      	uxth	r2, r3
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a798:	e053      	b.n	800a842 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	f003 0302 	and.w	r3, r3, #2
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d11b      	bne.n	800a7e0 <HAL_SPI_TransmitReceive+0x176>
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d016      	beq.n	800a7e0 <HAL_SPI_TransmitReceive+0x176>
 800a7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d113      	bne.n	800a7e0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7bc:	881a      	ldrh	r2, [r3, #0]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c8:	1c9a      	adds	r2, r3, #2
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d119      	bne.n	800a822 <HAL_SPI_TransmitReceive+0x1b8>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d014      	beq.n	800a822 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68da      	ldr	r2, [r3, #12]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a802:	b292      	uxth	r2, r2
 800a804:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80a:	1c9a      	adds	r2, r3, #2
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a814:	b29b      	uxth	r3, r3
 800a816:	3b01      	subs	r3, #1
 800a818:	b29a      	uxth	r2, r3
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a81e:	2301      	movs	r3, #1
 800a820:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a822:	f7fa fc47 	bl	80050b4 <HAL_GetTick>
 800a826:	4602      	mov	r2, r0
 800a828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a82e:	429a      	cmp	r2, r3
 800a830:	d807      	bhi.n	800a842 <HAL_SPI_TransmitReceive+0x1d8>
 800a832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a838:	d003      	beq.n	800a842 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a83a:	2303      	movs	r3, #3
 800a83c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a840:	e0a7      	b.n	800a992 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a846:	b29b      	uxth	r3, r3
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1a6      	bne.n	800a79a <HAL_SPI_TransmitReceive+0x130>
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a850:	b29b      	uxth	r3, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1a1      	bne.n	800a79a <HAL_SPI_TransmitReceive+0x130>
 800a856:	e07c      	b.n	800a952 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d002      	beq.n	800a866 <HAL_SPI_TransmitReceive+0x1fc>
 800a860:	8b7b      	ldrh	r3, [r7, #26]
 800a862:	2b01      	cmp	r3, #1
 800a864:	d16b      	bne.n	800a93e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	330c      	adds	r3, #12
 800a870:	7812      	ldrb	r2, [r2, #0]
 800a872:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a878:	1c5a      	adds	r2, r3, #1
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a882:	b29b      	uxth	r3, r3
 800a884:	3b01      	subs	r3, #1
 800a886:	b29a      	uxth	r2, r3
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a88c:	e057      	b.n	800a93e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	f003 0302 	and.w	r3, r3, #2
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d11c      	bne.n	800a8d6 <HAL_SPI_TransmitReceive+0x26c>
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d017      	beq.n	800a8d6 <HAL_SPI_TransmitReceive+0x26c>
 800a8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d114      	bne.n	800a8d6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	330c      	adds	r3, #12
 800a8b6:	7812      	ldrb	r2, [r2, #0]
 800a8b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	f003 0301 	and.w	r3, r3, #1
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d119      	bne.n	800a918 <HAL_SPI_TransmitReceive+0x2ae>
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d014      	beq.n	800a918 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68da      	ldr	r2, [r3, #12]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f8:	b2d2      	uxtb	r2, r2
 800a8fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a900:	1c5a      	adds	r2, r3, #1
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	3b01      	subs	r3, #1
 800a90e:	b29a      	uxth	r2, r3
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a914:	2301      	movs	r3, #1
 800a916:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a918:	f7fa fbcc 	bl	80050b4 <HAL_GetTick>
 800a91c:	4602      	mov	r2, r0
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a924:	429a      	cmp	r2, r3
 800a926:	d803      	bhi.n	800a930 <HAL_SPI_TransmitReceive+0x2c6>
 800a928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a92e:	d102      	bne.n	800a936 <HAL_SPI_TransmitReceive+0x2cc>
 800a930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a932:	2b00      	cmp	r3, #0
 800a934:	d103      	bne.n	800a93e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a936:	2303      	movs	r3, #3
 800a938:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a93c:	e029      	b.n	800a992 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a942:	b29b      	uxth	r3, r3
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1a2      	bne.n	800a88e <HAL_SPI_TransmitReceive+0x224>
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d19d      	bne.n	800a88e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a954:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	f000 f8a2 	bl	800aaa0 <SPI_EndRxTxTransaction>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d006      	beq.n	800a970 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2220      	movs	r2, #32
 800a96c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a96e:	e010      	b.n	800a992 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10b      	bne.n	800a990 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a978:	2300      	movs	r3, #0
 800a97a:	617b      	str	r3, [r7, #20]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	617b      	str	r3, [r7, #20]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	617b      	str	r3, [r7, #20]
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	e000      	b.n	800a992 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a990:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2201      	movs	r2, #1
 800a996:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a9a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3730      	adds	r7, #48	; 0x30
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	b083      	sub	sp, #12
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9bc:	b2db      	uxtb	r3, r3
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	370c      	adds	r7, #12
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b084      	sub	sp, #16
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	60f8      	str	r0, [r7, #12]
 800a9d2:	60b9      	str	r1, [r7, #8]
 800a9d4:	603b      	str	r3, [r7, #0]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a9da:	e04c      	b.n	800aa76 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e2:	d048      	beq.n	800aa76 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a9e4:	f7fa fb66 	bl	80050b4 <HAL_GetTick>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d902      	bls.n	800a9fa <SPI_WaitFlagStateUntilTimeout+0x30>
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d13d      	bne.n	800aa76 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	685a      	ldr	r2, [r3, #4]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aa08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa12:	d111      	bne.n	800aa38 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa1c:	d004      	beq.n	800aa28 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa26:	d107      	bne.n	800aa38 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa40:	d10f      	bne.n	800aa62 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa50:	601a      	str	r2, [r3, #0]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2201      	movs	r2, #1
 800aa66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800aa72:	2303      	movs	r3, #3
 800aa74:	e00f      	b.n	800aa96 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689a      	ldr	r2, [r3, #8]
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	4013      	ands	r3, r2
 800aa80:	68ba      	ldr	r2, [r7, #8]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	bf0c      	ite	eq
 800aa86:	2301      	moveq	r3, #1
 800aa88:	2300      	movne	r3, #0
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	79fb      	ldrb	r3, [r7, #7]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d1a3      	bne.n	800a9dc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
	...

0800aaa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b088      	sub	sp, #32
 800aaa4:	af02      	add	r7, sp, #8
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aaac:	4b1b      	ldr	r3, [pc, #108]	; (800ab1c <SPI_EndRxTxTransaction+0x7c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a1b      	ldr	r2, [pc, #108]	; (800ab20 <SPI_EndRxTxTransaction+0x80>)
 800aab2:	fba2 2303 	umull	r2, r3, r2, r3
 800aab6:	0d5b      	lsrs	r3, r3, #21
 800aab8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aabc:	fb02 f303 	mul.w	r3, r2, r3
 800aac0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aaca:	d112      	bne.n	800aaf2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	2200      	movs	r2, #0
 800aad4:	2180      	movs	r1, #128	; 0x80
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f7ff ff77 	bl	800a9ca <SPI_WaitFlagStateUntilTimeout>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d016      	beq.n	800ab10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aae6:	f043 0220 	orr.w	r2, r3, #32
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aaee:	2303      	movs	r3, #3
 800aaf0:	e00f      	b.n	800ab12 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00a      	beq.n	800ab0e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	3b01      	subs	r3, #1
 800aafc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab08:	2b80      	cmp	r3, #128	; 0x80
 800ab0a:	d0f2      	beq.n	800aaf2 <SPI_EndRxTxTransaction+0x52>
 800ab0c:	e000      	b.n	800ab10 <SPI_EndRxTxTransaction+0x70>
        break;
 800ab0e:	bf00      	nop
  }

  return HAL_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3718      	adds	r7, #24
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	20000134 	.word	0x20000134
 800ab20:	165e9f81 	.word	0x165e9f81

0800ab24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e01d      	b.n	800ab72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d106      	bne.n	800ab50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f00a f83a 	bl	8014bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2202      	movs	r2, #2
 800ab54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	4619      	mov	r1, r3
 800ab62:	4610      	mov	r0, r2
 800ab64:	f000 fa76 	bl	800b054 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b085      	sub	sp, #20
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2202      	movs	r2, #2
 800ab86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	f003 0307 	and.w	r3, r3, #7
 800ab94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2b06      	cmp	r3, #6
 800ab9a:	d007      	beq.n	800abac <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f042 0201 	orr.w	r2, r2, #1
 800abaa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3714      	adds	r7, #20
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b082      	sub	sp, #8
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d101      	bne.n	800abd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	e01d      	b.n	800ac10 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d106      	bne.n	800abee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 f815 	bl	800ac18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2202      	movs	r2, #2
 800abf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	3304      	adds	r3, #4
 800abfe:	4619      	mov	r1, r3
 800ac00:	4610      	mov	r0, r2
 800ac02:	f000 fa27 	bl	800b054 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	6839      	ldr	r1, [r7, #0]
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f000 fcf2 	bl	800b628 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a15      	ldr	r2, [pc, #84]	; (800aca0 <HAL_TIM_PWM_Start+0x74>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d004      	beq.n	800ac58 <HAL_TIM_PWM_Start+0x2c>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a14      	ldr	r2, [pc, #80]	; (800aca4 <HAL_TIM_PWM_Start+0x78>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d101      	bne.n	800ac5c <HAL_TIM_PWM_Start+0x30>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e000      	b.n	800ac5e <HAL_TIM_PWM_Start+0x32>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d007      	beq.n	800ac72 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	f003 0307 	and.w	r3, r3, #7
 800ac7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2b06      	cmp	r3, #6
 800ac82:	d007      	beq.n	800ac94 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f042 0201 	orr.w	r2, r2, #1
 800ac92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac94:	2300      	movs	r3, #0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	40010000 	.word	0x40010000
 800aca4:	40010400 	.word	0x40010400

0800aca8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2200      	movs	r2, #0
 800acb8:	6839      	ldr	r1, [r7, #0]
 800acba:	4618      	mov	r0, r3
 800acbc:	f000 fcb4 	bl	800b628 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a22      	ldr	r2, [pc, #136]	; (800ad50 <HAL_TIM_PWM_Stop+0xa8>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d004      	beq.n	800acd4 <HAL_TIM_PWM_Stop+0x2c>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a21      	ldr	r2, [pc, #132]	; (800ad54 <HAL_TIM_PWM_Stop+0xac>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d101      	bne.n	800acd8 <HAL_TIM_PWM_Stop+0x30>
 800acd4:	2301      	movs	r3, #1
 800acd6:	e000      	b.n	800acda <HAL_TIM_PWM_Stop+0x32>
 800acd8:	2300      	movs	r3, #0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d017      	beq.n	800ad0e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	6a1a      	ldr	r2, [r3, #32]
 800ace4:	f241 1311 	movw	r3, #4369	; 0x1111
 800ace8:	4013      	ands	r3, r2
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10f      	bne.n	800ad0e <HAL_TIM_PWM_Stop+0x66>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	6a1a      	ldr	r2, [r3, #32]
 800acf4:	f240 4344 	movw	r3, #1092	; 0x444
 800acf8:	4013      	ands	r3, r2
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d107      	bne.n	800ad0e <HAL_TIM_PWM_Stop+0x66>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	6a1a      	ldr	r2, [r3, #32]
 800ad14:	f241 1311 	movw	r3, #4369	; 0x1111
 800ad18:	4013      	ands	r3, r2
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d10f      	bne.n	800ad3e <HAL_TIM_PWM_Stop+0x96>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	6a1a      	ldr	r2, [r3, #32]
 800ad24:	f240 4344 	movw	r3, #1092	; 0x444
 800ad28:	4013      	ands	r3, r2
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d107      	bne.n	800ad3e <HAL_TIM_PWM_Stop+0x96>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f022 0201 	bic.w	r2, r2, #1
 800ad3c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2201      	movs	r2, #1
 800ad42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	40010000 	.word	0x40010000
 800ad54:	40010400 	.word	0x40010400

0800ad58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d101      	bne.n	800ad72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ad6e:	2302      	movs	r3, #2
 800ad70:	e0b4      	b.n	800aedc <HAL_TIM_PWM_ConfigChannel+0x184>
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2201      	movs	r2, #1
 800ad76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2202      	movs	r2, #2
 800ad7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2b0c      	cmp	r3, #12
 800ad86:	f200 809f 	bhi.w	800aec8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800ad8a:	a201      	add	r2, pc, #4	; (adr r2, 800ad90 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ad8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad90:	0800adc5 	.word	0x0800adc5
 800ad94:	0800aec9 	.word	0x0800aec9
 800ad98:	0800aec9 	.word	0x0800aec9
 800ad9c:	0800aec9 	.word	0x0800aec9
 800ada0:	0800ae05 	.word	0x0800ae05
 800ada4:	0800aec9 	.word	0x0800aec9
 800ada8:	0800aec9 	.word	0x0800aec9
 800adac:	0800aec9 	.word	0x0800aec9
 800adb0:	0800ae47 	.word	0x0800ae47
 800adb4:	0800aec9 	.word	0x0800aec9
 800adb8:	0800aec9 	.word	0x0800aec9
 800adbc:	0800aec9 	.word	0x0800aec9
 800adc0:	0800ae87 	.word	0x0800ae87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68b9      	ldr	r1, [r7, #8]
 800adca:	4618      	mov	r0, r3
 800adcc:	f000 f9e2 	bl	800b194 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	699a      	ldr	r2, [r3, #24]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f042 0208 	orr.w	r2, r2, #8
 800adde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	699a      	ldr	r2, [r3, #24]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f022 0204 	bic.w	r2, r2, #4
 800adee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6999      	ldr	r1, [r3, #24]
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	691a      	ldr	r2, [r3, #16]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	430a      	orrs	r2, r1
 800ae00:	619a      	str	r2, [r3, #24]
      break;
 800ae02:	e062      	b.n	800aeca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68b9      	ldr	r1, [r7, #8]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 fa32 	bl	800b274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	699a      	ldr	r2, [r3, #24]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	699a      	ldr	r2, [r3, #24]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	6999      	ldr	r1, [r3, #24]
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	021a      	lsls	r2, r3, #8
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	430a      	orrs	r2, r1
 800ae42:	619a      	str	r2, [r3, #24]
      break;
 800ae44:	e041      	b.n	800aeca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	68b9      	ldr	r1, [r7, #8]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f000 fa87 	bl	800b360 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	69da      	ldr	r2, [r3, #28]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f042 0208 	orr.w	r2, r2, #8
 800ae60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	69da      	ldr	r2, [r3, #28]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f022 0204 	bic.w	r2, r2, #4
 800ae70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	69d9      	ldr	r1, [r3, #28]
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	691a      	ldr	r2, [r3, #16]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	430a      	orrs	r2, r1
 800ae82:	61da      	str	r2, [r3, #28]
      break;
 800ae84:	e021      	b.n	800aeca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68b9      	ldr	r1, [r7, #8]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 fadb 	bl	800b448 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	69da      	ldr	r2, [r3, #28]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	69da      	ldr	r2, [r3, #28]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aeb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	69d9      	ldr	r1, [r3, #28]
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	021a      	lsls	r2, r3, #8
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	430a      	orrs	r2, r1
 800aec4:	61da      	str	r2, [r3, #28]
      break;
 800aec6:	e000      	b.n	800aeca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800aec8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d101      	bne.n	800aefc <HAL_TIM_ConfigClockSource+0x18>
 800aef8:	2302      	movs	r3, #2
 800aefa:	e0a6      	b.n	800b04a <HAL_TIM_ConfigClockSource+0x166>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2202      	movs	r2, #2
 800af08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800af1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2b40      	cmp	r3, #64	; 0x40
 800af32:	d067      	beq.n	800b004 <HAL_TIM_ConfigClockSource+0x120>
 800af34:	2b40      	cmp	r3, #64	; 0x40
 800af36:	d80b      	bhi.n	800af50 <HAL_TIM_ConfigClockSource+0x6c>
 800af38:	2b10      	cmp	r3, #16
 800af3a:	d073      	beq.n	800b024 <HAL_TIM_ConfigClockSource+0x140>
 800af3c:	2b10      	cmp	r3, #16
 800af3e:	d802      	bhi.n	800af46 <HAL_TIM_ConfigClockSource+0x62>
 800af40:	2b00      	cmp	r3, #0
 800af42:	d06f      	beq.n	800b024 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800af44:	e078      	b.n	800b038 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800af46:	2b20      	cmp	r3, #32
 800af48:	d06c      	beq.n	800b024 <HAL_TIM_ConfigClockSource+0x140>
 800af4a:	2b30      	cmp	r3, #48	; 0x30
 800af4c:	d06a      	beq.n	800b024 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800af4e:	e073      	b.n	800b038 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800af50:	2b70      	cmp	r3, #112	; 0x70
 800af52:	d00d      	beq.n	800af70 <HAL_TIM_ConfigClockSource+0x8c>
 800af54:	2b70      	cmp	r3, #112	; 0x70
 800af56:	d804      	bhi.n	800af62 <HAL_TIM_ConfigClockSource+0x7e>
 800af58:	2b50      	cmp	r3, #80	; 0x50
 800af5a:	d033      	beq.n	800afc4 <HAL_TIM_ConfigClockSource+0xe0>
 800af5c:	2b60      	cmp	r3, #96	; 0x60
 800af5e:	d041      	beq.n	800afe4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800af60:	e06a      	b.n	800b038 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800af62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af66:	d066      	beq.n	800b036 <HAL_TIM_ConfigClockSource+0x152>
 800af68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af6c:	d017      	beq.n	800af9e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800af6e:	e063      	b.n	800b038 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6818      	ldr	r0, [r3, #0]
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	6899      	ldr	r1, [r3, #8]
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	685a      	ldr	r2, [r3, #4]
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	f000 fb32 	bl	800b5e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800af92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	609a      	str	r2, [r3, #8]
      break;
 800af9c:	e04c      	b.n	800b038 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6818      	ldr	r0, [r3, #0]
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	6899      	ldr	r1, [r3, #8]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	685a      	ldr	r2, [r3, #4]
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	f000 fb1b 	bl	800b5e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	689a      	ldr	r2, [r3, #8]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800afc0:	609a      	str	r2, [r3, #8]
      break;
 800afc2:	e039      	b.n	800b038 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6818      	ldr	r0, [r3, #0]
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	6859      	ldr	r1, [r3, #4]
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	461a      	mov	r2, r3
 800afd2:	f000 fa8f 	bl	800b4f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2150      	movs	r1, #80	; 0x50
 800afdc:	4618      	mov	r0, r3
 800afde:	f000 fae8 	bl	800b5b2 <TIM_ITRx_SetConfig>
      break;
 800afe2:	e029      	b.n	800b038 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6818      	ldr	r0, [r3, #0]
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	6859      	ldr	r1, [r3, #4]
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	461a      	mov	r2, r3
 800aff2:	f000 faae 	bl	800b552 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2160      	movs	r1, #96	; 0x60
 800affc:	4618      	mov	r0, r3
 800affe:	f000 fad8 	bl	800b5b2 <TIM_ITRx_SetConfig>
      break;
 800b002:	e019      	b.n	800b038 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6818      	ldr	r0, [r3, #0]
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	6859      	ldr	r1, [r3, #4]
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	461a      	mov	r2, r3
 800b012:	f000 fa6f 	bl	800b4f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2140      	movs	r1, #64	; 0x40
 800b01c:	4618      	mov	r0, r3
 800b01e:	f000 fac8 	bl	800b5b2 <TIM_ITRx_SetConfig>
      break;
 800b022:	e009      	b.n	800b038 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4619      	mov	r1, r3
 800b02e:	4610      	mov	r0, r2
 800b030:	f000 fabf 	bl	800b5b2 <TIM_ITRx_SetConfig>
      break;
 800b034:	e000      	b.n	800b038 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b036:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
	...

0800b054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a40      	ldr	r2, [pc, #256]	; (800b168 <TIM_Base_SetConfig+0x114>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d013      	beq.n	800b094 <TIM_Base_SetConfig+0x40>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b072:	d00f      	beq.n	800b094 <TIM_Base_SetConfig+0x40>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	4a3d      	ldr	r2, [pc, #244]	; (800b16c <TIM_Base_SetConfig+0x118>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d00b      	beq.n	800b094 <TIM_Base_SetConfig+0x40>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4a3c      	ldr	r2, [pc, #240]	; (800b170 <TIM_Base_SetConfig+0x11c>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d007      	beq.n	800b094 <TIM_Base_SetConfig+0x40>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4a3b      	ldr	r2, [pc, #236]	; (800b174 <TIM_Base_SetConfig+0x120>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d003      	beq.n	800b094 <TIM_Base_SetConfig+0x40>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4a3a      	ldr	r2, [pc, #232]	; (800b178 <TIM_Base_SetConfig+0x124>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d108      	bne.n	800b0a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b09a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a2f      	ldr	r2, [pc, #188]	; (800b168 <TIM_Base_SetConfig+0x114>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d02b      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0b4:	d027      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a2c      	ldr	r2, [pc, #176]	; (800b16c <TIM_Base_SetConfig+0x118>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d023      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a2b      	ldr	r2, [pc, #172]	; (800b170 <TIM_Base_SetConfig+0x11c>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d01f      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a2a      	ldr	r2, [pc, #168]	; (800b174 <TIM_Base_SetConfig+0x120>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d01b      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a29      	ldr	r2, [pc, #164]	; (800b178 <TIM_Base_SetConfig+0x124>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d017      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a28      	ldr	r2, [pc, #160]	; (800b17c <TIM_Base_SetConfig+0x128>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d013      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4a27      	ldr	r2, [pc, #156]	; (800b180 <TIM_Base_SetConfig+0x12c>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d00f      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4a26      	ldr	r2, [pc, #152]	; (800b184 <TIM_Base_SetConfig+0x130>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d00b      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4a25      	ldr	r2, [pc, #148]	; (800b188 <TIM_Base_SetConfig+0x134>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d007      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4a24      	ldr	r2, [pc, #144]	; (800b18c <TIM_Base_SetConfig+0x138>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d003      	beq.n	800b106 <TIM_Base_SetConfig+0xb2>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4a23      	ldr	r2, [pc, #140]	; (800b190 <TIM_Base_SetConfig+0x13c>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d108      	bne.n	800b118 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b10c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	4313      	orrs	r3, r2
 800b116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	695b      	ldr	r3, [r3, #20]
 800b122:	4313      	orrs	r3, r2
 800b124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	689a      	ldr	r2, [r3, #8]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4a0a      	ldr	r2, [pc, #40]	; (800b168 <TIM_Base_SetConfig+0x114>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d003      	beq.n	800b14c <TIM_Base_SetConfig+0xf8>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4a0c      	ldr	r2, [pc, #48]	; (800b178 <TIM_Base_SetConfig+0x124>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d103      	bne.n	800b154 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	691a      	ldr	r2, [r3, #16]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	615a      	str	r2, [r3, #20]
}
 800b15a:	bf00      	nop
 800b15c:	3714      	adds	r7, #20
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	40010000 	.word	0x40010000
 800b16c:	40000400 	.word	0x40000400
 800b170:	40000800 	.word	0x40000800
 800b174:	40000c00 	.word	0x40000c00
 800b178:	40010400 	.word	0x40010400
 800b17c:	40014000 	.word	0x40014000
 800b180:	40014400 	.word	0x40014400
 800b184:	40014800 	.word	0x40014800
 800b188:	40001800 	.word	0x40001800
 800b18c:	40001c00 	.word	0x40001c00
 800b190:	40002000 	.word	0x40002000

0800b194 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b194:	b480      	push	{r7}
 800b196:	b087      	sub	sp, #28
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6a1b      	ldr	r3, [r3, #32]
 800b1a2:	f023 0201 	bic.w	r2, r3, #1
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a1b      	ldr	r3, [r3, #32]
 800b1ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	699b      	ldr	r3, [r3, #24]
 800b1ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f023 0303 	bic.w	r3, r3, #3
 800b1ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	f023 0302 	bic.w	r3, r3, #2
 800b1dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	697a      	ldr	r2, [r7, #20]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a20      	ldr	r2, [pc, #128]	; (800b26c <TIM_OC1_SetConfig+0xd8>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d003      	beq.n	800b1f8 <TIM_OC1_SetConfig+0x64>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4a1f      	ldr	r2, [pc, #124]	; (800b270 <TIM_OC1_SetConfig+0xdc>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d10c      	bne.n	800b212 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	f023 0308 	bic.w	r3, r3, #8
 800b1fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	697a      	ldr	r2, [r7, #20]
 800b206:	4313      	orrs	r3, r2
 800b208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	f023 0304 	bic.w	r3, r3, #4
 800b210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a15      	ldr	r2, [pc, #84]	; (800b26c <TIM_OC1_SetConfig+0xd8>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d003      	beq.n	800b222 <TIM_OC1_SetConfig+0x8e>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a14      	ldr	r2, [pc, #80]	; (800b270 <TIM_OC1_SetConfig+0xdc>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d111      	bne.n	800b246 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	695b      	ldr	r3, [r3, #20]
 800b236:	693a      	ldr	r2, [r7, #16]
 800b238:	4313      	orrs	r3, r2
 800b23a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	693a      	ldr	r2, [r7, #16]
 800b242:	4313      	orrs	r3, r2
 800b244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	693a      	ldr	r2, [r7, #16]
 800b24a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	685a      	ldr	r2, [r3, #4]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	697a      	ldr	r2, [r7, #20]
 800b25e:	621a      	str	r2, [r3, #32]
}
 800b260:	bf00      	nop
 800b262:	371c      	adds	r7, #28
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr
 800b26c:	40010000 	.word	0x40010000
 800b270:	40010400 	.word	0x40010400

0800b274 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b274:	b480      	push	{r7}
 800b276:	b087      	sub	sp, #28
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a1b      	ldr	r3, [r3, #32]
 800b282:	f023 0210 	bic.w	r2, r3, #16
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a1b      	ldr	r3, [r3, #32]
 800b28e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	699b      	ldr	r3, [r3, #24]
 800b29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	021b      	lsls	r3, r3, #8
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	f023 0320 	bic.w	r3, r3, #32
 800b2be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	011b      	lsls	r3, r3, #4
 800b2c6:	697a      	ldr	r2, [r7, #20]
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4a22      	ldr	r2, [pc, #136]	; (800b358 <TIM_OC2_SetConfig+0xe4>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d003      	beq.n	800b2dc <TIM_OC2_SetConfig+0x68>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a21      	ldr	r2, [pc, #132]	; (800b35c <TIM_OC2_SetConfig+0xe8>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d10d      	bne.n	800b2f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	011b      	lsls	r3, r3, #4
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a17      	ldr	r2, [pc, #92]	; (800b358 <TIM_OC2_SetConfig+0xe4>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d003      	beq.n	800b308 <TIM_OC2_SetConfig+0x94>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4a16      	ldr	r2, [pc, #88]	; (800b35c <TIM_OC2_SetConfig+0xe8>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d113      	bne.n	800b330 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b30e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	695b      	ldr	r3, [r3, #20]
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	693a      	ldr	r2, [r7, #16]
 800b320:	4313      	orrs	r3, r2
 800b322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	699b      	ldr	r3, [r3, #24]
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	693a      	ldr	r2, [r7, #16]
 800b32c:	4313      	orrs	r3, r2
 800b32e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	693a      	ldr	r2, [r7, #16]
 800b334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	685a      	ldr	r2, [r3, #4]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	697a      	ldr	r2, [r7, #20]
 800b348:	621a      	str	r2, [r3, #32]
}
 800b34a:	bf00      	nop
 800b34c:	371c      	adds	r7, #28
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	40010000 	.word	0x40010000
 800b35c:	40010400 	.word	0x40010400

0800b360 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b360:	b480      	push	{r7}
 800b362:	b087      	sub	sp, #28
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a1b      	ldr	r3, [r3, #32]
 800b36e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6a1b      	ldr	r3, [r3, #32]
 800b37a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	69db      	ldr	r3, [r3, #28]
 800b386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b38e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f023 0303 	bic.w	r3, r3, #3
 800b396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	021b      	lsls	r3, r3, #8
 800b3b0:	697a      	ldr	r2, [r7, #20]
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a21      	ldr	r2, [pc, #132]	; (800b440 <TIM_OC3_SetConfig+0xe0>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d003      	beq.n	800b3c6 <TIM_OC3_SetConfig+0x66>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a20      	ldr	r2, [pc, #128]	; (800b444 <TIM_OC3_SetConfig+0xe4>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d10d      	bne.n	800b3e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b3cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	021b      	lsls	r3, r3, #8
 800b3d4:	697a      	ldr	r2, [r7, #20]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b3e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a16      	ldr	r2, [pc, #88]	; (800b440 <TIM_OC3_SetConfig+0xe0>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d003      	beq.n	800b3f2 <TIM_OC3_SetConfig+0x92>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a15      	ldr	r2, [pc, #84]	; (800b444 <TIM_OC3_SetConfig+0xe4>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d113      	bne.n	800b41a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	695b      	ldr	r3, [r3, #20]
 800b406:	011b      	lsls	r3, r3, #4
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	011b      	lsls	r3, r3, #4
 800b414:	693a      	ldr	r2, [r7, #16]
 800b416:	4313      	orrs	r3, r2
 800b418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	693a      	ldr	r2, [r7, #16]
 800b41e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	685a      	ldr	r2, [r3, #4]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	697a      	ldr	r2, [r7, #20]
 800b432:	621a      	str	r2, [r3, #32]
}
 800b434:	bf00      	nop
 800b436:	371c      	adds	r7, #28
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	40010000 	.word	0x40010000
 800b444:	40010400 	.word	0x40010400

0800b448 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b448:	b480      	push	{r7}
 800b44a:	b087      	sub	sp, #28
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a1b      	ldr	r3, [r3, #32]
 800b456:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	69db      	ldr	r3, [r3, #28]
 800b46e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b47e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	021b      	lsls	r3, r3, #8
 800b486:	68fa      	ldr	r2, [r7, #12]
 800b488:	4313      	orrs	r3, r2
 800b48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b492:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	031b      	lsls	r3, r3, #12
 800b49a:	693a      	ldr	r2, [r7, #16]
 800b49c:	4313      	orrs	r3, r2
 800b49e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4a12      	ldr	r2, [pc, #72]	; (800b4ec <TIM_OC4_SetConfig+0xa4>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d003      	beq.n	800b4b0 <TIM_OC4_SetConfig+0x68>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a11      	ldr	r2, [pc, #68]	; (800b4f0 <TIM_OC4_SetConfig+0xa8>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d109      	bne.n	800b4c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b4b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	695b      	ldr	r3, [r3, #20]
 800b4bc:	019b      	lsls	r3, r3, #6
 800b4be:	697a      	ldr	r2, [r7, #20]
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	697a      	ldr	r2, [r7, #20]
 800b4c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	685a      	ldr	r2, [r3, #4]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	693a      	ldr	r2, [r7, #16]
 800b4dc:	621a      	str	r2, [r3, #32]
}
 800b4de:	bf00      	nop
 800b4e0:	371c      	adds	r7, #28
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	40010000 	.word	0x40010000
 800b4f0:	40010400 	.word	0x40010400

0800b4f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b087      	sub	sp, #28
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6a1b      	ldr	r3, [r3, #32]
 800b504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	6a1b      	ldr	r3, [r3, #32]
 800b50a:	f023 0201 	bic.w	r2, r3, #1
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	699b      	ldr	r3, [r3, #24]
 800b516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b51e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	011b      	lsls	r3, r3, #4
 800b524:	693a      	ldr	r2, [r7, #16]
 800b526:	4313      	orrs	r3, r2
 800b528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	f023 030a 	bic.w	r3, r3, #10
 800b530:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	4313      	orrs	r3, r2
 800b538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	693a      	ldr	r2, [r7, #16]
 800b53e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	697a      	ldr	r2, [r7, #20]
 800b544:	621a      	str	r2, [r3, #32]
}
 800b546:	bf00      	nop
 800b548:	371c      	adds	r7, #28
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr

0800b552 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b552:	b480      	push	{r7}
 800b554:	b087      	sub	sp, #28
 800b556:	af00      	add	r7, sp, #0
 800b558:	60f8      	str	r0, [r7, #12]
 800b55a:	60b9      	str	r1, [r7, #8]
 800b55c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6a1b      	ldr	r3, [r3, #32]
 800b562:	f023 0210 	bic.w	r2, r3, #16
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	699b      	ldr	r3, [r3, #24]
 800b56e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6a1b      	ldr	r3, [r3, #32]
 800b574:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b57c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	031b      	lsls	r3, r3, #12
 800b582:	697a      	ldr	r2, [r7, #20]
 800b584:	4313      	orrs	r3, r2
 800b586:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b58e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	011b      	lsls	r3, r3, #4
 800b594:	693a      	ldr	r2, [r7, #16]
 800b596:	4313      	orrs	r3, r2
 800b598:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	697a      	ldr	r2, [r7, #20]
 800b59e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	621a      	str	r2, [r3, #32]
}
 800b5a6:	bf00      	nop
 800b5a8:	371c      	adds	r7, #28
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr

0800b5b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b5b2:	b480      	push	{r7}
 800b5b4:	b085      	sub	sp, #20
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
 800b5ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	f043 0307 	orr.w	r3, r3, #7
 800b5d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	609a      	str	r2, [r3, #8]
}
 800b5dc:	bf00      	nop
 800b5de:	3714      	adds	r7, #20
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b087      	sub	sp, #28
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
 800b5f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	021a      	lsls	r2, r3, #8
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	431a      	orrs	r2, r3
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	4313      	orrs	r3, r2
 800b610:	697a      	ldr	r2, [r7, #20]
 800b612:	4313      	orrs	r3, r2
 800b614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	609a      	str	r2, [r3, #8]
}
 800b61c:	bf00      	nop
 800b61e:	371c      	adds	r7, #28
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b628:	b480      	push	{r7}
 800b62a:	b087      	sub	sp, #28
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	f003 031f 	and.w	r3, r3, #31
 800b63a:	2201      	movs	r2, #1
 800b63c:	fa02 f303 	lsl.w	r3, r2, r3
 800b640:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6a1a      	ldr	r2, [r3, #32]
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	43db      	mvns	r3, r3
 800b64a:	401a      	ands	r2, r3
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6a1a      	ldr	r2, [r3, #32]
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	f003 031f 	and.w	r3, r3, #31
 800b65a:	6879      	ldr	r1, [r7, #4]
 800b65c:	fa01 f303 	lsl.w	r3, r1, r3
 800b660:	431a      	orrs	r2, r3
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	621a      	str	r2, [r3, #32]
}
 800b666:	bf00      	nop
 800b668:	371c      	adds	r7, #28
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr

0800b672 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b672:	b480      	push	{r7}
 800b674:	b085      	sub	sp, #20
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b682:	2b01      	cmp	r3, #1
 800b684:	d101      	bne.n	800b68a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b686:	2302      	movs	r3, #2
 800b688:	e032      	b.n	800b6f0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2201      	movs	r2, #1
 800b68e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2202      	movs	r2, #2
 800b696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6c2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	68ba      	ldr	r2, [r7, #8]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68ba      	ldr	r2, [r7, #8]
 800b6dc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6ee:	2300      	movs	r3, #0
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d101      	bne.n	800b70e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e03f      	b.n	800b78e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b00      	cmp	r3, #0
 800b718:	d106      	bne.n	800b728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f009 fafc 	bl	8014d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2224      	movs	r2, #36	; 0x24
 800b72c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	68da      	ldr	r2, [r3, #12]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b73e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fbb1 	bl	800bea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	691a      	ldr	r2, [r3, #16]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	695a      	ldr	r2, [r3, #20]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68da      	ldr	r2, [r3, #12]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2220      	movs	r2, #32
 800b780:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2220      	movs	r2, #32
 800b788:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b088      	sub	sp, #32
 800b79a:	af02      	add	r7, sp, #8
 800b79c:	60f8      	str	r0, [r7, #12]
 800b79e:	60b9      	str	r1, [r7, #8]
 800b7a0:	603b      	str	r3, [r7, #0]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	2b20      	cmp	r3, #32
 800b7b4:	f040 8083 	bne.w	800b8be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d002      	beq.n	800b7c4 <HAL_UART_Transmit+0x2e>
 800b7be:	88fb      	ldrh	r3, [r7, #6]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d101      	bne.n	800b7c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	e07b      	b.n	800b8c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d101      	bne.n	800b7d6 <HAL_UART_Transmit+0x40>
 800b7d2:	2302      	movs	r3, #2
 800b7d4:	e074      	b.n	800b8c0 <HAL_UART_Transmit+0x12a>
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2221      	movs	r2, #33	; 0x21
 800b7e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b7ec:	f7f9 fc62 	bl	80050b4 <HAL_GetTick>
 800b7f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	88fa      	ldrh	r2, [r7, #6]
 800b7f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	88fa      	ldrh	r2, [r7, #6]
 800b7fc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b7fe:	e042      	b.n	800b886 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b804:	b29b      	uxth	r3, r3
 800b806:	3b01      	subs	r3, #1
 800b808:	b29a      	uxth	r2, r3
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b816:	d122      	bne.n	800b85e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	9300      	str	r3, [sp, #0]
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	2200      	movs	r2, #0
 800b820:	2180      	movs	r1, #128	; 0x80
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f000 f9d4 	bl	800bbd0 <UART_WaitOnFlagUntilTimeout>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d001      	beq.n	800b832 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800b82e:	2303      	movs	r3, #3
 800b830:	e046      	b.n	800b8c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	881b      	ldrh	r3, [r3, #0]
 800b83a:	461a      	mov	r2, r3
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b844:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	691b      	ldr	r3, [r3, #16]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d103      	bne.n	800b856 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	3302      	adds	r3, #2
 800b852:	60bb      	str	r3, [r7, #8]
 800b854:	e017      	b.n	800b886 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	3301      	adds	r3, #1
 800b85a:	60bb      	str	r3, [r7, #8]
 800b85c:	e013      	b.n	800b886 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	9300      	str	r3, [sp, #0]
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	2200      	movs	r2, #0
 800b866:	2180      	movs	r1, #128	; 0x80
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f000 f9b1 	bl	800bbd0 <UART_WaitOnFlagUntilTimeout>
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	d001      	beq.n	800b878 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800b874:	2303      	movs	r3, #3
 800b876:	e023      	b.n	800b8c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	60ba      	str	r2, [r7, #8]
 800b87e:	781a      	ldrb	r2, [r3, #0]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d1b7      	bne.n	800b800 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	9300      	str	r3, [sp, #0]
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	2200      	movs	r2, #0
 800b898:	2140      	movs	r1, #64	; 0x40
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f000 f998 	bl	800bbd0 <UART_WaitOnFlagUntilTimeout>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d001      	beq.n	800b8aa <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	e00a      	b.n	800b8c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2220      	movs	r2, #32
 800b8ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	e000      	b.n	800b8c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800b8be:	2302      	movs	r3, #2
  }
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3718      	adds	r7, #24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	4613      	mov	r3, r2
 800b8d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	2b20      	cmp	r3, #32
 800b8e0:	d140      	bne.n	800b964 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <HAL_UART_Receive_IT+0x26>
 800b8e8:	88fb      	ldrh	r3, [r7, #6]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d101      	bne.n	800b8f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e039      	b.n	800b966 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d101      	bne.n	800b900 <HAL_UART_Receive_IT+0x38>
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	e032      	b.n	800b966 <HAL_UART_Receive_IT+0x9e>
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	88fa      	ldrh	r2, [r7, #6]
 800b912:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	88fa      	ldrh	r2, [r7, #6]
 800b918:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2200      	movs	r2, #0
 800b91e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2222      	movs	r2, #34	; 0x22
 800b924:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68da      	ldr	r2, [r3, #12]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b93e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	695a      	ldr	r2, [r3, #20]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f042 0201 	orr.w	r2, r2, #1
 800b94e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	68da      	ldr	r2, [r3, #12]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f042 0220 	orr.w	r2, r2, #32
 800b95e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b960:	2300      	movs	r3, #0
 800b962:	e000      	b.n	800b966 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800b964:	2302      	movs	r3, #2
  }
}
 800b966:	4618      	mov	r0, r3
 800b968:	3714      	adds	r7, #20
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr
	...

0800b974 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b088      	sub	sp, #32
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	695b      	ldr	r3, [r3, #20]
 800b992:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800b994:	2300      	movs	r3, #0
 800b996:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800b998:	2300      	movs	r3, #0
 800b99a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	f003 030f 	and.w	r3, r3, #15
 800b9a2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10d      	bne.n	800b9c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	f003 0320 	and.w	r3, r3, #32
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d008      	beq.n	800b9c6 <HAL_UART_IRQHandler+0x52>
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	f003 0320 	and.w	r3, r3, #32
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d003      	beq.n	800b9c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 f9f0 	bl	800bda4 <UART_Receive_IT>
      return;
 800b9c4:	e0cc      	b.n	800bb60 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	f000 80ab 	beq.w	800bb24 <HAL_UART_IRQHandler+0x1b0>
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	f003 0301 	and.w	r3, r3, #1
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d105      	bne.n	800b9e4 <HAL_UART_IRQHandler+0x70>
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	f000 80a0 	beq.w	800bb24 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	f003 0301 	and.w	r3, r3, #1
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00a      	beq.n	800ba04 <HAL_UART_IRQHandler+0x90>
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d005      	beq.n	800ba04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9fc:	f043 0201 	orr.w	r2, r3, #1
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	f003 0304 	and.w	r3, r3, #4
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00a      	beq.n	800ba24 <HAL_UART_IRQHandler+0xb0>
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	f003 0301 	and.w	r3, r3, #1
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d005      	beq.n	800ba24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba1c:	f043 0202 	orr.w	r2, r3, #2
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	f003 0302 	and.w	r3, r3, #2
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00a      	beq.n	800ba44 <HAL_UART_IRQHandler+0xd0>
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	f003 0301 	and.w	r3, r3, #1
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d005      	beq.n	800ba44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba3c:	f043 0204 	orr.w	r2, r3, #4
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba44:	69fb      	ldr	r3, [r7, #28]
 800ba46:	f003 0308 	and.w	r3, r3, #8
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00a      	beq.n	800ba64 <HAL_UART_IRQHandler+0xf0>
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	f003 0301 	and.w	r3, r3, #1
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d005      	beq.n	800ba64 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba5c:	f043 0208 	orr.w	r2, r3, #8
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d078      	beq.n	800bb5e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	f003 0320 	and.w	r3, r3, #32
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d007      	beq.n	800ba86 <HAL_UART_IRQHandler+0x112>
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	f003 0320 	and.w	r3, r3, #32
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d002      	beq.n	800ba86 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 f98f 	bl	800bda4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	695b      	ldr	r3, [r3, #20]
 800ba8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba90:	2b40      	cmp	r3, #64	; 0x40
 800ba92:	bf0c      	ite	eq
 800ba94:	2301      	moveq	r3, #1
 800ba96:	2300      	movne	r3, #0
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baa0:	f003 0308 	and.w	r3, r3, #8
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d102      	bne.n	800baae <HAL_UART_IRQHandler+0x13a>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d031      	beq.n	800bb12 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 f8d8 	bl	800bc64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	695b      	ldr	r3, [r3, #20]
 800baba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800babe:	2b40      	cmp	r3, #64	; 0x40
 800bac0:	d123      	bne.n	800bb0a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	695a      	ldr	r2, [r3, #20]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bad0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d013      	beq.n	800bb02 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bade:	4a22      	ldr	r2, [pc, #136]	; (800bb68 <HAL_UART_IRQHandler+0x1f4>)
 800bae0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7f9 fd32 	bl	8005550 <HAL_DMA_Abort_IT>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d016      	beq.n	800bb20 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bafc:	4610      	mov	r0, r2
 800bafe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb00:	e00e      	b.n	800bb20 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f83c 	bl	800bb80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb08:	e00a      	b.n	800bb20 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f838 	bl	800bb80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb10:	e006      	b.n	800bb20 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 f834 	bl	800bb80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800bb1e:	e01e      	b.n	800bb5e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb20:	bf00      	nop
    return;
 800bb22:	e01c      	b.n	800bb5e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d008      	beq.n	800bb40 <HAL_UART_IRQHandler+0x1cc>
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d003      	beq.n	800bb40 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 f8c5 	bl	800bcc8 <UART_Transmit_IT>
    return;
 800bb3e:	e00f      	b.n	800bb60 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00a      	beq.n	800bb60 <HAL_UART_IRQHandler+0x1ec>
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d005      	beq.n	800bb60 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 f90d 	bl	800bd74 <UART_EndTransmit_IT>
    return;
 800bb5a:	bf00      	nop
 800bb5c:	e000      	b.n	800bb60 <HAL_UART_IRQHandler+0x1ec>
    return;
 800bb5e:	bf00      	nop
  }
}
 800bb60:	3720      	adds	r7, #32
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	0800bca1 	.word	0x0800bca1

0800bb6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bb74:	bf00      	nop
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bb88:	bf00      	nop
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	60fb      	str	r3, [r7, #12]
 800bba0:	2300      	movs	r3, #0
 800bba2:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	b2da      	uxtb	r2, r3
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	b2db      	uxtb	r3, r3
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3714      	adds	r7, #20
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	603b      	str	r3, [r7, #0]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbe0:	e02c      	b.n	800bc3c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe8:	d028      	beq.n	800bc3c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d007      	beq.n	800bc00 <UART_WaitOnFlagUntilTimeout+0x30>
 800bbf0:	f7f9 fa60 	bl	80050b4 <HAL_GetTick>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	1ad3      	subs	r3, r2, r3
 800bbfa:	69ba      	ldr	r2, [r7, #24]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d21d      	bcs.n	800bc3c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68da      	ldr	r2, [r3, #12]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bc0e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	695a      	ldr	r2, [r3, #20]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f022 0201 	bic.w	r2, r2, #1
 800bc1e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2220      	movs	r2, #32
 800bc24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2220      	movs	r2, #32
 800bc2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800bc38:	2303      	movs	r3, #3
 800bc3a:	e00f      	b.n	800bc5c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	4013      	ands	r3, r2
 800bc46:	68ba      	ldr	r2, [r7, #8]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	bf0c      	ite	eq
 800bc4c:	2301      	moveq	r3, #1
 800bc4e:	2300      	movne	r3, #0
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	461a      	mov	r2, r3
 800bc54:	79fb      	ldrb	r3, [r7, #7]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d0c3      	beq.n	800bbe2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3710      	adds	r7, #16
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	68da      	ldr	r2, [r3, #12]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bc7a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	695a      	ldr	r2, [r3, #20]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f022 0201 	bic.w	r2, r2, #1
 800bc8a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2220      	movs	r2, #32
 800bc90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800bc94:	bf00      	nop
 800bc96:	370c      	adds	r7, #12
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f7ff ff60 	bl	800bb80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcc0:	bf00      	nop
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	2b21      	cmp	r3, #33	; 0x21
 800bcda:	d144      	bne.n	800bd66 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bce4:	d11a      	bne.n	800bd1c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a1b      	ldr	r3, [r3, #32]
 800bcea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	881b      	ldrh	r3, [r3, #0]
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcfa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	691b      	ldr	r3, [r3, #16]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d105      	bne.n	800bd10 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6a1b      	ldr	r3, [r3, #32]
 800bd08:	1c9a      	adds	r2, r3, #2
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	621a      	str	r2, [r3, #32]
 800bd0e:	e00e      	b.n	800bd2e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a1b      	ldr	r3, [r3, #32]
 800bd14:	1c5a      	adds	r2, r3, #1
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	621a      	str	r2, [r3, #32]
 800bd1a:	e008      	b.n	800bd2e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6a1b      	ldr	r3, [r3, #32]
 800bd20:	1c59      	adds	r1, r3, #1
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	6211      	str	r1, [r2, #32]
 800bd26:	781a      	ldrb	r2, [r3, #0]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	3b01      	subs	r3, #1
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10f      	bne.n	800bd62 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68da      	ldr	r2, [r3, #12]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	68da      	ldr	r2, [r3, #12]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bd62:	2300      	movs	r3, #0
 800bd64:	e000      	b.n	800bd68 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bd66:	2302      	movs	r3, #2
  }
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3714      	adds	r7, #20
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68da      	ldr	r2, [r3, #12]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2220      	movs	r2, #32
 800bd90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7ff fee9 	bl	800bb6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	2b22      	cmp	r3, #34	; 0x22
 800bdb6:	d171      	bne.n	800be9c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdc0:	d123      	bne.n	800be0a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdc6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	691b      	ldr	r3, [r3, #16]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d10e      	bne.n	800bdee <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde6:	1c9a      	adds	r2, r3, #2
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	629a      	str	r2, [r3, #40]	; 0x28
 800bdec:	e029      	b.n	800be42 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be02:	1c5a      	adds	r2, r3, #1
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	629a      	str	r2, [r3, #40]	; 0x28
 800be08:	e01b      	b.n	800be42 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d10a      	bne.n	800be28 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	6858      	ldr	r0, [r3, #4]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be1c:	1c59      	adds	r1, r3, #1
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	6291      	str	r1, [r2, #40]	; 0x28
 800be22:	b2c2      	uxtb	r2, r0
 800be24:	701a      	strb	r2, [r3, #0]
 800be26:	e00c      	b.n	800be42 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	b2da      	uxtb	r2, r3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be34:	1c58      	adds	r0, r3, #1
 800be36:	6879      	ldr	r1, [r7, #4]
 800be38:	6288      	str	r0, [r1, #40]	; 0x28
 800be3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800be3e:	b2d2      	uxtb	r2, r2
 800be40:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be46:	b29b      	uxth	r3, r3
 800be48:	3b01      	subs	r3, #1
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	4619      	mov	r1, r3
 800be50:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800be52:	2b00      	cmp	r3, #0
 800be54:	d120      	bne.n	800be98 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68da      	ldr	r2, [r3, #12]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f022 0220 	bic.w	r2, r2, #32
 800be64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	68da      	ldr	r2, [r3, #12]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800be74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	695a      	ldr	r2, [r3, #20]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f022 0201 	bic.w	r2, r2, #1
 800be84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2220      	movs	r2, #32
 800be8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f007 fe38 	bl	8013b04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800be94:	2300      	movs	r3, #0
 800be96:	e002      	b.n	800be9e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800be98:	2300      	movs	r3, #0
 800be9a:	e000      	b.n	800be9e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800be9c:	2302      	movs	r3, #2
  }
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
	...

0800bea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bea8:	b5b0      	push	{r4, r5, r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	691b      	ldr	r3, [r3, #16]
 800beb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	68da      	ldr	r2, [r3, #12]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	430a      	orrs	r2, r1
 800bec4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	689a      	ldr	r2, [r3, #8]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	431a      	orrs	r2, r3
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	695b      	ldr	r3, [r3, #20]
 800bed4:	431a      	orrs	r2, r3
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	69db      	ldr	r3, [r3, #28]
 800beda:	4313      	orrs	r3, r2
 800bedc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800bee8:	f023 030c 	bic.w	r3, r3, #12
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	6812      	ldr	r2, [r2, #0]
 800bef0:	68f9      	ldr	r1, [r7, #12]
 800bef2:	430b      	orrs	r3, r1
 800bef4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	699a      	ldr	r2, [r3, #24]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	430a      	orrs	r2, r1
 800bf0a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	69db      	ldr	r3, [r3, #28]
 800bf10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf14:	f040 80e4 	bne.w	800c0e0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4aab      	ldr	r2, [pc, #684]	; (800c1cc <UART_SetConfig+0x324>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d004      	beq.n	800bf2c <UART_SetConfig+0x84>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4aaa      	ldr	r2, [pc, #680]	; (800c1d0 <UART_SetConfig+0x328>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d16c      	bne.n	800c006 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800bf2c:	f7fc fc80 	bl	8008830 <HAL_RCC_GetPCLK2Freq>
 800bf30:	4602      	mov	r2, r0
 800bf32:	4613      	mov	r3, r2
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	4413      	add	r3, r2
 800bf38:	009a      	lsls	r2, r3, #2
 800bf3a:	441a      	add	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	005b      	lsls	r3, r3, #1
 800bf42:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf46:	4aa3      	ldr	r2, [pc, #652]	; (800c1d4 <UART_SetConfig+0x32c>)
 800bf48:	fba2 2303 	umull	r2, r3, r2, r3
 800bf4c:	095b      	lsrs	r3, r3, #5
 800bf4e:	011c      	lsls	r4, r3, #4
 800bf50:	f7fc fc6e 	bl	8008830 <HAL_RCC_GetPCLK2Freq>
 800bf54:	4602      	mov	r2, r0
 800bf56:	4613      	mov	r3, r2
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	4413      	add	r3, r2
 800bf5c:	009a      	lsls	r2, r3, #2
 800bf5e:	441a      	add	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	005b      	lsls	r3, r3, #1
 800bf66:	fbb2 f5f3 	udiv	r5, r2, r3
 800bf6a:	f7fc fc61 	bl	8008830 <HAL_RCC_GetPCLK2Freq>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	4613      	mov	r3, r2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	4413      	add	r3, r2
 800bf76:	009a      	lsls	r2, r3, #2
 800bf78:	441a      	add	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	005b      	lsls	r3, r3, #1
 800bf80:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf84:	4a93      	ldr	r2, [pc, #588]	; (800c1d4 <UART_SetConfig+0x32c>)
 800bf86:	fba2 2303 	umull	r2, r3, r2, r3
 800bf8a:	095b      	lsrs	r3, r3, #5
 800bf8c:	2264      	movs	r2, #100	; 0x64
 800bf8e:	fb02 f303 	mul.w	r3, r2, r3
 800bf92:	1aeb      	subs	r3, r5, r3
 800bf94:	00db      	lsls	r3, r3, #3
 800bf96:	3332      	adds	r3, #50	; 0x32
 800bf98:	4a8e      	ldr	r2, [pc, #568]	; (800c1d4 <UART_SetConfig+0x32c>)
 800bf9a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf9e:	095b      	lsrs	r3, r3, #5
 800bfa0:	005b      	lsls	r3, r3, #1
 800bfa2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bfa6:	441c      	add	r4, r3
 800bfa8:	f7fc fc42 	bl	8008830 <HAL_RCC_GetPCLK2Freq>
 800bfac:	4602      	mov	r2, r0
 800bfae:	4613      	mov	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	4413      	add	r3, r2
 800bfb4:	009a      	lsls	r2, r3, #2
 800bfb6:	441a      	add	r2, r3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	005b      	lsls	r3, r3, #1
 800bfbe:	fbb2 f5f3 	udiv	r5, r2, r3
 800bfc2:	f7fc fc35 	bl	8008830 <HAL_RCC_GetPCLK2Freq>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	4613      	mov	r3, r2
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	4413      	add	r3, r2
 800bfce:	009a      	lsls	r2, r3, #2
 800bfd0:	441a      	add	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	005b      	lsls	r3, r3, #1
 800bfd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfdc:	4a7d      	ldr	r2, [pc, #500]	; (800c1d4 <UART_SetConfig+0x32c>)
 800bfde:	fba2 2303 	umull	r2, r3, r2, r3
 800bfe2:	095b      	lsrs	r3, r3, #5
 800bfe4:	2264      	movs	r2, #100	; 0x64
 800bfe6:	fb02 f303 	mul.w	r3, r2, r3
 800bfea:	1aeb      	subs	r3, r5, r3
 800bfec:	00db      	lsls	r3, r3, #3
 800bfee:	3332      	adds	r3, #50	; 0x32
 800bff0:	4a78      	ldr	r2, [pc, #480]	; (800c1d4 <UART_SetConfig+0x32c>)
 800bff2:	fba2 2303 	umull	r2, r3, r2, r3
 800bff6:	095b      	lsrs	r3, r3, #5
 800bff8:	f003 0207 	and.w	r2, r3, #7
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4422      	add	r2, r4
 800c002:	609a      	str	r2, [r3, #8]
 800c004:	e154      	b.n	800c2b0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800c006:	f7fc fbff 	bl	8008808 <HAL_RCC_GetPCLK1Freq>
 800c00a:	4602      	mov	r2, r0
 800c00c:	4613      	mov	r3, r2
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	4413      	add	r3, r2
 800c012:	009a      	lsls	r2, r3, #2
 800c014:	441a      	add	r2, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	005b      	lsls	r3, r3, #1
 800c01c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c020:	4a6c      	ldr	r2, [pc, #432]	; (800c1d4 <UART_SetConfig+0x32c>)
 800c022:	fba2 2303 	umull	r2, r3, r2, r3
 800c026:	095b      	lsrs	r3, r3, #5
 800c028:	011c      	lsls	r4, r3, #4
 800c02a:	f7fc fbed 	bl	8008808 <HAL_RCC_GetPCLK1Freq>
 800c02e:	4602      	mov	r2, r0
 800c030:	4613      	mov	r3, r2
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	4413      	add	r3, r2
 800c036:	009a      	lsls	r2, r3, #2
 800c038:	441a      	add	r2, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	005b      	lsls	r3, r3, #1
 800c040:	fbb2 f5f3 	udiv	r5, r2, r3
 800c044:	f7fc fbe0 	bl	8008808 <HAL_RCC_GetPCLK1Freq>
 800c048:	4602      	mov	r2, r0
 800c04a:	4613      	mov	r3, r2
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	4413      	add	r3, r2
 800c050:	009a      	lsls	r2, r3, #2
 800c052:	441a      	add	r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	005b      	lsls	r3, r3, #1
 800c05a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c05e:	4a5d      	ldr	r2, [pc, #372]	; (800c1d4 <UART_SetConfig+0x32c>)
 800c060:	fba2 2303 	umull	r2, r3, r2, r3
 800c064:	095b      	lsrs	r3, r3, #5
 800c066:	2264      	movs	r2, #100	; 0x64
 800c068:	fb02 f303 	mul.w	r3, r2, r3
 800c06c:	1aeb      	subs	r3, r5, r3
 800c06e:	00db      	lsls	r3, r3, #3
 800c070:	3332      	adds	r3, #50	; 0x32
 800c072:	4a58      	ldr	r2, [pc, #352]	; (800c1d4 <UART_SetConfig+0x32c>)
 800c074:	fba2 2303 	umull	r2, r3, r2, r3
 800c078:	095b      	lsrs	r3, r3, #5
 800c07a:	005b      	lsls	r3, r3, #1
 800c07c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c080:	441c      	add	r4, r3
 800c082:	f7fc fbc1 	bl	8008808 <HAL_RCC_GetPCLK1Freq>
 800c086:	4602      	mov	r2, r0
 800c088:	4613      	mov	r3, r2
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	4413      	add	r3, r2
 800c08e:	009a      	lsls	r2, r3, #2
 800c090:	441a      	add	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	005b      	lsls	r3, r3, #1
 800c098:	fbb2 f5f3 	udiv	r5, r2, r3
 800c09c:	f7fc fbb4 	bl	8008808 <HAL_RCC_GetPCLK1Freq>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	4413      	add	r3, r2
 800c0a8:	009a      	lsls	r2, r3, #2
 800c0aa:	441a      	add	r2, r3
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	005b      	lsls	r3, r3, #1
 800c0b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0b6:	4a47      	ldr	r2, [pc, #284]	; (800c1d4 <UART_SetConfig+0x32c>)
 800c0b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c0bc:	095b      	lsrs	r3, r3, #5
 800c0be:	2264      	movs	r2, #100	; 0x64
 800c0c0:	fb02 f303 	mul.w	r3, r2, r3
 800c0c4:	1aeb      	subs	r3, r5, r3
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	3332      	adds	r3, #50	; 0x32
 800c0ca:	4a42      	ldr	r2, [pc, #264]	; (800c1d4 <UART_SetConfig+0x32c>)
 800c0cc:	fba2 2303 	umull	r2, r3, r2, r3
 800c0d0:	095b      	lsrs	r3, r3, #5
 800c0d2:	f003 0207 	and.w	r2, r3, #7
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4422      	add	r2, r4
 800c0dc:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800c0de:	e0e7      	b.n	800c2b0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a39      	ldr	r2, [pc, #228]	; (800c1cc <UART_SetConfig+0x324>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d004      	beq.n	800c0f4 <UART_SetConfig+0x24c>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a38      	ldr	r2, [pc, #224]	; (800c1d0 <UART_SetConfig+0x328>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d171      	bne.n	800c1d8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800c0f4:	f7fc fb9c 	bl	8008830 <HAL_RCC_GetPCLK2Freq>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	4413      	add	r3, r2
 800c100:	009a      	lsls	r2, r3, #2
 800c102:	441a      	add	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c10e:	4a31      	ldr	r2, [pc, #196]	; (800c1d4 <UART_SetConfig+0x32c>)
 800c110:	fba2 2303 	umull	r2, r3, r2, r3
 800c114:	095b      	lsrs	r3, r3, #5
 800c116:	011c      	lsls	r4, r3, #4
 800c118:	f7fc fb8a 	bl	8008830 <HAL_RCC_GetPCLK2Freq>
 800c11c:	4602      	mov	r2, r0
 800c11e:	4613      	mov	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4413      	add	r3, r2
 800c124:	009a      	lsls	r2, r3, #2
 800c126:	441a      	add	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	fbb2 f5f3 	udiv	r5, r2, r3
 800c132:	f7fc fb7d 	bl	8008830 <HAL_RCC_GetPCLK2Freq>
 800c136:	4602      	mov	r2, r0
 800c138:	4613      	mov	r3, r2
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	4413      	add	r3, r2
 800c13e:	009a      	lsls	r2, r3, #2
 800c140:	441a      	add	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	fbb2 f3f3 	udiv	r3, r2, r3
 800c14c:	4a21      	ldr	r2, [pc, #132]	; (800c1d4 <UART_SetConfig+0x32c>)
 800c14e:	fba2 2303 	umull	r2, r3, r2, r3
 800c152:	095b      	lsrs	r3, r3, #5
 800c154:	2264      	movs	r2, #100	; 0x64
 800c156:	fb02 f303 	mul.w	r3, r2, r3
 800c15a:	1aeb      	subs	r3, r5, r3
 800c15c:	011b      	lsls	r3, r3, #4
 800c15e:	3332      	adds	r3, #50	; 0x32
 800c160:	4a1c      	ldr	r2, [pc, #112]	; (800c1d4 <UART_SetConfig+0x32c>)
 800c162:	fba2 2303 	umull	r2, r3, r2, r3
 800c166:	095b      	lsrs	r3, r3, #5
 800c168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c16c:	441c      	add	r4, r3
 800c16e:	f7fc fb5f 	bl	8008830 <HAL_RCC_GetPCLK2Freq>
 800c172:	4602      	mov	r2, r0
 800c174:	4613      	mov	r3, r2
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	4413      	add	r3, r2
 800c17a:	009a      	lsls	r2, r3, #2
 800c17c:	441a      	add	r2, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	fbb2 f5f3 	udiv	r5, r2, r3
 800c188:	f7fc fb52 	bl	8008830 <HAL_RCC_GetPCLK2Freq>
 800c18c:	4602      	mov	r2, r0
 800c18e:	4613      	mov	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4413      	add	r3, r2
 800c194:	009a      	lsls	r2, r3, #2
 800c196:	441a      	add	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1a2:	4a0c      	ldr	r2, [pc, #48]	; (800c1d4 <UART_SetConfig+0x32c>)
 800c1a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c1a8:	095b      	lsrs	r3, r3, #5
 800c1aa:	2264      	movs	r2, #100	; 0x64
 800c1ac:	fb02 f303 	mul.w	r3, r2, r3
 800c1b0:	1aeb      	subs	r3, r5, r3
 800c1b2:	011b      	lsls	r3, r3, #4
 800c1b4:	3332      	adds	r3, #50	; 0x32
 800c1b6:	4a07      	ldr	r2, [pc, #28]	; (800c1d4 <UART_SetConfig+0x32c>)
 800c1b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c1bc:	095b      	lsrs	r3, r3, #5
 800c1be:	f003 020f 	and.w	r2, r3, #15
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4422      	add	r2, r4
 800c1c8:	609a      	str	r2, [r3, #8]
 800c1ca:	e071      	b.n	800c2b0 <UART_SetConfig+0x408>
 800c1cc:	40011000 	.word	0x40011000
 800c1d0:	40011400 	.word	0x40011400
 800c1d4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800c1d8:	f7fc fb16 	bl	8008808 <HAL_RCC_GetPCLK1Freq>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	4613      	mov	r3, r2
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	4413      	add	r3, r2
 800c1e4:	009a      	lsls	r2, r3, #2
 800c1e6:	441a      	add	r2, r3
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1f2:	4a31      	ldr	r2, [pc, #196]	; (800c2b8 <UART_SetConfig+0x410>)
 800c1f4:	fba2 2303 	umull	r2, r3, r2, r3
 800c1f8:	095b      	lsrs	r3, r3, #5
 800c1fa:	011c      	lsls	r4, r3, #4
 800c1fc:	f7fc fb04 	bl	8008808 <HAL_RCC_GetPCLK1Freq>
 800c200:	4602      	mov	r2, r0
 800c202:	4613      	mov	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4413      	add	r3, r2
 800c208:	009a      	lsls	r2, r3, #2
 800c20a:	441a      	add	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	fbb2 f5f3 	udiv	r5, r2, r3
 800c216:	f7fc faf7 	bl	8008808 <HAL_RCC_GetPCLK1Freq>
 800c21a:	4602      	mov	r2, r0
 800c21c:	4613      	mov	r3, r2
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	4413      	add	r3, r2
 800c222:	009a      	lsls	r2, r3, #2
 800c224:	441a      	add	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c230:	4a21      	ldr	r2, [pc, #132]	; (800c2b8 <UART_SetConfig+0x410>)
 800c232:	fba2 2303 	umull	r2, r3, r2, r3
 800c236:	095b      	lsrs	r3, r3, #5
 800c238:	2264      	movs	r2, #100	; 0x64
 800c23a:	fb02 f303 	mul.w	r3, r2, r3
 800c23e:	1aeb      	subs	r3, r5, r3
 800c240:	011b      	lsls	r3, r3, #4
 800c242:	3332      	adds	r3, #50	; 0x32
 800c244:	4a1c      	ldr	r2, [pc, #112]	; (800c2b8 <UART_SetConfig+0x410>)
 800c246:	fba2 2303 	umull	r2, r3, r2, r3
 800c24a:	095b      	lsrs	r3, r3, #5
 800c24c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c250:	441c      	add	r4, r3
 800c252:	f7fc fad9 	bl	8008808 <HAL_RCC_GetPCLK1Freq>
 800c256:	4602      	mov	r2, r0
 800c258:	4613      	mov	r3, r2
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	4413      	add	r3, r2
 800c25e:	009a      	lsls	r2, r3, #2
 800c260:	441a      	add	r2, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	fbb2 f5f3 	udiv	r5, r2, r3
 800c26c:	f7fc facc 	bl	8008808 <HAL_RCC_GetPCLK1Freq>
 800c270:	4602      	mov	r2, r0
 800c272:	4613      	mov	r3, r2
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	4413      	add	r3, r2
 800c278:	009a      	lsls	r2, r3, #2
 800c27a:	441a      	add	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	fbb2 f3f3 	udiv	r3, r2, r3
 800c286:	4a0c      	ldr	r2, [pc, #48]	; (800c2b8 <UART_SetConfig+0x410>)
 800c288:	fba2 2303 	umull	r2, r3, r2, r3
 800c28c:	095b      	lsrs	r3, r3, #5
 800c28e:	2264      	movs	r2, #100	; 0x64
 800c290:	fb02 f303 	mul.w	r3, r2, r3
 800c294:	1aeb      	subs	r3, r5, r3
 800c296:	011b      	lsls	r3, r3, #4
 800c298:	3332      	adds	r3, #50	; 0x32
 800c29a:	4a07      	ldr	r2, [pc, #28]	; (800c2b8 <UART_SetConfig+0x410>)
 800c29c:	fba2 2303 	umull	r2, r3, r2, r3
 800c2a0:	095b      	lsrs	r3, r3, #5
 800c2a2:	f003 020f 	and.w	r2, r3, #15
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4422      	add	r2, r4
 800c2ac:	609a      	str	r2, [r3, #8]
}
 800c2ae:	e7ff      	b.n	800c2b0 <UART_SetConfig+0x408>
 800c2b0:	bf00      	nop
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bdb0      	pop	{r4, r5, r7, pc}
 800c2b8:	51eb851f 	.word	0x51eb851f

0800c2bc <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c2bc:	b084      	sub	sp, #16
 800c2be:	b480      	push	{r7}
 800c2c0:	b085      	sub	sp, #20
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
 800c2c6:	f107 001c 	add.w	r0, r7, #28
 800c2ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c2d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c2d4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c2d6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c2da:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c2de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c2e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c2e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c2e8:	68fa      	ldr	r2, [r7, #12]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c2f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	431a      	orrs	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c302:	2300      	movs	r3, #0
}
 800c304:	4618      	mov	r0, r3
 800c306:	3714      	adds	r7, #20
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	b004      	add	sp, #16
 800c310:	4770      	bx	lr

0800c312 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c312:	b480      	push	{r7}
 800c314:	b083      	sub	sp, #12
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c320:	4618      	mov	r0, r3
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	370c      	adds	r7, #12
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr

0800c34e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c34e:	b480      	push	{r7}
 800c350:	b083      	sub	sp, #12
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2203      	movs	r2, #3
 800c35a:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	370c      	adds	r7, #12
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr

0800c36a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c36a:	b480      	push	{r7}
 800c36c:	b083      	sub	sp, #12
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f003 0303 	and.w	r3, r3, #3
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	370c      	adds	r7, #12
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr

0800c386 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c386:	b480      	push	{r7}
 800c388:	b085      	sub	sp, #20
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
 800c38e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800c390:	2300      	movs	r3, #0
 800c392:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c3a4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c3aa:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c3b0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c3c0:	f023 030f 	bic.w	r3, r3, #15
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	431a      	orrs	r2, r3
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3714      	adds	r7, #20
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr

0800c3da <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c3da:	b480      	push	{r7}
 800c3dc:	b083      	sub	sp, #12
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	691b      	ldr	r3, [r3, #16]
 800c3e6:	b2db      	uxtb	r3, r3
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800c3fe:	2300      	movs	r3, #0
 800c400:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	3314      	adds	r3, #20
 800c406:	461a      	mov	r2, r3
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	4413      	add	r3, r2
 800c40c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
}  
 800c412:	4618      	mov	r0, r3
 800c414:	3714      	adds	r7, #20
 800c416:	46bd      	mov	sp, r7
 800c418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41c:	4770      	bx	lr

0800c41e <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c41e:	b480      	push	{r7}
 800c420:	b085      	sub	sp, #20
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
 800c426:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800c428:	2300      	movs	r3, #0
 800c42a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	685a      	ldr	r2, [r3, #4]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c444:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c44a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c450:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c452:	68fa      	ldr	r2, [r7, #12]
 800c454:	4313      	orrs	r3, r2
 800c456:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	431a      	orrs	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c468:	2300      	movs	r3, #0

}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3714      	adds	r7, #20
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr

0800c476 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c476:	b580      	push	{r7, lr}
 800c478:	b088      	sub	sp, #32
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
 800c47e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c480:	2300      	movs	r3, #0
 800c482:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c488:	2310      	movs	r3, #16
 800c48a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c48c:	2340      	movs	r3, #64	; 0x40
 800c48e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c490:	2300      	movs	r3, #0
 800c492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c498:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c49a:	f107 0308 	add.w	r3, r7, #8
 800c49e:	4619      	mov	r1, r3
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f7ff ff70 	bl	800c386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c4a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4aa:	2110      	movs	r1, #16
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 fa63 	bl	800c978 <SDMMC_GetCmdResp1>
 800c4b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4b4:	69fb      	ldr	r3, [r7, #28]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3720      	adds	r7, #32
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b088      	sub	sp, #32
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
 800c4c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c4d0:	2311      	movs	r3, #17
 800c4d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c4d4:	2340      	movs	r3, #64	; 0x40
 800c4d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c4dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4e0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c4e2:	f107 0308 	add.w	r3, r7, #8
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f7ff ff4c 	bl	800c386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c4ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4f2:	2111      	movs	r1, #17
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fa3f 	bl	800c978 <SDMMC_GetCmdResp1>
 800c4fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4fc:	69fb      	ldr	r3, [r7, #28]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3720      	adds	r7, #32
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c506:	b580      	push	{r7, lr}
 800c508:	b088      	sub	sp, #32
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
 800c50e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c510:	2300      	movs	r3, #0
 800c512:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c518:	2312      	movs	r3, #18
 800c51a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c51c:	2340      	movs	r3, #64	; 0x40
 800c51e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c520:	2300      	movs	r3, #0
 800c522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c528:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c52a:	f107 0308 	add.w	r3, r7, #8
 800c52e:	4619      	mov	r1, r3
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f7ff ff28 	bl	800c386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c536:	f241 3288 	movw	r2, #5000	; 0x1388
 800c53a:	2112      	movs	r1, #18
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 fa1b 	bl	800c978 <SDMMC_GetCmdResp1>
 800c542:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c544:	69fb      	ldr	r3, [r7, #28]
}
 800c546:	4618      	mov	r0, r3
 800c548:	3720      	adds	r7, #32
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}

0800c54e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b088      	sub	sp, #32
 800c552:	af00      	add	r7, sp, #0
 800c554:	6078      	str	r0, [r7, #4]
 800c556:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c558:	2300      	movs	r3, #0
 800c55a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c560:	2318      	movs	r3, #24
 800c562:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c564:	2340      	movs	r3, #64	; 0x40
 800c566:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c568:	2300      	movs	r3, #0
 800c56a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c56c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c570:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c572:	f107 0308 	add.w	r3, r7, #8
 800c576:	4619      	mov	r1, r3
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7ff ff04 	bl	800c386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c57e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c582:	2118      	movs	r1, #24
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 f9f7 	bl	800c978 <SDMMC_GetCmdResp1>
 800c58a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c58c:	69fb      	ldr	r3, [r7, #28]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3720      	adds	r7, #32
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b088      	sub	sp, #32
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
 800c59e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c5a8:	2319      	movs	r3, #25
 800c5aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c5ac:	2340      	movs	r3, #64	; 0x40
 800c5ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c5b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5b8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5ba:	f107 0308 	add.w	r3, r7, #8
 800c5be:	4619      	mov	r1, r3
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f7ff fee0 	bl	800c386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c5c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5ca:	2119      	movs	r1, #25
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 f9d3 	bl	800c978 <SDMMC_GetCmdResp1>
 800c5d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5d4:	69fb      	ldr	r3, [r7, #28]
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3720      	adds	r7, #32
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
	...

0800c5e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b088      	sub	sp, #32
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c5f0:	230c      	movs	r3, #12
 800c5f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c5f4:	2340      	movs	r3, #64	; 0x40
 800c5f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c5fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c600:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c602:	f107 0308 	add.w	r3, r7, #8
 800c606:	4619      	mov	r1, r3
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f7ff febc 	bl	800c386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800c60e:	4a05      	ldr	r2, [pc, #20]	; (800c624 <SDMMC_CmdStopTransfer+0x44>)
 800c610:	210c      	movs	r1, #12
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 f9b0 	bl	800c978 <SDMMC_GetCmdResp1>
 800c618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c61a:	69fb      	ldr	r3, [r7, #28]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3720      	adds	r7, #32
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	05f5e100 	.word	0x05f5e100

0800c628 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b08a      	sub	sp, #40	; 0x28
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c634:	2300      	movs	r3, #0
 800c636:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c63c:	2307      	movs	r3, #7
 800c63e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c640:	2340      	movs	r3, #64	; 0x40
 800c642:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c644:	2300      	movs	r3, #0
 800c646:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c64c:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c64e:	f107 0310 	add.w	r3, r7, #16
 800c652:	4619      	mov	r1, r3
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	f7ff fe96 	bl	800c386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c65a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c65e:	2107      	movs	r1, #7
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	f000 f989 	bl	800c978 <SDMMC_GetCmdResp1>
 800c666:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3728      	adds	r7, #40	; 0x28
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}

0800c672 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c672:	b580      	push	{r7, lr}
 800c674:	b088      	sub	sp, #32
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c67a:	2300      	movs	r3, #0
 800c67c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800c67e:	2300      	movs	r3, #0
 800c680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c682:	2300      	movs	r3, #0
 800c684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c686:	2300      	movs	r3, #0
 800c688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c68a:	2300      	movs	r3, #0
 800c68c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c68e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c692:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c694:	f107 0308 	add.w	r3, r7, #8
 800c698:	4619      	mov	r1, r3
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7ff fe73 	bl	800c386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 f93f 	bl	800c924 <SDMMC_GetCmdError>
 800c6a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6a8:	69fb      	ldr	r3, [r7, #28]
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3720      	adds	r7, #32
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c6b2:	b580      	push	{r7, lr}
 800c6b4:	b088      	sub	sp, #32
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c6be:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c6c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c6c4:	2308      	movs	r3, #8
 800c6c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c6c8:	2340      	movs	r3, #64	; 0x40
 800c6ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c6d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6d4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c6d6:	f107 0308 	add.w	r3, r7, #8
 800c6da:	4619      	mov	r1, r3
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f7ff fe52 	bl	800c386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 fb10 	bl	800cd08 <SDMMC_GetCmdResp7>
 800c6e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6ea:	69fb      	ldr	r3, [r7, #28]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3720      	adds	r7, #32
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b088      	sub	sp, #32
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c6fe:	2300      	movs	r3, #0
 800c700:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c706:	2337      	movs	r3, #55	; 0x37
 800c708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c70a:	2340      	movs	r3, #64	; 0x40
 800c70c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c70e:	2300      	movs	r3, #0
 800c710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c716:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c718:	f107 0308 	add.w	r3, r7, #8
 800c71c:	4619      	mov	r1, r3
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f7ff fe31 	bl	800c386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c724:	f241 3288 	movw	r2, #5000	; 0x1388
 800c728:	2137      	movs	r1, #55	; 0x37
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 f924 	bl	800c978 <SDMMC_GetCmdResp1>
 800c730:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c732:	69fb      	ldr	r3, [r7, #28]
}
 800c734:	4618      	mov	r0, r3
 800c736:	3720      	adds	r7, #32
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b088      	sub	sp, #32
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c746:	2300      	movs	r3, #0
 800c748:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c754:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c756:	2329      	movs	r3, #41	; 0x29
 800c758:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c75a:	2340      	movs	r3, #64	; 0x40
 800c75c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c75e:	2300      	movs	r3, #0
 800c760:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c766:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c768:	f107 0308 	add.w	r3, r7, #8
 800c76c:	4619      	mov	r1, r3
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7ff fe09 	bl	800c386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 fa25 	bl	800cbc4 <SDMMC_GetCmdResp3>
 800c77a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c77c:	69fb      	ldr	r3, [r7, #28]
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3720      	adds	r7, #32
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b088      	sub	sp, #32
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
 800c78e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c790:	2300      	movs	r3, #0
 800c792:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c798:	2306      	movs	r3, #6
 800c79a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c79c:	2340      	movs	r3, #64	; 0x40
 800c79e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7a8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7aa:	f107 0308 	add.w	r3, r7, #8
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7ff fde8 	bl	800c386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800c7b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7ba:	2106      	movs	r1, #6
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 f8db 	bl	800c978 <SDMMC_GetCmdResp1>
 800c7c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7c4:	69fb      	ldr	r3, [r7, #28]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3720      	adds	r7, #32
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b088      	sub	sp, #32
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c7de:	2333      	movs	r3, #51	; 0x33
 800c7e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c7e2:	2340      	movs	r3, #64	; 0x40
 800c7e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7ee:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7f0:	f107 0308 	add.w	r3, r7, #8
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f7ff fdc5 	bl	800c386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800c7fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c800:	2133      	movs	r1, #51	; 0x33
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 f8b8 	bl	800c978 <SDMMC_GetCmdResp1>
 800c808:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c80a:	69fb      	ldr	r3, [r7, #28]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3720      	adds	r7, #32
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b088      	sub	sp, #32
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c81c:	2300      	movs	r3, #0
 800c81e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c820:	2300      	movs	r3, #0
 800c822:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c824:	2302      	movs	r3, #2
 800c826:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c828:	23c0      	movs	r3, #192	; 0xc0
 800c82a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c82c:	2300      	movs	r3, #0
 800c82e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c834:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c836:	f107 0308 	add.w	r3, r7, #8
 800c83a:	4619      	mov	r1, r3
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7ff fda2 	bl	800c386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f97e 	bl	800cb44 <SDMMC_GetCmdResp2>
 800c848:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c84a:	69fb      	ldr	r3, [r7, #28]
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3720      	adds	r7, #32
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b088      	sub	sp, #32
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c85e:	2300      	movs	r3, #0
 800c860:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c866:	2309      	movs	r3, #9
 800c868:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c86a:	23c0      	movs	r3, #192	; 0xc0
 800c86c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c86e:	2300      	movs	r3, #0
 800c870:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c876:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c878:	f107 0308 	add.w	r3, r7, #8
 800c87c:	4619      	mov	r1, r3
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f7ff fd81 	bl	800c386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 f95d 	bl	800cb44 <SDMMC_GetCmdResp2>
 800c88a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c88c:	69fb      	ldr	r3, [r7, #28]
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3720      	adds	r7, #32
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b088      	sub	sp, #32
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c8a8:	2303      	movs	r3, #3
 800c8aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8ac:	2340      	movs	r3, #64	; 0x40
 800c8ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8b8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8ba:	f107 0308 	add.w	r3, r7, #8
 800c8be:	4619      	mov	r1, r3
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f7ff fd60 	bl	800c386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c8c6:	683a      	ldr	r2, [r7, #0]
 800c8c8:	2103      	movs	r1, #3
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 f9ae 	bl	800cc2c <SDMMC_GetCmdResp6>
 800c8d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8d2:	69fb      	ldr	r3, [r7, #28]
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3720      	adds	r7, #32
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b088      	sub	sp, #32
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c8ee:	230d      	movs	r3, #13
 800c8f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8f2:	2340      	movs	r3, #64	; 0x40
 800c8f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8fe:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c900:	f107 0308 	add.w	r3, r7, #8
 800c904:	4619      	mov	r1, r3
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f7ff fd3d 	bl	800c386 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c90c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c910:	210d      	movs	r1, #13
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f830 	bl	800c978 <SDMMC_GetCmdResp1>
 800c918:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c91a:	69fb      	ldr	r3, [r7, #28]
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3720      	adds	r7, #32
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c924:	b490      	push	{r4, r7}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c92c:	4b10      	ldr	r3, [pc, #64]	; (800c970 <SDMMC_GetCmdError+0x4c>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a10      	ldr	r2, [pc, #64]	; (800c974 <SDMMC_GetCmdError+0x50>)
 800c932:	fba2 2303 	umull	r2, r3, r2, r3
 800c936:	0a5b      	lsrs	r3, r3, #9
 800c938:	f241 3288 	movw	r2, #5000	; 0x1388
 800c93c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c940:	4623      	mov	r3, r4
 800c942:	1e5c      	subs	r4, r3, #1
 800c944:	2b00      	cmp	r3, #0
 800c946:	d102      	bne.n	800c94e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c948:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c94c:	e00a      	b.n	800c964 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c956:	2b00      	cmp	r3, #0
 800c958:	d0f2      	beq.n	800c940 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800c960:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c962:	2300      	movs	r3, #0
}
 800c964:	4618      	mov	r0, r3
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bc90      	pop	{r4, r7}
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop
 800c970:	20000134 	.word	0x20000134
 800c974:	10624dd3 	.word	0x10624dd3

0800c978 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c978:	b590      	push	{r4, r7, lr}
 800c97a:	b087      	sub	sp, #28
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	460b      	mov	r3, r1
 800c982:	607a      	str	r2, [r7, #4]
 800c984:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c986:	4b6c      	ldr	r3, [pc, #432]	; (800cb38 <SDMMC_GetCmdResp1+0x1c0>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a6c      	ldr	r2, [pc, #432]	; (800cb3c <SDMMC_GetCmdResp1+0x1c4>)
 800c98c:	fba2 2303 	umull	r2, r3, r2, r3
 800c990:	0a5b      	lsrs	r3, r3, #9
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c998:	4623      	mov	r3, r4
 800c99a:	1e5c      	subs	r4, r3, #1
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d102      	bne.n	800c9a6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c9a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9a4:	e0c3      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d0f2      	beq.n	800c998 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9b6:	f003 0304 	and.w	r3, r3, #4
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d004      	beq.n	800c9c8 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2204      	movs	r2, #4
 800c9c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9c4:	2304      	movs	r3, #4
 800c9c6:	e0b2      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9cc:	f003 0301 	and.w	r3, r3, #1
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d004      	beq.n	800c9de <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e0a7      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f7ff fcfb 	bl	800c3da <SDIO_GetCommandResponse>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	7afb      	ldrb	r3, [r7, #11]
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d001      	beq.n	800c9f2 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	e09d      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800c9f8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c9fa:	2100      	movs	r1, #0
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f7ff fcf9 	bl	800c3f4 <SDIO_GetResponse>
 800ca02:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ca04:	697a      	ldr	r2, [r7, #20]
 800ca06:	4b4e      	ldr	r3, [pc, #312]	; (800cb40 <SDMMC_GetCmdResp1+0x1c8>)
 800ca08:	4013      	ands	r3, r2
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d101      	bne.n	800ca12 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	e08d      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	da02      	bge.n	800ca1e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ca18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ca1c:	e087      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d001      	beq.n	800ca2c <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ca28:	2340      	movs	r3, #64	; 0x40
 800ca2a:	e080      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d001      	beq.n	800ca3a <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ca36:	2380      	movs	r3, #128	; 0x80
 800ca38:	e079      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d002      	beq.n	800ca4a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ca44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca48:	e071      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d002      	beq.n	800ca5a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ca54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca58:	e069      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d002      	beq.n	800ca6a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ca64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca68:	e061      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d002      	beq.n	800ca7a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ca74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca78:	e059      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d002      	beq.n	800ca8a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ca84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca88:	e051      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d002      	beq.n	800ca9a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ca94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ca98:	e049      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d002      	beq.n	800caaa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800caa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800caa8:	e041      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d002      	beq.n	800caba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800cab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cab8:	e039      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d002      	beq.n	800caca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cac4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cac8:	e031      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d002      	beq.n	800cada <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cad4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cad8:	e029      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d002      	beq.n	800caea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cae4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cae8:	e021      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d002      	beq.n	800cafa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800caf4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800caf8:	e019      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d002      	beq.n	800cb0a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cb04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cb08:	e011      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d002      	beq.n	800cb1a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cb14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cb18:	e009      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	f003 0308 	and.w	r3, r3, #8
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d002      	beq.n	800cb2a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cb24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cb28:	e001      	b.n	800cb2e <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cb2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	371c      	adds	r7, #28
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd90      	pop	{r4, r7, pc}
 800cb36:	bf00      	nop
 800cb38:	20000134 	.word	0x20000134
 800cb3c:	10624dd3 	.word	0x10624dd3
 800cb40:	fdffe008 	.word	0xfdffe008

0800cb44 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800cb44:	b490      	push	{r4, r7}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb4c:	4b1b      	ldr	r3, [pc, #108]	; (800cbbc <SDMMC_GetCmdResp2+0x78>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a1b      	ldr	r2, [pc, #108]	; (800cbc0 <SDMMC_GetCmdResp2+0x7c>)
 800cb52:	fba2 2303 	umull	r2, r3, r2, r3
 800cb56:	0a5b      	lsrs	r3, r3, #9
 800cb58:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cb60:	4623      	mov	r3, r4
 800cb62:	1e5c      	subs	r4, r3, #1
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d102      	bne.n	800cb6e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb6c:	e020      	b.n	800cbb0 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb72:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d0f2      	beq.n	800cb60 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb7e:	f003 0304 	and.w	r3, r3, #4
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d004      	beq.n	800cb90 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2204      	movs	r2, #4
 800cb8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb8c:	2304      	movs	r3, #4
 800cb8e:	e00f      	b.n	800cbb0 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb94:	f003 0301 	and.w	r3, r3, #1
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d004      	beq.n	800cba6 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cba2:	2301      	movs	r3, #1
 800cba4:	e004      	b.n	800cbb0 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800cbac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cbae:	2300      	movs	r3, #0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bc90      	pop	{r4, r7}
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop
 800cbbc:	20000134 	.word	0x20000134
 800cbc0:	10624dd3 	.word	0x10624dd3

0800cbc4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800cbc4:	b490      	push	{r4, r7}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cbcc:	4b15      	ldr	r3, [pc, #84]	; (800cc24 <SDMMC_GetCmdResp3+0x60>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a15      	ldr	r2, [pc, #84]	; (800cc28 <SDMMC_GetCmdResp3+0x64>)
 800cbd2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbd6:	0a5b      	lsrs	r3, r3, #9
 800cbd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbdc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cbe0:	4623      	mov	r3, r4
 800cbe2:	1e5c      	subs	r4, r3, #1
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d102      	bne.n	800cbee <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cbe8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cbec:	e015      	b.n	800cc1a <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbf2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d0f2      	beq.n	800cbe0 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbfe:	f003 0304 	and.w	r3, r3, #4
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d004      	beq.n	800cc10 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2204      	movs	r2, #4
 800cc0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc0c:	2304      	movs	r3, #4
 800cc0e:	e004      	b.n	800cc1a <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800cc16:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cc18:	2300      	movs	r3, #0
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3708      	adds	r7, #8
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bc90      	pop	{r4, r7}
 800cc22:	4770      	bx	lr
 800cc24:	20000134 	.word	0x20000134
 800cc28:	10624dd3 	.word	0x10624dd3

0800cc2c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cc2c:	b590      	push	{r4, r7, lr}
 800cc2e:	b087      	sub	sp, #28
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	460b      	mov	r3, r1
 800cc36:	607a      	str	r2, [r7, #4]
 800cc38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc3a:	4b31      	ldr	r3, [pc, #196]	; (800cd00 <SDMMC_GetCmdResp6+0xd4>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a31      	ldr	r2, [pc, #196]	; (800cd04 <SDMMC_GetCmdResp6+0xd8>)
 800cc40:	fba2 2303 	umull	r2, r3, r2, r3
 800cc44:	0a5b      	lsrs	r3, r3, #9
 800cc46:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc4a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cc4e:	4623      	mov	r3, r4
 800cc50:	1e5c      	subs	r4, r3, #1
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d102      	bne.n	800cc5c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc5a:	e04c      	b.n	800ccf6 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc60:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d0f2      	beq.n	800cc4e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc6c:	f003 0304 	and.w	r3, r3, #4
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d004      	beq.n	800cc7e <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2204      	movs	r2, #4
 800cc78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc7a:	2304      	movs	r3, #4
 800cc7c:	e03b      	b.n	800ccf6 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc82:	f003 0301 	and.w	r3, r3, #1
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d004      	beq.n	800cc94 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc90:	2301      	movs	r3, #1
 800cc92:	e030      	b.n	800ccf6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	f7ff fba0 	bl	800c3da <SDIO_GetCommandResponse>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	7afb      	ldrb	r3, [r7, #11]
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d001      	beq.n	800cca8 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cca4:	2301      	movs	r3, #1
 800cca6:	e026      	b.n	800ccf6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ccae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ccb0:	2100      	movs	r1, #0
 800ccb2:	68f8      	ldr	r0, [r7, #12]
 800ccb4:	f7ff fb9e 	bl	800c3f4 <SDIO_GetResponse>
 800ccb8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d106      	bne.n	800ccd2 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	0c1b      	lsrs	r3, r3, #16
 800ccc8:	b29a      	uxth	r2, r3
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	e011      	b.n	800ccf6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d002      	beq.n	800cce2 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ccdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cce0:	e009      	b.n	800ccf6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d002      	beq.n	800ccf2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ccec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccf0:	e001      	b.n	800ccf6 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ccf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	371c      	adds	r7, #28
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd90      	pop	{r4, r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	20000134 	.word	0x20000134
 800cd04:	10624dd3 	.word	0x10624dd3

0800cd08 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800cd08:	b490      	push	{r4, r7}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd10:	4b18      	ldr	r3, [pc, #96]	; (800cd74 <SDMMC_GetCmdResp7+0x6c>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a18      	ldr	r2, [pc, #96]	; (800cd78 <SDMMC_GetCmdResp7+0x70>)
 800cd16:	fba2 2303 	umull	r2, r3, r2, r3
 800cd1a:	0a5b      	lsrs	r3, r3, #9
 800cd1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd20:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cd24:	4623      	mov	r3, r4
 800cd26:	1e5c      	subs	r4, r3, #1
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d102      	bne.n	800cd32 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd30:	e01a      	b.n	800cd68 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd36:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d0f2      	beq.n	800cd24 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd42:	f003 0304 	and.w	r3, r3, #4
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d004      	beq.n	800cd54 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2240      	movs	r2, #64	; 0x40
 800cd4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd50:	2304      	movs	r3, #4
 800cd52:	e009      	b.n	800cd68 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d002      	beq.n	800cd66 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2240      	movs	r2, #64	; 0x40
 800cd64:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cd66:	2300      	movs	r3, #0
  
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3708      	adds	r7, #8
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bc90      	pop	{r4, r7}
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop
 800cd74:	20000134 	.word	0x20000134
 800cd78:	10624dd3 	.word	0x10624dd3

0800cd7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cd7c:	b084      	sub	sp, #16
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b084      	sub	sp, #16
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
 800cd86:	f107 001c 	add.w	r0, r7, #28
 800cd8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d122      	bne.n	800cdda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800cda8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	68db      	ldr	r3, [r3, #12]
 800cdb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cdbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d105      	bne.n	800cdce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f001 fa7c 	bl	800e2cc <USB_CoreReset>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	73fb      	strb	r3, [r7, #15]
 800cdd8:	e01a      	b.n	800ce10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f001 fa70 	bl	800e2cc <USB_CoreReset>
 800cdec:	4603      	mov	r3, r0
 800cdee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cdf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d106      	bne.n	800ce04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	639a      	str	r2, [r3, #56]	; 0x38
 800ce02:	e005      	b.n	800ce10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ce10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d10b      	bne.n	800ce2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	f043 0206 	orr.w	r2, r3, #6
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	f043 0220 	orr.w	r2, r3, #32
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ce2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce3a:	b004      	add	sp, #16
 800ce3c:	4770      	bx	lr
	...

0800ce40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b087      	sub	sp, #28
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ce4e:	79fb      	ldrb	r3, [r7, #7]
 800ce50:	2b02      	cmp	r3, #2
 800ce52:	d165      	bne.n	800cf20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	4a41      	ldr	r2, [pc, #260]	; (800cf5c <USB_SetTurnaroundTime+0x11c>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d906      	bls.n	800ce6a <USB_SetTurnaroundTime+0x2a>
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	4a40      	ldr	r2, [pc, #256]	; (800cf60 <USB_SetTurnaroundTime+0x120>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d802      	bhi.n	800ce6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ce64:	230f      	movs	r3, #15
 800ce66:	617b      	str	r3, [r7, #20]
 800ce68:	e062      	b.n	800cf30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	4a3c      	ldr	r2, [pc, #240]	; (800cf60 <USB_SetTurnaroundTime+0x120>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d906      	bls.n	800ce80 <USB_SetTurnaroundTime+0x40>
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	4a3b      	ldr	r2, [pc, #236]	; (800cf64 <USB_SetTurnaroundTime+0x124>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d802      	bhi.n	800ce80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ce7a:	230e      	movs	r3, #14
 800ce7c:	617b      	str	r3, [r7, #20]
 800ce7e:	e057      	b.n	800cf30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	4a38      	ldr	r2, [pc, #224]	; (800cf64 <USB_SetTurnaroundTime+0x124>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d906      	bls.n	800ce96 <USB_SetTurnaroundTime+0x56>
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	4a37      	ldr	r2, [pc, #220]	; (800cf68 <USB_SetTurnaroundTime+0x128>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d802      	bhi.n	800ce96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ce90:	230d      	movs	r3, #13
 800ce92:	617b      	str	r3, [r7, #20]
 800ce94:	e04c      	b.n	800cf30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	4a33      	ldr	r2, [pc, #204]	; (800cf68 <USB_SetTurnaroundTime+0x128>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d906      	bls.n	800ceac <USB_SetTurnaroundTime+0x6c>
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	4a32      	ldr	r2, [pc, #200]	; (800cf6c <USB_SetTurnaroundTime+0x12c>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d802      	bhi.n	800ceac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cea6:	230c      	movs	r3, #12
 800cea8:	617b      	str	r3, [r7, #20]
 800ceaa:	e041      	b.n	800cf30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	4a2f      	ldr	r2, [pc, #188]	; (800cf6c <USB_SetTurnaroundTime+0x12c>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d906      	bls.n	800cec2 <USB_SetTurnaroundTime+0x82>
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	4a2e      	ldr	r2, [pc, #184]	; (800cf70 <USB_SetTurnaroundTime+0x130>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d802      	bhi.n	800cec2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cebc:	230b      	movs	r3, #11
 800cebe:	617b      	str	r3, [r7, #20]
 800cec0:	e036      	b.n	800cf30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	4a2a      	ldr	r2, [pc, #168]	; (800cf70 <USB_SetTurnaroundTime+0x130>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d906      	bls.n	800ced8 <USB_SetTurnaroundTime+0x98>
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	4a29      	ldr	r2, [pc, #164]	; (800cf74 <USB_SetTurnaroundTime+0x134>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d802      	bhi.n	800ced8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ced2:	230a      	movs	r3, #10
 800ced4:	617b      	str	r3, [r7, #20]
 800ced6:	e02b      	b.n	800cf30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	4a26      	ldr	r2, [pc, #152]	; (800cf74 <USB_SetTurnaroundTime+0x134>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d906      	bls.n	800ceee <USB_SetTurnaroundTime+0xae>
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	4a25      	ldr	r2, [pc, #148]	; (800cf78 <USB_SetTurnaroundTime+0x138>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d802      	bhi.n	800ceee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cee8:	2309      	movs	r3, #9
 800ceea:	617b      	str	r3, [r7, #20]
 800ceec:	e020      	b.n	800cf30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	4a21      	ldr	r2, [pc, #132]	; (800cf78 <USB_SetTurnaroundTime+0x138>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d906      	bls.n	800cf04 <USB_SetTurnaroundTime+0xc4>
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	4a20      	ldr	r2, [pc, #128]	; (800cf7c <USB_SetTurnaroundTime+0x13c>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d802      	bhi.n	800cf04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cefe:	2308      	movs	r3, #8
 800cf00:	617b      	str	r3, [r7, #20]
 800cf02:	e015      	b.n	800cf30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	4a1d      	ldr	r2, [pc, #116]	; (800cf7c <USB_SetTurnaroundTime+0x13c>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d906      	bls.n	800cf1a <USB_SetTurnaroundTime+0xda>
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	4a1c      	ldr	r2, [pc, #112]	; (800cf80 <USB_SetTurnaroundTime+0x140>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d802      	bhi.n	800cf1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cf14:	2307      	movs	r3, #7
 800cf16:	617b      	str	r3, [r7, #20]
 800cf18:	e00a      	b.n	800cf30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cf1a:	2306      	movs	r3, #6
 800cf1c:	617b      	str	r3, [r7, #20]
 800cf1e:	e007      	b.n	800cf30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cf20:	79fb      	ldrb	r3, [r7, #7]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d102      	bne.n	800cf2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cf26:	2309      	movs	r3, #9
 800cf28:	617b      	str	r3, [r7, #20]
 800cf2a:	e001      	b.n	800cf30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cf2c:	2309      	movs	r3, #9
 800cf2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	68da      	ldr	r2, [r3, #12]
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	029b      	lsls	r3, r3, #10
 800cf44:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cf48:	431a      	orrs	r2, r3
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cf4e:	2300      	movs	r3, #0
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	371c      	adds	r7, #28
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr
 800cf5c:	00d8acbf 	.word	0x00d8acbf
 800cf60:	00e4e1bf 	.word	0x00e4e1bf
 800cf64:	00f423ff 	.word	0x00f423ff
 800cf68:	0106737f 	.word	0x0106737f
 800cf6c:	011a499f 	.word	0x011a499f
 800cf70:	01312cff 	.word	0x01312cff
 800cf74:	014ca43f 	.word	0x014ca43f
 800cf78:	016e35ff 	.word	0x016e35ff
 800cf7c:	01a6ab1f 	.word	0x01a6ab1f
 800cf80:	01e847ff 	.word	0x01e847ff

0800cf84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	f043 0201 	orr.w	r2, r3, #1
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cf98:	2300      	movs	r3, #0
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	370c      	adds	r7, #12
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr

0800cfa6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfa6:	b480      	push	{r7}
 800cfa8:	b083      	sub	sp, #12
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	689b      	ldr	r3, [r3, #8]
 800cfb2:	f023 0201 	bic.w	r2, r3, #1
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cfba:	2300      	movs	r3, #0
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cfe0:	78fb      	ldrb	r3, [r7, #3]
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d106      	bne.n	800cff4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	60da      	str	r2, [r3, #12]
 800cff2:	e00b      	b.n	800d00c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cff4:	78fb      	ldrb	r3, [r7, #3]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d106      	bne.n	800d008 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	60da      	str	r2, [r3, #12]
 800d006:	e001      	b.n	800d00c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d008:	2301      	movs	r3, #1
 800d00a:	e003      	b.n	800d014 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d00c:	2032      	movs	r0, #50	; 0x32
 800d00e:	f7f8 f85d 	bl	80050cc <HAL_Delay>

  return HAL_OK;
 800d012:	2300      	movs	r3, #0
}
 800d014:	4618      	mov	r0, r3
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d01c:	b084      	sub	sp, #16
 800d01e:	b580      	push	{r7, lr}
 800d020:	b086      	sub	sp, #24
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
 800d026:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d02a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d02e:	2300      	movs	r3, #0
 800d030:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d036:	2300      	movs	r3, #0
 800d038:	613b      	str	r3, [r7, #16]
 800d03a:	e009      	b.n	800d050 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	3340      	adds	r3, #64	; 0x40
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	4413      	add	r3, r2
 800d046:	2200      	movs	r2, #0
 800d048:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	3301      	adds	r3, #1
 800d04e:	613b      	str	r3, [r7, #16]
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	2b0e      	cmp	r3, #14
 800d054:	d9f2      	bls.n	800d03c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d112      	bne.n	800d082 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d060:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d06c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d078:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	639a      	str	r2, [r3, #56]	; 0x38
 800d080:	e00b      	b.n	800d09a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d092:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	680b      	ldr	r3, [r1, #0]
 800d0b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d10c      	bne.n	800d0da <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d104      	bne.n	800d0d0 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d0c6:	2100      	movs	r1, #0
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 f961 	bl	800d390 <USB_SetDevSpeed>
 800d0ce:	e008      	b.n	800d0e2 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d0d0:	2101      	movs	r1, #1
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 f95c 	bl	800d390 <USB_SetDevSpeed>
 800d0d8:	e003      	b.n	800d0e2 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d0da:	2103      	movs	r1, #3
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 f957 	bl	800d390 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d0e2:	2110      	movs	r1, #16
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 f90b 	bl	800d300 <USB_FlushTxFifo>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d001      	beq.n	800d0f4 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 f929 	bl	800d34c <USB_FlushRxFifo>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d001      	beq.n	800d104 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800d100:	2301      	movs	r3, #1
 800d102:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d10a:	461a      	mov	r2, r3
 800d10c:	2300      	movs	r3, #0
 800d10e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d116:	461a      	mov	r2, r3
 800d118:	2300      	movs	r3, #0
 800d11a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d122:	461a      	mov	r2, r3
 800d124:	2300      	movs	r3, #0
 800d126:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d128:	2300      	movs	r3, #0
 800d12a:	613b      	str	r3, [r7, #16]
 800d12c:	e043      	b.n	800d1b6 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	015a      	lsls	r2, r3, #5
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	4413      	add	r3, r2
 800d136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d144:	d118      	bne.n	800d178 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d10a      	bne.n	800d162 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	015a      	lsls	r2, r3, #5
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	4413      	add	r3, r2
 800d154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d158:	461a      	mov	r2, r3
 800d15a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d15e:	6013      	str	r3, [r2, #0]
 800d160:	e013      	b.n	800d18a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	015a      	lsls	r2, r3, #5
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	4413      	add	r3, r2
 800d16a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d16e:	461a      	mov	r2, r3
 800d170:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d174:	6013      	str	r3, [r2, #0]
 800d176:	e008      	b.n	800d18a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	015a      	lsls	r2, r3, #5
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	4413      	add	r3, r2
 800d180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d184:	461a      	mov	r2, r3
 800d186:	2300      	movs	r3, #0
 800d188:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	015a      	lsls	r2, r3, #5
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	4413      	add	r3, r2
 800d192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d196:	461a      	mov	r2, r3
 800d198:	2300      	movs	r3, #0
 800d19a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	015a      	lsls	r2, r3, #5
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d1ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	613b      	str	r3, [r7, #16]
 800d1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b8:	693a      	ldr	r2, [r7, #16]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d3b7      	bcc.n	800d12e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d1be:	2300      	movs	r3, #0
 800d1c0:	613b      	str	r3, [r7, #16]
 800d1c2:	e043      	b.n	800d24c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	015a      	lsls	r2, r3, #5
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	4413      	add	r3, r2
 800d1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1da:	d118      	bne.n	800d20e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d10a      	bne.n	800d1f8 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	015a      	lsls	r2, r3, #5
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d1f4:	6013      	str	r3, [r2, #0]
 800d1f6:	e013      	b.n	800d220 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	015a      	lsls	r2, r3, #5
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	4413      	add	r3, r2
 800d200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d204:	461a      	mov	r2, r3
 800d206:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d20a:	6013      	str	r3, [r2, #0]
 800d20c:	e008      	b.n	800d220 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	015a      	lsls	r2, r3, #5
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	4413      	add	r3, r2
 800d216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d21a:	461a      	mov	r2, r3
 800d21c:	2300      	movs	r3, #0
 800d21e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	015a      	lsls	r2, r3, #5
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	4413      	add	r3, r2
 800d228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d22c:	461a      	mov	r2, r3
 800d22e:	2300      	movs	r3, #0
 800d230:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	015a      	lsls	r2, r3, #5
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	4413      	add	r3, r2
 800d23a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d23e:	461a      	mov	r2, r3
 800d240:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d244:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	3301      	adds	r3, #1
 800d24a:	613b      	str	r3, [r7, #16]
 800d24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24e:	693a      	ldr	r2, [r7, #16]
 800d250:	429a      	cmp	r2, r3
 800d252:	d3b7      	bcc.n	800d1c4 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	68fa      	ldr	r2, [r7, #12]
 800d25e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d262:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d266:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800d268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d111      	bne.n	800d292 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d274:	461a      	mov	r2, r3
 800d276:	4b20      	ldr	r3, [pc, #128]	; (800d2f8 <USB_DevInit+0x2dc>)
 800d278:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d282:	68fa      	ldr	r2, [r7, #12]
 800d284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d28c:	f043 0303 	orr.w	r3, r3, #3
 800d290:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2200      	movs	r2, #0
 800d296:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d29e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d105      	bne.n	800d2b2 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	699b      	ldr	r3, [r3, #24]
 800d2aa:	f043 0210 	orr.w	r2, r3, #16
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	699a      	ldr	r2, [r3, #24]
 800d2b6:	4b11      	ldr	r3, [pc, #68]	; (800d2fc <USB_DevInit+0x2e0>)
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d2be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d005      	beq.n	800d2d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	699b      	ldr	r3, [r3, #24]
 800d2c8:	f043 0208 	orr.w	r2, r3, #8
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d2d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d107      	bne.n	800d2e6 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	699b      	ldr	r3, [r3, #24]
 800d2da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d2de:	f043 0304 	orr.w	r3, r3, #4
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d2e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3718      	adds	r7, #24
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d2f2:	b004      	add	sp, #16
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop
 800d2f8:	00800100 	.word	0x00800100
 800d2fc:	803c3800 	.word	0x803c3800

0800d300 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d300:	b480      	push	{r7}
 800d302:	b085      	sub	sp, #20
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d30a:	2300      	movs	r3, #0
 800d30c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	019b      	lsls	r3, r3, #6
 800d312:	f043 0220 	orr.w	r2, r3, #32
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	3301      	adds	r3, #1
 800d31e:	60fb      	str	r3, [r7, #12]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	4a09      	ldr	r2, [pc, #36]	; (800d348 <USB_FlushTxFifo+0x48>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d901      	bls.n	800d32c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d328:	2303      	movs	r3, #3
 800d32a:	e006      	b.n	800d33a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	691b      	ldr	r3, [r3, #16]
 800d330:	f003 0320 	and.w	r3, r3, #32
 800d334:	2b20      	cmp	r3, #32
 800d336:	d0f0      	beq.n	800d31a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d338:	2300      	movs	r3, #0
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3714      	adds	r7, #20
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	00030d40 	.word	0x00030d40

0800d34c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b085      	sub	sp, #20
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d354:	2300      	movs	r3, #0
 800d356:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2210      	movs	r2, #16
 800d35c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	3301      	adds	r3, #1
 800d362:	60fb      	str	r3, [r7, #12]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	4a09      	ldr	r2, [pc, #36]	; (800d38c <USB_FlushRxFifo+0x40>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d901      	bls.n	800d370 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d36c:	2303      	movs	r3, #3
 800d36e:	e006      	b.n	800d37e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	691b      	ldr	r3, [r3, #16]
 800d374:	f003 0310 	and.w	r3, r3, #16
 800d378:	2b10      	cmp	r3, #16
 800d37a:	d0f0      	beq.n	800d35e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d37c:	2300      	movs	r3, #0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3714      	adds	r7, #20
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop
 800d38c:	00030d40 	.word	0x00030d40

0800d390 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d390:	b480      	push	{r7}
 800d392:	b085      	sub	sp, #20
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	460b      	mov	r3, r1
 800d39a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	78fb      	ldrb	r3, [r7, #3]
 800d3aa:	68f9      	ldr	r1, [r7, #12]
 800d3ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3714      	adds	r7, #20
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr

0800d3c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d3c2:	b480      	push	{r7}
 800d3c4:	b087      	sub	sp, #28
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	f003 0306 	and.w	r3, r3, #6
 800d3da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d102      	bne.n	800d3e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	75fb      	strb	r3, [r7, #23]
 800d3e6:	e00a      	b.n	800d3fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2b02      	cmp	r3, #2
 800d3ec:	d002      	beq.n	800d3f4 <USB_GetDevSpeed+0x32>
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2b06      	cmp	r3, #6
 800d3f2:	d102      	bne.n	800d3fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d3f4:	2302      	movs	r3, #2
 800d3f6:	75fb      	strb	r3, [r7, #23]
 800d3f8:	e001      	b.n	800d3fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d3fa:	230f      	movs	r3, #15
 800d3fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d3fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d400:	4618      	mov	r0, r3
 800d402:	371c      	adds	r7, #28
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr

0800d40c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b085      	sub	sp, #20
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	785b      	ldrb	r3, [r3, #1]
 800d424:	2b01      	cmp	r3, #1
 800d426:	d13a      	bne.n	800d49e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d42e:	69da      	ldr	r2, [r3, #28]
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	f003 030f 	and.w	r3, r3, #15
 800d438:	2101      	movs	r1, #1
 800d43a:	fa01 f303 	lsl.w	r3, r1, r3
 800d43e:	b29b      	uxth	r3, r3
 800d440:	68f9      	ldr	r1, [r7, #12]
 800d442:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d446:	4313      	orrs	r3, r2
 800d448:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	015a      	lsls	r2, r3, #5
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	4413      	add	r3, r2
 800d452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d155      	bne.n	800d50c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	015a      	lsls	r2, r3, #5
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	4413      	add	r3, r2
 800d468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	689b      	ldr	r3, [r3, #8]
 800d472:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	78db      	ldrb	r3, [r3, #3]
 800d47a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d47c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	059b      	lsls	r3, r3, #22
 800d482:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d484:	4313      	orrs	r3, r2
 800d486:	68ba      	ldr	r2, [r7, #8]
 800d488:	0151      	lsls	r1, r2, #5
 800d48a:	68fa      	ldr	r2, [r7, #12]
 800d48c:	440a      	add	r2, r1
 800d48e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d49a:	6013      	str	r3, [r2, #0]
 800d49c:	e036      	b.n	800d50c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4a4:	69da      	ldr	r2, [r3, #28]
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	f003 030f 	and.w	r3, r3, #15
 800d4ae:	2101      	movs	r1, #1
 800d4b0:	fa01 f303 	lsl.w	r3, r1, r3
 800d4b4:	041b      	lsls	r3, r3, #16
 800d4b6:	68f9      	ldr	r1, [r7, #12]
 800d4b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	015a      	lsls	r2, r3, #5
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	4413      	add	r3, r2
 800d4c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d11a      	bne.n	800d50c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	015a      	lsls	r2, r3, #5
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	4413      	add	r3, r2
 800d4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	689b      	ldr	r3, [r3, #8]
 800d4e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	78db      	ldrb	r3, [r3, #3]
 800d4f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d4f2:	430b      	orrs	r3, r1
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	68ba      	ldr	r2, [r7, #8]
 800d4f8:	0151      	lsls	r1, r2, #5
 800d4fa:	68fa      	ldr	r2, [r7, #12]
 800d4fc:	440a      	add	r2, r1
 800d4fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d50a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d50c:	2300      	movs	r3, #0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3714      	adds	r7, #20
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr
	...

0800d51c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b085      	sub	sp, #20
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	785b      	ldrb	r3, [r3, #1]
 800d534:	2b01      	cmp	r3, #1
 800d536:	d135      	bne.n	800d5a4 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d53e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	f003 030f 	and.w	r3, r3, #15
 800d548:	2101      	movs	r1, #1
 800d54a:	fa01 f303 	lsl.w	r3, r1, r3
 800d54e:	b29b      	uxth	r3, r3
 800d550:	43db      	mvns	r3, r3
 800d552:	68f9      	ldr	r1, [r7, #12]
 800d554:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d558:	4013      	ands	r3, r2
 800d55a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d562:	69da      	ldr	r2, [r3, #28]
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	f003 030f 	and.w	r3, r3, #15
 800d56c:	2101      	movs	r1, #1
 800d56e:	fa01 f303 	lsl.w	r3, r1, r3
 800d572:	b29b      	uxth	r3, r3
 800d574:	43db      	mvns	r3, r3
 800d576:	68f9      	ldr	r1, [r7, #12]
 800d578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d57c:	4013      	ands	r3, r2
 800d57e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	015a      	lsls	r2, r3, #5
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	4413      	add	r3, r2
 800d588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	0159      	lsls	r1, r3, #5
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	440b      	add	r3, r1
 800d596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d59a:	4619      	mov	r1, r3
 800d59c:	4b1f      	ldr	r3, [pc, #124]	; (800d61c <USB_DeactivateEndpoint+0x100>)
 800d59e:	4013      	ands	r3, r2
 800d5a0:	600b      	str	r3, [r1, #0]
 800d5a2:	e034      	b.n	800d60e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	f003 030f 	and.w	r3, r3, #15
 800d5b4:	2101      	movs	r1, #1
 800d5b6:	fa01 f303 	lsl.w	r3, r1, r3
 800d5ba:	041b      	lsls	r3, r3, #16
 800d5bc:	43db      	mvns	r3, r3
 800d5be:	68f9      	ldr	r1, [r7, #12]
 800d5c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5c4:	4013      	ands	r3, r2
 800d5c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5ce:	69da      	ldr	r2, [r3, #28]
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	f003 030f 	and.w	r3, r3, #15
 800d5d8:	2101      	movs	r1, #1
 800d5da:	fa01 f303 	lsl.w	r3, r1, r3
 800d5de:	041b      	lsls	r3, r3, #16
 800d5e0:	43db      	mvns	r3, r3
 800d5e2:	68f9      	ldr	r1, [r7, #12]
 800d5e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5e8:	4013      	ands	r3, r2
 800d5ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	015a      	lsls	r2, r3, #5
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	0159      	lsls	r1, r3, #5
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	440b      	add	r3, r1
 800d602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d606:	4619      	mov	r1, r3
 800d608:	4b05      	ldr	r3, [pc, #20]	; (800d620 <USB_DeactivateEndpoint+0x104>)
 800d60a:	4013      	ands	r3, r2
 800d60c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d60e:	2300      	movs	r3, #0
}
 800d610:	4618      	mov	r0, r3
 800d612:	3714      	adds	r7, #20
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr
 800d61c:	ec337800 	.word	0xec337800
 800d620:	eff37800 	.word	0xeff37800

0800d624 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b08a      	sub	sp, #40	; 0x28
 800d628:	af02      	add	r7, sp, #8
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	60b9      	str	r1, [r7, #8]
 800d62e:	4613      	mov	r3, r2
 800d630:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	785b      	ldrb	r3, [r3, #1]
 800d640:	2b01      	cmp	r3, #1
 800d642:	f040 815c 	bne.w	800d8fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	695b      	ldr	r3, [r3, #20]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d132      	bne.n	800d6b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d64e:	69bb      	ldr	r3, [r7, #24]
 800d650:	015a      	lsls	r2, r3, #5
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	4413      	add	r3, r2
 800d656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d65a:	691b      	ldr	r3, [r3, #16]
 800d65c:	69ba      	ldr	r2, [r7, #24]
 800d65e:	0151      	lsls	r1, r2, #5
 800d660:	69fa      	ldr	r2, [r7, #28]
 800d662:	440a      	add	r2, r1
 800d664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d668:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d66c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d670:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d672:	69bb      	ldr	r3, [r7, #24]
 800d674:	015a      	lsls	r2, r3, #5
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	4413      	add	r3, r2
 800d67a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d67e:	691b      	ldr	r3, [r3, #16]
 800d680:	69ba      	ldr	r2, [r7, #24]
 800d682:	0151      	lsls	r1, r2, #5
 800d684:	69fa      	ldr	r2, [r7, #28]
 800d686:	440a      	add	r2, r1
 800d688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d68c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d690:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	015a      	lsls	r2, r3, #5
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	4413      	add	r3, r2
 800d69a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d69e:	691b      	ldr	r3, [r3, #16]
 800d6a0:	69ba      	ldr	r2, [r7, #24]
 800d6a2:	0151      	lsls	r1, r2, #5
 800d6a4:	69fa      	ldr	r2, [r7, #28]
 800d6a6:	440a      	add	r2, r1
 800d6a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6ac:	0cdb      	lsrs	r3, r3, #19
 800d6ae:	04db      	lsls	r3, r3, #19
 800d6b0:	6113      	str	r3, [r2, #16]
 800d6b2:	e074      	b.n	800d79e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d6b4:	69bb      	ldr	r3, [r7, #24]
 800d6b6:	015a      	lsls	r2, r3, #5
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	4413      	add	r3, r2
 800d6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6c0:	691b      	ldr	r3, [r3, #16]
 800d6c2:	69ba      	ldr	r2, [r7, #24]
 800d6c4:	0151      	lsls	r1, r2, #5
 800d6c6:	69fa      	ldr	r2, [r7, #28]
 800d6c8:	440a      	add	r2, r1
 800d6ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6ce:	0cdb      	lsrs	r3, r3, #19
 800d6d0:	04db      	lsls	r3, r3, #19
 800d6d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d6d4:	69bb      	ldr	r3, [r7, #24]
 800d6d6:	015a      	lsls	r2, r3, #5
 800d6d8:	69fb      	ldr	r3, [r7, #28]
 800d6da:	4413      	add	r3, r2
 800d6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6e0:	691b      	ldr	r3, [r3, #16]
 800d6e2:	69ba      	ldr	r2, [r7, #24]
 800d6e4:	0151      	lsls	r1, r2, #5
 800d6e6:	69fa      	ldr	r2, [r7, #28]
 800d6e8:	440a      	add	r2, r1
 800d6ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d6f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d6f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d6f8:	69bb      	ldr	r3, [r7, #24]
 800d6fa:	015a      	lsls	r2, r3, #5
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	4413      	add	r3, r2
 800d700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d704:	691a      	ldr	r2, [r3, #16]
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	6959      	ldr	r1, [r3, #20]
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	689b      	ldr	r3, [r3, #8]
 800d70e:	440b      	add	r3, r1
 800d710:	1e59      	subs	r1, r3, #1
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	689b      	ldr	r3, [r3, #8]
 800d716:	fbb1 f3f3 	udiv	r3, r1, r3
 800d71a:	04d9      	lsls	r1, r3, #19
 800d71c:	4b9d      	ldr	r3, [pc, #628]	; (800d994 <USB_EPStartXfer+0x370>)
 800d71e:	400b      	ands	r3, r1
 800d720:	69b9      	ldr	r1, [r7, #24]
 800d722:	0148      	lsls	r0, r1, #5
 800d724:	69f9      	ldr	r1, [r7, #28]
 800d726:	4401      	add	r1, r0
 800d728:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d72c:	4313      	orrs	r3, r2
 800d72e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	015a      	lsls	r2, r3, #5
 800d734:	69fb      	ldr	r3, [r7, #28]
 800d736:	4413      	add	r3, r2
 800d738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d73c:	691a      	ldr	r2, [r3, #16]
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	695b      	ldr	r3, [r3, #20]
 800d742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d746:	69b9      	ldr	r1, [r7, #24]
 800d748:	0148      	lsls	r0, r1, #5
 800d74a:	69f9      	ldr	r1, [r7, #28]
 800d74c:	4401      	add	r1, r0
 800d74e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d752:	4313      	orrs	r3, r2
 800d754:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	78db      	ldrb	r3, [r3, #3]
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d11f      	bne.n	800d79e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	015a      	lsls	r2, r3, #5
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	4413      	add	r3, r2
 800d766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d76a:	691b      	ldr	r3, [r3, #16]
 800d76c:	69ba      	ldr	r2, [r7, #24]
 800d76e:	0151      	lsls	r1, r2, #5
 800d770:	69fa      	ldr	r2, [r7, #28]
 800d772:	440a      	add	r2, r1
 800d774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d778:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d77c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d77e:	69bb      	ldr	r3, [r7, #24]
 800d780:	015a      	lsls	r2, r3, #5
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	4413      	add	r3, r2
 800d786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d78a:	691b      	ldr	r3, [r3, #16]
 800d78c:	69ba      	ldr	r2, [r7, #24]
 800d78e:	0151      	lsls	r1, r2, #5
 800d790:	69fa      	ldr	r2, [r7, #28]
 800d792:	440a      	add	r2, r1
 800d794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d798:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d79c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d79e:	79fb      	ldrb	r3, [r7, #7]
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d14b      	bne.n	800d83c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	691b      	ldr	r3, [r3, #16]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d009      	beq.n	800d7c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d7ac:	69bb      	ldr	r3, [r7, #24]
 800d7ae:	015a      	lsls	r2, r3, #5
 800d7b0:	69fb      	ldr	r3, [r7, #28]
 800d7b2:	4413      	add	r3, r2
 800d7b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	691b      	ldr	r3, [r3, #16]
 800d7be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	78db      	ldrb	r3, [r3, #3]
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d128      	bne.n	800d81a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7ce:	689b      	ldr	r3, [r3, #8]
 800d7d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d110      	bne.n	800d7fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d7d8:	69bb      	ldr	r3, [r7, #24]
 800d7da:	015a      	lsls	r2, r3, #5
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	4413      	add	r3, r2
 800d7e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	69ba      	ldr	r2, [r7, #24]
 800d7e8:	0151      	lsls	r1, r2, #5
 800d7ea:	69fa      	ldr	r2, [r7, #28]
 800d7ec:	440a      	add	r2, r1
 800d7ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d7f6:	6013      	str	r3, [r2, #0]
 800d7f8:	e00f      	b.n	800d81a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d7fa:	69bb      	ldr	r3, [r7, #24]
 800d7fc:	015a      	lsls	r2, r3, #5
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	4413      	add	r3, r2
 800d802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	69ba      	ldr	r2, [r7, #24]
 800d80a:	0151      	lsls	r1, r2, #5
 800d80c:	69fa      	ldr	r2, [r7, #28]
 800d80e:	440a      	add	r2, r1
 800d810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d818:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	015a      	lsls	r2, r3, #5
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	4413      	add	r3, r2
 800d822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	69ba      	ldr	r2, [r7, #24]
 800d82a:	0151      	lsls	r1, r2, #5
 800d82c:	69fa      	ldr	r2, [r7, #28]
 800d82e:	440a      	add	r2, r1
 800d830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d834:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d838:	6013      	str	r3, [r2, #0]
 800d83a:	e12f      	b.n	800da9c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	015a      	lsls	r2, r3, #5
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	4413      	add	r3, r2
 800d844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	69ba      	ldr	r2, [r7, #24]
 800d84c:	0151      	lsls	r1, r2, #5
 800d84e:	69fa      	ldr	r2, [r7, #28]
 800d850:	440a      	add	r2, r1
 800d852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d856:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d85a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	78db      	ldrb	r3, [r3, #3]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d015      	beq.n	800d890 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	695b      	ldr	r3, [r3, #20]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	f000 8117 	beq.w	800da9c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	f003 030f 	and.w	r3, r3, #15
 800d87e:	2101      	movs	r1, #1
 800d880:	fa01 f303 	lsl.w	r3, r1, r3
 800d884:	69f9      	ldr	r1, [r7, #28]
 800d886:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d88a:	4313      	orrs	r3, r2
 800d88c:	634b      	str	r3, [r1, #52]	; 0x34
 800d88e:	e105      	b.n	800da9c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d896:	689b      	ldr	r3, [r3, #8]
 800d898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d110      	bne.n	800d8c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d8a0:	69bb      	ldr	r3, [r7, #24]
 800d8a2:	015a      	lsls	r2, r3, #5
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	4413      	add	r3, r2
 800d8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	69ba      	ldr	r2, [r7, #24]
 800d8b0:	0151      	lsls	r1, r2, #5
 800d8b2:	69fa      	ldr	r2, [r7, #28]
 800d8b4:	440a      	add	r2, r1
 800d8b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d8be:	6013      	str	r3, [r2, #0]
 800d8c0:	e00f      	b.n	800d8e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	015a      	lsls	r2, r3, #5
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	69ba      	ldr	r2, [r7, #24]
 800d8d2:	0151      	lsls	r1, r2, #5
 800d8d4:	69fa      	ldr	r2, [r7, #28]
 800d8d6:	440a      	add	r2, r1
 800d8d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	68d9      	ldr	r1, [r3, #12]
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	781a      	ldrb	r2, [r3, #0]
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	695b      	ldr	r3, [r3, #20]
 800d8ee:	b298      	uxth	r0, r3
 800d8f0:	79fb      	ldrb	r3, [r7, #7]
 800d8f2:	9300      	str	r3, [sp, #0]
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f000 fa2b 	bl	800dd52 <USB_WritePacket>
 800d8fc:	e0ce      	b.n	800da9c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d8fe:	69bb      	ldr	r3, [r7, #24]
 800d900:	015a      	lsls	r2, r3, #5
 800d902:	69fb      	ldr	r3, [r7, #28]
 800d904:	4413      	add	r3, r2
 800d906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d90a:	691b      	ldr	r3, [r3, #16]
 800d90c:	69ba      	ldr	r2, [r7, #24]
 800d90e:	0151      	lsls	r1, r2, #5
 800d910:	69fa      	ldr	r2, [r7, #28]
 800d912:	440a      	add	r2, r1
 800d914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d918:	0cdb      	lsrs	r3, r3, #19
 800d91a:	04db      	lsls	r3, r3, #19
 800d91c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	015a      	lsls	r2, r3, #5
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	4413      	add	r3, r2
 800d926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d92a:	691b      	ldr	r3, [r3, #16]
 800d92c:	69ba      	ldr	r2, [r7, #24]
 800d92e:	0151      	lsls	r1, r2, #5
 800d930:	69fa      	ldr	r2, [r7, #28]
 800d932:	440a      	add	r2, r1
 800d934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d938:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d93c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d940:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	695b      	ldr	r3, [r3, #20]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d126      	bne.n	800d998 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	015a      	lsls	r2, r3, #5
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	4413      	add	r3, r2
 800d952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d956:	691a      	ldr	r2, [r3, #16]
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	689b      	ldr	r3, [r3, #8]
 800d95c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d960:	69b9      	ldr	r1, [r7, #24]
 800d962:	0148      	lsls	r0, r1, #5
 800d964:	69f9      	ldr	r1, [r7, #28]
 800d966:	4401      	add	r1, r0
 800d968:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d96c:	4313      	orrs	r3, r2
 800d96e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	015a      	lsls	r2, r3, #5
 800d974:	69fb      	ldr	r3, [r7, #28]
 800d976:	4413      	add	r3, r2
 800d978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d97c:	691b      	ldr	r3, [r3, #16]
 800d97e:	69ba      	ldr	r2, [r7, #24]
 800d980:	0151      	lsls	r1, r2, #5
 800d982:	69fa      	ldr	r2, [r7, #28]
 800d984:	440a      	add	r2, r1
 800d986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d98a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d98e:	6113      	str	r3, [r2, #16]
 800d990:	e036      	b.n	800da00 <USB_EPStartXfer+0x3dc>
 800d992:	bf00      	nop
 800d994:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	695a      	ldr	r2, [r3, #20]
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	1e5a      	subs	r2, r3, #1
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d9ae:	69bb      	ldr	r3, [r7, #24]
 800d9b0:	015a      	lsls	r2, r3, #5
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9ba:	691a      	ldr	r2, [r3, #16]
 800d9bc:	8afb      	ldrh	r3, [r7, #22]
 800d9be:	04d9      	lsls	r1, r3, #19
 800d9c0:	4b39      	ldr	r3, [pc, #228]	; (800daa8 <USB_EPStartXfer+0x484>)
 800d9c2:	400b      	ands	r3, r1
 800d9c4:	69b9      	ldr	r1, [r7, #24]
 800d9c6:	0148      	lsls	r0, r1, #5
 800d9c8:	69f9      	ldr	r1, [r7, #28]
 800d9ca:	4401      	add	r1, r0
 800d9cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	015a      	lsls	r2, r3, #5
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	4413      	add	r3, r2
 800d9dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9e0:	691a      	ldr	r2, [r3, #16]
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	8af9      	ldrh	r1, [r7, #22]
 800d9e8:	fb01 f303 	mul.w	r3, r1, r3
 800d9ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d9f0:	69b9      	ldr	r1, [r7, #24]
 800d9f2:	0148      	lsls	r0, r1, #5
 800d9f4:	69f9      	ldr	r1, [r7, #28]
 800d9f6:	4401      	add	r1, r0
 800d9f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800da00:	79fb      	ldrb	r3, [r7, #7]
 800da02:	2b01      	cmp	r3, #1
 800da04:	d10d      	bne.n	800da22 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	68db      	ldr	r3, [r3, #12]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d009      	beq.n	800da22 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	68d9      	ldr	r1, [r3, #12]
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	015a      	lsls	r2, r3, #5
 800da16:	69fb      	ldr	r3, [r7, #28]
 800da18:	4413      	add	r3, r2
 800da1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da1e:	460a      	mov	r2, r1
 800da20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	78db      	ldrb	r3, [r3, #3]
 800da26:	2b01      	cmp	r3, #1
 800da28:	d128      	bne.n	800da7c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da30:	689b      	ldr	r3, [r3, #8]
 800da32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da36:	2b00      	cmp	r3, #0
 800da38:	d110      	bne.n	800da5c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	015a      	lsls	r2, r3, #5
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	4413      	add	r3, r2
 800da42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	69ba      	ldr	r2, [r7, #24]
 800da4a:	0151      	lsls	r1, r2, #5
 800da4c:	69fa      	ldr	r2, [r7, #28]
 800da4e:	440a      	add	r2, r1
 800da50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800da58:	6013      	str	r3, [r2, #0]
 800da5a:	e00f      	b.n	800da7c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800da5c:	69bb      	ldr	r3, [r7, #24]
 800da5e:	015a      	lsls	r2, r3, #5
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	4413      	add	r3, r2
 800da64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	69ba      	ldr	r2, [r7, #24]
 800da6c:	0151      	lsls	r1, r2, #5
 800da6e:	69fa      	ldr	r2, [r7, #28]
 800da70:	440a      	add	r2, r1
 800da72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	015a      	lsls	r2, r3, #5
 800da80:	69fb      	ldr	r3, [r7, #28]
 800da82:	4413      	add	r3, r2
 800da84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	69ba      	ldr	r2, [r7, #24]
 800da8c:	0151      	lsls	r1, r2, #5
 800da8e:	69fa      	ldr	r2, [r7, #28]
 800da90:	440a      	add	r2, r1
 800da92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da9c:	2300      	movs	r3, #0
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3720      	adds	r7, #32
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	1ff80000 	.word	0x1ff80000

0800daac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800daac:	b480      	push	{r7}
 800daae:	b087      	sub	sp, #28
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	4613      	mov	r3, r2
 800dab8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	785b      	ldrb	r3, [r3, #1]
 800dac8:	2b01      	cmp	r3, #1
 800daca:	f040 80cd 	bne.w	800dc68 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	695b      	ldr	r3, [r3, #20]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d132      	bne.n	800db3c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	015a      	lsls	r2, r3, #5
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	4413      	add	r3, r2
 800dade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dae2:	691b      	ldr	r3, [r3, #16]
 800dae4:	693a      	ldr	r2, [r7, #16]
 800dae6:	0151      	lsls	r1, r2, #5
 800dae8:	697a      	ldr	r2, [r7, #20]
 800daea:	440a      	add	r2, r1
 800daec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800daf0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800daf4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800daf8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	015a      	lsls	r2, r3, #5
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	4413      	add	r3, r2
 800db02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db06:	691b      	ldr	r3, [r3, #16]
 800db08:	693a      	ldr	r2, [r7, #16]
 800db0a:	0151      	lsls	r1, r2, #5
 800db0c:	697a      	ldr	r2, [r7, #20]
 800db0e:	440a      	add	r2, r1
 800db10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	015a      	lsls	r2, r3, #5
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	4413      	add	r3, r2
 800db22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db26:	691b      	ldr	r3, [r3, #16]
 800db28:	693a      	ldr	r2, [r7, #16]
 800db2a:	0151      	lsls	r1, r2, #5
 800db2c:	697a      	ldr	r2, [r7, #20]
 800db2e:	440a      	add	r2, r1
 800db30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db34:	0cdb      	lsrs	r3, r3, #19
 800db36:	04db      	lsls	r3, r3, #19
 800db38:	6113      	str	r3, [r2, #16]
 800db3a:	e04e      	b.n	800dbda <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	015a      	lsls	r2, r3, #5
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	4413      	add	r3, r2
 800db44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db48:	691b      	ldr	r3, [r3, #16]
 800db4a:	693a      	ldr	r2, [r7, #16]
 800db4c:	0151      	lsls	r1, r2, #5
 800db4e:	697a      	ldr	r2, [r7, #20]
 800db50:	440a      	add	r2, r1
 800db52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db56:	0cdb      	lsrs	r3, r3, #19
 800db58:	04db      	lsls	r3, r3, #19
 800db5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	015a      	lsls	r2, r3, #5
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	4413      	add	r3, r2
 800db64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	693a      	ldr	r2, [r7, #16]
 800db6c:	0151      	lsls	r1, r2, #5
 800db6e:	697a      	ldr	r2, [r7, #20]
 800db70:	440a      	add	r2, r1
 800db72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800db7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800db7e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	695a      	ldr	r2, [r3, #20]
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d903      	bls.n	800db94 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	689a      	ldr	r2, [r3, #8]
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	015a      	lsls	r2, r3, #5
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	4413      	add	r3, r2
 800db9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dba0:	691b      	ldr	r3, [r3, #16]
 800dba2:	693a      	ldr	r2, [r7, #16]
 800dba4:	0151      	lsls	r1, r2, #5
 800dba6:	697a      	ldr	r2, [r7, #20]
 800dba8:	440a      	add	r2, r1
 800dbaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dbb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	015a      	lsls	r2, r3, #5
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	4413      	add	r3, r2
 800dbbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbc0:	691a      	ldr	r2, [r3, #16]
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	695b      	ldr	r3, [r3, #20]
 800dbc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dbca:	6939      	ldr	r1, [r7, #16]
 800dbcc:	0148      	lsls	r0, r1, #5
 800dbce:	6979      	ldr	r1, [r7, #20]
 800dbd0:	4401      	add	r1, r0
 800dbd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dbda:	79fb      	ldrb	r3, [r7, #7]
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d11e      	bne.n	800dc1e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	691b      	ldr	r3, [r3, #16]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d009      	beq.n	800dbfc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	015a      	lsls	r2, r3, #5
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	4413      	add	r3, r2
 800dbf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	691b      	ldr	r3, [r3, #16]
 800dbfa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	015a      	lsls	r2, r3, #5
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	4413      	add	r3, r2
 800dc04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	693a      	ldr	r2, [r7, #16]
 800dc0c:	0151      	lsls	r1, r2, #5
 800dc0e:	697a      	ldr	r2, [r7, #20]
 800dc10:	440a      	add	r2, r1
 800dc12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dc1a:	6013      	str	r3, [r2, #0]
 800dc1c:	e092      	b.n	800dd44 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	015a      	lsls	r2, r3, #5
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	4413      	add	r3, r2
 800dc26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	693a      	ldr	r2, [r7, #16]
 800dc2e:	0151      	lsls	r1, r2, #5
 800dc30:	697a      	ldr	r2, [r7, #20]
 800dc32:	440a      	add	r2, r1
 800dc34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dc3c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	695b      	ldr	r3, [r3, #20]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d07e      	beq.n	800dd44 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	f003 030f 	and.w	r3, r3, #15
 800dc56:	2101      	movs	r1, #1
 800dc58:	fa01 f303 	lsl.w	r3, r1, r3
 800dc5c:	6979      	ldr	r1, [r7, #20]
 800dc5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc62:	4313      	orrs	r3, r2
 800dc64:	634b      	str	r3, [r1, #52]	; 0x34
 800dc66:	e06d      	b.n	800dd44 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	015a      	lsls	r2, r3, #5
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	4413      	add	r3, r2
 800dc70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc74:	691b      	ldr	r3, [r3, #16]
 800dc76:	693a      	ldr	r2, [r7, #16]
 800dc78:	0151      	lsls	r1, r2, #5
 800dc7a:	697a      	ldr	r2, [r7, #20]
 800dc7c:	440a      	add	r2, r1
 800dc7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc82:	0cdb      	lsrs	r3, r3, #19
 800dc84:	04db      	lsls	r3, r3, #19
 800dc86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	015a      	lsls	r2, r3, #5
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	4413      	add	r3, r2
 800dc90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc94:	691b      	ldr	r3, [r3, #16]
 800dc96:	693a      	ldr	r2, [r7, #16]
 800dc98:	0151      	lsls	r1, r2, #5
 800dc9a:	697a      	ldr	r2, [r7, #20]
 800dc9c:	440a      	add	r2, r1
 800dc9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dca2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dca6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dcaa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	695b      	ldr	r3, [r3, #20]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d003      	beq.n	800dcbc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	689a      	ldr	r2, [r3, #8]
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	015a      	lsls	r2, r3, #5
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	4413      	add	r3, r2
 800dcc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcc8:	691b      	ldr	r3, [r3, #16]
 800dcca:	693a      	ldr	r2, [r7, #16]
 800dccc:	0151      	lsls	r1, r2, #5
 800dcce:	697a      	ldr	r2, [r7, #20]
 800dcd0:	440a      	add	r2, r1
 800dcd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dcda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	015a      	lsls	r2, r3, #5
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	4413      	add	r3, r2
 800dce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dce8:	691a      	ldr	r2, [r3, #16]
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	689b      	ldr	r3, [r3, #8]
 800dcee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dcf2:	6939      	ldr	r1, [r7, #16]
 800dcf4:	0148      	lsls	r0, r1, #5
 800dcf6:	6979      	ldr	r1, [r7, #20]
 800dcf8:	4401      	add	r1, r0
 800dcfa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800dd02:	79fb      	ldrb	r3, [r7, #7]
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d10d      	bne.n	800dd24 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d009      	beq.n	800dd24 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	68d9      	ldr	r1, [r3, #12]
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	015a      	lsls	r2, r3, #5
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	4413      	add	r3, r2
 800dd1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd20:	460a      	mov	r2, r1
 800dd22:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	015a      	lsls	r2, r3, #5
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	4413      	add	r3, r2
 800dd2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	693a      	ldr	r2, [r7, #16]
 800dd34:	0151      	lsls	r1, r2, #5
 800dd36:	697a      	ldr	r2, [r7, #20]
 800dd38:	440a      	add	r2, r1
 800dd3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dd42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dd44:	2300      	movs	r3, #0
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	371c      	adds	r7, #28
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd50:	4770      	bx	lr

0800dd52 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800dd52:	b480      	push	{r7}
 800dd54:	b089      	sub	sp, #36	; 0x24
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	60f8      	str	r0, [r7, #12]
 800dd5a:	60b9      	str	r1, [r7, #8]
 800dd5c:	4611      	mov	r1, r2
 800dd5e:	461a      	mov	r2, r3
 800dd60:	460b      	mov	r3, r1
 800dd62:	71fb      	strb	r3, [r7, #7]
 800dd64:	4613      	mov	r3, r2
 800dd66:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800dd70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d11a      	bne.n	800ddae <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800dd78:	88bb      	ldrh	r3, [r7, #4]
 800dd7a:	3303      	adds	r3, #3
 800dd7c:	089b      	lsrs	r3, r3, #2
 800dd7e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800dd80:	2300      	movs	r3, #0
 800dd82:	61bb      	str	r3, [r7, #24]
 800dd84:	e00f      	b.n	800dda6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dd86:	79fb      	ldrb	r3, [r7, #7]
 800dd88:	031a      	lsls	r2, r3, #12
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd92:	461a      	mov	r2, r3
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	6013      	str	r3, [r2, #0]
      pSrc++;
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	3304      	adds	r3, #4
 800dd9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	3301      	adds	r3, #1
 800dda4:	61bb      	str	r3, [r7, #24]
 800dda6:	69ba      	ldr	r2, [r7, #24]
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d3eb      	bcc.n	800dd86 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ddae:	2300      	movs	r3, #0
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3724      	adds	r7, #36	; 0x24
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b089      	sub	sp, #36	; 0x24
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	60b9      	str	r1, [r7, #8]
 800ddc6:	4613      	mov	r3, r2
 800ddc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ddd2:	88fb      	ldrh	r3, [r7, #6]
 800ddd4:	3303      	adds	r3, #3
 800ddd6:	089b      	lsrs	r3, r3, #2
 800ddd8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ddda:	2300      	movs	r3, #0
 800dddc:	61bb      	str	r3, [r7, #24]
 800ddde:	e00b      	b.n	800ddf8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dde6:	681a      	ldr	r2, [r3, #0]
 800dde8:	69fb      	ldr	r3, [r7, #28]
 800ddea:	601a      	str	r2, [r3, #0]
    pDest++;
 800ddec:	69fb      	ldr	r3, [r7, #28]
 800ddee:	3304      	adds	r3, #4
 800ddf0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	61bb      	str	r3, [r7, #24]
 800ddf8:	69ba      	ldr	r2, [r7, #24]
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d3ef      	bcc.n	800dde0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800de00:	69fb      	ldr	r3, [r7, #28]
}
 800de02:	4618      	mov	r0, r3
 800de04:	3724      	adds	r7, #36	; 0x24
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr

0800de0e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800de0e:	b480      	push	{r7}
 800de10:	b085      	sub	sp, #20
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
 800de16:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	785b      	ldrb	r3, [r3, #1]
 800de26:	2b01      	cmp	r3, #1
 800de28:	d12c      	bne.n	800de84 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	015a      	lsls	r2, r3, #5
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	4413      	add	r3, r2
 800de32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	db12      	blt.n	800de62 <USB_EPSetStall+0x54>
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d00f      	beq.n	800de62 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	015a      	lsls	r2, r3, #5
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	4413      	add	r3, r2
 800de4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	0151      	lsls	r1, r2, #5
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	440a      	add	r2, r1
 800de58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800de60:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	015a      	lsls	r2, r3, #5
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	4413      	add	r3, r2
 800de6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	68ba      	ldr	r2, [r7, #8]
 800de72:	0151      	lsls	r1, r2, #5
 800de74:	68fa      	ldr	r2, [r7, #12]
 800de76:	440a      	add	r2, r1
 800de78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800de80:	6013      	str	r3, [r2, #0]
 800de82:	e02b      	b.n	800dedc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	015a      	lsls	r2, r3, #5
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	4413      	add	r3, r2
 800de8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	db12      	blt.n	800debc <USB_EPSetStall+0xae>
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d00f      	beq.n	800debc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	015a      	lsls	r2, r3, #5
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	4413      	add	r3, r2
 800dea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	68ba      	ldr	r2, [r7, #8]
 800deac:	0151      	lsls	r1, r2, #5
 800deae:	68fa      	ldr	r2, [r7, #12]
 800deb0:	440a      	add	r2, r1
 800deb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800deb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800deba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	015a      	lsls	r2, r3, #5
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	4413      	add	r3, r2
 800dec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	68ba      	ldr	r2, [r7, #8]
 800decc:	0151      	lsls	r1, r2, #5
 800dece:	68fa      	ldr	r2, [r7, #12]
 800ded0:	440a      	add	r2, r1
 800ded2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ded6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800deda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dedc:	2300      	movs	r3, #0
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3714      	adds	r7, #20
 800dee2:	46bd      	mov	sp, r7
 800dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee8:	4770      	bx	lr

0800deea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800deea:	b480      	push	{r7}
 800deec:	b085      	sub	sp, #20
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
 800def2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	785b      	ldrb	r3, [r3, #1]
 800df02:	2b01      	cmp	r3, #1
 800df04:	d128      	bne.n	800df58 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	015a      	lsls	r2, r3, #5
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	4413      	add	r3, r2
 800df0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	68ba      	ldr	r2, [r7, #8]
 800df16:	0151      	lsls	r1, r2, #5
 800df18:	68fa      	ldr	r2, [r7, #12]
 800df1a:	440a      	add	r2, r1
 800df1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800df24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	78db      	ldrb	r3, [r3, #3]
 800df2a:	2b03      	cmp	r3, #3
 800df2c:	d003      	beq.n	800df36 <USB_EPClearStall+0x4c>
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	78db      	ldrb	r3, [r3, #3]
 800df32:	2b02      	cmp	r3, #2
 800df34:	d138      	bne.n	800dfa8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	015a      	lsls	r2, r3, #5
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	4413      	add	r3, r2
 800df3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68ba      	ldr	r2, [r7, #8]
 800df46:	0151      	lsls	r1, r2, #5
 800df48:	68fa      	ldr	r2, [r7, #12]
 800df4a:	440a      	add	r2, r1
 800df4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df54:	6013      	str	r3, [r2, #0]
 800df56:	e027      	b.n	800dfa8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	015a      	lsls	r2, r3, #5
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	4413      	add	r3, r2
 800df60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	68ba      	ldr	r2, [r7, #8]
 800df68:	0151      	lsls	r1, r2, #5
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	440a      	add	r2, r1
 800df6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800df76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	78db      	ldrb	r3, [r3, #3]
 800df7c:	2b03      	cmp	r3, #3
 800df7e:	d003      	beq.n	800df88 <USB_EPClearStall+0x9e>
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	78db      	ldrb	r3, [r3, #3]
 800df84:	2b02      	cmp	r3, #2
 800df86:	d10f      	bne.n	800dfa8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	015a      	lsls	r2, r3, #5
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	4413      	add	r3, r2
 800df90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	68ba      	ldr	r2, [r7, #8]
 800df98:	0151      	lsls	r1, r2, #5
 800df9a:	68fa      	ldr	r2, [r7, #12]
 800df9c:	440a      	add	r2, r1
 800df9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dfa6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dfa8:	2300      	movs	r3, #0
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3714      	adds	r7, #20
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr

0800dfb6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800dfb6:	b480      	push	{r7}
 800dfb8:	b085      	sub	sp, #20
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	68fa      	ldr	r2, [r7, #12]
 800dfd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dfd4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800dfd8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfe0:	681a      	ldr	r2, [r3, #0]
 800dfe2:	78fb      	ldrb	r3, [r7, #3]
 800dfe4:	011b      	lsls	r3, r3, #4
 800dfe6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800dfea:	68f9      	ldr	r1, [r7, #12]
 800dfec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dff0:	4313      	orrs	r3, r2
 800dff2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800dff4:	2300      	movs	r3, #0
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3714      	adds	r7, #20
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr

0800e002 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b084      	sub	sp, #16
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	68fa      	ldr	r2, [r7, #12]
 800e018:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e01c:	f023 0302 	bic.w	r3, r3, #2
 800e020:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e022:	2003      	movs	r0, #3
 800e024:	f7f7 f852 	bl	80050cc <HAL_Delay>

  return HAL_OK;
 800e028:	2300      	movs	r3, #0
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3710      	adds	r7, #16
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}

0800e032 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e032:	b580      	push	{r7, lr}
 800e034:	b084      	sub	sp, #16
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	68fa      	ldr	r2, [r7, #12]
 800e048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e04c:	f043 0302 	orr.w	r3, r3, #2
 800e050:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e052:	2003      	movs	r0, #3
 800e054:	f7f7 f83a 	bl	80050cc <HAL_Delay>

  return HAL_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e062:	b480      	push	{r7}
 800e064:	b085      	sub	sp, #20
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	695b      	ldr	r3, [r3, #20]
 800e06e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	699b      	ldr	r3, [r3, #24]
 800e074:	68fa      	ldr	r2, [r7, #12]
 800e076:	4013      	ands	r3, r2
 800e078:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e07a:	68fb      	ldr	r3, [r7, #12]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3714      	adds	r7, #20
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e088:	b480      	push	{r7}
 800e08a:	b085      	sub	sp, #20
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e09a:	699b      	ldr	r3, [r3, #24]
 800e09c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0a4:	69db      	ldr	r3, [r3, #28]
 800e0a6:	68ba      	ldr	r2, [r7, #8]
 800e0a8:	4013      	ands	r3, r2
 800e0aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	0c1b      	lsrs	r3, r3, #16
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3714      	adds	r7, #20
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr

0800e0bc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b085      	sub	sp, #20
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0ce:	699b      	ldr	r3, [r3, #24]
 800e0d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0d8:	69db      	ldr	r3, [r3, #28]
 800e0da:	68ba      	ldr	r2, [r7, #8]
 800e0dc:	4013      	ands	r3, r2
 800e0de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	b29b      	uxth	r3, r3
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3714      	adds	r7, #20
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr

0800e0f0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b085      	sub	sp, #20
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	460b      	mov	r3, r1
 800e0fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e100:	78fb      	ldrb	r3, [r7, #3]
 800e102:	015a      	lsls	r2, r3, #5
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	4413      	add	r3, r2
 800e108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e10c:	689b      	ldr	r3, [r3, #8]
 800e10e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e116:	695b      	ldr	r3, [r3, #20]
 800e118:	68ba      	ldr	r2, [r7, #8]
 800e11a:	4013      	ands	r3, r2
 800e11c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e11e:	68bb      	ldr	r3, [r7, #8]
}
 800e120:	4618      	mov	r0, r3
 800e122:	3714      	adds	r7, #20
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr

0800e12c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b087      	sub	sp, #28
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	460b      	mov	r3, r1
 800e136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e142:	691b      	ldr	r3, [r3, #16]
 800e144:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e14e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e150:	78fb      	ldrb	r3, [r7, #3]
 800e152:	f003 030f 	and.w	r3, r3, #15
 800e156:	68fa      	ldr	r2, [r7, #12]
 800e158:	fa22 f303 	lsr.w	r3, r2, r3
 800e15c:	01db      	lsls	r3, r3, #7
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	693a      	ldr	r2, [r7, #16]
 800e162:	4313      	orrs	r3, r2
 800e164:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e166:	78fb      	ldrb	r3, [r7, #3]
 800e168:	015a      	lsls	r2, r3, #5
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	4413      	add	r3, r2
 800e16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e172:	689b      	ldr	r3, [r3, #8]
 800e174:	693a      	ldr	r2, [r7, #16]
 800e176:	4013      	ands	r3, r2
 800e178:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e17a:	68bb      	ldr	r3, [r7, #8]
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	371c      	adds	r7, #28
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	695b      	ldr	r3, [r3, #20]
 800e194:	f003 0301 	and.w	r3, r3, #1
}
 800e198:	4618      	mov	r0, r3
 800e19a:	370c      	adds	r7, #12
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr

0800e1a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e1c2:	f023 0307 	bic.w	r3, r3, #7
 800e1c6:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1ce:	689b      	ldr	r3, [r3, #8]
 800e1d0:	f003 0306 	and.w	r3, r3, #6
 800e1d4:	2b04      	cmp	r3, #4
 800e1d6:	d109      	bne.n	800e1ec <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1e6:	f043 0303 	orr.w	r3, r3, #3
 800e1ea:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	68fa      	ldr	r2, [r7, #12]
 800e1f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e1fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e1fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e200:	2300      	movs	r3, #0
}
 800e202:	4618      	mov	r0, r3
 800e204:	3714      	adds	r7, #20
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr
	...

0800e210 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e210:	b480      	push	{r7}
 800e212:	b087      	sub	sp, #28
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	460b      	mov	r3, r1
 800e21a:	607a      	str	r2, [r7, #4]
 800e21c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	333c      	adds	r3, #60	; 0x3c
 800e226:	3304      	adds	r3, #4
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	4a26      	ldr	r2, [pc, #152]	; (800e2c8 <USB_EP0_OutStart+0xb8>)
 800e230:	4293      	cmp	r3, r2
 800e232:	d90a      	bls.n	800e24a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e240:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e244:	d101      	bne.n	800e24a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e246:	2300      	movs	r3, #0
 800e248:	e037      	b.n	800e2ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e250:	461a      	mov	r2, r3
 800e252:	2300      	movs	r3, #0
 800e254:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e25c:	691b      	ldr	r3, [r3, #16]
 800e25e:	697a      	ldr	r2, [r7, #20]
 800e260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e268:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e270:	691b      	ldr	r3, [r3, #16]
 800e272:	697a      	ldr	r2, [r7, #20]
 800e274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e278:	f043 0318 	orr.w	r3, r3, #24
 800e27c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e284:	691b      	ldr	r3, [r3, #16]
 800e286:	697a      	ldr	r2, [r7, #20]
 800e288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e28c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e290:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e292:	7afb      	ldrb	r3, [r7, #11]
 800e294:	2b01      	cmp	r3, #1
 800e296:	d10f      	bne.n	800e2b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e29e:	461a      	mov	r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	697a      	ldr	r2, [r7, #20]
 800e2ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e2b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e2b8:	2300      	movs	r3, #0
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	371c      	adds	r7, #28
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop
 800e2c8:	4f54300a 	.word	0x4f54300a

0800e2cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b085      	sub	sp, #20
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	3301      	adds	r3, #1
 800e2dc:	60fb      	str	r3, [r7, #12]
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	4a13      	ldr	r2, [pc, #76]	; (800e330 <USB_CoreReset+0x64>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d901      	bls.n	800e2ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e2e6:	2303      	movs	r3, #3
 800e2e8:	e01b      	b.n	800e322 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	691b      	ldr	r3, [r3, #16]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	daf2      	bge.n	800e2d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	691b      	ldr	r3, [r3, #16]
 800e2fa:	f043 0201 	orr.w	r2, r3, #1
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	3301      	adds	r3, #1
 800e306:	60fb      	str	r3, [r7, #12]
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	4a09      	ldr	r2, [pc, #36]	; (800e330 <USB_CoreReset+0x64>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d901      	bls.n	800e314 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e310:	2303      	movs	r3, #3
 800e312:	e006      	b.n	800e322 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	691b      	ldr	r3, [r3, #16]
 800e318:	f003 0301 	and.w	r3, r3, #1
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d0f0      	beq.n	800e302 <USB_CoreReset+0x36>

  return HAL_OK;
 800e320:	2300      	movs	r3, #0
}
 800e322:	4618      	mov	r0, r3
 800e324:	3714      	adds	r7, #20
 800e326:	46bd      	mov	sp, r7
 800e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32c:	4770      	bx	lr
 800e32e:	bf00      	nop
 800e330:	00030d40 	.word	0x00030d40

0800e334 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	460b      	mov	r3, r1
 800e33e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800e340:	2300      	movs	r3, #0
 800e342:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	7c1b      	ldrb	r3, [r3, #16]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d115      	bne.n	800e378 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e34c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e350:	2202      	movs	r2, #2
 800e352:	2181      	movs	r1, #129	; 0x81
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f007 f8be 	bl	80154d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2201      	movs	r2, #1
 800e35e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e360:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e364:	2202      	movs	r2, #2
 800e366:	2101      	movs	r1, #1
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f007 f8b4 	bl	80154d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2201      	movs	r2, #1
 800e372:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800e376:	e012      	b.n	800e39e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e378:	2340      	movs	r3, #64	; 0x40
 800e37a:	2202      	movs	r2, #2
 800e37c:	2181      	movs	r1, #129	; 0x81
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f007 f8a9 	bl	80154d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2201      	movs	r2, #1
 800e388:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e38a:	2340      	movs	r3, #64	; 0x40
 800e38c:	2202      	movs	r2, #2
 800e38e:	2101      	movs	r1, #1
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f007 f8a0 	bl	80154d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2201      	movs	r2, #1
 800e39a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e39e:	2308      	movs	r3, #8
 800e3a0:	2203      	movs	r2, #3
 800e3a2:	2182      	movs	r1, #130	; 0x82
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f007 f896 	bl	80154d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800e3b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e3b4:	f007 fb4e 	bl	8015a54 <malloc>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d102      	bne.n	800e3d2 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	73fb      	strb	r3, [r7, #15]
 800e3d0:	e026      	b.n	800e420 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e3d8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	7c1b      	ldrb	r3, [r3, #16]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d109      	bne.n	800e410 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e402:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e406:	2101      	movs	r1, #1
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f007 f955 	bl	80156b8 <USBD_LL_PrepareReceive>
 800e40e:	e007      	b.n	800e420 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e416:	2340      	movs	r3, #64	; 0x40
 800e418:	2101      	movs	r1, #1
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f007 f94c 	bl	80156b8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800e420:	7bfb      	ldrb	r3, [r7, #15]
}
 800e422:	4618      	mov	r0, r3
 800e424:	3710      	adds	r7, #16
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}

0800e42a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e42a:	b580      	push	{r7, lr}
 800e42c:	b084      	sub	sp, #16
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
 800e432:	460b      	mov	r3, r1
 800e434:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800e436:	2300      	movs	r3, #0
 800e438:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e43a:	2181      	movs	r1, #129	; 0x81
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f007 f870 	bl	8015522 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2200      	movs	r2, #0
 800e446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e448:	2101      	movs	r1, #1
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f007 f869 	bl	8015522 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2200      	movs	r2, #0
 800e454:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e458:	2182      	movs	r1, #130	; 0x82
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f007 f861 	bl	8015522 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d00e      	beq.n	800e48e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e476:	685b      	ldr	r3, [r3, #4]
 800e478:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e480:	4618      	mov	r0, r3
 800e482:	f007 faef 	bl	8015a64 <free>
    pdev->pClassData = NULL;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2200      	movs	r2, #0
 800e48a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800e48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3710      	adds	r7, #16
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b086      	sub	sp, #24
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e4a8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d039      	beq.n	800e536 <USBD_CDC_Setup+0x9e>
 800e4c2:	2b20      	cmp	r3, #32
 800e4c4:	d17c      	bne.n	800e5c0 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	88db      	ldrh	r3, [r3, #6]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d029      	beq.n	800e522 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	b25b      	sxtb	r3, r3
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	da11      	bge.n	800e4fc <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e4de:	689b      	ldr	r3, [r3, #8]
 800e4e0:	683a      	ldr	r2, [r7, #0]
 800e4e2:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800e4e4:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e4e6:	683a      	ldr	r2, [r7, #0]
 800e4e8:	88d2      	ldrh	r2, [r2, #6]
 800e4ea:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800e4ec:	6939      	ldr	r1, [r7, #16]
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	88db      	ldrh	r3, [r3, #6]
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f001 f9c9 	bl	800f88c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800e4fa:	e068      	b.n	800e5ce <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	785a      	ldrb	r2, [r3, #1]
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	88db      	ldrh	r3, [r3, #6]
 800e50a:	b2da      	uxtb	r2, r3
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800e512:	6939      	ldr	r1, [r7, #16]
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	88db      	ldrh	r3, [r3, #6]
 800e518:	461a      	mov	r2, r3
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f001 f9e4 	bl	800f8e8 <USBD_CtlPrepareRx>
    break;
 800e520:	e055      	b.n	800e5ce <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e528:	689b      	ldr	r3, [r3, #8]
 800e52a:	683a      	ldr	r2, [r7, #0]
 800e52c:	7850      	ldrb	r0, [r2, #1]
 800e52e:	2200      	movs	r2, #0
 800e530:	6839      	ldr	r1, [r7, #0]
 800e532:	4798      	blx	r3
    break;
 800e534:	e04b      	b.n	800e5ce <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	785b      	ldrb	r3, [r3, #1]
 800e53a:	2b0a      	cmp	r3, #10
 800e53c:	d017      	beq.n	800e56e <USBD_CDC_Setup+0xd6>
 800e53e:	2b0b      	cmp	r3, #11
 800e540:	d029      	beq.n	800e596 <USBD_CDC_Setup+0xfe>
 800e542:	2b00      	cmp	r3, #0
 800e544:	d133      	bne.n	800e5ae <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e54c:	2b03      	cmp	r3, #3
 800e54e:	d107      	bne.n	800e560 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800e550:	f107 030c 	add.w	r3, r7, #12
 800e554:	2202      	movs	r2, #2
 800e556:	4619      	mov	r1, r3
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f001 f997 	bl	800f88c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800e55e:	e02e      	b.n	800e5be <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800e560:	6839      	ldr	r1, [r7, #0]
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f001 f927 	bl	800f7b6 <USBD_CtlError>
			  ret = USBD_FAIL;
 800e568:	2302      	movs	r3, #2
 800e56a:	75fb      	strb	r3, [r7, #23]
      break;
 800e56c:	e027      	b.n	800e5be <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e574:	2b03      	cmp	r3, #3
 800e576:	d107      	bne.n	800e588 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800e578:	f107 030f 	add.w	r3, r7, #15
 800e57c:	2201      	movs	r2, #1
 800e57e:	4619      	mov	r1, r3
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f001 f983 	bl	800f88c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800e586:	e01a      	b.n	800e5be <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800e588:	6839      	ldr	r1, [r7, #0]
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f001 f913 	bl	800f7b6 <USBD_CtlError>
			  ret = USBD_FAIL;
 800e590:	2302      	movs	r3, #2
 800e592:	75fb      	strb	r3, [r7, #23]
      break;
 800e594:	e013      	b.n	800e5be <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800e59c:	2b03      	cmp	r3, #3
 800e59e:	d00d      	beq.n	800e5bc <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800e5a0:	6839      	ldr	r1, [r7, #0]
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f001 f907 	bl	800f7b6 <USBD_CtlError>
			  ret = USBD_FAIL;
 800e5a8:	2302      	movs	r3, #2
 800e5aa:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800e5ac:	e006      	b.n	800e5bc <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800e5ae:	6839      	ldr	r1, [r7, #0]
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f001 f900 	bl	800f7b6 <USBD_CtlError>
      ret = USBD_FAIL;
 800e5b6:	2302      	movs	r3, #2
 800e5b8:	75fb      	strb	r3, [r7, #23]
      break;
 800e5ba:	e000      	b.n	800e5be <USBD_CDC_Setup+0x126>
      break;
 800e5bc:	bf00      	nop
    }
    break;
 800e5be:	e006      	b.n	800e5ce <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800e5c0:	6839      	ldr	r1, [r7, #0]
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f001 f8f7 	bl	800f7b6 <USBD_CtlError>
    ret = USBD_FAIL;
 800e5c8:	2302      	movs	r3, #2
 800e5ca:	75fb      	strb	r3, [r7, #23]
    break;
 800e5cc:	bf00      	nop
  }

  return ret;
 800e5ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3718      	adds	r7, #24
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b084      	sub	sp, #16
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	460b      	mov	r3, r1
 800e5e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e5ea:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e5f2:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d03a      	beq.n	800e674 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e5fe:	78fa      	ldrb	r2, [r7, #3]
 800e600:	6879      	ldr	r1, [r7, #4]
 800e602:	4613      	mov	r3, r2
 800e604:	009b      	lsls	r3, r3, #2
 800e606:	4413      	add	r3, r2
 800e608:	009b      	lsls	r3, r3, #2
 800e60a:	440b      	add	r3, r1
 800e60c:	331c      	adds	r3, #28
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d029      	beq.n	800e668 <USBD_CDC_DataIn+0x90>
 800e614:	78fa      	ldrb	r2, [r7, #3]
 800e616:	6879      	ldr	r1, [r7, #4]
 800e618:	4613      	mov	r3, r2
 800e61a:	009b      	lsls	r3, r3, #2
 800e61c:	4413      	add	r3, r2
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	440b      	add	r3, r1
 800e622:	331c      	adds	r3, #28
 800e624:	681a      	ldr	r2, [r3, #0]
 800e626:	78f9      	ldrb	r1, [r7, #3]
 800e628:	68b8      	ldr	r0, [r7, #8]
 800e62a:	460b      	mov	r3, r1
 800e62c:	00db      	lsls	r3, r3, #3
 800e62e:	1a5b      	subs	r3, r3, r1
 800e630:	009b      	lsls	r3, r3, #2
 800e632:	4403      	add	r3, r0
 800e634:	3344      	adds	r3, #68	; 0x44
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	fbb2 f1f3 	udiv	r1, r2, r3
 800e63c:	fb03 f301 	mul.w	r3, r3, r1
 800e640:	1ad3      	subs	r3, r2, r3
 800e642:	2b00      	cmp	r3, #0
 800e644:	d110      	bne.n	800e668 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800e646:	78fa      	ldrb	r2, [r7, #3]
 800e648:	6879      	ldr	r1, [r7, #4]
 800e64a:	4613      	mov	r3, r2
 800e64c:	009b      	lsls	r3, r3, #2
 800e64e:	4413      	add	r3, r2
 800e650:	009b      	lsls	r3, r3, #2
 800e652:	440b      	add	r3, r1
 800e654:	331c      	adds	r3, #28
 800e656:	2200      	movs	r2, #0
 800e658:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800e65a:	78f9      	ldrb	r1, [r7, #3]
 800e65c:	2300      	movs	r3, #0
 800e65e:	2200      	movs	r2, #0
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f007 f806 	bl	8015672 <USBD_LL_Transmit>
 800e666:	e003      	b.n	800e670 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2200      	movs	r2, #0
 800e66c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800e670:	2300      	movs	r3, #0
 800e672:	e000      	b.n	800e676 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800e674:	2302      	movs	r3, #2
  }
}
 800e676:	4618      	mov	r0, r3
 800e678:	3710      	adds	r7, #16
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}

0800e67e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e67e:	b580      	push	{r7, lr}
 800e680:	b084      	sub	sp, #16
 800e682:	af00      	add	r7, sp, #0
 800e684:	6078      	str	r0, [r7, #4]
 800e686:	460b      	mov	r3, r1
 800e688:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e690:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800e692:	78fb      	ldrb	r3, [r7, #3]
 800e694:	4619      	mov	r1, r3
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f007 f831 	bl	80156fe <USBD_LL_GetRxDataSize>
 800e69c:	4602      	mov	r2, r0
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d00d      	beq.n	800e6ca <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	68fa      	ldr	r2, [r7, #12]
 800e6b8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e6bc:	68fa      	ldr	r2, [r7, #12]
 800e6be:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e6c2:	4611      	mov	r1, r2
 800e6c4:	4798      	blx	r3

    return USBD_OK;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	e000      	b.n	800e6cc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800e6ca:	2302      	movs	r3, #2
  }
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3710      	adds	r7, #16
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e6e2:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d015      	beq.n	800e71a <USBD_CDC_EP0_RxReady+0x46>
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e6f4:	2bff      	cmp	r3, #255	; 0xff
 800e6f6:	d010      	beq.n	800e71a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e6fe:	689b      	ldr	r3, [r3, #8]
 800e700:	68fa      	ldr	r2, [r7, #12]
 800e702:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800e706:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e708:	68fa      	ldr	r2, [r7, #12]
 800e70a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e70e:	b292      	uxth	r2, r2
 800e710:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	22ff      	movs	r2, #255	; 0xff
 800e716:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800e71a:	2300      	movs	r3, #0
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3710      	adds	r7, #16
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2243      	movs	r2, #67	; 0x43
 800e730:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800e732:	4b03      	ldr	r3, [pc, #12]	; (800e740 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e734:	4618      	mov	r0, r3
 800e736:	370c      	adds	r7, #12
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr
 800e740:	20000094 	.word	0x20000094

0800e744 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2243      	movs	r2, #67	; 0x43
 800e750:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800e752:	4b03      	ldr	r3, [pc, #12]	; (800e760 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e754:	4618      	mov	r0, r3
 800e756:	370c      	adds	r7, #12
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr
 800e760:	20000050 	.word	0x20000050

0800e764 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800e764:	b480      	push	{r7}
 800e766:	b083      	sub	sp, #12
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2243      	movs	r2, #67	; 0x43
 800e770:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800e772:	4b03      	ldr	r3, [pc, #12]	; (800e780 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e774:	4618      	mov	r0, r3
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr
 800e780:	200000d8 	.word	0x200000d8

0800e784 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	220a      	movs	r2, #10
 800e790:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800e792:	4b03      	ldr	r3, [pc, #12]	; (800e7a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e794:	4618      	mov	r0, r3
 800e796:	370c      	adds	r7, #12
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr
 800e7a0:	2000000c 	.word	0x2000000c

0800e7a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b085      	sub	sp, #20
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800e7ae:	2302      	movs	r3, #2
 800e7b0:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d005      	beq.n	800e7c4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	683a      	ldr	r2, [r7, #0]
 800e7bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3714      	adds	r7, #20
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr

0800e7d2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800e7d2:	b480      	push	{r7}
 800e7d4:	b087      	sub	sp, #28
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	60f8      	str	r0, [r7, #12]
 800e7da:	60b9      	str	r1, [r7, #8]
 800e7dc:	4613      	mov	r3, r2
 800e7de:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e7e6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	68ba      	ldr	r2, [r7, #8]
 800e7ec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e7f0:	88fa      	ldrh	r2, [r7, #6]
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800e7f8:	2300      	movs	r3, #0
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	371c      	adds	r7, #28
 800e7fe:	46bd      	mov	sp, r7
 800e800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e804:	4770      	bx	lr

0800e806 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800e806:	b480      	push	{r7}
 800e808:	b085      	sub	sp, #20
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]
 800e80e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e816:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	683a      	ldr	r2, [r7, #0]
 800e81c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800e820:	2300      	movs	r3, #0
}
 800e822:	4618      	mov	r0, r3
 800e824:	3714      	adds	r7, #20
 800e826:	46bd      	mov	sp, r7
 800e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82c:	4770      	bx	lr

0800e82e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e82e:	b580      	push	{r7, lr}
 800e830:	b084      	sub	sp, #16
 800e832:	af00      	add	r7, sp, #0
 800e834:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e83c:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e844:	2b00      	cmp	r3, #0
 800e846:	d01c      	beq.n	800e882 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d115      	bne.n	800e87e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	2201      	movs	r2, #1
 800e856:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800e870:	b29b      	uxth	r3, r3
 800e872:	2181      	movs	r1, #129	; 0x81
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f006 fefc 	bl	8015672 <USBD_LL_Transmit>

      return USBD_OK;
 800e87a:	2300      	movs	r3, #0
 800e87c:	e002      	b.n	800e884 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800e87e:	2301      	movs	r3, #1
 800e880:	e000      	b.n	800e884 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800e882:	2302      	movs	r3, #2
  }
}
 800e884:	4618      	mov	r0, r3
 800e886:	3710      	adds	r7, #16
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e89a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d017      	beq.n	800e8d6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	7c1b      	ldrb	r3, [r3, #16]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d109      	bne.n	800e8c2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e8b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8b8:	2101      	movs	r1, #1
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f006 fefc 	bl	80156b8 <USBD_LL_PrepareReceive>
 800e8c0:	e007      	b.n	800e8d2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e8c8:	2340      	movs	r3, #64	; 0x40
 800e8ca:	2101      	movs	r1, #1
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f006 fef3 	bl	80156b8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	e000      	b.n	800e8d8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800e8d6:	2302      	movs	r3, #2
  }
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3710      	adds	r7, #16
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d101      	bne.n	800e8f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e8f4:	2302      	movs	r3, #2
 800e8f6:	e01a      	b.n	800e92e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d003      	beq.n	800e90a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	2200      	movs	r2, #0
 800e906:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d003      	beq.n	800e918 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	68ba      	ldr	r2, [r7, #8]
 800e914:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	2201      	movs	r2, #1
 800e91c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	79fa      	ldrb	r2, [r7, #7]
 800e924:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800e926:	68f8      	ldr	r0, [r7, #12]
 800e928:	f006 fd6e 	bl	8015408 <USBD_LL_Init>

  return USBD_OK;
 800e92c:	2300      	movs	r3, #0
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3710      	adds	r7, #16
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}

0800e936 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e936:	b480      	push	{r7}
 800e938:	b085      	sub	sp, #20
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6078      	str	r0, [r7, #4]
 800e93e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800e940:	2300      	movs	r3, #0
 800e942:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d006      	beq.n	800e958 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	683a      	ldr	r2, [r7, #0]
 800e94e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800e952:	2300      	movs	r3, #0
 800e954:	73fb      	strb	r3, [r7, #15]
 800e956:	e001      	b.n	800e95c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800e958:	2302      	movs	r3, #2
 800e95a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3714      	adds	r7, #20
 800e962:	46bd      	mov	sp, r7
 800e964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e968:	4770      	bx	lr

0800e96a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b082      	sub	sp, #8
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f006 fd94 	bl	80154a0 <USBD_LL_Start>

  return USBD_OK;
 800e978:	2300      	movs	r3, #0
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	3708      	adds	r7, #8
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}

0800e982 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800e982:	b480      	push	{r7}
 800e984:	b083      	sub	sp, #12
 800e986:	af00      	add	r7, sp, #0
 800e988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e98a:	2300      	movs	r3, #0
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	370c      	adds	r7, #12
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b084      	sub	sp, #16
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	460b      	mov	r3, r1
 800e9a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800e9a4:	2302      	movs	r3, #2
 800e9a6:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d00c      	beq.n	800e9cc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	78fa      	ldrb	r2, [r7, #3]
 800e9bc:	4611      	mov	r1, r2
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	4798      	blx	r3
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d101      	bne.n	800e9cc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800e9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3710      	adds	r7, #16
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}

0800e9d6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e9d6:	b580      	push	{r7, lr}
 800e9d8:	b082      	sub	sp, #8
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	6078      	str	r0, [r7, #4]
 800e9de:	460b      	mov	r3, r1
 800e9e0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	78fa      	ldrb	r2, [r7, #3]
 800e9ec:	4611      	mov	r1, r2
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	4798      	blx	r3
  return USBD_OK;
 800e9f2:	2300      	movs	r3, #0
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3708      	adds	r7, #8
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ea0c:	6839      	ldr	r1, [r7, #0]
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f000 fe94 	bl	800f73c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2201      	movs	r2, #1
 800ea18:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800ea22:	461a      	mov	r2, r3
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800ea30:	f003 031f 	and.w	r3, r3, #31
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d00c      	beq.n	800ea52 <USBD_LL_SetupStage+0x56>
 800ea38:	2b01      	cmp	r3, #1
 800ea3a:	d302      	bcc.n	800ea42 <USBD_LL_SetupStage+0x46>
 800ea3c:	2b02      	cmp	r3, #2
 800ea3e:	d010      	beq.n	800ea62 <USBD_LL_SetupStage+0x66>
 800ea40:	e017      	b.n	800ea72 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ea48:	4619      	mov	r1, r3
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 fa04 	bl	800ee58 <USBD_StdDevReq>
    break;
 800ea50:	e01a      	b.n	800ea88 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ea58:	4619      	mov	r1, r3
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 fa66 	bl	800ef2c <USBD_StdItfReq>
    break;
 800ea60:	e012      	b.n	800ea88 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ea68:	4619      	mov	r1, r3
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 faa4 	bl	800efb8 <USBD_StdEPReq>
    break;
 800ea70:	e00a      	b.n	800ea88 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800ea78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	4619      	mov	r1, r3
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f006 fd6d 	bl	8015560 <USBD_LL_StallEP>
    break;
 800ea86:	bf00      	nop
  }

  return USBD_OK;
 800ea88:	2300      	movs	r3, #0
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3708      	adds	r7, #8
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}

0800ea92 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ea92:	b580      	push	{r7, lr}
 800ea94:	b086      	sub	sp, #24
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	60f8      	str	r0, [r7, #12]
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	607a      	str	r2, [r7, #4]
 800ea9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800eaa0:	7afb      	ldrb	r3, [r7, #11]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d14b      	bne.n	800eb3e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800eaac:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800eab4:	2b03      	cmp	r3, #3
 800eab6:	d134      	bne.n	800eb22 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	68da      	ldr	r2, [r3, #12]
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	691b      	ldr	r3, [r3, #16]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d919      	bls.n	800eaf8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	68da      	ldr	r2, [r3, #12]
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	691b      	ldr	r3, [r3, #16]
 800eacc:	1ad2      	subs	r2, r2, r3
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	68da      	ldr	r2, [r3, #12]
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800eada:	429a      	cmp	r2, r3
 800eadc:	d203      	bcs.n	800eae6 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	e002      	b.n	800eaec <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	461a      	mov	r2, r3
 800eaee:	6879      	ldr	r1, [r7, #4]
 800eaf0:	68f8      	ldr	r0, [r7, #12]
 800eaf2:	f000 ff17 	bl	800f924 <USBD_CtlContinueRx>
 800eaf6:	e038      	b.n	800eb6a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800eafe:	691b      	ldr	r3, [r3, #16]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d00a      	beq.n	800eb1a <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800eb0a:	2b03      	cmp	r3, #3
 800eb0c:	d105      	bne.n	800eb1a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800eb14:	691b      	ldr	r3, [r3, #16]
 800eb16:	68f8      	ldr	r0, [r7, #12]
 800eb18:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800eb1a:	68f8      	ldr	r0, [r7, #12]
 800eb1c:	f000 ff14 	bl	800f948 <USBD_CtlSendStatus>
 800eb20:	e023      	b.n	800eb6a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800eb28:	2b05      	cmp	r3, #5
 800eb2a:	d11e      	bne.n	800eb6a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800eb34:	2100      	movs	r1, #0
 800eb36:	68f8      	ldr	r0, [r7, #12]
 800eb38:	f006 fd12 	bl	8015560 <USBD_LL_StallEP>
 800eb3c:	e015      	b.n	800eb6a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800eb44:	699b      	ldr	r3, [r3, #24]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d00d      	beq.n	800eb66 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800eb50:	2b03      	cmp	r3, #3
 800eb52:	d108      	bne.n	800eb66 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800eb5a:	699b      	ldr	r3, [r3, #24]
 800eb5c:	7afa      	ldrb	r2, [r7, #11]
 800eb5e:	4611      	mov	r1, r2
 800eb60:	68f8      	ldr	r0, [r7, #12]
 800eb62:	4798      	blx	r3
 800eb64:	e001      	b.n	800eb6a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800eb66:	2302      	movs	r3, #2
 800eb68:	e000      	b.n	800eb6c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800eb6a:	2300      	movs	r3, #0
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3718      	adds	r7, #24
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b086      	sub	sp, #24
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	60f8      	str	r0, [r7, #12]
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	607a      	str	r2, [r7, #4]
 800eb80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800eb82:	7afb      	ldrb	r3, [r7, #11]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d17f      	bne.n	800ec88 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	3314      	adds	r3, #20
 800eb8c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800eb94:	2b02      	cmp	r3, #2
 800eb96:	d15c      	bne.n	800ec52 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	68da      	ldr	r2, [r3, #12]
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	691b      	ldr	r3, [r3, #16]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d915      	bls.n	800ebd0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	68da      	ldr	r2, [r3, #12]
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	691b      	ldr	r3, [r3, #16]
 800ebac:	1ad2      	subs	r2, r2, r3
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	68db      	ldr	r3, [r3, #12]
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	461a      	mov	r2, r3
 800ebba:	6879      	ldr	r1, [r7, #4]
 800ebbc:	68f8      	ldr	r0, [r7, #12]
 800ebbe:	f000 fe81 	bl	800f8c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	2100      	movs	r1, #0
 800ebc8:	68f8      	ldr	r0, [r7, #12]
 800ebca:	f006 fd75 	bl	80156b8 <USBD_LL_PrepareReceive>
 800ebce:	e04e      	b.n	800ec6e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	689b      	ldr	r3, [r3, #8]
 800ebd4:	697a      	ldr	r2, [r7, #20]
 800ebd6:	6912      	ldr	r2, [r2, #16]
 800ebd8:	fbb3 f1f2 	udiv	r1, r3, r2
 800ebdc:	fb02 f201 	mul.w	r2, r2, r1
 800ebe0:	1a9b      	subs	r3, r3, r2
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d11c      	bne.n	800ec20 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	689a      	ldr	r2, [r3, #8]
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d316      	bcc.n	800ec20 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	689a      	ldr	r2, [r3, #8]
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d20f      	bcs.n	800ec20 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ec00:	2200      	movs	r2, #0
 800ec02:	2100      	movs	r1, #0
 800ec04:	68f8      	ldr	r0, [r7, #12]
 800ec06:	f000 fe5d 	bl	800f8c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800ec12:	2300      	movs	r3, #0
 800ec14:	2200      	movs	r2, #0
 800ec16:	2100      	movs	r1, #0
 800ec18:	68f8      	ldr	r0, [r7, #12]
 800ec1a:	f006 fd4d 	bl	80156b8 <USBD_LL_PrepareReceive>
 800ec1e:	e026      	b.n	800ec6e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d00a      	beq.n	800ec42 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800ec32:	2b03      	cmp	r3, #3
 800ec34:	d105      	bne.n	800ec42 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ec3c:	68db      	ldr	r3, [r3, #12]
 800ec3e:	68f8      	ldr	r0, [r7, #12]
 800ec40:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ec42:	2180      	movs	r1, #128	; 0x80
 800ec44:	68f8      	ldr	r0, [r7, #12]
 800ec46:	f006 fc8b 	bl	8015560 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ec4a:	68f8      	ldr	r0, [r7, #12]
 800ec4c:	f000 fe8f 	bl	800f96e <USBD_CtlReceiveStatus>
 800ec50:	e00d      	b.n	800ec6e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ec58:	2b04      	cmp	r3, #4
 800ec5a:	d004      	beq.n	800ec66 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d103      	bne.n	800ec6e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ec66:	2180      	movs	r1, #128	; 0x80
 800ec68:	68f8      	ldr	r0, [r7, #12]
 800ec6a:	f006 fc79 	bl	8015560 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d11d      	bne.n	800ecb4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ec78:	68f8      	ldr	r0, [r7, #12]
 800ec7a:	f7ff fe82 	bl	800e982 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	2200      	movs	r2, #0
 800ec82:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800ec86:	e015      	b.n	800ecb4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ec8e:	695b      	ldr	r3, [r3, #20]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d00d      	beq.n	800ecb0 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800ec9a:	2b03      	cmp	r3, #3
 800ec9c:	d108      	bne.n	800ecb0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800eca4:	695b      	ldr	r3, [r3, #20]
 800eca6:	7afa      	ldrb	r2, [r7, #11]
 800eca8:	4611      	mov	r1, r2
 800ecaa:	68f8      	ldr	r0, [r7, #12]
 800ecac:	4798      	blx	r3
 800ecae:	e001      	b.n	800ecb4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ecb0:	2302      	movs	r3, #2
 800ecb2:	e000      	b.n	800ecb6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ecb4:	2300      	movs	r3, #0
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3718      	adds	r7, #24
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}

0800ecbe <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800ecbe:	b580      	push	{r7, lr}
 800ecc0:	b082      	sub	sp, #8
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ecc6:	2340      	movs	r3, #64	; 0x40
 800ecc8:	2200      	movs	r2, #0
 800ecca:	2100      	movs	r1, #0
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f006 fc02 	bl	80154d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2240      	movs	r2, #64	; 0x40
 800ecde:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ece2:	2340      	movs	r3, #64	; 0x40
 800ece4:	2200      	movs	r2, #0
 800ece6:	2180      	movs	r1, #128	; 0x80
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f006 fbf4 	bl	80154d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2240      	movs	r2, #64	; 0x40
 800ecf8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2201      	movs	r2, #1
 800ecfe:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2200      	movs	r2, #0
 800ed06:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2200      	movs	r2, #0
 800ed14:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d009      	beq.n	800ed36 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ed28:	685b      	ldr	r3, [r3, #4]
 800ed2a:	687a      	ldr	r2, [r7, #4]
 800ed2c:	6852      	ldr	r2, [r2, #4]
 800ed2e:	b2d2      	uxtb	r2, r2
 800ed30:	4611      	mov	r1, r2
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	4798      	blx	r3
  }

  return USBD_OK;
 800ed36:	2300      	movs	r3, #0
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3708      	adds	r7, #8
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b083      	sub	sp, #12
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	460b      	mov	r3, r1
 800ed4a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	78fa      	ldrb	r2, [r7, #3]
 800ed50:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800ed52:	2300      	movs	r3, #0
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	370c      	adds	r7, #12
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr

0800ed60 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2204      	movs	r2, #4
 800ed78:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800ed7c:	2300      	movs	r3, #0
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	370c      	adds	r7, #12
 800ed82:	46bd      	mov	sp, r7
 800ed84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed88:	4770      	bx	lr

0800ed8a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800ed8a:	b480      	push	{r7}
 800ed8c:	b083      	sub	sp, #12
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800ed9e:	2300      	movs	r3, #0
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	370c      	adds	r7, #12
 800eda4:	46bd      	mov	sp, r7
 800eda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edaa:	4770      	bx	lr

0800edac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800edba:	2b03      	cmp	r3, #3
 800edbc:	d10b      	bne.n	800edd6 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800edc4:	69db      	ldr	r3, [r3, #28]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d005      	beq.n	800edd6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800edd0:	69db      	ldr	r3, [r3, #28]
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800edd6:	2300      	movs	r3, #0
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3708      	adds	r7, #8
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b083      	sub	sp, #12
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	460b      	mov	r3, r1
 800edea:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800edec:	2300      	movs	r3, #0
}
 800edee:	4618      	mov	r0, r3
 800edf0:	370c      	adds	r7, #12
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr

0800edfa <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800edfa:	b480      	push	{r7}
 800edfc:	b083      	sub	sp, #12
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
 800ee02:	460b      	mov	r3, r1
 800ee04:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ee06:	2300      	movs	r3, #0
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	370c      	adds	r7, #12
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee12:	4770      	bx	lr

0800ee14 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ee1c:	2300      	movs	r3, #0
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	370c      	adds	r7, #12
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr

0800ee2a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b082      	sub	sp, #8
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2201      	movs	r2, #1
 800ee36:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	6852      	ldr	r2, [r2, #4]
 800ee46:	b2d2      	uxtb	r2, r2
 800ee48:	4611      	mov	r1, r2
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	4798      	blx	r3

  return USBD_OK;
 800ee4e:	2300      	movs	r3, #0
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3708      	adds	r7, #8
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}

0800ee58 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee62:	2300      	movs	r3, #0
 800ee64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee6e:	2b20      	cmp	r3, #32
 800ee70:	d004      	beq.n	800ee7c <USBD_StdDevReq+0x24>
 800ee72:	2b40      	cmp	r3, #64	; 0x40
 800ee74:	d002      	beq.n	800ee7c <USBD_StdDevReq+0x24>
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d008      	beq.n	800ee8c <USBD_StdDevReq+0x34>
 800ee7a:	e04c      	b.n	800ef16 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ee82:	689b      	ldr	r3, [r3, #8]
 800ee84:	6839      	ldr	r1, [r7, #0]
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	4798      	blx	r3
    break;
 800ee8a:	e049      	b.n	800ef20 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	785b      	ldrb	r3, [r3, #1]
 800ee90:	2b09      	cmp	r3, #9
 800ee92:	d83a      	bhi.n	800ef0a <USBD_StdDevReq+0xb2>
 800ee94:	a201      	add	r2, pc, #4	; (adr r2, 800ee9c <USBD_StdDevReq+0x44>)
 800ee96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee9a:	bf00      	nop
 800ee9c:	0800eeed 	.word	0x0800eeed
 800eea0:	0800ef01 	.word	0x0800ef01
 800eea4:	0800ef0b 	.word	0x0800ef0b
 800eea8:	0800eef7 	.word	0x0800eef7
 800eeac:	0800ef0b 	.word	0x0800ef0b
 800eeb0:	0800eecf 	.word	0x0800eecf
 800eeb4:	0800eec5 	.word	0x0800eec5
 800eeb8:	0800ef0b 	.word	0x0800ef0b
 800eebc:	0800eee3 	.word	0x0800eee3
 800eec0:	0800eed9 	.word	0x0800eed9
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800eec4:	6839      	ldr	r1, [r7, #0]
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 f9d2 	bl	800f270 <USBD_GetDescriptor>
      break;
 800eecc:	e022      	b.n	800ef14 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800eece:	6839      	ldr	r1, [r7, #0]
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f000 fac7 	bl	800f464 <USBD_SetAddress>
      break;
 800eed6:	e01d      	b.n	800ef14 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800eed8:	6839      	ldr	r1, [r7, #0]
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f000 fb04 	bl	800f4e8 <USBD_SetConfig>
      break;
 800eee0:	e018      	b.n	800ef14 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800eee2:	6839      	ldr	r1, [r7, #0]
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f000 fb8d 	bl	800f604 <USBD_GetConfig>
      break;
 800eeea:	e013      	b.n	800ef14 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800eeec:	6839      	ldr	r1, [r7, #0]
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f000 fbbc 	bl	800f66c <USBD_GetStatus>
      break;
 800eef4:	e00e      	b.n	800ef14 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800eef6:	6839      	ldr	r1, [r7, #0]
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f000 fbea 	bl	800f6d2 <USBD_SetFeature>
      break;
 800eefe:	e009      	b.n	800ef14 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800ef00:	6839      	ldr	r1, [r7, #0]
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f000 fbf9 	bl	800f6fa <USBD_ClrFeature>
      break;
 800ef08:	e004      	b.n	800ef14 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800ef0a:	6839      	ldr	r1, [r7, #0]
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f000 fc52 	bl	800f7b6 <USBD_CtlError>
      break;
 800ef12:	bf00      	nop
    }
    break;
 800ef14:	e004      	b.n	800ef20 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800ef16:	6839      	ldr	r1, [r7, #0]
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f000 fc4c 	bl	800f7b6 <USBD_CtlError>
    break;
 800ef1e:	bf00      	nop
  }

  return ret;
 800ef20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3710      	adds	r7, #16
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop

0800ef2c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef36:	2300      	movs	r3, #0
 800ef38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef42:	2b20      	cmp	r3, #32
 800ef44:	d003      	beq.n	800ef4e <USBD_StdItfReq+0x22>
 800ef46:	2b40      	cmp	r3, #64	; 0x40
 800ef48:	d001      	beq.n	800ef4e <USBD_StdItfReq+0x22>
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d12a      	bne.n	800efa4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ef54:	3b01      	subs	r3, #1
 800ef56:	2b02      	cmp	r3, #2
 800ef58:	d81d      	bhi.n	800ef96 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	889b      	ldrh	r3, [r3, #4]
 800ef5e:	b2db      	uxtb	r3, r3
 800ef60:	2b01      	cmp	r3, #1
 800ef62:	d813      	bhi.n	800ef8c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ef6a:	689b      	ldr	r3, [r3, #8]
 800ef6c:	6839      	ldr	r1, [r7, #0]
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	4798      	blx	r3
 800ef72:	4603      	mov	r3, r0
 800ef74:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	88db      	ldrh	r3, [r3, #6]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d110      	bne.n	800efa0 <USBD_StdItfReq+0x74>
 800ef7e:	7bfb      	ldrb	r3, [r7, #15]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d10d      	bne.n	800efa0 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 fcdf 	bl	800f948 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ef8a:	e009      	b.n	800efa0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ef8c:	6839      	ldr	r1, [r7, #0]
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f000 fc11 	bl	800f7b6 <USBD_CtlError>
      break;
 800ef94:	e004      	b.n	800efa0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ef96:	6839      	ldr	r1, [r7, #0]
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f000 fc0c 	bl	800f7b6 <USBD_CtlError>
      break;
 800ef9e:	e000      	b.n	800efa2 <USBD_StdItfReq+0x76>
      break;
 800efa0:	bf00      	nop
    }
    break;
 800efa2:	e004      	b.n	800efae <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800efa4:	6839      	ldr	r1, [r7, #0]
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 fc05 	bl	800f7b6 <USBD_CtlError>
    break;
 800efac:	bf00      	nop
  }

  return USBD_OK;
 800efae:	2300      	movs	r3, #0
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3710      	adds	r7, #16
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b084      	sub	sp, #16
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800efc2:	2300      	movs	r3, #0
 800efc4:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	889b      	ldrh	r3, [r3, #4]
 800efca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800efd4:	2b20      	cmp	r3, #32
 800efd6:	d004      	beq.n	800efe2 <USBD_StdEPReq+0x2a>
 800efd8:	2b40      	cmp	r3, #64	; 0x40
 800efda:	d002      	beq.n	800efe2 <USBD_StdEPReq+0x2a>
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d008      	beq.n	800eff2 <USBD_StdEPReq+0x3a>
 800efe0:	e13b      	b.n	800f25a <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800efe8:	689b      	ldr	r3, [r3, #8]
 800efea:	6839      	ldr	r1, [r7, #0]
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	4798      	blx	r3
    break;
 800eff0:	e138      	b.n	800f264 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800effa:	2b20      	cmp	r3, #32
 800effc:	d10a      	bne.n	800f014 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f004:	689b      	ldr	r3, [r3, #8]
 800f006:	6839      	ldr	r1, [r7, #0]
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	4798      	blx	r3
 800f00c:	4603      	mov	r3, r0
 800f00e:	73fb      	strb	r3, [r7, #15]

      return ret;
 800f010:	7bfb      	ldrb	r3, [r7, #15]
 800f012:	e128      	b.n	800f266 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	785b      	ldrb	r3, [r3, #1]
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d03e      	beq.n	800f09a <USBD_StdEPReq+0xe2>
 800f01c:	2b03      	cmp	r3, #3
 800f01e:	d002      	beq.n	800f026 <USBD_StdEPReq+0x6e>
 800f020:	2b00      	cmp	r3, #0
 800f022:	d070      	beq.n	800f106 <USBD_StdEPReq+0x14e>
 800f024:	e113      	b.n	800f24e <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f02c:	2b02      	cmp	r3, #2
 800f02e:	d002      	beq.n	800f036 <USBD_StdEPReq+0x7e>
 800f030:	2b03      	cmp	r3, #3
 800f032:	d015      	beq.n	800f060 <USBD_StdEPReq+0xa8>
 800f034:	e02b      	b.n	800f08e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f036:	7bbb      	ldrb	r3, [r7, #14]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d00c      	beq.n	800f056 <USBD_StdEPReq+0x9e>
 800f03c:	7bbb      	ldrb	r3, [r7, #14]
 800f03e:	2b80      	cmp	r3, #128	; 0x80
 800f040:	d009      	beq.n	800f056 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800f042:	7bbb      	ldrb	r3, [r7, #14]
 800f044:	4619      	mov	r1, r3
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f006 fa8a 	bl	8015560 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800f04c:	2180      	movs	r1, #128	; 0x80
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f006 fa86 	bl	8015560 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f054:	e020      	b.n	800f098 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800f056:	6839      	ldr	r1, [r7, #0]
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f000 fbac 	bl	800f7b6 <USBD_CtlError>
        break;
 800f05e:	e01b      	b.n	800f098 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	885b      	ldrh	r3, [r3, #2]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d10e      	bne.n	800f086 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f068:	7bbb      	ldrb	r3, [r7, #14]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d00b      	beq.n	800f086 <USBD_StdEPReq+0xce>
 800f06e:	7bbb      	ldrb	r3, [r7, #14]
 800f070:	2b80      	cmp	r3, #128	; 0x80
 800f072:	d008      	beq.n	800f086 <USBD_StdEPReq+0xce>
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	88db      	ldrh	r3, [r3, #6]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d104      	bne.n	800f086 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800f07c:	7bbb      	ldrb	r3, [r7, #14]
 800f07e:	4619      	mov	r1, r3
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f006 fa6d 	bl	8015560 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f000 fc5e 	bl	800f948 <USBD_CtlSendStatus>

        break;
 800f08c:	e004      	b.n	800f098 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800f08e:	6839      	ldr	r1, [r7, #0]
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f000 fb90 	bl	800f7b6 <USBD_CtlError>
        break;
 800f096:	bf00      	nop
      }
      break;
 800f098:	e0de      	b.n	800f258 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f0a0:	2b02      	cmp	r3, #2
 800f0a2:	d002      	beq.n	800f0aa <USBD_StdEPReq+0xf2>
 800f0a4:	2b03      	cmp	r3, #3
 800f0a6:	d015      	beq.n	800f0d4 <USBD_StdEPReq+0x11c>
 800f0a8:	e026      	b.n	800f0f8 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f0aa:	7bbb      	ldrb	r3, [r7, #14]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d00c      	beq.n	800f0ca <USBD_StdEPReq+0x112>
 800f0b0:	7bbb      	ldrb	r3, [r7, #14]
 800f0b2:	2b80      	cmp	r3, #128	; 0x80
 800f0b4:	d009      	beq.n	800f0ca <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800f0b6:	7bbb      	ldrb	r3, [r7, #14]
 800f0b8:	4619      	mov	r1, r3
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f006 fa50 	bl	8015560 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800f0c0:	2180      	movs	r1, #128	; 0x80
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f006 fa4c 	bl	8015560 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f0c8:	e01c      	b.n	800f104 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800f0ca:	6839      	ldr	r1, [r7, #0]
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f000 fb72 	bl	800f7b6 <USBD_CtlError>
        break;
 800f0d2:	e017      	b.n	800f104 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	885b      	ldrh	r3, [r3, #2]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d112      	bne.n	800f102 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800f0dc:	7bbb      	ldrb	r3, [r7, #14]
 800f0de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d004      	beq.n	800f0f0 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800f0e6:	7bbb      	ldrb	r3, [r7, #14]
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f006 fa57 	bl	801559e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f000 fc29 	bl	800f948 <USBD_CtlSendStatus>
        }
        break;
 800f0f6:	e004      	b.n	800f102 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800f0f8:	6839      	ldr	r1, [r7, #0]
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f000 fb5b 	bl	800f7b6 <USBD_CtlError>
        break;
 800f100:	e000      	b.n	800f104 <USBD_StdEPReq+0x14c>
        break;
 800f102:	bf00      	nop
      }
      break;
 800f104:	e0a8      	b.n	800f258 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f10c:	2b02      	cmp	r3, #2
 800f10e:	d002      	beq.n	800f116 <USBD_StdEPReq+0x15e>
 800f110:	2b03      	cmp	r3, #3
 800f112:	d031      	beq.n	800f178 <USBD_StdEPReq+0x1c0>
 800f114:	e095      	b.n	800f242 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f116:	7bbb      	ldrb	r3, [r7, #14]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d007      	beq.n	800f12c <USBD_StdEPReq+0x174>
 800f11c:	7bbb      	ldrb	r3, [r7, #14]
 800f11e:	2b80      	cmp	r3, #128	; 0x80
 800f120:	d004      	beq.n	800f12c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800f122:	6839      	ldr	r1, [r7, #0]
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f000 fb46 	bl	800f7b6 <USBD_CtlError>
          break;
 800f12a:	e08f      	b.n	800f24c <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800f12c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f130:	2b00      	cmp	r3, #0
 800f132:	da0b      	bge.n	800f14c <USBD_StdEPReq+0x194>
 800f134:	7bbb      	ldrb	r3, [r7, #14]
 800f136:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f13a:	4613      	mov	r3, r2
 800f13c:	009b      	lsls	r3, r3, #2
 800f13e:	4413      	add	r3, r2
 800f140:	009b      	lsls	r3, r3, #2
 800f142:	3310      	adds	r3, #16
 800f144:	687a      	ldr	r2, [r7, #4]
 800f146:	4413      	add	r3, r2
 800f148:	3304      	adds	r3, #4
 800f14a:	e00a      	b.n	800f162 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800f14c:	7bbb      	ldrb	r3, [r7, #14]
 800f14e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800f152:	4613      	mov	r3, r2
 800f154:	009b      	lsls	r3, r3, #2
 800f156:	4413      	add	r3, r2
 800f158:	009b      	lsls	r3, r3, #2
 800f15a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800f15e:	687a      	ldr	r2, [r7, #4]
 800f160:	4413      	add	r3, r2
 800f162:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	2200      	movs	r2, #0
 800f168:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	2202      	movs	r2, #2
 800f16e:	4619      	mov	r1, r3
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f000 fb8b 	bl	800f88c <USBD_CtlSendData>
          break;
 800f176:	e069      	b.n	800f24c <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800f178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	da11      	bge.n	800f1a4 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f180:	7bbb      	ldrb	r3, [r7, #14]
 800f182:	f003 020f 	and.w	r2, r3, #15
 800f186:	6879      	ldr	r1, [r7, #4]
 800f188:	4613      	mov	r3, r2
 800f18a:	009b      	lsls	r3, r3, #2
 800f18c:	4413      	add	r3, r2
 800f18e:	009b      	lsls	r3, r3, #2
 800f190:	440b      	add	r3, r1
 800f192:	3318      	adds	r3, #24
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d117      	bne.n	800f1ca <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800f19a:	6839      	ldr	r1, [r7, #0]
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f000 fb0a 	bl	800f7b6 <USBD_CtlError>
            break;
 800f1a2:	e053      	b.n	800f24c <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f1a4:	7bbb      	ldrb	r3, [r7, #14]
 800f1a6:	f003 020f 	and.w	r2, r3, #15
 800f1aa:	6879      	ldr	r1, [r7, #4]
 800f1ac:	4613      	mov	r3, r2
 800f1ae:	009b      	lsls	r3, r3, #2
 800f1b0:	4413      	add	r3, r2
 800f1b2:	009b      	lsls	r3, r3, #2
 800f1b4:	440b      	add	r3, r1
 800f1b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d104      	bne.n	800f1ca <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800f1c0:	6839      	ldr	r1, [r7, #0]
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f000 faf7 	bl	800f7b6 <USBD_CtlError>
            break;
 800f1c8:	e040      	b.n	800f24c <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800f1ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	da0b      	bge.n	800f1ea <USBD_StdEPReq+0x232>
 800f1d2:	7bbb      	ldrb	r3, [r7, #14]
 800f1d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1d8:	4613      	mov	r3, r2
 800f1da:	009b      	lsls	r3, r3, #2
 800f1dc:	4413      	add	r3, r2
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	3310      	adds	r3, #16
 800f1e2:	687a      	ldr	r2, [r7, #4]
 800f1e4:	4413      	add	r3, r2
 800f1e6:	3304      	adds	r3, #4
 800f1e8:	e00a      	b.n	800f200 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800f1ea:	7bbb      	ldrb	r3, [r7, #14]
 800f1ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800f1f0:	4613      	mov	r3, r2
 800f1f2:	009b      	lsls	r3, r3, #2
 800f1f4:	4413      	add	r3, r2
 800f1f6:	009b      	lsls	r3, r3, #2
 800f1f8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800f1fc:	687a      	ldr	r2, [r7, #4]
 800f1fe:	4413      	add	r3, r2
 800f200:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f202:	7bbb      	ldrb	r3, [r7, #14]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d002      	beq.n	800f20e <USBD_StdEPReq+0x256>
 800f208:	7bbb      	ldrb	r3, [r7, #14]
 800f20a:	2b80      	cmp	r3, #128	; 0x80
 800f20c:	d103      	bne.n	800f216 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	2200      	movs	r2, #0
 800f212:	601a      	str	r2, [r3, #0]
 800f214:	e00e      	b.n	800f234 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800f216:	7bbb      	ldrb	r3, [r7, #14]
 800f218:	4619      	mov	r1, r3
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f006 f9de 	bl	80155dc <USBD_LL_IsStallEP>
 800f220:	4603      	mov	r3, r0
 800f222:	2b00      	cmp	r3, #0
 800f224:	d003      	beq.n	800f22e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	2201      	movs	r2, #1
 800f22a:	601a      	str	r2, [r3, #0]
 800f22c:	e002      	b.n	800f234 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	2200      	movs	r2, #0
 800f232:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	2202      	movs	r2, #2
 800f238:	4619      	mov	r1, r3
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 fb26 	bl	800f88c <USBD_CtlSendData>
          break;
 800f240:	e004      	b.n	800f24c <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800f242:	6839      	ldr	r1, [r7, #0]
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f000 fab6 	bl	800f7b6 <USBD_CtlError>
        break;
 800f24a:	bf00      	nop
      }
      break;
 800f24c:	e004      	b.n	800f258 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800f24e:	6839      	ldr	r1, [r7, #0]
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f000 fab0 	bl	800f7b6 <USBD_CtlError>
      break;
 800f256:	bf00      	nop
    }
    break;
 800f258:	e004      	b.n	800f264 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800f25a:	6839      	ldr	r1, [r7, #0]
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f000 faaa 	bl	800f7b6 <USBD_CtlError>
    break;
 800f262:	bf00      	nop
  }

  return ret;
 800f264:	7bfb      	ldrb	r3, [r7, #15]
}
 800f266:	4618      	mov	r0, r3
 800f268:	3710      	adds	r7, #16
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}
	...

0800f270 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b084      	sub	sp, #16
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	885b      	ldrh	r3, [r3, #2]
 800f27e:	0a1b      	lsrs	r3, r3, #8
 800f280:	b29b      	uxth	r3, r3
 800f282:	3b01      	subs	r3, #1
 800f284:	2b06      	cmp	r3, #6
 800f286:	f200 80c9 	bhi.w	800f41c <USBD_GetDescriptor+0x1ac>
 800f28a:	a201      	add	r2, pc, #4	; (adr r2, 800f290 <USBD_GetDescriptor+0x20>)
 800f28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f290:	0800f2ad 	.word	0x0800f2ad
 800f294:	0800f2c5 	.word	0x0800f2c5
 800f298:	0800f305 	.word	0x0800f305
 800f29c:	0800f41d 	.word	0x0800f41d
 800f2a0:	0800f41d 	.word	0x0800f41d
 800f2a4:	0800f3c9 	.word	0x0800f3c9
 800f2a8:	0800f3ef 	.word	0x0800f3ef
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	687a      	ldr	r2, [r7, #4]
 800f2b6:	7c12      	ldrb	r2, [r2, #16]
 800f2b8:	f107 010a 	add.w	r1, r7, #10
 800f2bc:	4610      	mov	r0, r2
 800f2be:	4798      	blx	r3
 800f2c0:	60f8      	str	r0, [r7, #12]
    break;
 800f2c2:	e0b0      	b.n	800f426 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	7c1b      	ldrb	r3, [r3, #16]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d10d      	bne.n	800f2e8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2d4:	f107 020a 	add.w	r2, r7, #10
 800f2d8:	4610      	mov	r0, r2
 800f2da:	4798      	blx	r3
 800f2dc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	2202      	movs	r2, #2
 800f2e4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f2e6:	e09e      	b.n	800f426 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2f0:	f107 020a 	add.w	r2, r7, #10
 800f2f4:	4610      	mov	r0, r2
 800f2f6:	4798      	blx	r3
 800f2f8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	2202      	movs	r2, #2
 800f300:	701a      	strb	r2, [r3, #0]
    break;
 800f302:	e090      	b.n	800f426 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	885b      	ldrh	r3, [r3, #2]
 800f308:	b2db      	uxtb	r3, r3
 800f30a:	2b05      	cmp	r3, #5
 800f30c:	d856      	bhi.n	800f3bc <USBD_GetDescriptor+0x14c>
 800f30e:	a201      	add	r2, pc, #4	; (adr r2, 800f314 <USBD_GetDescriptor+0xa4>)
 800f310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f314:	0800f32d 	.word	0x0800f32d
 800f318:	0800f345 	.word	0x0800f345
 800f31c:	0800f35d 	.word	0x0800f35d
 800f320:	0800f375 	.word	0x0800f375
 800f324:	0800f38d 	.word	0x0800f38d
 800f328:	0800f3a5 	.word	0x0800f3a5
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	687a      	ldr	r2, [r7, #4]
 800f336:	7c12      	ldrb	r2, [r2, #16]
 800f338:	f107 010a 	add.w	r1, r7, #10
 800f33c:	4610      	mov	r0, r2
 800f33e:	4798      	blx	r3
 800f340:	60f8      	str	r0, [r7, #12]
      break;
 800f342:	e040      	b.n	800f3c6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	687a      	ldr	r2, [r7, #4]
 800f34e:	7c12      	ldrb	r2, [r2, #16]
 800f350:	f107 010a 	add.w	r1, r7, #10
 800f354:	4610      	mov	r0, r2
 800f356:	4798      	blx	r3
 800f358:	60f8      	str	r0, [r7, #12]
      break;
 800f35a:	e034      	b.n	800f3c6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	687a      	ldr	r2, [r7, #4]
 800f366:	7c12      	ldrb	r2, [r2, #16]
 800f368:	f107 010a 	add.w	r1, r7, #10
 800f36c:	4610      	mov	r0, r2
 800f36e:	4798      	blx	r3
 800f370:	60f8      	str	r0, [r7, #12]
      break;
 800f372:	e028      	b.n	800f3c6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f37a:	691b      	ldr	r3, [r3, #16]
 800f37c:	687a      	ldr	r2, [r7, #4]
 800f37e:	7c12      	ldrb	r2, [r2, #16]
 800f380:	f107 010a 	add.w	r1, r7, #10
 800f384:	4610      	mov	r0, r2
 800f386:	4798      	blx	r3
 800f388:	60f8      	str	r0, [r7, #12]
      break;
 800f38a:	e01c      	b.n	800f3c6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f392:	695b      	ldr	r3, [r3, #20]
 800f394:	687a      	ldr	r2, [r7, #4]
 800f396:	7c12      	ldrb	r2, [r2, #16]
 800f398:	f107 010a 	add.w	r1, r7, #10
 800f39c:	4610      	mov	r0, r2
 800f39e:	4798      	blx	r3
 800f3a0:	60f8      	str	r0, [r7, #12]
      break;
 800f3a2:	e010      	b.n	800f3c6 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800f3aa:	699b      	ldr	r3, [r3, #24]
 800f3ac:	687a      	ldr	r2, [r7, #4]
 800f3ae:	7c12      	ldrb	r2, [r2, #16]
 800f3b0:	f107 010a 	add.w	r1, r7, #10
 800f3b4:	4610      	mov	r0, r2
 800f3b6:	4798      	blx	r3
 800f3b8:	60f8      	str	r0, [r7, #12]
      break;
 800f3ba:	e004      	b.n	800f3c6 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800f3bc:	6839      	ldr	r1, [r7, #0]
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f000 f9f9 	bl	800f7b6 <USBD_CtlError>
      return;
 800f3c4:	e04b      	b.n	800f45e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800f3c6:	e02e      	b.n	800f426 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	7c1b      	ldrb	r3, [r3, #16]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d109      	bne.n	800f3e4 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3d8:	f107 020a 	add.w	r2, r7, #10
 800f3dc:	4610      	mov	r0, r2
 800f3de:	4798      	blx	r3
 800f3e0:	60f8      	str	r0, [r7, #12]
      break;
 800f3e2:	e020      	b.n	800f426 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800f3e4:	6839      	ldr	r1, [r7, #0]
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f000 f9e5 	bl	800f7b6 <USBD_CtlError>
      return;
 800f3ec:	e037      	b.n	800f45e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	7c1b      	ldrb	r3, [r3, #16]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d10d      	bne.n	800f412 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800f3fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3fe:	f107 020a 	add.w	r2, r7, #10
 800f402:	4610      	mov	r0, r2
 800f404:	4798      	blx	r3
 800f406:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	3301      	adds	r3, #1
 800f40c:	2207      	movs	r2, #7
 800f40e:	701a      	strb	r2, [r3, #0]
      break;
 800f410:	e009      	b.n	800f426 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800f412:	6839      	ldr	r1, [r7, #0]
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f000 f9ce 	bl	800f7b6 <USBD_CtlError>
      return;
 800f41a:	e020      	b.n	800f45e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800f41c:	6839      	ldr	r1, [r7, #0]
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f000 f9c9 	bl	800f7b6 <USBD_CtlError>
    return;
 800f424:	e01b      	b.n	800f45e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800f426:	897b      	ldrh	r3, [r7, #10]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d011      	beq.n	800f450 <USBD_GetDescriptor+0x1e0>
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	88db      	ldrh	r3, [r3, #6]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d00d      	beq.n	800f450 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	88da      	ldrh	r2, [r3, #6]
 800f438:	897b      	ldrh	r3, [r7, #10]
 800f43a:	4293      	cmp	r3, r2
 800f43c:	bf28      	it	cs
 800f43e:	4613      	movcs	r3, r2
 800f440:	b29b      	uxth	r3, r3
 800f442:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800f444:	897b      	ldrh	r3, [r7, #10]
 800f446:	461a      	mov	r2, r3
 800f448:	68f9      	ldr	r1, [r7, #12]
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f000 fa1e 	bl	800f88c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	88db      	ldrh	r3, [r3, #6]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d102      	bne.n	800f45e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f000 fa75 	bl	800f948 <USBD_CtlSendStatus>
  }
}
 800f45e:	3710      	adds	r7, #16
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}

0800f464 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b084      	sub	sp, #16
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	889b      	ldrh	r3, [r3, #4]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d130      	bne.n	800f4d8 <USBD_SetAddress+0x74>
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	88db      	ldrh	r3, [r3, #6]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d12c      	bne.n	800f4d8 <USBD_SetAddress+0x74>
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	885b      	ldrh	r3, [r3, #2]
 800f482:	2b7f      	cmp	r3, #127	; 0x7f
 800f484:	d828      	bhi.n	800f4d8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	885b      	ldrh	r3, [r3, #2]
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f490:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f498:	2b03      	cmp	r3, #3
 800f49a:	d104      	bne.n	800f4a6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800f49c:	6839      	ldr	r1, [r7, #0]
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 f989 	bl	800f7b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4a4:	e01c      	b.n	800f4e0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	7bfa      	ldrb	r2, [r7, #15]
 800f4aa:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f4ae:	7bfb      	ldrb	r3, [r7, #15]
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f006 f8be 	bl	8015634 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 fa45 	bl	800f948 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f4be:	7bfb      	ldrb	r3, [r7, #15]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d004      	beq.n	800f4ce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2202      	movs	r2, #2
 800f4c8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4cc:	e008      	b.n	800f4e0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4d6:	e003      	b.n	800f4e0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f4d8:	6839      	ldr	r1, [r7, #0]
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f000 f96b 	bl	800f7b6 <USBD_CtlError>
  }
}
 800f4e0:	bf00      	nop
 800f4e2:	3710      	adds	r7, #16
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	885b      	ldrh	r3, [r3, #2]
 800f4f6:	b2da      	uxtb	r2, r3
 800f4f8:	4b41      	ldr	r3, [pc, #260]	; (800f600 <USBD_SetConfig+0x118>)
 800f4fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f4fc:	4b40      	ldr	r3, [pc, #256]	; (800f600 <USBD_SetConfig+0x118>)
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	2b01      	cmp	r3, #1
 800f502:	d904      	bls.n	800f50e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800f504:	6839      	ldr	r1, [r7, #0]
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 f955 	bl	800f7b6 <USBD_CtlError>
 800f50c:	e075      	b.n	800f5fa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f514:	2b02      	cmp	r3, #2
 800f516:	d002      	beq.n	800f51e <USBD_SetConfig+0x36>
 800f518:	2b03      	cmp	r3, #3
 800f51a:	d023      	beq.n	800f564 <USBD_SetConfig+0x7c>
 800f51c:	e062      	b.n	800f5e4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800f51e:	4b38      	ldr	r3, [pc, #224]	; (800f600 <USBD_SetConfig+0x118>)
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d01a      	beq.n	800f55c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800f526:	4b36      	ldr	r3, [pc, #216]	; (800f600 <USBD_SetConfig+0x118>)
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	461a      	mov	r2, r3
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2203      	movs	r2, #3
 800f534:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f538:	4b31      	ldr	r3, [pc, #196]	; (800f600 <USBD_SetConfig+0x118>)
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	4619      	mov	r1, r3
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f7ff fa2a 	bl	800e998 <USBD_SetClassConfig>
 800f544:	4603      	mov	r3, r0
 800f546:	2b02      	cmp	r3, #2
 800f548:	d104      	bne.n	800f554 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800f54a:	6839      	ldr	r1, [r7, #0]
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f000 f932 	bl	800f7b6 <USBD_CtlError>
          return;
 800f552:	e052      	b.n	800f5fa <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f000 f9f7 	bl	800f948 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800f55a:	e04e      	b.n	800f5fa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f000 f9f3 	bl	800f948 <USBD_CtlSendStatus>
      break;
 800f562:	e04a      	b.n	800f5fa <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f564:	4b26      	ldr	r3, [pc, #152]	; (800f600 <USBD_SetConfig+0x118>)
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d112      	bne.n	800f592 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2202      	movs	r2, #2
 800f570:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800f574:	4b22      	ldr	r3, [pc, #136]	; (800f600 <USBD_SetConfig+0x118>)
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	461a      	mov	r2, r3
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800f57e:	4b20      	ldr	r3, [pc, #128]	; (800f600 <USBD_SetConfig+0x118>)
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	4619      	mov	r1, r3
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	f7ff fa26 	bl	800e9d6 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f000 f9dc 	bl	800f948 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800f590:	e033      	b.n	800f5fa <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800f592:	4b1b      	ldr	r3, [pc, #108]	; (800f600 <USBD_SetConfig+0x118>)
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	461a      	mov	r2, r3
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	429a      	cmp	r2, r3
 800f59e:	d01d      	beq.n	800f5dc <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f7ff fa14 	bl	800e9d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f5ae:	4b14      	ldr	r3, [pc, #80]	; (800f600 <USBD_SetConfig+0x118>)
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f5b8:	4b11      	ldr	r3, [pc, #68]	; (800f600 <USBD_SetConfig+0x118>)
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	4619      	mov	r1, r3
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f7ff f9ea 	bl	800e998 <USBD_SetClassConfig>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	2b02      	cmp	r3, #2
 800f5c8:	d104      	bne.n	800f5d4 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800f5ca:	6839      	ldr	r1, [r7, #0]
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f000 f8f2 	bl	800f7b6 <USBD_CtlError>
          return;
 800f5d2:	e012      	b.n	800f5fa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f000 f9b7 	bl	800f948 <USBD_CtlSendStatus>
      break;
 800f5da:	e00e      	b.n	800f5fa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f000 f9b3 	bl	800f948 <USBD_CtlSendStatus>
      break;
 800f5e2:	e00a      	b.n	800f5fa <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800f5e4:	6839      	ldr	r1, [r7, #0]
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f000 f8e5 	bl	800f7b6 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800f5ec:	4b04      	ldr	r3, [pc, #16]	; (800f600 <USBD_SetConfig+0x118>)
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	4619      	mov	r1, r3
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f7ff f9ef 	bl	800e9d6 <USBD_ClrClassConfig>
      break;
 800f5f8:	bf00      	nop
    }
  }
}
 800f5fa:	3708      	adds	r7, #8
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	200007b0 	.word	0x200007b0

0800f604 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b082      	sub	sp, #8
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
 800f60c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	88db      	ldrh	r3, [r3, #6]
 800f612:	2b01      	cmp	r3, #1
 800f614:	d004      	beq.n	800f620 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800f616:	6839      	ldr	r1, [r7, #0]
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f000 f8cc 	bl	800f7b6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800f61e:	e021      	b.n	800f664 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f626:	2b01      	cmp	r3, #1
 800f628:	db17      	blt.n	800f65a <USBD_GetConfig+0x56>
 800f62a:	2b02      	cmp	r3, #2
 800f62c:	dd02      	ble.n	800f634 <USBD_GetConfig+0x30>
 800f62e:	2b03      	cmp	r3, #3
 800f630:	d00b      	beq.n	800f64a <USBD_GetConfig+0x46>
 800f632:	e012      	b.n	800f65a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2200      	movs	r2, #0
 800f638:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	3308      	adds	r3, #8
 800f63e:	2201      	movs	r2, #1
 800f640:	4619      	mov	r1, r3
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f000 f922 	bl	800f88c <USBD_CtlSendData>
      break;
 800f648:	e00c      	b.n	800f664 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	3304      	adds	r3, #4
 800f64e:	2201      	movs	r2, #1
 800f650:	4619      	mov	r1, r3
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f000 f91a 	bl	800f88c <USBD_CtlSendData>
      break;
 800f658:	e004      	b.n	800f664 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800f65a:	6839      	ldr	r1, [r7, #0]
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f000 f8aa 	bl	800f7b6 <USBD_CtlError>
      break;
 800f662:	bf00      	nop
}
 800f664:	bf00      	nop
 800f666:	3708      	adds	r7, #8
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}

0800f66c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f67c:	3b01      	subs	r3, #1
 800f67e:	2b02      	cmp	r3, #2
 800f680:	d81e      	bhi.n	800f6c0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	88db      	ldrh	r3, [r3, #6]
 800f686:	2b02      	cmp	r3, #2
 800f688:	d004      	beq.n	800f694 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f68a:	6839      	ldr	r1, [r7, #0]
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f000 f892 	bl	800f7b6 <USBD_CtlError>
      break;
 800f692:	e01a      	b.n	800f6ca <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2201      	movs	r2, #1
 800f698:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d005      	beq.n	800f6b0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	68db      	ldr	r3, [r3, #12]
 800f6a8:	f043 0202 	orr.w	r2, r3, #2
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	330c      	adds	r3, #12
 800f6b4:	2202      	movs	r2, #2
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f000 f8e7 	bl	800f88c <USBD_CtlSendData>
    break;
 800f6be:	e004      	b.n	800f6ca <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800f6c0:	6839      	ldr	r1, [r7, #0]
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 f877 	bl	800f7b6 <USBD_CtlError>
    break;
 800f6c8:	bf00      	nop
  }
}
 800f6ca:	bf00      	nop
 800f6cc:	3708      	adds	r7, #8
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}

0800f6d2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f6d2:	b580      	push	{r7, lr}
 800f6d4:	b082      	sub	sp, #8
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
 800f6da:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	885b      	ldrh	r3, [r3, #2]
 800f6e0:	2b01      	cmp	r3, #1
 800f6e2:	d106      	bne.n	800f6f2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f000 f92b 	bl	800f948 <USBD_CtlSendStatus>
  }

}
 800f6f2:	bf00      	nop
 800f6f4:	3708      	adds	r7, #8
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}

0800f6fa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f6fa:	b580      	push	{r7, lr}
 800f6fc:	b082      	sub	sp, #8
 800f6fe:	af00      	add	r7, sp, #0
 800f700:	6078      	str	r0, [r7, #4]
 800f702:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800f70a:	3b01      	subs	r3, #1
 800f70c:	2b02      	cmp	r3, #2
 800f70e:	d80b      	bhi.n	800f728 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	885b      	ldrh	r3, [r3, #2]
 800f714:	2b01      	cmp	r3, #1
 800f716:	d10c      	bne.n	800f732 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2200      	movs	r2, #0
 800f71c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f000 f911 	bl	800f948 <USBD_CtlSendStatus>
    }
    break;
 800f726:	e004      	b.n	800f732 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800f728:	6839      	ldr	r1, [r7, #0]
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f000 f843 	bl	800f7b6 <USBD_CtlError>
    break;
 800f730:	e000      	b.n	800f734 <USBD_ClrFeature+0x3a>
    break;
 800f732:	bf00      	nop
  }
}
 800f734:	bf00      	nop
 800f736:	3708      	adds	r7, #8
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f73c:	b480      	push	{r7}
 800f73e:	b083      	sub	sp, #12
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	781a      	ldrb	r2, [r3, #0]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	785a      	ldrb	r2, [r3, #1]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	3302      	adds	r3, #2
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	b29a      	uxth	r2, r3
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	3303      	adds	r3, #3
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	b29b      	uxth	r3, r3
 800f766:	021b      	lsls	r3, r3, #8
 800f768:	b29b      	uxth	r3, r3
 800f76a:	4413      	add	r3, r2
 800f76c:	b29a      	uxth	r2, r3
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	3304      	adds	r3, #4
 800f776:	781b      	ldrb	r3, [r3, #0]
 800f778:	b29a      	uxth	r2, r3
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	3305      	adds	r3, #5
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	b29b      	uxth	r3, r3
 800f782:	021b      	lsls	r3, r3, #8
 800f784:	b29b      	uxth	r3, r3
 800f786:	4413      	add	r3, r2
 800f788:	b29a      	uxth	r2, r3
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	3306      	adds	r3, #6
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	b29a      	uxth	r2, r3
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	3307      	adds	r3, #7
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	b29b      	uxth	r3, r3
 800f79e:	021b      	lsls	r3, r3, #8
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	4413      	add	r3, r2
 800f7a4:	b29a      	uxth	r2, r3
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	80da      	strh	r2, [r3, #6]

}
 800f7aa:	bf00      	nop
 800f7ac:	370c      	adds	r7, #12
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b4:	4770      	bx	lr

0800f7b6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800f7b6:	b580      	push	{r7, lr}
 800f7b8:	b082      	sub	sp, #8
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	6078      	str	r0, [r7, #4]
 800f7be:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800f7c0:	2180      	movs	r1, #128	; 0x80
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f005 fecc 	bl	8015560 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800f7c8:	2100      	movs	r1, #0
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f005 fec8 	bl	8015560 <USBD_LL_StallEP>
}
 800f7d0:	bf00      	nop
 800f7d2:	3708      	adds	r7, #8
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b086      	sub	sp, #24
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	60b9      	str	r1, [r7, #8]
 800f7e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d032      	beq.n	800f854 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800f7ee:	68f8      	ldr	r0, [r7, #12]
 800f7f0:	f000 f834 	bl	800f85c <USBD_GetLen>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	b29b      	uxth	r3, r3
 800f7fa:	005b      	lsls	r3, r3, #1
 800f7fc:	b29a      	uxth	r2, r3
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800f802:	7dfb      	ldrb	r3, [r7, #23]
 800f804:	1c5a      	adds	r2, r3, #1
 800f806:	75fa      	strb	r2, [r7, #23]
 800f808:	461a      	mov	r2, r3
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	4413      	add	r3, r2
 800f80e:	687a      	ldr	r2, [r7, #4]
 800f810:	7812      	ldrb	r2, [r2, #0]
 800f812:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800f814:	7dfb      	ldrb	r3, [r7, #23]
 800f816:	1c5a      	adds	r2, r3, #1
 800f818:	75fa      	strb	r2, [r7, #23]
 800f81a:	461a      	mov	r2, r3
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	4413      	add	r3, r2
 800f820:	2203      	movs	r2, #3
 800f822:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800f824:	e012      	b.n	800f84c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	1c5a      	adds	r2, r3, #1
 800f82a:	60fa      	str	r2, [r7, #12]
 800f82c:	7dfa      	ldrb	r2, [r7, #23]
 800f82e:	1c51      	adds	r1, r2, #1
 800f830:	75f9      	strb	r1, [r7, #23]
 800f832:	4611      	mov	r1, r2
 800f834:	68ba      	ldr	r2, [r7, #8]
 800f836:	440a      	add	r2, r1
 800f838:	781b      	ldrb	r3, [r3, #0]
 800f83a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800f83c:	7dfb      	ldrb	r3, [r7, #23]
 800f83e:	1c5a      	adds	r2, r3, #1
 800f840:	75fa      	strb	r2, [r7, #23]
 800f842:	461a      	mov	r2, r3
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	4413      	add	r3, r2
 800f848:	2200      	movs	r2, #0
 800f84a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d1e8      	bne.n	800f826 <USBD_GetString+0x4e>
    }
  }
}
 800f854:	bf00      	nop
 800f856:	3718      	adds	r7, #24
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f85c:	b480      	push	{r7}
 800f85e:	b085      	sub	sp, #20
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800f864:	2300      	movs	r3, #0
 800f866:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800f868:	e005      	b.n	800f876 <USBD_GetLen+0x1a>
    {
        len++;
 800f86a:	7bfb      	ldrb	r3, [r7, #15]
 800f86c:	3301      	adds	r3, #1
 800f86e:	73fb      	strb	r3, [r7, #15]
        buf++;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	3301      	adds	r3, #1
 800f874:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d1f5      	bne.n	800f86a <USBD_GetLen+0xe>
    }

    return len;
 800f87e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f880:	4618      	mov	r0, r3
 800f882:	3714      	adds	r7, #20
 800f884:	46bd      	mov	sp, r7
 800f886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88a:	4770      	bx	lr

0800f88c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b084      	sub	sp, #16
 800f890:	af00      	add	r7, sp, #0
 800f892:	60f8      	str	r0, [r7, #12]
 800f894:	60b9      	str	r1, [r7, #8]
 800f896:	4613      	mov	r3, r2
 800f898:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	2202      	movs	r2, #2
 800f89e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800f8a2:	88fa      	ldrh	r2, [r7, #6]
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800f8a8:	88fa      	ldrh	r2, [r7, #6]
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f8ae:	88fb      	ldrh	r3, [r7, #6]
 800f8b0:	68ba      	ldr	r2, [r7, #8]
 800f8b2:	2100      	movs	r1, #0
 800f8b4:	68f8      	ldr	r0, [r7, #12]
 800f8b6:	f005 fedc 	bl	8015672 <USBD_LL_Transmit>

  return USBD_OK;
 800f8ba:	2300      	movs	r3, #0
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3710      	adds	r7, #16
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b084      	sub	sp, #16
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	60f8      	str	r0, [r7, #12]
 800f8cc:	60b9      	str	r1, [r7, #8]
 800f8ce:	4613      	mov	r3, r2
 800f8d0:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800f8d2:	88fb      	ldrh	r3, [r7, #6]
 800f8d4:	68ba      	ldr	r2, [r7, #8]
 800f8d6:	2100      	movs	r1, #0
 800f8d8:	68f8      	ldr	r0, [r7, #12]
 800f8da:	f005 feca 	bl	8015672 <USBD_LL_Transmit>

  return USBD_OK;
 800f8de:	2300      	movs	r3, #0
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3710      	adds	r7, #16
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	4613      	mov	r3, r2
 800f8f4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2203      	movs	r2, #3
 800f8fa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800f8fe:	88fa      	ldrh	r2, [r7, #6]
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800f906:	88fa      	ldrh	r2, [r7, #6]
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800f90e:	88fb      	ldrh	r3, [r7, #6]
 800f910:	68ba      	ldr	r2, [r7, #8]
 800f912:	2100      	movs	r1, #0
 800f914:	68f8      	ldr	r0, [r7, #12]
 800f916:	f005 fecf 	bl	80156b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f91a:	2300      	movs	r3, #0
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3710      	adds	r7, #16
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b084      	sub	sp, #16
 800f928:	af00      	add	r7, sp, #0
 800f92a:	60f8      	str	r0, [r7, #12]
 800f92c:	60b9      	str	r1, [r7, #8]
 800f92e:	4613      	mov	r3, r2
 800f930:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f932:	88fb      	ldrh	r3, [r7, #6]
 800f934:	68ba      	ldr	r2, [r7, #8]
 800f936:	2100      	movs	r1, #0
 800f938:	68f8      	ldr	r0, [r7, #12]
 800f93a:	f005 febd 	bl	80156b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f93e:	2300      	movs	r3, #0
}
 800f940:	4618      	mov	r0, r3
 800f942:	3710      	adds	r7, #16
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}

0800f948 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2204      	movs	r2, #4
 800f954:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f958:	2300      	movs	r3, #0
 800f95a:	2200      	movs	r2, #0
 800f95c:	2100      	movs	r1, #0
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f005 fe87 	bl	8015672 <USBD_LL_Transmit>

  return USBD_OK;
 800f964:	2300      	movs	r3, #0
}
 800f966:	4618      	mov	r0, r3
 800f968:	3708      	adds	r7, #8
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}

0800f96e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800f96e:	b580      	push	{r7, lr}
 800f970:	b082      	sub	sp, #8
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2205      	movs	r2, #5
 800f97a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800f97e:	2300      	movs	r3, #0
 800f980:	2200      	movs	r2, #0
 800f982:	2100      	movs	r1, #0
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f005 fe97 	bl	80156b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f98a:	2300      	movs	r3, #0
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3708      	adds	r7, #8
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}

0800f994 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	4603      	mov	r3, r0
 800f99c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f99e:	79fb      	ldrb	r3, [r7, #7]
 800f9a0:	4a08      	ldr	r2, [pc, #32]	; (800f9c4 <disk_status+0x30>)
 800f9a2:	009b      	lsls	r3, r3, #2
 800f9a4:	4413      	add	r3, r2
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	685b      	ldr	r3, [r3, #4]
 800f9aa:	79fa      	ldrb	r2, [r7, #7]
 800f9ac:	4905      	ldr	r1, [pc, #20]	; (800f9c4 <disk_status+0x30>)
 800f9ae:	440a      	add	r2, r1
 800f9b0:	7a12      	ldrb	r2, [r2, #8]
 800f9b2:	4610      	mov	r0, r2
 800f9b4:	4798      	blx	r3
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f9ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	200007dc 	.word	0x200007dc

0800f9c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b084      	sub	sp, #16
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f9d6:	79fb      	ldrb	r3, [r7, #7]
 800f9d8:	4a0d      	ldr	r2, [pc, #52]	; (800fa10 <disk_initialize+0x48>)
 800f9da:	5cd3      	ldrb	r3, [r2, r3]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d111      	bne.n	800fa04 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f9e0:	79fb      	ldrb	r3, [r7, #7]
 800f9e2:	4a0b      	ldr	r2, [pc, #44]	; (800fa10 <disk_initialize+0x48>)
 800f9e4:	2101      	movs	r1, #1
 800f9e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f9e8:	79fb      	ldrb	r3, [r7, #7]
 800f9ea:	4a09      	ldr	r2, [pc, #36]	; (800fa10 <disk_initialize+0x48>)
 800f9ec:	009b      	lsls	r3, r3, #2
 800f9ee:	4413      	add	r3, r2
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	79fa      	ldrb	r2, [r7, #7]
 800f9f6:	4906      	ldr	r1, [pc, #24]	; (800fa10 <disk_initialize+0x48>)
 800f9f8:	440a      	add	r2, r1
 800f9fa:	7a12      	ldrb	r2, [r2, #8]
 800f9fc:	4610      	mov	r0, r2
 800f9fe:	4798      	blx	r3
 800fa00:	4603      	mov	r3, r0
 800fa02:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800fa04:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3710      	adds	r7, #16
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
 800fa0e:	bf00      	nop
 800fa10:	200007dc 	.word	0x200007dc

0800fa14 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fa14:	b590      	push	{r4, r7, lr}
 800fa16:	b087      	sub	sp, #28
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	60b9      	str	r1, [r7, #8]
 800fa1c:	607a      	str	r2, [r7, #4]
 800fa1e:	603b      	str	r3, [r7, #0]
 800fa20:	4603      	mov	r3, r0
 800fa22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fa24:	7bfb      	ldrb	r3, [r7, #15]
 800fa26:	4a0a      	ldr	r2, [pc, #40]	; (800fa50 <disk_read+0x3c>)
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	4413      	add	r3, r2
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	689c      	ldr	r4, [r3, #8]
 800fa30:	7bfb      	ldrb	r3, [r7, #15]
 800fa32:	4a07      	ldr	r2, [pc, #28]	; (800fa50 <disk_read+0x3c>)
 800fa34:	4413      	add	r3, r2
 800fa36:	7a18      	ldrb	r0, [r3, #8]
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	687a      	ldr	r2, [r7, #4]
 800fa3c:	68b9      	ldr	r1, [r7, #8]
 800fa3e:	47a0      	blx	r4
 800fa40:	4603      	mov	r3, r0
 800fa42:	75fb      	strb	r3, [r7, #23]
  return res;
 800fa44:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	371c      	adds	r7, #28
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd90      	pop	{r4, r7, pc}
 800fa4e:	bf00      	nop
 800fa50:	200007dc 	.word	0x200007dc

0800fa54 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fa54:	b590      	push	{r4, r7, lr}
 800fa56:	b087      	sub	sp, #28
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	60b9      	str	r1, [r7, #8]
 800fa5c:	607a      	str	r2, [r7, #4]
 800fa5e:	603b      	str	r3, [r7, #0]
 800fa60:	4603      	mov	r3, r0
 800fa62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fa64:	7bfb      	ldrb	r3, [r7, #15]
 800fa66:	4a0a      	ldr	r2, [pc, #40]	; (800fa90 <disk_write+0x3c>)
 800fa68:	009b      	lsls	r3, r3, #2
 800fa6a:	4413      	add	r3, r2
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	68dc      	ldr	r4, [r3, #12]
 800fa70:	7bfb      	ldrb	r3, [r7, #15]
 800fa72:	4a07      	ldr	r2, [pc, #28]	; (800fa90 <disk_write+0x3c>)
 800fa74:	4413      	add	r3, r2
 800fa76:	7a18      	ldrb	r0, [r3, #8]
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	687a      	ldr	r2, [r7, #4]
 800fa7c:	68b9      	ldr	r1, [r7, #8]
 800fa7e:	47a0      	blx	r4
 800fa80:	4603      	mov	r3, r0
 800fa82:	75fb      	strb	r3, [r7, #23]
  return res;
 800fa84:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	371c      	adds	r7, #28
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd90      	pop	{r4, r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	200007dc 	.word	0x200007dc

0800fa94 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b084      	sub	sp, #16
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	603a      	str	r2, [r7, #0]
 800fa9e:	71fb      	strb	r3, [r7, #7]
 800faa0:	460b      	mov	r3, r1
 800faa2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800faa4:	79fb      	ldrb	r3, [r7, #7]
 800faa6:	4a09      	ldr	r2, [pc, #36]	; (800facc <disk_ioctl+0x38>)
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	4413      	add	r3, r2
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	691b      	ldr	r3, [r3, #16]
 800fab0:	79fa      	ldrb	r2, [r7, #7]
 800fab2:	4906      	ldr	r1, [pc, #24]	; (800facc <disk_ioctl+0x38>)
 800fab4:	440a      	add	r2, r1
 800fab6:	7a10      	ldrb	r0, [r2, #8]
 800fab8:	79b9      	ldrb	r1, [r7, #6]
 800faba:	683a      	ldr	r2, [r7, #0]
 800fabc:	4798      	blx	r3
 800fabe:	4603      	mov	r3, r0
 800fac0:	73fb      	strb	r3, [r7, #15]
  return res;
 800fac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3710      	adds	r7, #16
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	200007dc 	.word	0x200007dc

0800fad0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fad0:	b480      	push	{r7}
 800fad2:	b085      	sub	sp, #20
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	3301      	adds	r3, #1
 800fadc:	781b      	ldrb	r3, [r3, #0]
 800fade:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fae0:	89fb      	ldrh	r3, [r7, #14]
 800fae2:	021b      	lsls	r3, r3, #8
 800fae4:	b21a      	sxth	r2, r3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	781b      	ldrb	r3, [r3, #0]
 800faea:	b21b      	sxth	r3, r3
 800faec:	4313      	orrs	r3, r2
 800faee:	b21b      	sxth	r3, r3
 800faf0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800faf2:	89fb      	ldrh	r3, [r7, #14]
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3714      	adds	r7, #20
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr

0800fb00 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fb00:	b480      	push	{r7}
 800fb02:	b085      	sub	sp, #20
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	3303      	adds	r3, #3
 800fb0c:	781b      	ldrb	r3, [r3, #0]
 800fb0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	021b      	lsls	r3, r3, #8
 800fb14:	687a      	ldr	r2, [r7, #4]
 800fb16:	3202      	adds	r2, #2
 800fb18:	7812      	ldrb	r2, [r2, #0]
 800fb1a:	4313      	orrs	r3, r2
 800fb1c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	021b      	lsls	r3, r3, #8
 800fb22:	687a      	ldr	r2, [r7, #4]
 800fb24:	3201      	adds	r2, #1
 800fb26:	7812      	ldrb	r2, [r2, #0]
 800fb28:	4313      	orrs	r3, r2
 800fb2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	021b      	lsls	r3, r3, #8
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	7812      	ldrb	r2, [r2, #0]
 800fb34:	4313      	orrs	r3, r2
 800fb36:	60fb      	str	r3, [r7, #12]
	return rv;
 800fb38:	68fb      	ldr	r3, [r7, #12]
}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3714      	adds	r7, #20
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb44:	4770      	bx	lr

0800fb46 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800fb46:	b480      	push	{r7}
 800fb48:	b083      	sub	sp, #12
 800fb4a:	af00      	add	r7, sp, #0
 800fb4c:	6078      	str	r0, [r7, #4]
 800fb4e:	460b      	mov	r3, r1
 800fb50:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	1c5a      	adds	r2, r3, #1
 800fb56:	607a      	str	r2, [r7, #4]
 800fb58:	887a      	ldrh	r2, [r7, #2]
 800fb5a:	b2d2      	uxtb	r2, r2
 800fb5c:	701a      	strb	r2, [r3, #0]
 800fb5e:	887b      	ldrh	r3, [r7, #2]
 800fb60:	0a1b      	lsrs	r3, r3, #8
 800fb62:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	1c5a      	adds	r2, r3, #1
 800fb68:	607a      	str	r2, [r7, #4]
 800fb6a:	887a      	ldrh	r2, [r7, #2]
 800fb6c:	b2d2      	uxtb	r2, r2
 800fb6e:	701a      	strb	r2, [r3, #0]
}
 800fb70:	bf00      	nop
 800fb72:	370c      	adds	r7, #12
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr

0800fb7c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b083      	sub	sp, #12
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	1c5a      	adds	r2, r3, #1
 800fb8a:	607a      	str	r2, [r7, #4]
 800fb8c:	683a      	ldr	r2, [r7, #0]
 800fb8e:	b2d2      	uxtb	r2, r2
 800fb90:	701a      	strb	r2, [r3, #0]
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	0a1b      	lsrs	r3, r3, #8
 800fb96:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	1c5a      	adds	r2, r3, #1
 800fb9c:	607a      	str	r2, [r7, #4]
 800fb9e:	683a      	ldr	r2, [r7, #0]
 800fba0:	b2d2      	uxtb	r2, r2
 800fba2:	701a      	strb	r2, [r3, #0]
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	0a1b      	lsrs	r3, r3, #8
 800fba8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	1c5a      	adds	r2, r3, #1
 800fbae:	607a      	str	r2, [r7, #4]
 800fbb0:	683a      	ldr	r2, [r7, #0]
 800fbb2:	b2d2      	uxtb	r2, r2
 800fbb4:	701a      	strb	r2, [r3, #0]
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	0a1b      	lsrs	r3, r3, #8
 800fbba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	1c5a      	adds	r2, r3, #1
 800fbc0:	607a      	str	r2, [r7, #4]
 800fbc2:	683a      	ldr	r2, [r7, #0]
 800fbc4:	b2d2      	uxtb	r2, r2
 800fbc6:	701a      	strb	r2, [r3, #0]
}
 800fbc8:	bf00      	nop
 800fbca:	370c      	adds	r7, #12
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd2:	4770      	bx	lr

0800fbd4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800fbd4:	b480      	push	{r7}
 800fbd6:	b087      	sub	sp, #28
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	60f8      	str	r0, [r7, #12]
 800fbdc:	60b9      	str	r1, [r7, #8]
 800fbde:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d00d      	beq.n	800fc0a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800fbee:	693a      	ldr	r2, [r7, #16]
 800fbf0:	1c53      	adds	r3, r2, #1
 800fbf2:	613b      	str	r3, [r7, #16]
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	1c59      	adds	r1, r3, #1
 800fbf8:	6179      	str	r1, [r7, #20]
 800fbfa:	7812      	ldrb	r2, [r2, #0]
 800fbfc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	3b01      	subs	r3, #1
 800fc02:	607b      	str	r3, [r7, #4]
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d1f1      	bne.n	800fbee <mem_cpy+0x1a>
	}
}
 800fc0a:	bf00      	nop
 800fc0c:	371c      	adds	r7, #28
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc14:	4770      	bx	lr

0800fc16 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fc16:	b480      	push	{r7}
 800fc18:	b087      	sub	sp, #28
 800fc1a:	af00      	add	r7, sp, #0
 800fc1c:	60f8      	str	r0, [r7, #12]
 800fc1e:	60b9      	str	r1, [r7, #8]
 800fc20:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	1c5a      	adds	r2, r3, #1
 800fc2a:	617a      	str	r2, [r7, #20]
 800fc2c:	68ba      	ldr	r2, [r7, #8]
 800fc2e:	b2d2      	uxtb	r2, r2
 800fc30:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	3b01      	subs	r3, #1
 800fc36:	607b      	str	r3, [r7, #4]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d1f3      	bne.n	800fc26 <mem_set+0x10>
}
 800fc3e:	bf00      	nop
 800fc40:	371c      	adds	r7, #28
 800fc42:	46bd      	mov	sp, r7
 800fc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc48:	4770      	bx	lr

0800fc4a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fc4a:	b480      	push	{r7}
 800fc4c:	b089      	sub	sp, #36	; 0x24
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	60f8      	str	r0, [r7, #12]
 800fc52:	60b9      	str	r1, [r7, #8]
 800fc54:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	61fb      	str	r3, [r7, #28]
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	1c5a      	adds	r2, r3, #1
 800fc66:	61fa      	str	r2, [r7, #28]
 800fc68:	781b      	ldrb	r3, [r3, #0]
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	69bb      	ldr	r3, [r7, #24]
 800fc6e:	1c5a      	adds	r2, r3, #1
 800fc70:	61ba      	str	r2, [r7, #24]
 800fc72:	781b      	ldrb	r3, [r3, #0]
 800fc74:	1acb      	subs	r3, r1, r3
 800fc76:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	3b01      	subs	r3, #1
 800fc7c:	607b      	str	r3, [r7, #4]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d002      	beq.n	800fc8a <mem_cmp+0x40>
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d0eb      	beq.n	800fc62 <mem_cmp+0x18>

	return r;
 800fc8a:	697b      	ldr	r3, [r7, #20]
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3724      	adds	r7, #36	; 0x24
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr

0800fc98 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fc98:	b480      	push	{r7}
 800fc9a:	b083      	sub	sp, #12
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fca2:	e002      	b.n	800fcaa <chk_chr+0x12>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	3301      	adds	r3, #1
 800fca8:	607b      	str	r3, [r7, #4]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d005      	beq.n	800fcbe <chk_chr+0x26>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	781b      	ldrb	r3, [r3, #0]
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d1f2      	bne.n	800fca4 <chk_chr+0xc>
	return *str;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	781b      	ldrb	r3, [r3, #0]
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	370c      	adds	r7, #12
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fccc:	4770      	bx	lr
	...

0800fcd0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b085      	sub	sp, #20
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fcda:	2300      	movs	r3, #0
 800fcdc:	60bb      	str	r3, [r7, #8]
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	60fb      	str	r3, [r7, #12]
 800fce2:	e029      	b.n	800fd38 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fce4:	4a27      	ldr	r2, [pc, #156]	; (800fd84 <chk_lock+0xb4>)
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	011b      	lsls	r3, r3, #4
 800fcea:	4413      	add	r3, r2
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d01d      	beq.n	800fd2e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fcf2:	4a24      	ldr	r2, [pc, #144]	; (800fd84 <chk_lock+0xb4>)
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	011b      	lsls	r3, r3, #4
 800fcf8:	4413      	add	r3, r2
 800fcfa:	681a      	ldr	r2, [r3, #0]
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d116      	bne.n	800fd32 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fd04:	4a1f      	ldr	r2, [pc, #124]	; (800fd84 <chk_lock+0xb4>)
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	011b      	lsls	r3, r3, #4
 800fd0a:	4413      	add	r3, r2
 800fd0c:	3304      	adds	r3, #4
 800fd0e:	681a      	ldr	r2, [r3, #0]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d10c      	bne.n	800fd32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fd18:	4a1a      	ldr	r2, [pc, #104]	; (800fd84 <chk_lock+0xb4>)
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	011b      	lsls	r3, r3, #4
 800fd1e:	4413      	add	r3, r2
 800fd20:	3308      	adds	r3, #8
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d102      	bne.n	800fd32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fd2c:	e007      	b.n	800fd3e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fd2e:	2301      	movs	r3, #1
 800fd30:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	3301      	adds	r3, #1
 800fd36:	60fb      	str	r3, [r7, #12]
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	d9d2      	bls.n	800fce4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	2b02      	cmp	r3, #2
 800fd42:	d109      	bne.n	800fd58 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d102      	bne.n	800fd50 <chk_lock+0x80>
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	2b02      	cmp	r3, #2
 800fd4e:	d101      	bne.n	800fd54 <chk_lock+0x84>
 800fd50:	2300      	movs	r3, #0
 800fd52:	e010      	b.n	800fd76 <chk_lock+0xa6>
 800fd54:	2312      	movs	r3, #18
 800fd56:	e00e      	b.n	800fd76 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d108      	bne.n	800fd70 <chk_lock+0xa0>
 800fd5e:	4a09      	ldr	r2, [pc, #36]	; (800fd84 <chk_lock+0xb4>)
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	011b      	lsls	r3, r3, #4
 800fd64:	4413      	add	r3, r2
 800fd66:	330c      	adds	r3, #12
 800fd68:	881b      	ldrh	r3, [r3, #0]
 800fd6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd6e:	d101      	bne.n	800fd74 <chk_lock+0xa4>
 800fd70:	2310      	movs	r3, #16
 800fd72:	e000      	b.n	800fd76 <chk_lock+0xa6>
 800fd74:	2300      	movs	r3, #0
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3714      	adds	r7, #20
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	200007bc 	.word	0x200007bc

0800fd88 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b083      	sub	sp, #12
 800fd8c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	607b      	str	r3, [r7, #4]
 800fd92:	e002      	b.n	800fd9a <enq_lock+0x12>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	3301      	adds	r3, #1
 800fd98:	607b      	str	r3, [r7, #4]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2b01      	cmp	r3, #1
 800fd9e:	d806      	bhi.n	800fdae <enq_lock+0x26>
 800fda0:	4a09      	ldr	r2, [pc, #36]	; (800fdc8 <enq_lock+0x40>)
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	011b      	lsls	r3, r3, #4
 800fda6:	4413      	add	r3, r2
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d1f2      	bne.n	800fd94 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2b02      	cmp	r3, #2
 800fdb2:	bf14      	ite	ne
 800fdb4:	2301      	movne	r3, #1
 800fdb6:	2300      	moveq	r3, #0
 800fdb8:	b2db      	uxtb	r3, r3
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	370c      	adds	r7, #12
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc4:	4770      	bx	lr
 800fdc6:	bf00      	nop
 800fdc8:	200007bc 	.word	0x200007bc

0800fdcc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b085      	sub	sp, #20
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	60fb      	str	r3, [r7, #12]
 800fdda:	e01f      	b.n	800fe1c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fddc:	4a41      	ldr	r2, [pc, #260]	; (800fee4 <inc_lock+0x118>)
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	011b      	lsls	r3, r3, #4
 800fde2:	4413      	add	r3, r2
 800fde4:	681a      	ldr	r2, [r3, #0]
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d113      	bne.n	800fe16 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fdee:	4a3d      	ldr	r2, [pc, #244]	; (800fee4 <inc_lock+0x118>)
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	011b      	lsls	r3, r3, #4
 800fdf4:	4413      	add	r3, r2
 800fdf6:	3304      	adds	r3, #4
 800fdf8:	681a      	ldr	r2, [r3, #0]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	d109      	bne.n	800fe16 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fe02:	4a38      	ldr	r2, [pc, #224]	; (800fee4 <inc_lock+0x118>)
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	011b      	lsls	r3, r3, #4
 800fe08:	4413      	add	r3, r2
 800fe0a:	3308      	adds	r3, #8
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d006      	beq.n	800fe24 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	3301      	adds	r3, #1
 800fe1a:	60fb      	str	r3, [r7, #12]
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2b01      	cmp	r3, #1
 800fe20:	d9dc      	bls.n	800fddc <inc_lock+0x10>
 800fe22:	e000      	b.n	800fe26 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fe24:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	2b02      	cmp	r3, #2
 800fe2a:	d132      	bne.n	800fe92 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	60fb      	str	r3, [r7, #12]
 800fe30:	e002      	b.n	800fe38 <inc_lock+0x6c>
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	3301      	adds	r3, #1
 800fe36:	60fb      	str	r3, [r7, #12]
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	2b01      	cmp	r3, #1
 800fe3c:	d806      	bhi.n	800fe4c <inc_lock+0x80>
 800fe3e:	4a29      	ldr	r2, [pc, #164]	; (800fee4 <inc_lock+0x118>)
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	011b      	lsls	r3, r3, #4
 800fe44:	4413      	add	r3, r2
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d1f2      	bne.n	800fe32 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2b02      	cmp	r3, #2
 800fe50:	d101      	bne.n	800fe56 <inc_lock+0x8a>
 800fe52:	2300      	movs	r3, #0
 800fe54:	e040      	b.n	800fed8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	4922      	ldr	r1, [pc, #136]	; (800fee4 <inc_lock+0x118>)
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	011b      	lsls	r3, r3, #4
 800fe60:	440b      	add	r3, r1
 800fe62:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	689a      	ldr	r2, [r3, #8]
 800fe68:	491e      	ldr	r1, [pc, #120]	; (800fee4 <inc_lock+0x118>)
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	011b      	lsls	r3, r3, #4
 800fe6e:	440b      	add	r3, r1
 800fe70:	3304      	adds	r3, #4
 800fe72:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	695a      	ldr	r2, [r3, #20]
 800fe78:	491a      	ldr	r1, [pc, #104]	; (800fee4 <inc_lock+0x118>)
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	011b      	lsls	r3, r3, #4
 800fe7e:	440b      	add	r3, r1
 800fe80:	3308      	adds	r3, #8
 800fe82:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fe84:	4a17      	ldr	r2, [pc, #92]	; (800fee4 <inc_lock+0x118>)
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	011b      	lsls	r3, r3, #4
 800fe8a:	4413      	add	r3, r2
 800fe8c:	330c      	adds	r3, #12
 800fe8e:	2200      	movs	r2, #0
 800fe90:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d009      	beq.n	800feac <inc_lock+0xe0>
 800fe98:	4a12      	ldr	r2, [pc, #72]	; (800fee4 <inc_lock+0x118>)
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	011b      	lsls	r3, r3, #4
 800fe9e:	4413      	add	r3, r2
 800fea0:	330c      	adds	r3, #12
 800fea2:	881b      	ldrh	r3, [r3, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d001      	beq.n	800feac <inc_lock+0xe0>
 800fea8:	2300      	movs	r3, #0
 800feaa:	e015      	b.n	800fed8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d108      	bne.n	800fec4 <inc_lock+0xf8>
 800feb2:	4a0c      	ldr	r2, [pc, #48]	; (800fee4 <inc_lock+0x118>)
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	011b      	lsls	r3, r3, #4
 800feb8:	4413      	add	r3, r2
 800feba:	330c      	adds	r3, #12
 800febc:	881b      	ldrh	r3, [r3, #0]
 800febe:	3301      	adds	r3, #1
 800fec0:	b29a      	uxth	r2, r3
 800fec2:	e001      	b.n	800fec8 <inc_lock+0xfc>
 800fec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fec8:	4906      	ldr	r1, [pc, #24]	; (800fee4 <inc_lock+0x118>)
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	011b      	lsls	r3, r3, #4
 800fece:	440b      	add	r3, r1
 800fed0:	330c      	adds	r3, #12
 800fed2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	3301      	adds	r3, #1
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3714      	adds	r7, #20
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr
 800fee4:	200007bc 	.word	0x200007bc

0800fee8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fee8:	b480      	push	{r7}
 800feea:	b085      	sub	sp, #20
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	3b01      	subs	r3, #1
 800fef4:	607b      	str	r3, [r7, #4]
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d825      	bhi.n	800ff48 <dec_lock+0x60>
		n = Files[i].ctr;
 800fefc:	4a17      	ldr	r2, [pc, #92]	; (800ff5c <dec_lock+0x74>)
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	011b      	lsls	r3, r3, #4
 800ff02:	4413      	add	r3, r2
 800ff04:	330c      	adds	r3, #12
 800ff06:	881b      	ldrh	r3, [r3, #0]
 800ff08:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ff0a:	89fb      	ldrh	r3, [r7, #14]
 800ff0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff10:	d101      	bne.n	800ff16 <dec_lock+0x2e>
 800ff12:	2300      	movs	r3, #0
 800ff14:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ff16:	89fb      	ldrh	r3, [r7, #14]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d002      	beq.n	800ff22 <dec_lock+0x3a>
 800ff1c:	89fb      	ldrh	r3, [r7, #14]
 800ff1e:	3b01      	subs	r3, #1
 800ff20:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ff22:	4a0e      	ldr	r2, [pc, #56]	; (800ff5c <dec_lock+0x74>)
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	011b      	lsls	r3, r3, #4
 800ff28:	4413      	add	r3, r2
 800ff2a:	330c      	adds	r3, #12
 800ff2c:	89fa      	ldrh	r2, [r7, #14]
 800ff2e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ff30:	89fb      	ldrh	r3, [r7, #14]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d105      	bne.n	800ff42 <dec_lock+0x5a>
 800ff36:	4a09      	ldr	r2, [pc, #36]	; (800ff5c <dec_lock+0x74>)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	011b      	lsls	r3, r3, #4
 800ff3c:	4413      	add	r3, r2
 800ff3e:	2200      	movs	r2, #0
 800ff40:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ff42:	2300      	movs	r3, #0
 800ff44:	737b      	strb	r3, [r7, #13]
 800ff46:	e001      	b.n	800ff4c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ff48:	2302      	movs	r3, #2
 800ff4a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ff4c:	7b7b      	ldrb	r3, [r7, #13]
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3714      	adds	r7, #20
 800ff52:	46bd      	mov	sp, r7
 800ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff58:	4770      	bx	lr
 800ff5a:	bf00      	nop
 800ff5c:	200007bc 	.word	0x200007bc

0800ff60 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b085      	sub	sp, #20
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ff68:	2300      	movs	r3, #0
 800ff6a:	60fb      	str	r3, [r7, #12]
 800ff6c:	e010      	b.n	800ff90 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ff6e:	4a0d      	ldr	r2, [pc, #52]	; (800ffa4 <clear_lock+0x44>)
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	011b      	lsls	r3, r3, #4
 800ff74:	4413      	add	r3, r2
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	687a      	ldr	r2, [r7, #4]
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d105      	bne.n	800ff8a <clear_lock+0x2a>
 800ff7e:	4a09      	ldr	r2, [pc, #36]	; (800ffa4 <clear_lock+0x44>)
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	011b      	lsls	r3, r3, #4
 800ff84:	4413      	add	r3, r2
 800ff86:	2200      	movs	r2, #0
 800ff88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	3301      	adds	r3, #1
 800ff8e:	60fb      	str	r3, [r7, #12]
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d9eb      	bls.n	800ff6e <clear_lock+0xe>
	}
}
 800ff96:	bf00      	nop
 800ff98:	3714      	adds	r7, #20
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa0:	4770      	bx	lr
 800ffa2:	bf00      	nop
 800ffa4:	200007bc 	.word	0x200007bc

0800ffa8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b086      	sub	sp, #24
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	78db      	ldrb	r3, [r3, #3]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d034      	beq.n	8010026 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffc0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	7858      	ldrb	r0, [r3, #1]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ffcc:	2301      	movs	r3, #1
 800ffce:	697a      	ldr	r2, [r7, #20]
 800ffd0:	f7ff fd40 	bl	800fa54 <disk_write>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d002      	beq.n	800ffe0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ffda:	2301      	movs	r3, #1
 800ffdc:	73fb      	strb	r3, [r7, #15]
 800ffde:	e022      	b.n	8010026 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffea:	697a      	ldr	r2, [r7, #20]
 800ffec:	1ad2      	subs	r2, r2, r3
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	69db      	ldr	r3, [r3, #28]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d217      	bcs.n	8010026 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	789b      	ldrb	r3, [r3, #2]
 800fffa:	613b      	str	r3, [r7, #16]
 800fffc:	e010      	b.n	8010020 <sync_window+0x78>
					wsect += fs->fsize;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	69db      	ldr	r3, [r3, #28]
 8010002:	697a      	ldr	r2, [r7, #20]
 8010004:	4413      	add	r3, r2
 8010006:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	7858      	ldrb	r0, [r3, #1]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010012:	2301      	movs	r3, #1
 8010014:	697a      	ldr	r2, [r7, #20]
 8010016:	f7ff fd1d 	bl	800fa54 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	3b01      	subs	r3, #1
 801001e:	613b      	str	r3, [r7, #16]
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	2b01      	cmp	r3, #1
 8010024:	d8eb      	bhi.n	800fffe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010026:	7bfb      	ldrb	r3, [r7, #15]
}
 8010028:	4618      	mov	r0, r3
 801002a:	3718      	adds	r7, #24
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}

08010030 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b084      	sub	sp, #16
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801003a:	2300      	movs	r3, #0
 801003c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010042:	683a      	ldr	r2, [r7, #0]
 8010044:	429a      	cmp	r2, r3
 8010046:	d01b      	beq.n	8010080 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f7ff ffad 	bl	800ffa8 <sync_window>
 801004e:	4603      	mov	r3, r0
 8010050:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010052:	7bfb      	ldrb	r3, [r7, #15]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d113      	bne.n	8010080 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	7858      	ldrb	r0, [r3, #1]
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010062:	2301      	movs	r3, #1
 8010064:	683a      	ldr	r2, [r7, #0]
 8010066:	f7ff fcd5 	bl	800fa14 <disk_read>
 801006a:	4603      	mov	r3, r0
 801006c:	2b00      	cmp	r3, #0
 801006e:	d004      	beq.n	801007a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010070:	f04f 33ff 	mov.w	r3, #4294967295
 8010074:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010076:	2301      	movs	r3, #1
 8010078:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	683a      	ldr	r2, [r7, #0]
 801007e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8010080:	7bfb      	ldrb	r3, [r7, #15]
}
 8010082:	4618      	mov	r0, r3
 8010084:	3710      	adds	r7, #16
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
	...

0801008c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b084      	sub	sp, #16
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f7ff ff87 	bl	800ffa8 <sync_window>
 801009a:	4603      	mov	r3, r0
 801009c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801009e:	7bfb      	ldrb	r3, [r7, #15]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d159      	bne.n	8010158 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	2b03      	cmp	r3, #3
 80100aa:	d149      	bne.n	8010140 <sync_fs+0xb4>
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	791b      	ldrb	r3, [r3, #4]
 80100b0:	2b01      	cmp	r3, #1
 80100b2:	d145      	bne.n	8010140 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	899b      	ldrh	r3, [r3, #12]
 80100be:	461a      	mov	r2, r3
 80100c0:	2100      	movs	r1, #0
 80100c2:	f7ff fda8 	bl	800fc16 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	3334      	adds	r3, #52	; 0x34
 80100ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80100ce:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7ff fd37 	bl	800fb46 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	3334      	adds	r3, #52	; 0x34
 80100dc:	4921      	ldr	r1, [pc, #132]	; (8010164 <sync_fs+0xd8>)
 80100de:	4618      	mov	r0, r3
 80100e0:	f7ff fd4c 	bl	800fb7c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	3334      	adds	r3, #52	; 0x34
 80100e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80100ec:	491e      	ldr	r1, [pc, #120]	; (8010168 <sync_fs+0xdc>)
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7ff fd44 	bl	800fb7c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	3334      	adds	r3, #52	; 0x34
 80100f8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	695b      	ldr	r3, [r3, #20]
 8010100:	4619      	mov	r1, r3
 8010102:	4610      	mov	r0, r2
 8010104:	f7ff fd3a 	bl	800fb7c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	3334      	adds	r3, #52	; 0x34
 801010c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	691b      	ldr	r3, [r3, #16]
 8010114:	4619      	mov	r1, r3
 8010116:	4610      	mov	r0, r2
 8010118:	f7ff fd30 	bl	800fb7c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6a1b      	ldr	r3, [r3, #32]
 8010120:	1c5a      	adds	r2, r3, #1
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	7858      	ldrb	r0, [r3, #1]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010134:	2301      	movs	r3, #1
 8010136:	f7ff fc8d 	bl	800fa54 <disk_write>
			fs->fsi_flag = 0;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2200      	movs	r2, #0
 801013e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	785b      	ldrb	r3, [r3, #1]
 8010144:	2200      	movs	r2, #0
 8010146:	2100      	movs	r1, #0
 8010148:	4618      	mov	r0, r3
 801014a:	f7ff fca3 	bl	800fa94 <disk_ioctl>
 801014e:	4603      	mov	r3, r0
 8010150:	2b00      	cmp	r3, #0
 8010152:	d001      	beq.n	8010158 <sync_fs+0xcc>
 8010154:	2301      	movs	r3, #1
 8010156:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010158:	7bfb      	ldrb	r3, [r7, #15]
}
 801015a:	4618      	mov	r0, r3
 801015c:	3710      	adds	r7, #16
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}
 8010162:	bf00      	nop
 8010164:	41615252 	.word	0x41615252
 8010168:	61417272 	.word	0x61417272

0801016c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801016c:	b480      	push	{r7}
 801016e:	b083      	sub	sp, #12
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	3b02      	subs	r3, #2
 801017a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	699b      	ldr	r3, [r3, #24]
 8010180:	3b02      	subs	r3, #2
 8010182:	683a      	ldr	r2, [r7, #0]
 8010184:	429a      	cmp	r2, r3
 8010186:	d301      	bcc.n	801018c <clust2sect+0x20>
 8010188:	2300      	movs	r3, #0
 801018a:	e008      	b.n	801019e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	895b      	ldrh	r3, [r3, #10]
 8010190:	461a      	mov	r2, r3
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	fb03 f202 	mul.w	r2, r3, r2
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801019c:	4413      	add	r3, r2
}
 801019e:	4618      	mov	r0, r3
 80101a0:	370c      	adds	r7, #12
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr

080101aa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80101aa:	b580      	push	{r7, lr}
 80101ac:	b086      	sub	sp, #24
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	6078      	str	r0, [r7, #4]
 80101b2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d904      	bls.n	80101ca <get_fat+0x20>
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	699b      	ldr	r3, [r3, #24]
 80101c4:	683a      	ldr	r2, [r7, #0]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d302      	bcc.n	80101d0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80101ca:	2301      	movs	r3, #1
 80101cc:	617b      	str	r3, [r7, #20]
 80101ce:	e0b7      	b.n	8010340 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80101d0:	f04f 33ff 	mov.w	r3, #4294967295
 80101d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80101d6:	693b      	ldr	r3, [r7, #16]
 80101d8:	781b      	ldrb	r3, [r3, #0]
 80101da:	2b02      	cmp	r3, #2
 80101dc:	d05a      	beq.n	8010294 <get_fat+0xea>
 80101de:	2b03      	cmp	r3, #3
 80101e0:	d07d      	beq.n	80102de <get_fat+0x134>
 80101e2:	2b01      	cmp	r3, #1
 80101e4:	f040 80a2 	bne.w	801032c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	60fb      	str	r3, [r7, #12]
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	085b      	lsrs	r3, r3, #1
 80101f0:	68fa      	ldr	r2, [r7, #12]
 80101f2:	4413      	add	r3, r2
 80101f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101fa:	693b      	ldr	r3, [r7, #16]
 80101fc:	899b      	ldrh	r3, [r3, #12]
 80101fe:	4619      	mov	r1, r3
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	fbb3 f3f1 	udiv	r3, r3, r1
 8010206:	4413      	add	r3, r2
 8010208:	4619      	mov	r1, r3
 801020a:	6938      	ldr	r0, [r7, #16]
 801020c:	f7ff ff10 	bl	8010030 <move_window>
 8010210:	4603      	mov	r3, r0
 8010212:	2b00      	cmp	r3, #0
 8010214:	f040 808d 	bne.w	8010332 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	1c5a      	adds	r2, r3, #1
 801021c:	60fa      	str	r2, [r7, #12]
 801021e:	693a      	ldr	r2, [r7, #16]
 8010220:	8992      	ldrh	r2, [r2, #12]
 8010222:	fbb3 f1f2 	udiv	r1, r3, r2
 8010226:	fb02 f201 	mul.w	r2, r2, r1
 801022a:	1a9b      	subs	r3, r3, r2
 801022c:	693a      	ldr	r2, [r7, #16]
 801022e:	4413      	add	r3, r2
 8010230:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010234:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010236:	693b      	ldr	r3, [r7, #16]
 8010238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	899b      	ldrh	r3, [r3, #12]
 801023e:	4619      	mov	r1, r3
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	fbb3 f3f1 	udiv	r3, r3, r1
 8010246:	4413      	add	r3, r2
 8010248:	4619      	mov	r1, r3
 801024a:	6938      	ldr	r0, [r7, #16]
 801024c:	f7ff fef0 	bl	8010030 <move_window>
 8010250:	4603      	mov	r3, r0
 8010252:	2b00      	cmp	r3, #0
 8010254:	d16f      	bne.n	8010336 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	899b      	ldrh	r3, [r3, #12]
 801025a:	461a      	mov	r2, r3
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010262:	fb02 f201 	mul.w	r2, r2, r1
 8010266:	1a9b      	subs	r3, r3, r2
 8010268:	693a      	ldr	r2, [r7, #16]
 801026a:	4413      	add	r3, r2
 801026c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010270:	021b      	lsls	r3, r3, #8
 8010272:	461a      	mov	r2, r3
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	4313      	orrs	r3, r2
 8010278:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	f003 0301 	and.w	r3, r3, #1
 8010280:	2b00      	cmp	r3, #0
 8010282:	d002      	beq.n	801028a <get_fat+0xe0>
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	091b      	lsrs	r3, r3, #4
 8010288:	e002      	b.n	8010290 <get_fat+0xe6>
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010290:	617b      	str	r3, [r7, #20]
			break;
 8010292:	e055      	b.n	8010340 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010294:	693b      	ldr	r3, [r7, #16]
 8010296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010298:	693b      	ldr	r3, [r7, #16]
 801029a:	899b      	ldrh	r3, [r3, #12]
 801029c:	085b      	lsrs	r3, r3, #1
 801029e:	b29b      	uxth	r3, r3
 80102a0:	4619      	mov	r1, r3
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80102a8:	4413      	add	r3, r2
 80102aa:	4619      	mov	r1, r3
 80102ac:	6938      	ldr	r0, [r7, #16]
 80102ae:	f7ff febf 	bl	8010030 <move_window>
 80102b2:	4603      	mov	r3, r0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d140      	bne.n	801033a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	005b      	lsls	r3, r3, #1
 80102c2:	693a      	ldr	r2, [r7, #16]
 80102c4:	8992      	ldrh	r2, [r2, #12]
 80102c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80102ca:	fb02 f200 	mul.w	r2, r2, r0
 80102ce:	1a9b      	subs	r3, r3, r2
 80102d0:	440b      	add	r3, r1
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7ff fbfc 	bl	800fad0 <ld_word>
 80102d8:	4603      	mov	r3, r0
 80102da:	617b      	str	r3, [r7, #20]
			break;
 80102dc:	e030      	b.n	8010340 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	899b      	ldrh	r3, [r3, #12]
 80102e6:	089b      	lsrs	r3, r3, #2
 80102e8:	b29b      	uxth	r3, r3
 80102ea:	4619      	mov	r1, r3
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80102f2:	4413      	add	r3, r2
 80102f4:	4619      	mov	r1, r3
 80102f6:	6938      	ldr	r0, [r7, #16]
 80102f8:	f7ff fe9a 	bl	8010030 <move_window>
 80102fc:	4603      	mov	r3, r0
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d11d      	bne.n	801033e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010302:	693b      	ldr	r3, [r7, #16]
 8010304:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	009b      	lsls	r3, r3, #2
 801030c:	693a      	ldr	r2, [r7, #16]
 801030e:	8992      	ldrh	r2, [r2, #12]
 8010310:	fbb3 f0f2 	udiv	r0, r3, r2
 8010314:	fb02 f200 	mul.w	r2, r2, r0
 8010318:	1a9b      	subs	r3, r3, r2
 801031a:	440b      	add	r3, r1
 801031c:	4618      	mov	r0, r3
 801031e:	f7ff fbef 	bl	800fb00 <ld_dword>
 8010322:	4603      	mov	r3, r0
 8010324:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010328:	617b      	str	r3, [r7, #20]
			break;
 801032a:	e009      	b.n	8010340 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801032c:	2301      	movs	r3, #1
 801032e:	617b      	str	r3, [r7, #20]
 8010330:	e006      	b.n	8010340 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010332:	bf00      	nop
 8010334:	e004      	b.n	8010340 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010336:	bf00      	nop
 8010338:	e002      	b.n	8010340 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801033a:	bf00      	nop
 801033c:	e000      	b.n	8010340 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801033e:	bf00      	nop
		}
	}

	return val;
 8010340:	697b      	ldr	r3, [r7, #20]
}
 8010342:	4618      	mov	r0, r3
 8010344:	3718      	adds	r7, #24
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}

0801034a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801034a:	b590      	push	{r4, r7, lr}
 801034c:	b089      	sub	sp, #36	; 0x24
 801034e:	af00      	add	r7, sp, #0
 8010350:	60f8      	str	r0, [r7, #12]
 8010352:	60b9      	str	r1, [r7, #8]
 8010354:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010356:	2302      	movs	r3, #2
 8010358:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	2b01      	cmp	r3, #1
 801035e:	f240 8106 	bls.w	801056e <put_fat+0x224>
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	699b      	ldr	r3, [r3, #24]
 8010366:	68ba      	ldr	r2, [r7, #8]
 8010368:	429a      	cmp	r2, r3
 801036a:	f080 8100 	bcs.w	801056e <put_fat+0x224>
		switch (fs->fs_type) {
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	781b      	ldrb	r3, [r3, #0]
 8010372:	2b02      	cmp	r3, #2
 8010374:	f000 8088 	beq.w	8010488 <put_fat+0x13e>
 8010378:	2b03      	cmp	r3, #3
 801037a:	f000 80b0 	beq.w	80104de <put_fat+0x194>
 801037e:	2b01      	cmp	r3, #1
 8010380:	f040 80f5 	bne.w	801056e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	61bb      	str	r3, [r7, #24]
 8010388:	69bb      	ldr	r3, [r7, #24]
 801038a:	085b      	lsrs	r3, r3, #1
 801038c:	69ba      	ldr	r2, [r7, #24]
 801038e:	4413      	add	r3, r2
 8010390:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	899b      	ldrh	r3, [r3, #12]
 801039a:	4619      	mov	r1, r3
 801039c:	69bb      	ldr	r3, [r7, #24]
 801039e:	fbb3 f3f1 	udiv	r3, r3, r1
 80103a2:	4413      	add	r3, r2
 80103a4:	4619      	mov	r1, r3
 80103a6:	68f8      	ldr	r0, [r7, #12]
 80103a8:	f7ff fe42 	bl	8010030 <move_window>
 80103ac:	4603      	mov	r3, r0
 80103ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80103b0:	7ffb      	ldrb	r3, [r7, #31]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	f040 80d4 	bne.w	8010560 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80103be:	69bb      	ldr	r3, [r7, #24]
 80103c0:	1c5a      	adds	r2, r3, #1
 80103c2:	61ba      	str	r2, [r7, #24]
 80103c4:	68fa      	ldr	r2, [r7, #12]
 80103c6:	8992      	ldrh	r2, [r2, #12]
 80103c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80103cc:	fb02 f200 	mul.w	r2, r2, r0
 80103d0:	1a9b      	subs	r3, r3, r2
 80103d2:	440b      	add	r3, r1
 80103d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	f003 0301 	and.w	r3, r3, #1
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d00d      	beq.n	80103fc <put_fat+0xb2>
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	781b      	ldrb	r3, [r3, #0]
 80103e4:	b25b      	sxtb	r3, r3
 80103e6:	f003 030f 	and.w	r3, r3, #15
 80103ea:	b25a      	sxtb	r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	b2db      	uxtb	r3, r3
 80103f0:	011b      	lsls	r3, r3, #4
 80103f2:	b25b      	sxtb	r3, r3
 80103f4:	4313      	orrs	r3, r2
 80103f6:	b25b      	sxtb	r3, r3
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	e001      	b.n	8010400 <put_fat+0xb6>
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	b2db      	uxtb	r3, r3
 8010400:	697a      	ldr	r2, [r7, #20]
 8010402:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2201      	movs	r2, #1
 8010408:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	899b      	ldrh	r3, [r3, #12]
 8010412:	4619      	mov	r1, r3
 8010414:	69bb      	ldr	r3, [r7, #24]
 8010416:	fbb3 f3f1 	udiv	r3, r3, r1
 801041a:	4413      	add	r3, r2
 801041c:	4619      	mov	r1, r3
 801041e:	68f8      	ldr	r0, [r7, #12]
 8010420:	f7ff fe06 	bl	8010030 <move_window>
 8010424:	4603      	mov	r3, r0
 8010426:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010428:	7ffb      	ldrb	r3, [r7, #31]
 801042a:	2b00      	cmp	r3, #0
 801042c:	f040 809a 	bne.w	8010564 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	899b      	ldrh	r3, [r3, #12]
 801043a:	461a      	mov	r2, r3
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010442:	fb02 f200 	mul.w	r2, r2, r0
 8010446:	1a9b      	subs	r3, r3, r2
 8010448:	440b      	add	r3, r1
 801044a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	f003 0301 	and.w	r3, r3, #1
 8010452:	2b00      	cmp	r3, #0
 8010454:	d003      	beq.n	801045e <put_fat+0x114>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	091b      	lsrs	r3, r3, #4
 801045a:	b2db      	uxtb	r3, r3
 801045c:	e00e      	b.n	801047c <put_fat+0x132>
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	b25b      	sxtb	r3, r3
 8010464:	f023 030f 	bic.w	r3, r3, #15
 8010468:	b25a      	sxtb	r2, r3
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	0a1b      	lsrs	r3, r3, #8
 801046e:	b25b      	sxtb	r3, r3
 8010470:	f003 030f 	and.w	r3, r3, #15
 8010474:	b25b      	sxtb	r3, r3
 8010476:	4313      	orrs	r3, r2
 8010478:	b25b      	sxtb	r3, r3
 801047a:	b2db      	uxtb	r3, r3
 801047c:	697a      	ldr	r2, [r7, #20]
 801047e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2201      	movs	r2, #1
 8010484:	70da      	strb	r2, [r3, #3]
			break;
 8010486:	e072      	b.n	801056e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	899b      	ldrh	r3, [r3, #12]
 8010490:	085b      	lsrs	r3, r3, #1
 8010492:	b29b      	uxth	r3, r3
 8010494:	4619      	mov	r1, r3
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	fbb3 f3f1 	udiv	r3, r3, r1
 801049c:	4413      	add	r3, r2
 801049e:	4619      	mov	r1, r3
 80104a0:	68f8      	ldr	r0, [r7, #12]
 80104a2:	f7ff fdc5 	bl	8010030 <move_window>
 80104a6:	4603      	mov	r3, r0
 80104a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80104aa:	7ffb      	ldrb	r3, [r7, #31]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d15b      	bne.n	8010568 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	005b      	lsls	r3, r3, #1
 80104ba:	68fa      	ldr	r2, [r7, #12]
 80104bc:	8992      	ldrh	r2, [r2, #12]
 80104be:	fbb3 f0f2 	udiv	r0, r3, r2
 80104c2:	fb02 f200 	mul.w	r2, r2, r0
 80104c6:	1a9b      	subs	r3, r3, r2
 80104c8:	440b      	add	r3, r1
 80104ca:	687a      	ldr	r2, [r7, #4]
 80104cc:	b292      	uxth	r2, r2
 80104ce:	4611      	mov	r1, r2
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7ff fb38 	bl	800fb46 <st_word>
			fs->wflag = 1;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2201      	movs	r2, #1
 80104da:	70da      	strb	r2, [r3, #3]
			break;
 80104dc:	e047      	b.n	801056e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	899b      	ldrh	r3, [r3, #12]
 80104e6:	089b      	lsrs	r3, r3, #2
 80104e8:	b29b      	uxth	r3, r3
 80104ea:	4619      	mov	r1, r3
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80104f2:	4413      	add	r3, r2
 80104f4:	4619      	mov	r1, r3
 80104f6:	68f8      	ldr	r0, [r7, #12]
 80104f8:	f7ff fd9a 	bl	8010030 <move_window>
 80104fc:	4603      	mov	r3, r0
 80104fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010500:	7ffb      	ldrb	r3, [r7, #31]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d132      	bne.n	801056c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	009b      	lsls	r3, r3, #2
 8010516:	68fa      	ldr	r2, [r7, #12]
 8010518:	8992      	ldrh	r2, [r2, #12]
 801051a:	fbb3 f0f2 	udiv	r0, r3, r2
 801051e:	fb02 f200 	mul.w	r2, r2, r0
 8010522:	1a9b      	subs	r3, r3, r2
 8010524:	440b      	add	r3, r1
 8010526:	4618      	mov	r0, r3
 8010528:	f7ff faea 	bl	800fb00 <ld_dword>
 801052c:	4603      	mov	r3, r0
 801052e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010532:	4323      	orrs	r3, r4
 8010534:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	009b      	lsls	r3, r3, #2
 8010540:	68fa      	ldr	r2, [r7, #12]
 8010542:	8992      	ldrh	r2, [r2, #12]
 8010544:	fbb3 f0f2 	udiv	r0, r3, r2
 8010548:	fb02 f200 	mul.w	r2, r2, r0
 801054c:	1a9b      	subs	r3, r3, r2
 801054e:	440b      	add	r3, r1
 8010550:	6879      	ldr	r1, [r7, #4]
 8010552:	4618      	mov	r0, r3
 8010554:	f7ff fb12 	bl	800fb7c <st_dword>
			fs->wflag = 1;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2201      	movs	r2, #1
 801055c:	70da      	strb	r2, [r3, #3]
			break;
 801055e:	e006      	b.n	801056e <put_fat+0x224>
			if (res != FR_OK) break;
 8010560:	bf00      	nop
 8010562:	e004      	b.n	801056e <put_fat+0x224>
			if (res != FR_OK) break;
 8010564:	bf00      	nop
 8010566:	e002      	b.n	801056e <put_fat+0x224>
			if (res != FR_OK) break;
 8010568:	bf00      	nop
 801056a:	e000      	b.n	801056e <put_fat+0x224>
			if (res != FR_OK) break;
 801056c:	bf00      	nop
		}
	}
	return res;
 801056e:	7ffb      	ldrb	r3, [r7, #31]
}
 8010570:	4618      	mov	r0, r3
 8010572:	3724      	adds	r7, #36	; 0x24
 8010574:	46bd      	mov	sp, r7
 8010576:	bd90      	pop	{r4, r7, pc}

08010578 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b088      	sub	sp, #32
 801057c:	af00      	add	r7, sp, #0
 801057e:	60f8      	str	r0, [r7, #12]
 8010580:	60b9      	str	r1, [r7, #8]
 8010582:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010584:	2300      	movs	r3, #0
 8010586:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	2b01      	cmp	r3, #1
 8010592:	d904      	bls.n	801059e <remove_chain+0x26>
 8010594:	69bb      	ldr	r3, [r7, #24]
 8010596:	699b      	ldr	r3, [r3, #24]
 8010598:	68ba      	ldr	r2, [r7, #8]
 801059a:	429a      	cmp	r2, r3
 801059c:	d301      	bcc.n	80105a2 <remove_chain+0x2a>
 801059e:	2302      	movs	r3, #2
 80105a0:	e04b      	b.n	801063a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d00c      	beq.n	80105c2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80105a8:	f04f 32ff 	mov.w	r2, #4294967295
 80105ac:	6879      	ldr	r1, [r7, #4]
 80105ae:	69b8      	ldr	r0, [r7, #24]
 80105b0:	f7ff fecb 	bl	801034a <put_fat>
 80105b4:	4603      	mov	r3, r0
 80105b6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80105b8:	7ffb      	ldrb	r3, [r7, #31]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d001      	beq.n	80105c2 <remove_chain+0x4a>
 80105be:	7ffb      	ldrb	r3, [r7, #31]
 80105c0:	e03b      	b.n	801063a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80105c2:	68b9      	ldr	r1, [r7, #8]
 80105c4:	68f8      	ldr	r0, [r7, #12]
 80105c6:	f7ff fdf0 	bl	80101aa <get_fat>
 80105ca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80105cc:	697b      	ldr	r3, [r7, #20]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d031      	beq.n	8010636 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	2b01      	cmp	r3, #1
 80105d6:	d101      	bne.n	80105dc <remove_chain+0x64>
 80105d8:	2302      	movs	r3, #2
 80105da:	e02e      	b.n	801063a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105e2:	d101      	bne.n	80105e8 <remove_chain+0x70>
 80105e4:	2301      	movs	r3, #1
 80105e6:	e028      	b.n	801063a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80105e8:	2200      	movs	r2, #0
 80105ea:	68b9      	ldr	r1, [r7, #8]
 80105ec:	69b8      	ldr	r0, [r7, #24]
 80105ee:	f7ff feac 	bl	801034a <put_fat>
 80105f2:	4603      	mov	r3, r0
 80105f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80105f6:	7ffb      	ldrb	r3, [r7, #31]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d001      	beq.n	8010600 <remove_chain+0x88>
 80105fc:	7ffb      	ldrb	r3, [r7, #31]
 80105fe:	e01c      	b.n	801063a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010600:	69bb      	ldr	r3, [r7, #24]
 8010602:	695a      	ldr	r2, [r3, #20]
 8010604:	69bb      	ldr	r3, [r7, #24]
 8010606:	699b      	ldr	r3, [r3, #24]
 8010608:	3b02      	subs	r3, #2
 801060a:	429a      	cmp	r2, r3
 801060c:	d20b      	bcs.n	8010626 <remove_chain+0xae>
			fs->free_clst++;
 801060e:	69bb      	ldr	r3, [r7, #24]
 8010610:	695b      	ldr	r3, [r3, #20]
 8010612:	1c5a      	adds	r2, r3, #1
 8010614:	69bb      	ldr	r3, [r7, #24]
 8010616:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010618:	69bb      	ldr	r3, [r7, #24]
 801061a:	791b      	ldrb	r3, [r3, #4]
 801061c:	f043 0301 	orr.w	r3, r3, #1
 8010620:	b2da      	uxtb	r2, r3
 8010622:	69bb      	ldr	r3, [r7, #24]
 8010624:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801062a:	69bb      	ldr	r3, [r7, #24]
 801062c:	699b      	ldr	r3, [r3, #24]
 801062e:	68ba      	ldr	r2, [r7, #8]
 8010630:	429a      	cmp	r2, r3
 8010632:	d3c6      	bcc.n	80105c2 <remove_chain+0x4a>
 8010634:	e000      	b.n	8010638 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010636:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010638:	2300      	movs	r3, #0
}
 801063a:	4618      	mov	r0, r3
 801063c:	3720      	adds	r7, #32
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}

08010642 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010642:	b580      	push	{r7, lr}
 8010644:	b088      	sub	sp, #32
 8010646:	af00      	add	r7, sp, #0
 8010648:	6078      	str	r0, [r7, #4]
 801064a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d10d      	bne.n	8010674 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	691b      	ldr	r3, [r3, #16]
 801065c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801065e:	69bb      	ldr	r3, [r7, #24]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d004      	beq.n	801066e <create_chain+0x2c>
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	699b      	ldr	r3, [r3, #24]
 8010668:	69ba      	ldr	r2, [r7, #24]
 801066a:	429a      	cmp	r2, r3
 801066c:	d31b      	bcc.n	80106a6 <create_chain+0x64>
 801066e:	2301      	movs	r3, #1
 8010670:	61bb      	str	r3, [r7, #24]
 8010672:	e018      	b.n	80106a6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010674:	6839      	ldr	r1, [r7, #0]
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f7ff fd97 	bl	80101aa <get_fat>
 801067c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	2b01      	cmp	r3, #1
 8010682:	d801      	bhi.n	8010688 <create_chain+0x46>
 8010684:	2301      	movs	r3, #1
 8010686:	e070      	b.n	801076a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801068e:	d101      	bne.n	8010694 <create_chain+0x52>
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	e06a      	b.n	801076a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	699b      	ldr	r3, [r3, #24]
 8010698:	68fa      	ldr	r2, [r7, #12]
 801069a:	429a      	cmp	r2, r3
 801069c:	d201      	bcs.n	80106a2 <create_chain+0x60>
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	e063      	b.n	801076a <create_chain+0x128>
		scl = clst;
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80106a6:	69bb      	ldr	r3, [r7, #24]
 80106a8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80106aa:	69fb      	ldr	r3, [r7, #28]
 80106ac:	3301      	adds	r3, #1
 80106ae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	699b      	ldr	r3, [r3, #24]
 80106b4:	69fa      	ldr	r2, [r7, #28]
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d307      	bcc.n	80106ca <create_chain+0x88>
				ncl = 2;
 80106ba:	2302      	movs	r3, #2
 80106bc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80106be:	69fa      	ldr	r2, [r7, #28]
 80106c0:	69bb      	ldr	r3, [r7, #24]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d901      	bls.n	80106ca <create_chain+0x88>
 80106c6:	2300      	movs	r3, #0
 80106c8:	e04f      	b.n	801076a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80106ca:	69f9      	ldr	r1, [r7, #28]
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f7ff fd6c 	bl	80101aa <get_fat>
 80106d2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d00e      	beq.n	80106f8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	2b01      	cmp	r3, #1
 80106de:	d003      	beq.n	80106e8 <create_chain+0xa6>
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106e6:	d101      	bne.n	80106ec <create_chain+0xaa>
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	e03e      	b.n	801076a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80106ec:	69fa      	ldr	r2, [r7, #28]
 80106ee:	69bb      	ldr	r3, [r7, #24]
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d1da      	bne.n	80106aa <create_chain+0x68>
 80106f4:	2300      	movs	r3, #0
 80106f6:	e038      	b.n	801076a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80106f8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80106fa:	f04f 32ff 	mov.w	r2, #4294967295
 80106fe:	69f9      	ldr	r1, [r7, #28]
 8010700:	6938      	ldr	r0, [r7, #16]
 8010702:	f7ff fe22 	bl	801034a <put_fat>
 8010706:	4603      	mov	r3, r0
 8010708:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801070a:	7dfb      	ldrb	r3, [r7, #23]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d109      	bne.n	8010724 <create_chain+0xe2>
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d006      	beq.n	8010724 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010716:	69fa      	ldr	r2, [r7, #28]
 8010718:	6839      	ldr	r1, [r7, #0]
 801071a:	6938      	ldr	r0, [r7, #16]
 801071c:	f7ff fe15 	bl	801034a <put_fat>
 8010720:	4603      	mov	r3, r0
 8010722:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010724:	7dfb      	ldrb	r3, [r7, #23]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d116      	bne.n	8010758 <create_chain+0x116>
		fs->last_clst = ncl;
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	69fa      	ldr	r2, [r7, #28]
 801072e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010730:	693b      	ldr	r3, [r7, #16]
 8010732:	695a      	ldr	r2, [r3, #20]
 8010734:	693b      	ldr	r3, [r7, #16]
 8010736:	699b      	ldr	r3, [r3, #24]
 8010738:	3b02      	subs	r3, #2
 801073a:	429a      	cmp	r2, r3
 801073c:	d804      	bhi.n	8010748 <create_chain+0x106>
 801073e:	693b      	ldr	r3, [r7, #16]
 8010740:	695b      	ldr	r3, [r3, #20]
 8010742:	1e5a      	subs	r2, r3, #1
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	791b      	ldrb	r3, [r3, #4]
 801074c:	f043 0301 	orr.w	r3, r3, #1
 8010750:	b2da      	uxtb	r2, r3
 8010752:	693b      	ldr	r3, [r7, #16]
 8010754:	711a      	strb	r2, [r3, #4]
 8010756:	e007      	b.n	8010768 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010758:	7dfb      	ldrb	r3, [r7, #23]
 801075a:	2b01      	cmp	r3, #1
 801075c:	d102      	bne.n	8010764 <create_chain+0x122>
 801075e:	f04f 33ff 	mov.w	r3, #4294967295
 8010762:	e000      	b.n	8010766 <create_chain+0x124>
 8010764:	2301      	movs	r3, #1
 8010766:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010768:	69fb      	ldr	r3, [r7, #28]
}
 801076a:	4618      	mov	r0, r3
 801076c:	3720      	adds	r7, #32
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}

08010772 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010772:	b480      	push	{r7}
 8010774:	b087      	sub	sp, #28
 8010776:	af00      	add	r7, sp, #0
 8010778:	6078      	str	r0, [r7, #4]
 801077a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010786:	3304      	adds	r3, #4
 8010788:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	899b      	ldrh	r3, [r3, #12]
 801078e:	461a      	mov	r2, r3
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	fbb3 f3f2 	udiv	r3, r3, r2
 8010796:	68fa      	ldr	r2, [r7, #12]
 8010798:	8952      	ldrh	r2, [r2, #10]
 801079a:	fbb3 f3f2 	udiv	r3, r3, r2
 801079e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	1d1a      	adds	r2, r3, #4
 80107a4:	613a      	str	r2, [r7, #16]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d101      	bne.n	80107b4 <clmt_clust+0x42>
 80107b0:	2300      	movs	r3, #0
 80107b2:	e010      	b.n	80107d6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80107b4:	697a      	ldr	r2, [r7, #20]
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d307      	bcc.n	80107cc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80107bc:	697a      	ldr	r2, [r7, #20]
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	1ad3      	subs	r3, r2, r3
 80107c2:	617b      	str	r3, [r7, #20]
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	3304      	adds	r3, #4
 80107c8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80107ca:	e7e9      	b.n	80107a0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80107cc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80107ce:	693b      	ldr	r3, [r7, #16]
 80107d0:	681a      	ldr	r2, [r3, #0]
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	4413      	add	r3, r2
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	371c      	adds	r7, #28
 80107da:	46bd      	mov	sp, r7
 80107dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e0:	4770      	bx	lr

080107e2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80107e2:	b580      	push	{r7, lr}
 80107e4:	b086      	sub	sp, #24
 80107e6:	af00      	add	r7, sp, #0
 80107e8:	6078      	str	r0, [r7, #4]
 80107ea:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80107f8:	d204      	bcs.n	8010804 <dir_sdi+0x22>
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	f003 031f 	and.w	r3, r3, #31
 8010800:	2b00      	cmp	r3, #0
 8010802:	d001      	beq.n	8010808 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010804:	2302      	movs	r3, #2
 8010806:	e071      	b.n	80108ec <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	683a      	ldr	r2, [r7, #0]
 801080c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	689b      	ldr	r3, [r3, #8]
 8010812:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d106      	bne.n	8010828 <dir_sdi+0x46>
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	2b02      	cmp	r3, #2
 8010820:	d902      	bls.n	8010828 <dir_sdi+0x46>
		clst = fs->dirbase;
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010826:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d10c      	bne.n	8010848 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	095b      	lsrs	r3, r3, #5
 8010832:	693a      	ldr	r2, [r7, #16]
 8010834:	8912      	ldrh	r2, [r2, #8]
 8010836:	4293      	cmp	r3, r2
 8010838:	d301      	bcc.n	801083e <dir_sdi+0x5c>
 801083a:	2302      	movs	r3, #2
 801083c:	e056      	b.n	80108ec <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	61da      	str	r2, [r3, #28]
 8010846:	e02d      	b.n	80108a4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	895b      	ldrh	r3, [r3, #10]
 801084c:	461a      	mov	r2, r3
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	899b      	ldrh	r3, [r3, #12]
 8010852:	fb03 f302 	mul.w	r3, r3, r2
 8010856:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010858:	e019      	b.n	801088e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6979      	ldr	r1, [r7, #20]
 801085e:	4618      	mov	r0, r3
 8010860:	f7ff fca3 	bl	80101aa <get_fat>
 8010864:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	f1b3 3fff 	cmp.w	r3, #4294967295
 801086c:	d101      	bne.n	8010872 <dir_sdi+0x90>
 801086e:	2301      	movs	r3, #1
 8010870:	e03c      	b.n	80108ec <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	2b01      	cmp	r3, #1
 8010876:	d904      	bls.n	8010882 <dir_sdi+0xa0>
 8010878:	693b      	ldr	r3, [r7, #16]
 801087a:	699b      	ldr	r3, [r3, #24]
 801087c:	697a      	ldr	r2, [r7, #20]
 801087e:	429a      	cmp	r2, r3
 8010880:	d301      	bcc.n	8010886 <dir_sdi+0xa4>
 8010882:	2302      	movs	r3, #2
 8010884:	e032      	b.n	80108ec <dir_sdi+0x10a>
			ofs -= csz;
 8010886:	683a      	ldr	r2, [r7, #0]
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	1ad3      	subs	r3, r2, r3
 801088c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801088e:	683a      	ldr	r2, [r7, #0]
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	429a      	cmp	r2, r3
 8010894:	d2e1      	bcs.n	801085a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8010896:	6979      	ldr	r1, [r7, #20]
 8010898:	6938      	ldr	r0, [r7, #16]
 801089a:	f7ff fc67 	bl	801016c <clust2sect>
 801089e:	4602      	mov	r2, r0
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	697a      	ldr	r2, [r7, #20]
 80108a8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	69db      	ldr	r3, [r3, #28]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d101      	bne.n	80108b6 <dir_sdi+0xd4>
 80108b2:	2302      	movs	r3, #2
 80108b4:	e01a      	b.n	80108ec <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	69da      	ldr	r2, [r3, #28]
 80108ba:	693b      	ldr	r3, [r7, #16]
 80108bc:	899b      	ldrh	r3, [r3, #12]
 80108be:	4619      	mov	r1, r3
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80108c6:	441a      	add	r2, r3
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	899b      	ldrh	r3, [r3, #12]
 80108d6:	461a      	mov	r2, r3
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	fbb3 f0f2 	udiv	r0, r3, r2
 80108de:	fb02 f200 	mul.w	r2, r2, r0
 80108e2:	1a9b      	subs	r3, r3, r2
 80108e4:	18ca      	adds	r2, r1, r3
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80108ea:	2300      	movs	r3, #0
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3718      	adds	r7, #24
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b086      	sub	sp, #24
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	695b      	ldr	r3, [r3, #20]
 8010908:	3320      	adds	r3, #32
 801090a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	69db      	ldr	r3, [r3, #28]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d003      	beq.n	801091c <dir_next+0x28>
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801091a:	d301      	bcc.n	8010920 <dir_next+0x2c>
 801091c:	2304      	movs	r3, #4
 801091e:	e0bb      	b.n	8010a98 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	899b      	ldrh	r3, [r3, #12]
 8010924:	461a      	mov	r2, r3
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	fbb3 f1f2 	udiv	r1, r3, r2
 801092c:	fb02 f201 	mul.w	r2, r2, r1
 8010930:	1a9b      	subs	r3, r3, r2
 8010932:	2b00      	cmp	r3, #0
 8010934:	f040 809d 	bne.w	8010a72 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	69db      	ldr	r3, [r3, #28]
 801093c:	1c5a      	adds	r2, r3, #1
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	699b      	ldr	r3, [r3, #24]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d10b      	bne.n	8010962 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	095b      	lsrs	r3, r3, #5
 801094e:	68fa      	ldr	r2, [r7, #12]
 8010950:	8912      	ldrh	r2, [r2, #8]
 8010952:	4293      	cmp	r3, r2
 8010954:	f0c0 808d 	bcc.w	8010a72 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2200      	movs	r2, #0
 801095c:	61da      	str	r2, [r3, #28]
 801095e:	2304      	movs	r3, #4
 8010960:	e09a      	b.n	8010a98 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	899b      	ldrh	r3, [r3, #12]
 8010966:	461a      	mov	r2, r3
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	fbb3 f3f2 	udiv	r3, r3, r2
 801096e:	68fa      	ldr	r2, [r7, #12]
 8010970:	8952      	ldrh	r2, [r2, #10]
 8010972:	3a01      	subs	r2, #1
 8010974:	4013      	ands	r3, r2
 8010976:	2b00      	cmp	r3, #0
 8010978:	d17b      	bne.n	8010a72 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801097a:	687a      	ldr	r2, [r7, #4]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	699b      	ldr	r3, [r3, #24]
 8010980:	4619      	mov	r1, r3
 8010982:	4610      	mov	r0, r2
 8010984:	f7ff fc11 	bl	80101aa <get_fat>
 8010988:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	2b01      	cmp	r3, #1
 801098e:	d801      	bhi.n	8010994 <dir_next+0xa0>
 8010990:	2302      	movs	r3, #2
 8010992:	e081      	b.n	8010a98 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	f1b3 3fff 	cmp.w	r3, #4294967295
 801099a:	d101      	bne.n	80109a0 <dir_next+0xac>
 801099c:	2301      	movs	r3, #1
 801099e:	e07b      	b.n	8010a98 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	699b      	ldr	r3, [r3, #24]
 80109a4:	697a      	ldr	r2, [r7, #20]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d359      	bcc.n	8010a5e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d104      	bne.n	80109ba <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2200      	movs	r2, #0
 80109b4:	61da      	str	r2, [r3, #28]
 80109b6:	2304      	movs	r3, #4
 80109b8:	e06e      	b.n	8010a98 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80109ba:	687a      	ldr	r2, [r7, #4]
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	699b      	ldr	r3, [r3, #24]
 80109c0:	4619      	mov	r1, r3
 80109c2:	4610      	mov	r0, r2
 80109c4:	f7ff fe3d 	bl	8010642 <create_chain>
 80109c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d101      	bne.n	80109d4 <dir_next+0xe0>
 80109d0:	2307      	movs	r3, #7
 80109d2:	e061      	b.n	8010a98 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	2b01      	cmp	r3, #1
 80109d8:	d101      	bne.n	80109de <dir_next+0xea>
 80109da:	2302      	movs	r3, #2
 80109dc:	e05c      	b.n	8010a98 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109e4:	d101      	bne.n	80109ea <dir_next+0xf6>
 80109e6:	2301      	movs	r3, #1
 80109e8:	e056      	b.n	8010a98 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80109ea:	68f8      	ldr	r0, [r7, #12]
 80109ec:	f7ff fadc 	bl	800ffa8 <sync_window>
 80109f0:	4603      	mov	r3, r0
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d001      	beq.n	80109fa <dir_next+0x106>
 80109f6:	2301      	movs	r3, #1
 80109f8:	e04e      	b.n	8010a98 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	899b      	ldrh	r3, [r3, #12]
 8010a04:	461a      	mov	r2, r3
 8010a06:	2100      	movs	r1, #0
 8010a08:	f7ff f905 	bl	800fc16 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	613b      	str	r3, [r7, #16]
 8010a10:	6979      	ldr	r1, [r7, #20]
 8010a12:	68f8      	ldr	r0, [r7, #12]
 8010a14:	f7ff fbaa 	bl	801016c <clust2sect>
 8010a18:	4602      	mov	r2, r0
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8010a1e:	e012      	b.n	8010a46 <dir_next+0x152>
						fs->wflag = 1;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	2201      	movs	r2, #1
 8010a24:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010a26:	68f8      	ldr	r0, [r7, #12]
 8010a28:	f7ff fabe 	bl	800ffa8 <sync_window>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d001      	beq.n	8010a36 <dir_next+0x142>
 8010a32:	2301      	movs	r3, #1
 8010a34:	e030      	b.n	8010a98 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	3301      	adds	r3, #1
 8010a3a:	613b      	str	r3, [r7, #16]
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a40:	1c5a      	adds	r2, r3, #1
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	631a      	str	r2, [r3, #48]	; 0x30
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	895b      	ldrh	r3, [r3, #10]
 8010a4a:	461a      	mov	r2, r3
 8010a4c:	693b      	ldr	r3, [r7, #16]
 8010a4e:	4293      	cmp	r3, r2
 8010a50:	d3e6      	bcc.n	8010a20 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a56:	693b      	ldr	r3, [r7, #16]
 8010a58:	1ad2      	subs	r2, r2, r3
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	697a      	ldr	r2, [r7, #20]
 8010a62:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010a64:	6979      	ldr	r1, [r7, #20]
 8010a66:	68f8      	ldr	r0, [r7, #12]
 8010a68:	f7ff fb80 	bl	801016c <clust2sect>
 8010a6c:	4602      	mov	r2, r0
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	68ba      	ldr	r2, [r7, #8]
 8010a76:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	899b      	ldrh	r3, [r3, #12]
 8010a82:	461a      	mov	r2, r3
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	fbb3 f0f2 	udiv	r0, r3, r2
 8010a8a:	fb02 f200 	mul.w	r2, r2, r0
 8010a8e:	1a9b      	subs	r3, r3, r2
 8010a90:	18ca      	adds	r2, r1, r3
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010a96:	2300      	movs	r3, #0
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3718      	adds	r7, #24
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}

08010aa0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b086      	sub	sp, #24
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010ab0:	2100      	movs	r1, #0
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f7ff fe95 	bl	80107e2 <dir_sdi>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010abc:	7dfb      	ldrb	r3, [r7, #23]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d12b      	bne.n	8010b1a <dir_alloc+0x7a>
		n = 0;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	69db      	ldr	r3, [r3, #28]
 8010aca:	4619      	mov	r1, r3
 8010acc:	68f8      	ldr	r0, [r7, #12]
 8010ace:	f7ff faaf 	bl	8010030 <move_window>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010ad6:	7dfb      	ldrb	r3, [r7, #23]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d11d      	bne.n	8010b18 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	6a1b      	ldr	r3, [r3, #32]
 8010ae0:	781b      	ldrb	r3, [r3, #0]
 8010ae2:	2be5      	cmp	r3, #229	; 0xe5
 8010ae4:	d004      	beq.n	8010af0 <dir_alloc+0x50>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	6a1b      	ldr	r3, [r3, #32]
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d107      	bne.n	8010b00 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	3301      	adds	r3, #1
 8010af4:	613b      	str	r3, [r7, #16]
 8010af6:	693a      	ldr	r2, [r7, #16]
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d102      	bne.n	8010b04 <dir_alloc+0x64>
 8010afe:	e00c      	b.n	8010b1a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010b00:	2300      	movs	r3, #0
 8010b02:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010b04:	2101      	movs	r1, #1
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f7ff fef4 	bl	80108f4 <dir_next>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010b10:	7dfb      	ldrb	r3, [r7, #23]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d0d7      	beq.n	8010ac6 <dir_alloc+0x26>
 8010b16:	e000      	b.n	8010b1a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010b18:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010b1a:	7dfb      	ldrb	r3, [r7, #23]
 8010b1c:	2b04      	cmp	r3, #4
 8010b1e:	d101      	bne.n	8010b24 <dir_alloc+0x84>
 8010b20:	2307      	movs	r3, #7
 8010b22:	75fb      	strb	r3, [r7, #23]
	return res;
 8010b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3718      	adds	r7, #24
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010b2e:	b580      	push	{r7, lr}
 8010b30:	b084      	sub	sp, #16
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	6078      	str	r0, [r7, #4]
 8010b36:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	331a      	adds	r3, #26
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f7fe ffc7 	bl	800fad0 <ld_word>
 8010b42:	4603      	mov	r3, r0
 8010b44:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	2b03      	cmp	r3, #3
 8010b4c:	d109      	bne.n	8010b62 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	3314      	adds	r3, #20
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7fe ffbc 	bl	800fad0 <ld_word>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	041b      	lsls	r3, r3, #16
 8010b5c:	68fa      	ldr	r2, [r7, #12]
 8010b5e:	4313      	orrs	r3, r2
 8010b60:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010b62:	68fb      	ldr	r3, [r7, #12]
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3710      	adds	r7, #16
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}

08010b6c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b084      	sub	sp, #16
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	60f8      	str	r0, [r7, #12]
 8010b74:	60b9      	str	r1, [r7, #8]
 8010b76:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	331a      	adds	r3, #26
 8010b7c:	687a      	ldr	r2, [r7, #4]
 8010b7e:	b292      	uxth	r2, r2
 8010b80:	4611      	mov	r1, r2
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7fe ffdf 	bl	800fb46 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	781b      	ldrb	r3, [r3, #0]
 8010b8c:	2b03      	cmp	r3, #3
 8010b8e:	d109      	bne.n	8010ba4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	f103 0214 	add.w	r2, r3, #20
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	0c1b      	lsrs	r3, r3, #16
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	4610      	mov	r0, r2
 8010ba0:	f7fe ffd1 	bl	800fb46 <st_word>
	}
}
 8010ba4:	bf00      	nop
 8010ba6:	3710      	adds	r7, #16
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}

08010bac <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b086      	sub	sp, #24
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010bba:	2100      	movs	r1, #0
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f7ff fe10 	bl	80107e2 <dir_sdi>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010bc6:	7dfb      	ldrb	r3, [r7, #23]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d001      	beq.n	8010bd0 <dir_find+0x24>
 8010bcc:	7dfb      	ldrb	r3, [r7, #23]
 8010bce:	e03e      	b.n	8010c4e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	69db      	ldr	r3, [r3, #28]
 8010bd4:	4619      	mov	r1, r3
 8010bd6:	6938      	ldr	r0, [r7, #16]
 8010bd8:	f7ff fa2a 	bl	8010030 <move_window>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010be0:	7dfb      	ldrb	r3, [r7, #23]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d12f      	bne.n	8010c46 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	6a1b      	ldr	r3, [r3, #32]
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010bee:	7bfb      	ldrb	r3, [r7, #15]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d102      	bne.n	8010bfa <dir_find+0x4e>
 8010bf4:	2304      	movs	r3, #4
 8010bf6:	75fb      	strb	r3, [r7, #23]
 8010bf8:	e028      	b.n	8010c4c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6a1b      	ldr	r3, [r3, #32]
 8010bfe:	330b      	adds	r3, #11
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c06:	b2da      	uxtb	r2, r3
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	6a1b      	ldr	r3, [r3, #32]
 8010c10:	330b      	adds	r3, #11
 8010c12:	781b      	ldrb	r3, [r3, #0]
 8010c14:	f003 0308 	and.w	r3, r3, #8
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d10a      	bne.n	8010c32 <dir_find+0x86>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6a18      	ldr	r0, [r3, #32]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	3324      	adds	r3, #36	; 0x24
 8010c24:	220b      	movs	r2, #11
 8010c26:	4619      	mov	r1, r3
 8010c28:	f7ff f80f 	bl	800fc4a <mem_cmp>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d00b      	beq.n	8010c4a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010c32:	2100      	movs	r1, #0
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f7ff fe5d 	bl	80108f4 <dir_next>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010c3e:	7dfb      	ldrb	r3, [r7, #23]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d0c5      	beq.n	8010bd0 <dir_find+0x24>
 8010c44:	e002      	b.n	8010c4c <dir_find+0xa0>
		if (res != FR_OK) break;
 8010c46:	bf00      	nop
 8010c48:	e000      	b.n	8010c4c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010c4a:	bf00      	nop

	return res;
 8010c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3718      	adds	r7, #24
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}

08010c56 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010c56:	b580      	push	{r7, lr}
 8010c58:	b084      	sub	sp, #16
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010c64:	2101      	movs	r1, #1
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f7ff ff1a 	bl	8010aa0 <dir_alloc>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010c70:	7bfb      	ldrb	r3, [r7, #15]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d11c      	bne.n	8010cb0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	69db      	ldr	r3, [r3, #28]
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	68b8      	ldr	r0, [r7, #8]
 8010c7e:	f7ff f9d7 	bl	8010030 <move_window>
 8010c82:	4603      	mov	r3, r0
 8010c84:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010c86:	7bfb      	ldrb	r3, [r7, #15]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d111      	bne.n	8010cb0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6a1b      	ldr	r3, [r3, #32]
 8010c90:	2220      	movs	r2, #32
 8010c92:	2100      	movs	r1, #0
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7fe ffbe 	bl	800fc16 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6a18      	ldr	r0, [r3, #32]
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	3324      	adds	r3, #36	; 0x24
 8010ca2:	220b      	movs	r2, #11
 8010ca4:	4619      	mov	r1, r3
 8010ca6:	f7fe ff95 	bl	800fbd4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	2201      	movs	r2, #1
 8010cae:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3710      	adds	r7, #16
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
	...

08010cbc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b088      	sub	sp, #32
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	60fb      	str	r3, [r7, #12]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	3324      	adds	r3, #36	; 0x24
 8010cd0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010cd2:	220b      	movs	r2, #11
 8010cd4:	2120      	movs	r1, #32
 8010cd6:	68b8      	ldr	r0, [r7, #8]
 8010cd8:	f7fe ff9d 	bl	800fc16 <mem_set>
	si = i = 0; ni = 8;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	613b      	str	r3, [r7, #16]
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	617b      	str	r3, [r7, #20]
 8010ce4:	2308      	movs	r3, #8
 8010ce6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	1c5a      	adds	r2, r3, #1
 8010cec:	617a      	str	r2, [r7, #20]
 8010cee:	68fa      	ldr	r2, [r7, #12]
 8010cf0:	4413      	add	r3, r2
 8010cf2:	781b      	ldrb	r3, [r3, #0]
 8010cf4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010cf6:	7ffb      	ldrb	r3, [r7, #31]
 8010cf8:	2b20      	cmp	r3, #32
 8010cfa:	d94e      	bls.n	8010d9a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010cfc:	7ffb      	ldrb	r3, [r7, #31]
 8010cfe:	2b2f      	cmp	r3, #47	; 0x2f
 8010d00:	d006      	beq.n	8010d10 <create_name+0x54>
 8010d02:	7ffb      	ldrb	r3, [r7, #31]
 8010d04:	2b5c      	cmp	r3, #92	; 0x5c
 8010d06:	d110      	bne.n	8010d2a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010d08:	e002      	b.n	8010d10 <create_name+0x54>
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	617b      	str	r3, [r7, #20]
 8010d10:	68fa      	ldr	r2, [r7, #12]
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	4413      	add	r3, r2
 8010d16:	781b      	ldrb	r3, [r3, #0]
 8010d18:	2b2f      	cmp	r3, #47	; 0x2f
 8010d1a:	d0f6      	beq.n	8010d0a <create_name+0x4e>
 8010d1c:	68fa      	ldr	r2, [r7, #12]
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	4413      	add	r3, r2
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	2b5c      	cmp	r3, #92	; 0x5c
 8010d26:	d0f0      	beq.n	8010d0a <create_name+0x4e>
			break;
 8010d28:	e038      	b.n	8010d9c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010d2a:	7ffb      	ldrb	r3, [r7, #31]
 8010d2c:	2b2e      	cmp	r3, #46	; 0x2e
 8010d2e:	d003      	beq.n	8010d38 <create_name+0x7c>
 8010d30:	693a      	ldr	r2, [r7, #16]
 8010d32:	69bb      	ldr	r3, [r7, #24]
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d30c      	bcc.n	8010d52 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010d38:	69bb      	ldr	r3, [r7, #24]
 8010d3a:	2b0b      	cmp	r3, #11
 8010d3c:	d002      	beq.n	8010d44 <create_name+0x88>
 8010d3e:	7ffb      	ldrb	r3, [r7, #31]
 8010d40:	2b2e      	cmp	r3, #46	; 0x2e
 8010d42:	d001      	beq.n	8010d48 <create_name+0x8c>
 8010d44:	2306      	movs	r3, #6
 8010d46:	e044      	b.n	8010dd2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010d48:	2308      	movs	r3, #8
 8010d4a:	613b      	str	r3, [r7, #16]
 8010d4c:	230b      	movs	r3, #11
 8010d4e:	61bb      	str	r3, [r7, #24]
			continue;
 8010d50:	e022      	b.n	8010d98 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010d52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	da04      	bge.n	8010d64 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010d5a:	7ffb      	ldrb	r3, [r7, #31]
 8010d5c:	3b80      	subs	r3, #128	; 0x80
 8010d5e:	4a1f      	ldr	r2, [pc, #124]	; (8010ddc <create_name+0x120>)
 8010d60:	5cd3      	ldrb	r3, [r2, r3]
 8010d62:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010d64:	7ffb      	ldrb	r3, [r7, #31]
 8010d66:	4619      	mov	r1, r3
 8010d68:	481d      	ldr	r0, [pc, #116]	; (8010de0 <create_name+0x124>)
 8010d6a:	f7fe ff95 	bl	800fc98 <chk_chr>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d001      	beq.n	8010d78 <create_name+0xbc>
 8010d74:	2306      	movs	r3, #6
 8010d76:	e02c      	b.n	8010dd2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010d78:	7ffb      	ldrb	r3, [r7, #31]
 8010d7a:	2b60      	cmp	r3, #96	; 0x60
 8010d7c:	d905      	bls.n	8010d8a <create_name+0xce>
 8010d7e:	7ffb      	ldrb	r3, [r7, #31]
 8010d80:	2b7a      	cmp	r3, #122	; 0x7a
 8010d82:	d802      	bhi.n	8010d8a <create_name+0xce>
 8010d84:	7ffb      	ldrb	r3, [r7, #31]
 8010d86:	3b20      	subs	r3, #32
 8010d88:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	1c5a      	adds	r2, r3, #1
 8010d8e:	613a      	str	r2, [r7, #16]
 8010d90:	68ba      	ldr	r2, [r7, #8]
 8010d92:	4413      	add	r3, r2
 8010d94:	7ffa      	ldrb	r2, [r7, #31]
 8010d96:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010d98:	e7a6      	b.n	8010ce8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010d9a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010d9c:	68fa      	ldr	r2, [r7, #12]
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	441a      	add	r2, r3
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d101      	bne.n	8010db0 <create_name+0xf4>
 8010dac:	2306      	movs	r3, #6
 8010dae:	e010      	b.n	8010dd2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	781b      	ldrb	r3, [r3, #0]
 8010db4:	2be5      	cmp	r3, #229	; 0xe5
 8010db6:	d102      	bne.n	8010dbe <create_name+0x102>
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	2205      	movs	r2, #5
 8010dbc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010dbe:	7ffb      	ldrb	r3, [r7, #31]
 8010dc0:	2b20      	cmp	r3, #32
 8010dc2:	d801      	bhi.n	8010dc8 <create_name+0x10c>
 8010dc4:	2204      	movs	r2, #4
 8010dc6:	e000      	b.n	8010dca <create_name+0x10e>
 8010dc8:	2200      	movs	r2, #0
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	330b      	adds	r3, #11
 8010dce:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010dd0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3720      	adds	r7, #32
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}
 8010dda:	bf00      	nop
 8010ddc:	0801be78 	.word	0x0801be78
 8010de0:	0801b89c 	.word	0x0801b89c

08010de4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b086      	sub	sp, #24
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010df8:	e002      	b.n	8010e00 <follow_path+0x1c>
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	3301      	adds	r3, #1
 8010dfe:	603b      	str	r3, [r7, #0]
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	2b2f      	cmp	r3, #47	; 0x2f
 8010e06:	d0f8      	beq.n	8010dfa <follow_path+0x16>
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	2b5c      	cmp	r3, #92	; 0x5c
 8010e0e:	d0f4      	beq.n	8010dfa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	2200      	movs	r2, #0
 8010e14:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	2b1f      	cmp	r3, #31
 8010e1c:	d80a      	bhi.n	8010e34 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	2280      	movs	r2, #128	; 0x80
 8010e22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010e26:	2100      	movs	r1, #0
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f7ff fcda 	bl	80107e2 <dir_sdi>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	75fb      	strb	r3, [r7, #23]
 8010e32:	e048      	b.n	8010ec6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010e34:	463b      	mov	r3, r7
 8010e36:	4619      	mov	r1, r3
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f7ff ff3f 	bl	8010cbc <create_name>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010e42:	7dfb      	ldrb	r3, [r7, #23]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d139      	bne.n	8010ebc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f7ff feaf 	bl	8010bac <dir_find>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010e58:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010e5a:	7dfb      	ldrb	r3, [r7, #23]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d00a      	beq.n	8010e76 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010e60:	7dfb      	ldrb	r3, [r7, #23]
 8010e62:	2b04      	cmp	r3, #4
 8010e64:	d12c      	bne.n	8010ec0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010e66:	7afb      	ldrb	r3, [r7, #11]
 8010e68:	f003 0304 	and.w	r3, r3, #4
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d127      	bne.n	8010ec0 <follow_path+0xdc>
 8010e70:	2305      	movs	r3, #5
 8010e72:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010e74:	e024      	b.n	8010ec0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010e76:	7afb      	ldrb	r3, [r7, #11]
 8010e78:	f003 0304 	and.w	r3, r3, #4
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d121      	bne.n	8010ec4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010e80:	693b      	ldr	r3, [r7, #16]
 8010e82:	799b      	ldrb	r3, [r3, #6]
 8010e84:	f003 0310 	and.w	r3, r3, #16
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d102      	bne.n	8010e92 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010e8c:	2305      	movs	r3, #5
 8010e8e:	75fb      	strb	r3, [r7, #23]
 8010e90:	e019      	b.n	8010ec6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	695b      	ldr	r3, [r3, #20]
 8010e9c:	68fa      	ldr	r2, [r7, #12]
 8010e9e:	8992      	ldrh	r2, [r2, #12]
 8010ea0:	fbb3 f0f2 	udiv	r0, r3, r2
 8010ea4:	fb02 f200 	mul.w	r2, r2, r0
 8010ea8:	1a9b      	subs	r3, r3, r2
 8010eaa:	440b      	add	r3, r1
 8010eac:	4619      	mov	r1, r3
 8010eae:	68f8      	ldr	r0, [r7, #12]
 8010eb0:	f7ff fe3d 	bl	8010b2e <ld_clust>
 8010eb4:	4602      	mov	r2, r0
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010eba:	e7bb      	b.n	8010e34 <follow_path+0x50>
			if (res != FR_OK) break;
 8010ebc:	bf00      	nop
 8010ebe:	e002      	b.n	8010ec6 <follow_path+0xe2>
				break;
 8010ec0:	bf00      	nop
 8010ec2:	e000      	b.n	8010ec6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010ec4:	bf00      	nop
			}
		}
	}

	return res;
 8010ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3718      	adds	r7, #24
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}

08010ed0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b087      	sub	sp, #28
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8010edc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d031      	beq.n	8010f4a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	617b      	str	r3, [r7, #20]
 8010eec:	e002      	b.n	8010ef4 <get_ldnumber+0x24>
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	617b      	str	r3, [r7, #20]
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	781b      	ldrb	r3, [r3, #0]
 8010ef8:	2b20      	cmp	r3, #32
 8010efa:	d903      	bls.n	8010f04 <get_ldnumber+0x34>
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	781b      	ldrb	r3, [r3, #0]
 8010f00:	2b3a      	cmp	r3, #58	; 0x3a
 8010f02:	d1f4      	bne.n	8010eee <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	2b3a      	cmp	r3, #58	; 0x3a
 8010f0a:	d11c      	bne.n	8010f46 <get_ldnumber+0x76>
			tp = *path;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	1c5a      	adds	r2, r3, #1
 8010f16:	60fa      	str	r2, [r7, #12]
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	3b30      	subs	r3, #48	; 0x30
 8010f1c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010f1e:	68bb      	ldr	r3, [r7, #8]
 8010f20:	2b09      	cmp	r3, #9
 8010f22:	d80e      	bhi.n	8010f42 <get_ldnumber+0x72>
 8010f24:	68fa      	ldr	r2, [r7, #12]
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d10a      	bne.n	8010f42 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d107      	bne.n	8010f42 <get_ldnumber+0x72>
					vol = (int)i;
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	3301      	adds	r3, #1
 8010f3a:	617b      	str	r3, [r7, #20]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	697a      	ldr	r2, [r7, #20]
 8010f40:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	e002      	b.n	8010f4c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010f46:	2300      	movs	r3, #0
 8010f48:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010f4a:	693b      	ldr	r3, [r7, #16]
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	371c      	adds	r7, #28
 8010f50:	46bd      	mov	sp, r7
 8010f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f56:	4770      	bx	lr

08010f58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b082      	sub	sp, #8
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
 8010f60:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2200      	movs	r2, #0
 8010f66:	70da      	strb	r2, [r3, #3]
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8010f6e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010f70:	6839      	ldr	r1, [r7, #0]
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f7ff f85c 	bl	8010030 <move_window>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d001      	beq.n	8010f82 <check_fs+0x2a>
 8010f7e:	2304      	movs	r3, #4
 8010f80:	e038      	b.n	8010ff4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	3334      	adds	r3, #52	; 0x34
 8010f86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fe fda0 	bl	800fad0 <ld_word>
 8010f90:	4603      	mov	r3, r0
 8010f92:	461a      	mov	r2, r3
 8010f94:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	d001      	beq.n	8010fa0 <check_fs+0x48>
 8010f9c:	2303      	movs	r3, #3
 8010f9e:	e029      	b.n	8010ff4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010fa6:	2be9      	cmp	r3, #233	; 0xe9
 8010fa8:	d009      	beq.n	8010fbe <check_fs+0x66>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010fb0:	2beb      	cmp	r3, #235	; 0xeb
 8010fb2:	d11e      	bne.n	8010ff2 <check_fs+0x9a>
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010fba:	2b90      	cmp	r3, #144	; 0x90
 8010fbc:	d119      	bne.n	8010ff2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	3334      	adds	r3, #52	; 0x34
 8010fc2:	3336      	adds	r3, #54	; 0x36
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7fe fd9b 	bl	800fb00 <ld_dword>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010fd0:	4a0a      	ldr	r2, [pc, #40]	; (8010ffc <check_fs+0xa4>)
 8010fd2:	4293      	cmp	r3, r2
 8010fd4:	d101      	bne.n	8010fda <check_fs+0x82>
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	e00c      	b.n	8010ff4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	3334      	adds	r3, #52	; 0x34
 8010fde:	3352      	adds	r3, #82	; 0x52
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7fe fd8d 	bl	800fb00 <ld_dword>
 8010fe6:	4602      	mov	r2, r0
 8010fe8:	4b05      	ldr	r3, [pc, #20]	; (8011000 <check_fs+0xa8>)
 8010fea:	429a      	cmp	r2, r3
 8010fec:	d101      	bne.n	8010ff2 <check_fs+0x9a>
 8010fee:	2300      	movs	r3, #0
 8010ff0:	e000      	b.n	8010ff4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010ff2:	2302      	movs	r3, #2
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3708      	adds	r7, #8
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}
 8010ffc:	00544146 	.word	0x00544146
 8011000:	33544146 	.word	0x33544146

08011004 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b096      	sub	sp, #88	; 0x58
 8011008:	af00      	add	r7, sp, #0
 801100a:	60f8      	str	r0, [r7, #12]
 801100c:	60b9      	str	r1, [r7, #8]
 801100e:	4613      	mov	r3, r2
 8011010:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	2200      	movs	r2, #0
 8011016:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011018:	68f8      	ldr	r0, [r7, #12]
 801101a:	f7ff ff59 	bl	8010ed0 <get_ldnumber>
 801101e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011022:	2b00      	cmp	r3, #0
 8011024:	da01      	bge.n	801102a <find_volume+0x26>
 8011026:	230b      	movs	r3, #11
 8011028:	e265      	b.n	80114f6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801102a:	4ab0      	ldr	r2, [pc, #704]	; (80112ec <find_volume+0x2e8>)
 801102c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801102e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011032:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011036:	2b00      	cmp	r3, #0
 8011038:	d101      	bne.n	801103e <find_volume+0x3a>
 801103a:	230c      	movs	r3, #12
 801103c:	e25b      	b.n	80114f6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011042:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011044:	79fb      	ldrb	r3, [r7, #7]
 8011046:	f023 0301 	bic.w	r3, r3, #1
 801104a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801104c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d01a      	beq.n	801108a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011056:	785b      	ldrb	r3, [r3, #1]
 8011058:	4618      	mov	r0, r3
 801105a:	f7fe fc9b 	bl	800f994 <disk_status>
 801105e:	4603      	mov	r3, r0
 8011060:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011064:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011068:	f003 0301 	and.w	r3, r3, #1
 801106c:	2b00      	cmp	r3, #0
 801106e:	d10c      	bne.n	801108a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011070:	79fb      	ldrb	r3, [r7, #7]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d007      	beq.n	8011086 <find_volume+0x82>
 8011076:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801107a:	f003 0304 	and.w	r3, r3, #4
 801107e:	2b00      	cmp	r3, #0
 8011080:	d001      	beq.n	8011086 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011082:	230a      	movs	r3, #10
 8011084:	e237      	b.n	80114f6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8011086:	2300      	movs	r3, #0
 8011088:	e235      	b.n	80114f6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801108a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801108c:	2200      	movs	r2, #0
 801108e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011092:	b2da      	uxtb	r2, r3
 8011094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011096:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801109a:	785b      	ldrb	r3, [r3, #1]
 801109c:	4618      	mov	r0, r3
 801109e:	f7fe fc93 	bl	800f9c8 <disk_initialize>
 80110a2:	4603      	mov	r3, r0
 80110a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80110a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80110ac:	f003 0301 	and.w	r3, r3, #1
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d001      	beq.n	80110b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80110b4:	2303      	movs	r3, #3
 80110b6:	e21e      	b.n	80114f6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80110b8:	79fb      	ldrb	r3, [r7, #7]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d007      	beq.n	80110ce <find_volume+0xca>
 80110be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80110c2:	f003 0304 	and.w	r3, r3, #4
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d001      	beq.n	80110ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80110ca:	230a      	movs	r3, #10
 80110cc:	e213      	b.n	80114f6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80110ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d0:	7858      	ldrb	r0, [r3, #1]
 80110d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d4:	330c      	adds	r3, #12
 80110d6:	461a      	mov	r2, r3
 80110d8:	2102      	movs	r1, #2
 80110da:	f7fe fcdb 	bl	800fa94 <disk_ioctl>
 80110de:	4603      	mov	r3, r0
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d001      	beq.n	80110e8 <find_volume+0xe4>
 80110e4:	2301      	movs	r3, #1
 80110e6:	e206      	b.n	80114f6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80110e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ea:	899b      	ldrh	r3, [r3, #12]
 80110ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80110f0:	d80d      	bhi.n	801110e <find_volume+0x10a>
 80110f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110f4:	899b      	ldrh	r3, [r3, #12]
 80110f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110fa:	d308      	bcc.n	801110e <find_volume+0x10a>
 80110fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110fe:	899b      	ldrh	r3, [r3, #12]
 8011100:	461a      	mov	r2, r3
 8011102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011104:	899b      	ldrh	r3, [r3, #12]
 8011106:	3b01      	subs	r3, #1
 8011108:	4013      	ands	r3, r2
 801110a:	2b00      	cmp	r3, #0
 801110c:	d001      	beq.n	8011112 <find_volume+0x10e>
 801110e:	2301      	movs	r3, #1
 8011110:	e1f1      	b.n	80114f6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011112:	2300      	movs	r3, #0
 8011114:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011116:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011118:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801111a:	f7ff ff1d 	bl	8010f58 <check_fs>
 801111e:	4603      	mov	r3, r0
 8011120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011124:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011128:	2b02      	cmp	r3, #2
 801112a:	d14b      	bne.n	80111c4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801112c:	2300      	movs	r3, #0
 801112e:	643b      	str	r3, [r7, #64]	; 0x40
 8011130:	e01f      	b.n	8011172 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011134:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801113a:	011b      	lsls	r3, r3, #4
 801113c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011140:	4413      	add	r3, r2
 8011142:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011146:	3304      	adds	r3, #4
 8011148:	781b      	ldrb	r3, [r3, #0]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d006      	beq.n	801115c <find_volume+0x158>
 801114e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011150:	3308      	adds	r3, #8
 8011152:	4618      	mov	r0, r3
 8011154:	f7fe fcd4 	bl	800fb00 <ld_dword>
 8011158:	4602      	mov	r2, r0
 801115a:	e000      	b.n	801115e <find_volume+0x15a>
 801115c:	2200      	movs	r2, #0
 801115e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011160:	009b      	lsls	r3, r3, #2
 8011162:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011166:	440b      	add	r3, r1
 8011168:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801116c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801116e:	3301      	adds	r3, #1
 8011170:	643b      	str	r3, [r7, #64]	; 0x40
 8011172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011174:	2b03      	cmp	r3, #3
 8011176:	d9dc      	bls.n	8011132 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011178:	2300      	movs	r3, #0
 801117a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801117c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801117e:	2b00      	cmp	r3, #0
 8011180:	d002      	beq.n	8011188 <find_volume+0x184>
 8011182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011184:	3b01      	subs	r3, #1
 8011186:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801118a:	009b      	lsls	r3, r3, #2
 801118c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011190:	4413      	add	r3, r2
 8011192:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011196:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801119a:	2b00      	cmp	r3, #0
 801119c:	d005      	beq.n	80111aa <find_volume+0x1a6>
 801119e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80111a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80111a2:	f7ff fed9 	bl	8010f58 <check_fs>
 80111a6:	4603      	mov	r3, r0
 80111a8:	e000      	b.n	80111ac <find_volume+0x1a8>
 80111aa:	2303      	movs	r3, #3
 80111ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80111b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111b4:	2b01      	cmp	r3, #1
 80111b6:	d905      	bls.n	80111c4 <find_volume+0x1c0>
 80111b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111ba:	3301      	adds	r3, #1
 80111bc:	643b      	str	r3, [r7, #64]	; 0x40
 80111be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111c0:	2b03      	cmp	r3, #3
 80111c2:	d9e1      	bls.n	8011188 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80111c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111c8:	2b04      	cmp	r3, #4
 80111ca:	d101      	bne.n	80111d0 <find_volume+0x1cc>
 80111cc:	2301      	movs	r3, #1
 80111ce:	e192      	b.n	80114f6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80111d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111d4:	2b01      	cmp	r3, #1
 80111d6:	d901      	bls.n	80111dc <find_volume+0x1d8>
 80111d8:	230d      	movs	r3, #13
 80111da:	e18c      	b.n	80114f6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80111dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111de:	3334      	adds	r3, #52	; 0x34
 80111e0:	330b      	adds	r3, #11
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7fe fc74 	bl	800fad0 <ld_word>
 80111e8:	4603      	mov	r3, r0
 80111ea:	461a      	mov	r2, r3
 80111ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ee:	899b      	ldrh	r3, [r3, #12]
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d001      	beq.n	80111f8 <find_volume+0x1f4>
 80111f4:	230d      	movs	r3, #13
 80111f6:	e17e      	b.n	80114f6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80111f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fa:	3334      	adds	r3, #52	; 0x34
 80111fc:	3316      	adds	r3, #22
 80111fe:	4618      	mov	r0, r3
 8011200:	f7fe fc66 	bl	800fad0 <ld_word>
 8011204:	4603      	mov	r3, r0
 8011206:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801120a:	2b00      	cmp	r3, #0
 801120c:	d106      	bne.n	801121c <find_volume+0x218>
 801120e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011210:	3334      	adds	r3, #52	; 0x34
 8011212:	3324      	adds	r3, #36	; 0x24
 8011214:	4618      	mov	r0, r3
 8011216:	f7fe fc73 	bl	800fb00 <ld_dword>
 801121a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801121c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801121e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011220:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011224:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801122a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801122c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801122e:	789b      	ldrb	r3, [r3, #2]
 8011230:	2b01      	cmp	r3, #1
 8011232:	d005      	beq.n	8011240 <find_volume+0x23c>
 8011234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011236:	789b      	ldrb	r3, [r3, #2]
 8011238:	2b02      	cmp	r3, #2
 801123a:	d001      	beq.n	8011240 <find_volume+0x23c>
 801123c:	230d      	movs	r3, #13
 801123e:	e15a      	b.n	80114f6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011242:	789b      	ldrb	r3, [r3, #2]
 8011244:	461a      	mov	r2, r3
 8011246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011248:	fb02 f303 	mul.w	r3, r2, r3
 801124c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801124e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011254:	b29a      	uxth	r2, r3
 8011256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011258:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801125a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801125c:	895b      	ldrh	r3, [r3, #10]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d008      	beq.n	8011274 <find_volume+0x270>
 8011262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011264:	895b      	ldrh	r3, [r3, #10]
 8011266:	461a      	mov	r2, r3
 8011268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801126a:	895b      	ldrh	r3, [r3, #10]
 801126c:	3b01      	subs	r3, #1
 801126e:	4013      	ands	r3, r2
 8011270:	2b00      	cmp	r3, #0
 8011272:	d001      	beq.n	8011278 <find_volume+0x274>
 8011274:	230d      	movs	r3, #13
 8011276:	e13e      	b.n	80114f6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127a:	3334      	adds	r3, #52	; 0x34
 801127c:	3311      	adds	r3, #17
 801127e:	4618      	mov	r0, r3
 8011280:	f7fe fc26 	bl	800fad0 <ld_word>
 8011284:	4603      	mov	r3, r0
 8011286:	461a      	mov	r2, r3
 8011288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801128a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801128c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801128e:	891b      	ldrh	r3, [r3, #8]
 8011290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011292:	8992      	ldrh	r2, [r2, #12]
 8011294:	0952      	lsrs	r2, r2, #5
 8011296:	b292      	uxth	r2, r2
 8011298:	fbb3 f1f2 	udiv	r1, r3, r2
 801129c:	fb02 f201 	mul.w	r2, r2, r1
 80112a0:	1a9b      	subs	r3, r3, r2
 80112a2:	b29b      	uxth	r3, r3
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d001      	beq.n	80112ac <find_volume+0x2a8>
 80112a8:	230d      	movs	r3, #13
 80112aa:	e124      	b.n	80114f6 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80112ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ae:	3334      	adds	r3, #52	; 0x34
 80112b0:	3313      	adds	r3, #19
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7fe fc0c 	bl	800fad0 <ld_word>
 80112b8:	4603      	mov	r3, r0
 80112ba:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80112bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d106      	bne.n	80112d0 <find_volume+0x2cc>
 80112c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c4:	3334      	adds	r3, #52	; 0x34
 80112c6:	3320      	adds	r3, #32
 80112c8:	4618      	mov	r0, r3
 80112ca:	f7fe fc19 	bl	800fb00 <ld_dword>
 80112ce:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80112d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d2:	3334      	adds	r3, #52	; 0x34
 80112d4:	330e      	adds	r3, #14
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7fe fbfa 	bl	800fad0 <ld_word>
 80112dc:	4603      	mov	r3, r0
 80112de:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80112e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d104      	bne.n	80112f0 <find_volume+0x2ec>
 80112e6:	230d      	movs	r3, #13
 80112e8:	e105      	b.n	80114f6 <find_volume+0x4f2>
 80112ea:	bf00      	nop
 80112ec:	200007b4 	.word	0x200007b4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80112f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80112f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112f4:	4413      	add	r3, r2
 80112f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112f8:	8911      	ldrh	r1, [r2, #8]
 80112fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112fc:	8992      	ldrh	r2, [r2, #12]
 80112fe:	0952      	lsrs	r2, r2, #5
 8011300:	b292      	uxth	r2, r2
 8011302:	fbb1 f2f2 	udiv	r2, r1, r2
 8011306:	b292      	uxth	r2, r2
 8011308:	4413      	add	r3, r2
 801130a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801130c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801130e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011310:	429a      	cmp	r2, r3
 8011312:	d201      	bcs.n	8011318 <find_volume+0x314>
 8011314:	230d      	movs	r3, #13
 8011316:	e0ee      	b.n	80114f6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801131a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801131c:	1ad3      	subs	r3, r2, r3
 801131e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011320:	8952      	ldrh	r2, [r2, #10]
 8011322:	fbb3 f3f2 	udiv	r3, r3, r2
 8011326:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132a:	2b00      	cmp	r3, #0
 801132c:	d101      	bne.n	8011332 <find_volume+0x32e>
 801132e:	230d      	movs	r3, #13
 8011330:	e0e1      	b.n	80114f6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8011332:	2303      	movs	r3, #3
 8011334:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801133e:	4293      	cmp	r3, r2
 8011340:	d802      	bhi.n	8011348 <find_volume+0x344>
 8011342:	2302      	movs	r3, #2
 8011344:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801134e:	4293      	cmp	r3, r2
 8011350:	d802      	bhi.n	8011358 <find_volume+0x354>
 8011352:	2301      	movs	r3, #1
 8011354:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135a:	1c9a      	adds	r2, r3, #2
 801135c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801135e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8011360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011362:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011364:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011366:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801136a:	441a      	add	r2, r3
 801136c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801136e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011370:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011374:	441a      	add	r2, r3
 8011376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011378:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801137a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801137e:	2b03      	cmp	r3, #3
 8011380:	d11e      	bne.n	80113c0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011384:	3334      	adds	r3, #52	; 0x34
 8011386:	332a      	adds	r3, #42	; 0x2a
 8011388:	4618      	mov	r0, r3
 801138a:	f7fe fba1 	bl	800fad0 <ld_word>
 801138e:	4603      	mov	r3, r0
 8011390:	2b00      	cmp	r3, #0
 8011392:	d001      	beq.n	8011398 <find_volume+0x394>
 8011394:	230d      	movs	r3, #13
 8011396:	e0ae      	b.n	80114f6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801139a:	891b      	ldrh	r3, [r3, #8]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d001      	beq.n	80113a4 <find_volume+0x3a0>
 80113a0:	230d      	movs	r3, #13
 80113a2:	e0a8      	b.n	80114f6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80113a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a6:	3334      	adds	r3, #52	; 0x34
 80113a8:	332c      	adds	r3, #44	; 0x2c
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7fe fba8 	bl	800fb00 <ld_dword>
 80113b0:	4602      	mov	r2, r0
 80113b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80113b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b8:	699b      	ldr	r3, [r3, #24]
 80113ba:	009b      	lsls	r3, r3, #2
 80113bc:	647b      	str	r3, [r7, #68]	; 0x44
 80113be:	e01f      	b.n	8011400 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80113c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113c2:	891b      	ldrh	r3, [r3, #8]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d101      	bne.n	80113cc <find_volume+0x3c8>
 80113c8:	230d      	movs	r3, #13
 80113ca:	e094      	b.n	80114f6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80113cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113d2:	441a      	add	r2, r3
 80113d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113d6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80113d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113dc:	2b02      	cmp	r3, #2
 80113de:	d103      	bne.n	80113e8 <find_volume+0x3e4>
 80113e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e2:	699b      	ldr	r3, [r3, #24]
 80113e4:	005b      	lsls	r3, r3, #1
 80113e6:	e00a      	b.n	80113fe <find_volume+0x3fa>
 80113e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ea:	699a      	ldr	r2, [r3, #24]
 80113ec:	4613      	mov	r3, r2
 80113ee:	005b      	lsls	r3, r3, #1
 80113f0:	4413      	add	r3, r2
 80113f2:	085a      	lsrs	r2, r3, #1
 80113f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113f6:	699b      	ldr	r3, [r3, #24]
 80113f8:	f003 0301 	and.w	r3, r3, #1
 80113fc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80113fe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011402:	69da      	ldr	r2, [r3, #28]
 8011404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011406:	899b      	ldrh	r3, [r3, #12]
 8011408:	4619      	mov	r1, r3
 801140a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801140c:	440b      	add	r3, r1
 801140e:	3b01      	subs	r3, #1
 8011410:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011412:	8989      	ldrh	r1, [r1, #12]
 8011414:	fbb3 f3f1 	udiv	r3, r3, r1
 8011418:	429a      	cmp	r2, r3
 801141a:	d201      	bcs.n	8011420 <find_volume+0x41c>
 801141c:	230d      	movs	r3, #13
 801141e:	e06a      	b.n	80114f6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011422:	f04f 32ff 	mov.w	r2, #4294967295
 8011426:	615a      	str	r2, [r3, #20]
 8011428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801142a:	695a      	ldr	r2, [r3, #20]
 801142c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801142e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011432:	2280      	movs	r2, #128	; 0x80
 8011434:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011436:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801143a:	2b03      	cmp	r3, #3
 801143c:	d149      	bne.n	80114d2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801143e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011440:	3334      	adds	r3, #52	; 0x34
 8011442:	3330      	adds	r3, #48	; 0x30
 8011444:	4618      	mov	r0, r3
 8011446:	f7fe fb43 	bl	800fad0 <ld_word>
 801144a:	4603      	mov	r3, r0
 801144c:	2b01      	cmp	r3, #1
 801144e:	d140      	bne.n	80114d2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011452:	3301      	adds	r3, #1
 8011454:	4619      	mov	r1, r3
 8011456:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011458:	f7fe fdea 	bl	8010030 <move_window>
 801145c:	4603      	mov	r3, r0
 801145e:	2b00      	cmp	r3, #0
 8011460:	d137      	bne.n	80114d2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8011462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011464:	2200      	movs	r2, #0
 8011466:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801146a:	3334      	adds	r3, #52	; 0x34
 801146c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011470:	4618      	mov	r0, r3
 8011472:	f7fe fb2d 	bl	800fad0 <ld_word>
 8011476:	4603      	mov	r3, r0
 8011478:	461a      	mov	r2, r3
 801147a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801147e:	429a      	cmp	r2, r3
 8011480:	d127      	bne.n	80114d2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011484:	3334      	adds	r3, #52	; 0x34
 8011486:	4618      	mov	r0, r3
 8011488:	f7fe fb3a 	bl	800fb00 <ld_dword>
 801148c:	4602      	mov	r2, r0
 801148e:	4b1c      	ldr	r3, [pc, #112]	; (8011500 <find_volume+0x4fc>)
 8011490:	429a      	cmp	r2, r3
 8011492:	d11e      	bne.n	80114d2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011496:	3334      	adds	r3, #52	; 0x34
 8011498:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801149c:	4618      	mov	r0, r3
 801149e:	f7fe fb2f 	bl	800fb00 <ld_dword>
 80114a2:	4602      	mov	r2, r0
 80114a4:	4b17      	ldr	r3, [pc, #92]	; (8011504 <find_volume+0x500>)
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d113      	bne.n	80114d2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80114aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ac:	3334      	adds	r3, #52	; 0x34
 80114ae:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7fe fb24 	bl	800fb00 <ld_dword>
 80114b8:	4602      	mov	r2, r0
 80114ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114bc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80114be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c0:	3334      	adds	r3, #52	; 0x34
 80114c2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7fe fb1a 	bl	800fb00 <ld_dword>
 80114cc:	4602      	mov	r2, r0
 80114ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80114d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80114d8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80114da:	4b0b      	ldr	r3, [pc, #44]	; (8011508 <find_volume+0x504>)
 80114dc:	881b      	ldrh	r3, [r3, #0]
 80114de:	3301      	adds	r3, #1
 80114e0:	b29a      	uxth	r2, r3
 80114e2:	4b09      	ldr	r3, [pc, #36]	; (8011508 <find_volume+0x504>)
 80114e4:	801a      	strh	r2, [r3, #0]
 80114e6:	4b08      	ldr	r3, [pc, #32]	; (8011508 <find_volume+0x504>)
 80114e8:	881a      	ldrh	r2, [r3, #0]
 80114ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ec:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80114ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80114f0:	f7fe fd36 	bl	800ff60 <clear_lock>
#endif
	return FR_OK;
 80114f4:	2300      	movs	r3, #0
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3758      	adds	r7, #88	; 0x58
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	41615252 	.word	0x41615252
 8011504:	61417272 	.word	0x61417272
 8011508:	200007b8 	.word	0x200007b8

0801150c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b084      	sub	sp, #16
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011516:	2309      	movs	r3, #9
 8011518:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d01c      	beq.n	801155a <validate+0x4e>
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d018      	beq.n	801155a <validate+0x4e>
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	781b      	ldrb	r3, [r3, #0]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d013      	beq.n	801155a <validate+0x4e>
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	889a      	ldrh	r2, [r3, #4]
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	88db      	ldrh	r3, [r3, #6]
 801153c:	429a      	cmp	r2, r3
 801153e:	d10c      	bne.n	801155a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	785b      	ldrb	r3, [r3, #1]
 8011546:	4618      	mov	r0, r3
 8011548:	f7fe fa24 	bl	800f994 <disk_status>
 801154c:	4603      	mov	r3, r0
 801154e:	f003 0301 	and.w	r3, r3, #1
 8011552:	2b00      	cmp	r3, #0
 8011554:	d101      	bne.n	801155a <validate+0x4e>
			res = FR_OK;
 8011556:	2300      	movs	r3, #0
 8011558:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801155a:	7bfb      	ldrb	r3, [r7, #15]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d102      	bne.n	8011566 <validate+0x5a>
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	e000      	b.n	8011568 <validate+0x5c>
 8011566:	2300      	movs	r3, #0
 8011568:	683a      	ldr	r2, [r7, #0]
 801156a:	6013      	str	r3, [r2, #0]
	return res;
 801156c:	7bfb      	ldrb	r3, [r7, #15]
}
 801156e:	4618      	mov	r0, r3
 8011570:	3710      	adds	r7, #16
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}
	...

08011578 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b088      	sub	sp, #32
 801157c:	af00      	add	r7, sp, #0
 801157e:	60f8      	str	r0, [r7, #12]
 8011580:	60b9      	str	r1, [r7, #8]
 8011582:	4613      	mov	r3, r2
 8011584:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801158a:	f107 0310 	add.w	r3, r7, #16
 801158e:	4618      	mov	r0, r3
 8011590:	f7ff fc9e 	bl	8010ed0 <get_ldnumber>
 8011594:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011596:	69fb      	ldr	r3, [r7, #28]
 8011598:	2b00      	cmp	r3, #0
 801159a:	da01      	bge.n	80115a0 <f_mount+0x28>
 801159c:	230b      	movs	r3, #11
 801159e:	e02b      	b.n	80115f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80115a0:	4a17      	ldr	r2, [pc, #92]	; (8011600 <f_mount+0x88>)
 80115a2:	69fb      	ldr	r3, [r7, #28]
 80115a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80115aa:	69bb      	ldr	r3, [r7, #24]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d005      	beq.n	80115bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80115b0:	69b8      	ldr	r0, [r7, #24]
 80115b2:	f7fe fcd5 	bl	800ff60 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80115b6:	69bb      	ldr	r3, [r7, #24]
 80115b8:	2200      	movs	r2, #0
 80115ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d002      	beq.n	80115c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	2200      	movs	r2, #0
 80115c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80115c8:	68fa      	ldr	r2, [r7, #12]
 80115ca:	490d      	ldr	r1, [pc, #52]	; (8011600 <f_mount+0x88>)
 80115cc:	69fb      	ldr	r3, [r7, #28]
 80115ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d002      	beq.n	80115de <f_mount+0x66>
 80115d8:	79fb      	ldrb	r3, [r7, #7]
 80115da:	2b01      	cmp	r3, #1
 80115dc:	d001      	beq.n	80115e2 <f_mount+0x6a>
 80115de:	2300      	movs	r3, #0
 80115e0:	e00a      	b.n	80115f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80115e2:	f107 010c 	add.w	r1, r7, #12
 80115e6:	f107 0308 	add.w	r3, r7, #8
 80115ea:	2200      	movs	r2, #0
 80115ec:	4618      	mov	r0, r3
 80115ee:	f7ff fd09 	bl	8011004 <find_volume>
 80115f2:	4603      	mov	r3, r0
 80115f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80115f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	3720      	adds	r7, #32
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}
 8011600:	200007b4 	.word	0x200007b4

08011604 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b098      	sub	sp, #96	; 0x60
 8011608:	af00      	add	r7, sp, #0
 801160a:	60f8      	str	r0, [r7, #12]
 801160c:	60b9      	str	r1, [r7, #8]
 801160e:	4613      	mov	r3, r2
 8011610:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d101      	bne.n	801161c <f_open+0x18>
 8011618:	2309      	movs	r3, #9
 801161a:	e1bb      	b.n	8011994 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801161c:	79fb      	ldrb	r3, [r7, #7]
 801161e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011622:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011624:	79fa      	ldrb	r2, [r7, #7]
 8011626:	f107 0110 	add.w	r1, r7, #16
 801162a:	f107 0308 	add.w	r3, r7, #8
 801162e:	4618      	mov	r0, r3
 8011630:	f7ff fce8 	bl	8011004 <find_volume>
 8011634:	4603      	mov	r3, r0
 8011636:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801163a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801163e:	2b00      	cmp	r3, #0
 8011640:	f040 819f 	bne.w	8011982 <f_open+0x37e>
		dj.obj.fs = fs;
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011648:	68ba      	ldr	r2, [r7, #8]
 801164a:	f107 0314 	add.w	r3, r7, #20
 801164e:	4611      	mov	r1, r2
 8011650:	4618      	mov	r0, r3
 8011652:	f7ff fbc7 	bl	8010de4 <follow_path>
 8011656:	4603      	mov	r3, r0
 8011658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801165c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011660:	2b00      	cmp	r3, #0
 8011662:	d11a      	bne.n	801169a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011664:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011668:	b25b      	sxtb	r3, r3
 801166a:	2b00      	cmp	r3, #0
 801166c:	da03      	bge.n	8011676 <f_open+0x72>
				res = FR_INVALID_NAME;
 801166e:	2306      	movs	r3, #6
 8011670:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011674:	e011      	b.n	801169a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011676:	79fb      	ldrb	r3, [r7, #7]
 8011678:	f023 0301 	bic.w	r3, r3, #1
 801167c:	2b00      	cmp	r3, #0
 801167e:	bf14      	ite	ne
 8011680:	2301      	movne	r3, #1
 8011682:	2300      	moveq	r3, #0
 8011684:	b2db      	uxtb	r3, r3
 8011686:	461a      	mov	r2, r3
 8011688:	f107 0314 	add.w	r3, r7, #20
 801168c:	4611      	mov	r1, r2
 801168e:	4618      	mov	r0, r3
 8011690:	f7fe fb1e 	bl	800fcd0 <chk_lock>
 8011694:	4603      	mov	r3, r0
 8011696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801169a:	79fb      	ldrb	r3, [r7, #7]
 801169c:	f003 031c 	and.w	r3, r3, #28
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d07f      	beq.n	80117a4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80116a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d017      	beq.n	80116dc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80116ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80116b0:	2b04      	cmp	r3, #4
 80116b2:	d10e      	bne.n	80116d2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80116b4:	f7fe fb68 	bl	800fd88 <enq_lock>
 80116b8:	4603      	mov	r3, r0
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d006      	beq.n	80116cc <f_open+0xc8>
 80116be:	f107 0314 	add.w	r3, r7, #20
 80116c2:	4618      	mov	r0, r3
 80116c4:	f7ff fac7 	bl	8010c56 <dir_register>
 80116c8:	4603      	mov	r3, r0
 80116ca:	e000      	b.n	80116ce <f_open+0xca>
 80116cc:	2312      	movs	r3, #18
 80116ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80116d2:	79fb      	ldrb	r3, [r7, #7]
 80116d4:	f043 0308 	orr.w	r3, r3, #8
 80116d8:	71fb      	strb	r3, [r7, #7]
 80116da:	e010      	b.n	80116fe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80116dc:	7ebb      	ldrb	r3, [r7, #26]
 80116de:	f003 0311 	and.w	r3, r3, #17
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d003      	beq.n	80116ee <f_open+0xea>
					res = FR_DENIED;
 80116e6:	2307      	movs	r3, #7
 80116e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80116ec:	e007      	b.n	80116fe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80116ee:	79fb      	ldrb	r3, [r7, #7]
 80116f0:	f003 0304 	and.w	r3, r3, #4
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d002      	beq.n	80116fe <f_open+0xfa>
 80116f8:	2308      	movs	r3, #8
 80116fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80116fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011702:	2b00      	cmp	r3, #0
 8011704:	d168      	bne.n	80117d8 <f_open+0x1d4>
 8011706:	79fb      	ldrb	r3, [r7, #7]
 8011708:	f003 0308 	and.w	r3, r3, #8
 801170c:	2b00      	cmp	r3, #0
 801170e:	d063      	beq.n	80117d8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8011710:	f000 fdf2 	bl	80122f8 <get_fattime>
 8011714:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011718:	330e      	adds	r3, #14
 801171a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801171c:	4618      	mov	r0, r3
 801171e:	f7fe fa2d 	bl	800fb7c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011724:	3316      	adds	r3, #22
 8011726:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011728:	4618      	mov	r0, r3
 801172a:	f7fe fa27 	bl	800fb7c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801172e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011730:	330b      	adds	r3, #11
 8011732:	2220      	movs	r2, #32
 8011734:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801173a:	4611      	mov	r1, r2
 801173c:	4618      	mov	r0, r3
 801173e:	f7ff f9f6 	bl	8010b2e <ld_clust>
 8011742:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011744:	693b      	ldr	r3, [r7, #16]
 8011746:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011748:	2200      	movs	r2, #0
 801174a:	4618      	mov	r0, r3
 801174c:	f7ff fa0e 	bl	8010b6c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011752:	331c      	adds	r3, #28
 8011754:	2100      	movs	r1, #0
 8011756:	4618      	mov	r0, r3
 8011758:	f7fe fa10 	bl	800fb7c <st_dword>
					fs->wflag = 1;
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	2201      	movs	r2, #1
 8011760:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011764:	2b00      	cmp	r3, #0
 8011766:	d037      	beq.n	80117d8 <f_open+0x1d4>
						dw = fs->winsect;
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801176c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801176e:	f107 0314 	add.w	r3, r7, #20
 8011772:	2200      	movs	r2, #0
 8011774:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011776:	4618      	mov	r0, r3
 8011778:	f7fe fefe 	bl	8010578 <remove_chain>
 801177c:	4603      	mov	r3, r0
 801177e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8011782:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011786:	2b00      	cmp	r3, #0
 8011788:	d126      	bne.n	80117d8 <f_open+0x1d4>
							res = move_window(fs, dw);
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801178e:	4618      	mov	r0, r3
 8011790:	f7fe fc4e 	bl	8010030 <move_window>
 8011794:	4603      	mov	r3, r0
 8011796:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801179e:	3a01      	subs	r2, #1
 80117a0:	611a      	str	r2, [r3, #16]
 80117a2:	e019      	b.n	80117d8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80117a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d115      	bne.n	80117d8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80117ac:	7ebb      	ldrb	r3, [r7, #26]
 80117ae:	f003 0310 	and.w	r3, r3, #16
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d003      	beq.n	80117be <f_open+0x1ba>
					res = FR_NO_FILE;
 80117b6:	2304      	movs	r3, #4
 80117b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80117bc:	e00c      	b.n	80117d8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80117be:	79fb      	ldrb	r3, [r7, #7]
 80117c0:	f003 0302 	and.w	r3, r3, #2
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d007      	beq.n	80117d8 <f_open+0x1d4>
 80117c8:	7ebb      	ldrb	r3, [r7, #26]
 80117ca:	f003 0301 	and.w	r3, r3, #1
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d002      	beq.n	80117d8 <f_open+0x1d4>
						res = FR_DENIED;
 80117d2:	2307      	movs	r3, #7
 80117d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80117d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d128      	bne.n	8011832 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80117e0:	79fb      	ldrb	r3, [r7, #7]
 80117e2:	f003 0308 	and.w	r3, r3, #8
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d003      	beq.n	80117f2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80117ea:	79fb      	ldrb	r3, [r7, #7]
 80117ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117f0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80117fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011800:	79fb      	ldrb	r3, [r7, #7]
 8011802:	f023 0301 	bic.w	r3, r3, #1
 8011806:	2b00      	cmp	r3, #0
 8011808:	bf14      	ite	ne
 801180a:	2301      	movne	r3, #1
 801180c:	2300      	moveq	r3, #0
 801180e:	b2db      	uxtb	r3, r3
 8011810:	461a      	mov	r2, r3
 8011812:	f107 0314 	add.w	r3, r7, #20
 8011816:	4611      	mov	r1, r2
 8011818:	4618      	mov	r0, r3
 801181a:	f7fe fad7 	bl	800fdcc <inc_lock>
 801181e:	4602      	mov	r2, r0
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	691b      	ldr	r3, [r3, #16]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d102      	bne.n	8011832 <f_open+0x22e>
 801182c:	2302      	movs	r3, #2
 801182e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011832:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011836:	2b00      	cmp	r3, #0
 8011838:	f040 80a3 	bne.w	8011982 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011840:	4611      	mov	r1, r2
 8011842:	4618      	mov	r0, r3
 8011844:	f7ff f973 	bl	8010b2e <ld_clust>
 8011848:	4602      	mov	r2, r0
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801184e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011850:	331c      	adds	r3, #28
 8011852:	4618      	mov	r0, r3
 8011854:	f7fe f954 	bl	800fb00 <ld_dword>
 8011858:	4602      	mov	r2, r0
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	2200      	movs	r2, #0
 8011862:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011864:	693a      	ldr	r2, [r7, #16]
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801186a:	693b      	ldr	r3, [r7, #16]
 801186c:	88da      	ldrh	r2, [r3, #6]
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	79fa      	ldrb	r2, [r7, #7]
 8011876:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	2200      	movs	r2, #0
 801187c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	2200      	movs	r2, #0
 8011882:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	2200      	movs	r2, #0
 8011888:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	3330      	adds	r3, #48	; 0x30
 801188e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011892:	2100      	movs	r1, #0
 8011894:	4618      	mov	r0, r3
 8011896:	f7fe f9be 	bl	800fc16 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801189a:	79fb      	ldrb	r3, [r7, #7]
 801189c:	f003 0320 	and.w	r3, r3, #32
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d06e      	beq.n	8011982 <f_open+0x37e>
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	68db      	ldr	r3, [r3, #12]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d06a      	beq.n	8011982 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	68da      	ldr	r2, [r3, #12]
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	895b      	ldrh	r3, [r3, #10]
 80118b8:	461a      	mov	r2, r3
 80118ba:	693b      	ldr	r3, [r7, #16]
 80118bc:	899b      	ldrh	r3, [r3, #12]
 80118be:	fb03 f302 	mul.w	r3, r3, r2
 80118c2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	689b      	ldr	r3, [r3, #8]
 80118c8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	68db      	ldr	r3, [r3, #12]
 80118ce:	657b      	str	r3, [r7, #84]	; 0x54
 80118d0:	e016      	b.n	8011900 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7fe fc67 	bl	80101aa <get_fat>
 80118dc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80118de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80118e0:	2b01      	cmp	r3, #1
 80118e2:	d802      	bhi.n	80118ea <f_open+0x2e6>
 80118e4:	2302      	movs	r3, #2
 80118e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80118ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80118ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118f0:	d102      	bne.n	80118f8 <f_open+0x2f4>
 80118f2:	2301      	movs	r3, #1
 80118f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80118f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80118fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118fc:	1ad3      	subs	r3, r2, r3
 80118fe:	657b      	str	r3, [r7, #84]	; 0x54
 8011900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011904:	2b00      	cmp	r3, #0
 8011906:	d103      	bne.n	8011910 <f_open+0x30c>
 8011908:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801190a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801190c:	429a      	cmp	r2, r3
 801190e:	d8e0      	bhi.n	80118d2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011914:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011916:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801191a:	2b00      	cmp	r3, #0
 801191c:	d131      	bne.n	8011982 <f_open+0x37e>
 801191e:	693b      	ldr	r3, [r7, #16]
 8011920:	899b      	ldrh	r3, [r3, #12]
 8011922:	461a      	mov	r2, r3
 8011924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011926:	fbb3 f1f2 	udiv	r1, r3, r2
 801192a:	fb02 f201 	mul.w	r2, r2, r1
 801192e:	1a9b      	subs	r3, r3, r2
 8011930:	2b00      	cmp	r3, #0
 8011932:	d026      	beq.n	8011982 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011938:	4618      	mov	r0, r3
 801193a:	f7fe fc17 	bl	801016c <clust2sect>
 801193e:	6478      	str	r0, [r7, #68]	; 0x44
 8011940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011942:	2b00      	cmp	r3, #0
 8011944:	d103      	bne.n	801194e <f_open+0x34a>
						res = FR_INT_ERR;
 8011946:	2302      	movs	r3, #2
 8011948:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801194c:	e019      	b.n	8011982 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801194e:	693b      	ldr	r3, [r7, #16]
 8011950:	899b      	ldrh	r3, [r3, #12]
 8011952:	461a      	mov	r2, r3
 8011954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011956:	fbb3 f2f2 	udiv	r2, r3, r2
 801195a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801195c:	441a      	add	r2, r3
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	7858      	ldrb	r0, [r3, #1]
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	6a1a      	ldr	r2, [r3, #32]
 8011970:	2301      	movs	r3, #1
 8011972:	f7fe f84f 	bl	800fa14 <disk_read>
 8011976:	4603      	mov	r3, r0
 8011978:	2b00      	cmp	r3, #0
 801197a:	d002      	beq.n	8011982 <f_open+0x37e>
 801197c:	2301      	movs	r3, #1
 801197e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011982:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011986:	2b00      	cmp	r3, #0
 8011988:	d002      	beq.n	8011990 <f_open+0x38c>
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	2200      	movs	r2, #0
 801198e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011990:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011994:	4618      	mov	r0, r3
 8011996:	3760      	adds	r7, #96	; 0x60
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}

0801199c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b08c      	sub	sp, #48	; 0x30
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	60b9      	str	r1, [r7, #8]
 80119a6:	607a      	str	r2, [r7, #4]
 80119a8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	2200      	movs	r2, #0
 80119b2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	f107 0210 	add.w	r2, r7, #16
 80119ba:	4611      	mov	r1, r2
 80119bc:	4618      	mov	r0, r3
 80119be:	f7ff fda5 	bl	801150c <validate>
 80119c2:	4603      	mov	r3, r0
 80119c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80119c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d107      	bne.n	80119e0 <f_write+0x44>
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	7d5b      	ldrb	r3, [r3, #21]
 80119d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80119d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d002      	beq.n	80119e6 <f_write+0x4a>
 80119e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119e4:	e16a      	b.n	8011cbc <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	7d1b      	ldrb	r3, [r3, #20]
 80119ea:	f003 0302 	and.w	r3, r3, #2
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d101      	bne.n	80119f6 <f_write+0x5a>
 80119f2:	2307      	movs	r3, #7
 80119f4:	e162      	b.n	8011cbc <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	699a      	ldr	r2, [r3, #24]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	441a      	add	r2, r3
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	699b      	ldr	r3, [r3, #24]
 8011a02:	429a      	cmp	r2, r3
 8011a04:	f080 814c 	bcs.w	8011ca0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	699b      	ldr	r3, [r3, #24]
 8011a0c:	43db      	mvns	r3, r3
 8011a0e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011a10:	e146      	b.n	8011ca0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	699b      	ldr	r3, [r3, #24]
 8011a16:	693a      	ldr	r2, [r7, #16]
 8011a18:	8992      	ldrh	r2, [r2, #12]
 8011a1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011a1e:	fb02 f201 	mul.w	r2, r2, r1
 8011a22:	1a9b      	subs	r3, r3, r2
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	f040 80f1 	bne.w	8011c0c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	699b      	ldr	r3, [r3, #24]
 8011a2e:	693a      	ldr	r2, [r7, #16]
 8011a30:	8992      	ldrh	r2, [r2, #12]
 8011a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a36:	693a      	ldr	r2, [r7, #16]
 8011a38:	8952      	ldrh	r2, [r2, #10]
 8011a3a:	3a01      	subs	r2, #1
 8011a3c:	4013      	ands	r3, r2
 8011a3e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011a40:	69bb      	ldr	r3, [r7, #24]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d143      	bne.n	8011ace <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	699b      	ldr	r3, [r3, #24]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d10c      	bne.n	8011a68 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	689b      	ldr	r3, [r3, #8]
 8011a52:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d11a      	bne.n	8011a90 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	2100      	movs	r1, #0
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f7fe fdef 	bl	8010642 <create_chain>
 8011a64:	62b8      	str	r0, [r7, #40]	; 0x28
 8011a66:	e013      	b.n	8011a90 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d007      	beq.n	8011a80 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	699b      	ldr	r3, [r3, #24]
 8011a74:	4619      	mov	r1, r3
 8011a76:	68f8      	ldr	r0, [r7, #12]
 8011a78:	f7fe fe7b 	bl	8010772 <clmt_clust>
 8011a7c:	62b8      	str	r0, [r7, #40]	; 0x28
 8011a7e:	e007      	b.n	8011a90 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011a80:	68fa      	ldr	r2, [r7, #12]
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	69db      	ldr	r3, [r3, #28]
 8011a86:	4619      	mov	r1, r3
 8011a88:	4610      	mov	r0, r2
 8011a8a:	f7fe fdda 	bl	8010642 <create_chain>
 8011a8e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	f000 8109 	beq.w	8011caa <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a9a:	2b01      	cmp	r3, #1
 8011a9c:	d104      	bne.n	8011aa8 <f_write+0x10c>
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	2202      	movs	r2, #2
 8011aa2:	755a      	strb	r2, [r3, #21]
 8011aa4:	2302      	movs	r3, #2
 8011aa6:	e109      	b.n	8011cbc <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aae:	d104      	bne.n	8011aba <f_write+0x11e>
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	2201      	movs	r2, #1
 8011ab4:	755a      	strb	r2, [r3, #21]
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	e100      	b.n	8011cbc <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011abe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	689b      	ldr	r3, [r3, #8]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d102      	bne.n	8011ace <f_write+0x132>
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011acc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	7d1b      	ldrb	r3, [r3, #20]
 8011ad2:	b25b      	sxtb	r3, r3
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	da18      	bge.n	8011b0a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011ad8:	693b      	ldr	r3, [r7, #16]
 8011ada:	7858      	ldrb	r0, [r3, #1]
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	6a1a      	ldr	r2, [r3, #32]
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	f7fd ffb4 	bl	800fa54 <disk_write>
 8011aec:	4603      	mov	r3, r0
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d004      	beq.n	8011afc <f_write+0x160>
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	2201      	movs	r2, #1
 8011af6:	755a      	strb	r2, [r3, #21]
 8011af8:	2301      	movs	r3, #1
 8011afa:	e0df      	b.n	8011cbc <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	7d1b      	ldrb	r3, [r3, #20]
 8011b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b04:	b2da      	uxtb	r2, r3
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011b0a:	693a      	ldr	r2, [r7, #16]
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	69db      	ldr	r3, [r3, #28]
 8011b10:	4619      	mov	r1, r3
 8011b12:	4610      	mov	r0, r2
 8011b14:	f7fe fb2a 	bl	801016c <clust2sect>
 8011b18:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011b1a:	697b      	ldr	r3, [r7, #20]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d104      	bne.n	8011b2a <f_write+0x18e>
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	2202      	movs	r2, #2
 8011b24:	755a      	strb	r2, [r3, #21]
 8011b26:	2302      	movs	r3, #2
 8011b28:	e0c8      	b.n	8011cbc <f_write+0x320>
			sect += csect;
 8011b2a:	697a      	ldr	r2, [r7, #20]
 8011b2c:	69bb      	ldr	r3, [r7, #24]
 8011b2e:	4413      	add	r3, r2
 8011b30:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	899b      	ldrh	r3, [r3, #12]
 8011b36:	461a      	mov	r2, r3
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b3e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011b40:	6a3b      	ldr	r3, [r7, #32]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d043      	beq.n	8011bce <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011b46:	69ba      	ldr	r2, [r7, #24]
 8011b48:	6a3b      	ldr	r3, [r7, #32]
 8011b4a:	4413      	add	r3, r2
 8011b4c:	693a      	ldr	r2, [r7, #16]
 8011b4e:	8952      	ldrh	r2, [r2, #10]
 8011b50:	4293      	cmp	r3, r2
 8011b52:	d905      	bls.n	8011b60 <f_write+0x1c4>
					cc = fs->csize - csect;
 8011b54:	693b      	ldr	r3, [r7, #16]
 8011b56:	895b      	ldrh	r3, [r3, #10]
 8011b58:	461a      	mov	r2, r3
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	1ad3      	subs	r3, r2, r3
 8011b5e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	7858      	ldrb	r0, [r3, #1]
 8011b64:	6a3b      	ldr	r3, [r7, #32]
 8011b66:	697a      	ldr	r2, [r7, #20]
 8011b68:	69f9      	ldr	r1, [r7, #28]
 8011b6a:	f7fd ff73 	bl	800fa54 <disk_write>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d004      	beq.n	8011b7e <f_write+0x1e2>
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	2201      	movs	r2, #1
 8011b78:	755a      	strb	r2, [r3, #21]
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	e09e      	b.n	8011cbc <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	6a1a      	ldr	r2, [r3, #32]
 8011b82:	697b      	ldr	r3, [r7, #20]
 8011b84:	1ad3      	subs	r3, r2, r3
 8011b86:	6a3a      	ldr	r2, [r7, #32]
 8011b88:	429a      	cmp	r2, r3
 8011b8a:	d918      	bls.n	8011bbe <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	6a1a      	ldr	r2, [r3, #32]
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	1ad3      	subs	r3, r2, r3
 8011b9a:	693a      	ldr	r2, [r7, #16]
 8011b9c:	8992      	ldrh	r2, [r2, #12]
 8011b9e:	fb02 f303 	mul.w	r3, r2, r3
 8011ba2:	69fa      	ldr	r2, [r7, #28]
 8011ba4:	18d1      	adds	r1, r2, r3
 8011ba6:	693b      	ldr	r3, [r7, #16]
 8011ba8:	899b      	ldrh	r3, [r3, #12]
 8011baa:	461a      	mov	r2, r3
 8011bac:	f7fe f812 	bl	800fbd4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	7d1b      	ldrb	r3, [r3, #20]
 8011bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011bb8:	b2da      	uxtb	r2, r3
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	899b      	ldrh	r3, [r3, #12]
 8011bc2:	461a      	mov	r2, r3
 8011bc4:	6a3b      	ldr	r3, [r7, #32]
 8011bc6:	fb02 f303 	mul.w	r3, r2, r3
 8011bca:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011bcc:	e04b      	b.n	8011c66 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	6a1b      	ldr	r3, [r3, #32]
 8011bd2:	697a      	ldr	r2, [r7, #20]
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d016      	beq.n	8011c06 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	699a      	ldr	r2, [r3, #24]
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d210      	bcs.n	8011c06 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011be4:	693b      	ldr	r3, [r7, #16]
 8011be6:	7858      	ldrb	r0, [r3, #1]
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011bee:	2301      	movs	r3, #1
 8011bf0:	697a      	ldr	r2, [r7, #20]
 8011bf2:	f7fd ff0f 	bl	800fa14 <disk_read>
 8011bf6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d004      	beq.n	8011c06 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	2201      	movs	r2, #1
 8011c00:	755a      	strb	r2, [r3, #21]
 8011c02:	2301      	movs	r3, #1
 8011c04:	e05a      	b.n	8011cbc <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	697a      	ldr	r2, [r7, #20]
 8011c0a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011c0c:	693b      	ldr	r3, [r7, #16]
 8011c0e:	899b      	ldrh	r3, [r3, #12]
 8011c10:	4618      	mov	r0, r3
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	699b      	ldr	r3, [r3, #24]
 8011c16:	693a      	ldr	r2, [r7, #16]
 8011c18:	8992      	ldrh	r2, [r2, #12]
 8011c1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c1e:	fb02 f201 	mul.w	r2, r2, r1
 8011c22:	1a9b      	subs	r3, r3, r2
 8011c24:	1ac3      	subs	r3, r0, r3
 8011c26:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d901      	bls.n	8011c34 <f_write+0x298>
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	699b      	ldr	r3, [r3, #24]
 8011c3e:	693a      	ldr	r2, [r7, #16]
 8011c40:	8992      	ldrh	r2, [r2, #12]
 8011c42:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c46:	fb02 f200 	mul.w	r2, r2, r0
 8011c4a:	1a9b      	subs	r3, r3, r2
 8011c4c:	440b      	add	r3, r1
 8011c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c50:	69f9      	ldr	r1, [r7, #28]
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7fd ffbe 	bl	800fbd4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	7d1b      	ldrb	r3, [r3, #20]
 8011c5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c60:	b2da      	uxtb	r2, r3
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011c66:	69fa      	ldr	r2, [r7, #28]
 8011c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c6a:	4413      	add	r3, r2
 8011c6c:	61fb      	str	r3, [r7, #28]
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	699a      	ldr	r2, [r3, #24]
 8011c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c74:	441a      	add	r2, r3
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	619a      	str	r2, [r3, #24]
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	68da      	ldr	r2, [r3, #12]
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	699b      	ldr	r3, [r3, #24]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	bf38      	it	cc
 8011c86:	461a      	movcc	r2, r3
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	60da      	str	r2, [r3, #12]
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	681a      	ldr	r2, [r3, #0]
 8011c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c92:	441a      	add	r2, r3
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	601a      	str	r2, [r3, #0]
 8011c98:	687a      	ldr	r2, [r7, #4]
 8011c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c9c:	1ad3      	subs	r3, r2, r3
 8011c9e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	f47f aeb5 	bne.w	8011a12 <f_write+0x76>
 8011ca8:	e000      	b.n	8011cac <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011caa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	7d1b      	ldrb	r3, [r3, #20]
 8011cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cb4:	b2da      	uxtb	r2, r3
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011cba:	2300      	movs	r3, #0
}
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3730      	adds	r7, #48	; 0x30
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}

08011cc4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b086      	sub	sp, #24
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f107 0208 	add.w	r2, r7, #8
 8011cd2:	4611      	mov	r1, r2
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7ff fc19 	bl	801150c <validate>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011cde:	7dfb      	ldrb	r3, [r7, #23]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d168      	bne.n	8011db6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	7d1b      	ldrb	r3, [r3, #20]
 8011ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d062      	beq.n	8011db6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	7d1b      	ldrb	r3, [r3, #20]
 8011cf4:	b25b      	sxtb	r3, r3
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	da15      	bge.n	8011d26 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	7858      	ldrb	r0, [r3, #1]
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6a1a      	ldr	r2, [r3, #32]
 8011d08:	2301      	movs	r3, #1
 8011d0a:	f7fd fea3 	bl	800fa54 <disk_write>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d001      	beq.n	8011d18 <f_sync+0x54>
 8011d14:	2301      	movs	r3, #1
 8011d16:	e04f      	b.n	8011db8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	7d1b      	ldrb	r3, [r3, #20]
 8011d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d20:	b2da      	uxtb	r2, r3
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011d26:	f000 fae7 	bl	80122f8 <get_fattime>
 8011d2a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011d2c:	68ba      	ldr	r2, [r7, #8]
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d32:	4619      	mov	r1, r3
 8011d34:	4610      	mov	r0, r2
 8011d36:	f7fe f97b 	bl	8010030 <move_window>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011d3e:	7dfb      	ldrb	r3, [r7, #23]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d138      	bne.n	8011db6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d48:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	330b      	adds	r3, #11
 8011d4e:	781a      	ldrb	r2, [r3, #0]
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	330b      	adds	r3, #11
 8011d54:	f042 0220 	orr.w	r2, r2, #32
 8011d58:	b2d2      	uxtb	r2, r2
 8011d5a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	6818      	ldr	r0, [r3, #0]
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	689b      	ldr	r3, [r3, #8]
 8011d64:	461a      	mov	r2, r3
 8011d66:	68f9      	ldr	r1, [r7, #12]
 8011d68:	f7fe ff00 	bl	8010b6c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	f103 021c 	add.w	r2, r3, #28
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	68db      	ldr	r3, [r3, #12]
 8011d76:	4619      	mov	r1, r3
 8011d78:	4610      	mov	r0, r2
 8011d7a:	f7fd feff 	bl	800fb7c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	3316      	adds	r3, #22
 8011d82:	6939      	ldr	r1, [r7, #16]
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7fd fef9 	bl	800fb7c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	3312      	adds	r3, #18
 8011d8e:	2100      	movs	r1, #0
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7fd fed8 	bl	800fb46 <st_word>
					fs->wflag = 1;
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	2201      	movs	r2, #1
 8011d9a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f7fe f974 	bl	801008c <sync_fs>
 8011da4:	4603      	mov	r3, r0
 8011da6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	7d1b      	ldrb	r3, [r3, #20]
 8011dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011db0:	b2da      	uxtb	r2, r3
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3718      	adds	r7, #24
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}

08011dc0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b084      	sub	sp, #16
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f7ff ff7b 	bl	8011cc4 <f_sync>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011dd2:	7bfb      	ldrb	r3, [r7, #15]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d118      	bne.n	8011e0a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f107 0208 	add.w	r2, r7, #8
 8011dde:	4611      	mov	r1, r2
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7ff fb93 	bl	801150c <validate>
 8011de6:	4603      	mov	r3, r0
 8011de8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011dea:	7bfb      	ldrb	r3, [r7, #15]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d10c      	bne.n	8011e0a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	691b      	ldr	r3, [r3, #16]
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7fe f877 	bl	800fee8 <dec_lock>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011dfe:	7bfb      	ldrb	r3, [r7, #15]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d102      	bne.n	8011e0a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2200      	movs	r2, #0
 8011e08:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3710      	adds	r7, #16
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b096      	sub	sp, #88	; 0x58
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011e1c:	f107 0108 	add.w	r1, r7, #8
 8011e20:	1d3b      	adds	r3, r7, #4
 8011e22:	2202      	movs	r2, #2
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7ff f8ed 	bl	8011004 <find_volume>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8011e34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	f040 80f2 	bne.w	8012022 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8011e3e:	687a      	ldr	r2, [r7, #4]
 8011e40:	f107 030c 	add.w	r3, r7, #12
 8011e44:	4611      	mov	r1, r2
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fe ffcc 	bl	8010de4 <follow_path>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8011e52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d102      	bne.n	8011e60 <f_mkdir+0x4c>
 8011e5a:	2308      	movs	r3, #8
 8011e5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8011e60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e64:	2b04      	cmp	r3, #4
 8011e66:	f040 80dc 	bne.w	8012022 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8011e6a:	f107 030c 	add.w	r3, r7, #12
 8011e6e:	2100      	movs	r1, #0
 8011e70:	4618      	mov	r0, r3
 8011e72:	f7fe fbe6 	bl	8010642 <create_chain>
 8011e76:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8011e78:	68bb      	ldr	r3, [r7, #8]
 8011e7a:	895b      	ldrh	r3, [r3, #10]
 8011e7c:	461a      	mov	r2, r3
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	899b      	ldrh	r3, [r3, #12]
 8011e82:	fb03 f302 	mul.w	r3, r3, r2
 8011e86:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8011e88:	2300      	movs	r3, #0
 8011e8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d102      	bne.n	8011e9a <f_mkdir+0x86>
 8011e94:	2307      	movs	r3, #7
 8011e96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8011e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e9c:	2b01      	cmp	r3, #1
 8011e9e:	d102      	bne.n	8011ea6 <f_mkdir+0x92>
 8011ea0:	2302      	movs	r3, #2
 8011ea2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eac:	d102      	bne.n	8011eb4 <f_mkdir+0xa0>
 8011eae:	2301      	movs	r3, #1
 8011eb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8011eb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d106      	bne.n	8011eca <f_mkdir+0xb6>
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f7fe f872 	bl	800ffa8 <sync_window>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8011eca:	f000 fa15 	bl	80122f8 <get_fattime>
 8011ece:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011ed0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d16c      	bne.n	8011fb2 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011edc:	4618      	mov	r0, r3
 8011ede:	f7fe f945 	bl	801016c <clust2sect>
 8011ee2:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	3334      	adds	r3, #52	; 0x34
 8011ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	899b      	ldrh	r3, [r3, #12]
 8011eee:	461a      	mov	r2, r3
 8011ef0:	2100      	movs	r1, #0
 8011ef2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011ef4:	f7fd fe8f 	bl	800fc16 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8011ef8:	220b      	movs	r2, #11
 8011efa:	2120      	movs	r1, #32
 8011efc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011efe:	f7fd fe8a 	bl	800fc16 <mem_set>
					dir[DIR_Name] = '.';
 8011f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f04:	222e      	movs	r2, #46	; 0x2e
 8011f06:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8011f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f0a:	330b      	adds	r3, #11
 8011f0c:	2210      	movs	r2, #16
 8011f0e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8011f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f12:	3316      	adds	r3, #22
 8011f14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011f16:	4618      	mov	r0, r3
 8011f18:	f7fd fe30 	bl	800fb7c <st_dword>
					st_clust(fs, dir, dcl);
 8011f1c:	68bb      	ldr	r3, [r7, #8]
 8011f1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011f22:	4618      	mov	r0, r3
 8011f24:	f7fe fe22 	bl	8010b6c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8011f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f2a:	3320      	adds	r3, #32
 8011f2c:	2220      	movs	r2, #32
 8011f2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7fd fe4f 	bl	800fbd4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8011f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f38:	3321      	adds	r3, #33	; 0x21
 8011f3a:	222e      	movs	r2, #46	; 0x2e
 8011f3c:	701a      	strb	r2, [r3, #0]
 8011f3e:	697b      	ldr	r3, [r7, #20]
 8011f40:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	781b      	ldrb	r3, [r3, #0]
 8011f46:	2b03      	cmp	r3, #3
 8011f48:	d106      	bne.n	8011f58 <f_mkdir+0x144>
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d101      	bne.n	8011f58 <f_mkdir+0x144>
 8011f54:	2300      	movs	r3, #0
 8011f56:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8011f58:	68b8      	ldr	r0, [r7, #8]
 8011f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f5c:	3320      	adds	r3, #32
 8011f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f60:	4619      	mov	r1, r3
 8011f62:	f7fe fe03 	bl	8010b6c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	895b      	ldrh	r3, [r3, #10]
 8011f6a:	653b      	str	r3, [r7, #80]	; 0x50
 8011f6c:	e01c      	b.n	8011fa8 <f_mkdir+0x194>
					fs->winsect = dsc++;
 8011f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f70:	1c5a      	adds	r2, r3, #1
 8011f72:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011f74:	68ba      	ldr	r2, [r7, #8]
 8011f76:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	2201      	movs	r2, #1
 8011f7c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7fe f811 	bl	800ffa8 <sync_window>
 8011f86:	4603      	mov	r3, r0
 8011f88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8011f8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d10d      	bne.n	8011fb0 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8011f94:	68bb      	ldr	r3, [r7, #8]
 8011f96:	899b      	ldrh	r3, [r3, #12]
 8011f98:	461a      	mov	r2, r3
 8011f9a:	2100      	movs	r1, #0
 8011f9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011f9e:	f7fd fe3a 	bl	800fc16 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fa4:	3b01      	subs	r3, #1
 8011fa6:	653b      	str	r3, [r7, #80]	; 0x50
 8011fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d1df      	bne.n	8011f6e <f_mkdir+0x15a>
 8011fae:	e000      	b.n	8011fb2 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8011fb0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8011fb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d107      	bne.n	8011fca <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8011fba:	f107 030c 	add.w	r3, r7, #12
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7fe fe49 	bl	8010c56 <dir_register>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8011fca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d120      	bne.n	8012014 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8011fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8011fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fd8:	3316      	adds	r3, #22
 8011fda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f7fd fdcd 	bl	800fb7c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8011fe2:	68bb      	ldr	r3, [r7, #8]
 8011fe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011fe6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7fe fdbf 	bl	8010b6c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ff0:	330b      	adds	r3, #11
 8011ff2:	2210      	movs	r2, #16
 8011ff4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	2201      	movs	r2, #1
 8011ffa:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011ffc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012000:	2b00      	cmp	r3, #0
 8012002:	d10e      	bne.n	8012022 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	4618      	mov	r0, r3
 8012008:	f7fe f840 	bl	801008c <sync_fs>
 801200c:	4603      	mov	r3, r0
 801200e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8012012:	e006      	b.n	8012022 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8012014:	f107 030c 	add.w	r3, r7, #12
 8012018:	2200      	movs	r2, #0
 801201a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801201c:	4618      	mov	r0, r3
 801201e:	f7fe faab 	bl	8010578 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8012022:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8012026:	4618      	mov	r0, r3
 8012028:	3758      	adds	r7, #88	; 0x58
 801202a:	46bd      	mov	sp, r7
 801202c:	bd80      	pop	{r7, pc}
	...

08012030 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012030:	b480      	push	{r7}
 8012032:	b087      	sub	sp, #28
 8012034:	af00      	add	r7, sp, #0
 8012036:	60f8      	str	r0, [r7, #12]
 8012038:	60b9      	str	r1, [r7, #8]
 801203a:	4613      	mov	r3, r2
 801203c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801203e:	2301      	movs	r3, #1
 8012040:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012042:	2300      	movs	r3, #0
 8012044:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012046:	4b1f      	ldr	r3, [pc, #124]	; (80120c4 <FATFS_LinkDriverEx+0x94>)
 8012048:	7a5b      	ldrb	r3, [r3, #9]
 801204a:	b2db      	uxtb	r3, r3
 801204c:	2b00      	cmp	r3, #0
 801204e:	d131      	bne.n	80120b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012050:	4b1c      	ldr	r3, [pc, #112]	; (80120c4 <FATFS_LinkDriverEx+0x94>)
 8012052:	7a5b      	ldrb	r3, [r3, #9]
 8012054:	b2db      	uxtb	r3, r3
 8012056:	461a      	mov	r2, r3
 8012058:	4b1a      	ldr	r3, [pc, #104]	; (80120c4 <FATFS_LinkDriverEx+0x94>)
 801205a:	2100      	movs	r1, #0
 801205c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801205e:	4b19      	ldr	r3, [pc, #100]	; (80120c4 <FATFS_LinkDriverEx+0x94>)
 8012060:	7a5b      	ldrb	r3, [r3, #9]
 8012062:	b2db      	uxtb	r3, r3
 8012064:	4a17      	ldr	r2, [pc, #92]	; (80120c4 <FATFS_LinkDriverEx+0x94>)
 8012066:	009b      	lsls	r3, r3, #2
 8012068:	4413      	add	r3, r2
 801206a:	68fa      	ldr	r2, [r7, #12]
 801206c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801206e:	4b15      	ldr	r3, [pc, #84]	; (80120c4 <FATFS_LinkDriverEx+0x94>)
 8012070:	7a5b      	ldrb	r3, [r3, #9]
 8012072:	b2db      	uxtb	r3, r3
 8012074:	461a      	mov	r2, r3
 8012076:	4b13      	ldr	r3, [pc, #76]	; (80120c4 <FATFS_LinkDriverEx+0x94>)
 8012078:	4413      	add	r3, r2
 801207a:	79fa      	ldrb	r2, [r7, #7]
 801207c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801207e:	4b11      	ldr	r3, [pc, #68]	; (80120c4 <FATFS_LinkDriverEx+0x94>)
 8012080:	7a5b      	ldrb	r3, [r3, #9]
 8012082:	b2db      	uxtb	r3, r3
 8012084:	1c5a      	adds	r2, r3, #1
 8012086:	b2d1      	uxtb	r1, r2
 8012088:	4a0e      	ldr	r2, [pc, #56]	; (80120c4 <FATFS_LinkDriverEx+0x94>)
 801208a:	7251      	strb	r1, [r2, #9]
 801208c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801208e:	7dbb      	ldrb	r3, [r7, #22]
 8012090:	3330      	adds	r3, #48	; 0x30
 8012092:	b2da      	uxtb	r2, r3
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012098:	68bb      	ldr	r3, [r7, #8]
 801209a:	3301      	adds	r3, #1
 801209c:	223a      	movs	r2, #58	; 0x3a
 801209e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	3302      	adds	r3, #2
 80120a4:	222f      	movs	r2, #47	; 0x2f
 80120a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	3303      	adds	r3, #3
 80120ac:	2200      	movs	r2, #0
 80120ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80120b0:	2300      	movs	r3, #0
 80120b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80120b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	371c      	adds	r7, #28
 80120ba:	46bd      	mov	sp, r7
 80120bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c0:	4770      	bx	lr
 80120c2:	bf00      	nop
 80120c4:	200007dc 	.word	0x200007dc

080120c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80120d2:	2200      	movs	r2, #0
 80120d4:	6839      	ldr	r1, [r7, #0]
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f7ff ffaa 	bl	8012030 <FATFS_LinkDriverEx>
 80120dc:	4603      	mov	r3, r0
}
 80120de:	4618      	mov	r0, r3
 80120e0:	3708      	adds	r7, #8
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}
	...

080120e8 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 80120e8:	b480      	push	{r7}
 80120ea:	b085      	sub	sp, #20
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
 80120f0:	460b      	mov	r3, r1
 80120f2:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 80120f4:	2300      	movs	r3, #0
 80120f6:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 80120f8:	2301      	movs	r3, #1
 80120fa:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 80120fc:	4b15      	ldr	r3, [pc, #84]	; (8012154 <FATFS_UnLinkDriverEx+0x6c>)
 80120fe:	7a5b      	ldrb	r3, [r3, #9]
 8012100:	b2db      	uxtb	r3, r3
 8012102:	2b00      	cmp	r3, #0
 8012104:	d01e      	beq.n	8012144 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	781b      	ldrb	r3, [r3, #0]
 801210a:	3b30      	subs	r3, #48	; 0x30
 801210c:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 801210e:	7bbb      	ldrb	r3, [r7, #14]
 8012110:	4a10      	ldr	r2, [pc, #64]	; (8012154 <FATFS_UnLinkDriverEx+0x6c>)
 8012112:	009b      	lsls	r3, r3, #2
 8012114:	4413      	add	r3, r2
 8012116:	685b      	ldr	r3, [r3, #4]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d013      	beq.n	8012144 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 801211c:	7bbb      	ldrb	r3, [r7, #14]
 801211e:	4a0d      	ldr	r2, [pc, #52]	; (8012154 <FATFS_UnLinkDriverEx+0x6c>)
 8012120:	009b      	lsls	r3, r3, #2
 8012122:	4413      	add	r3, r2
 8012124:	2200      	movs	r2, #0
 8012126:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8012128:	7bbb      	ldrb	r3, [r7, #14]
 801212a:	4a0a      	ldr	r2, [pc, #40]	; (8012154 <FATFS_UnLinkDriverEx+0x6c>)
 801212c:	4413      	add	r3, r2
 801212e:	2200      	movs	r2, #0
 8012130:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8012132:	4b08      	ldr	r3, [pc, #32]	; (8012154 <FATFS_UnLinkDriverEx+0x6c>)
 8012134:	7a5b      	ldrb	r3, [r3, #9]
 8012136:	b2db      	uxtb	r3, r3
 8012138:	3b01      	subs	r3, #1
 801213a:	b2da      	uxtb	r2, r3
 801213c:	4b05      	ldr	r3, [pc, #20]	; (8012154 <FATFS_UnLinkDriverEx+0x6c>)
 801213e:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8012140:	2300      	movs	r3, #0
 8012142:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8012144:	7bfb      	ldrb	r3, [r7, #15]
}
 8012146:	4618      	mov	r0, r3
 8012148:	3714      	adds	r7, #20
 801214a:	46bd      	mov	sp, r7
 801214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012150:	4770      	bx	lr
 8012152:	bf00      	nop
 8012154:	200007dc 	.word	0x200007dc

08012158 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8012160:	2100      	movs	r1, #0
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f7ff ffc0 	bl	80120e8 <FATFS_UnLinkDriverEx>
 8012168:	4603      	mov	r3, r0
}
 801216a:	4618      	mov	r0, r3
 801216c:	3708      	adds	r7, #8
 801216e:	46bd      	mov	sp, r7
 8012170:	bd80      	pop	{r7, pc}
	...

08012174 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b082      	sub	sp, #8
 8012178:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801217a:	2300      	movs	r3, #0
 801217c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801217e:	f000 f896 	bl	80122ae <BSP_SD_IsDetected>
 8012182:	4603      	mov	r3, r0
 8012184:	2b01      	cmp	r3, #1
 8012186:	d001      	beq.n	801218c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8012188:	2301      	movs	r3, #1
 801218a:	e012      	b.n	80121b2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 801218c:	480b      	ldr	r0, [pc, #44]	; (80121bc <BSP_SD_Init+0x48>)
 801218e:	f7f6 fdf5 	bl	8008d7c <HAL_SD_Init>
 8012192:	4603      	mov	r3, r0
 8012194:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012196:	79fb      	ldrb	r3, [r7, #7]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d109      	bne.n	80121b0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 801219c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80121a0:	4806      	ldr	r0, [pc, #24]	; (80121bc <BSP_SD_Init+0x48>)
 80121a2:	f7f7 fbd0 	bl	8009946 <HAL_SD_ConfigWideBusOperation>
 80121a6:	4603      	mov	r3, r0
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d001      	beq.n	80121b0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80121ac:	2301      	movs	r3, #1
 80121ae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80121b0:	79fb      	ldrb	r3, [r7, #7]
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3708      	adds	r7, #8
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
 80121ba:	bf00      	nop
 80121bc:	200089a0 	.word	0x200089a0

080121c0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b086      	sub	sp, #24
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	60f8      	str	r0, [r7, #12]
 80121c8:	60b9      	str	r1, [r7, #8]
 80121ca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80121cc:	2300      	movs	r3, #0
 80121ce:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	68ba      	ldr	r2, [r7, #8]
 80121d4:	68f9      	ldr	r1, [r7, #12]
 80121d6:	4806      	ldr	r0, [pc, #24]	; (80121f0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80121d8:	f7f6 fe58 	bl	8008e8c <HAL_SD_ReadBlocks_DMA>
 80121dc:	4603      	mov	r3, r0
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d001      	beq.n	80121e6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80121e2:	2301      	movs	r3, #1
 80121e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80121e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80121e8:	4618      	mov	r0, r3
 80121ea:	3718      	adds	r7, #24
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}
 80121f0:	200089a0 	.word	0x200089a0

080121f4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b086      	sub	sp, #24
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	60f8      	str	r0, [r7, #12]
 80121fc:	60b9      	str	r1, [r7, #8]
 80121fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012200:	2300      	movs	r3, #0
 8012202:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	68ba      	ldr	r2, [r7, #8]
 8012208:	68f9      	ldr	r1, [r7, #12]
 801220a:	4806      	ldr	r0, [pc, #24]	; (8012224 <BSP_SD_WriteBlocks_DMA+0x30>)
 801220c:	f7f6 ff0a 	bl	8009024 <HAL_SD_WriteBlocks_DMA>
 8012210:	4603      	mov	r3, r0
 8012212:	2b00      	cmp	r3, #0
 8012214:	d001      	beq.n	801221a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012216:	2301      	movs	r3, #1
 8012218:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 801221a:	7dfb      	ldrb	r3, [r7, #23]
}
 801221c:	4618      	mov	r0, r3
 801221e:	3718      	adds	r7, #24
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}
 8012224:	200089a0 	.word	0x200089a0

08012228 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801222c:	4805      	ldr	r0, [pc, #20]	; (8012244 <BSP_SD_GetCardState+0x1c>)
 801222e:	f7f7 fc06 	bl	8009a3e <HAL_SD_GetCardState>
 8012232:	4603      	mov	r3, r0
 8012234:	2b04      	cmp	r3, #4
 8012236:	bf14      	ite	ne
 8012238:	2301      	movne	r3, #1
 801223a:	2300      	moveq	r3, #0
 801223c:	b2db      	uxtb	r3, r3
}
 801223e:	4618      	mov	r0, r3
 8012240:	bd80      	pop	{r7, pc}
 8012242:	bf00      	nop
 8012244:	200089a0 	.word	0x200089a0

08012248 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8012250:	6879      	ldr	r1, [r7, #4]
 8012252:	4803      	ldr	r0, [pc, #12]	; (8012260 <BSP_SD_GetCardInfo+0x18>)
 8012254:	f7f7 fb4b 	bl	80098ee <HAL_SD_GetCardInfo>
}
 8012258:	bf00      	nop
 801225a:	3708      	adds	r7, #8
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}
 8012260:	200089a0 	.word	0x200089a0

08012264 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b082      	sub	sp, #8
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801226c:	f000 f818 	bl	80122a0 <BSP_SD_AbortCallback>
}
 8012270:	bf00      	nop
 8012272:	3708      	adds	r7, #8
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}

08012278 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b082      	sub	sp, #8
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012280:	f002 faba 	bl	80147f8 <BSP_SD_WriteCpltCallback>
}
 8012284:	bf00      	nop
 8012286:	3708      	adds	r7, #8
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}

0801228c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b082      	sub	sp, #8
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012294:	f002 fabc 	bl	8014810 <BSP_SD_ReadCpltCallback>
}
 8012298:	bf00      	nop
 801229a:	3708      	adds	r7, #8
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}

080122a0 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 80122a0:	b480      	push	{r7}
 80122a2:	af00      	add	r7, sp, #0

}
 80122a4:	bf00      	nop
 80122a6:	46bd      	mov	sp, r7
 80122a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ac:	4770      	bx	lr

080122ae <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80122ae:	b580      	push	{r7, lr}
 80122b0:	b082      	sub	sp, #8
 80122b2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80122b4:	2301      	movs	r3, #1
 80122b6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80122b8:	f000 f826 	bl	8012308 <BSP_PlatformIsDetected>
 80122bc:	4603      	mov	r3, r0
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d101      	bne.n	80122c6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80122c2:	2300      	movs	r3, #0
 80122c4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80122c6:	79fb      	ldrb	r3, [r7, #7]
 80122c8:	b2db      	uxtb	r3, r3
}
 80122ca:	4618      	mov	r0, r3
 80122cc:	3708      	adds	r7, #8
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd80      	pop	{r7, pc}
	...

080122d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80122d8:	4904      	ldr	r1, [pc, #16]	; (80122ec <MX_FATFS_Init+0x18>)
 80122da:	4805      	ldr	r0, [pc, #20]	; (80122f0 <MX_FATFS_Init+0x1c>)
 80122dc:	f7ff fef4 	bl	80120c8 <FATFS_LinkDriver>
 80122e0:	4603      	mov	r3, r0
 80122e2:	461a      	mov	r2, r3
 80122e4:	4b03      	ldr	r3, [pc, #12]	; (80122f4 <MX_FATFS_Init+0x20>)
 80122e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80122e8:	bf00      	nop
 80122ea:	bd80      	pop	{r7, pc}
 80122ec:	20006744 	.word	0x20006744
 80122f0:	0801bef8 	.word	0x0801bef8
 80122f4:	20006740 	.word	0x20006740

080122f8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80122f8:	b480      	push	{r7}
 80122fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80122fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80122fe:	4618      	mov	r0, r3
 8012300:	46bd      	mov	sp, r7
 8012302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012306:	4770      	bx	lr

08012308 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012308:	b580      	push	{r7, lr}
 801230a:	b082      	sub	sp, #8
 801230c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801230e:	2301      	movs	r3, #1
 8012310:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012316:	4806      	ldr	r0, [pc, #24]	; (8012330 <BSP_PlatformIsDetected+0x28>)
 8012318:	f7f3 fd3e 	bl	8005d98 <HAL_GPIO_ReadPin>
 801231c:	4603      	mov	r3, r0
 801231e:	2b00      	cmp	r3, #0
 8012320:	d001      	beq.n	8012326 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8012322:	2300      	movs	r3, #0
 8012324:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8012326:	79fb      	ldrb	r3, [r7, #7]
}  
 8012328:	4618      	mov	r0, r3
 801232a:	3708      	adds	r7, #8
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	40020000 	.word	0x40020000

08012334 <print>:
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b082      	sub	sp, #8
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 801233c:	2201      	movs	r2, #1
 801233e:	2140      	movs	r1, #64	; 0x40
 8012340:	480c      	ldr	r0, [pc, #48]	; (8012374 <print+0x40>)
 8012342:	f7f3 fd41 	bl	8005dc8 <HAL_GPIO_WritePin>
	while (CDC_Transmit_FS((uint8_t*) str, strlen(str)) == USBD_BUSY);
 8012346:	bf00      	nop
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f7ed ff4b 	bl	80001e4 <strlen>
 801234e:	4603      	mov	r3, r0
 8012350:	b29b      	uxth	r3, r3
 8012352:	4619      	mov	r1, r3
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f002 feeb 	bl	8015130 <CDC_Transmit_FS>
 801235a:	4603      	mov	r3, r0
 801235c:	2b01      	cmp	r3, #1
 801235e:	d0f3      	beq.n	8012348 <print+0x14>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8012360:	2200      	movs	r2, #0
 8012362:	2140      	movs	r1, #64	; 0x40
 8012364:	4803      	ldr	r0, [pc, #12]	; (8012374 <print+0x40>)
 8012366:	f7f3 fd2f 	bl	8005dc8 <HAL_GPIO_WritePin>
};
 801236a:	bf00      	nop
 801236c:	3708      	adds	r7, #8
 801236e:	46bd      	mov	sp, r7
 8012370:	bd80      	pop	{r7, pc}
 8012372:	bf00      	nop
 8012374:	40020800 	.word	0x40020800

08012378 <println>:
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b084      	sub	sp, #16
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8012380:	2201      	movs	r2, #1
 8012382:	2140      	movs	r1, #64	; 0x40
 8012384:	4820      	ldr	r0, [pc, #128]	; (8012408 <println+0x90>)
 8012386:	f7f3 fd1f 	bl	8005dc8 <HAL_GPIO_WritePin>
	printLen = strlen(str);
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	f7ed ff2a 	bl	80001e4 <strlen>
 8012390:	4602      	mov	r2, r0
 8012392:	4b1e      	ldr	r3, [pc, #120]	; (801240c <println+0x94>)
 8012394:	601a      	str	r2, [r3, #0]
	for (i = 0; i < printLen; i++)
 8012396:	2300      	movs	r3, #0
 8012398:	73fb      	strb	r3, [r7, #15]
 801239a:	e009      	b.n	80123b0 <println+0x38>
		printBuffer[i] = str[i];
 801239c:	7bfb      	ldrb	r3, [r7, #15]
 801239e:	687a      	ldr	r2, [r7, #4]
 80123a0:	441a      	add	r2, r3
 80123a2:	7bfb      	ldrb	r3, [r7, #15]
 80123a4:	7811      	ldrb	r1, [r2, #0]
 80123a6:	4a1a      	ldr	r2, [pc, #104]	; (8012410 <println+0x98>)
 80123a8:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 80123aa:	7bfb      	ldrb	r3, [r7, #15]
 80123ac:	3301      	adds	r3, #1
 80123ae:	73fb      	strb	r3, [r7, #15]
 80123b0:	7bfa      	ldrb	r2, [r7, #15]
 80123b2:	4b16      	ldr	r3, [pc, #88]	; (801240c <println+0x94>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	429a      	cmp	r2, r3
 80123b8:	d3f0      	bcc.n	801239c <println+0x24>
	printBuffer[printLen] = '\n';
 80123ba:	4b14      	ldr	r3, [pc, #80]	; (801240c <println+0x94>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	4a14      	ldr	r2, [pc, #80]	; (8012410 <println+0x98>)
 80123c0:	210a      	movs	r1, #10
 80123c2:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 80123c4:	4b11      	ldr	r3, [pc, #68]	; (801240c <println+0x94>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	3301      	adds	r3, #1
 80123ca:	4a11      	ldr	r2, [pc, #68]	; (8012410 <println+0x98>)
 80123cc:	210d      	movs	r1, #13
 80123ce:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 80123d0:	4b0e      	ldr	r3, [pc, #56]	; (801240c <println+0x94>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	3302      	adds	r3, #2
 80123d6:	4a0e      	ldr	r2, [pc, #56]	; (8012410 <println+0x98>)
 80123d8:	2100      	movs	r1, #0
 80123da:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 80123dc:	bf00      	nop
 80123de:	4b0b      	ldr	r3, [pc, #44]	; (801240c <println+0x94>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	b29b      	uxth	r3, r3
 80123e4:	3303      	adds	r3, #3
 80123e6:	b29b      	uxth	r3, r3
 80123e8:	4619      	mov	r1, r3
 80123ea:	4809      	ldr	r0, [pc, #36]	; (8012410 <println+0x98>)
 80123ec:	f002 fea0 	bl	8015130 <CDC_Transmit_FS>
 80123f0:	4603      	mov	r3, r0
 80123f2:	2b01      	cmp	r3, #1
 80123f4:	d0f3      	beq.n	80123de <println+0x66>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80123f6:	2200      	movs	r2, #0
 80123f8:	2140      	movs	r1, #64	; 0x40
 80123fa:	4803      	ldr	r0, [pc, #12]	; (8012408 <println+0x90>)
 80123fc:	f7f3 fce4 	bl	8005dc8 <HAL_GPIO_WritePin>
};
 8012400:	bf00      	nop
 8012402:	3710      	adds	r7, #16
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}
 8012408:	40020800 	.word	0x40020800
 801240c:	200007e8 	.word	0x200007e8
 8012410:	200007ec 	.word	0x200007ec

08012414 <print_float>:

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
}
static inline void print_float(float number)
{
 8012414:	b590      	push	{r4, r7, lr}
 8012416:	b083      	sub	sp, #12
 8012418:	af00      	add	r7, sp, #0
 801241a:	ed87 0a01 	vstr	s0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 801241e:	2201      	movs	r2, #1
 8012420:	2140      	movs	r1, #64	; 0x40
 8012422:	4813      	ldr	r0, [pc, #76]	; (8012470 <print_float+0x5c>)
 8012424:	f7f3 fcd0 	bl	8005dc8 <HAL_GPIO_WritePin>

	printLen = sprintf(printBuffer, "%f", number);
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f7ee f89d 	bl	8000568 <__aeabi_f2d>
 801242e:	4603      	mov	r3, r0
 8012430:	460c      	mov	r4, r1
 8012432:	461a      	mov	r2, r3
 8012434:	4623      	mov	r3, r4
 8012436:	490f      	ldr	r1, [pc, #60]	; (8012474 <print_float+0x60>)
 8012438:	480f      	ldr	r0, [pc, #60]	; (8012478 <print_float+0x64>)
 801243a:	f004 fa2b 	bl	8016894 <siprintf>
 801243e:	4603      	mov	r3, r0
 8012440:	461a      	mov	r2, r3
 8012442:	4b0e      	ldr	r3, [pc, #56]	; (801247c <print_float+0x68>)
 8012444:	601a      	str	r2, [r3, #0]
	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY);
 8012446:	bf00      	nop
 8012448:	4b0c      	ldr	r3, [pc, #48]	; (801247c <print_float+0x68>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	b29b      	uxth	r3, r3
 801244e:	4619      	mov	r1, r3
 8012450:	4809      	ldr	r0, [pc, #36]	; (8012478 <print_float+0x64>)
 8012452:	f002 fe6d 	bl	8015130 <CDC_Transmit_FS>
 8012456:	4603      	mov	r3, r0
 8012458:	2b01      	cmp	r3, #1
 801245a:	d0f5      	beq.n	8012448 <print_float+0x34>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 801245c:	2200      	movs	r2, #0
 801245e:	2140      	movs	r1, #64	; 0x40
 8012460:	4803      	ldr	r0, [pc, #12]	; (8012470 <print_float+0x5c>)
 8012462:	f7f3 fcb1 	bl	8005dc8 <HAL_GPIO_WritePin>
	#endif
}
 8012466:	bf00      	nop
 8012468:	370c      	adds	r7, #12
 801246a:	46bd      	mov	sp, r7
 801246c:	bd90      	pop	{r4, r7, pc}
 801246e:	bf00      	nop
 8012470:	40020800 	.word	0x40020800
 8012474:	0801b8e4 	.word	0x0801b8e4
 8012478:	200007ec 	.word	0x200007ec
 801247c:	200007e8 	.word	0x200007e8

08012480 <micros>:
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8012480:	b480      	push	{r7}
 8012482:	af00      	add	r7, sp, #0
 8012484:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801248a:	4618      	mov	r0, r3
 801248c:	46bd      	mov	sp, r7
 801248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012492:	4770      	bx	lr

08012494 <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8012494:	b480      	push	{r7}
 8012496:	af00      	add	r7, sp, #0
 8012498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801249e:	4a04      	ldr	r2, [pc, #16]	; (80124b0 <millis+0x1c>)
 80124a0:	fba2 2303 	umull	r2, r3, r2, r3
 80124a4:	099b      	lsrs	r3, r3, #6
 80124a6:	4618      	mov	r0, r3
 80124a8:	46bd      	mov	sp, r7
 80124aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ae:	4770      	bx	lr
 80124b0:	10624dd3 	.word	0x10624dd3

080124b4 <getTime>:
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b08c      	sub	sp, #48	; 0x30
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 80124bc:	f107 031c 	add.w	r3, r7, #28
 80124c0:	2200      	movs	r2, #0
 80124c2:	601a      	str	r2, [r3, #0]
 80124c4:	605a      	str	r2, [r3, #4]
 80124c6:	609a      	str	r2, [r3, #8]
 80124c8:	60da      	str	r2, [r3, #12]
 80124ca:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 80124cc:	2300      	movs	r3, #0
 80124ce:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 80124d0:	f107 030c 	add.w	r3, r7, #12
 80124d4:	2200      	movs	r2, #0
 80124d6:	601a      	str	r2, [r3, #0]
 80124d8:	605a      	str	r2, [r3, #4]
 80124da:	811a      	strh	r2, [r3, #8]
	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 80124dc:	f001 ff5a 	bl	8014394 <Get_RTC_Instance>
 80124e0:	f107 031c 	add.w	r3, r7, #28
 80124e4:	2200      	movs	r2, #0
 80124e6:	4619      	mov	r1, r3
 80124e8:	f7f6 fb29 	bl	8008b3e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 80124ec:	f001 ff52 	bl	8014394 <Get_RTC_Instance>
 80124f0:	f107 0318 	add.w	r3, r7, #24
 80124f4:	2200      	movs	r2, #0
 80124f6:	4619      	mov	r1, r3
 80124f8:	f7f6 fb7f 	bl	8008bfa <HAL_RTC_GetDate>
	toReturn.year = rtc_date.Year;
 80124fc:	7efb      	ldrb	r3, [r7, #27]
 80124fe:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 8012500:	7e7b      	ldrb	r3, [r7, #25]
 8012502:	737b      	strb	r3, [r7, #13]
	toReturn.dayM = rtc_date.Date;
 8012504:	7ebb      	ldrb	r3, [r7, #26]
 8012506:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8012508:	7e3b      	ldrb	r3, [r7, #24]
 801250a:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 801250c:	7f3b      	ldrb	r3, [r7, #28]
 801250e:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 8012510:	7f7b      	ldrb	r3, [r7, #29]
 8012512:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 8012514:	7fbb      	ldrb	r3, [r7, #30]
 8012516:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 8012518:	f7ff ffbc 	bl	8012494 <millis>
 801251c:	4602      	mov	r2, r0
 801251e:	4b0c      	ldr	r3, [pc, #48]	; (8012550 <getTime+0x9c>)
 8012520:	fba3 1302 	umull	r1, r3, r3, r2
 8012524:	099b      	lsrs	r3, r3, #6
 8012526:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801252a:	fb01 f303 	mul.w	r3, r1, r3
 801252e:	1ad3      	subs	r3, r2, r3
 8012530:	b29b      	uxth	r3, r3
 8012532:	82bb      	strh	r3, [r7, #20]
	return toReturn;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	461a      	mov	r2, r3
 8012538:	f107 030c 	add.w	r3, r7, #12
 801253c:	cb03      	ldmia	r3!, {r0, r1}
 801253e:	6010      	str	r0, [r2, #0]
 8012540:	6051      	str	r1, [r2, #4]
 8012542:	881b      	ldrh	r3, [r3, #0]
 8012544:	8113      	strh	r3, [r2, #8]
}
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	3730      	adds	r7, #48	; 0x30
 801254a:	46bd      	mov	sp, r7
 801254c:	bd80      	pop	{r7, pc}
 801254e:	bf00      	nop
 8012550:	10624dd3 	.word	0x10624dd3

08012554 <sdTest_begin>:
#include "sd.h"

bool sdActive;

static bool sdTest_begin(void)
{
 8012554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012556:	b091      	sub	sp, #68	; 0x44
 8012558:	af06      	add	r7, sp, #24
	if (SD_init() == FR_OK)
 801255a:	f7ee fe8d 	bl	8001278 <SD_init>
 801255e:	4603      	mov	r3, r0
 8012560:	2b00      	cmp	r3, #0
 8012562:	d172      	bne.n	801264a <sdTest_begin+0xf6>
	{
		println("[SD] Detected");
 8012564:	4841      	ldr	r0, [pc, #260]	; (801266c <sdTest_begin+0x118>)
 8012566:	f7ff ff07 	bl	8012378 <println>
		print("[SD] Creating test file...");
 801256a:	4841      	ldr	r0, [pc, #260]	; (8012670 <sdTest_begin+0x11c>)
 801256c:	f7ff fee2 	bl	8012334 <print>
		if (SD_newFile("/TEST.TXT") == FR_OK)
 8012570:	4840      	ldr	r0, [pc, #256]	; (8012674 <sdTest_begin+0x120>)
 8012572:	f7ee febd 	bl	80012f0 <SD_newFile>
 8012576:	4603      	mov	r3, r0
 8012578:	2b00      	cmp	r3, #0
 801257a:	d161      	bne.n	8012640 <sdTest_begin+0xec>
		{
			println("successful.");
 801257c:	483e      	ldr	r0, [pc, #248]	; (8012678 <sdTest_begin+0x124>)
 801257e:	f7ff fefb 	bl	8012378 <println>
			bool status = true;
 8012582:	2301      	movs	r3, #1
 8012584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status |= (SD_writeToFile("/TEST.TXT", "Created on: ") == FR_OK);
 8012588:	493c      	ldr	r1, [pc, #240]	; (801267c <sdTest_begin+0x128>)
 801258a:	483a      	ldr	r0, [pc, #232]	; (8012674 <sdTest_begin+0x120>)
 801258c:	f7ee fed8 	bl	8001340 <SD_writeToFile>
 8012590:	4603      	mov	r3, r0
 8012592:	2b00      	cmp	r3, #0
 8012594:	bf0c      	ite	eq
 8012596:	2301      	moveq	r3, #1
 8012598:	2300      	movne	r3, #0
 801259a:	b2db      	uxtb	r3, r3
 801259c:	461a      	mov	r2, r3
 801259e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125a2:	4313      	orrs	r3, r2
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	bf14      	ite	ne
 80125a8:	2301      	movne	r3, #1
 80125aa:	2300      	moveq	r3, #0
 80125ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			DateTime fileCreated = getTime();
 80125b0:	f107 031c 	add.w	r3, r7, #28
 80125b4:	4618      	mov	r0, r3
 80125b6:	f7ff ff7d 	bl	80124b4 <getTime>
			char dateStr[26] = {0};
 80125ba:	463b      	mov	r3, r7
 80125bc:	2200      	movs	r2, #0
 80125be:	601a      	str	r2, [r3, #0]
 80125c0:	605a      	str	r2, [r3, #4]
 80125c2:	609a      	str	r2, [r3, #8]
 80125c4:	60da      	str	r2, [r3, #12]
 80125c6:	611a      	str	r2, [r3, #16]
 80125c8:	615a      	str	r2, [r3, #20]
 80125ca:	831a      	strh	r2, [r3, #24]
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 80125cc:	7fbb      	ldrb	r3, [r7, #30]
 80125ce:	461e      	mov	r6, r3
 80125d0:	7f7b      	ldrb	r3, [r7, #29]
 80125d2:	469c      	mov	ip, r3
 80125d4:	7f3b      	ldrb	r3, [r7, #28]
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 80125d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80125da:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80125de:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 80125e2:	4604      	mov	r4, r0
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 80125e4:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 80125e6:	4605      	mov	r5, r0
 80125e8:	4638      	mov	r0, r7
 80125ea:	9504      	str	r5, [sp, #16]
 80125ec:	9403      	str	r4, [sp, #12]
 80125ee:	9102      	str	r1, [sp, #8]
 80125f0:	9201      	str	r2, [sp, #4]
 80125f2:	9300      	str	r3, [sp, #0]
 80125f4:	4663      	mov	r3, ip
 80125f6:	4632      	mov	r2, r6
 80125f8:	4921      	ldr	r1, [pc, #132]	; (8012680 <sdTest_begin+0x12c>)
 80125fa:	f004 f94b 	bl	8016894 <siprintf>

			status |= (SD_writeToFile("/TEST.TXT", dateStr) == FR_OK);
 80125fe:	463b      	mov	r3, r7
 8012600:	4619      	mov	r1, r3
 8012602:	481c      	ldr	r0, [pc, #112]	; (8012674 <sdTest_begin+0x120>)
 8012604:	f7ee fe9c 	bl	8001340 <SD_writeToFile>
 8012608:	4603      	mov	r3, r0
 801260a:	2b00      	cmp	r3, #0
 801260c:	bf0c      	ite	eq
 801260e:	2301      	moveq	r3, #1
 8012610:	2300      	movne	r3, #0
 8012612:	b2db      	uxtb	r3, r3
 8012614:	461a      	mov	r2, r3
 8012616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801261a:	4313      	orrs	r3, r2
 801261c:	2b00      	cmp	r3, #0
 801261e:	bf14      	ite	ne
 8012620:	2301      	movne	r3, #1
 8012622:	2300      	moveq	r3, #0
 8012624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if (status) println("[SD] Content writing successful!");
 8012628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801262c:	2b00      	cmp	r3, #0
 801262e:	d003      	beq.n	8012638 <sdTest_begin+0xe4>
 8012630:	4814      	ldr	r0, [pc, #80]	; (8012684 <sdTest_begin+0x130>)
 8012632:	f7ff fea1 	bl	8012378 <println>
 8012636:	e010      	b.n	801265a <sdTest_begin+0x106>
			else println("[SD] Content writing unsuccessful!");
 8012638:	4813      	ldr	r0, [pc, #76]	; (8012688 <sdTest_begin+0x134>)
 801263a:	f7ff fe9d 	bl	8012378 <println>
 801263e:	e00c      	b.n	801265a <sdTest_begin+0x106>
		}
		else
		{
			println("unsuccessful :(");
 8012640:	4812      	ldr	r0, [pc, #72]	; (801268c <sdTest_begin+0x138>)
 8012642:	f7ff fe99 	bl	8012378 <println>
			return false;
 8012646:	2300      	movs	r3, #0
 8012648:	e00b      	b.n	8012662 <sdTest_begin+0x10e>
		}
	}
	else
	{
		println("[SD] Init fail!");
 801264a:	4811      	ldr	r0, [pc, #68]	; (8012690 <sdTest_begin+0x13c>)
 801264c:	f7ff fe94 	bl	8012378 <println>
		sdActive = false;
 8012650:	4b10      	ldr	r3, [pc, #64]	; (8012694 <sdTest_begin+0x140>)
 8012652:	2200      	movs	r2, #0
 8012654:	701a      	strb	r2, [r3, #0]
		return false;
 8012656:	2300      	movs	r3, #0
 8012658:	e003      	b.n	8012662 <sdTest_begin+0x10e>
	}

	sdActive = true;
 801265a:	4b0e      	ldr	r3, [pc, #56]	; (8012694 <sdTest_begin+0x140>)
 801265c:	2201      	movs	r2, #1
 801265e:	701a      	strb	r2, [r3, #0]
	return true;
 8012660:	2301      	movs	r3, #1
}
 8012662:	4618      	mov	r0, r3
 8012664:	372c      	adds	r7, #44	; 0x2c
 8012666:	46bd      	mov	sp, r7
 8012668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801266a:	bf00      	nop
 801266c:	0801b8e8 	.word	0x0801b8e8
 8012670:	0801b8f8 	.word	0x0801b8f8
 8012674:	0801b914 	.word	0x0801b914
 8012678:	0801b920 	.word	0x0801b920
 801267c:	0801b92c 	.word	0x0801b92c
 8012680:	0801b93c 	.word	0x0801b93c
 8012684:	0801b954 	.word	0x0801b954
 8012688:	0801b978 	.word	0x0801b978
 801268c:	0801b99c 	.word	0x0801b99c
 8012690:	0801b9ac 	.word	0x0801b9ac
 8012694:	2000322c 	.word	0x2000322c

08012698 <duplex_begin>:
bool isReceiving;
bool firstTransmission;
uint8_t packetNumber;

static bool duplex_begin(void)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
	radio.reset = LR_RESET_Pin;
 801269e:	4b26      	ldr	r3, [pc, #152]	; (8012738 <duplex_begin+0xa0>)
 80126a0:	2220      	movs	r2, #32
 80126a2:	81da      	strh	r2, [r3, #14]
	radio.dio0 = LR_DIO0_Pin;
 80126a4:	4b24      	ldr	r3, [pc, #144]	; (8012738 <duplex_begin+0xa0>)
 80126a6:	2240      	movs	r2, #64	; 0x40
 80126a8:	821a      	strh	r2, [r3, #16]
	radio.nss = LR_NSS_Pin;
 80126aa:	4b23      	ldr	r3, [pc, #140]	; (8012738 <duplex_begin+0xa0>)
 80126ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80126b0:	825a      	strh	r2, [r3, #18]
	radio.rxtim = LR_TIM_Pin;
 80126b2:	4b21      	ldr	r3, [pc, #132]	; (8012738 <duplex_begin+0xa0>)
 80126b4:	2280      	movs	r2, #128	; 0x80
 80126b6:	829a      	strh	r2, [r3, #20]
	radio.reset_port = LR_RESET_GPIO_Port;
 80126b8:	4b1f      	ldr	r3, [pc, #124]	; (8012738 <duplex_begin+0xa0>)
 80126ba:	4a20      	ldr	r2, [pc, #128]	; (801273c <duplex_begin+0xa4>)
 80126bc:	619a      	str	r2, [r3, #24]
	radio.dio0_port = LR_DIO0_GPIO_Port;
 80126be:	4b1e      	ldr	r3, [pc, #120]	; (8012738 <duplex_begin+0xa0>)
 80126c0:	4a1f      	ldr	r2, [pc, #124]	; (8012740 <duplex_begin+0xa8>)
 80126c2:	61da      	str	r2, [r3, #28]
	radio.nss_port = LR_NSS_GPIO_Port;
 80126c4:	4b1c      	ldr	r3, [pc, #112]	; (8012738 <duplex_begin+0xa0>)
 80126c6:	4a1f      	ldr	r2, [pc, #124]	; (8012744 <duplex_begin+0xac>)
 80126c8:	621a      	str	r2, [r3, #32]
	radio.rxtim_port = LR_TIM_GPIO_Port;
 80126ca:	4b1b      	ldr	r3, [pc, #108]	; (8012738 <duplex_begin+0xa0>)
 80126cc:	4a1c      	ldr	r2, [pc, #112]	; (8012740 <duplex_begin+0xa8>)
 80126ce:	625a      	str	r2, [r3, #36]	; 0x24
	radio.spi = Get_SPI1_Instance();
 80126d0:	f001 fe4c 	bl	801436c <Get_SPI1_Instance>
 80126d4:	4602      	mov	r2, r0
 80126d6:	4b18      	ldr	r3, [pc, #96]	; (8012738 <duplex_begin+0xa0>)
 80126d8:	629a      	str	r2, [r3, #40]	; 0x28
	radio.config = sx1278_default_config;
 80126da:	4b17      	ldr	r3, [pc, #92]	; (8012738 <duplex_begin+0xa0>)
 80126dc:	4a1a      	ldr	r2, [pc, #104]	; (8012748 <duplex_begin+0xb0>)
 80126de:	ca07      	ldmia	r2, {r0, r1, r2}
 80126e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	radio.useDio0IRQ = true;
 80126e4:	4b14      	ldr	r3, [pc, #80]	; (8012738 <duplex_begin+0xa0>)
 80126e6:	2201      	movs	r2, #1
 80126e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	uint8_t attempts = 0;
 80126ec:	2300      	movs	r3, #0
 80126ee:	71fb      	strb	r3, [r7, #7]

	while (!SX1278_init(&radio))
 80126f0:	e00b      	b.n	801270a <duplex_begin+0x72>
	{
		HAL_Delay(500);
 80126f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80126f6:	f7f2 fce9 	bl	80050cc <HAL_Delay>
		if (DUPLEX_DEBUG) println("[LoRa] Init unsuccessful, retrying...");
		attempts++;
 80126fa:	79fb      	ldrb	r3, [r7, #7]
 80126fc:	3301      	adds	r3, #1
 80126fe:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 8012700:	79fb      	ldrb	r3, [r7, #7]
 8012702:	2b04      	cmp	r3, #4
 8012704:	d901      	bls.n	801270a <duplex_begin+0x72>
		{
			if (DUPLEX_DEBUG) println("[LoRa] Too many attempts, Radio is not active!");
			return false;
 8012706:	2300      	movs	r3, #0
 8012708:	e011      	b.n	801272e <duplex_begin+0x96>
	while (!SX1278_init(&radio))
 801270a:	480b      	ldr	r0, [pc, #44]	; (8012738 <duplex_begin+0xa0>)
 801270c:	f7ee ff76 	bl	80015fc <SX1278_init>
 8012710:	4603      	mov	r3, r0
 8012712:	f083 0301 	eor.w	r3, r3, #1
 8012716:	b2db      	uxtb	r3, r3
 8012718:	2b00      	cmp	r3, #0
 801271a:	d1ea      	bne.n	80126f2 <duplex_begin+0x5a>
		}
	}
	if (DUPLEX_DEBUG) println("[LoRa] Radio successful init!");
	packetNumber = 1;
 801271c:	4b0b      	ldr	r3, [pc, #44]	; (801274c <duplex_begin+0xb4>)
 801271e:	2201      	movs	r2, #1
 8012720:	701a      	strb	r2, [r3, #0]
	firstTransmission = true;
 8012722:	4b0b      	ldr	r3, [pc, #44]	; (8012750 <duplex_begin+0xb8>)
 8012724:	2201      	movs	r2, #1
 8012726:	701a      	strb	r2, [r3, #0]
	isReceiving = false;
 8012728:	4b0a      	ldr	r3, [pc, #40]	; (8012754 <duplex_begin+0xbc>)
 801272a:	2200      	movs	r2, #0
 801272c:	701a      	strb	r2, [r3, #0]
}
 801272e:	4618      	mov	r0, r3
 8012730:	3708      	adds	r7, #8
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}
 8012736:	bf00      	nop
 8012738:	20002c74 	.word	0x20002c74
 801273c:	40020800 	.word	0x40020800
 8012740:	40020000 	.word	0x40020000
 8012744:	40020400 	.word	0x40020400
 8012748:	20000124 	.word	0x20000124
 801274c:	200062c0 	.word	0x200062c0
 8012750:	20004650 	.word	0x20004650
 8012754:	200066c8 	.word	0x200066c8

08012758 <duplex_checkINT>:

static bool duplex_checkINT()
{
 8012758:	b580      	push	{r7, lr}
 801275a:	af00      	add	r7, sp, #0
	return (firstTransmission || (radio.pendingIRQ && HAL_GPIO_ReadPin(radio.dio0_port, radio.dio0) == GPIO_PIN_SET) || SX1278_intTimeout(&radio));
 801275c:	4b10      	ldr	r3, [pc, #64]	; (80127a0 <duplex_checkINT+0x48>)
 801275e:	781b      	ldrb	r3, [r3, #0]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d115      	bne.n	8012790 <duplex_checkINT+0x38>
 8012764:	4b0f      	ldr	r3, [pc, #60]	; (80127a4 <duplex_checkINT+0x4c>)
 8012766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801276a:	2b00      	cmp	r3, #0
 801276c:	d00a      	beq.n	8012784 <duplex_checkINT+0x2c>
 801276e:	4b0d      	ldr	r3, [pc, #52]	; (80127a4 <duplex_checkINT+0x4c>)
 8012770:	69da      	ldr	r2, [r3, #28]
 8012772:	4b0c      	ldr	r3, [pc, #48]	; (80127a4 <duplex_checkINT+0x4c>)
 8012774:	8a1b      	ldrh	r3, [r3, #16]
 8012776:	4619      	mov	r1, r3
 8012778:	4610      	mov	r0, r2
 801277a:	f7f3 fb0d 	bl	8005d98 <HAL_GPIO_ReadPin>
 801277e:	4603      	mov	r3, r0
 8012780:	2b01      	cmp	r3, #1
 8012782:	d005      	beq.n	8012790 <duplex_checkINT+0x38>
 8012784:	4807      	ldr	r0, [pc, #28]	; (80127a4 <duplex_checkINT+0x4c>)
 8012786:	f7ef fa76 	bl	8001c76 <SX1278_intTimeout>
 801278a:	4603      	mov	r3, r0
 801278c:	2b00      	cmp	r3, #0
 801278e:	d001      	beq.n	8012794 <duplex_checkINT+0x3c>
 8012790:	2301      	movs	r3, #1
 8012792:	e000      	b.n	8012796 <duplex_checkINT+0x3e>
 8012794:	2300      	movs	r3, #0
 8012796:	f003 0301 	and.w	r3, r3, #1
 801279a:	b2db      	uxtb	r3, r3
}
 801279c:	4618      	mov	r0, r3
 801279e:	bd80      	pop	{r7, pc}
 80127a0:	20004650 	.word	0x20004650
 80127a4:	20002c74 	.word	0x20002c74

080127a8 <duplex_loop>:

static bool duplex_loop(uint8_t* buf, uint8_t len, bool externallyInvoked)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
 80127b0:	460b      	mov	r3, r1
 80127b2:	70fb      	strb	r3, [r7, #3]
 80127b4:	4613      	mov	r3, r2
 80127b6:	70bb      	strb	r3, [r7, #2]
	if (radio.active)
 80127b8:	4b45      	ldr	r3, [pc, #276]	; (80128d0 <duplex_loop+0x128>)
 80127ba:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80127be:	2b00      	cmp	r3, #0
 80127c0:	f000 8081 	beq.w	80128c6 <duplex_loop+0x11e>
	{
		if (radio.useDio0IRQ)
 80127c4:	4b42      	ldr	r3, [pc, #264]	; (80128d0 <duplex_loop+0x128>)
 80127c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d073      	beq.n	80128b6 <duplex_loop+0x10e>
		{
			// manually check for interrupt
			if (externallyInvoked || duplex_checkINT())
 80127ce:	78bb      	ldrb	r3, [r7, #2]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d104      	bne.n	80127de <duplex_loop+0x36>
 80127d4:	f7ff ffc0 	bl	8012758 <duplex_checkINT>
 80127d8:	4603      	mov	r3, r0
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d069      	beq.n	80128b2 <duplex_loop+0x10a>
			{
				if (!firstTransmission) SX1278_dio0_IRQ(&radio);
 80127de:	4b3d      	ldr	r3, [pc, #244]	; (80128d4 <duplex_loop+0x12c>)
 80127e0:	781b      	ldrb	r3, [r3, #0]
 80127e2:	f083 0301 	eor.w	r3, r3, #1
 80127e6:	b2db      	uxtb	r3, r3
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d002      	beq.n	80127f2 <duplex_loop+0x4a>
 80127ec:	4838      	ldr	r0, [pc, #224]	; (80128d0 <duplex_loop+0x128>)
 80127ee:	f7ef fa15 	bl	8001c1c <SX1278_dio0_IRQ>
				if (packetNumber == 0)
 80127f2:	4b39      	ldr	r3, [pc, #228]	; (80128d8 <duplex_loop+0x130>)
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d112      	bne.n	8012820 <duplex_loop+0x78>
				{
					if (DUPLEX_DEBUG) println("[LoRa] Packet received!");
					if (radio.newPacket)
 80127fa:	4b35      	ldr	r3, [pc, #212]	; (80128d0 <duplex_loop+0x128>)
 80127fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012800:	2b00      	cmp	r3, #0
 8012802:	d003      	beq.n	801280c <duplex_loop+0x64>
					{
						log_radio(&radio, false);
 8012804:	2100      	movs	r1, #0
 8012806:	4832      	ldr	r0, [pc, #200]	; (80128d0 <duplex_loop+0x128>)
 8012808:	f7f2 fb94 	bl	8004f34 <log_radio>
					}
					else if (radio.rxTimeout)
					{
						if (DUPLEX_DEBUG) println("[LoRa] Receive timeout.");
					}
					HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 801280c:	2200      	movs	r2, #0
 801280e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012812:	4832      	ldr	r0, [pc, #200]	; (80128dc <duplex_loop+0x134>)
 8012814:	f7f3 fad8 	bl	8005dc8 <HAL_GPIO_WritePin>
					isReceiving = false;
 8012818:	4b31      	ldr	r3, [pc, #196]	; (80128e0 <duplex_loop+0x138>)
 801281a:	2200      	movs	r2, #0
 801281c:	701a      	strb	r2, [r3, #0]
 801281e:	e003      	b.n	8012828 <duplex_loop+0x80>
						printLen = sprintf(printBuffer, "[LoRa] Input packet length: %d, content: [", len);
						printv(printBuffer, printLen);
						printv(buf, len);
						println("]");
					}
					log_radio(&radio, true);
 8012820:	2101      	movs	r1, #1
 8012822:	482b      	ldr	r0, [pc, #172]	; (80128d0 <duplex_loop+0x128>)
 8012824:	f7f2 fb86 	bl	8004f34 <log_radio>
				}

				if (packetNumber == DUPLEX_TX_COUNT - 1)
 8012828:	4b2b      	ldr	r3, [pc, #172]	; (80128d8 <duplex_loop+0x130>)
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	2b06      	cmp	r3, #6
 801282e:	d10f      	bne.n	8012850 <duplex_loop+0xa8>
				{
					SX1278_receive(&radio);
 8012830:	4827      	ldr	r0, [pc, #156]	; (80128d0 <duplex_loop+0x128>)
 8012832:	f7ef f817 	bl	8001864 <SX1278_receive>
					packetNumber = -1;
 8012836:	4b28      	ldr	r3, [pc, #160]	; (80128d8 <duplex_loop+0x130>)
 8012838:	22ff      	movs	r2, #255	; 0xff
 801283a:	701a      	strb	r2, [r3, #0]
					isReceiving = true;
 801283c:	4b28      	ldr	r3, [pc, #160]	; (80128e0 <duplex_loop+0x138>)
 801283e:	2201      	movs	r2, #1
 8012840:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_SET);
 8012842:	2201      	movs	r2, #1
 8012844:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012848:	4824      	ldr	r0, [pc, #144]	; (80128dc <duplex_loop+0x134>)
 801284a:	f7f3 fabd 	bl	8005dc8 <HAL_GPIO_WritePin>
 801284e:	e00c      	b.n	801286a <duplex_loop+0xc2>
				}
				else
				{
					buf[len - 1] = packetNumber;
 8012850:	78fb      	ldrb	r3, [r7, #3]
 8012852:	3b01      	subs	r3, #1
 8012854:	687a      	ldr	r2, [r7, #4]
 8012856:	4413      	add	r3, r2
 8012858:	4a1f      	ldr	r2, [pc, #124]	; (80128d8 <duplex_loop+0x130>)
 801285a:	7812      	ldrb	r2, [r2, #0]
 801285c:	701a      	strb	r2, [r3, #0]
					SX1278_transmit(&radio, buf, len);
 801285e:	78fb      	ldrb	r3, [r7, #3]
 8012860:	461a      	mov	r2, r3
 8012862:	6879      	ldr	r1, [r7, #4]
 8012864:	481a      	ldr	r0, [pc, #104]	; (80128d0 <duplex_loop+0x128>)
 8012866:	f7ee ffc1 	bl	80017ec <SX1278_transmit>
					if (DUPLEX_DEBUG) println("[LoRa] Packet pushed!");
				}
				firstTransmission = false;
 801286a:	4b1a      	ldr	r3, [pc, #104]	; (80128d4 <duplex_loop+0x12c>)
 801286c:	2200      	movs	r2, #0
 801286e:	701a      	strb	r2, [r3, #0]
				packetNumber++;
 8012870:	4b19      	ldr	r3, [pc, #100]	; (80128d8 <duplex_loop+0x130>)
 8012872:	781b      	ldrb	r3, [r3, #0]
 8012874:	3301      	adds	r3, #1
 8012876:	b2da      	uxtb	r2, r3
 8012878:	4b17      	ldr	r3, [pc, #92]	; (80128d8 <duplex_loop+0x130>)
 801287a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(LEDD_GPIO_Port, LEDD_Pin);
 801287c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012880:	4816      	ldr	r0, [pc, #88]	; (80128dc <duplex_loop+0x134>)
 8012882:	f7f3 faba 	bl	8005dfa <HAL_GPIO_TogglePin>
				return true && !(radio.rxTimeout && isReceiving);
 8012886:	4b12      	ldr	r3, [pc, #72]	; (80128d0 <duplex_loop+0x128>)
 8012888:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801288c:	f083 0301 	eor.w	r3, r3, #1
 8012890:	b2db      	uxtb	r3, r3
 8012892:	2b00      	cmp	r3, #0
 8012894:	d106      	bne.n	80128a4 <duplex_loop+0xfc>
 8012896:	4b12      	ldr	r3, [pc, #72]	; (80128e0 <duplex_loop+0x138>)
 8012898:	781b      	ldrb	r3, [r3, #0]
 801289a:	f083 0301 	eor.w	r3, r3, #1
 801289e:	b2db      	uxtb	r3, r3
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d001      	beq.n	80128a8 <duplex_loop+0x100>
 80128a4:	2301      	movs	r3, #1
 80128a6:	e000      	b.n	80128aa <duplex_loop+0x102>
 80128a8:	2300      	movs	r3, #0
 80128aa:	f003 0301 	and.w	r3, r3, #1
 80128ae:	b2db      	uxtb	r3, r3
 80128b0:	e00a      	b.n	80128c8 <duplex_loop+0x120>
			}
			else return false;
 80128b2:	2300      	movs	r3, #0
 80128b4:	e008      	b.n	80128c8 <duplex_loop+0x120>
		}
		else
		{
			SX1278_transmit(&radio, buf, len);
 80128b6:	78fb      	ldrb	r3, [r7, #3]
 80128b8:	461a      	mov	r2, r3
 80128ba:	6879      	ldr	r1, [r7, #4]
 80128bc:	4804      	ldr	r0, [pc, #16]	; (80128d0 <duplex_loop+0x128>)
 80128be:	f7ee ff95 	bl	80017ec <SX1278_transmit>
			if (DUPLEX_DEBUG) println("[LoRa] Transmission finished.");
			return true;
 80128c2:	2301      	movs	r3, #1
 80128c4:	e000      	b.n	80128c8 <duplex_loop+0x120>
		}
	}
	return false;
 80128c6:	2300      	movs	r3, #0
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	3708      	adds	r7, #8
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}
 80128d0:	20002c74 	.word	0x20002c74
 80128d4:	20004650 	.word	0x20004650
 80128d8:	200062c0 	.word	0x200062c0
 80128dc:	40020400 	.word	0x40020400
 80128e0:	200066c8 	.word	0x200066c8

080128e4 <imuTest_getData>:
float lin_ax, lin_ay, lin_az;             // linear acceleration (acceleration with gravity component subtracted)

bool imuActive;

static bool imuTest_getData(void)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	af00      	add	r7, sp, #0
	if (MPU_readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)	// check if data ready interrupt
 80128e8:	213a      	movs	r1, #58	; 0x3a
 80128ea:	20d2      	movs	r0, #210	; 0xd2
 80128ec:	f7f1 f861 	bl	80039b2 <MPU_readByte>
 80128f0:	4603      	mov	r3, r0
 80128f2:	f003 0301 	and.w	r3, r3, #1
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	f000 80bf 	beq.w	8012a7a <imuTest_getData+0x196>
	{
		MPU_readAccelData(accelCount);						// Read the x/y/z adc values
 80128fc:	4860      	ldr	r0, [pc, #384]	; (8012a80 <imuTest_getData+0x19c>)
 80128fe:	f7f1 f8ac 	bl	8003a5a <MPU_readAccelData>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes - MPU9250accelBias[0];	// get actual g value, this depends on scale being set
 8012902:	4b5f      	ldr	r3, [pc, #380]	; (8012a80 <imuTest_getData+0x19c>)
 8012904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012908:	ee07 3a90 	vmov	s15, r3
 801290c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012910:	4b5c      	ldr	r3, [pc, #368]	; (8012a84 <imuTest_getData+0x1a0>)
 8012912:	edd3 7a00 	vldr	s15, [r3]
 8012916:	ee27 7a27 	vmul.f32	s14, s14, s15
 801291a:	4b5b      	ldr	r3, [pc, #364]	; (8012a88 <imuTest_getData+0x1a4>)
 801291c:	edd3 7a00 	vldr	s15, [r3]
 8012920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012924:	4b59      	ldr	r3, [pc, #356]	; (8012a8c <imuTest_getData+0x1a8>)
 8012926:	edc3 7a00 	vstr	s15, [r3]
		ay = (float)accelCount[1]*aRes - MPU9250accelBias[1];
 801292a:	4b55      	ldr	r3, [pc, #340]	; (8012a80 <imuTest_getData+0x19c>)
 801292c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012930:	ee07 3a90 	vmov	s15, r3
 8012934:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012938:	4b52      	ldr	r3, [pc, #328]	; (8012a84 <imuTest_getData+0x1a0>)
 801293a:	edd3 7a00 	vldr	s15, [r3]
 801293e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012942:	4b51      	ldr	r3, [pc, #324]	; (8012a88 <imuTest_getData+0x1a4>)
 8012944:	edd3 7a01 	vldr	s15, [r3, #4]
 8012948:	ee77 7a67 	vsub.f32	s15, s14, s15
 801294c:	4b50      	ldr	r3, [pc, #320]	; (8012a90 <imuTest_getData+0x1ac>)
 801294e:	edc3 7a00 	vstr	s15, [r3]
		az = (float)accelCount[2]*aRes - MPU9250accelBias[2];
 8012952:	4b4b      	ldr	r3, [pc, #300]	; (8012a80 <imuTest_getData+0x19c>)
 8012954:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012958:	ee07 3a90 	vmov	s15, r3
 801295c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012960:	4b48      	ldr	r3, [pc, #288]	; (8012a84 <imuTest_getData+0x1a0>)
 8012962:	edd3 7a00 	vldr	s15, [r3]
 8012966:	ee27 7a27 	vmul.f32	s14, s14, s15
 801296a:	4b47      	ldr	r3, [pc, #284]	; (8012a88 <imuTest_getData+0x1a4>)
 801296c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012974:	4b47      	ldr	r3, [pc, #284]	; (8012a94 <imuTest_getData+0x1b0>)
 8012976:	edc3 7a00 	vstr	s15, [r3]

		MPU_readGyroData(gyroCount);	// Read the x/y/z adc values
 801297a:	4847      	ldr	r0, [pc, #284]	; (8012a98 <imuTest_getData+0x1b4>)
 801297c:	f7f1 f899 	bl	8003ab2 <MPU_readGyroData>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;	// get actual gyro value, this depends on scale being set
 8012980:	4b45      	ldr	r3, [pc, #276]	; (8012a98 <imuTest_getData+0x1b4>)
 8012982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012986:	ee07 3a90 	vmov	s15, r3
 801298a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801298e:	4b43      	ldr	r3, [pc, #268]	; (8012a9c <imuTest_getData+0x1b8>)
 8012990:	edd3 7a00 	vldr	s15, [r3]
 8012994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012998:	4b41      	ldr	r3, [pc, #260]	; (8012aa0 <imuTest_getData+0x1bc>)
 801299a:	edc3 7a00 	vstr	s15, [r3]
		gy = (float)gyroCount[1]*gRes;
 801299e:	4b3e      	ldr	r3, [pc, #248]	; (8012a98 <imuTest_getData+0x1b4>)
 80129a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80129a4:	ee07 3a90 	vmov	s15, r3
 80129a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80129ac:	4b3b      	ldr	r3, [pc, #236]	; (8012a9c <imuTest_getData+0x1b8>)
 80129ae:	edd3 7a00 	vldr	s15, [r3]
 80129b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129b6:	4b3b      	ldr	r3, [pc, #236]	; (8012aa4 <imuTest_getData+0x1c0>)
 80129b8:	edc3 7a00 	vstr	s15, [r3]
		gz = (float)gyroCount[2]*gRes;
 80129bc:	4b36      	ldr	r3, [pc, #216]	; (8012a98 <imuTest_getData+0x1b4>)
 80129be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80129c2:	ee07 3a90 	vmov	s15, r3
 80129c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80129ca:	4b34      	ldr	r3, [pc, #208]	; (8012a9c <imuTest_getData+0x1b8>)
 80129cc:	edd3 7a00 	vldr	s15, [r3]
 80129d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129d4:	4b34      	ldr	r3, [pc, #208]	; (8012aa8 <imuTest_getData+0x1c4>)
 80129d6:	edc3 7a00 	vstr	s15, [r3]

		MPU_readMagData(magCount);	// Read the x/y/z adc values
 80129da:	4834      	ldr	r0, [pc, #208]	; (8012aac <imuTest_getData+0x1c8>)
 80129dc:	f7f1 f895 	bl	8003b0a <MPU_readMagData>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - MPU9250magBias[0];	// get actual magnetometer value, this depends on scale being set
 80129e0:	4b32      	ldr	r3, [pc, #200]	; (8012aac <imuTest_getData+0x1c8>)
 80129e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80129e6:	ee07 3a90 	vmov	s15, r3
 80129ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80129ee:	4b30      	ldr	r3, [pc, #192]	; (8012ab0 <imuTest_getData+0x1cc>)
 80129f0:	edd3 7a00 	vldr	s15, [r3]
 80129f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80129f8:	4b2e      	ldr	r3, [pc, #184]	; (8012ab4 <imuTest_getData+0x1d0>)
 80129fa:	edd3 7a00 	vldr	s15, [r3]
 80129fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012a02:	4b2d      	ldr	r3, [pc, #180]	; (8012ab8 <imuTest_getData+0x1d4>)
 8012a04:	edd3 7a00 	vldr	s15, [r3]
 8012a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a0c:	4b2b      	ldr	r3, [pc, #172]	; (8012abc <imuTest_getData+0x1d8>)
 8012a0e:	edc3 7a00 	vstr	s15, [r3]
		my = (float)magCount[1]*mRes*magCalibration[1] - MPU9250magBias[1];
 8012a12:	4b26      	ldr	r3, [pc, #152]	; (8012aac <imuTest_getData+0x1c8>)
 8012a14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012a18:	ee07 3a90 	vmov	s15, r3
 8012a1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012a20:	4b23      	ldr	r3, [pc, #140]	; (8012ab0 <imuTest_getData+0x1cc>)
 8012a22:	edd3 7a00 	vldr	s15, [r3]
 8012a26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012a2a:	4b22      	ldr	r3, [pc, #136]	; (8012ab4 <imuTest_getData+0x1d0>)
 8012a2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8012a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012a34:	4b20      	ldr	r3, [pc, #128]	; (8012ab8 <imuTest_getData+0x1d4>)
 8012a36:	edd3 7a01 	vldr	s15, [r3, #4]
 8012a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a3e:	4b20      	ldr	r3, [pc, #128]	; (8012ac0 <imuTest_getData+0x1dc>)
 8012a40:	edc3 7a00 	vstr	s15, [r3]
		mz = (float)magCount[2]*mRes*magCalibration[2] - MPU9250magBias[2];
 8012a44:	4b19      	ldr	r3, [pc, #100]	; (8012aac <imuTest_getData+0x1c8>)
 8012a46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012a4a:	ee07 3a90 	vmov	s15, r3
 8012a4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012a52:	4b17      	ldr	r3, [pc, #92]	; (8012ab0 <imuTest_getData+0x1cc>)
 8012a54:	edd3 7a00 	vldr	s15, [r3]
 8012a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012a5c:	4b15      	ldr	r3, [pc, #84]	; (8012ab4 <imuTest_getData+0x1d0>)
 8012a5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8012a62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012a66:	4b14      	ldr	r3, [pc, #80]	; (8012ab8 <imuTest_getData+0x1d4>)
 8012a68:	edd3 7a02 	vldr	s15, [r3, #8]
 8012a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a70:	4b14      	ldr	r3, [pc, #80]	; (8012ac4 <imuTest_getData+0x1e0>)
 8012a72:	edc3 7a00 	vstr	s15, [r3]

		return true;
 8012a76:	2301      	movs	r3, #1
 8012a78:	e000      	b.n	8012a7c <imuTest_getData+0x198>
	}
	return false;
 8012a7a:	2300      	movs	r3, #0
}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	bd80      	pop	{r7, pc}
 8012a80:	200030ec 	.word	0x200030ec
 8012a84:	20003170 	.word	0x20003170
 8012a88:	200030f4 	.word	0x200030f4
 8012a8c:	2000316c 	.word	0x2000316c
 8012a90:	20003218 	.word	0x20003218
 8012a94:	20003134 	.word	0x20003134
 8012a98:	2000313c 	.word	0x2000313c
 8012a9c:	200031b0 	.word	0x200031b0
 8012aa0:	20003208 	.word	0x20003208
 8012aa4:	20003130 	.word	0x20003130
 8012aa8:	200031a0 	.word	0x200031a0
 8012aac:	200031cc 	.word	0x200031cc
 8012ab0:	200031e4 	.word	0x200031e4
 8012ab4:	2000320c 	.word	0x2000320c
 8012ab8:	20003184 	.word	0x20003184
 8012abc:	2000321c 	.word	0x2000321c
 8012ac0:	20003144 	.word	0x20003144
 8012ac4:	200031b4 	.word	0x200031b4

08012ac8 <imuTest_quatUpdate>:
static bool imuTest_quatUpdate(void)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	af00      	add	r7, sp, #0
	if (micros() - lastCompute > 10)
 8012acc:	f7ff fcd8 	bl	8012480 <micros>
 8012ad0:	4602      	mov	r2, r0
 8012ad2:	4b43      	ldr	r3, [pc, #268]	; (8012be0 <imuTest_quatUpdate+0x118>)
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	1ad3      	subs	r3, r2, r3
 8012ad8:	2b0a      	cmp	r3, #10
 8012ada:	d97d      	bls.n	8012bd8 <imuTest_quatUpdate+0x110>
	{
		Now = micros();
 8012adc:	f7ff fcd0 	bl	8012480 <micros>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	461a      	mov	r2, r3
 8012ae4:	4b3f      	ldr	r3, [pc, #252]	; (8012be4 <imuTest_quatUpdate+0x11c>)
 8012ae6:	601a      	str	r2, [r3, #0]
		deltat = ((Now - lastUpdate)/1000000.0f); // set integration time by time elapsed since last filter update
 8012ae8:	4b3e      	ldr	r3, [pc, #248]	; (8012be4 <imuTest_quatUpdate+0x11c>)
 8012aea:	681a      	ldr	r2, [r3, #0]
 8012aec:	4b3e      	ldr	r3, [pc, #248]	; (8012be8 <imuTest_quatUpdate+0x120>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	1ad3      	subs	r3, r2, r3
 8012af2:	ee07 3a90 	vmov	s15, r3
 8012af6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012afa:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8012bec <imuTest_quatUpdate+0x124>
 8012afe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012b02:	4b3b      	ldr	r3, [pc, #236]	; (8012bf0 <imuTest_quatUpdate+0x128>)
 8012b04:	edc3 7a00 	vstr	s15, [r3]
		lastUpdate = Now;
 8012b08:	4b36      	ldr	r3, [pc, #216]	; (8012be4 <imuTest_quatUpdate+0x11c>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	4a36      	ldr	r2, [pc, #216]	; (8012be8 <imuTest_quatUpdate+0x120>)
 8012b0e:	6013      	str	r3, [r2, #0]

		sum += deltat; // sum for averaging filter update rate
 8012b10:	4b38      	ldr	r3, [pc, #224]	; (8012bf4 <imuTest_quatUpdate+0x12c>)
 8012b12:	ed93 7a00 	vldr	s14, [r3]
 8012b16:	4b36      	ldr	r3, [pc, #216]	; (8012bf0 <imuTest_quatUpdate+0x128>)
 8012b18:	edd3 7a00 	vldr	s15, [r3]
 8012b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012b20:	4b34      	ldr	r3, [pc, #208]	; (8012bf4 <imuTest_quatUpdate+0x12c>)
 8012b22:	edc3 7a00 	vstr	s15, [r3]
		sumCount++;
 8012b26:	4b34      	ldr	r3, [pc, #208]	; (8012bf8 <imuTest_quatUpdate+0x130>)
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	3301      	adds	r3, #1
 8012b2c:	4a32      	ldr	r2, [pc, #200]	; (8012bf8 <imuTest_quatUpdate+0x130>)
 8012b2e:	6013      	str	r3, [r2, #0]

		MadgwickQuaternionUpdate(ax, -ay, -az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
 8012b30:	4b32      	ldr	r3, [pc, #200]	; (8012bfc <imuTest_quatUpdate+0x134>)
 8012b32:	edd3 6a00 	vldr	s13, [r3]
 8012b36:	4b32      	ldr	r3, [pc, #200]	; (8012c00 <imuTest_quatUpdate+0x138>)
 8012b38:	edd3 7a00 	vldr	s15, [r3]
 8012b3c:	eeb1 6a67 	vneg.f32	s12, s15
 8012b40:	4b30      	ldr	r3, [pc, #192]	; (8012c04 <imuTest_quatUpdate+0x13c>)
 8012b42:	edd3 7a00 	vldr	s15, [r3]
 8012b46:	eef1 5a67 	vneg.f32	s11, s15
 8012b4a:	4b2f      	ldr	r3, [pc, #188]	; (8012c08 <imuTest_quatUpdate+0x140>)
 8012b4c:	edd3 7a00 	vldr	s15, [r3]
 8012b50:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8012c0c <imuTest_quatUpdate+0x144>
 8012b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012b58:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8012c10 <imuTest_quatUpdate+0x148>
 8012b5c:	ee87 5a87 	vdiv.f32	s10, s15, s14
 8012b60:	4b2c      	ldr	r3, [pc, #176]	; (8012c14 <imuTest_quatUpdate+0x14c>)
 8012b62:	edd3 7a00 	vldr	s15, [r3]
 8012b66:	eef1 7a67 	vneg.f32	s15, s15
 8012b6a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8012c0c <imuTest_quatUpdate+0x144>
 8012b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012b72:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8012c10 <imuTest_quatUpdate+0x148>
 8012b76:	eec7 4a87 	vdiv.f32	s9, s15, s14
 8012b7a:	4b27      	ldr	r3, [pc, #156]	; (8012c18 <imuTest_quatUpdate+0x150>)
 8012b7c:	edd3 7a00 	vldr	s15, [r3]
 8012b80:	eef1 7a67 	vneg.f32	s15, s15
 8012b84:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8012c0c <imuTest_quatUpdate+0x144>
 8012b88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012b8c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8012c10 <imuTest_quatUpdate+0x148>
 8012b90:	eec7 2a87 	vdiv.f32	s5, s15, s14
 8012b94:	4b21      	ldr	r3, [pc, #132]	; (8012c1c <imuTest_quatUpdate+0x154>)
 8012b96:	ed93 7a00 	vldr	s14, [r3]
 8012b9a:	4b21      	ldr	r3, [pc, #132]	; (8012c20 <imuTest_quatUpdate+0x158>)
 8012b9c:	edd3 7a00 	vldr	s15, [r3]
 8012ba0:	eef1 7a67 	vneg.f32	s15, s15
 8012ba4:	4b1f      	ldr	r3, [pc, #124]	; (8012c24 <imuTest_quatUpdate+0x15c>)
 8012ba6:	ed93 4a00 	vldr	s8, [r3]
 8012baa:	eef0 3a67 	vmov.f32	s7, s15
 8012bae:	eeb0 3a47 	vmov.f32	s6, s14
 8012bb2:	eeb0 2a64 	vmov.f32	s4, s9
 8012bb6:	eef0 1a45 	vmov.f32	s3, s10
 8012bba:	eeb0 1a65 	vmov.f32	s2, s11
 8012bbe:	eef0 0a46 	vmov.f32	s1, s12
 8012bc2:	eeb0 0a66 	vmov.f32	s0, s13
 8012bc6:	f7f0 ffdd 	bl	8003b84 <MadgwickQuaternionUpdate>

		lastCompute = micros();
 8012bca:	f7ff fc59 	bl	8012480 <micros>
 8012bce:	4602      	mov	r2, r0
 8012bd0:	4b03      	ldr	r3, [pc, #12]	; (8012be0 <imuTest_quatUpdate+0x118>)
 8012bd2:	601a      	str	r2, [r3, #0]
		return true;
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	e000      	b.n	8012bda <imuTest_quatUpdate+0x112>
	}
	return false;
 8012bd8:	2300      	movs	r3, #0
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	bd80      	pop	{r7, pc}
 8012bde:	bf00      	nop
 8012be0:	20003220 	.word	0x20003220
 8012be4:	20003168 	.word	0x20003168
 8012be8:	20003138 	.word	0x20003138
 8012bec:	49742400 	.word	0x49742400
 8012bf0:	200031e0 	.word	0x200031e0
 8012bf4:	20003128 	.word	0x20003128
 8012bf8:	20003228 	.word	0x20003228
 8012bfc:	2000316c 	.word	0x2000316c
 8012c00:	20003218 	.word	0x20003218
 8012c04:	20003134 	.word	0x20003134
 8012c08:	20003208 	.word	0x20003208
 8012c0c:	40490fdb 	.word	0x40490fdb
 8012c10:	43340000 	.word	0x43340000
 8012c14:	20003130 	.word	0x20003130
 8012c18:	200031a0 	.word	0x200031a0
 8012c1c:	20003144 	.word	0x20003144
 8012c20:	2000321c 	.word	0x2000321c
 8012c24:	200031b4 	.word	0x200031b4

08012c28 <imuTest_getEuler>:
static void imuTest_getEuler()
{
 8012c28:	b5b0      	push	{r4, r5, r7, lr}
 8012c2a:	af00      	add	r7, sp, #0
	yaw   = atan2(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8012c2c:	4b84      	ldr	r3, [pc, #528]	; (8012e40 <imuTest_getEuler+0x218>)
 8012c2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8012c32:	4b83      	ldr	r3, [pc, #524]	; (8012e40 <imuTest_getEuler+0x218>)
 8012c34:	edd3 7a02 	vldr	s15, [r3, #8]
 8012c38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c3c:	4b80      	ldr	r3, [pc, #512]	; (8012e40 <imuTest_getEuler+0x218>)
 8012c3e:	edd3 6a00 	vldr	s13, [r3]
 8012c42:	4b7f      	ldr	r3, [pc, #508]	; (8012e40 <imuTest_getEuler+0x218>)
 8012c44:	edd3 7a03 	vldr	s15, [r3, #12]
 8012c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012c54:	ee17 0a90 	vmov	r0, s15
 8012c58:	f7ed fc86 	bl	8000568 <__aeabi_f2d>
 8012c5c:	4604      	mov	r4, r0
 8012c5e:	460d      	mov	r5, r1
 8012c60:	4b77      	ldr	r3, [pc, #476]	; (8012e40 <imuTest_getEuler+0x218>)
 8012c62:	ed93 7a00 	vldr	s14, [r3]
 8012c66:	4b76      	ldr	r3, [pc, #472]	; (8012e40 <imuTest_getEuler+0x218>)
 8012c68:	edd3 7a00 	vldr	s15, [r3]
 8012c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c70:	4b73      	ldr	r3, [pc, #460]	; (8012e40 <imuTest_getEuler+0x218>)
 8012c72:	edd3 6a01 	vldr	s13, [r3, #4]
 8012c76:	4b72      	ldr	r3, [pc, #456]	; (8012e40 <imuTest_getEuler+0x218>)
 8012c78:	edd3 7a01 	vldr	s15, [r3, #4]
 8012c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c84:	4b6e      	ldr	r3, [pc, #440]	; (8012e40 <imuTest_getEuler+0x218>)
 8012c86:	edd3 6a02 	vldr	s13, [r3, #8]
 8012c8a:	4b6d      	ldr	r3, [pc, #436]	; (8012e40 <imuTest_getEuler+0x218>)
 8012c8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8012c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012c98:	4b69      	ldr	r3, [pc, #420]	; (8012e40 <imuTest_getEuler+0x218>)
 8012c9a:	edd3 6a03 	vldr	s13, [r3, #12]
 8012c9e:	4b68      	ldr	r3, [pc, #416]	; (8012e40 <imuTest_getEuler+0x218>)
 8012ca0:	edd3 7a03 	vldr	s15, [r3, #12]
 8012ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012cac:	ee17 0a90 	vmov	r0, s15
 8012cb0:	f7ed fc5a 	bl	8000568 <__aeabi_f2d>
 8012cb4:	4602      	mov	r2, r0
 8012cb6:	460b      	mov	r3, r1
 8012cb8:	ec43 2b11 	vmov	d1, r2, r3
 8012cbc:	ec45 4b10 	vmov	d0, r4, r5
 8012cc0:	f006 fd5a 	bl	8019778 <atan2>
 8012cc4:	ec54 3b10 	vmov	r3, r4, d0
 8012cc8:	4618      	mov	r0, r3
 8012cca:	4621      	mov	r1, r4
 8012ccc:	f7ed ff9c 	bl	8000c08 <__aeabi_d2f>
 8012cd0:	4602      	mov	r2, r0
 8012cd2:	4b5c      	ldr	r3, [pc, #368]	; (8012e44 <imuTest_getEuler+0x21c>)
 8012cd4:	601a      	str	r2, [r3, #0]
	pitch = -asin(2.0f * (q[1] * q[3] - q[0] * q[2]));
 8012cd6:	4b5a      	ldr	r3, [pc, #360]	; (8012e40 <imuTest_getEuler+0x218>)
 8012cd8:	ed93 7a01 	vldr	s14, [r3, #4]
 8012cdc:	4b58      	ldr	r3, [pc, #352]	; (8012e40 <imuTest_getEuler+0x218>)
 8012cde:	edd3 7a03 	vldr	s15, [r3, #12]
 8012ce2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012ce6:	4b56      	ldr	r3, [pc, #344]	; (8012e40 <imuTest_getEuler+0x218>)
 8012ce8:	edd3 6a00 	vldr	s13, [r3]
 8012cec:	4b54      	ldr	r3, [pc, #336]	; (8012e40 <imuTest_getEuler+0x218>)
 8012cee:	edd3 7a02 	vldr	s15, [r3, #8]
 8012cf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012cf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012cfa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012cfe:	ee17 0a90 	vmov	r0, s15
 8012d02:	f7ed fc31 	bl	8000568 <__aeabi_f2d>
 8012d06:	4603      	mov	r3, r0
 8012d08:	460c      	mov	r4, r1
 8012d0a:	ec44 3b10 	vmov	d0, r3, r4
 8012d0e:	f006 fcdb 	bl	80196c8 <asin>
 8012d12:	ec54 3b10 	vmov	r3, r4, d0
 8012d16:	4618      	mov	r0, r3
 8012d18:	4621      	mov	r1, r4
 8012d1a:	f7ed ff75 	bl	8000c08 <__aeabi_d2f>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	ee07 3a90 	vmov	s15, r3
 8012d24:	eef1 7a67 	vneg.f32	s15, s15
 8012d28:	4b47      	ldr	r3, [pc, #284]	; (8012e48 <imuTest_getEuler+0x220>)
 8012d2a:	edc3 7a00 	vstr	s15, [r3]
	roll  = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 8012d2e:	4b44      	ldr	r3, [pc, #272]	; (8012e40 <imuTest_getEuler+0x218>)
 8012d30:	ed93 7a00 	vldr	s14, [r3]
 8012d34:	4b42      	ldr	r3, [pc, #264]	; (8012e40 <imuTest_getEuler+0x218>)
 8012d36:	edd3 7a01 	vldr	s15, [r3, #4]
 8012d3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d3e:	4b40      	ldr	r3, [pc, #256]	; (8012e40 <imuTest_getEuler+0x218>)
 8012d40:	edd3 6a02 	vldr	s13, [r3, #8]
 8012d44:	4b3e      	ldr	r3, [pc, #248]	; (8012e40 <imuTest_getEuler+0x218>)
 8012d46:	edd3 7a03 	vldr	s15, [r3, #12]
 8012d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012d56:	ee17 0a90 	vmov	r0, s15
 8012d5a:	f7ed fc05 	bl	8000568 <__aeabi_f2d>
 8012d5e:	4604      	mov	r4, r0
 8012d60:	460d      	mov	r5, r1
 8012d62:	4b37      	ldr	r3, [pc, #220]	; (8012e40 <imuTest_getEuler+0x218>)
 8012d64:	ed93 7a00 	vldr	s14, [r3]
 8012d68:	4b35      	ldr	r3, [pc, #212]	; (8012e40 <imuTest_getEuler+0x218>)
 8012d6a:	edd3 7a00 	vldr	s15, [r3]
 8012d6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d72:	4b33      	ldr	r3, [pc, #204]	; (8012e40 <imuTest_getEuler+0x218>)
 8012d74:	edd3 6a01 	vldr	s13, [r3, #4]
 8012d78:	4b31      	ldr	r3, [pc, #196]	; (8012e40 <imuTest_getEuler+0x218>)
 8012d7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8012d7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012d86:	4b2e      	ldr	r3, [pc, #184]	; (8012e40 <imuTest_getEuler+0x218>)
 8012d88:	edd3 6a02 	vldr	s13, [r3, #8]
 8012d8c:	4b2c      	ldr	r3, [pc, #176]	; (8012e40 <imuTest_getEuler+0x218>)
 8012d8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8012d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012d9a:	4b29      	ldr	r3, [pc, #164]	; (8012e40 <imuTest_getEuler+0x218>)
 8012d9c:	edd3 6a03 	vldr	s13, [r3, #12]
 8012da0:	4b27      	ldr	r3, [pc, #156]	; (8012e40 <imuTest_getEuler+0x218>)
 8012da2:	edd3 7a03 	vldr	s15, [r3, #12]
 8012da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012dae:	ee17 0a90 	vmov	r0, s15
 8012db2:	f7ed fbd9 	bl	8000568 <__aeabi_f2d>
 8012db6:	4602      	mov	r2, r0
 8012db8:	460b      	mov	r3, r1
 8012dba:	ec43 2b11 	vmov	d1, r2, r3
 8012dbe:	ec45 4b10 	vmov	d0, r4, r5
 8012dc2:	f006 fcd9 	bl	8019778 <atan2>
 8012dc6:	ec54 3b10 	vmov	r3, r4, d0
 8012dca:	4618      	mov	r0, r3
 8012dcc:	4621      	mov	r1, r4
 8012dce:	f7ed ff1b 	bl	8000c08 <__aeabi_d2f>
 8012dd2:	4602      	mov	r2, r0
 8012dd4:	4b1d      	ldr	r3, [pc, #116]	; (8012e4c <imuTest_getEuler+0x224>)
 8012dd6:	601a      	str	r2, [r3, #0]
	pitch *= 180.0f / PI;
 8012dd8:	4b1b      	ldr	r3, [pc, #108]	; (8012e48 <imuTest_getEuler+0x220>)
 8012dda:	edd3 7a00 	vldr	s15, [r3]
 8012dde:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8012e50 <imuTest_getEuler+0x228>
 8012de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012de6:	4b18      	ldr	r3, [pc, #96]	; (8012e48 <imuTest_getEuler+0x220>)
 8012de8:	edc3 7a00 	vstr	s15, [r3]
	yaw   *= 180.0f / PI;
 8012dec:	4b15      	ldr	r3, [pc, #84]	; (8012e44 <imuTest_getEuler+0x21c>)
 8012dee:	edd3 7a00 	vldr	s15, [r3]
 8012df2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8012e50 <imuTest_getEuler+0x228>
 8012df6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012dfa:	4b12      	ldr	r3, [pc, #72]	; (8012e44 <imuTest_getEuler+0x21c>)
 8012dfc:	edc3 7a00 	vstr	s15, [r3]
	//yaw   -= 5.78f;
	roll  *= 180.0f / PI;
 8012e00:	4b12      	ldr	r3, [pc, #72]	; (8012e4c <imuTest_getEuler+0x224>)
 8012e02:	edd3 7a00 	vldr	s15, [r3]
 8012e06:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8012e50 <imuTest_getEuler+0x228>
 8012e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012e0e:	4b0f      	ldr	r3, [pc, #60]	; (8012e4c <imuTest_getEuler+0x224>)
 8012e10:	edc3 7a00 	vstr	s15, [r3]
	if(yaw < 0) yaw   += 360.0f;
 8012e14:	4b0b      	ldr	r3, [pc, #44]	; (8012e44 <imuTest_getEuler+0x21c>)
 8012e16:	edd3 7a00 	vldr	s15, [r3]
 8012e1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e22:	d400      	bmi.n	8012e26 <imuTest_getEuler+0x1fe>
}
 8012e24:	e009      	b.n	8012e3a <imuTest_getEuler+0x212>
	if(yaw < 0) yaw   += 360.0f;
 8012e26:	4b07      	ldr	r3, [pc, #28]	; (8012e44 <imuTest_getEuler+0x21c>)
 8012e28:	edd3 7a00 	vldr	s15, [r3]
 8012e2c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8012e54 <imuTest_getEuler+0x22c>
 8012e30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012e34:	4b03      	ldr	r3, [pc, #12]	; (8012e44 <imuTest_getEuler+0x21c>)
 8012e36:	edc3 7a00 	vstr	s15, [r3]
}
 8012e3a:	bf00      	nop
 8012e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8012e3e:	bf00      	nop
 8012e40:	200031f8 	.word	0x200031f8
 8012e44:	200031c8 	.word	0x200031c8
 8012e48:	200031d4 	.word	0x200031d4
 8012e4c:	200031d8 	.word	0x200031d8
 8012e50:	42652ee0 	.word	0x42652ee0
 8012e54:	43b40000 	.word	0x43b40000

08012e58 <sensing_begin>:
uint32_t lastGpsRead;
// IMU
// (SPS)

static bool sensing_begin(void)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b082      	sub	sp, #8
 8012e5c:	af00      	add	r7, sp, #0

	uint8_t attempts = 0;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	71fb      	strb	r3, [r7, #7]


	attempts = 0;
 8012e62:	2300      	movs	r3, #0
 8012e64:	71fb      	strb	r3, [r7, #7]
	bmp.params = bmp280_default_config;
 8012e66:	4b41      	ldr	r3, [pc, #260]	; (8012f6c <sensing_begin+0x114>)
 8012e68:	4a41      	ldr	r2, [pc, #260]	; (8012f70 <sensing_begin+0x118>)
 8012e6a:	3307      	adds	r3, #7
 8012e6c:	6810      	ldr	r0, [r2, #0]
 8012e6e:	6018      	str	r0, [r3, #0]
 8012e70:	7912      	ldrb	r2, [r2, #4]
 8012e72:	711a      	strb	r2, [r3, #4]
	bmp.addr = BMP280_I2C_ADDRESS_0;
 8012e74:	4b3d      	ldr	r3, [pc, #244]	; (8012f6c <sensing_begin+0x114>)
 8012e76:	2276      	movs	r2, #118	; 0x76
 8012e78:	809a      	strh	r2, [r3, #4]
	bmp.i2c = Get_I2C1_Instance();
 8012e7a:	f001 fa6d 	bl	8014358 <Get_I2C1_Instance>
 8012e7e:	4602      	mov	r2, r0
 8012e80:	4b3a      	ldr	r3, [pc, #232]	; (8012f6c <sensing_begin+0x114>)
 8012e82:	601a      	str	r2, [r3, #0]
	//unneccessary, to change
	while (!bmp280_init(&bmp, &bmp.params))
 8012e84:	e010      	b.n	8012ea8 <sensing_begin+0x50>
	{
		HAL_Delay(500);
 8012e86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012e8a:	f7f2 f91f 	bl	80050cc <HAL_Delay>
		if (SENSING_DEBUG) println("[BMP] Init unsuccesfull, retrying...");
 8012e8e:	4839      	ldr	r0, [pc, #228]	; (8012f74 <sensing_begin+0x11c>)
 8012e90:	f7ff fa72 	bl	8012378 <println>
		attempts++;
 8012e94:	79fb      	ldrb	r3, [r7, #7]
 8012e96:	3301      	adds	r3, #1
 8012e98:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 8012e9a:	79fb      	ldrb	r3, [r7, #7]
 8012e9c:	2b04      	cmp	r3, #4
 8012e9e:	d903      	bls.n	8012ea8 <sensing_begin+0x50>
		{
			if (SENSING_DEBUG) println("[BMP] Too many attempts, BMP is not active!");
 8012ea0:	4835      	ldr	r0, [pc, #212]	; (8012f78 <sensing_begin+0x120>)
 8012ea2:	f7ff fa69 	bl	8012378 <println>
			//log_print("Unable to init BMP");
			break;
 8012ea6:	e009      	b.n	8012ebc <sensing_begin+0x64>
	while (!bmp280_init(&bmp, &bmp.params))
 8012ea8:	4934      	ldr	r1, [pc, #208]	; (8012f7c <sensing_begin+0x124>)
 8012eaa:	4830      	ldr	r0, [pc, #192]	; (8012f6c <sensing_begin+0x114>)
 8012eac:	f7ef f86b 	bl	8001f86 <bmp280_init>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	f083 0301 	eor.w	r3, r3, #1
 8012eb6:	b2db      	uxtb	r3, r3
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d1e4      	bne.n	8012e86 <sensing_begin+0x2e>

	//if (imuTest_begin()) { println("[IMU] Init successful!"); log_print("IMU init success"); }
	//	else { log_print("Unable to init IMU"); }


	attempts = 0;
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	71fb      	strb	r3, [r7, #7]
	gps.uart = Get_UART3_Instance();
 8012ec0:	f001 fa5e 	bl	8014380 <Get_UART3_Instance>
 8012ec4:	4602      	mov	r2, r0
 8012ec6:	4b2e      	ldr	r3, [pc, #184]	; (8012f80 <sensing_begin+0x128>)
 8012ec8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	while (!GPS_init(&gps))
 8012ecc:	e010      	b.n	8012ef0 <sensing_begin+0x98>
	{
		HAL_Delay(500);
 8012ece:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012ed2:	f7f2 f8fb 	bl	80050cc <HAL_Delay>
		if (SENSING_DEBUG) println("[GPS] Init unsuccessful, retrying...");
 8012ed6:	482b      	ldr	r0, [pc, #172]	; (8012f84 <sensing_begin+0x12c>)
 8012ed8:	f7ff fa4e 	bl	8012378 <println>
		attempts++;
 8012edc:	79fb      	ldrb	r3, [r7, #7]
 8012ede:	3301      	adds	r3, #1
 8012ee0:	71fb      	strb	r3, [r7, #7]

		if (attempts >= 5)
 8012ee2:	79fb      	ldrb	r3, [r7, #7]
 8012ee4:	2b04      	cmp	r3, #4
 8012ee6:	d903      	bls.n	8012ef0 <sensing_begin+0x98>
		{
			if (SENSING_DEBUG) println("[GPS] Too many attempts, GPS is not active!");
 8012ee8:	4827      	ldr	r0, [pc, #156]	; (8012f88 <sensing_begin+0x130>)
 8012eea:	f7ff fa45 	bl	8012378 <println>
			//log_print("Unable to init GPS");
			break;
 8012eee:	e008      	b.n	8012f02 <sensing_begin+0xaa>
	while (!GPS_init(&gps))
 8012ef0:	4823      	ldr	r0, [pc, #140]	; (8012f80 <sensing_begin+0x128>)
 8012ef2:	f7ef fc2d 	bl	8002750 <GPS_init>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	f083 0301 	eor.w	r3, r3, #1
 8012efc:	b2db      	uxtb	r3, r3
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d1e5      	bne.n	8012ece <sensing_begin+0x76>

	//imuTest_begin();

	if (SENSING_DEBUG)
	{
		println("Sensor init summary:");
 8012f02:	4822      	ldr	r0, [pc, #136]	; (8012f8c <sensing_begin+0x134>)
 8012f04:	f7ff fa38 	bl	8012378 <println>
		print("GPS - "); gps.active ? println("active") : println("not active");
 8012f08:	4821      	ldr	r0, [pc, #132]	; (8012f90 <sensing_begin+0x138>)
 8012f0a:	f7ff fa13 	bl	8012334 <print>
 8012f0e:	4b1c      	ldr	r3, [pc, #112]	; (8012f80 <sensing_begin+0x128>)
 8012f10:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d003      	beq.n	8012f20 <sensing_begin+0xc8>
 8012f18:	481e      	ldr	r0, [pc, #120]	; (8012f94 <sensing_begin+0x13c>)
 8012f1a:	f7ff fa2d 	bl	8012378 <println>
 8012f1e:	e002      	b.n	8012f26 <sensing_begin+0xce>
 8012f20:	481d      	ldr	r0, [pc, #116]	; (8012f98 <sensing_begin+0x140>)
 8012f22:	f7ff fa29 	bl	8012378 <println>
		print("BMP - "); bmp.active ? println("active") : println("not active");
 8012f26:	481d      	ldr	r0, [pc, #116]	; (8012f9c <sensing_begin+0x144>)
 8012f28:	f7ff fa04 	bl	8012334 <print>
 8012f2c:	4b0f      	ldr	r3, [pc, #60]	; (8012f6c <sensing_begin+0x114>)
 8012f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d003      	beq.n	8012f3e <sensing_begin+0xe6>
 8012f36:	4817      	ldr	r0, [pc, #92]	; (8012f94 <sensing_begin+0x13c>)
 8012f38:	f7ff fa1e 	bl	8012378 <println>
 8012f3c:	e002      	b.n	8012f44 <sensing_begin+0xec>
 8012f3e:	4816      	ldr	r0, [pc, #88]	; (8012f98 <sensing_begin+0x140>)
 8012f40:	f7ff fa1a 	bl	8012378 <println>
		print("IMU - "); imuActive ? println("active") : println("not active");
 8012f44:	4816      	ldr	r0, [pc, #88]	; (8012fa0 <sensing_begin+0x148>)
 8012f46:	f7ff f9f5 	bl	8012334 <print>
 8012f4a:	4b16      	ldr	r3, [pc, #88]	; (8012fa4 <sensing_begin+0x14c>)
 8012f4c:	781b      	ldrb	r3, [r3, #0]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d003      	beq.n	8012f5a <sensing_begin+0x102>
 8012f52:	4810      	ldr	r0, [pc, #64]	; (8012f94 <sensing_begin+0x13c>)
 8012f54:	f7ff fa10 	bl	8012378 <println>
 8012f58:	e002      	b.n	8012f60 <sensing_begin+0x108>
 8012f5a:	480f      	ldr	r0, [pc, #60]	; (8012f98 <sensing_begin+0x140>)
 8012f5c:	f7ff fa0c 	bl	8012378 <println>
	}
}
 8012f60:	bf00      	nop
 8012f62:	4618      	mov	r0, r3
 8012f64:	3708      	adds	r7, #8
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	200066cc 	.word	0x200066cc
 8012f70:	2000011c 	.word	0x2000011c
 8012f74:	0801bcac 	.word	0x0801bcac
 8012f78:	0801bcd4 	.word	0x0801bcd4
 8012f7c:	200066d3 	.word	0x200066d3
 8012f80:	20002ebc 	.word	0x20002ebc
 8012f84:	0801bd00 	.word	0x0801bd00
 8012f88:	0801bd28 	.word	0x0801bd28
 8012f8c:	0801bd54 	.word	0x0801bd54
 8012f90:	0801bd6c 	.word	0x0801bd6c
 8012f94:	0801bd74 	.word	0x0801bd74
 8012f98:	0801bd7c 	.word	0x0801bd7c
 8012f9c:	0801bd88 	.word	0x0801bd88
 8012fa0:	0801bd90 	.word	0x0801bd90
 8012fa4:	200030f2 	.word	0x200030f2

08012fa8 <sensing_loop>:

static void sensing_loop(void)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b084      	sub	sp, #16
 8012fac:	af00      	add	r7, sp, #0

	if (gps.active)
 8012fae:	4b6c      	ldr	r3, [pc, #432]	; (8013160 <sensing_loop+0x1b8>)
 8012fb0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d02b      	beq.n	8013010 <sensing_loop+0x68>
	{
		//while (GPS_read(&gps));
		if (GPS_newNMEAreceived(&gps))
 8012fb8:	4869      	ldr	r0, [pc, #420]	; (8013160 <sensing_loop+0x1b8>)
 8012fba:	f7f0 fcb6 	bl	800392a <GPS_newNMEAreceived>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d020      	beq.n	8013006 <sensing_loop+0x5e>
		{
			println(GPS_lastNMEA(&gps));
 8012fc4:	4866      	ldr	r0, [pc, #408]	; (8013160 <sensing_loop+0x1b8>)
 8012fc6:	f7f0 fcbe 	bl	8003946 <GPS_lastNMEA>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7ff f9d3 	bl	8012378 <println>
			GPS_parse(&gps, GPS_lastNMEA(&gps));
 8012fd2:	4863      	ldr	r0, [pc, #396]	; (8013160 <sensing_loop+0x1b8>)
 8012fd4:	f7f0 fcb7 	bl	8003946 <GPS_lastNMEA>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	4619      	mov	r1, r3
 8012fdc:	4860      	ldr	r0, [pc, #384]	; (8013160 <sensing_loop+0x1b8>)
 8012fde:	f7ef fd5b 	bl	8002a98 <GPS_parse>
			//if (gps.fix) log_gps(&gps);
			if (gps.fix) HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, 1);
 8012fe2:	4b5f      	ldr	r3, [pc, #380]	; (8013160 <sensing_loop+0x1b8>)
 8012fe4:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d006      	beq.n	8012ffa <sensing_loop+0x52>
 8012fec:	2201      	movs	r2, #1
 8012fee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012ff2:	485c      	ldr	r0, [pc, #368]	; (8013164 <sensing_loop+0x1bc>)
 8012ff4:	f7f2 fee8 	bl	8005dc8 <HAL_GPIO_WritePin>
 8012ff8:	e005      	b.n	8013006 <sensing_loop+0x5e>
			else HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, 0);
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013000:	4858      	ldr	r0, [pc, #352]	; (8013164 <sensing_loop+0x1bc>)
 8013002:	f7f2 fee1 	bl	8005dc8 <HAL_GPIO_WritePin>
		}
		lastGpsRead = millis();
 8013006:	f7ff fa45 	bl	8012494 <millis>
 801300a:	4602      	mov	r2, r0
 801300c:	4b56      	ldr	r3, [pc, #344]	; (8013168 <sensing_loop+0x1c0>)
 801300e:	601a      	str	r2, [r3, #0]
	}


	if (bmp.active && millis() - lastBmpRead >= 50)
 8013010:	4b56      	ldr	r3, [pc, #344]	; (801316c <sensing_loop+0x1c4>)
 8013012:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013016:	2b00      	cmp	r3, #0
 8013018:	d01f      	beq.n	801305a <sensing_loop+0xb2>
 801301a:	f7ff fa3b 	bl	8012494 <millis>
 801301e:	4602      	mov	r2, r0
 8013020:	4b53      	ldr	r3, [pc, #332]	; (8013170 <sensing_loop+0x1c8>)
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	1ad3      	subs	r3, r2, r3
 8013026:	2b31      	cmp	r3, #49	; 0x31
 8013028:	d917      	bls.n	801305a <sensing_loop+0xb2>
	{

		//bmp280_read_float(&bmp, tee, pee);
		bmp280_update(&bmp);
 801302a:	4850      	ldr	r0, [pc, #320]	; (801316c <sensing_loop+0x1c4>)
 801302c:	f7ef fa96 	bl	800255c <bmp280_update>
		lastBmpRead = millis();
 8013030:	f7ff fa30 	bl	8012494 <millis>
 8013034:	4602      	mov	r2, r0
 8013036:	4b4e      	ldr	r3, [pc, #312]	; (8013170 <sensing_loop+0x1c8>)
 8013038:	601a      	str	r2, [r3, #0]
		if (millis() - lastBmpLog >= 100)
 801303a:	f7ff fa2b 	bl	8012494 <millis>
 801303e:	4602      	mov	r2, r0
 8013040:	4b4c      	ldr	r3, [pc, #304]	; (8013174 <sensing_loop+0x1cc>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	1ad3      	subs	r3, r2, r3
 8013046:	2b63      	cmp	r3, #99	; 0x63
 8013048:	d907      	bls.n	801305a <sensing_loop+0xb2>
		{
			log_bmp(&bmp);
 801304a:	4848      	ldr	r0, [pc, #288]	; (801316c <sensing_loop+0x1c4>)
 801304c:	f7f1 feca 	bl	8004de4 <log_bmp>
			lastBmpLog = millis();
 8013050:	f7ff fa20 	bl	8012494 <millis>
 8013054:	4602      	mov	r2, r0
 8013056:	4b47      	ldr	r3, [pc, #284]	; (8013174 <sensing_loop+0x1cc>)
 8013058:	601a      	str	r2, [r3, #0]
		}
	}


	if (imuActive)
 801305a:	4b47      	ldr	r3, [pc, #284]	; (8013178 <sensing_loop+0x1d0>)
 801305c:	781b      	ldrb	r3, [r3, #0]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d01f      	beq.n	80130a2 <sensing_loop+0xfa>
	{
		imuTest_getData();		// get data from IMU
 8013062:	f7ff fc3f 	bl	80128e4 <imuTest_getData>
		imuTest_quatUpdate();	// compute data received
 8013066:	f7ff fd2f 	bl	8012ac8 <imuTest_quatUpdate>

		if (millis() - lastImuLog >= 100)
 801306a:	f7ff fa13 	bl	8012494 <millis>
 801306e:	4602      	mov	r2, r0
 8013070:	4b42      	ldr	r3, [pc, #264]	; (801317c <sensing_loop+0x1d4>)
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	1ad3      	subs	r3, r2, r3
 8013076:	2b63      	cmp	r3, #99	; 0x63
 8013078:	d913      	bls.n	80130a2 <sensing_loop+0xfa>
		{
			imuTest_getEuler();
 801307a:	f7ff fdd5 	bl	8012c28 <imuTest_getEuler>
			float eulers[3] = {yaw, pitch, roll};
 801307e:	4b40      	ldr	r3, [pc, #256]	; (8013180 <sensing_loop+0x1d8>)
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	607b      	str	r3, [r7, #4]
 8013084:	4b3f      	ldr	r3, [pc, #252]	; (8013184 <sensing_loop+0x1dc>)
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	60bb      	str	r3, [r7, #8]
 801308a:	4b3f      	ldr	r3, [pc, #252]	; (8013188 <sensing_loop+0x1e0>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	60fb      	str	r3, [r7, #12]
			log_imu(eulers);
 8013090:	1d3b      	adds	r3, r7, #4
 8013092:	4618      	mov	r0, r3
 8013094:	f7f1 fef4 	bl	8004e80 <log_imu>
			lastImuLog = millis();
 8013098:	f7ff f9fc 	bl	8012494 <millis>
 801309c:	4602      	mov	r2, r0
 801309e:	4b37      	ldr	r3, [pc, #220]	; (801317c <sensing_loop+0x1d4>)
 80130a0:	601a      	str	r2, [r3, #0]
		}

	}


	if (millis() - lastDataPrint >= 1000 && SENSING_PRINT_DATA)
 80130a2:	f7ff f9f7 	bl	8012494 <millis>
 80130a6:	4602      	mov	r2, r0
 80130a8:	4b38      	ldr	r3, [pc, #224]	; (801318c <sensing_loop+0x1e4>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	1ad3      	subs	r3, r2, r3
 80130ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80130b2:	d350      	bcc.n	8013156 <sensing_loop+0x1ae>
	{
		if (bmp.active)
 80130b4:	4b2d      	ldr	r3, [pc, #180]	; (801316c <sensing_loop+0x1c4>)
 80130b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d019      	beq.n	80130f2 <sensing_loop+0x14a>
		{
			print("Pressure: "); print_float(bmp.pressure); println("");
 80130be:	4834      	ldr	r0, [pc, #208]	; (8013190 <sensing_loop+0x1e8>)
 80130c0:	f7ff f938 	bl	8012334 <print>
 80130c4:	4b29      	ldr	r3, [pc, #164]	; (801316c <sensing_loop+0x1c4>)
 80130c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80130ca:	eeb0 0a67 	vmov.f32	s0, s15
 80130ce:	f7ff f9a1 	bl	8012414 <print_float>
 80130d2:	4830      	ldr	r0, [pc, #192]	; (8013194 <sensing_loop+0x1ec>)
 80130d4:	f7ff f950 	bl	8012378 <println>
			print("Temperature: "); print_float(bmp.temperature); println("");
 80130d8:	482f      	ldr	r0, [pc, #188]	; (8013198 <sensing_loop+0x1f0>)
 80130da:	f7ff f92b 	bl	8012334 <print>
 80130de:	4b23      	ldr	r3, [pc, #140]	; (801316c <sensing_loop+0x1c4>)
 80130e0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80130e4:	eeb0 0a67 	vmov.f32	s0, s15
 80130e8:	f7ff f994 	bl	8012414 <print_float>
 80130ec:	4829      	ldr	r0, [pc, #164]	; (8013194 <sensing_loop+0x1ec>)
 80130ee:	f7ff f943 	bl	8012378 <println>
		}
		if (gps.active)
 80130f2:	4b1b      	ldr	r3, [pc, #108]	; (8013160 <sensing_loop+0x1b8>)
 80130f4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d027      	beq.n	801314c <sensing_loop+0x1a4>
		{
			if (gps.fix)
 80130fc:	4b18      	ldr	r3, [pc, #96]	; (8013160 <sensing_loop+0x1b8>)
 80130fe:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8013102:	2b00      	cmp	r3, #0
 8013104:	d01a      	beq.n	801313c <sensing_loop+0x194>
			{
				print("Latitude: "); print_float(gps.latitudeDegrees); println("");
 8013106:	4825      	ldr	r0, [pc, #148]	; (801319c <sensing_loop+0x1f4>)
 8013108:	f7ff f914 	bl	8012334 <print>
 801310c:	4b14      	ldr	r3, [pc, #80]	; (8013160 <sensing_loop+0x1b8>)
 801310e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8013112:	eeb0 0a67 	vmov.f32	s0, s15
 8013116:	f7ff f97d 	bl	8012414 <print_float>
 801311a:	481e      	ldr	r0, [pc, #120]	; (8013194 <sensing_loop+0x1ec>)
 801311c:	f7ff f92c 	bl	8012378 <println>
				print("Longitude: "); print_float(gps.longitudeDegrees); println("");
 8013120:	481f      	ldr	r0, [pc, #124]	; (80131a0 <sensing_loop+0x1f8>)
 8013122:	f7ff f907 	bl	8012334 <print>
 8013126:	4b0e      	ldr	r3, [pc, #56]	; (8013160 <sensing_loop+0x1b8>)
 8013128:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 801312c:	eeb0 0a67 	vmov.f32	s0, s15
 8013130:	f7ff f970 	bl	8012414 <print_float>
 8013134:	4817      	ldr	r0, [pc, #92]	; (8013194 <sensing_loop+0x1ec>)
 8013136:	f7ff f91f 	bl	8012378 <println>
 801313a:	e007      	b.n	801314c <sensing_loop+0x1a4>
			}
			else
			{
				HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 801313c:	2200      	movs	r2, #0
 801313e:	2140      	movs	r1, #64	; 0x40
 8013140:	4818      	ldr	r0, [pc, #96]	; (80131a4 <sensing_loop+0x1fc>)
 8013142:	f7f2 fe41 	bl	8005dc8 <HAL_GPIO_WritePin>
				println("GPS has no fix!");
 8013146:	4818      	ldr	r0, [pc, #96]	; (80131a8 <sensing_loop+0x200>)
 8013148:	f7ff f916 	bl	8012378 <println>
			}
		}
		lastDataPrint = millis();
 801314c:	f7ff f9a2 	bl	8012494 <millis>
 8013150:	4602      	mov	r2, r0
 8013152:	4b0e      	ldr	r3, [pc, #56]	; (801318c <sensing_loop+0x1e4>)
 8013154:	601a      	str	r2, [r3, #0]
	}
}
 8013156:	bf00      	nop
 8013158:	3710      	adds	r7, #16
 801315a:	46bd      	mov	sp, r7
 801315c:	bd80      	pop	{r7, pc}
 801315e:	bf00      	nop
 8013160:	20002ebc 	.word	0x20002ebc
 8013164:	40020400 	.word	0x40020400
 8013168:	20006704 	.word	0x20006704
 801316c:	200066cc 	.word	0x200066cc
 8013170:	20006708 	.word	0x20006708
 8013174:	20006710 	.word	0x20006710
 8013178:	200030f2 	.word	0x200030f2
 801317c:	20006700 	.word	0x20006700
 8013180:	200031c8 	.word	0x200031c8
 8013184:	200031d4 	.word	0x200031d4
 8013188:	200031d8 	.word	0x200031d8
 801318c:	2000670c 	.word	0x2000670c
 8013190:	0801bd98 	.word	0x0801bd98
 8013194:	0801b9d8 	.word	0x0801b9d8
 8013198:	0801bda4 	.word	0x0801bda4
 801319c:	0801bdb4 	.word	0x0801bdb4
 80131a0:	0801bdc0 	.word	0x0801bdc0
 80131a4:	40020800 	.word	0x40020800
 80131a8:	0801bdcc 	.word	0x0801bdcc
 80131ac:	00000000 	.word	0x00000000

080131b0 <algoGalgo>:

uint32_t lastAlgo;
float yaw_last_error;

static void algoGalgo(float yaw, float target_yaw)
{
 80131b0:	b5b0      	push	{r4, r5, r7, lr}
 80131b2:	ed2d 8b02 	vpush	{d8}
 80131b6:	b08c      	sub	sp, #48	; 0x30
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80131be:	edc7 0a00 	vstr	s1, [r7]
	float maxPower = 0.6;	// scale of motor power
 80131c2:	4b95      	ldr	r3, [pc, #596]	; (8013418 <algoGalgo+0x268>)
 80131c4:	627b      	str	r3, [r7, #36]	; 0x24
	float TurboMode= 50.0;
 80131c6:	4b95      	ldr	r3, [pc, #596]	; (801341c <algoGalgo+0x26c>)
 80131c8:	623b      	str	r3, [r7, #32]
	// Aim center: yaw = 180*
//	float target_yaw = 180.0;
	float error=target_yaw-yaw;
 80131ca:	ed97 7a00 	vldr	s14, [r7]
 80131ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80131d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80131d6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float thrust = 180.0+TurboMode;
 80131da:	edd7 7a08 	vldr	s15, [r7, #32]
 80131de:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8013420 <algoGalgo+0x270>
 80131e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80131e6:	edc7 7a07 	vstr	s15, [r7, #28]

	if (error<-180.0)
 80131ea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80131ee:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8013424 <algoGalgo+0x274>
 80131f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80131f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131fa:	d50c      	bpl.n	8013216 <algoGalgo+0x66>
		error = target_yaw-yaw+360.0;
 80131fc:	ed97 7a00 	vldr	s14, [r7]
 8013200:	edd7 7a01 	vldr	s15, [r7, #4]
 8013204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013208:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8013428 <algoGalgo+0x278>
 801320c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013210:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8013214:	e014      	b.n	8013240 <algoGalgo+0x90>
	else if (error>180.0)
 8013216:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801321a:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8013420 <algoGalgo+0x270>
 801321e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013226:	dd0b      	ble.n	8013240 <algoGalgo+0x90>
		error = target_yaw-yaw-360.0;
 8013228:	ed97 7a00 	vldr	s14, [r7]
 801322c:	edd7 7a01 	vldr	s15, [r7, #4]
 8013230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013234:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8013428 <algoGalgo+0x278>
 8013238:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801323c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
//	print("yaw: "); print_float(yaw); println("");

//	print("error: "); print_float(error); println("");
	//print("yaw_last_error: "); print_float(yaw_last_error); println("");

	float kp=1.0; //dobrany
 8013240:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013244:	61bb      	str	r3, [r7, #24]
//	float ki=0.5;
	float kd=500.0; //dobrany 500 ok - 100ms
 8013246:	4b79      	ldr	r3, [pc, #484]	; (801342c <algoGalgo+0x27c>)
 8013248:	617b      	str	r3, [r7, #20]

	float pid_p, pid_i, pid_d;

	pid_p=kp*error;
 801324a:	ed97 7a06 	vldr	s14, [r7, #24]
 801324e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8013252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013256:	edc7 7a04 	vstr	s15, [r7, #16]
	pid_d=kd*((error-yaw_last_error)/(millis() - lastAlgo));
 801325a:	4b75      	ldr	r3, [pc, #468]	; (8013430 <algoGalgo+0x280>)
 801325c:	edd3 7a00 	vldr	s15, [r3]
 8013260:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8013264:	ee37 8a67 	vsub.f32	s16, s14, s15
 8013268:	f7ff f914 	bl	8012494 <millis>
 801326c:	4602      	mov	r2, r0
 801326e:	4b71      	ldr	r3, [pc, #452]	; (8013434 <algoGalgo+0x284>)
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	1ad3      	subs	r3, r2, r3
 8013274:	ee07 3a90 	vmov	s15, r3
 8013278:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801327c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8013280:	ed97 7a05 	vldr	s14, [r7, #20]
 8013284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013288:	edc7 7a03 	vstr	s15, [r7, #12]

	float PID;
//	if (error>-15 && error <15)
//		PID=pid_p+pid_d+pid_i;
//	else
		PID=pid_p+pid_d;
 801328c:	ed97 7a04 	vldr	s14, [r7, #16]
 8013290:	edd7 7a03 	vldr	s15, [r7, #12]
 8013294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013298:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	if (PID>180.0-TurboMode)
 801329c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801329e:	f7ed f963 	bl	8000568 <__aeabi_f2d>
 80132a2:	4604      	mov	r4, r0
 80132a4:	460d      	mov	r5, r1
 80132a6:	6a38      	ldr	r0, [r7, #32]
 80132a8:	f7ed f95e 	bl	8000568 <__aeabi_f2d>
 80132ac:	4602      	mov	r2, r0
 80132ae:	460b      	mov	r3, r1
 80132b0:	f04f 0000 	mov.w	r0, #0
 80132b4:	4960      	ldr	r1, [pc, #384]	; (8013438 <algoGalgo+0x288>)
 80132b6:	f7ec fff7 	bl	80002a8 <__aeabi_dsub>
 80132ba:	4602      	mov	r2, r0
 80132bc:	460b      	mov	r3, r1
 80132be:	4620      	mov	r0, r4
 80132c0:	4629      	mov	r1, r5
 80132c2:	f7ed fc39 	bl	8000b38 <__aeabi_dcmpgt>
 80132c6:	4603      	mov	r3, r0
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d008      	beq.n	80132de <algoGalgo+0x12e>
			PID=180.0-TurboMode;
 80132cc:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8013420 <algoGalgo+0x270>
 80132d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80132d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80132d8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80132dc:	e01d      	b.n	801331a <algoGalgo+0x16a>
		else if (PID<-180.0+TurboMode)
 80132de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80132e0:	f7ed f942 	bl	8000568 <__aeabi_f2d>
 80132e4:	4604      	mov	r4, r0
 80132e6:	460d      	mov	r5, r1
 80132e8:	6a38      	ldr	r0, [r7, #32]
 80132ea:	f7ed f93d 	bl	8000568 <__aeabi_f2d>
 80132ee:	f04f 0200 	mov.w	r2, #0
 80132f2:	4b51      	ldr	r3, [pc, #324]	; (8013438 <algoGalgo+0x288>)
 80132f4:	f7ec ffd8 	bl	80002a8 <__aeabi_dsub>
 80132f8:	4602      	mov	r2, r0
 80132fa:	460b      	mov	r3, r1
 80132fc:	4620      	mov	r0, r4
 80132fe:	4629      	mov	r1, r5
 8013300:	f7ed fbfc 	bl	8000afc <__aeabi_dcmplt>
 8013304:	4603      	mov	r3, r0
 8013306:	2b00      	cmp	r3, #0
 8013308:	d007      	beq.n	801331a <algoGalgo+0x16a>
			PID=-180.0+TurboMode;
 801330a:	edd7 7a08 	vldr	s15, [r7, #32]
 801330e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8013420 <algoGalgo+0x270>
 8013312:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013316:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

//	print("PID: "); print_float(PID); println("");


	setMotors((thrust - PID) * maxPower * (1.0 / 360.0), (thrust + PID) * maxPower * (1.0 / 360.0) * 0.92);
 801331a:	ed97 7a07 	vldr	s14, [r7, #28]
 801331e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8013322:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013326:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801332a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801332e:	ee17 0a90 	vmov	r0, s15
 8013332:	f7ed f919 	bl	8000568 <__aeabi_f2d>
 8013336:	a334      	add	r3, pc, #208	; (adr r3, 8013408 <algoGalgo+0x258>)
 8013338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333c:	f7ed f96c 	bl	8000618 <__aeabi_dmul>
 8013340:	4603      	mov	r3, r0
 8013342:	460c      	mov	r4, r1
 8013344:	4618      	mov	r0, r3
 8013346:	4621      	mov	r1, r4
 8013348:	f7ed fc5e 	bl	8000c08 <__aeabi_d2f>
 801334c:	4605      	mov	r5, r0
 801334e:	ed97 7a07 	vldr	s14, [r7, #28]
 8013352:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8013356:	ee37 7a27 	vadd.f32	s14, s14, s15
 801335a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801335e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013362:	ee17 0a90 	vmov	r0, s15
 8013366:	f7ed f8ff 	bl	8000568 <__aeabi_f2d>
 801336a:	a327      	add	r3, pc, #156	; (adr r3, 8013408 <algoGalgo+0x258>)
 801336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013370:	f7ed f952 	bl	8000618 <__aeabi_dmul>
 8013374:	4603      	mov	r3, r0
 8013376:	460c      	mov	r4, r1
 8013378:	4618      	mov	r0, r3
 801337a:	4621      	mov	r1, r4
 801337c:	a324      	add	r3, pc, #144	; (adr r3, 8013410 <algoGalgo+0x260>)
 801337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013382:	f7ed f949 	bl	8000618 <__aeabi_dmul>
 8013386:	4603      	mov	r3, r0
 8013388:	460c      	mov	r4, r1
 801338a:	4618      	mov	r0, r3
 801338c:	4621      	mov	r1, r4
 801338e:	f7ed fc3b 	bl	8000c08 <__aeabi_d2f>
 8013392:	4603      	mov	r3, r0
 8013394:	ee00 3a90 	vmov	s1, r3
 8013398:	ee00 5a10 	vmov	s0, r5
 801339c:	f7ed fea2 	bl	80010e4 <setMotors>


//	setMotors((thrust - error) * maxPower * (1.0 / 360.0), (thrust + error) * maxPower * (1.0 / 360.0));

	// Shines purple LED if centered
	if (yaw >= target_yaw-2 && yaw <= target_yaw+2) HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 80133a0:	edd7 7a00 	vldr	s15, [r7]
 80133a4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80133a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80133ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80133b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80133b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133b8:	db12      	blt.n	80133e0 <algoGalgo+0x230>
 80133ba:	edd7 7a00 	vldr	s15, [r7]
 80133be:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80133c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80133c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80133ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80133ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133d2:	d805      	bhi.n	80133e0 <algoGalgo+0x230>
 80133d4:	2201      	movs	r2, #1
 80133d6:	2180      	movs	r1, #128	; 0x80
 80133d8:	4818      	ldr	r0, [pc, #96]	; (801343c <algoGalgo+0x28c>)
 80133da:	f7f2 fcf5 	bl	8005dc8 <HAL_GPIO_WritePin>
 80133de:	e004      	b.n	80133ea <algoGalgo+0x23a>
	else HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 80133e0:	2200      	movs	r2, #0
 80133e2:	2180      	movs	r1, #128	; 0x80
 80133e4:	4815      	ldr	r0, [pc, #84]	; (801343c <algoGalgo+0x28c>)
 80133e6:	f7f2 fcef 	bl	8005dc8 <HAL_GPIO_WritePin>

	yaw_last_error=error;
 80133ea:	4a11      	ldr	r2, [pc, #68]	; (8013430 <algoGalgo+0x280>)
 80133ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ee:	6013      	str	r3, [r2, #0]
	lastAlgo = millis();
 80133f0:	f7ff f850 	bl	8012494 <millis>
 80133f4:	4602      	mov	r2, r0
 80133f6:	4b0f      	ldr	r3, [pc, #60]	; (8013434 <algoGalgo+0x284>)
 80133f8:	601a      	str	r2, [r3, #0]
}
 80133fa:	bf00      	nop
 80133fc:	3730      	adds	r7, #48	; 0x30
 80133fe:	46bd      	mov	sp, r7
 8013400:	ecbd 8b02 	vpop	{d8}
 8013404:	bdb0      	pop	{r4, r5, r7, pc}
 8013406:	bf00      	nop
 8013408:	16c16c17 	.word	0x16c16c17
 801340c:	3f66c16c 	.word	0x3f66c16c
 8013410:	d70a3d71 	.word	0xd70a3d71
 8013414:	3fed70a3 	.word	0x3fed70a3
 8013418:	3f19999a 	.word	0x3f19999a
 801341c:	42480000 	.word	0x42480000
 8013420:	43340000 	.word	0x43340000
 8013424:	c3340000 	.word	0xc3340000
 8013428:	43b40000 	.word	0x43b40000
 801342c:	43fa0000 	.word	0x43fa0000
 8013430:	20002c70 	.word	0x20002c70
 8013434:	20002c6c 	.word	0x20002c6c
 8013438:	40668000 	.word	0x40668000
 801343c:	40020800 	.word	0x40020800

08013440 <bearing>:

static float bearing(float lat,float lon,float lat2,float lon2){
 8013440:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8013444:	b08c      	sub	sp, #48	; 0x30
 8013446:	af00      	add	r7, sp, #0
 8013448:	ed87 0a03 	vstr	s0, [r7, #12]
 801344c:	edc7 0a02 	vstr	s1, [r7, #8]
 8013450:	ed87 1a01 	vstr	s2, [r7, #4]
 8013454:	edc7 1a00 	vstr	s3, [r7]
	//lat = your current gps latitude.
	//lon = your current gps longitude.
	//lat2 = your destiny gps latitude.
	//lon2 = your destiny gps longitude.

    float teta1 = lat*M_PI/180;
 8013458:	68f8      	ldr	r0, [r7, #12]
 801345a:	f7ed f885 	bl	8000568 <__aeabi_f2d>
 801345e:	a39e      	add	r3, pc, #632	; (adr r3, 80136d8 <bearing+0x298>)
 8013460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013464:	f7ed f8d8 	bl	8000618 <__aeabi_dmul>
 8013468:	4603      	mov	r3, r0
 801346a:	460c      	mov	r4, r1
 801346c:	4618      	mov	r0, r3
 801346e:	4621      	mov	r1, r4
 8013470:	f04f 0200 	mov.w	r2, #0
 8013474:	4b9c      	ldr	r3, [pc, #624]	; (80136e8 <bearing+0x2a8>)
 8013476:	f7ed f9f9 	bl	800086c <__aeabi_ddiv>
 801347a:	4603      	mov	r3, r0
 801347c:	460c      	mov	r4, r1
 801347e:	4618      	mov	r0, r3
 8013480:	4621      	mov	r1, r4
 8013482:	f7ed fbc1 	bl	8000c08 <__aeabi_d2f>
 8013486:	4603      	mov	r3, r0
 8013488:	62fb      	str	r3, [r7, #44]	; 0x2c
    float teta2 = lat2*M_PI/180;
 801348a:	6878      	ldr	r0, [r7, #4]
 801348c:	f7ed f86c 	bl	8000568 <__aeabi_f2d>
 8013490:	a391      	add	r3, pc, #580	; (adr r3, 80136d8 <bearing+0x298>)
 8013492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013496:	f7ed f8bf 	bl	8000618 <__aeabi_dmul>
 801349a:	4603      	mov	r3, r0
 801349c:	460c      	mov	r4, r1
 801349e:	4618      	mov	r0, r3
 80134a0:	4621      	mov	r1, r4
 80134a2:	f04f 0200 	mov.w	r2, #0
 80134a6:	4b90      	ldr	r3, [pc, #576]	; (80136e8 <bearing+0x2a8>)
 80134a8:	f7ed f9e0 	bl	800086c <__aeabi_ddiv>
 80134ac:	4603      	mov	r3, r0
 80134ae:	460c      	mov	r4, r1
 80134b0:	4618      	mov	r0, r3
 80134b2:	4621      	mov	r1, r4
 80134b4:	f7ed fba8 	bl	8000c08 <__aeabi_d2f>
 80134b8:	4603      	mov	r3, r0
 80134ba:	62bb      	str	r3, [r7, #40]	; 0x28
    float delta1 = (lat2-lat)*M_PI/180;
 80134bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80134c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80134c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134c8:	ee17 0a90 	vmov	r0, s15
 80134cc:	f7ed f84c 	bl	8000568 <__aeabi_f2d>
 80134d0:	a381      	add	r3, pc, #516	; (adr r3, 80136d8 <bearing+0x298>)
 80134d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d6:	f7ed f89f 	bl	8000618 <__aeabi_dmul>
 80134da:	4603      	mov	r3, r0
 80134dc:	460c      	mov	r4, r1
 80134de:	4618      	mov	r0, r3
 80134e0:	4621      	mov	r1, r4
 80134e2:	f04f 0200 	mov.w	r2, #0
 80134e6:	4b80      	ldr	r3, [pc, #512]	; (80136e8 <bearing+0x2a8>)
 80134e8:	f7ed f9c0 	bl	800086c <__aeabi_ddiv>
 80134ec:	4603      	mov	r3, r0
 80134ee:	460c      	mov	r4, r1
 80134f0:	4618      	mov	r0, r3
 80134f2:	4621      	mov	r1, r4
 80134f4:	f7ed fb88 	bl	8000c08 <__aeabi_d2f>
 80134f8:	4603      	mov	r3, r0
 80134fa:	627b      	str	r3, [r7, #36]	; 0x24
    float delta2 = (lon2-lon)*M_PI/180;
 80134fc:	ed97 7a00 	vldr	s14, [r7]
 8013500:	edd7 7a02 	vldr	s15, [r7, #8]
 8013504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013508:	ee17 0a90 	vmov	r0, s15
 801350c:	f7ed f82c 	bl	8000568 <__aeabi_f2d>
 8013510:	a371      	add	r3, pc, #452	; (adr r3, 80136d8 <bearing+0x298>)
 8013512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013516:	f7ed f87f 	bl	8000618 <__aeabi_dmul>
 801351a:	4603      	mov	r3, r0
 801351c:	460c      	mov	r4, r1
 801351e:	4618      	mov	r0, r3
 8013520:	4621      	mov	r1, r4
 8013522:	f04f 0200 	mov.w	r2, #0
 8013526:	4b70      	ldr	r3, [pc, #448]	; (80136e8 <bearing+0x2a8>)
 8013528:	f7ed f9a0 	bl	800086c <__aeabi_ddiv>
 801352c:	4603      	mov	r3, r0
 801352e:	460c      	mov	r4, r1
 8013530:	4618      	mov	r0, r3
 8013532:	4621      	mov	r1, r4
 8013534:	f7ed fb68 	bl	8000c08 <__aeabi_d2f>
 8013538:	4603      	mov	r3, r0
 801353a:	623b      	str	r3, [r7, #32]

    //==================Heading Formula Calculation================//

    float y = sin(delta2) * cos(teta2);
 801353c:	6a38      	ldr	r0, [r7, #32]
 801353e:	f7ed f813 	bl	8000568 <__aeabi_f2d>
 8013542:	4603      	mov	r3, r0
 8013544:	460c      	mov	r4, r1
 8013546:	ec44 3b10 	vmov	d0, r3, r4
 801354a:	f006 f875 	bl	8019638 <sin>
 801354e:	ec55 4b10 	vmov	r4, r5, d0
 8013552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013554:	f7ed f808 	bl	8000568 <__aeabi_f2d>
 8013558:	4602      	mov	r2, r0
 801355a:	460b      	mov	r3, r1
 801355c:	ec43 2b10 	vmov	d0, r2, r3
 8013560:	f006 f826 	bl	80195b0 <cos>
 8013564:	ec53 2b10 	vmov	r2, r3, d0
 8013568:	4620      	mov	r0, r4
 801356a:	4629      	mov	r1, r5
 801356c:	f7ed f854 	bl	8000618 <__aeabi_dmul>
 8013570:	4603      	mov	r3, r0
 8013572:	460c      	mov	r4, r1
 8013574:	4618      	mov	r0, r3
 8013576:	4621      	mov	r1, r4
 8013578:	f7ed fb46 	bl	8000c08 <__aeabi_d2f>
 801357c:	4603      	mov	r3, r0
 801357e:	61fb      	str	r3, [r7, #28]
    float x = cos(teta1)*sin(teta2) - sin(teta1)*cos(teta2)*cos(delta2);
 8013580:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013582:	f7ec fff1 	bl	8000568 <__aeabi_f2d>
 8013586:	4603      	mov	r3, r0
 8013588:	460c      	mov	r4, r1
 801358a:	ec44 3b10 	vmov	d0, r3, r4
 801358e:	f006 f80f 	bl	80195b0 <cos>
 8013592:	ec55 4b10 	vmov	r4, r5, d0
 8013596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013598:	f7ec ffe6 	bl	8000568 <__aeabi_f2d>
 801359c:	4602      	mov	r2, r0
 801359e:	460b      	mov	r3, r1
 80135a0:	ec43 2b10 	vmov	d0, r2, r3
 80135a4:	f006 f848 	bl	8019638 <sin>
 80135a8:	ec53 2b10 	vmov	r2, r3, d0
 80135ac:	4620      	mov	r0, r4
 80135ae:	4629      	mov	r1, r5
 80135b0:	f7ed f832 	bl	8000618 <__aeabi_dmul>
 80135b4:	4603      	mov	r3, r0
 80135b6:	460c      	mov	r4, r1
 80135b8:	4625      	mov	r5, r4
 80135ba:	461c      	mov	r4, r3
 80135bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80135be:	f7ec ffd3 	bl	8000568 <__aeabi_f2d>
 80135c2:	4602      	mov	r2, r0
 80135c4:	460b      	mov	r3, r1
 80135c6:	ec43 2b10 	vmov	d0, r2, r3
 80135ca:	f006 f835 	bl	8019638 <sin>
 80135ce:	ec59 8b10 	vmov	r8, r9, d0
 80135d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135d4:	f7ec ffc8 	bl	8000568 <__aeabi_f2d>
 80135d8:	4602      	mov	r2, r0
 80135da:	460b      	mov	r3, r1
 80135dc:	ec43 2b10 	vmov	d0, r2, r3
 80135e0:	f005 ffe6 	bl	80195b0 <cos>
 80135e4:	ec53 2b10 	vmov	r2, r3, d0
 80135e8:	4640      	mov	r0, r8
 80135ea:	4649      	mov	r1, r9
 80135ec:	f7ed f814 	bl	8000618 <__aeabi_dmul>
 80135f0:	4602      	mov	r2, r0
 80135f2:	460b      	mov	r3, r1
 80135f4:	4690      	mov	r8, r2
 80135f6:	4699      	mov	r9, r3
 80135f8:	6a38      	ldr	r0, [r7, #32]
 80135fa:	f7ec ffb5 	bl	8000568 <__aeabi_f2d>
 80135fe:	4602      	mov	r2, r0
 8013600:	460b      	mov	r3, r1
 8013602:	ec43 2b10 	vmov	d0, r2, r3
 8013606:	f005 ffd3 	bl	80195b0 <cos>
 801360a:	ec53 2b10 	vmov	r2, r3, d0
 801360e:	4640      	mov	r0, r8
 8013610:	4649      	mov	r1, r9
 8013612:	f7ed f801 	bl	8000618 <__aeabi_dmul>
 8013616:	4602      	mov	r2, r0
 8013618:	460b      	mov	r3, r1
 801361a:	4620      	mov	r0, r4
 801361c:	4629      	mov	r1, r5
 801361e:	f7ec fe43 	bl	80002a8 <__aeabi_dsub>
 8013622:	4603      	mov	r3, r0
 8013624:	460c      	mov	r4, r1
 8013626:	4618      	mov	r0, r3
 8013628:	4621      	mov	r1, r4
 801362a:	f7ed faed 	bl	8000c08 <__aeabi_d2f>
 801362e:	4603      	mov	r3, r0
 8013630:	61bb      	str	r3, [r7, #24]
    float brng = atan2(y,x);
 8013632:	69f8      	ldr	r0, [r7, #28]
 8013634:	f7ec ff98 	bl	8000568 <__aeabi_f2d>
 8013638:	4604      	mov	r4, r0
 801363a:	460d      	mov	r5, r1
 801363c:	69b8      	ldr	r0, [r7, #24]
 801363e:	f7ec ff93 	bl	8000568 <__aeabi_f2d>
 8013642:	4602      	mov	r2, r0
 8013644:	460b      	mov	r3, r1
 8013646:	ec43 2b11 	vmov	d1, r2, r3
 801364a:	ec45 4b10 	vmov	d0, r4, r5
 801364e:	f006 f893 	bl	8019778 <atan2>
 8013652:	ec54 3b10 	vmov	r3, r4, d0
 8013656:	4618      	mov	r0, r3
 8013658:	4621      	mov	r1, r4
 801365a:	f7ed fad5 	bl	8000c08 <__aeabi_d2f>
 801365e:	4603      	mov	r3, r0
 8013660:	617b      	str	r3, [r7, #20]
    brng = brng*180/M_PI;// radians to degrees
 8013662:	edd7 7a05 	vldr	s15, [r7, #20]
 8013666:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80136ec <bearing+0x2ac>
 801366a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801366e:	ee17 0a90 	vmov	r0, s15
 8013672:	f7ec ff79 	bl	8000568 <__aeabi_f2d>
 8013676:	a318      	add	r3, pc, #96	; (adr r3, 80136d8 <bearing+0x298>)
 8013678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801367c:	f7ed f8f6 	bl	800086c <__aeabi_ddiv>
 8013680:	4603      	mov	r3, r0
 8013682:	460c      	mov	r4, r1
 8013684:	4618      	mov	r0, r3
 8013686:	4621      	mov	r1, r4
 8013688:	f7ed fabe 	bl	8000c08 <__aeabi_d2f>
 801368c:	4603      	mov	r3, r0
 801368e:	617b      	str	r3, [r7, #20]
    brng = fmod((brng + 360), 360);
 8013690:	edd7 7a05 	vldr	s15, [r7, #20]
 8013694:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80136f0 <bearing+0x2b0>
 8013698:	ee77 7a87 	vadd.f32	s15, s15, s14
 801369c:	ee17 0a90 	vmov	r0, s15
 80136a0:	f7ec ff62 	bl	8000568 <__aeabi_f2d>
 80136a4:	4603      	mov	r3, r0
 80136a6:	460c      	mov	r4, r1
 80136a8:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 80136e0 <bearing+0x2a0>
 80136ac:	ec44 3b10 	vmov	d0, r3, r4
 80136b0:	f006 f864 	bl	801977c <fmod>
 80136b4:	ec54 3b10 	vmov	r3, r4, d0
 80136b8:	4618      	mov	r0, r3
 80136ba:	4621      	mov	r1, r4
 80136bc:	f7ed faa4 	bl	8000c08 <__aeabi_d2f>
 80136c0:	4603      	mov	r3, r0
 80136c2:	617b      	str	r3, [r7, #20]
   // std::cout<< brng;
    return brng;
 80136c4:	697b      	ldr	r3, [r7, #20]
 80136c6:	ee07 3a90 	vmov	s15, r3
    }
 80136ca:	eeb0 0a67 	vmov.f32	s0, s15
 80136ce:	3730      	adds	r7, #48	; 0x30
 80136d0:	46bd      	mov	sp, r7
 80136d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80136d6:	bf00      	nop
 80136d8:	54442d18 	.word	0x54442d18
 80136dc:	400921fb 	.word	0x400921fb
 80136e0:	00000000 	.word	0x00000000
 80136e4:	40768000 	.word	0x40768000
 80136e8:	40668000 	.word	0x40668000
 80136ec:	43340000 	.word	0x43340000
 80136f0:	43b40000 	.word	0x43b40000

080136f4 <setup>:
float target_lat;
float target_lon;
uint8_t servoState;

static void setup(void)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	af00      	add	r7, sp, #0

	duplex_loop("new transmit", 14, true);
	lastSave = millis();
	servoState = 0;
	*/
	sensing_begin();
 80136f8:	f7ff fbae 	bl	8012e58 <sensing_begin>


	if (duplex_begin()) { println("Radio is working");}
 80136fc:	f7fe ffcc 	bl	8012698 <duplex_begin>
 8013700:	4603      	mov	r3, r0
 8013702:	2b00      	cmp	r3, #0
 8013704:	d002      	beq.n	801370c <setup+0x18>
 8013706:	4814      	ldr	r0, [pc, #80]	; (8013758 <setup+0x64>)
 8013708:	f7fe fe36 	bl	8012378 <println>
	duplex_loop("new transmit", 14, true);
 801370c:	2201      	movs	r2, #1
 801370e:	210e      	movs	r1, #14
 8013710:	4812      	ldr	r0, [pc, #72]	; (801375c <setup+0x68>)
 8013712:	f7ff f849 	bl	80127a8 <duplex_loop>
	if (sdTest_begin()) { println("SD card is working!");}
 8013716:	f7fe ff1d 	bl	8012554 <sdTest_begin>
 801371a:	4603      	mov	r3, r0
 801371c:	2b00      	cmp	r3, #0
 801371e:	d002      	beq.n	8013726 <setup+0x32>
 8013720:	480f      	ldr	r0, [pc, #60]	; (8013760 <setup+0x6c>)
 8013722:	f7fe fe29 	bl	8012378 <println>
	log_new();
 8013726:	f7f1 f92b 	bl	8004980 <log_new>
	lastSave = millis();
 801372a:	f7fe feb3 	bl	8012494 <millis>
 801372e:	4602      	mov	r2, r0
 8013730:	4b0c      	ldr	r3, [pc, #48]	; (8013764 <setup+0x70>)
 8013732:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_3);
 8013734:	f000 fe38 	bl	80143a8 <Get_TIM3_Instance>
 8013738:	4603      	mov	r3, r0
 801373a:	2108      	movs	r1, #8
 801373c:	4618      	mov	r0, r3
 801373e:	f7f7 fa75 	bl	800ac2c <HAL_TIM_PWM_Start>
	TIM3->CCR3 = 990;
 8013742:	4b09      	ldr	r3, [pc, #36]	; (8013768 <setup+0x74>)
 8013744:	f240 32de 	movw	r2, #990	; 0x3de
 8013748:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 801374a:	2201      	movs	r2, #1
 801374c:	2140      	movs	r1, #64	; 0x40
 801374e:	4807      	ldr	r0, [pc, #28]	; (801376c <setup+0x78>)
 8013750:	f7f2 fb3a 	bl	8005dc8 <HAL_GPIO_WritePin>

}
 8013754:	bf00      	nop
 8013756:	bd80      	pop	{r7, pc}
 8013758:	0801bdf0 	.word	0x0801bdf0
 801375c:	0801be04 	.word	0x0801be04
 8013760:	0801be14 	.word	0x0801be14
 8013764:	20006738 	.word	0x20006738
 8013768:	40000400 	.word	0x40000400
 801376c:	40020800 	.word	0x40020800

08013770 <preparePacket>:

static void preparePacket()
{
 8013770:	b590      	push	{r4, r7, lr}
 8013772:	b083      	sub	sp, #12
 8013774:	af00      	add	r7, sp, #0
	uint32_t temv = 0;
 8013776:	2300      	movs	r3, #0
 8013778:	607b      	str	r3, [r7, #4]
	temv = (uint32_t)(bmp.pressure * 10);
 801377a:	4b6d      	ldr	r3, [pc, #436]	; (8013930 <preparePacket+0x1c0>)
 801377c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013780:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8013784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801378c:	ee17 3a90 	vmov	r3, s15
 8013790:	607b      	str	r3, [r7, #4]
	radio.txBuffer[0] = (uint8_t)(temv >> 0) & 0xFF;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	b2da      	uxtb	r2, r3
 8013796:	4b67      	ldr	r3, [pc, #412]	; (8013934 <preparePacket+0x1c4>)
 8013798:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	radio.txBuffer[1] = (uint8_t)(temv >> 8) & 0xFF;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	0a1b      	lsrs	r3, r3, #8
 80137a0:	b2da      	uxtb	r2, r3
 80137a2:	4b64      	ldr	r3, [pc, #400]	; (8013934 <preparePacket+0x1c4>)
 80137a4:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	radio.txBuffer[2] = (uint8_t)(temv >> 16) & 0xFF;
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	0c1b      	lsrs	r3, r3, #16
 80137ac:	b2da      	uxtb	r2, r3
 80137ae:	4b61      	ldr	r3, [pc, #388]	; (8013934 <preparePacket+0x1c4>)
 80137b0:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	radio.txBuffer[3] = (uint8_t)(temv >> 24) & 0xFF;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	0e1b      	lsrs	r3, r3, #24
 80137b8:	b2da      	uxtb	r2, r3
 80137ba:	4b5e      	ldr	r3, [pc, #376]	; (8013934 <preparePacket+0x1c4>)
 80137bc:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

	temv = (uint32_t)(bmp.temperature * 10);
 80137c0:	4b5b      	ldr	r3, [pc, #364]	; (8013930 <preparePacket+0x1c0>)
 80137c2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80137c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80137ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80137ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80137d2:	ee17 3a90 	vmov	r3, s15
 80137d6:	607b      	str	r3, [r7, #4]
	radio.txBuffer[4] = (uint8_t)(temv >> 0) & 0xFF;
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	b2da      	uxtb	r2, r3
 80137dc:	4b55      	ldr	r3, [pc, #340]	; (8013934 <preparePacket+0x1c4>)
 80137de:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	radio.txBuffer[5] = (uint8_t)(temv >> 8) & 0xFF;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	0a1b      	lsrs	r3, r3, #8
 80137e6:	b2da      	uxtb	r2, r3
 80137e8:	4b52      	ldr	r3, [pc, #328]	; (8013934 <preparePacket+0x1c4>)
 80137ea:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
	radio.txBuffer[6] = (uint8_t)(temv >> 16) & 0xFF;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	0c1b      	lsrs	r3, r3, #16
 80137f2:	b2da      	uxtb	r2, r3
 80137f4:	4b4f      	ldr	r3, [pc, #316]	; (8013934 <preparePacket+0x1c4>)
 80137f6:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	radio.txBuffer[7] = (uint8_t)(temv >> 24) & 0xFF;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	0e1b      	lsrs	r3, r3, #24
 80137fe:	b2da      	uxtb	r2, r3
 8013800:	4b4c      	ldr	r3, [pc, #304]	; (8013934 <preparePacket+0x1c4>)
 8013802:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b

	temv = (uint32_t)(gps.latitudeDegrees * 10000000);
 8013806:	4b4c      	ldr	r3, [pc, #304]	; (8013938 <preparePacket+0x1c8>)
 8013808:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 801380c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801393c <preparePacket+0x1cc>
 8013810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013818:	ee17 3a90 	vmov	r3, s15
 801381c:	607b      	str	r3, [r7, #4]
	radio.txBuffer[8] = (uint8_t)(temv >> 0) & 0xFF;
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	b2da      	uxtb	r2, r3
 8013822:	4b44      	ldr	r3, [pc, #272]	; (8013934 <preparePacket+0x1c4>)
 8013824:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	radio.txBuffer[9] = (uint8_t)(temv >> 8) & 0xFF;
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	0a1b      	lsrs	r3, r3, #8
 801382c:	b2da      	uxtb	r2, r3
 801382e:	4b41      	ldr	r3, [pc, #260]	; (8013934 <preparePacket+0x1c4>)
 8013830:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	radio.txBuffer[10] = (uint8_t)(temv >> 16) & 0xFF;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	0c1b      	lsrs	r3, r3, #16
 8013838:	b2da      	uxtb	r2, r3
 801383a:	4b3e      	ldr	r3, [pc, #248]	; (8013934 <preparePacket+0x1c4>)
 801383c:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	radio.txBuffer[11] = (uint8_t)(temv >> 24) & 0xFF;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	0e1b      	lsrs	r3, r3, #24
 8013844:	b2da      	uxtb	r2, r3
 8013846:	4b3b      	ldr	r3, [pc, #236]	; (8013934 <preparePacket+0x1c4>)
 8013848:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f

	temv = (uint32_t)(gps.longitudeDegrees * 10000000);
 801384c:	4b3a      	ldr	r3, [pc, #232]	; (8013938 <preparePacket+0x1c8>)
 801384e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8013852:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 801393c <preparePacket+0x1cc>
 8013856:	ee67 7a87 	vmul.f32	s15, s15, s14
 801385a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801385e:	ee17 3a90 	vmov	r3, s15
 8013862:	607b      	str	r3, [r7, #4]
	radio.txBuffer[12] = (uint8_t)(temv >> 0) & 0xFF;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	b2da      	uxtb	r2, r3
 8013868:	4b32      	ldr	r3, [pc, #200]	; (8013934 <preparePacket+0x1c4>)
 801386a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	radio.txBuffer[13] = (uint8_t)(temv >> 8) & 0xFF;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	0a1b      	lsrs	r3, r3, #8
 8013872:	b2da      	uxtb	r2, r3
 8013874:	4b2f      	ldr	r3, [pc, #188]	; (8013934 <preparePacket+0x1c4>)
 8013876:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	radio.txBuffer[14] = (uint8_t)(temv >> 16) & 0xFF;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	0c1b      	lsrs	r3, r3, #16
 801387e:	b2da      	uxtb	r2, r3
 8013880:	4b2c      	ldr	r3, [pc, #176]	; (8013934 <preparePacket+0x1c4>)
 8013882:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	radio.txBuffer[15] = (uint8_t)(temv >> 24) & 0xFF;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	0e1b      	lsrs	r3, r3, #24
 801388a:	b2da      	uxtb	r2, r3
 801388c:	4b29      	ldr	r3, [pc, #164]	; (8013934 <preparePacket+0x1c4>)
 801388e:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

	radio.txBuffer[16] = (uint8_t)(yaw * (255.0 / 360.0));
 8013892:	4b2b      	ldr	r3, [pc, #172]	; (8013940 <preparePacket+0x1d0>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	4618      	mov	r0, r3
 8013898:	f7ec fe66 	bl	8000568 <__aeabi_f2d>
 801389c:	a322      	add	r3, pc, #136	; (adr r3, 8013928 <preparePacket+0x1b8>)
 801389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138a2:	f7ec feb9 	bl	8000618 <__aeabi_dmul>
 80138a6:	4603      	mov	r3, r0
 80138a8:	460c      	mov	r4, r1
 80138aa:	4618      	mov	r0, r3
 80138ac:	4621      	mov	r1, r4
 80138ae:	f7ed f98b 	bl	8000bc8 <__aeabi_d2uiz>
 80138b2:	4603      	mov	r3, r0
 80138b4:	b2da      	uxtb	r2, r3
 80138b6:	4b1f      	ldr	r3, [pc, #124]	; (8013934 <preparePacket+0x1c4>)
 80138b8:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	radio.txBuffer[17] = (uint8_t)(pitch * (255.0 / 360.0));
 80138bc:	4b21      	ldr	r3, [pc, #132]	; (8013944 <preparePacket+0x1d4>)
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7ec fe51 	bl	8000568 <__aeabi_f2d>
 80138c6:	a318      	add	r3, pc, #96	; (adr r3, 8013928 <preparePacket+0x1b8>)
 80138c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138cc:	f7ec fea4 	bl	8000618 <__aeabi_dmul>
 80138d0:	4603      	mov	r3, r0
 80138d2:	460c      	mov	r4, r1
 80138d4:	4618      	mov	r0, r3
 80138d6:	4621      	mov	r1, r4
 80138d8:	f7ed f976 	bl	8000bc8 <__aeabi_d2uiz>
 80138dc:	4603      	mov	r3, r0
 80138de:	b2da      	uxtb	r2, r3
 80138e0:	4b14      	ldr	r3, [pc, #80]	; (8013934 <preparePacket+0x1c4>)
 80138e2:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	radio.txBuffer[18] = (uint8_t)(roll * (255.0 / 360.0));
 80138e6:	4b18      	ldr	r3, [pc, #96]	; (8013948 <preparePacket+0x1d8>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7ec fe3c 	bl	8000568 <__aeabi_f2d>
 80138f0:	a30d      	add	r3, pc, #52	; (adr r3, 8013928 <preparePacket+0x1b8>)
 80138f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138f6:	f7ec fe8f 	bl	8000618 <__aeabi_dmul>
 80138fa:	4603      	mov	r3, r0
 80138fc:	460c      	mov	r4, r1
 80138fe:	4618      	mov	r0, r3
 8013900:	4621      	mov	r1, r4
 8013902:	f7ed f961 	bl	8000bc8 <__aeabi_d2uiz>
 8013906:	4603      	mov	r3, r0
 8013908:	b2da      	uxtb	r2, r3
 801390a:	4b0a      	ldr	r3, [pc, #40]	; (8013934 <preparePacket+0x1c4>)
 801390c:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156

	radio.txBuffer[19] = 0x00;
 8013910:	4b08      	ldr	r3, [pc, #32]	; (8013934 <preparePacket+0x1c4>)
 8013912:	2200      	movs	r2, #0
 8013914:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
	radio.txLen = 20;
 8013918:	4b06      	ldr	r3, [pc, #24]	; (8013934 <preparePacket+0x1c4>)
 801391a:	2214      	movs	r2, #20
 801391c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 8013920:	bf00      	nop
 8013922:	370c      	adds	r7, #12
 8013924:	46bd      	mov	sp, r7
 8013926:	bd90      	pop	{r4, r7, pc}
 8013928:	aaaaaaab 	.word	0xaaaaaaab
 801392c:	3fe6aaaa 	.word	0x3fe6aaaa
 8013930:	200066cc 	.word	0x200066cc
 8013934:	20002c74 	.word	0x20002c74
 8013938:	20002ebc 	.word	0x20002ebc
 801393c:	4b189680 	.word	0x4b189680
 8013940:	200031c8 	.word	0x200031c8
 8013944:	200031d4 	.word	0x200031d4
 8013948:	200031d8 	.word	0x200031d8
 801394c:	00000000 	.word	0x00000000

08013950 <loop>:


static void loop(void)
{
 8013950:	b590      	push	{r4, r7, lr}
 8013952:	b083      	sub	sp, #12
 8013954:	af00      	add	r7, sp, #0
	sensing_loop();
 8013956:	f7ff fb27 	bl	8012fa8 <sensing_loop>



	if (millis() - lastSave >= 1137)	// save SD buffers while waiting for packet but no frequent than 1Hz
 801395a:	f7fe fd9b 	bl	8012494 <millis>
 801395e:	4602      	mov	r2, r0
 8013960:	4b5d      	ldr	r3, [pc, #372]	; (8013ad8 <loop+0x188>)
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	1ad3      	subs	r3, r2, r3
 8013966:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 801396a:	d909      	bls.n	8013980 <loop+0x30>
	{
		log_print("yo helo!\n\r");
 801396c:	485b      	ldr	r0, [pc, #364]	; (8013adc <loop+0x18c>)
 801396e:	f7f1 fa0b 	bl	8004d88 <log_print>
		log_save();
 8013972:	f7f1 f8e3 	bl	8004b3c <log_save>
		lastSave = millis();
 8013976:	f7fe fd8d 	bl	8012494 <millis>
 801397a:	4602      	mov	r2, r0
 801397c:	4b56      	ldr	r3, [pc, #344]	; (8013ad8 <loop+0x188>)
 801397e:	601a      	str	r2, [r3, #0]
	}



	if (duplex_checkINT())
 8013980:	f7fe feea 	bl	8012758 <duplex_checkINT>
 8013984:	4603      	mov	r3, r0
 8013986:	2b00      	cmp	r3, #0
 8013988:	d06b      	beq.n	8013a62 <loop+0x112>
	{
		//radio.txLen = sprintf(radio.txBuffer, "%.01f_%.01f_%.07f_%.07f ", bmp.pressure, bmp.temperature, gps.latitudeDegrees, gps.longitudeDegrees); //imortant to leave last byte
		preparePacket();
 801398a:	f7ff fef1 	bl	8013770 <preparePacket>
		duplex_loop(radio.txBuffer, radio.txLen, true);
 801398e:	4b54      	ldr	r3, [pc, #336]	; (8013ae0 <loop+0x190>)
 8013990:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013994:	2201      	movs	r2, #1
 8013996:	4619      	mov	r1, r3
 8013998:	4852      	ldr	r0, [pc, #328]	; (8013ae4 <loop+0x194>)
 801399a:	f7fe ff05 	bl	80127a8 <duplex_loop>

		if ((float)radio.rxBuffer[radio.rxLen - 1] * (360.0 / 255.0))
 801399e:	4b50      	ldr	r3, [pc, #320]	; (8013ae0 <loop+0x190>)
 80139a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80139a4:	3b01      	subs	r3, #1
 80139a6:	4a4e      	ldr	r2, [pc, #312]	; (8013ae0 <loop+0x190>)
 80139a8:	4413      	add	r3, r2
 80139aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80139ae:	ee07 3a90 	vmov	s15, r3
 80139b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80139b6:	ee17 0a90 	vmov	r0, s15
 80139ba:	f7ec fdd5 	bl	8000568 <__aeabi_f2d>
 80139be:	a344      	add	r3, pc, #272	; (adr r3, 8013ad0 <loop+0x180>)
 80139c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c4:	f7ec fe28 	bl	8000618 <__aeabi_dmul>
 80139c8:	4603      	mov	r3, r0
 80139ca:	460c      	mov	r4, r1
 80139cc:	4618      	mov	r0, r3
 80139ce:	4621      	mov	r1, r4
 80139d0:	f04f 0200 	mov.w	r2, #0
 80139d4:	f04f 0300 	mov.w	r3, #0
 80139d8:	f7ed f886 	bl	8000ae8 <__aeabi_dcmpeq>
 80139dc:	4603      	mov	r3, r0
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d11d      	bne.n	8013a1e <loop+0xce>
		{
			target_yaw = (float)radio.rxBuffer[radio.rxLen - 1] * (360.0 / 255.0);
 80139e2:	4b3f      	ldr	r3, [pc, #252]	; (8013ae0 <loop+0x190>)
 80139e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80139e8:	3b01      	subs	r3, #1
 80139ea:	4a3d      	ldr	r2, [pc, #244]	; (8013ae0 <loop+0x190>)
 80139ec:	4413      	add	r3, r2
 80139ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80139f2:	ee07 3a90 	vmov	s15, r3
 80139f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80139fa:	ee17 0a90 	vmov	r0, s15
 80139fe:	f7ec fdb3 	bl	8000568 <__aeabi_f2d>
 8013a02:	a333      	add	r3, pc, #204	; (adr r3, 8013ad0 <loop+0x180>)
 8013a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a08:	f7ec fe06 	bl	8000618 <__aeabi_dmul>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	460c      	mov	r4, r1
 8013a10:	4618      	mov	r0, r3
 8013a12:	4621      	mov	r1, r4
 8013a14:	f7ed f8f8 	bl	8000c08 <__aeabi_d2f>
 8013a18:	4602      	mov	r2, r0
 8013a1a:	4b33      	ldr	r3, [pc, #204]	; (8013ae8 <loop+0x198>)
 8013a1c:	601a      	str	r2, [r3, #0]
		}

		//print_float(target_yaw); println("<< YAW << YAW");
		//print_int(radio.rxBuffer[0]); println("<< SERVO");
		if (radio.rxBuffer[0] == 1 || radio.rxBuffer[0] == 3) TIM3->CCR3 = 550;
 8013a1e:	4b30      	ldr	r3, [pc, #192]	; (8013ae0 <loop+0x190>)
 8013a20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a24:	2b01      	cmp	r3, #1
 8013a26:	d004      	beq.n	8013a32 <loop+0xe2>
 8013a28:	4b2d      	ldr	r3, [pc, #180]	; (8013ae0 <loop+0x190>)
 8013a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a2e:	2b03      	cmp	r3, #3
 8013a30:	d104      	bne.n	8013a3c <loop+0xec>
 8013a32:	4b2e      	ldr	r3, [pc, #184]	; (8013aec <loop+0x19c>)
 8013a34:	f240 2226 	movw	r2, #550	; 0x226
 8013a38:	63da      	str	r2, [r3, #60]	; 0x3c
 8013a3a:	e003      	b.n	8013a44 <loop+0xf4>
		else TIM3->CCR3 = 990;
 8013a3c:	4b2b      	ldr	r3, [pc, #172]	; (8013aec <loop+0x19c>)
 8013a3e:	f240 32de 	movw	r2, #990	; 0x3de
 8013a42:	63da      	str	r2, [r3, #60]	; 0x3c
		if (radio.rxBuffer[0] == 2 || radio.rxBuffer[0] == 3) enableMotors();
 8013a44:	4b26      	ldr	r3, [pc, #152]	; (8013ae0 <loop+0x190>)
 8013a46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a4a:	2b02      	cmp	r3, #2
 8013a4c:	d004      	beq.n	8013a58 <loop+0x108>
 8013a4e:	4b24      	ldr	r3, [pc, #144]	; (8013ae0 <loop+0x190>)
 8013a50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a54:	2b03      	cmp	r3, #3
 8013a56:	d102      	bne.n	8013a5e <loop+0x10e>
 8013a58:	f7ed fbaa 	bl	80011b0 <enableMotors>
 8013a5c:	e001      	b.n	8013a62 <loop+0x112>
		else disableMotors();
 8013a5e:	f7ed fbe9 	bl	8001234 <disableMotors>
	}


	if (millis() - lastMotUpdate >= 10)	// every 10ms get Euler angles and run motor alogrithm
 8013a62:	f7fe fd17 	bl	8012494 <millis>
 8013a66:	4602      	mov	r2, r0
 8013a68:	4b21      	ldr	r3, [pc, #132]	; (8013af0 <loop+0x1a0>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	1ad3      	subs	r3, r2, r3
 8013a6e:	2b09      	cmp	r3, #9
 8013a70:	d92a      	bls.n	8013ac8 <loop+0x178>
	{

		imuTest_getEuler();
 8013a72:	f7ff f8d9 	bl	8012c28 <imuTest_getEuler>
		float brng = bearing(gps.latitudeDegrees, gps.longitudeDegrees, target_lat, target_lon);
 8013a76:	4b1f      	ldr	r3, [pc, #124]	; (8013af4 <loop+0x1a4>)
 8013a78:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8013a7c:	4b1d      	ldr	r3, [pc, #116]	; (8013af4 <loop+0x1a4>)
 8013a7e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8013a82:	4b1d      	ldr	r3, [pc, #116]	; (8013af8 <loop+0x1a8>)
 8013a84:	edd3 6a00 	vldr	s13, [r3]
 8013a88:	4b1c      	ldr	r3, [pc, #112]	; (8013afc <loop+0x1ac>)
 8013a8a:	ed93 6a00 	vldr	s12, [r3]
 8013a8e:	eef0 1a46 	vmov.f32	s3, s12
 8013a92:	eeb0 1a66 	vmov.f32	s2, s13
 8013a96:	eef0 0a47 	vmov.f32	s1, s14
 8013a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8013a9e:	f7ff fccf 	bl	8013440 <bearing>
 8013aa2:	ed87 0a01 	vstr	s0, [r7, #4]
	//	algoGalgo(yaw, brng); // target_yaw wyliczane z pozycji anteny;
		algoGalgo(yaw, target_yaw); //statyczny target_yaw
 8013aa6:	4b16      	ldr	r3, [pc, #88]	; (8013b00 <loop+0x1b0>)
 8013aa8:	edd3 7a00 	vldr	s15, [r3]
 8013aac:	4b0e      	ldr	r3, [pc, #56]	; (8013ae8 <loop+0x198>)
 8013aae:	ed93 7a00 	vldr	s14, [r3]
 8013ab2:	eef0 0a47 	vmov.f32	s1, s14
 8013ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8013aba:	f7ff fb79 	bl	80131b0 <algoGalgo>
		//print_float(yaw); println("");
		lastMotUpdate = millis();
 8013abe:	f7fe fce9 	bl	8012494 <millis>
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	4b0a      	ldr	r3, [pc, #40]	; (8013af0 <loop+0x1a0>)
 8013ac6:	601a      	str	r2, [r3, #0]
	}
}
 8013ac8:	bf00      	nop
 8013aca:	370c      	adds	r7, #12
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd90      	pop	{r4, r7, pc}
 8013ad0:	96969697 	.word	0x96969697
 8013ad4:	3ff69696 	.word	0x3ff69696
 8013ad8:	20006738 	.word	0x20006738
 8013adc:	0801be28 	.word	0x0801be28
 8013ae0:	20002c74 	.word	0x20002c74
 8013ae4:	20002db8 	.word	0x20002db8
 8013ae8:	20006728 	.word	0x20006728
 8013aec:	40000400 	.word	0x40000400
 8013af0:	20006720 	.word	0x20006720
 8013af4:	20002ebc 	.word	0x20002ebc
 8013af8:	20006730 	.word	0x20006730
 8013afc:	20006734 	.word	0x20006734
 8013b00:	200031c8 	.word	0x200031c8

08013b04 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b082      	sub	sp, #8
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, gps.uartBuffer, 1);
 8013b0c:	2201      	movs	r2, #1
 8013b0e:	4905      	ldr	r1, [pc, #20]	; (8013b24 <HAL_UART_RxCpltCallback+0x20>)
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f7f7 fed9 	bl	800b8c8 <HAL_UART_Receive_IT>
	GPS_read(&gps);
 8013b16:	4804      	ldr	r0, [pc, #16]	; (8013b28 <HAL_UART_RxCpltCallback+0x24>)
 8013b18:	f7ee fd90 	bl	800263c <GPS_read>
}
 8013b1c:	bf00      	nop
 8013b1e:	3708      	adds	r7, #8
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}
 8013b24:	200030da 	.word	0x200030da
 8013b28:	20002ebc 	.word	0x20002ebc

08013b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013b30:	f7f1 fa5a 	bl	8004fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8013b34:	f000 f862 	bl	8013bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8013b38:	f000 fb30 	bl	801419c <MX_GPIO_Init>
  MX_DMA_Init();
 8013b3c:	f000 fb06 	bl	801414c <MX_DMA_Init>
  MX_I2C1_Init();
 8013b40:	f000 f8de 	bl	8013d00 <MX_I2C1_Init>
  MX_RTC_Init();
 8013b44:	f000 f90a 	bl	8013d5c <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8013b48:	f000 f92e 	bl	8013da8 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8013b4c:	f000 f94c 	bl	8013de8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8013b50:	f000 f980 	bl	8013e54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8013b54:	f000 f9cc 	bl	8013ef0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8013b58:	f000 fa4c 	bl	8013ff4 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8013b5c:	f000 facc 	bl	80140f8 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8013b60:	f7fe fbb8 	bl	80122d4 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8013b64:	f001 f9ee 	bl	8014f44 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	// Start millisecond timer
	HAL_TIM_Base_Start(&htim2);
 8013b68:	4820      	ldr	r0, [pc, #128]	; (8013bec <main+0xc0>)
 8013b6a:	f7f7 f806 	bl	800ab7a <HAL_TIM_Base_Start>

	// Setup pins
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8013b6e:	2200      	movs	r2, #0
 8013b70:	2180      	movs	r1, #128	; 0x80
 8013b72:	481f      	ldr	r0, [pc, #124]	; (8013bf0 <main+0xc4>)
 8013b74:	f7f2 f928 	bl	8005dc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8013b78:	2200      	movs	r2, #0
 8013b7a:	2140      	movs	r1, #64	; 0x40
 8013b7c:	481c      	ldr	r0, [pc, #112]	; (8013bf0 <main+0xc4>)
 8013b7e:	f7f2 f923 	bl	8005dc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8013b82:	2200      	movs	r2, #0
 8013b84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013b88:	481a      	ldr	r0, [pc, #104]	; (8013bf4 <main+0xc8>)
 8013b8a:	f7f2 f91d 	bl	8005dc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8013b8e:	2200      	movs	r2, #0
 8013b90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013b94:	4817      	ldr	r0, [pc, #92]	; (8013bf4 <main+0xc8>)
 8013b96:	f7f2 f917 	bl	8005dc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	2101      	movs	r1, #1
 8013b9e:	4816      	ldr	r0, [pc, #88]	; (8013bf8 <main+0xcc>)
 8013ba0:	f7f2 f912 	bl	8005dc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	2104      	movs	r1, #4
 8013ba8:	4813      	ldr	r0, [pc, #76]	; (8013bf8 <main+0xcc>)
 8013baa:	f7f2 f90d 	bl	8005dc8 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, GPIO_PIN_RESET);
 8013bae:	2200      	movs	r2, #0
 8013bb0:	2101      	movs	r1, #1
 8013bb2:	480f      	ldr	r0, [pc, #60]	; (8013bf0 <main+0xc4>)
 8013bb4:	f7f2 f908 	bl	8005dc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, GPIO_PIN_RESET);
 8013bb8:	2200      	movs	r2, #0
 8013bba:	2104      	movs	r1, #4
 8013bbc:	480c      	ldr	r0, [pc, #48]	; (8013bf0 <main+0xc4>)
 8013bbe:	f7f2 f903 	bl	8005dc8 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P3_GPIO_Port, P3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P4_GPIO_Port, P4_Pin, GPIO_PIN_RESET);
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	2102      	movs	r1, #2
 8013bc6:	480a      	ldr	r0, [pc, #40]	; (8013bf0 <main+0xc4>)
 8013bc8:	f7f2 f8fe 	bl	8005dc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P5_GPIO_Port, P5_Pin, GPIO_PIN_SET);
 8013bcc:	2201      	movs	r2, #1
 8013bce:	2108      	movs	r1, #8
 8013bd0:	4807      	ldr	r0, [pc, #28]	; (8013bf0 <main+0xc4>)
 8013bd2:	f7f2 f8f9 	bl	8005dc8 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P6_GPIO_Port, P6_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	2110      	movs	r1, #16
 8013bda:	4807      	ldr	r0, [pc, #28]	; (8013bf8 <main+0xcc>)
 8013bdc:	f7f2 f8f4 	bl	8005dc8 <HAL_GPIO_WritePin>

	// Execute code
	setup();
 8013be0:	f7ff fd88 	bl	80136f4 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Execute code
	  	loop();
 8013be4:	f7ff feb4 	bl	8013950 <loop>
 8013be8:	e7fc      	b.n	8013be4 <main+0xb8>
 8013bea:	bf00      	nop
 8013bec:	20008a7c 	.word	0x20008a7c
 8013bf0:	40020800 	.word	0x40020800
 8013bf4:	40020400 	.word	0x40020400
 8013bf8:	40020000 	.word	0x40020000

08013bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b098      	sub	sp, #96	; 0x60
 8013c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8013c02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013c06:	2230      	movs	r2, #48	; 0x30
 8013c08:	2100      	movs	r1, #0
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f001 ff3d 	bl	8015a8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013c10:	f107 031c 	add.w	r3, r7, #28
 8013c14:	2200      	movs	r2, #0
 8013c16:	601a      	str	r2, [r3, #0]
 8013c18:	605a      	str	r2, [r3, #4]
 8013c1a:	609a      	str	r2, [r3, #8]
 8013c1c:	60da      	str	r2, [r3, #12]
 8013c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013c20:	f107 030c 	add.w	r3, r7, #12
 8013c24:	2200      	movs	r2, #0
 8013c26:	601a      	str	r2, [r3, #0]
 8013c28:	605a      	str	r2, [r3, #4]
 8013c2a:	609a      	str	r2, [r3, #8]
 8013c2c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8013c2e:	2300      	movs	r3, #0
 8013c30:	60bb      	str	r3, [r7, #8]
 8013c32:	4b31      	ldr	r3, [pc, #196]	; (8013cf8 <SystemClock_Config+0xfc>)
 8013c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c36:	4a30      	ldr	r2, [pc, #192]	; (8013cf8 <SystemClock_Config+0xfc>)
 8013c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8013c3e:	4b2e      	ldr	r3, [pc, #184]	; (8013cf8 <SystemClock_Config+0xfc>)
 8013c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013c46:	60bb      	str	r3, [r7, #8]
 8013c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	607b      	str	r3, [r7, #4]
 8013c4e:	4b2b      	ldr	r3, [pc, #172]	; (8013cfc <SystemClock_Config+0x100>)
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	4a2a      	ldr	r2, [pc, #168]	; (8013cfc <SystemClock_Config+0x100>)
 8013c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013c58:	6013      	str	r3, [r2, #0]
 8013c5a:	4b28      	ldr	r3, [pc, #160]	; (8013cfc <SystemClock_Config+0x100>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013c62:	607b      	str	r3, [r7, #4]
 8013c64:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8013c66:	2305      	movs	r3, #5
 8013c68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8013c6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013c6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8013c70:	2301      	movs	r3, #1
 8013c72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013c74:	2302      	movs	r3, #2
 8013c76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8013c78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8013c7e:	2306      	movs	r3, #6
 8013c80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8013c82:	23a8      	movs	r3, #168	; 0xa8
 8013c84:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013c86:	2302      	movs	r3, #2
 8013c88:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8013c8a:	2307      	movs	r3, #7
 8013c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013c8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7f4 f9d6 	bl	8008044 <HAL_RCC_OscConfig>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d001      	beq.n	8013ca2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8013c9e:	f000 fb97 	bl	80143d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013ca2:	230f      	movs	r3, #15
 8013ca4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013ca6:	2302      	movs	r3, #2
 8013ca8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013caa:	2300      	movs	r3, #0
 8013cac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8013cae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013cb8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8013cba:	f107 031c 	add.w	r3, r7, #28
 8013cbe:	2105      	movs	r1, #5
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f7f4 fc01 	bl	80084c8 <HAL_RCC_ClockConfig>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d001      	beq.n	8013cd0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8013ccc:	f000 fb80 	bl	80143d0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8013cd0:	2302      	movs	r3, #2
 8013cd2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8013cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013cd8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013cda:	f107 030c 	add.w	r3, r7, #12
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f7f4 fdba 	bl	8008858 <HAL_RCCEx_PeriphCLKConfig>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d001      	beq.n	8013cee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8013cea:	f000 fb71 	bl	80143d0 <Error_Handler>
  }
}
 8013cee:	bf00      	nop
 8013cf0:	3760      	adds	r7, #96	; 0x60
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd80      	pop	{r7, pc}
 8013cf6:	bf00      	nop
 8013cf8:	40023800 	.word	0x40023800
 8013cfc:	40007000 	.word	0x40007000

08013d00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8013d04:	4b12      	ldr	r3, [pc, #72]	; (8013d50 <MX_I2C1_Init+0x50>)
 8013d06:	4a13      	ldr	r2, [pc, #76]	; (8013d54 <MX_I2C1_Init+0x54>)
 8013d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8013d0a:	4b11      	ldr	r3, [pc, #68]	; (8013d50 <MX_I2C1_Init+0x50>)
 8013d0c:	4a12      	ldr	r2, [pc, #72]	; (8013d58 <MX_I2C1_Init+0x58>)
 8013d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8013d10:	4b0f      	ldr	r3, [pc, #60]	; (8013d50 <MX_I2C1_Init+0x50>)
 8013d12:	2200      	movs	r2, #0
 8013d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8013d16:	4b0e      	ldr	r3, [pc, #56]	; (8013d50 <MX_I2C1_Init+0x50>)
 8013d18:	2200      	movs	r2, #0
 8013d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013d1c:	4b0c      	ldr	r3, [pc, #48]	; (8013d50 <MX_I2C1_Init+0x50>)
 8013d1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8013d22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013d24:	4b0a      	ldr	r3, [pc, #40]	; (8013d50 <MX_I2C1_Init+0x50>)
 8013d26:	2200      	movs	r2, #0
 8013d28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8013d2a:	4b09      	ldr	r3, [pc, #36]	; (8013d50 <MX_I2C1_Init+0x50>)
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013d30:	4b07      	ldr	r3, [pc, #28]	; (8013d50 <MX_I2C1_Init+0x50>)
 8013d32:	2200      	movs	r2, #0
 8013d34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013d36:	4b06      	ldr	r3, [pc, #24]	; (8013d50 <MX_I2C1_Init+0x50>)
 8013d38:	2200      	movs	r2, #0
 8013d3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8013d3c:	4804      	ldr	r0, [pc, #16]	; (8013d50 <MX_I2C1_Init+0x50>)
 8013d3e:	f7f2 f877 	bl	8005e30 <HAL_I2C_Init>
 8013d42:	4603      	mov	r3, r0
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d001      	beq.n	8013d4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8013d48:	f000 fb42 	bl	80143d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8013d4c:	bf00      	nop
 8013d4e:	bd80      	pop	{r7, pc}
 8013d50:	2000884c 	.word	0x2000884c
 8013d54:	40005400 	.word	0x40005400
 8013d58:	00061a80 	.word	0x00061a80

08013d5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8013d60:	4b0f      	ldr	r3, [pc, #60]	; (8013da0 <MX_RTC_Init+0x44>)
 8013d62:	4a10      	ldr	r2, [pc, #64]	; (8013da4 <MX_RTC_Init+0x48>)
 8013d64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8013d66:	4b0e      	ldr	r3, [pc, #56]	; (8013da0 <MX_RTC_Init+0x44>)
 8013d68:	2200      	movs	r2, #0
 8013d6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8013d6c:	4b0c      	ldr	r3, [pc, #48]	; (8013da0 <MX_RTC_Init+0x44>)
 8013d6e:	227f      	movs	r2, #127	; 0x7f
 8013d70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8013d72:	4b0b      	ldr	r3, [pc, #44]	; (8013da0 <MX_RTC_Init+0x44>)
 8013d74:	22ff      	movs	r2, #255	; 0xff
 8013d76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8013d78:	4b09      	ldr	r3, [pc, #36]	; (8013da0 <MX_RTC_Init+0x44>)
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8013d7e:	4b08      	ldr	r3, [pc, #32]	; (8013da0 <MX_RTC_Init+0x44>)
 8013d80:	2200      	movs	r2, #0
 8013d82:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8013d84:	4b06      	ldr	r3, [pc, #24]	; (8013da0 <MX_RTC_Init+0x44>)
 8013d86:	2200      	movs	r2, #0
 8013d88:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8013d8a:	4805      	ldr	r0, [pc, #20]	; (8013da0 <MX_RTC_Init+0x44>)
 8013d8c:	f7f4 fe46 	bl	8008a1c <HAL_RTC_Init>
 8013d90:	4603      	mov	r3, r0
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d001      	beq.n	8013d9a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8013d96:	f000 fb1b 	bl	80143d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8013d9a:	bf00      	nop
 8013d9c:	bd80      	pop	{r7, pc}
 8013d9e:	bf00      	nop
 8013da0:	20008920 	.word	0x20008920
 8013da4:	40002800 	.word	0x40002800

08013da8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8013da8:	b480      	push	{r7}
 8013daa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8013dac:	4b0c      	ldr	r3, [pc, #48]	; (8013de0 <MX_SDIO_SD_Init+0x38>)
 8013dae:	4a0d      	ldr	r2, [pc, #52]	; (8013de4 <MX_SDIO_SD_Init+0x3c>)
 8013db0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8013db2:	4b0b      	ldr	r3, [pc, #44]	; (8013de0 <MX_SDIO_SD_Init+0x38>)
 8013db4:	2200      	movs	r2, #0
 8013db6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8013db8:	4b09      	ldr	r3, [pc, #36]	; (8013de0 <MX_SDIO_SD_Init+0x38>)
 8013dba:	2200      	movs	r2, #0
 8013dbc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8013dbe:	4b08      	ldr	r3, [pc, #32]	; (8013de0 <MX_SDIO_SD_Init+0x38>)
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8013dc4:	4b06      	ldr	r3, [pc, #24]	; (8013de0 <MX_SDIO_SD_Init+0x38>)
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8013dca:	4b05      	ldr	r3, [pc, #20]	; (8013de0 <MX_SDIO_SD_Init+0x38>)
 8013dcc:	2200      	movs	r2, #0
 8013dce:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8013dd0:	4b03      	ldr	r3, [pc, #12]	; (8013de0 <MX_SDIO_SD_Init+0x38>)
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8013dd6:	bf00      	nop
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dde:	4770      	bx	lr
 8013de0:	200089a0 	.word	0x200089a0
 8013de4:	40012c00 	.word	0x40012c00

08013de8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8013dec:	4b17      	ldr	r3, [pc, #92]	; (8013e4c <MX_SPI1_Init+0x64>)
 8013dee:	4a18      	ldr	r2, [pc, #96]	; (8013e50 <MX_SPI1_Init+0x68>)
 8013df0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8013df2:	4b16      	ldr	r3, [pc, #88]	; (8013e4c <MX_SPI1_Init+0x64>)
 8013df4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8013df8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8013dfa:	4b14      	ldr	r3, [pc, #80]	; (8013e4c <MX_SPI1_Init+0x64>)
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8013e00:	4b12      	ldr	r3, [pc, #72]	; (8013e4c <MX_SPI1_Init+0x64>)
 8013e02:	2200      	movs	r2, #0
 8013e04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8013e06:	4b11      	ldr	r3, [pc, #68]	; (8013e4c <MX_SPI1_Init+0x64>)
 8013e08:	2200      	movs	r2, #0
 8013e0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8013e0c:	4b0f      	ldr	r3, [pc, #60]	; (8013e4c <MX_SPI1_Init+0x64>)
 8013e0e:	2200      	movs	r2, #0
 8013e10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8013e12:	4b0e      	ldr	r3, [pc, #56]	; (8013e4c <MX_SPI1_Init+0x64>)
 8013e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013e18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8013e1a:	4b0c      	ldr	r3, [pc, #48]	; (8013e4c <MX_SPI1_Init+0x64>)
 8013e1c:	2218      	movs	r2, #24
 8013e1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8013e20:	4b0a      	ldr	r3, [pc, #40]	; (8013e4c <MX_SPI1_Init+0x64>)
 8013e22:	2200      	movs	r2, #0
 8013e24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8013e26:	4b09      	ldr	r3, [pc, #36]	; (8013e4c <MX_SPI1_Init+0x64>)
 8013e28:	2200      	movs	r2, #0
 8013e2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013e2c:	4b07      	ldr	r3, [pc, #28]	; (8013e4c <MX_SPI1_Init+0x64>)
 8013e2e:	2200      	movs	r2, #0
 8013e30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8013e32:	4b06      	ldr	r3, [pc, #24]	; (8013e4c <MX_SPI1_Init+0x64>)
 8013e34:	220a      	movs	r2, #10
 8013e36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8013e38:	4804      	ldr	r0, [pc, #16]	; (8013e4c <MX_SPI1_Init+0x64>)
 8013e3a:	f7f6 fa7e 	bl	800a33a <HAL_SPI_Init>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d001      	beq.n	8013e48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8013e44:	f000 fac4 	bl	80143d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8013e48:	bf00      	nop
 8013e4a:	bd80      	pop	{r7, pc}
 8013e4c:	20008a24 	.word	0x20008a24
 8013e50:	40013000 	.word	0x40013000

08013e54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b086      	sub	sp, #24
 8013e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013e5a:	f107 0308 	add.w	r3, r7, #8
 8013e5e:	2200      	movs	r2, #0
 8013e60:	601a      	str	r2, [r3, #0]
 8013e62:	605a      	str	r2, [r3, #4]
 8013e64:	609a      	str	r2, [r3, #8]
 8013e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013e68:	463b      	mov	r3, r7
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	601a      	str	r2, [r3, #0]
 8013e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8013e70:	4b1d      	ldr	r3, [pc, #116]	; (8013ee8 <MX_TIM2_Init+0x94>)
 8013e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013e76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8013e78:	4b1b      	ldr	r3, [pc, #108]	; (8013ee8 <MX_TIM2_Init+0x94>)
 8013e7a:	2253      	movs	r2, #83	; 0x53
 8013e7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013e7e:	4b1a      	ldr	r3, [pc, #104]	; (8013ee8 <MX_TIM2_Init+0x94>)
 8013e80:	2200      	movs	r2, #0
 8013e82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 8013e84:	4b18      	ldr	r3, [pc, #96]	; (8013ee8 <MX_TIM2_Init+0x94>)
 8013e86:	4a19      	ldr	r2, [pc, #100]	; (8013eec <MX_TIM2_Init+0x98>)
 8013e88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013e8a:	4b17      	ldr	r3, [pc, #92]	; (8013ee8 <MX_TIM2_Init+0x94>)
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013e90:	4b15      	ldr	r3, [pc, #84]	; (8013ee8 <MX_TIM2_Init+0x94>)
 8013e92:	2200      	movs	r2, #0
 8013e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8013e96:	4814      	ldr	r0, [pc, #80]	; (8013ee8 <MX_TIM2_Init+0x94>)
 8013e98:	f7f6 fe44 	bl	800ab24 <HAL_TIM_Base_Init>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d001      	beq.n	8013ea6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8013ea2:	f000 fa95 	bl	80143d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013eaa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8013eac:	f107 0308 	add.w	r3, r7, #8
 8013eb0:	4619      	mov	r1, r3
 8013eb2:	480d      	ldr	r0, [pc, #52]	; (8013ee8 <MX_TIM2_Init+0x94>)
 8013eb4:	f7f7 f816 	bl	800aee4 <HAL_TIM_ConfigClockSource>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d001      	beq.n	8013ec2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8013ebe:	f000 fa87 	bl	80143d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8013eca:	463b      	mov	r3, r7
 8013ecc:	4619      	mov	r1, r3
 8013ece:	4806      	ldr	r0, [pc, #24]	; (8013ee8 <MX_TIM2_Init+0x94>)
 8013ed0:	f7f7 fbcf 	bl	800b672 <HAL_TIMEx_MasterConfigSynchronization>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d001      	beq.n	8013ede <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8013eda:	f000 fa79 	bl	80143d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8013ede:	bf00      	nop
 8013ee0:	3718      	adds	r7, #24
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}
 8013ee6:	bf00      	nop
 8013ee8:	20008a7c 	.word	0x20008a7c
 8013eec:	fa56ea00 	.word	0xfa56ea00

08013ef0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b08e      	sub	sp, #56	; 0x38
 8013ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013efa:	2200      	movs	r2, #0
 8013efc:	601a      	str	r2, [r3, #0]
 8013efe:	605a      	str	r2, [r3, #4]
 8013f00:	609a      	str	r2, [r3, #8]
 8013f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013f04:	f107 0320 	add.w	r3, r7, #32
 8013f08:	2200      	movs	r2, #0
 8013f0a:	601a      	str	r2, [r3, #0]
 8013f0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013f0e:	1d3b      	adds	r3, r7, #4
 8013f10:	2200      	movs	r2, #0
 8013f12:	601a      	str	r2, [r3, #0]
 8013f14:	605a      	str	r2, [r3, #4]
 8013f16:	609a      	str	r2, [r3, #8]
 8013f18:	60da      	str	r2, [r3, #12]
 8013f1a:	611a      	str	r2, [r3, #16]
 8013f1c:	615a      	str	r2, [r3, #20]
 8013f1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8013f20:	4b32      	ldr	r3, [pc, #200]	; (8013fec <MX_TIM3_Init+0xfc>)
 8013f22:	4a33      	ldr	r2, [pc, #204]	; (8013ff0 <MX_TIM3_Init+0x100>)
 8013f24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8013f26:	4b31      	ldr	r3, [pc, #196]	; (8013fec <MX_TIM3_Init+0xfc>)
 8013f28:	22a7      	movs	r2, #167	; 0xa7
 8013f2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013f2c:	4b2f      	ldr	r3, [pc, #188]	; (8013fec <MX_TIM3_Init+0xfc>)
 8013f2e:	2200      	movs	r2, #0
 8013f30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8013f32:	4b2e      	ldr	r3, [pc, #184]	; (8013fec <MX_TIM3_Init+0xfc>)
 8013f34:	f242 7210 	movw	r2, #10000	; 0x2710
 8013f38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013f3a:	4b2c      	ldr	r3, [pc, #176]	; (8013fec <MX_TIM3_Init+0xfc>)
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013f40:	4b2a      	ldr	r3, [pc, #168]	; (8013fec <MX_TIM3_Init+0xfc>)
 8013f42:	2200      	movs	r2, #0
 8013f44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8013f46:	4829      	ldr	r0, [pc, #164]	; (8013fec <MX_TIM3_Init+0xfc>)
 8013f48:	f7f6 fdec 	bl	800ab24 <HAL_TIM_Base_Init>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d001      	beq.n	8013f56 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8013f52:	f000 fa3d 	bl	80143d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8013f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013f60:	4619      	mov	r1, r3
 8013f62:	4822      	ldr	r0, [pc, #136]	; (8013fec <MX_TIM3_Init+0xfc>)
 8013f64:	f7f6 ffbe 	bl	800aee4 <HAL_TIM_ConfigClockSource>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d001      	beq.n	8013f72 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8013f6e:	f000 fa2f 	bl	80143d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8013f72:	481e      	ldr	r0, [pc, #120]	; (8013fec <MX_TIM3_Init+0xfc>)
 8013f74:	f7f6 fe25 	bl	800abc2 <HAL_TIM_PWM_Init>
 8013f78:	4603      	mov	r3, r0
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d001      	beq.n	8013f82 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8013f7e:	f000 fa27 	bl	80143d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013f82:	2300      	movs	r3, #0
 8013f84:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013f86:	2300      	movs	r3, #0
 8013f88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8013f8a:	f107 0320 	add.w	r3, r7, #32
 8013f8e:	4619      	mov	r1, r3
 8013f90:	4816      	ldr	r0, [pc, #88]	; (8013fec <MX_TIM3_Init+0xfc>)
 8013f92:	f7f7 fb6e 	bl	800b672 <HAL_TIMEx_MasterConfigSynchronization>
 8013f96:	4603      	mov	r3, r0
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d001      	beq.n	8013fa0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8013f9c:	f000 fa18 	bl	80143d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013fa0:	2360      	movs	r3, #96	; 0x60
 8013fa2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8013fa4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013fa8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013faa:	2300      	movs	r3, #0
 8013fac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013fae:	2300      	movs	r3, #0
 8013fb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013fb2:	1d3b      	adds	r3, r7, #4
 8013fb4:	2208      	movs	r2, #8
 8013fb6:	4619      	mov	r1, r3
 8013fb8:	480c      	ldr	r0, [pc, #48]	; (8013fec <MX_TIM3_Init+0xfc>)
 8013fba:	f7f6 fecd 	bl	800ad58 <HAL_TIM_PWM_ConfigChannel>
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d001      	beq.n	8013fc8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8013fc4:	f000 fa04 	bl	80143d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8013fc8:	1d3b      	adds	r3, r7, #4
 8013fca:	220c      	movs	r2, #12
 8013fcc:	4619      	mov	r1, r3
 8013fce:	4807      	ldr	r0, [pc, #28]	; (8013fec <MX_TIM3_Init+0xfc>)
 8013fd0:	f7f6 fec2 	bl	800ad58 <HAL_TIM_PWM_ConfigChannel>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d001      	beq.n	8013fde <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8013fda:	f000 f9f9 	bl	80143d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8013fde:	4803      	ldr	r0, [pc, #12]	; (8013fec <MX_TIM3_Init+0xfc>)
 8013fe0:	f000 fe3c 	bl	8014c5c <HAL_TIM_MspPostInit>

}
 8013fe4:	bf00      	nop
 8013fe6:	3738      	adds	r7, #56	; 0x38
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	bd80      	pop	{r7, pc}
 8013fec:	200088e0 	.word	0x200088e0
 8013ff0:	40000400 	.word	0x40000400

08013ff4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b08e      	sub	sp, #56	; 0x38
 8013ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013ffe:	2200      	movs	r2, #0
 8014000:	601a      	str	r2, [r3, #0]
 8014002:	605a      	str	r2, [r3, #4]
 8014004:	609a      	str	r2, [r3, #8]
 8014006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8014008:	f107 0320 	add.w	r3, r7, #32
 801400c:	2200      	movs	r2, #0
 801400e:	601a      	str	r2, [r3, #0]
 8014010:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8014012:	1d3b      	adds	r3, r7, #4
 8014014:	2200      	movs	r2, #0
 8014016:	601a      	str	r2, [r3, #0]
 8014018:	605a      	str	r2, [r3, #4]
 801401a:	609a      	str	r2, [r3, #8]
 801401c:	60da      	str	r2, [r3, #12]
 801401e:	611a      	str	r2, [r3, #16]
 8014020:	615a      	str	r2, [r3, #20]
 8014022:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8014024:	4b32      	ldr	r3, [pc, #200]	; (80140f0 <MX_TIM5_Init+0xfc>)
 8014026:	4a33      	ldr	r2, [pc, #204]	; (80140f4 <MX_TIM5_Init+0x100>)
 8014028:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 801402a:	4b31      	ldr	r3, [pc, #196]	; (80140f0 <MX_TIM5_Init+0xfc>)
 801402c:	2200      	movs	r2, #0
 801402e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8014030:	4b2f      	ldr	r3, [pc, #188]	; (80140f0 <MX_TIM5_Init+0xfc>)
 8014032:	2240      	movs	r2, #64	; 0x40
 8014034:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8014036:	4b2e      	ldr	r3, [pc, #184]	; (80140f0 <MX_TIM5_Init+0xfc>)
 8014038:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801403c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801403e:	4b2c      	ldr	r3, [pc, #176]	; (80140f0 <MX_TIM5_Init+0xfc>)
 8014040:	2200      	movs	r2, #0
 8014042:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8014044:	4b2a      	ldr	r3, [pc, #168]	; (80140f0 <MX_TIM5_Init+0xfc>)
 8014046:	2200      	movs	r2, #0
 8014048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 801404a:	4829      	ldr	r0, [pc, #164]	; (80140f0 <MX_TIM5_Init+0xfc>)
 801404c:	f7f6 fd6a 	bl	800ab24 <HAL_TIM_Base_Init>
 8014050:	4603      	mov	r3, r0
 8014052:	2b00      	cmp	r3, #0
 8014054:	d001      	beq.n	801405a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8014056:	f000 f9bb 	bl	80143d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801405a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801405e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8014060:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014064:	4619      	mov	r1, r3
 8014066:	4822      	ldr	r0, [pc, #136]	; (80140f0 <MX_TIM5_Init+0xfc>)
 8014068:	f7f6 ff3c 	bl	800aee4 <HAL_TIM_ConfigClockSource>
 801406c:	4603      	mov	r3, r0
 801406e:	2b00      	cmp	r3, #0
 8014070:	d001      	beq.n	8014076 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8014072:	f000 f9ad 	bl	80143d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8014076:	481e      	ldr	r0, [pc, #120]	; (80140f0 <MX_TIM5_Init+0xfc>)
 8014078:	f7f6 fda3 	bl	800abc2 <HAL_TIM_PWM_Init>
 801407c:	4603      	mov	r3, r0
 801407e:	2b00      	cmp	r3, #0
 8014080:	d001      	beq.n	8014086 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8014082:	f000 f9a5 	bl	80143d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8014086:	2300      	movs	r3, #0
 8014088:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801408a:	2300      	movs	r3, #0
 801408c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801408e:	f107 0320 	add.w	r3, r7, #32
 8014092:	4619      	mov	r1, r3
 8014094:	4816      	ldr	r0, [pc, #88]	; (80140f0 <MX_TIM5_Init+0xfc>)
 8014096:	f7f7 faec 	bl	800b672 <HAL_TIMEx_MasterConfigSynchronization>
 801409a:	4603      	mov	r3, r0
 801409c:	2b00      	cmp	r3, #0
 801409e:	d001      	beq.n	80140a4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80140a0:	f000 f996 	bl	80143d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80140a4:	2370      	movs	r3, #112	; 0x70
 80140a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80140a8:	2364      	movs	r3, #100	; 0x64
 80140aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80140ac:	2300      	movs	r3, #0
 80140ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80140b0:	2300      	movs	r3, #0
 80140b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80140b4:	1d3b      	adds	r3, r7, #4
 80140b6:	2204      	movs	r2, #4
 80140b8:	4619      	mov	r1, r3
 80140ba:	480d      	ldr	r0, [pc, #52]	; (80140f0 <MX_TIM5_Init+0xfc>)
 80140bc:	f7f6 fe4c 	bl	800ad58 <HAL_TIM_PWM_ConfigChannel>
 80140c0:	4603      	mov	r3, r0
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d001      	beq.n	80140ca <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80140c6:	f000 f983 	bl	80143d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80140ca:	1d3b      	adds	r3, r7, #4
 80140cc:	220c      	movs	r2, #12
 80140ce:	4619      	mov	r1, r3
 80140d0:	4807      	ldr	r0, [pc, #28]	; (80140f0 <MX_TIM5_Init+0xfc>)
 80140d2:	f7f6 fe41 	bl	800ad58 <HAL_TIM_PWM_ConfigChannel>
 80140d6:	4603      	mov	r3, r0
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d001      	beq.n	80140e0 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 80140dc:	f000 f978 	bl	80143d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80140e0:	4803      	ldr	r0, [pc, #12]	; (80140f0 <MX_TIM5_Init+0xfc>)
 80140e2:	f000 fdbb 	bl	8014c5c <HAL_TIM_MspPostInit>

}
 80140e6:	bf00      	nop
 80140e8:	3738      	adds	r7, #56	; 0x38
 80140ea:	46bd      	mov	sp, r7
 80140ec:	bd80      	pop	{r7, pc}
 80140ee:	bf00      	nop
 80140f0:	200088a0 	.word	0x200088a0
 80140f4:	40000c00 	.word	0x40000c00

080140f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80140fc:	4b11      	ldr	r3, [pc, #68]	; (8014144 <MX_USART3_UART_Init+0x4c>)
 80140fe:	4a12      	ldr	r2, [pc, #72]	; (8014148 <MX_USART3_UART_Init+0x50>)
 8014100:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8014102:	4b10      	ldr	r3, [pc, #64]	; (8014144 <MX_USART3_UART_Init+0x4c>)
 8014104:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8014108:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 801410a:	4b0e      	ldr	r3, [pc, #56]	; (8014144 <MX_USART3_UART_Init+0x4c>)
 801410c:	2200      	movs	r2, #0
 801410e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8014110:	4b0c      	ldr	r3, [pc, #48]	; (8014144 <MX_USART3_UART_Init+0x4c>)
 8014112:	2200      	movs	r2, #0
 8014114:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8014116:	4b0b      	ldr	r3, [pc, #44]	; (8014144 <MX_USART3_UART_Init+0x4c>)
 8014118:	2200      	movs	r2, #0
 801411a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 801411c:	4b09      	ldr	r3, [pc, #36]	; (8014144 <MX_USART3_UART_Init+0x4c>)
 801411e:	220c      	movs	r2, #12
 8014120:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014122:	4b08      	ldr	r3, [pc, #32]	; (8014144 <MX_USART3_UART_Init+0x4c>)
 8014124:	2200      	movs	r2, #0
 8014126:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8014128:	4b06      	ldr	r3, [pc, #24]	; (8014144 <MX_USART3_UART_Init+0x4c>)
 801412a:	2200      	movs	r2, #0
 801412c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 801412e:	4805      	ldr	r0, [pc, #20]	; (8014144 <MX_USART3_UART_Init+0x4c>)
 8014130:	f7f7 fae4 	bl	800b6fc <HAL_UART_Init>
 8014134:	4603      	mov	r3, r0
 8014136:	2b00      	cmp	r3, #0
 8014138:	d001      	beq.n	801413e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 801413a:	f000 f949 	bl	80143d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 801413e:	bf00      	nop
 8014140:	bd80      	pop	{r7, pc}
 8014142:	bf00      	nop
 8014144:	2000880c 	.word	0x2000880c
 8014148:	40004800 	.word	0x40004800

0801414c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b082      	sub	sp, #8
 8014150:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8014152:	2300      	movs	r3, #0
 8014154:	607b      	str	r3, [r7, #4]
 8014156:	4b10      	ldr	r3, [pc, #64]	; (8014198 <MX_DMA_Init+0x4c>)
 8014158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801415a:	4a0f      	ldr	r2, [pc, #60]	; (8014198 <MX_DMA_Init+0x4c>)
 801415c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8014160:	6313      	str	r3, [r2, #48]	; 0x30
 8014162:	4b0d      	ldr	r3, [pc, #52]	; (8014198 <MX_DMA_Init+0x4c>)
 8014164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801416a:	607b      	str	r3, [r7, #4]
 801416c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 801416e:	2200      	movs	r2, #0
 8014170:	2100      	movs	r1, #0
 8014172:	203b      	movs	r0, #59	; 0x3b
 8014174:	f7f1 f8a7 	bl	80052c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8014178:	203b      	movs	r0, #59	; 0x3b
 801417a:	f7f1 f8c0 	bl	80052fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 801417e:	2200      	movs	r2, #0
 8014180:	2100      	movs	r1, #0
 8014182:	2045      	movs	r0, #69	; 0x45
 8014184:	f7f1 f89f 	bl	80052c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8014188:	2045      	movs	r0, #69	; 0x45
 801418a:	f7f1 f8b8 	bl	80052fe <HAL_NVIC_EnableIRQ>

}
 801418e:	bf00      	nop
 8014190:	3708      	adds	r7, #8
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}
 8014196:	bf00      	nop
 8014198:	40023800 	.word	0x40023800

0801419c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b08a      	sub	sp, #40	; 0x28
 80141a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80141a2:	f107 0314 	add.w	r3, r7, #20
 80141a6:	2200      	movs	r2, #0
 80141a8:	601a      	str	r2, [r3, #0]
 80141aa:	605a      	str	r2, [r3, #4]
 80141ac:	609a      	str	r2, [r3, #8]
 80141ae:	60da      	str	r2, [r3, #12]
 80141b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80141b2:	2300      	movs	r3, #0
 80141b4:	613b      	str	r3, [r7, #16]
 80141b6:	4b63      	ldr	r3, [pc, #396]	; (8014344 <MX_GPIO_Init+0x1a8>)
 80141b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141ba:	4a62      	ldr	r2, [pc, #392]	; (8014344 <MX_GPIO_Init+0x1a8>)
 80141bc:	f043 0304 	orr.w	r3, r3, #4
 80141c0:	6313      	str	r3, [r2, #48]	; 0x30
 80141c2:	4b60      	ldr	r3, [pc, #384]	; (8014344 <MX_GPIO_Init+0x1a8>)
 80141c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141c6:	f003 0304 	and.w	r3, r3, #4
 80141ca:	613b      	str	r3, [r7, #16]
 80141cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80141ce:	2300      	movs	r3, #0
 80141d0:	60fb      	str	r3, [r7, #12]
 80141d2:	4b5c      	ldr	r3, [pc, #368]	; (8014344 <MX_GPIO_Init+0x1a8>)
 80141d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141d6:	4a5b      	ldr	r2, [pc, #364]	; (8014344 <MX_GPIO_Init+0x1a8>)
 80141d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80141dc:	6313      	str	r3, [r2, #48]	; 0x30
 80141de:	4b59      	ldr	r3, [pc, #356]	; (8014344 <MX_GPIO_Init+0x1a8>)
 80141e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80141e6:	60fb      	str	r3, [r7, #12]
 80141e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80141ea:	2300      	movs	r3, #0
 80141ec:	60bb      	str	r3, [r7, #8]
 80141ee:	4b55      	ldr	r3, [pc, #340]	; (8014344 <MX_GPIO_Init+0x1a8>)
 80141f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141f2:	4a54      	ldr	r2, [pc, #336]	; (8014344 <MX_GPIO_Init+0x1a8>)
 80141f4:	f043 0301 	orr.w	r3, r3, #1
 80141f8:	6313      	str	r3, [r2, #48]	; 0x30
 80141fa:	4b52      	ldr	r3, [pc, #328]	; (8014344 <MX_GPIO_Init+0x1a8>)
 80141fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141fe:	f003 0301 	and.w	r3, r3, #1
 8014202:	60bb      	str	r3, [r7, #8]
 8014204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8014206:	2300      	movs	r3, #0
 8014208:	607b      	str	r3, [r7, #4]
 801420a:	4b4e      	ldr	r3, [pc, #312]	; (8014344 <MX_GPIO_Init+0x1a8>)
 801420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801420e:	4a4d      	ldr	r2, [pc, #308]	; (8014344 <MX_GPIO_Init+0x1a8>)
 8014210:	f043 0302 	orr.w	r3, r3, #2
 8014214:	6313      	str	r3, [r2, #48]	; 0x30
 8014216:	4b4b      	ldr	r3, [pc, #300]	; (8014344 <MX_GPIO_Init+0x1a8>)
 8014218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801421a:	f003 0302 	and.w	r3, r3, #2
 801421e:	607b      	str	r3, [r7, #4]
 8014220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8014222:	2300      	movs	r3, #0
 8014224:	603b      	str	r3, [r7, #0]
 8014226:	4b47      	ldr	r3, [pc, #284]	; (8014344 <MX_GPIO_Init+0x1a8>)
 8014228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801422a:	4a46      	ldr	r2, [pc, #280]	; (8014344 <MX_GPIO_Init+0x1a8>)
 801422c:	f043 0308 	orr.w	r3, r3, #8
 8014230:	6313      	str	r3, [r2, #48]	; 0x30
 8014232:	4b44      	ldr	r3, [pc, #272]	; (8014344 <MX_GPIO_Init+0x1a8>)
 8014234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014236:	f003 0308 	and.w	r3, r3, #8
 801423a:	603b      	str	r3, [r7, #0]
 801423c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 801423e:	2200      	movs	r2, #0
 8014240:	21ef      	movs	r1, #239	; 0xef
 8014242:	4841      	ldr	r0, [pc, #260]	; (8014348 <MX_GPIO_Init+0x1ac>)
 8014244:	f7f1 fdc0 	bl	8005dc8 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 8014248:	2200      	movs	r2, #0
 801424a:	2115      	movs	r1, #21
 801424c:	483f      	ldr	r0, [pc, #252]	; (801434c <MX_GPIO_Init+0x1b0>)
 801424e:	f7f1 fdbb 	bl	8005dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 8014252:	2200      	movs	r2, #0
 8014254:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 8014258:	483d      	ldr	r0, [pc, #244]	; (8014350 <MX_GPIO_Init+0x1b4>)
 801425a:	f7f1 fdb5 	bl	8005dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 801425e:	23cf      	movs	r3, #207	; 0xcf
 8014260:	617b      	str	r3, [r7, #20]
                          |LEDB_Pin|LEDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014262:	2301      	movs	r3, #1
 8014264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014266:	2300      	movs	r3, #0
 8014268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801426a:	2300      	movs	r3, #0
 801426c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801426e:	f107 0314 	add.w	r3, r7, #20
 8014272:	4619      	mov	r1, r3
 8014274:	4834      	ldr	r0, [pc, #208]	; (8014348 <MX_GPIO_Init+0x1ac>)
 8014276:	f7f1 fbf5 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin;
 801427a:	2305      	movs	r3, #5
 801427c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801427e:	2301      	movs	r3, #1
 8014280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014282:	2302      	movs	r3, #2
 8014284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014286:	2300      	movs	r3, #0
 8014288:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801428a:	f107 0314 	add.w	r3, r7, #20
 801428e:	4619      	mov	r1, r3
 8014290:	482e      	ldr	r0, [pc, #184]	; (801434c <MX_GPIO_Init+0x1b0>)
 8014292:	f7f1 fbe7 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 8014296:	2310      	movs	r3, #16
 8014298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801429a:	2301      	movs	r3, #1
 801429c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801429e:	2300      	movs	r3, #0
 80142a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80142a2:	2300      	movs	r3, #0
 80142a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 80142a6:	f107 0314 	add.w	r3, r7, #20
 80142aa:	4619      	mov	r1, r3
 80142ac:	4827      	ldr	r0, [pc, #156]	; (801434c <MX_GPIO_Init+0x1b0>)
 80142ae:	f7f1 fbd9 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_DIO0_Pin LR_TIM_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin|LR_TIM_Pin;
 80142b2:	23c0      	movs	r3, #192	; 0xc0
 80142b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80142b6:	4b27      	ldr	r3, [pc, #156]	; (8014354 <MX_GPIO_Init+0x1b8>)
 80142b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80142ba:	2300      	movs	r3, #0
 80142bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80142be:	f107 0314 	add.w	r3, r7, #20
 80142c2:	4619      	mov	r1, r3
 80142c4:	4821      	ldr	r0, [pc, #132]	; (801434c <MX_GPIO_Init+0x1b0>)
 80142c6:	f7f1 fbcd 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_RESET_Pin */
  GPIO_InitStruct.Pin = LR_RESET_Pin;
 80142ca:	2320      	movs	r3, #32
 80142cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80142ce:	2301      	movs	r3, #1
 80142d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80142d2:	2302      	movs	r3, #2
 80142d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80142d6:	2300      	movs	r3, #0
 80142d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_RESET_GPIO_Port, &GPIO_InitStruct);
 80142da:	f107 0314 	add.w	r3, r7, #20
 80142de:	4619      	mov	r1, r3
 80142e0:	4819      	ldr	r0, [pc, #100]	; (8014348 <MX_GPIO_Init+0x1ac>)
 80142e2:	f7f1 fbbf 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 80142e6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80142ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80142ec:	2301      	movs	r3, #1
 80142ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80142f0:	2300      	movs	r3, #0
 80142f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80142f4:	2300      	movs	r3, #0
 80142f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80142f8:	f107 0314 	add.w	r3, r7, #20
 80142fc:	4619      	mov	r1, r3
 80142fe:	4814      	ldr	r0, [pc, #80]	; (8014350 <MX_GPIO_Init+0x1b4>)
 8014300:	f7f1 fbb0 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_SW_Pin BTN_USR_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin|BTN_USR_Pin;
 8014304:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8014308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801430a:	2300      	movs	r3, #0
 801430c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801430e:	2301      	movs	r3, #1
 8014310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014312:	f107 0314 	add.w	r3, r7, #20
 8014316:	4619      	mov	r1, r3
 8014318:	480c      	ldr	r0, [pc, #48]	; (801434c <MX_GPIO_Init+0x1b0>)
 801431a:	f7f1 fba3 	bl	8005a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 801431e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014324:	2301      	movs	r3, #1
 8014326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014328:	2302      	movs	r3, #2
 801432a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801432c:	2300      	movs	r3, #0
 801432e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 8014330:	f107 0314 	add.w	r3, r7, #20
 8014334:	4619      	mov	r1, r3
 8014336:	4806      	ldr	r0, [pc, #24]	; (8014350 <MX_GPIO_Init+0x1b4>)
 8014338:	f7f1 fb94 	bl	8005a64 <HAL_GPIO_Init>

}
 801433c:	bf00      	nop
 801433e:	3728      	adds	r7, #40	; 0x28
 8014340:	46bd      	mov	sp, r7
 8014342:	bd80      	pop	{r7, pc}
 8014344:	40023800 	.word	0x40023800
 8014348:	40020800 	.word	0x40020800
 801434c:	40020000 	.word	0x40020000
 8014350:	40020400 	.word	0x40020400
 8014354:	10110000 	.word	0x10110000

08014358 <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
 8014358:	b480      	push	{r7}
 801435a:	af00      	add	r7, sp, #0
 801435c:	4b02      	ldr	r3, [pc, #8]	; (8014368 <Get_I2C1_Instance+0x10>)
 801435e:	4618      	mov	r0, r3
 8014360:	46bd      	mov	sp, r7
 8014362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014366:	4770      	bx	lr
 8014368:	2000884c 	.word	0x2000884c

0801436c <Get_SPI1_Instance>:
SPI_HandleTypeDef* Get_SPI1_Instance(void) { return &hspi1; }
 801436c:	b480      	push	{r7}
 801436e:	af00      	add	r7, sp, #0
 8014370:	4b02      	ldr	r3, [pc, #8]	; (801437c <Get_SPI1_Instance+0x10>)
 8014372:	4618      	mov	r0, r3
 8014374:	46bd      	mov	sp, r7
 8014376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437a:	4770      	bx	lr
 801437c:	20008a24 	.word	0x20008a24

08014380 <Get_UART3_Instance>:
UART_HandleTypeDef* Get_UART3_Instance(void) { return &huart3; }
 8014380:	b480      	push	{r7}
 8014382:	af00      	add	r7, sp, #0
 8014384:	4b02      	ldr	r3, [pc, #8]	; (8014390 <Get_UART3_Instance+0x10>)
 8014386:	4618      	mov	r0, r3
 8014388:	46bd      	mov	sp, r7
 801438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438e:	4770      	bx	lr
 8014390:	2000880c 	.word	0x2000880c

08014394 <Get_RTC_Instance>:
RTC_HandleTypeDef* Get_RTC_Instance(void) { return &hrtc; }
 8014394:	b480      	push	{r7}
 8014396:	af00      	add	r7, sp, #0
 8014398:	4b02      	ldr	r3, [pc, #8]	; (80143a4 <Get_RTC_Instance+0x10>)
 801439a:	4618      	mov	r0, r3
 801439c:	46bd      	mov	sp, r7
 801439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a2:	4770      	bx	lr
 80143a4:	20008920 	.word	0x20008920

080143a8 <Get_TIM3_Instance>:
TIM_HandleTypeDef* Get_TIM2_Instance(void) { return &htim2; }
TIM_HandleTypeDef* Get_TIM3_Instance(void) { return &htim3; }
 80143a8:	b480      	push	{r7}
 80143aa:	af00      	add	r7, sp, #0
 80143ac:	4b02      	ldr	r3, [pc, #8]	; (80143b8 <Get_TIM3_Instance+0x10>)
 80143ae:	4618      	mov	r0, r3
 80143b0:	46bd      	mov	sp, r7
 80143b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b6:	4770      	bx	lr
 80143b8:	200088e0 	.word	0x200088e0

080143bc <Get_TIM5_Instance>:
TIM_HandleTypeDef* Get_TIM5_Instance(void) { return &htim5; }
 80143bc:	b480      	push	{r7}
 80143be:	af00      	add	r7, sp, #0
 80143c0:	4b02      	ldr	r3, [pc, #8]	; (80143cc <Get_TIM5_Instance+0x10>)
 80143c2:	4618      	mov	r0, r3
 80143c4:	46bd      	mov	sp, r7
 80143c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ca:	4770      	bx	lr
 80143cc:	200088a0 	.word	0x200088a0

080143d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80143d0:	b480      	push	{r7}
 80143d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80143d4:	bf00      	nop
 80143d6:	46bd      	mov	sp, r7
 80143d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143dc:	4770      	bx	lr

080143de <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80143de:	b580      	push	{r7, lr}
 80143e0:	b084      	sub	sp, #16
 80143e2:	af00      	add	r7, sp, #0
 80143e4:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80143e6:	f7f0 fe65 	bl	80050b4 <HAL_GetTick>
 80143ea:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80143ec:	e006      	b.n	80143fc <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80143ee:	f7fd ff1b 	bl	8012228 <BSP_SD_GetCardState>
 80143f2:	4603      	mov	r3, r0
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d101      	bne.n	80143fc <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80143f8:	2300      	movs	r3, #0
 80143fa:	e009      	b.n	8014410 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80143fc:	f7f0 fe5a 	bl	80050b4 <HAL_GetTick>
 8014400:	4602      	mov	r2, r0
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	1ad3      	subs	r3, r2, r3
 8014406:	687a      	ldr	r2, [r7, #4]
 8014408:	429a      	cmp	r2, r3
 801440a:	d8f0      	bhi.n	80143ee <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801440c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014410:	4618      	mov	r0, r3
 8014412:	3710      	adds	r7, #16
 8014414:	46bd      	mov	sp, r7
 8014416:	bd80      	pop	{r7, pc}

08014418 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b082      	sub	sp, #8
 801441c:	af00      	add	r7, sp, #0
 801441e:	4603      	mov	r3, r0
 8014420:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014422:	4b0b      	ldr	r3, [pc, #44]	; (8014450 <SD_CheckStatus+0x38>)
 8014424:	2201      	movs	r2, #1
 8014426:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014428:	f7fd fefe 	bl	8012228 <BSP_SD_GetCardState>
 801442c:	4603      	mov	r3, r0
 801442e:	2b00      	cmp	r3, #0
 8014430:	d107      	bne.n	8014442 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014432:	4b07      	ldr	r3, [pc, #28]	; (8014450 <SD_CheckStatus+0x38>)
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	b2db      	uxtb	r3, r3
 8014438:	f023 0301 	bic.w	r3, r3, #1
 801443c:	b2da      	uxtb	r2, r3
 801443e:	4b04      	ldr	r3, [pc, #16]	; (8014450 <SD_CheckStatus+0x38>)
 8014440:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014442:	4b03      	ldr	r3, [pc, #12]	; (8014450 <SD_CheckStatus+0x38>)
 8014444:	781b      	ldrb	r3, [r3, #0]
 8014446:	b2db      	uxtb	r3, r3
}
 8014448:	4618      	mov	r0, r3
 801444a:	3708      	adds	r7, #8
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}
 8014450:	20000130 	.word	0x20000130

08014454 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b082      	sub	sp, #8
 8014458:	af00      	add	r7, sp, #0
 801445a:	4603      	mov	r3, r0
 801445c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801445e:	f7fd fe89 	bl	8012174 <BSP_SD_Init>
 8014462:	4603      	mov	r3, r0
 8014464:	2b00      	cmp	r3, #0
 8014466:	d107      	bne.n	8014478 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014468:	79fb      	ldrb	r3, [r7, #7]
 801446a:	4618      	mov	r0, r3
 801446c:	f7ff ffd4 	bl	8014418 <SD_CheckStatus>
 8014470:	4603      	mov	r3, r0
 8014472:	461a      	mov	r2, r3
 8014474:	4b04      	ldr	r3, [pc, #16]	; (8014488 <SD_initialize+0x34>)
 8014476:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8014478:	4b03      	ldr	r3, [pc, #12]	; (8014488 <SD_initialize+0x34>)
 801447a:	781b      	ldrb	r3, [r3, #0]
 801447c:	b2db      	uxtb	r3, r3
}
 801447e:	4618      	mov	r0, r3
 8014480:	3708      	adds	r7, #8
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}
 8014486:	bf00      	nop
 8014488:	20000130 	.word	0x20000130

0801448c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b082      	sub	sp, #8
 8014490:	af00      	add	r7, sp, #0
 8014492:	4603      	mov	r3, r0
 8014494:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014496:	79fb      	ldrb	r3, [r7, #7]
 8014498:	4618      	mov	r0, r3
 801449a:	f7ff ffbd 	bl	8014418 <SD_CheckStatus>
 801449e:	4603      	mov	r3, r0
}
 80144a0:	4618      	mov	r0, r3
 80144a2:	3708      	adds	r7, #8
 80144a4:	46bd      	mov	sp, r7
 80144a6:	bd80      	pop	{r7, pc}

080144a8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b088      	sub	sp, #32
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	60b9      	str	r1, [r7, #8]
 80144b0:	607a      	str	r2, [r7, #4]
 80144b2:	603b      	str	r3, [r7, #0]
 80144b4:	4603      	mov	r3, r0
 80144b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80144b8:	2301      	movs	r3, #1
 80144ba:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80144bc:	f247 5030 	movw	r0, #30000	; 0x7530
 80144c0:	f7ff ff8d 	bl	80143de <SD_CheckStatusWithTimeout>
 80144c4:	4603      	mov	r3, r0
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	da01      	bge.n	80144ce <SD_read+0x26>
  {
    return res;
 80144ca:	7ffb      	ldrb	r3, [r7, #31]
 80144cc:	e08b      	b.n	80145e6 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80144ce:	68bb      	ldr	r3, [r7, #8]
 80144d0:	f003 0303 	and.w	r3, r3, #3
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	f040 8085 	bne.w	80145e4 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80144da:	683a      	ldr	r2, [r7, #0]
 80144dc:	6879      	ldr	r1, [r7, #4]
 80144de:	68b8      	ldr	r0, [r7, #8]
 80144e0:	f7fd fe6e 	bl	80121c0 <BSP_SD_ReadBlocks_DMA>
 80144e4:	4603      	mov	r3, r0
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d133      	bne.n	8014552 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80144ea:	4b41      	ldr	r3, [pc, #260]	; (80145f0 <SD_read+0x148>)
 80144ec:	2200      	movs	r2, #0
 80144ee:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80144f0:	f7f0 fde0 	bl	80050b4 <HAL_GetTick>
 80144f4:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80144f6:	bf00      	nop
 80144f8:	4b3d      	ldr	r3, [pc, #244]	; (80145f0 <SD_read+0x148>)
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d108      	bne.n	8014512 <SD_read+0x6a>
 8014500:	f7f0 fdd8 	bl	80050b4 <HAL_GetTick>
 8014504:	4602      	mov	r2, r0
 8014506:	697b      	ldr	r3, [r7, #20]
 8014508:	1ad3      	subs	r3, r2, r3
 801450a:	f247 522f 	movw	r2, #29999	; 0x752f
 801450e:	4293      	cmp	r3, r2
 8014510:	d9f2      	bls.n	80144f8 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8014512:	4b37      	ldr	r3, [pc, #220]	; (80145f0 <SD_read+0x148>)
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d102      	bne.n	8014520 <SD_read+0x78>
      {
        res = RES_ERROR;
 801451a:	2301      	movs	r3, #1
 801451c:	77fb      	strb	r3, [r7, #31]
 801451e:	e061      	b.n	80145e4 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8014520:	4b33      	ldr	r3, [pc, #204]	; (80145f0 <SD_read+0x148>)
 8014522:	2200      	movs	r2, #0
 8014524:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014526:	f7f0 fdc5 	bl	80050b4 <HAL_GetTick>
 801452a:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801452c:	e007      	b.n	801453e <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801452e:	f7fd fe7b 	bl	8012228 <BSP_SD_GetCardState>
 8014532:	4603      	mov	r3, r0
 8014534:	2b00      	cmp	r3, #0
 8014536:	d102      	bne.n	801453e <SD_read+0x96>
          {
            res = RES_OK;
 8014538:	2300      	movs	r3, #0
 801453a:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801453c:	e052      	b.n	80145e4 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801453e:	f7f0 fdb9 	bl	80050b4 <HAL_GetTick>
 8014542:	4602      	mov	r2, r0
 8014544:	697b      	ldr	r3, [r7, #20]
 8014546:	1ad3      	subs	r3, r2, r3
 8014548:	f247 522f 	movw	r2, #29999	; 0x752f
 801454c:	4293      	cmp	r3, r2
 801454e:	d9ee      	bls.n	801452e <SD_read+0x86>
 8014550:	e048      	b.n	80145e4 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8014552:	2300      	movs	r3, #0
 8014554:	61bb      	str	r3, [r7, #24]
 8014556:	e034      	b.n	80145c2 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	1c5a      	adds	r2, r3, #1
 801455c:	607a      	str	r2, [r7, #4]
 801455e:	2201      	movs	r2, #1
 8014560:	4619      	mov	r1, r3
 8014562:	4824      	ldr	r0, [pc, #144]	; (80145f4 <SD_read+0x14c>)
 8014564:	f7fd fe2c 	bl	80121c0 <BSP_SD_ReadBlocks_DMA>
 8014568:	4603      	mov	r3, r0
 801456a:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 801456c:	7fbb      	ldrb	r3, [r7, #30]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d12c      	bne.n	80145cc <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 8014572:	4b1f      	ldr	r3, [pc, #124]	; (80145f0 <SD_read+0x148>)
 8014574:	2200      	movs	r2, #0
 8014576:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 8014578:	f7f0 fd9c 	bl	80050b4 <HAL_GetTick>
 801457c:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801457e:	bf00      	nop
 8014580:	4b1b      	ldr	r3, [pc, #108]	; (80145f0 <SD_read+0x148>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d108      	bne.n	801459a <SD_read+0xf2>
 8014588:	f7f0 fd94 	bl	80050b4 <HAL_GetTick>
 801458c:	4602      	mov	r2, r0
 801458e:	697b      	ldr	r3, [r7, #20]
 8014590:	1ad3      	subs	r3, r2, r3
 8014592:	f247 522f 	movw	r2, #29999	; 0x752f
 8014596:	4293      	cmp	r3, r2
 8014598:	d9f2      	bls.n	8014580 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 801459a:	4b15      	ldr	r3, [pc, #84]	; (80145f0 <SD_read+0x148>)
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d016      	beq.n	80145d0 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	4a13      	ldr	r2, [pc, #76]	; (80145f4 <SD_read+0x14c>)
 80145a6:	4618      	mov	r0, r3
 80145a8:	4611      	mov	r1, r2
 80145aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80145ae:	461a      	mov	r2, r3
 80145b0:	f001 fa60 	bl	8015a74 <memcpy>
          buff += BLOCKSIZE;
 80145b4:	68bb      	ldr	r3, [r7, #8]
 80145b6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80145ba:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 80145bc:	69bb      	ldr	r3, [r7, #24]
 80145be:	3301      	adds	r3, #1
 80145c0:	61bb      	str	r3, [r7, #24]
 80145c2:	69bb      	ldr	r3, [r7, #24]
 80145c4:	683a      	ldr	r2, [r7, #0]
 80145c6:	429a      	cmp	r2, r3
 80145c8:	d8c6      	bhi.n	8014558 <SD_read+0xb0>
 80145ca:	e002      	b.n	80145d2 <SD_read+0x12a>
        }
        else
        {
          break;
 80145cc:	bf00      	nop
 80145ce:	e000      	b.n	80145d2 <SD_read+0x12a>
            break;
 80145d0:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 80145d2:	69bb      	ldr	r3, [r7, #24]
 80145d4:	683a      	ldr	r2, [r7, #0]
 80145d6:	429a      	cmp	r2, r3
 80145d8:	d104      	bne.n	80145e4 <SD_read+0x13c>
 80145da:	7fbb      	ldrb	r3, [r7, #30]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d101      	bne.n	80145e4 <SD_read+0x13c>
        res = RES_OK;
 80145e0:	2300      	movs	r3, #0
 80145e2:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 80145e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80145e6:	4618      	mov	r0, r3
 80145e8:	3720      	adds	r7, #32
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd80      	pop	{r7, pc}
 80145ee:	bf00      	nop
 80145f0:	20000bf0 	.word	0x20000bf0
 80145f4:	200009ec 	.word	0x200009ec

080145f8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b088      	sub	sp, #32
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	60b9      	str	r1, [r7, #8]
 8014600:	607a      	str	r2, [r7, #4]
 8014602:	603b      	str	r3, [r7, #0]
 8014604:	4603      	mov	r3, r0
 8014606:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014608:	2301      	movs	r3, #1
 801460a:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 801460c:	4b4c      	ldr	r3, [pc, #304]	; (8014740 <SD_write+0x148>)
 801460e:	2200      	movs	r2, #0
 8014610:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014612:	f247 5030 	movw	r0, #30000	; 0x7530
 8014616:	f7ff fee2 	bl	80143de <SD_CheckStatusWithTimeout>
 801461a:	4603      	mov	r3, r0
 801461c:	2b00      	cmp	r3, #0
 801461e:	da01      	bge.n	8014624 <SD_write+0x2c>
  {
    return res;
 8014620:	7ffb      	ldrb	r3, [r7, #31]
 8014622:	e088      	b.n	8014736 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	f003 0303 	and.w	r3, r3, #3
 801462a:	2b00      	cmp	r3, #0
 801462c:	f040 8082 	bne.w	8014734 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014630:	683a      	ldr	r2, [r7, #0]
 8014632:	6879      	ldr	r1, [r7, #4]
 8014634:	68b8      	ldr	r0, [r7, #8]
 8014636:	f7fd fddd 	bl	80121f4 <BSP_SD_WriteBlocks_DMA>
 801463a:	4603      	mov	r3, r0
 801463c:	2b00      	cmp	r3, #0
 801463e:	d130      	bne.n	80146a2 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014640:	f7f0 fd38 	bl	80050b4 <HAL_GetTick>
 8014644:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014646:	bf00      	nop
 8014648:	4b3d      	ldr	r3, [pc, #244]	; (8014740 <SD_write+0x148>)
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d108      	bne.n	8014662 <SD_write+0x6a>
 8014650:	f7f0 fd30 	bl	80050b4 <HAL_GetTick>
 8014654:	4602      	mov	r2, r0
 8014656:	697b      	ldr	r3, [r7, #20]
 8014658:	1ad3      	subs	r3, r2, r3
 801465a:	f247 522f 	movw	r2, #29999	; 0x752f
 801465e:	4293      	cmp	r3, r2
 8014660:	d9f2      	bls.n	8014648 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8014662:	4b37      	ldr	r3, [pc, #220]	; (8014740 <SD_write+0x148>)
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d102      	bne.n	8014670 <SD_write+0x78>
      {
        res = RES_ERROR;
 801466a:	2301      	movs	r3, #1
 801466c:	77fb      	strb	r3, [r7, #31]
 801466e:	e061      	b.n	8014734 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8014670:	4b33      	ldr	r3, [pc, #204]	; (8014740 <SD_write+0x148>)
 8014672:	2200      	movs	r2, #0
 8014674:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014676:	f7f0 fd1d 	bl	80050b4 <HAL_GetTick>
 801467a:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801467c:	e007      	b.n	801468e <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801467e:	f7fd fdd3 	bl	8012228 <BSP_SD_GetCardState>
 8014682:	4603      	mov	r3, r0
 8014684:	2b00      	cmp	r3, #0
 8014686:	d102      	bne.n	801468e <SD_write+0x96>
          {
            res = RES_OK;
 8014688:	2300      	movs	r3, #0
 801468a:	77fb      	strb	r3, [r7, #31]
            break;
 801468c:	e052      	b.n	8014734 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801468e:	f7f0 fd11 	bl	80050b4 <HAL_GetTick>
 8014692:	4602      	mov	r2, r0
 8014694:	697b      	ldr	r3, [r7, #20]
 8014696:	1ad3      	subs	r3, r2, r3
 8014698:	f247 522f 	movw	r2, #29999	; 0x752f
 801469c:	4293      	cmp	r3, r2
 801469e:	d9ee      	bls.n	801467e <SD_write+0x86>
 80146a0:	e048      	b.n	8014734 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 80146a2:	2300      	movs	r3, #0
 80146a4:	61bb      	str	r3, [r7, #24]
 80146a6:	e034      	b.n	8014712 <SD_write+0x11a>
      {
        WriteStatus = 0;
 80146a8:	4b25      	ldr	r3, [pc, #148]	; (8014740 <SD_write+0x148>)
 80146aa:	2200      	movs	r2, #0
 80146ac:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	1c5a      	adds	r2, r3, #1
 80146b2:	607a      	str	r2, [r7, #4]
 80146b4:	2201      	movs	r2, #1
 80146b6:	4619      	mov	r1, r3
 80146b8:	4822      	ldr	r0, [pc, #136]	; (8014744 <SD_write+0x14c>)
 80146ba:	f7fd fd9b 	bl	80121f4 <BSP_SD_WriteBlocks_DMA>
 80146be:	4603      	mov	r3, r0
 80146c0:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 80146c2:	7fbb      	ldrb	r3, [r7, #30]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d129      	bne.n	801471c <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 80146c8:	f7f0 fcf4 	bl	80050b4 <HAL_GetTick>
 80146cc:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80146ce:	bf00      	nop
 80146d0:	4b1b      	ldr	r3, [pc, #108]	; (8014740 <SD_write+0x148>)
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d108      	bne.n	80146ea <SD_write+0xf2>
 80146d8:	f7f0 fcec 	bl	80050b4 <HAL_GetTick>
 80146dc:	4602      	mov	r2, r0
 80146de:	697b      	ldr	r3, [r7, #20]
 80146e0:	1ad3      	subs	r3, r2, r3
 80146e2:	f247 522f 	movw	r2, #29999	; 0x752f
 80146e6:	4293      	cmp	r3, r2
 80146e8:	d9f2      	bls.n	80146d0 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 80146ea:	4b15      	ldr	r3, [pc, #84]	; (8014740 <SD_write+0x148>)
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d016      	beq.n	8014720 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	4a13      	ldr	r2, [pc, #76]	; (8014744 <SD_write+0x14c>)
 80146f6:	4618      	mov	r0, r3
 80146f8:	4611      	mov	r1, r2
 80146fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80146fe:	461a      	mov	r2, r3
 8014700:	f001 f9b8 	bl	8015a74 <memcpy>
          buff += BLOCKSIZE;
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801470a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 801470c:	69bb      	ldr	r3, [r7, #24]
 801470e:	3301      	adds	r3, #1
 8014710:	61bb      	str	r3, [r7, #24]
 8014712:	69bb      	ldr	r3, [r7, #24]
 8014714:	683a      	ldr	r2, [r7, #0]
 8014716:	429a      	cmp	r2, r3
 8014718:	d8c6      	bhi.n	80146a8 <SD_write+0xb0>
 801471a:	e002      	b.n	8014722 <SD_write+0x12a>
        }
        else
        {
          break;
 801471c:	bf00      	nop
 801471e:	e000      	b.n	8014722 <SD_write+0x12a>
            break;
 8014720:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8014722:	69bb      	ldr	r3, [r7, #24]
 8014724:	683a      	ldr	r2, [r7, #0]
 8014726:	429a      	cmp	r2, r3
 8014728:	d104      	bne.n	8014734 <SD_write+0x13c>
 801472a:	7fbb      	ldrb	r3, [r7, #30]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d101      	bne.n	8014734 <SD_write+0x13c>
        res = RES_OK;
 8014730:	2300      	movs	r3, #0
 8014732:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 8014734:	7ffb      	ldrb	r3, [r7, #31]
}
 8014736:	4618      	mov	r0, r3
 8014738:	3720      	adds	r7, #32
 801473a:	46bd      	mov	sp, r7
 801473c:	bd80      	pop	{r7, pc}
 801473e:	bf00      	nop
 8014740:	20000bec 	.word	0x20000bec
 8014744:	200009ec 	.word	0x200009ec

08014748 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b08c      	sub	sp, #48	; 0x30
 801474c:	af00      	add	r7, sp, #0
 801474e:	4603      	mov	r3, r0
 8014750:	603a      	str	r2, [r7, #0]
 8014752:	71fb      	strb	r3, [r7, #7]
 8014754:	460b      	mov	r3, r1
 8014756:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014758:	2301      	movs	r3, #1
 801475a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801475e:	4b25      	ldr	r3, [pc, #148]	; (80147f4 <SD_ioctl+0xac>)
 8014760:	781b      	ldrb	r3, [r3, #0]
 8014762:	b2db      	uxtb	r3, r3
 8014764:	f003 0301 	and.w	r3, r3, #1
 8014768:	2b00      	cmp	r3, #0
 801476a:	d001      	beq.n	8014770 <SD_ioctl+0x28>
 801476c:	2303      	movs	r3, #3
 801476e:	e03c      	b.n	80147ea <SD_ioctl+0xa2>

  switch (cmd)
 8014770:	79bb      	ldrb	r3, [r7, #6]
 8014772:	2b03      	cmp	r3, #3
 8014774:	d834      	bhi.n	80147e0 <SD_ioctl+0x98>
 8014776:	a201      	add	r2, pc, #4	; (adr r2, 801477c <SD_ioctl+0x34>)
 8014778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801477c:	0801478d 	.word	0x0801478d
 8014780:	08014795 	.word	0x08014795
 8014784:	080147ad 	.word	0x080147ad
 8014788:	080147c7 	.word	0x080147c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801478c:	2300      	movs	r3, #0
 801478e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014792:	e028      	b.n	80147e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014794:	f107 030c 	add.w	r3, r7, #12
 8014798:	4618      	mov	r0, r3
 801479a:	f7fd fd55 	bl	8012248 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801479e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80147a4:	2300      	movs	r3, #0
 80147a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80147aa:	e01c      	b.n	80147e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80147ac:	f107 030c 	add.w	r3, r7, #12
 80147b0:	4618      	mov	r0, r3
 80147b2:	f7fd fd49 	bl	8012248 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80147b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147b8:	b29a      	uxth	r2, r3
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80147be:	2300      	movs	r3, #0
 80147c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80147c4:	e00f      	b.n	80147e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80147c6:	f107 030c 	add.w	r3, r7, #12
 80147ca:	4618      	mov	r0, r3
 80147cc:	f7fd fd3c 	bl	8012248 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80147d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147d2:	0a5a      	lsrs	r2, r3, #9
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80147d8:	2300      	movs	r3, #0
 80147da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80147de:	e002      	b.n	80147e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80147e0:	2304      	movs	r3, #4
 80147e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80147e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3730      	adds	r7, #48	; 0x30
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}
 80147f2:	bf00      	nop
 80147f4:	20000130 	.word	0x20000130

080147f8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80147f8:	b480      	push	{r7}
 80147fa:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 80147fc:	4b03      	ldr	r3, [pc, #12]	; (801480c <BSP_SD_WriteCpltCallback+0x14>)
 80147fe:	2201      	movs	r2, #1
 8014800:	601a      	str	r2, [r3, #0]
}
 8014802:	bf00      	nop
 8014804:	46bd      	mov	sp, r7
 8014806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480a:	4770      	bx	lr
 801480c:	20000bec 	.word	0x20000bec

08014810 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014810:	b480      	push	{r7}
 8014812:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014814:	4b03      	ldr	r3, [pc, #12]	; (8014824 <BSP_SD_ReadCpltCallback+0x14>)
 8014816:	2201      	movs	r2, #1
 8014818:	601a      	str	r2, [r3, #0]
}
 801481a:	bf00      	nop
 801481c:	46bd      	mov	sp, r7
 801481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014822:	4770      	bx	lr
 8014824:	20000bf0 	.word	0x20000bf0

08014828 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014828:	b480      	push	{r7}
 801482a:	b083      	sub	sp, #12
 801482c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801482e:	2300      	movs	r3, #0
 8014830:	607b      	str	r3, [r7, #4]
 8014832:	4b10      	ldr	r3, [pc, #64]	; (8014874 <HAL_MspInit+0x4c>)
 8014834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014836:	4a0f      	ldr	r2, [pc, #60]	; (8014874 <HAL_MspInit+0x4c>)
 8014838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801483c:	6453      	str	r3, [r2, #68]	; 0x44
 801483e:	4b0d      	ldr	r3, [pc, #52]	; (8014874 <HAL_MspInit+0x4c>)
 8014840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014846:	607b      	str	r3, [r7, #4]
 8014848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801484a:	2300      	movs	r3, #0
 801484c:	603b      	str	r3, [r7, #0]
 801484e:	4b09      	ldr	r3, [pc, #36]	; (8014874 <HAL_MspInit+0x4c>)
 8014850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014852:	4a08      	ldr	r2, [pc, #32]	; (8014874 <HAL_MspInit+0x4c>)
 8014854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014858:	6413      	str	r3, [r2, #64]	; 0x40
 801485a:	4b06      	ldr	r3, [pc, #24]	; (8014874 <HAL_MspInit+0x4c>)
 801485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801485e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014862:	603b      	str	r3, [r7, #0]
 8014864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014866:	bf00      	nop
 8014868:	370c      	adds	r7, #12
 801486a:	46bd      	mov	sp, r7
 801486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014870:	4770      	bx	lr
 8014872:	bf00      	nop
 8014874:	40023800 	.word	0x40023800

08014878 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b08a      	sub	sp, #40	; 0x28
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014880:	f107 0314 	add.w	r3, r7, #20
 8014884:	2200      	movs	r2, #0
 8014886:	601a      	str	r2, [r3, #0]
 8014888:	605a      	str	r2, [r3, #4]
 801488a:	609a      	str	r2, [r3, #8]
 801488c:	60da      	str	r2, [r3, #12]
 801488e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	4a19      	ldr	r2, [pc, #100]	; (80148fc <HAL_I2C_MspInit+0x84>)
 8014896:	4293      	cmp	r3, r2
 8014898:	d12b      	bne.n	80148f2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801489a:	2300      	movs	r3, #0
 801489c:	613b      	str	r3, [r7, #16]
 801489e:	4b18      	ldr	r3, [pc, #96]	; (8014900 <HAL_I2C_MspInit+0x88>)
 80148a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148a2:	4a17      	ldr	r2, [pc, #92]	; (8014900 <HAL_I2C_MspInit+0x88>)
 80148a4:	f043 0302 	orr.w	r3, r3, #2
 80148a8:	6313      	str	r3, [r2, #48]	; 0x30
 80148aa:	4b15      	ldr	r3, [pc, #84]	; (8014900 <HAL_I2C_MspInit+0x88>)
 80148ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148ae:	f003 0302 	and.w	r3, r3, #2
 80148b2:	613b      	str	r3, [r7, #16]
 80148b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80148b6:	23c0      	movs	r3, #192	; 0xc0
 80148b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80148ba:	2312      	movs	r3, #18
 80148bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80148be:	2300      	movs	r3, #0
 80148c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80148c2:	2303      	movs	r3, #3
 80148c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80148c6:	2304      	movs	r3, #4
 80148c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80148ca:	f107 0314 	add.w	r3, r7, #20
 80148ce:	4619      	mov	r1, r3
 80148d0:	480c      	ldr	r0, [pc, #48]	; (8014904 <HAL_I2C_MspInit+0x8c>)
 80148d2:	f7f1 f8c7 	bl	8005a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80148d6:	2300      	movs	r3, #0
 80148d8:	60fb      	str	r3, [r7, #12]
 80148da:	4b09      	ldr	r3, [pc, #36]	; (8014900 <HAL_I2C_MspInit+0x88>)
 80148dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148de:	4a08      	ldr	r2, [pc, #32]	; (8014900 <HAL_I2C_MspInit+0x88>)
 80148e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80148e4:	6413      	str	r3, [r2, #64]	; 0x40
 80148e6:	4b06      	ldr	r3, [pc, #24]	; (8014900 <HAL_I2C_MspInit+0x88>)
 80148e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80148ee:	60fb      	str	r3, [r7, #12]
 80148f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80148f2:	bf00      	nop
 80148f4:	3728      	adds	r7, #40	; 0x28
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}
 80148fa:	bf00      	nop
 80148fc:	40005400 	.word	0x40005400
 8014900:	40023800 	.word	0x40023800
 8014904:	40020400 	.word	0x40020400

08014908 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8014908:	b480      	push	{r7}
 801490a:	b083      	sub	sp, #12
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	4a05      	ldr	r2, [pc, #20]	; (801492c <HAL_RTC_MspInit+0x24>)
 8014916:	4293      	cmp	r3, r2
 8014918:	d102      	bne.n	8014920 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 801491a:	4b05      	ldr	r3, [pc, #20]	; (8014930 <HAL_RTC_MspInit+0x28>)
 801491c:	2201      	movs	r2, #1
 801491e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8014920:	bf00      	nop
 8014922:	370c      	adds	r7, #12
 8014924:	46bd      	mov	sp, r7
 8014926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492a:	4770      	bx	lr
 801492c:	40002800 	.word	0x40002800
 8014930:	42470e3c 	.word	0x42470e3c

08014934 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b08a      	sub	sp, #40	; 0x28
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801493c:	f107 0314 	add.w	r3, r7, #20
 8014940:	2200      	movs	r2, #0
 8014942:	601a      	str	r2, [r3, #0]
 8014944:	605a      	str	r2, [r3, #4]
 8014946:	609a      	str	r2, [r3, #8]
 8014948:	60da      	str	r2, [r3, #12]
 801494a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	4a70      	ldr	r2, [pc, #448]	; (8014b14 <HAL_SD_MspInit+0x1e0>)
 8014952:	4293      	cmp	r3, r2
 8014954:	f040 80da 	bne.w	8014b0c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8014958:	2300      	movs	r3, #0
 801495a:	613b      	str	r3, [r7, #16]
 801495c:	4b6e      	ldr	r3, [pc, #440]	; (8014b18 <HAL_SD_MspInit+0x1e4>)
 801495e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014960:	4a6d      	ldr	r2, [pc, #436]	; (8014b18 <HAL_SD_MspInit+0x1e4>)
 8014962:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014966:	6453      	str	r3, [r2, #68]	; 0x44
 8014968:	4b6b      	ldr	r3, [pc, #428]	; (8014b18 <HAL_SD_MspInit+0x1e4>)
 801496a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801496c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014970:	613b      	str	r3, [r7, #16]
 8014972:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014974:	2300      	movs	r3, #0
 8014976:	60fb      	str	r3, [r7, #12]
 8014978:	4b67      	ldr	r3, [pc, #412]	; (8014b18 <HAL_SD_MspInit+0x1e4>)
 801497a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801497c:	4a66      	ldr	r2, [pc, #408]	; (8014b18 <HAL_SD_MspInit+0x1e4>)
 801497e:	f043 0304 	orr.w	r3, r3, #4
 8014982:	6313      	str	r3, [r2, #48]	; 0x30
 8014984:	4b64      	ldr	r3, [pc, #400]	; (8014b18 <HAL_SD_MspInit+0x1e4>)
 8014986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014988:	f003 0304 	and.w	r3, r3, #4
 801498c:	60fb      	str	r3, [r7, #12]
 801498e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014990:	2300      	movs	r3, #0
 8014992:	60bb      	str	r3, [r7, #8]
 8014994:	4b60      	ldr	r3, [pc, #384]	; (8014b18 <HAL_SD_MspInit+0x1e4>)
 8014996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014998:	4a5f      	ldr	r2, [pc, #380]	; (8014b18 <HAL_SD_MspInit+0x1e4>)
 801499a:	f043 0308 	orr.w	r3, r3, #8
 801499e:	6313      	str	r3, [r2, #48]	; 0x30
 80149a0:	4b5d      	ldr	r3, [pc, #372]	; (8014b18 <HAL_SD_MspInit+0x1e4>)
 80149a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149a4:	f003 0308 	and.w	r3, r3, #8
 80149a8:	60bb      	str	r3, [r7, #8]
 80149aa:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80149ac:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80149b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80149b2:	2302      	movs	r3, #2
 80149b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80149b6:	2301      	movs	r3, #1
 80149b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80149ba:	2303      	movs	r3, #3
 80149bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80149be:	230c      	movs	r3, #12
 80149c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80149c2:	f107 0314 	add.w	r3, r7, #20
 80149c6:	4619      	mov	r1, r3
 80149c8:	4854      	ldr	r0, [pc, #336]	; (8014b1c <HAL_SD_MspInit+0x1e8>)
 80149ca:	f7f1 f84b 	bl	8005a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80149ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80149d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80149d4:	2302      	movs	r3, #2
 80149d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80149d8:	2300      	movs	r3, #0
 80149da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80149dc:	2303      	movs	r3, #3
 80149de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80149e0:	230c      	movs	r3, #12
 80149e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80149e4:	f107 0314 	add.w	r3, r7, #20
 80149e8:	4619      	mov	r1, r3
 80149ea:	484c      	ldr	r0, [pc, #304]	; (8014b1c <HAL_SD_MspInit+0x1e8>)
 80149ec:	f7f1 f83a 	bl	8005a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80149f0:	2304      	movs	r3, #4
 80149f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80149f4:	2302      	movs	r3, #2
 80149f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80149f8:	2301      	movs	r3, #1
 80149fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80149fc:	2303      	movs	r3, #3
 80149fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8014a00:	230c      	movs	r3, #12
 8014a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014a04:	f107 0314 	add.w	r3, r7, #20
 8014a08:	4619      	mov	r1, r3
 8014a0a:	4845      	ldr	r0, [pc, #276]	; (8014b20 <HAL_SD_MspInit+0x1ec>)
 8014a0c:	f7f1 f82a 	bl	8005a64 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8014a10:	4b44      	ldr	r3, [pc, #272]	; (8014b24 <HAL_SD_MspInit+0x1f0>)
 8014a12:	4a45      	ldr	r2, [pc, #276]	; (8014b28 <HAL_SD_MspInit+0x1f4>)
 8014a14:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8014a16:	4b43      	ldr	r3, [pc, #268]	; (8014b24 <HAL_SD_MspInit+0x1f0>)
 8014a18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014a1c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014a1e:	4b41      	ldr	r3, [pc, #260]	; (8014b24 <HAL_SD_MspInit+0x1f0>)
 8014a20:	2200      	movs	r2, #0
 8014a22:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014a24:	4b3f      	ldr	r3, [pc, #252]	; (8014b24 <HAL_SD_MspInit+0x1f0>)
 8014a26:	2200      	movs	r2, #0
 8014a28:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8014a2a:	4b3e      	ldr	r3, [pc, #248]	; (8014b24 <HAL_SD_MspInit+0x1f0>)
 8014a2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014a30:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8014a32:	4b3c      	ldr	r3, [pc, #240]	; (8014b24 <HAL_SD_MspInit+0x1f0>)
 8014a34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014a38:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8014a3a:	4b3a      	ldr	r3, [pc, #232]	; (8014b24 <HAL_SD_MspInit+0x1f0>)
 8014a3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014a40:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8014a42:	4b38      	ldr	r3, [pc, #224]	; (8014b24 <HAL_SD_MspInit+0x1f0>)
 8014a44:	2220      	movs	r2, #32
 8014a46:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8014a48:	4b36      	ldr	r3, [pc, #216]	; (8014b24 <HAL_SD_MspInit+0x1f0>)
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8014a4e:	4b35      	ldr	r3, [pc, #212]	; (8014b24 <HAL_SD_MspInit+0x1f0>)
 8014a50:	2204      	movs	r2, #4
 8014a52:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8014a54:	4b33      	ldr	r3, [pc, #204]	; (8014b24 <HAL_SD_MspInit+0x1f0>)
 8014a56:	2203      	movs	r2, #3
 8014a58:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8014a5a:	4b32      	ldr	r3, [pc, #200]	; (8014b24 <HAL_SD_MspInit+0x1f0>)
 8014a5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8014a60:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8014a62:	4b30      	ldr	r3, [pc, #192]	; (8014b24 <HAL_SD_MspInit+0x1f0>)
 8014a64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8014a68:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8014a6a:	482e      	ldr	r0, [pc, #184]	; (8014b24 <HAL_SD_MspInit+0x1f0>)
 8014a6c:	f7f0 fc62 	bl	8005334 <HAL_DMA_Init>
 8014a70:	4603      	mov	r3, r0
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d001      	beq.n	8014a7a <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8014a76:	f7ff fcab 	bl	80143d0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	4a29      	ldr	r2, [pc, #164]	; (8014b24 <HAL_SD_MspInit+0x1f0>)
 8014a7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8014a80:	4a28      	ldr	r2, [pc, #160]	; (8014b24 <HAL_SD_MspInit+0x1f0>)
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8014a86:	4b29      	ldr	r3, [pc, #164]	; (8014b2c <HAL_SD_MspInit+0x1f8>)
 8014a88:	4a29      	ldr	r2, [pc, #164]	; (8014b30 <HAL_SD_MspInit+0x1fc>)
 8014a8a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8014a8c:	4b27      	ldr	r3, [pc, #156]	; (8014b2c <HAL_SD_MspInit+0x1f8>)
 8014a8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014a92:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8014a94:	4b25      	ldr	r3, [pc, #148]	; (8014b2c <HAL_SD_MspInit+0x1f8>)
 8014a96:	2240      	movs	r2, #64	; 0x40
 8014a98:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014a9a:	4b24      	ldr	r3, [pc, #144]	; (8014b2c <HAL_SD_MspInit+0x1f8>)
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8014aa0:	4b22      	ldr	r3, [pc, #136]	; (8014b2c <HAL_SD_MspInit+0x1f8>)
 8014aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014aa6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8014aa8:	4b20      	ldr	r3, [pc, #128]	; (8014b2c <HAL_SD_MspInit+0x1f8>)
 8014aaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014aae:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8014ab0:	4b1e      	ldr	r3, [pc, #120]	; (8014b2c <HAL_SD_MspInit+0x1f8>)
 8014ab2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014ab6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8014ab8:	4b1c      	ldr	r3, [pc, #112]	; (8014b2c <HAL_SD_MspInit+0x1f8>)
 8014aba:	2220      	movs	r2, #32
 8014abc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8014abe:	4b1b      	ldr	r3, [pc, #108]	; (8014b2c <HAL_SD_MspInit+0x1f8>)
 8014ac0:	2200      	movs	r2, #0
 8014ac2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8014ac4:	4b19      	ldr	r3, [pc, #100]	; (8014b2c <HAL_SD_MspInit+0x1f8>)
 8014ac6:	2204      	movs	r2, #4
 8014ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8014aca:	4b18      	ldr	r3, [pc, #96]	; (8014b2c <HAL_SD_MspInit+0x1f8>)
 8014acc:	2203      	movs	r2, #3
 8014ace:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8014ad0:	4b16      	ldr	r3, [pc, #88]	; (8014b2c <HAL_SD_MspInit+0x1f8>)
 8014ad2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8014ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8014ad8:	4b14      	ldr	r3, [pc, #80]	; (8014b2c <HAL_SD_MspInit+0x1f8>)
 8014ada:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8014ade:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8014ae0:	4812      	ldr	r0, [pc, #72]	; (8014b2c <HAL_SD_MspInit+0x1f8>)
 8014ae2:	f7f0 fc27 	bl	8005334 <HAL_DMA_Init>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d001      	beq.n	8014af0 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8014aec:	f7ff fc70 	bl	80143d0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	4a0e      	ldr	r2, [pc, #56]	; (8014b2c <HAL_SD_MspInit+0x1f8>)
 8014af4:	641a      	str	r2, [r3, #64]	; 0x40
 8014af6:	4a0d      	ldr	r2, [pc, #52]	; (8014b2c <HAL_SD_MspInit+0x1f8>)
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8014afc:	2200      	movs	r2, #0
 8014afe:	2100      	movs	r1, #0
 8014b00:	2031      	movs	r0, #49	; 0x31
 8014b02:	f7f0 fbe0 	bl	80052c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8014b06:	2031      	movs	r0, #49	; 0x31
 8014b08:	f7f0 fbf9 	bl	80052fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8014b0c:	bf00      	nop
 8014b0e:	3728      	adds	r7, #40	; 0x28
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bd80      	pop	{r7, pc}
 8014b14:	40012c00 	.word	0x40012c00
 8014b18:	40023800 	.word	0x40023800
 8014b1c:	40020800 	.word	0x40020800
 8014b20:	40020c00 	.word	0x40020c00
 8014b24:	200087ac 	.word	0x200087ac
 8014b28:	40026458 	.word	0x40026458
 8014b2c:	20008940 	.word	0x20008940
 8014b30:	400264a0 	.word	0x400264a0

08014b34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b08a      	sub	sp, #40	; 0x28
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014b3c:	f107 0314 	add.w	r3, r7, #20
 8014b40:	2200      	movs	r2, #0
 8014b42:	601a      	str	r2, [r3, #0]
 8014b44:	605a      	str	r2, [r3, #4]
 8014b46:	609a      	str	r2, [r3, #8]
 8014b48:	60da      	str	r2, [r3, #12]
 8014b4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	4a19      	ldr	r2, [pc, #100]	; (8014bb8 <HAL_SPI_MspInit+0x84>)
 8014b52:	4293      	cmp	r3, r2
 8014b54:	d12b      	bne.n	8014bae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8014b56:	2300      	movs	r3, #0
 8014b58:	613b      	str	r3, [r7, #16]
 8014b5a:	4b18      	ldr	r3, [pc, #96]	; (8014bbc <HAL_SPI_MspInit+0x88>)
 8014b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b5e:	4a17      	ldr	r2, [pc, #92]	; (8014bbc <HAL_SPI_MspInit+0x88>)
 8014b60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014b64:	6453      	str	r3, [r2, #68]	; 0x44
 8014b66:	4b15      	ldr	r3, [pc, #84]	; (8014bbc <HAL_SPI_MspInit+0x88>)
 8014b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014b6e:	613b      	str	r3, [r7, #16]
 8014b70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014b72:	2300      	movs	r3, #0
 8014b74:	60fb      	str	r3, [r7, #12]
 8014b76:	4b11      	ldr	r3, [pc, #68]	; (8014bbc <HAL_SPI_MspInit+0x88>)
 8014b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b7a:	4a10      	ldr	r2, [pc, #64]	; (8014bbc <HAL_SPI_MspInit+0x88>)
 8014b7c:	f043 0302 	orr.w	r3, r3, #2
 8014b80:	6313      	str	r3, [r2, #48]	; 0x30
 8014b82:	4b0e      	ldr	r3, [pc, #56]	; (8014bbc <HAL_SPI_MspInit+0x88>)
 8014b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b86:	f003 0302 	and.w	r3, r3, #2
 8014b8a:	60fb      	str	r3, [r7, #12]
 8014b8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8014b8e:	2338      	movs	r3, #56	; 0x38
 8014b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014b92:	2302      	movs	r3, #2
 8014b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b96:	2300      	movs	r3, #0
 8014b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014b9a:	2303      	movs	r3, #3
 8014b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8014b9e:	2305      	movs	r3, #5
 8014ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014ba2:	f107 0314 	add.w	r3, r7, #20
 8014ba6:	4619      	mov	r1, r3
 8014ba8:	4805      	ldr	r0, [pc, #20]	; (8014bc0 <HAL_SPI_MspInit+0x8c>)
 8014baa:	f7f0 ff5b 	bl	8005a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8014bae:	bf00      	nop
 8014bb0:	3728      	adds	r7, #40	; 0x28
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}
 8014bb6:	bf00      	nop
 8014bb8:	40013000 	.word	0x40013000
 8014bbc:	40023800 	.word	0x40023800
 8014bc0:	40020400 	.word	0x40020400

08014bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8014bc4:	b480      	push	{r7}
 8014bc6:	b087      	sub	sp, #28
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014bd4:	d10e      	bne.n	8014bf4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	617b      	str	r3, [r7, #20]
 8014bda:	4b1d      	ldr	r3, [pc, #116]	; (8014c50 <HAL_TIM_Base_MspInit+0x8c>)
 8014bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bde:	4a1c      	ldr	r2, [pc, #112]	; (8014c50 <HAL_TIM_Base_MspInit+0x8c>)
 8014be0:	f043 0301 	orr.w	r3, r3, #1
 8014be4:	6413      	str	r3, [r2, #64]	; 0x40
 8014be6:	4b1a      	ldr	r3, [pc, #104]	; (8014c50 <HAL_TIM_Base_MspInit+0x8c>)
 8014be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bea:	f003 0301 	and.w	r3, r3, #1
 8014bee:	617b      	str	r3, [r7, #20]
 8014bf0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8014bf2:	e026      	b.n	8014c42 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	4a16      	ldr	r2, [pc, #88]	; (8014c54 <HAL_TIM_Base_MspInit+0x90>)
 8014bfa:	4293      	cmp	r3, r2
 8014bfc:	d10e      	bne.n	8014c1c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8014bfe:	2300      	movs	r3, #0
 8014c00:	613b      	str	r3, [r7, #16]
 8014c02:	4b13      	ldr	r3, [pc, #76]	; (8014c50 <HAL_TIM_Base_MspInit+0x8c>)
 8014c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c06:	4a12      	ldr	r2, [pc, #72]	; (8014c50 <HAL_TIM_Base_MspInit+0x8c>)
 8014c08:	f043 0302 	orr.w	r3, r3, #2
 8014c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8014c0e:	4b10      	ldr	r3, [pc, #64]	; (8014c50 <HAL_TIM_Base_MspInit+0x8c>)
 8014c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c12:	f003 0302 	and.w	r3, r3, #2
 8014c16:	613b      	str	r3, [r7, #16]
 8014c18:	693b      	ldr	r3, [r7, #16]
}
 8014c1a:	e012      	b.n	8014c42 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	4a0d      	ldr	r2, [pc, #52]	; (8014c58 <HAL_TIM_Base_MspInit+0x94>)
 8014c22:	4293      	cmp	r3, r2
 8014c24:	d10d      	bne.n	8014c42 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8014c26:	2300      	movs	r3, #0
 8014c28:	60fb      	str	r3, [r7, #12]
 8014c2a:	4b09      	ldr	r3, [pc, #36]	; (8014c50 <HAL_TIM_Base_MspInit+0x8c>)
 8014c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c2e:	4a08      	ldr	r2, [pc, #32]	; (8014c50 <HAL_TIM_Base_MspInit+0x8c>)
 8014c30:	f043 0308 	orr.w	r3, r3, #8
 8014c34:	6413      	str	r3, [r2, #64]	; 0x40
 8014c36:	4b06      	ldr	r3, [pc, #24]	; (8014c50 <HAL_TIM_Base_MspInit+0x8c>)
 8014c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c3a:	f003 0308 	and.w	r3, r3, #8
 8014c3e:	60fb      	str	r3, [r7, #12]
 8014c40:	68fb      	ldr	r3, [r7, #12]
}
 8014c42:	bf00      	nop
 8014c44:	371c      	adds	r7, #28
 8014c46:	46bd      	mov	sp, r7
 8014c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4c:	4770      	bx	lr
 8014c4e:	bf00      	nop
 8014c50:	40023800 	.word	0x40023800
 8014c54:	40000400 	.word	0x40000400
 8014c58:	40000c00 	.word	0x40000c00

08014c5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b08a      	sub	sp, #40	; 0x28
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014c64:	f107 0314 	add.w	r3, r7, #20
 8014c68:	2200      	movs	r2, #0
 8014c6a:	601a      	str	r2, [r3, #0]
 8014c6c:	605a      	str	r2, [r3, #4]
 8014c6e:	609a      	str	r2, [r3, #8]
 8014c70:	60da      	str	r2, [r3, #12]
 8014c72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	4a24      	ldr	r2, [pc, #144]	; (8014d0c <HAL_TIM_MspPostInit+0xb0>)
 8014c7a:	4293      	cmp	r3, r2
 8014c7c:	d11e      	bne.n	8014cbc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014c7e:	2300      	movs	r3, #0
 8014c80:	613b      	str	r3, [r7, #16]
 8014c82:	4b23      	ldr	r3, [pc, #140]	; (8014d10 <HAL_TIM_MspPostInit+0xb4>)
 8014c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c86:	4a22      	ldr	r2, [pc, #136]	; (8014d10 <HAL_TIM_MspPostInit+0xb4>)
 8014c88:	f043 0302 	orr.w	r3, r3, #2
 8014c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8014c8e:	4b20      	ldr	r3, [pc, #128]	; (8014d10 <HAL_TIM_MspPostInit+0xb4>)
 8014c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c92:	f003 0302 	and.w	r3, r3, #2
 8014c96:	613b      	str	r3, [r7, #16]
 8014c98:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = P6_Pin|P3_Pin;
 8014c9a:	2303      	movs	r3, #3
 8014c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014c9e:	2302      	movs	r3, #2
 8014ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8014caa:	2302      	movs	r3, #2
 8014cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014cae:	f107 0314 	add.w	r3, r7, #20
 8014cb2:	4619      	mov	r1, r3
 8014cb4:	4817      	ldr	r0, [pc, #92]	; (8014d14 <HAL_TIM_MspPostInit+0xb8>)
 8014cb6:	f7f0 fed5 	bl	8005a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8014cba:	e022      	b.n	8014d02 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	4a15      	ldr	r2, [pc, #84]	; (8014d18 <HAL_TIM_MspPostInit+0xbc>)
 8014cc2:	4293      	cmp	r3, r2
 8014cc4:	d11d      	bne.n	8014d02 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	60fb      	str	r3, [r7, #12]
 8014cca:	4b11      	ldr	r3, [pc, #68]	; (8014d10 <HAL_TIM_MspPostInit+0xb4>)
 8014ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014cce:	4a10      	ldr	r2, [pc, #64]	; (8014d10 <HAL_TIM_MspPostInit+0xb4>)
 8014cd0:	f043 0301 	orr.w	r3, r3, #1
 8014cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8014cd6:	4b0e      	ldr	r3, [pc, #56]	; (8014d10 <HAL_TIM_MspPostInit+0xb4>)
 8014cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014cda:	f003 0301 	and.w	r3, r3, #1
 8014cde:	60fb      	str	r3, [r7, #12]
 8014ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 8014ce2:	230a      	movs	r3, #10
 8014ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ce6:	2302      	movs	r3, #2
 8014ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014cea:	2300      	movs	r3, #0
 8014cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014cee:	2300      	movs	r3, #0
 8014cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8014cf2:	2302      	movs	r3, #2
 8014cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014cf6:	f107 0314 	add.w	r3, r7, #20
 8014cfa:	4619      	mov	r1, r3
 8014cfc:	4807      	ldr	r0, [pc, #28]	; (8014d1c <HAL_TIM_MspPostInit+0xc0>)
 8014cfe:	f7f0 feb1 	bl	8005a64 <HAL_GPIO_Init>
}
 8014d02:	bf00      	nop
 8014d04:	3728      	adds	r7, #40	; 0x28
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bd80      	pop	{r7, pc}
 8014d0a:	bf00      	nop
 8014d0c:	40000400 	.word	0x40000400
 8014d10:	40023800 	.word	0x40023800
 8014d14:	40020400 	.word	0x40020400
 8014d18:	40000c00 	.word	0x40000c00
 8014d1c:	40020000 	.word	0x40020000

08014d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	b08a      	sub	sp, #40	; 0x28
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014d28:	f107 0314 	add.w	r3, r7, #20
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	601a      	str	r2, [r3, #0]
 8014d30:	605a      	str	r2, [r3, #4]
 8014d32:	609a      	str	r2, [r3, #8]
 8014d34:	60da      	str	r2, [r3, #12]
 8014d36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	4a1d      	ldr	r2, [pc, #116]	; (8014db4 <HAL_UART_MspInit+0x94>)
 8014d3e:	4293      	cmp	r3, r2
 8014d40:	d134      	bne.n	8014dac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8014d42:	2300      	movs	r3, #0
 8014d44:	613b      	str	r3, [r7, #16]
 8014d46:	4b1c      	ldr	r3, [pc, #112]	; (8014db8 <HAL_UART_MspInit+0x98>)
 8014d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d4a:	4a1b      	ldr	r2, [pc, #108]	; (8014db8 <HAL_UART_MspInit+0x98>)
 8014d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014d50:	6413      	str	r3, [r2, #64]	; 0x40
 8014d52:	4b19      	ldr	r3, [pc, #100]	; (8014db8 <HAL_UART_MspInit+0x98>)
 8014d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014d5a:	613b      	str	r3, [r7, #16]
 8014d5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014d5e:	2300      	movs	r3, #0
 8014d60:	60fb      	str	r3, [r7, #12]
 8014d62:	4b15      	ldr	r3, [pc, #84]	; (8014db8 <HAL_UART_MspInit+0x98>)
 8014d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d66:	4a14      	ldr	r2, [pc, #80]	; (8014db8 <HAL_UART_MspInit+0x98>)
 8014d68:	f043 0302 	orr.w	r3, r3, #2
 8014d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8014d6e:	4b12      	ldr	r3, [pc, #72]	; (8014db8 <HAL_UART_MspInit+0x98>)
 8014d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d72:	f003 0302 	and.w	r3, r3, #2
 8014d76:	60fb      	str	r3, [r7, #12]
 8014d78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8014d7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8014d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d80:	2302      	movs	r3, #2
 8014d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014d84:	2301      	movs	r3, #1
 8014d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014d88:	2303      	movs	r3, #3
 8014d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8014d8c:	2307      	movs	r3, #7
 8014d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014d90:	f107 0314 	add.w	r3, r7, #20
 8014d94:	4619      	mov	r1, r3
 8014d96:	4809      	ldr	r0, [pc, #36]	; (8014dbc <HAL_UART_MspInit+0x9c>)
 8014d98:	f7f0 fe64 	bl	8005a64 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	2100      	movs	r1, #0
 8014da0:	2027      	movs	r0, #39	; 0x27
 8014da2:	f7f0 fa90 	bl	80052c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8014da6:	2027      	movs	r0, #39	; 0x27
 8014da8:	f7f0 faa9 	bl	80052fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8014dac:	bf00      	nop
 8014dae:	3728      	adds	r7, #40	; 0x28
 8014db0:	46bd      	mov	sp, r7
 8014db2:	bd80      	pop	{r7, pc}
 8014db4:	40004800 	.word	0x40004800
 8014db8:	40023800 	.word	0x40023800
 8014dbc:	40020400 	.word	0x40020400

08014dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014dc0:	b480      	push	{r7}
 8014dc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8014dc4:	bf00      	nop
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dcc:	4770      	bx	lr

08014dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8014dce:	b480      	push	{r7}
 8014dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014dd2:	e7fe      	b.n	8014dd2 <HardFault_Handler+0x4>

08014dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014dd4:	b480      	push	{r7}
 8014dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014dd8:	e7fe      	b.n	8014dd8 <MemManage_Handler+0x4>

08014dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014dda:	b480      	push	{r7}
 8014ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8014dde:	e7fe      	b.n	8014dde <BusFault_Handler+0x4>

08014de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014de0:	b480      	push	{r7}
 8014de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014de4:	e7fe      	b.n	8014de4 <UsageFault_Handler+0x4>

08014de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8014de6:	b480      	push	{r7}
 8014de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8014dea:	bf00      	nop
 8014dec:	46bd      	mov	sp, r7
 8014dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df2:	4770      	bx	lr

08014df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014df4:	b480      	push	{r7}
 8014df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014df8:	bf00      	nop
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e00:	4770      	bx	lr

08014e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8014e02:	b480      	push	{r7}
 8014e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8014e06:	bf00      	nop
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0e:	4770      	bx	lr

08014e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014e14:	f7f0 f93a 	bl	800508c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014e18:	bf00      	nop
 8014e1a:	bd80      	pop	{r7, pc}

08014e1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8014e20:	4802      	ldr	r0, [pc, #8]	; (8014e2c <USART3_IRQHandler+0x10>)
 8014e22:	f7f6 fda7 	bl	800b974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8014e26:	bf00      	nop
 8014e28:	bd80      	pop	{r7, pc}
 8014e2a:	bf00      	nop
 8014e2c:	2000880c 	.word	0x2000880c

08014e30 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8014e34:	4802      	ldr	r0, [pc, #8]	; (8014e40 <SDIO_IRQHandler+0x10>)
 8014e36:	f7f4 f9c1 	bl	80091bc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8014e3a:	bf00      	nop
 8014e3c:	bd80      	pop	{r7, pc}
 8014e3e:	bf00      	nop
 8014e40:	200089a0 	.word	0x200089a0

08014e44 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8014e48:	4802      	ldr	r0, [pc, #8]	; (8014e54 <DMA2_Stream3_IRQHandler+0x10>)
 8014e4a:	f7f0 fba3 	bl	8005594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8014e4e:	bf00      	nop
 8014e50:	bd80      	pop	{r7, pc}
 8014e52:	bf00      	nop
 8014e54:	200087ac 	.word	0x200087ac

08014e58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8014e5c:	4802      	ldr	r0, [pc, #8]	; (8014e68 <OTG_FS_IRQHandler+0x10>)
 8014e5e:	f7f2 f8b6 	bl	8006fce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8014e62:	bf00      	nop
 8014e64:	bd80      	pop	{r7, pc}
 8014e66:	bf00      	nop
 8014e68:	20009d58 	.word	0x20009d58

08014e6c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8014e70:	4802      	ldr	r0, [pc, #8]	; (8014e7c <DMA2_Stream6_IRQHandler+0x10>)
 8014e72:	f7f0 fb8f 	bl	8005594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8014e76:	bf00      	nop
 8014e78:	bd80      	pop	{r7, pc}
 8014e7a:	bf00      	nop
 8014e7c:	20008940 	.word	0x20008940

08014e80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b084      	sub	sp, #16
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8014e88:	4b11      	ldr	r3, [pc, #68]	; (8014ed0 <_sbrk+0x50>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d102      	bne.n	8014e96 <_sbrk+0x16>
		heap_end = &end;
 8014e90:	4b0f      	ldr	r3, [pc, #60]	; (8014ed0 <_sbrk+0x50>)
 8014e92:	4a10      	ldr	r2, [pc, #64]	; (8014ed4 <_sbrk+0x54>)
 8014e94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8014e96:	4b0e      	ldr	r3, [pc, #56]	; (8014ed0 <_sbrk+0x50>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8014e9c:	4b0c      	ldr	r3, [pc, #48]	; (8014ed0 <_sbrk+0x50>)
 8014e9e:	681a      	ldr	r2, [r3, #0]
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	4413      	add	r3, r2
 8014ea4:	466a      	mov	r2, sp
 8014ea6:	4293      	cmp	r3, r2
 8014ea8:	d907      	bls.n	8014eba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8014eaa:	f000 fda9 	bl	8015a00 <__errno>
 8014eae:	4602      	mov	r2, r0
 8014eb0:	230c      	movs	r3, #12
 8014eb2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8014eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8014eb8:	e006      	b.n	8014ec8 <_sbrk+0x48>
	}

	heap_end += incr;
 8014eba:	4b05      	ldr	r3, [pc, #20]	; (8014ed0 <_sbrk+0x50>)
 8014ebc:	681a      	ldr	r2, [r3, #0]
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	4413      	add	r3, r2
 8014ec2:	4a03      	ldr	r2, [pc, #12]	; (8014ed0 <_sbrk+0x50>)
 8014ec4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8014ec6:	68fb      	ldr	r3, [r7, #12]
}
 8014ec8:	4618      	mov	r0, r3
 8014eca:	3710      	adds	r7, #16
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}
 8014ed0:	20000bf4 	.word	0x20000bf4
 8014ed4:	2000a368 	.word	0x2000a368

08014ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014ed8:	b480      	push	{r7}
 8014eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8014edc:	4b16      	ldr	r3, [pc, #88]	; (8014f38 <SystemInit+0x60>)
 8014ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014ee2:	4a15      	ldr	r2, [pc, #84]	; (8014f38 <SystemInit+0x60>)
 8014ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8014eec:	4b13      	ldr	r3, [pc, #76]	; (8014f3c <SystemInit+0x64>)
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	4a12      	ldr	r2, [pc, #72]	; (8014f3c <SystemInit+0x64>)
 8014ef2:	f043 0301 	orr.w	r3, r3, #1
 8014ef6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8014ef8:	4b10      	ldr	r3, [pc, #64]	; (8014f3c <SystemInit+0x64>)
 8014efa:	2200      	movs	r2, #0
 8014efc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8014efe:	4b0f      	ldr	r3, [pc, #60]	; (8014f3c <SystemInit+0x64>)
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	4a0e      	ldr	r2, [pc, #56]	; (8014f3c <SystemInit+0x64>)
 8014f04:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8014f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014f0c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8014f0e:	4b0b      	ldr	r3, [pc, #44]	; (8014f3c <SystemInit+0x64>)
 8014f10:	4a0b      	ldr	r2, [pc, #44]	; (8014f40 <SystemInit+0x68>)
 8014f12:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8014f14:	4b09      	ldr	r3, [pc, #36]	; (8014f3c <SystemInit+0x64>)
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	4a08      	ldr	r2, [pc, #32]	; (8014f3c <SystemInit+0x64>)
 8014f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014f1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8014f20:	4b06      	ldr	r3, [pc, #24]	; (8014f3c <SystemInit+0x64>)
 8014f22:	2200      	movs	r2, #0
 8014f24:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8014f26:	4b04      	ldr	r3, [pc, #16]	; (8014f38 <SystemInit+0x60>)
 8014f28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014f2c:	609a      	str	r2, [r3, #8]
#endif
}
 8014f2e:	bf00      	nop
 8014f30:	46bd      	mov	sp, r7
 8014f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f36:	4770      	bx	lr
 8014f38:	e000ed00 	.word	0xe000ed00
 8014f3c:	40023800 	.word	0x40023800
 8014f40:	24003010 	.word	0x24003010

08014f44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014f48:	2200      	movs	r2, #0
 8014f4a:	4912      	ldr	r1, [pc, #72]	; (8014f94 <MX_USB_DEVICE_Init+0x50>)
 8014f4c:	4812      	ldr	r0, [pc, #72]	; (8014f98 <MX_USB_DEVICE_Init+0x54>)
 8014f4e:	f7f9 fcc7 	bl	800e8e0 <USBD_Init>
 8014f52:	4603      	mov	r3, r0
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d001      	beq.n	8014f5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014f58:	f7ff fa3a 	bl	80143d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014f5c:	490f      	ldr	r1, [pc, #60]	; (8014f9c <MX_USB_DEVICE_Init+0x58>)
 8014f5e:	480e      	ldr	r0, [pc, #56]	; (8014f98 <MX_USB_DEVICE_Init+0x54>)
 8014f60:	f7f9 fce9 	bl	800e936 <USBD_RegisterClass>
 8014f64:	4603      	mov	r3, r0
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d001      	beq.n	8014f6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014f6a:	f7ff fa31 	bl	80143d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014f6e:	490c      	ldr	r1, [pc, #48]	; (8014fa0 <MX_USB_DEVICE_Init+0x5c>)
 8014f70:	4809      	ldr	r0, [pc, #36]	; (8014f98 <MX_USB_DEVICE_Init+0x54>)
 8014f72:	f7f9 fc17 	bl	800e7a4 <USBD_CDC_RegisterInterface>
 8014f76:	4603      	mov	r3, r0
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d001      	beq.n	8014f80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014f7c:	f7ff fa28 	bl	80143d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014f80:	4805      	ldr	r0, [pc, #20]	; (8014f98 <MX_USB_DEVICE_Init+0x54>)
 8014f82:	f7f9 fcf2 	bl	800e96a <USBD_Start>
 8014f86:	4603      	mov	r3, r0
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d001      	beq.n	8014f90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014f8c:	f7ff fa20 	bl	80143d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014f90:	bf00      	nop
 8014f92:	bd80      	pop	{r7, pc}
 8014f94:	20000148 	.word	0x20000148
 8014f98:	20008abc 	.word	0x20008abc
 8014f9c:	20000018 	.word	0x20000018
 8014fa0:	20000138 	.word	0x20000138

08014fa4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014fa8:	2200      	movs	r2, #0
 8014faa:	4905      	ldr	r1, [pc, #20]	; (8014fc0 <CDC_Init_FS+0x1c>)
 8014fac:	4805      	ldr	r0, [pc, #20]	; (8014fc4 <CDC_Init_FS+0x20>)
 8014fae:	f7f9 fc10 	bl	800e7d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014fb2:	4905      	ldr	r1, [pc, #20]	; (8014fc8 <CDC_Init_FS+0x24>)
 8014fb4:	4803      	ldr	r0, [pc, #12]	; (8014fc4 <CDC_Init_FS+0x20>)
 8014fb6:	f7f9 fc26 	bl	800e806 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014fba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	bd80      	pop	{r7, pc}
 8014fc0:	20009558 	.word	0x20009558
 8014fc4:	20008abc 	.word	0x20008abc
 8014fc8:	20008d58 	.word	0x20008d58

08014fcc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014fcc:	b480      	push	{r7}
 8014fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014fd0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fda:	4770      	bx	lr

08014fdc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014fdc:	b480      	push	{r7}
 8014fde:	b085      	sub	sp, #20
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	6039      	str	r1, [r7, #0]
 8014fe6:	71fb      	strb	r3, [r7, #7]
 8014fe8:	4613      	mov	r3, r2
 8014fea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 8014fec:	f107 0308 	add.w	r3, r7, #8
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	601a      	str	r2, [r3, #0]
 8014ff4:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 8014ff8:	79fb      	ldrb	r3, [r7, #7]
 8014ffa:	2b23      	cmp	r3, #35	; 0x23
 8014ffc:	d87c      	bhi.n	80150f8 <CDC_Control_FS+0x11c>
 8014ffe:	a201      	add	r2, pc, #4	; (adr r2, 8015004 <CDC_Control_FS+0x28>)
 8015000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015004:	080150f9 	.word	0x080150f9
 8015008:	080150f9 	.word	0x080150f9
 801500c:	080150f9 	.word	0x080150f9
 8015010:	080150f9 	.word	0x080150f9
 8015014:	080150f9 	.word	0x080150f9
 8015018:	080150f9 	.word	0x080150f9
 801501c:	080150f9 	.word	0x080150f9
 8015020:	080150f9 	.word	0x080150f9
 8015024:	080150f9 	.word	0x080150f9
 8015028:	080150f9 	.word	0x080150f9
 801502c:	080150f9 	.word	0x080150f9
 8015030:	080150f9 	.word	0x080150f9
 8015034:	080150f9 	.word	0x080150f9
 8015038:	080150f9 	.word	0x080150f9
 801503c:	080150f9 	.word	0x080150f9
 8015040:	080150f9 	.word	0x080150f9
 8015044:	080150f9 	.word	0x080150f9
 8015048:	080150f9 	.word	0x080150f9
 801504c:	080150f9 	.word	0x080150f9
 8015050:	080150f9 	.word	0x080150f9
 8015054:	080150f9 	.word	0x080150f9
 8015058:	080150f9 	.word	0x080150f9
 801505c:	080150f9 	.word	0x080150f9
 8015060:	080150f9 	.word	0x080150f9
 8015064:	080150f9 	.word	0x080150f9
 8015068:	080150f9 	.word	0x080150f9
 801506c:	080150f9 	.word	0x080150f9
 8015070:	080150f9 	.word	0x080150f9
 8015074:	080150f9 	.word	0x080150f9
 8015078:	080150f9 	.word	0x080150f9
 801507c:	080150f9 	.word	0x080150f9
 8015080:	080150f9 	.word	0x080150f9
 8015084:	08015095 	.word	0x08015095
 8015088:	080150c1 	.word	0x080150c1
 801508c:	080150f9 	.word	0x080150f9
 8015090:	080150f9 	.word	0x080150f9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	tempbuf[0] = pbuf[0];
 8015094:	683b      	ldr	r3, [r7, #0]
 8015096:	781b      	ldrb	r3, [r3, #0]
 8015098:	723b      	strb	r3, [r7, #8]
        	tempbuf[1] = pbuf[1];
 801509a:	683b      	ldr	r3, [r7, #0]
 801509c:	785b      	ldrb	r3, [r3, #1]
 801509e:	727b      	strb	r3, [r7, #9]
        	tempbuf[2] = pbuf[2];
 80150a0:	683b      	ldr	r3, [r7, #0]
 80150a2:	789b      	ldrb	r3, [r3, #2]
 80150a4:	72bb      	strb	r3, [r7, #10]
        	tempbuf[3] = pbuf[3];
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	78db      	ldrb	r3, [r3, #3]
 80150aa:	72fb      	strb	r3, [r7, #11]
        	tempbuf[4] = pbuf[4];
 80150ac:	683b      	ldr	r3, [r7, #0]
 80150ae:	791b      	ldrb	r3, [r3, #4]
 80150b0:	733b      	strb	r3, [r7, #12]
        	tempbuf[5] = pbuf[5];
 80150b2:	683b      	ldr	r3, [r7, #0]
 80150b4:	795b      	ldrb	r3, [r3, #5]
 80150b6:	737b      	strb	r3, [r7, #13]
        	tempbuf[6] = pbuf[6];
 80150b8:	683b      	ldr	r3, [r7, #0]
 80150ba:	799b      	ldrb	r3, [r3, #6]
 80150bc:	73bb      	strb	r3, [r7, #14]
        	break;
 80150be:	e01c      	b.n	80150fa <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
        	pbuf[0] = tempbuf[0];
 80150c0:	7a3a      	ldrb	r2, [r7, #8]
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	701a      	strb	r2, [r3, #0]
        	pbuf[1] = tempbuf[1];
 80150c6:	683b      	ldr	r3, [r7, #0]
 80150c8:	3301      	adds	r3, #1
 80150ca:	7a7a      	ldrb	r2, [r7, #9]
 80150cc:	701a      	strb	r2, [r3, #0]
        	pbuf[2] = tempbuf[2];
 80150ce:	683b      	ldr	r3, [r7, #0]
 80150d0:	3302      	adds	r3, #2
 80150d2:	7aba      	ldrb	r2, [r7, #10]
 80150d4:	701a      	strb	r2, [r3, #0]
        	pbuf[3] = tempbuf[3];
 80150d6:	683b      	ldr	r3, [r7, #0]
 80150d8:	3303      	adds	r3, #3
 80150da:	7afa      	ldrb	r2, [r7, #11]
 80150dc:	701a      	strb	r2, [r3, #0]
        	pbuf[4] = tempbuf[4];
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	3304      	adds	r3, #4
 80150e2:	7b3a      	ldrb	r2, [r7, #12]
 80150e4:	701a      	strb	r2, [r3, #0]
        	pbuf[5] = tempbuf[5];
 80150e6:	683b      	ldr	r3, [r7, #0]
 80150e8:	3305      	adds	r3, #5
 80150ea:	7b7a      	ldrb	r2, [r7, #13]
 80150ec:	701a      	strb	r2, [r3, #0]
        	pbuf[6] = tempbuf[6];
 80150ee:	683b      	ldr	r3, [r7, #0]
 80150f0:	3306      	adds	r3, #6
 80150f2:	7bba      	ldrb	r2, [r7, #14]
 80150f4:	701a      	strb	r2, [r3, #0]
        	break;
 80150f6:	e000      	b.n	80150fa <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80150f8:	bf00      	nop
  }

  return (USBD_OK);
 80150fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80150fc:	4618      	mov	r0, r3
 80150fe:	3714      	adds	r7, #20
 8015100:	46bd      	mov	sp, r7
 8015102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015106:	4770      	bx	lr

08015108 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b082      	sub	sp, #8
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015112:	6879      	ldr	r1, [r7, #4]
 8015114:	4805      	ldr	r0, [pc, #20]	; (801512c <CDC_Receive_FS+0x24>)
 8015116:	f7f9 fb76 	bl	800e806 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801511a:	4804      	ldr	r0, [pc, #16]	; (801512c <CDC_Receive_FS+0x24>)
 801511c:	f7f9 fbb6 	bl	800e88c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015120:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015122:	4618      	mov	r0, r3
 8015124:	3708      	adds	r7, #8
 8015126:	46bd      	mov	sp, r7
 8015128:	bd80      	pop	{r7, pc}
 801512a:	bf00      	nop
 801512c:	20008abc 	.word	0x20008abc

08015130 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b084      	sub	sp, #16
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
 8015138:	460b      	mov	r3, r1
 801513a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801513c:	2300      	movs	r3, #0
 801513e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015140:	4b0d      	ldr	r3, [pc, #52]	; (8015178 <CDC_Transmit_FS+0x48>)
 8015142:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8015146:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015148:	68bb      	ldr	r3, [r7, #8]
 801514a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801514e:	2b00      	cmp	r3, #0
 8015150:	d001      	beq.n	8015156 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015152:	2301      	movs	r3, #1
 8015154:	e00b      	b.n	801516e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015156:	887b      	ldrh	r3, [r7, #2]
 8015158:	461a      	mov	r2, r3
 801515a:	6879      	ldr	r1, [r7, #4]
 801515c:	4806      	ldr	r0, [pc, #24]	; (8015178 <CDC_Transmit_FS+0x48>)
 801515e:	f7f9 fb38 	bl	800e7d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015162:	4805      	ldr	r0, [pc, #20]	; (8015178 <CDC_Transmit_FS+0x48>)
 8015164:	f7f9 fb63 	bl	800e82e <USBD_CDC_TransmitPacket>
 8015168:	4603      	mov	r3, r0
 801516a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801516c:	7bfb      	ldrb	r3, [r7, #15]
}
 801516e:	4618      	mov	r0, r3
 8015170:	3710      	adds	r7, #16
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}
 8015176:	bf00      	nop
 8015178:	20008abc 	.word	0x20008abc

0801517c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b08a      	sub	sp, #40	; 0x28
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015184:	f107 0314 	add.w	r3, r7, #20
 8015188:	2200      	movs	r2, #0
 801518a:	601a      	str	r2, [r3, #0]
 801518c:	605a      	str	r2, [r3, #4]
 801518e:	609a      	str	r2, [r3, #8]
 8015190:	60da      	str	r2, [r3, #12]
 8015192:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801519c:	d13a      	bne.n	8015214 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801519e:	2300      	movs	r3, #0
 80151a0:	613b      	str	r3, [r7, #16]
 80151a2:	4b1e      	ldr	r3, [pc, #120]	; (801521c <HAL_PCD_MspInit+0xa0>)
 80151a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151a6:	4a1d      	ldr	r2, [pc, #116]	; (801521c <HAL_PCD_MspInit+0xa0>)
 80151a8:	f043 0301 	orr.w	r3, r3, #1
 80151ac:	6313      	str	r3, [r2, #48]	; 0x30
 80151ae:	4b1b      	ldr	r3, [pc, #108]	; (801521c <HAL_PCD_MspInit+0xa0>)
 80151b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151b2:	f003 0301 	and.w	r3, r3, #1
 80151b6:	613b      	str	r3, [r7, #16]
 80151b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80151ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80151be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80151c0:	2302      	movs	r3, #2
 80151c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80151c4:	2300      	movs	r3, #0
 80151c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80151c8:	2303      	movs	r3, #3
 80151ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80151cc:	230a      	movs	r3, #10
 80151ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80151d0:	f107 0314 	add.w	r3, r7, #20
 80151d4:	4619      	mov	r1, r3
 80151d6:	4812      	ldr	r0, [pc, #72]	; (8015220 <HAL_PCD_MspInit+0xa4>)
 80151d8:	f7f0 fc44 	bl	8005a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80151dc:	4b0f      	ldr	r3, [pc, #60]	; (801521c <HAL_PCD_MspInit+0xa0>)
 80151de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80151e0:	4a0e      	ldr	r2, [pc, #56]	; (801521c <HAL_PCD_MspInit+0xa0>)
 80151e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80151e6:	6353      	str	r3, [r2, #52]	; 0x34
 80151e8:	2300      	movs	r3, #0
 80151ea:	60fb      	str	r3, [r7, #12]
 80151ec:	4b0b      	ldr	r3, [pc, #44]	; (801521c <HAL_PCD_MspInit+0xa0>)
 80151ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151f0:	4a0a      	ldr	r2, [pc, #40]	; (801521c <HAL_PCD_MspInit+0xa0>)
 80151f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80151f6:	6453      	str	r3, [r2, #68]	; 0x44
 80151f8:	4b08      	ldr	r3, [pc, #32]	; (801521c <HAL_PCD_MspInit+0xa0>)
 80151fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80151fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015200:	60fb      	str	r3, [r7, #12]
 8015202:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015204:	2200      	movs	r2, #0
 8015206:	2100      	movs	r1, #0
 8015208:	2043      	movs	r0, #67	; 0x43
 801520a:	f7f0 f85c 	bl	80052c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801520e:	2043      	movs	r0, #67	; 0x43
 8015210:	f7f0 f875 	bl	80052fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015214:	bf00      	nop
 8015216:	3728      	adds	r7, #40	; 0x28
 8015218:	46bd      	mov	sp, r7
 801521a:	bd80      	pop	{r7, pc}
 801521c:	40023800 	.word	0x40023800
 8015220:	40020000 	.word	0x40020000

08015224 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015224:	b580      	push	{r7, lr}
 8015226:	b082      	sub	sp, #8
 8015228:	af00      	add	r7, sp, #0
 801522a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015238:	4619      	mov	r1, r3
 801523a:	4610      	mov	r0, r2
 801523c:	f7f9 fbde 	bl	800e9fc <USBD_LL_SetupStage>
}
 8015240:	bf00      	nop
 8015242:	3708      	adds	r7, #8
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}

08015248 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b082      	sub	sp, #8
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
 8015250:	460b      	mov	r3, r1
 8015252:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801525a:	78fa      	ldrb	r2, [r7, #3]
 801525c:	6879      	ldr	r1, [r7, #4]
 801525e:	4613      	mov	r3, r2
 8015260:	00db      	lsls	r3, r3, #3
 8015262:	1a9b      	subs	r3, r3, r2
 8015264:	009b      	lsls	r3, r3, #2
 8015266:	440b      	add	r3, r1
 8015268:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801526c:	681a      	ldr	r2, [r3, #0]
 801526e:	78fb      	ldrb	r3, [r7, #3]
 8015270:	4619      	mov	r1, r3
 8015272:	f7f9 fc0e 	bl	800ea92 <USBD_LL_DataOutStage>
}
 8015276:	bf00      	nop
 8015278:	3708      	adds	r7, #8
 801527a:	46bd      	mov	sp, r7
 801527c:	bd80      	pop	{r7, pc}

0801527e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801527e:	b580      	push	{r7, lr}
 8015280:	b082      	sub	sp, #8
 8015282:	af00      	add	r7, sp, #0
 8015284:	6078      	str	r0, [r7, #4]
 8015286:	460b      	mov	r3, r1
 8015288:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015290:	78fa      	ldrb	r2, [r7, #3]
 8015292:	6879      	ldr	r1, [r7, #4]
 8015294:	4613      	mov	r3, r2
 8015296:	00db      	lsls	r3, r3, #3
 8015298:	1a9b      	subs	r3, r3, r2
 801529a:	009b      	lsls	r3, r3, #2
 801529c:	440b      	add	r3, r1
 801529e:	3348      	adds	r3, #72	; 0x48
 80152a0:	681a      	ldr	r2, [r3, #0]
 80152a2:	78fb      	ldrb	r3, [r7, #3]
 80152a4:	4619      	mov	r1, r3
 80152a6:	f7f9 fc65 	bl	800eb74 <USBD_LL_DataInStage>
}
 80152aa:	bf00      	nop
 80152ac:	3708      	adds	r7, #8
 80152ae:	46bd      	mov	sp, r7
 80152b0:	bd80      	pop	{r7, pc}

080152b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152b2:	b580      	push	{r7, lr}
 80152b4:	b082      	sub	sp, #8
 80152b6:	af00      	add	r7, sp, #0
 80152b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80152c0:	4618      	mov	r0, r3
 80152c2:	f7f9 fd73 	bl	800edac <USBD_LL_SOF>
}
 80152c6:	bf00      	nop
 80152c8:	3708      	adds	r7, #8
 80152ca:	46bd      	mov	sp, r7
 80152cc:	bd80      	pop	{r7, pc}

080152ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80152ce:	b580      	push	{r7, lr}
 80152d0:	b084      	sub	sp, #16
 80152d2:	af00      	add	r7, sp, #0
 80152d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80152d6:	2301      	movs	r3, #1
 80152d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	68db      	ldr	r3, [r3, #12]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d102      	bne.n	80152e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80152e2:	2300      	movs	r3, #0
 80152e4:	73fb      	strb	r3, [r7, #15]
 80152e6:	e008      	b.n	80152fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	68db      	ldr	r3, [r3, #12]
 80152ec:	2b02      	cmp	r3, #2
 80152ee:	d102      	bne.n	80152f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80152f0:	2301      	movs	r3, #1
 80152f2:	73fb      	strb	r3, [r7, #15]
 80152f4:	e001      	b.n	80152fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80152f6:	f7ff f86b 	bl	80143d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015300:	7bfa      	ldrb	r2, [r7, #15]
 8015302:	4611      	mov	r1, r2
 8015304:	4618      	mov	r0, r3
 8015306:	f7f9 fd1b 	bl	800ed40 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015310:	4618      	mov	r0, r3
 8015312:	f7f9 fcd4 	bl	800ecbe <USBD_LL_Reset>
}
 8015316:	bf00      	nop
 8015318:	3710      	adds	r7, #16
 801531a:	46bd      	mov	sp, r7
 801531c:	bd80      	pop	{r7, pc}
	...

08015320 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b082      	sub	sp, #8
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801532e:	4618      	mov	r0, r3
 8015330:	f7f9 fd16 	bl	800ed60 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	687a      	ldr	r2, [r7, #4]
 8015340:	6812      	ldr	r2, [r2, #0]
 8015342:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015346:	f043 0301 	orr.w	r3, r3, #1
 801534a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	6a1b      	ldr	r3, [r3, #32]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d005      	beq.n	8015360 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015354:	4b04      	ldr	r3, [pc, #16]	; (8015368 <HAL_PCD_SuspendCallback+0x48>)
 8015356:	691b      	ldr	r3, [r3, #16]
 8015358:	4a03      	ldr	r2, [pc, #12]	; (8015368 <HAL_PCD_SuspendCallback+0x48>)
 801535a:	f043 0306 	orr.w	r3, r3, #6
 801535e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015360:	bf00      	nop
 8015362:	3708      	adds	r7, #8
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}
 8015368:	e000ed00 	.word	0xe000ed00

0801536c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b082      	sub	sp, #8
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801537a:	4618      	mov	r0, r3
 801537c:	f7f9 fd05 	bl	800ed8a <USBD_LL_Resume>
}
 8015380:	bf00      	nop
 8015382:	3708      	adds	r7, #8
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}

08015388 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b082      	sub	sp, #8
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
 8015390:	460b      	mov	r3, r1
 8015392:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801539a:	78fa      	ldrb	r2, [r7, #3]
 801539c:	4611      	mov	r1, r2
 801539e:	4618      	mov	r0, r3
 80153a0:	f7f9 fd2b 	bl	800edfa <USBD_LL_IsoOUTIncomplete>
}
 80153a4:	bf00      	nop
 80153a6:	3708      	adds	r7, #8
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}

080153ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b082      	sub	sp, #8
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
 80153b4:	460b      	mov	r3, r1
 80153b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80153be:	78fa      	ldrb	r2, [r7, #3]
 80153c0:	4611      	mov	r1, r2
 80153c2:	4618      	mov	r0, r3
 80153c4:	f7f9 fd0c 	bl	800ede0 <USBD_LL_IsoINIncomplete>
}
 80153c8:	bf00      	nop
 80153ca:	3708      	adds	r7, #8
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bd80      	pop	{r7, pc}

080153d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b082      	sub	sp, #8
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80153de:	4618      	mov	r0, r3
 80153e0:	f7f9 fd18 	bl	800ee14 <USBD_LL_DevConnected>
}
 80153e4:	bf00      	nop
 80153e6:	3708      	adds	r7, #8
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}

080153ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b082      	sub	sp, #8
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80153fa:	4618      	mov	r0, r3
 80153fc:	f7f9 fd15 	bl	800ee2a <USBD_LL_DevDisconnected>
}
 8015400:	bf00      	nop
 8015402:	3708      	adds	r7, #8
 8015404:	46bd      	mov	sp, r7
 8015406:	bd80      	pop	{r7, pc}

08015408 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015408:	b580      	push	{r7, lr}
 801540a:	b082      	sub	sp, #8
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	781b      	ldrb	r3, [r3, #0]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d13c      	bne.n	8015492 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015418:	4a20      	ldr	r2, [pc, #128]	; (801549c <USBD_LL_Init+0x94>)
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	4a1e      	ldr	r2, [pc, #120]	; (801549c <USBD_LL_Init+0x94>)
 8015424:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015428:	4b1c      	ldr	r3, [pc, #112]	; (801549c <USBD_LL_Init+0x94>)
 801542a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801542e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015430:	4b1a      	ldr	r3, [pc, #104]	; (801549c <USBD_LL_Init+0x94>)
 8015432:	2204      	movs	r2, #4
 8015434:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015436:	4b19      	ldr	r3, [pc, #100]	; (801549c <USBD_LL_Init+0x94>)
 8015438:	2202      	movs	r2, #2
 801543a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801543c:	4b17      	ldr	r3, [pc, #92]	; (801549c <USBD_LL_Init+0x94>)
 801543e:	2200      	movs	r2, #0
 8015440:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015442:	4b16      	ldr	r3, [pc, #88]	; (801549c <USBD_LL_Init+0x94>)
 8015444:	2202      	movs	r2, #2
 8015446:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015448:	4b14      	ldr	r3, [pc, #80]	; (801549c <USBD_LL_Init+0x94>)
 801544a:	2200      	movs	r2, #0
 801544c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801544e:	4b13      	ldr	r3, [pc, #76]	; (801549c <USBD_LL_Init+0x94>)
 8015450:	2200      	movs	r2, #0
 8015452:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015454:	4b11      	ldr	r3, [pc, #68]	; (801549c <USBD_LL_Init+0x94>)
 8015456:	2200      	movs	r2, #0
 8015458:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801545a:	4b10      	ldr	r3, [pc, #64]	; (801549c <USBD_LL_Init+0x94>)
 801545c:	2200      	movs	r2, #0
 801545e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015460:	4b0e      	ldr	r3, [pc, #56]	; (801549c <USBD_LL_Init+0x94>)
 8015462:	2200      	movs	r2, #0
 8015464:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015466:	480d      	ldr	r0, [pc, #52]	; (801549c <USBD_LL_Init+0x94>)
 8015468:	f7f1 fc61 	bl	8006d2e <HAL_PCD_Init>
 801546c:	4603      	mov	r3, r0
 801546e:	2b00      	cmp	r3, #0
 8015470:	d001      	beq.n	8015476 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015472:	f7fe ffad 	bl	80143d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015476:	2180      	movs	r1, #128	; 0x80
 8015478:	4808      	ldr	r0, [pc, #32]	; (801549c <USBD_LL_Init+0x94>)
 801547a:	f7f2 fdc6 	bl	800800a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801547e:	2240      	movs	r2, #64	; 0x40
 8015480:	2100      	movs	r1, #0
 8015482:	4806      	ldr	r0, [pc, #24]	; (801549c <USBD_LL_Init+0x94>)
 8015484:	f7f2 fd7a 	bl	8007f7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015488:	2280      	movs	r2, #128	; 0x80
 801548a:	2101      	movs	r1, #1
 801548c:	4803      	ldr	r0, [pc, #12]	; (801549c <USBD_LL_Init+0x94>)
 801548e:	f7f2 fd75 	bl	8007f7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015492:	2300      	movs	r3, #0
}
 8015494:	4618      	mov	r0, r3
 8015496:	3708      	adds	r7, #8
 8015498:	46bd      	mov	sp, r7
 801549a:	bd80      	pop	{r7, pc}
 801549c:	20009d58 	.word	0x20009d58

080154a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b084      	sub	sp, #16
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154a8:	2300      	movs	r3, #0
 80154aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154ac:	2300      	movs	r3, #0
 80154ae:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7f1 fd56 	bl	8006f68 <HAL_PCD_Start>
 80154bc:	4603      	mov	r3, r0
 80154be:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80154c0:	7bfb      	ldrb	r3, [r7, #15]
 80154c2:	4618      	mov	r0, r3
 80154c4:	f000 f92e 	bl	8015724 <USBD_Get_USB_Status>
 80154c8:	4603      	mov	r3, r0
 80154ca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80154cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80154ce:	4618      	mov	r0, r3
 80154d0:	3710      	adds	r7, #16
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}

080154d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80154d6:	b580      	push	{r7, lr}
 80154d8:	b084      	sub	sp, #16
 80154da:	af00      	add	r7, sp, #0
 80154dc:	6078      	str	r0, [r7, #4]
 80154de:	4608      	mov	r0, r1
 80154e0:	4611      	mov	r1, r2
 80154e2:	461a      	mov	r2, r3
 80154e4:	4603      	mov	r3, r0
 80154e6:	70fb      	strb	r3, [r7, #3]
 80154e8:	460b      	mov	r3, r1
 80154ea:	70bb      	strb	r3, [r7, #2]
 80154ec:	4613      	mov	r3, r2
 80154ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154f0:	2300      	movs	r3, #0
 80154f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154f4:	2300      	movs	r3, #0
 80154f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80154fe:	78bb      	ldrb	r3, [r7, #2]
 8015500:	883a      	ldrh	r2, [r7, #0]
 8015502:	78f9      	ldrb	r1, [r7, #3]
 8015504:	f7f2 f92b 	bl	800775e <HAL_PCD_EP_Open>
 8015508:	4603      	mov	r3, r0
 801550a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801550c:	7bfb      	ldrb	r3, [r7, #15]
 801550e:	4618      	mov	r0, r3
 8015510:	f000 f908 	bl	8015724 <USBD_Get_USB_Status>
 8015514:	4603      	mov	r3, r0
 8015516:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015518:	7bbb      	ldrb	r3, [r7, #14]
}
 801551a:	4618      	mov	r0, r3
 801551c:	3710      	adds	r7, #16
 801551e:	46bd      	mov	sp, r7
 8015520:	bd80      	pop	{r7, pc}

08015522 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015522:	b580      	push	{r7, lr}
 8015524:	b084      	sub	sp, #16
 8015526:	af00      	add	r7, sp, #0
 8015528:	6078      	str	r0, [r7, #4]
 801552a:	460b      	mov	r3, r1
 801552c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801552e:	2300      	movs	r3, #0
 8015530:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015532:	2300      	movs	r3, #0
 8015534:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801553c:	78fa      	ldrb	r2, [r7, #3]
 801553e:	4611      	mov	r1, r2
 8015540:	4618      	mov	r0, r3
 8015542:	f7f2 f974 	bl	800782e <HAL_PCD_EP_Close>
 8015546:	4603      	mov	r3, r0
 8015548:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801554a:	7bfb      	ldrb	r3, [r7, #15]
 801554c:	4618      	mov	r0, r3
 801554e:	f000 f8e9 	bl	8015724 <USBD_Get_USB_Status>
 8015552:	4603      	mov	r3, r0
 8015554:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8015556:	7bbb      	ldrb	r3, [r7, #14]
}
 8015558:	4618      	mov	r0, r3
 801555a:	3710      	adds	r7, #16
 801555c:	46bd      	mov	sp, r7
 801555e:	bd80      	pop	{r7, pc}

08015560 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015560:	b580      	push	{r7, lr}
 8015562:	b084      	sub	sp, #16
 8015564:	af00      	add	r7, sp, #0
 8015566:	6078      	str	r0, [r7, #4]
 8015568:	460b      	mov	r3, r1
 801556a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801556c:	2300      	movs	r3, #0
 801556e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015570:	2300      	movs	r3, #0
 8015572:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801557a:	78fa      	ldrb	r2, [r7, #3]
 801557c:	4611      	mov	r1, r2
 801557e:	4618      	mov	r0, r3
 8015580:	f7f2 fa4c 	bl	8007a1c <HAL_PCD_EP_SetStall>
 8015584:	4603      	mov	r3, r0
 8015586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015588:	7bfb      	ldrb	r3, [r7, #15]
 801558a:	4618      	mov	r0, r3
 801558c:	f000 f8ca 	bl	8015724 <USBD_Get_USB_Status>
 8015590:	4603      	mov	r3, r0
 8015592:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015594:	7bbb      	ldrb	r3, [r7, #14]
}
 8015596:	4618      	mov	r0, r3
 8015598:	3710      	adds	r7, #16
 801559a:	46bd      	mov	sp, r7
 801559c:	bd80      	pop	{r7, pc}

0801559e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801559e:	b580      	push	{r7, lr}
 80155a0:	b084      	sub	sp, #16
 80155a2:	af00      	add	r7, sp, #0
 80155a4:	6078      	str	r0, [r7, #4]
 80155a6:	460b      	mov	r3, r1
 80155a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155aa:	2300      	movs	r3, #0
 80155ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155ae:	2300      	movs	r3, #0
 80155b0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80155b8:	78fa      	ldrb	r2, [r7, #3]
 80155ba:	4611      	mov	r1, r2
 80155bc:	4618      	mov	r0, r3
 80155be:	f7f2 fa91 	bl	8007ae4 <HAL_PCD_EP_ClrStall>
 80155c2:	4603      	mov	r3, r0
 80155c4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80155c6:	7bfb      	ldrb	r3, [r7, #15]
 80155c8:	4618      	mov	r0, r3
 80155ca:	f000 f8ab 	bl	8015724 <USBD_Get_USB_Status>
 80155ce:	4603      	mov	r3, r0
 80155d0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80155d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80155d4:	4618      	mov	r0, r3
 80155d6:	3710      	adds	r7, #16
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}

080155dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80155dc:	b480      	push	{r7}
 80155de:	b085      	sub	sp, #20
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
 80155e4:	460b      	mov	r3, r1
 80155e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80155ee:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80155f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	da0b      	bge.n	8015610 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80155f8:	78fb      	ldrb	r3, [r7, #3]
 80155fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80155fe:	68f9      	ldr	r1, [r7, #12]
 8015600:	4613      	mov	r3, r2
 8015602:	00db      	lsls	r3, r3, #3
 8015604:	1a9b      	subs	r3, r3, r2
 8015606:	009b      	lsls	r3, r3, #2
 8015608:	440b      	add	r3, r1
 801560a:	333e      	adds	r3, #62	; 0x3e
 801560c:	781b      	ldrb	r3, [r3, #0]
 801560e:	e00b      	b.n	8015628 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8015610:	78fb      	ldrb	r3, [r7, #3]
 8015612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015616:	68f9      	ldr	r1, [r7, #12]
 8015618:	4613      	mov	r3, r2
 801561a:	00db      	lsls	r3, r3, #3
 801561c:	1a9b      	subs	r3, r3, r2
 801561e:	009b      	lsls	r3, r3, #2
 8015620:	440b      	add	r3, r1
 8015622:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015626:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015628:	4618      	mov	r0, r3
 801562a:	3714      	adds	r7, #20
 801562c:	46bd      	mov	sp, r7
 801562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015632:	4770      	bx	lr

08015634 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b084      	sub	sp, #16
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
 801563c:	460b      	mov	r3, r1
 801563e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015640:	2300      	movs	r3, #0
 8015642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015644:	2300      	movs	r3, #0
 8015646:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801564e:	78fa      	ldrb	r2, [r7, #3]
 8015650:	4611      	mov	r1, r2
 8015652:	4618      	mov	r0, r3
 8015654:	f7f2 f85e 	bl	8007714 <HAL_PCD_SetAddress>
 8015658:	4603      	mov	r3, r0
 801565a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801565c:	7bfb      	ldrb	r3, [r7, #15]
 801565e:	4618      	mov	r0, r3
 8015660:	f000 f860 	bl	8015724 <USBD_Get_USB_Status>
 8015664:	4603      	mov	r3, r0
 8015666:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015668:	7bbb      	ldrb	r3, [r7, #14]
}
 801566a:	4618      	mov	r0, r3
 801566c:	3710      	adds	r7, #16
 801566e:	46bd      	mov	sp, r7
 8015670:	bd80      	pop	{r7, pc}

08015672 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015672:	b580      	push	{r7, lr}
 8015674:	b086      	sub	sp, #24
 8015676:	af00      	add	r7, sp, #0
 8015678:	60f8      	str	r0, [r7, #12]
 801567a:	607a      	str	r2, [r7, #4]
 801567c:	461a      	mov	r2, r3
 801567e:	460b      	mov	r3, r1
 8015680:	72fb      	strb	r3, [r7, #11]
 8015682:	4613      	mov	r3, r2
 8015684:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015686:	2300      	movs	r3, #0
 8015688:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801568a:	2300      	movs	r3, #0
 801568c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8015694:	893b      	ldrh	r3, [r7, #8]
 8015696:	7af9      	ldrb	r1, [r7, #11]
 8015698:	687a      	ldr	r2, [r7, #4]
 801569a:	f7f2 f975 	bl	8007988 <HAL_PCD_EP_Transmit>
 801569e:	4603      	mov	r3, r0
 80156a0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80156a2:	7dfb      	ldrb	r3, [r7, #23]
 80156a4:	4618      	mov	r0, r3
 80156a6:	f000 f83d 	bl	8015724 <USBD_Get_USB_Status>
 80156aa:	4603      	mov	r3, r0
 80156ac:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80156ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80156b0:	4618      	mov	r0, r3
 80156b2:	3718      	adds	r7, #24
 80156b4:	46bd      	mov	sp, r7
 80156b6:	bd80      	pop	{r7, pc}

080156b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b086      	sub	sp, #24
 80156bc:	af00      	add	r7, sp, #0
 80156be:	60f8      	str	r0, [r7, #12]
 80156c0:	607a      	str	r2, [r7, #4]
 80156c2:	461a      	mov	r2, r3
 80156c4:	460b      	mov	r3, r1
 80156c6:	72fb      	strb	r3, [r7, #11]
 80156c8:	4613      	mov	r3, r2
 80156ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80156cc:	2300      	movs	r3, #0
 80156ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156d0:	2300      	movs	r3, #0
 80156d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80156da:	893b      	ldrh	r3, [r7, #8]
 80156dc:	7af9      	ldrb	r1, [r7, #11]
 80156de:	687a      	ldr	r2, [r7, #4]
 80156e0:	f7f2 f8ef 	bl	80078c2 <HAL_PCD_EP_Receive>
 80156e4:	4603      	mov	r3, r0
 80156e6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80156e8:	7dfb      	ldrb	r3, [r7, #23]
 80156ea:	4618      	mov	r0, r3
 80156ec:	f000 f81a 	bl	8015724 <USBD_Get_USB_Status>
 80156f0:	4603      	mov	r3, r0
 80156f2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80156f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80156f6:	4618      	mov	r0, r3
 80156f8:	3718      	adds	r7, #24
 80156fa:	46bd      	mov	sp, r7
 80156fc:	bd80      	pop	{r7, pc}

080156fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80156fe:	b580      	push	{r7, lr}
 8015700:	b082      	sub	sp, #8
 8015702:	af00      	add	r7, sp, #0
 8015704:	6078      	str	r0, [r7, #4]
 8015706:	460b      	mov	r3, r1
 8015708:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015710:	78fa      	ldrb	r2, [r7, #3]
 8015712:	4611      	mov	r1, r2
 8015714:	4618      	mov	r0, r3
 8015716:	f7f2 f91f 	bl	8007958 <HAL_PCD_EP_GetRxCount>
 801571a:	4603      	mov	r3, r0
}
 801571c:	4618      	mov	r0, r3
 801571e:	3708      	adds	r7, #8
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}

08015724 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015724:	b480      	push	{r7}
 8015726:	b085      	sub	sp, #20
 8015728:	af00      	add	r7, sp, #0
 801572a:	4603      	mov	r3, r0
 801572c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801572e:	2300      	movs	r3, #0
 8015730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015732:	79fb      	ldrb	r3, [r7, #7]
 8015734:	2b03      	cmp	r3, #3
 8015736:	d817      	bhi.n	8015768 <USBD_Get_USB_Status+0x44>
 8015738:	a201      	add	r2, pc, #4	; (adr r2, 8015740 <USBD_Get_USB_Status+0x1c>)
 801573a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801573e:	bf00      	nop
 8015740:	08015751 	.word	0x08015751
 8015744:	08015757 	.word	0x08015757
 8015748:	0801575d 	.word	0x0801575d
 801574c:	08015763 	.word	0x08015763
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015750:	2300      	movs	r3, #0
 8015752:	73fb      	strb	r3, [r7, #15]
    break;
 8015754:	e00b      	b.n	801576e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015756:	2302      	movs	r3, #2
 8015758:	73fb      	strb	r3, [r7, #15]
    break;
 801575a:	e008      	b.n	801576e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801575c:	2301      	movs	r3, #1
 801575e:	73fb      	strb	r3, [r7, #15]
    break;
 8015760:	e005      	b.n	801576e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015762:	2302      	movs	r3, #2
 8015764:	73fb      	strb	r3, [r7, #15]
    break;
 8015766:	e002      	b.n	801576e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015768:	2302      	movs	r3, #2
 801576a:	73fb      	strb	r3, [r7, #15]
    break;
 801576c:	bf00      	nop
  }
  return usb_status;
 801576e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015770:	4618      	mov	r0, r3
 8015772:	3714      	adds	r7, #20
 8015774:	46bd      	mov	sp, r7
 8015776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577a:	4770      	bx	lr

0801577c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801577c:	b480      	push	{r7}
 801577e:	b083      	sub	sp, #12
 8015780:	af00      	add	r7, sp, #0
 8015782:	4603      	mov	r3, r0
 8015784:	6039      	str	r1, [r7, #0]
 8015786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015788:	683b      	ldr	r3, [r7, #0]
 801578a:	2212      	movs	r2, #18
 801578c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801578e:	4b03      	ldr	r3, [pc, #12]	; (801579c <USBD_FS_DeviceDescriptor+0x20>)
}
 8015790:	4618      	mov	r0, r3
 8015792:	370c      	adds	r7, #12
 8015794:	46bd      	mov	sp, r7
 8015796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579a:	4770      	bx	lr
 801579c:	20000164 	.word	0x20000164

080157a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157a0:	b480      	push	{r7}
 80157a2:	b083      	sub	sp, #12
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	4603      	mov	r3, r0
 80157a8:	6039      	str	r1, [r7, #0]
 80157aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	2204      	movs	r2, #4
 80157b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80157b2:	4b03      	ldr	r3, [pc, #12]	; (80157c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80157b4:	4618      	mov	r0, r3
 80157b6:	370c      	adds	r7, #12
 80157b8:	46bd      	mov	sp, r7
 80157ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157be:	4770      	bx	lr
 80157c0:	20000178 	.word	0x20000178

080157c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b082      	sub	sp, #8
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	4603      	mov	r3, r0
 80157cc:	6039      	str	r1, [r7, #0]
 80157ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80157d0:	79fb      	ldrb	r3, [r7, #7]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d105      	bne.n	80157e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80157d6:	683a      	ldr	r2, [r7, #0]
 80157d8:	4907      	ldr	r1, [pc, #28]	; (80157f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80157da:	4808      	ldr	r0, [pc, #32]	; (80157fc <USBD_FS_ProductStrDescriptor+0x38>)
 80157dc:	f7f9 fffc 	bl	800f7d8 <USBD_GetString>
 80157e0:	e004      	b.n	80157ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80157e2:	683a      	ldr	r2, [r7, #0]
 80157e4:	4904      	ldr	r1, [pc, #16]	; (80157f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80157e6:	4805      	ldr	r0, [pc, #20]	; (80157fc <USBD_FS_ProductStrDescriptor+0x38>)
 80157e8:	f7f9 fff6 	bl	800f7d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80157ec:	4b02      	ldr	r3, [pc, #8]	; (80157f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80157ee:	4618      	mov	r0, r3
 80157f0:	3708      	adds	r7, #8
 80157f2:	46bd      	mov	sp, r7
 80157f4:	bd80      	pop	{r7, pc}
 80157f6:	bf00      	nop
 80157f8:	2000a160 	.word	0x2000a160
 80157fc:	0801be34 	.word	0x0801be34

08015800 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b082      	sub	sp, #8
 8015804:	af00      	add	r7, sp, #0
 8015806:	4603      	mov	r3, r0
 8015808:	6039      	str	r1, [r7, #0]
 801580a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801580c:	683a      	ldr	r2, [r7, #0]
 801580e:	4904      	ldr	r1, [pc, #16]	; (8015820 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015810:	4804      	ldr	r0, [pc, #16]	; (8015824 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015812:	f7f9 ffe1 	bl	800f7d8 <USBD_GetString>
  return USBD_StrDesc;
 8015816:	4b02      	ldr	r3, [pc, #8]	; (8015820 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015818:	4618      	mov	r0, r3
 801581a:	3708      	adds	r7, #8
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}
 8015820:	2000a160 	.word	0x2000a160
 8015824:	0801be40 	.word	0x0801be40

08015828 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
 801582e:	4603      	mov	r3, r0
 8015830:	6039      	str	r1, [r7, #0]
 8015832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015834:	683b      	ldr	r3, [r7, #0]
 8015836:	221a      	movs	r2, #26
 8015838:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801583a:	f000 f843 	bl	80158c4 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 801583e:	4b02      	ldr	r3, [pc, #8]	; (8015848 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015840:	4618      	mov	r0, r3
 8015842:	3708      	adds	r7, #8
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}
 8015848:	2000017c 	.word	0x2000017c

0801584c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b082      	sub	sp, #8
 8015850:	af00      	add	r7, sp, #0
 8015852:	4603      	mov	r3, r0
 8015854:	6039      	str	r1, [r7, #0]
 8015856:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015858:	79fb      	ldrb	r3, [r7, #7]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d105      	bne.n	801586a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801585e:	683a      	ldr	r2, [r7, #0]
 8015860:	4907      	ldr	r1, [pc, #28]	; (8015880 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015862:	4808      	ldr	r0, [pc, #32]	; (8015884 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015864:	f7f9 ffb8 	bl	800f7d8 <USBD_GetString>
 8015868:	e004      	b.n	8015874 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801586a:	683a      	ldr	r2, [r7, #0]
 801586c:	4904      	ldr	r1, [pc, #16]	; (8015880 <USBD_FS_ConfigStrDescriptor+0x34>)
 801586e:	4805      	ldr	r0, [pc, #20]	; (8015884 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015870:	f7f9 ffb2 	bl	800f7d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015874:	4b02      	ldr	r3, [pc, #8]	; (8015880 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015876:	4618      	mov	r0, r3
 8015878:	3708      	adds	r7, #8
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}
 801587e:	bf00      	nop
 8015880:	2000a160 	.word	0x2000a160
 8015884:	0801be54 	.word	0x0801be54

08015888 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b082      	sub	sp, #8
 801588c:	af00      	add	r7, sp, #0
 801588e:	4603      	mov	r3, r0
 8015890:	6039      	str	r1, [r7, #0]
 8015892:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015894:	79fb      	ldrb	r3, [r7, #7]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d105      	bne.n	80158a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801589a:	683a      	ldr	r2, [r7, #0]
 801589c:	4907      	ldr	r1, [pc, #28]	; (80158bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801589e:	4808      	ldr	r0, [pc, #32]	; (80158c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80158a0:	f7f9 ff9a 	bl	800f7d8 <USBD_GetString>
 80158a4:	e004      	b.n	80158b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80158a6:	683a      	ldr	r2, [r7, #0]
 80158a8:	4904      	ldr	r1, [pc, #16]	; (80158bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80158aa:	4805      	ldr	r0, [pc, #20]	; (80158c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80158ac:	f7f9 ff94 	bl	800f7d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80158b0:	4b02      	ldr	r3, [pc, #8]	; (80158bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80158b2:	4618      	mov	r0, r3
 80158b4:	3708      	adds	r7, #8
 80158b6:	46bd      	mov	sp, r7
 80158b8:	bd80      	pop	{r7, pc}
 80158ba:	bf00      	nop
 80158bc:	2000a160 	.word	0x2000a160
 80158c0:	0801be60 	.word	0x0801be60

080158c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b084      	sub	sp, #16
 80158c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80158ca:	4b0f      	ldr	r3, [pc, #60]	; (8015908 <Get_SerialNum+0x44>)
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80158d0:	4b0e      	ldr	r3, [pc, #56]	; (801590c <Get_SerialNum+0x48>)
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80158d6:	4b0e      	ldr	r3, [pc, #56]	; (8015910 <Get_SerialNum+0x4c>)
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80158dc:	68fa      	ldr	r2, [r7, #12]
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	4413      	add	r3, r2
 80158e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d009      	beq.n	80158fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80158ea:	2208      	movs	r2, #8
 80158ec:	4909      	ldr	r1, [pc, #36]	; (8015914 <Get_SerialNum+0x50>)
 80158ee:	68f8      	ldr	r0, [r7, #12]
 80158f0:	f000 f814 	bl	801591c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80158f4:	2204      	movs	r2, #4
 80158f6:	4908      	ldr	r1, [pc, #32]	; (8015918 <Get_SerialNum+0x54>)
 80158f8:	68b8      	ldr	r0, [r7, #8]
 80158fa:	f000 f80f 	bl	801591c <IntToUnicode>
  }
}
 80158fe:	bf00      	nop
 8015900:	3710      	adds	r7, #16
 8015902:	46bd      	mov	sp, r7
 8015904:	bd80      	pop	{r7, pc}
 8015906:	bf00      	nop
 8015908:	1fff7a10 	.word	0x1fff7a10
 801590c:	1fff7a14 	.word	0x1fff7a14
 8015910:	1fff7a18 	.word	0x1fff7a18
 8015914:	2000017e 	.word	0x2000017e
 8015918:	2000018e 	.word	0x2000018e

0801591c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801591c:	b480      	push	{r7}
 801591e:	b087      	sub	sp, #28
 8015920:	af00      	add	r7, sp, #0
 8015922:	60f8      	str	r0, [r7, #12]
 8015924:	60b9      	str	r1, [r7, #8]
 8015926:	4613      	mov	r3, r2
 8015928:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801592a:	2300      	movs	r3, #0
 801592c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801592e:	2300      	movs	r3, #0
 8015930:	75fb      	strb	r3, [r7, #23]
 8015932:	e027      	b.n	8015984 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	0f1b      	lsrs	r3, r3, #28
 8015938:	2b09      	cmp	r3, #9
 801593a:	d80b      	bhi.n	8015954 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	0f1b      	lsrs	r3, r3, #28
 8015940:	b2da      	uxtb	r2, r3
 8015942:	7dfb      	ldrb	r3, [r7, #23]
 8015944:	005b      	lsls	r3, r3, #1
 8015946:	4619      	mov	r1, r3
 8015948:	68bb      	ldr	r3, [r7, #8]
 801594a:	440b      	add	r3, r1
 801594c:	3230      	adds	r2, #48	; 0x30
 801594e:	b2d2      	uxtb	r2, r2
 8015950:	701a      	strb	r2, [r3, #0]
 8015952:	e00a      	b.n	801596a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	0f1b      	lsrs	r3, r3, #28
 8015958:	b2da      	uxtb	r2, r3
 801595a:	7dfb      	ldrb	r3, [r7, #23]
 801595c:	005b      	lsls	r3, r3, #1
 801595e:	4619      	mov	r1, r3
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	440b      	add	r3, r1
 8015964:	3237      	adds	r2, #55	; 0x37
 8015966:	b2d2      	uxtb	r2, r2
 8015968:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	011b      	lsls	r3, r3, #4
 801596e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015970:	7dfb      	ldrb	r3, [r7, #23]
 8015972:	005b      	lsls	r3, r3, #1
 8015974:	3301      	adds	r3, #1
 8015976:	68ba      	ldr	r2, [r7, #8]
 8015978:	4413      	add	r3, r2
 801597a:	2200      	movs	r2, #0
 801597c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801597e:	7dfb      	ldrb	r3, [r7, #23]
 8015980:	3301      	adds	r3, #1
 8015982:	75fb      	strb	r3, [r7, #23]
 8015984:	7dfa      	ldrb	r2, [r7, #23]
 8015986:	79fb      	ldrb	r3, [r7, #7]
 8015988:	429a      	cmp	r2, r3
 801598a:	d3d3      	bcc.n	8015934 <IntToUnicode+0x18>
  }
}
 801598c:	bf00      	nop
 801598e:	371c      	adds	r7, #28
 8015990:	46bd      	mov	sp, r7
 8015992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015996:	4770      	bx	lr

08015998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8015998:	f8df d034 	ldr.w	sp, [pc, #52]	; 80159d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801599c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801599e:	e003      	b.n	80159a8 <LoopCopyDataInit>

080159a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80159a0:	4b0c      	ldr	r3, [pc, #48]	; (80159d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80159a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80159a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80159a6:	3104      	adds	r1, #4

080159a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80159a8:	480b      	ldr	r0, [pc, #44]	; (80159d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80159aa:	4b0c      	ldr	r3, [pc, #48]	; (80159dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80159ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80159ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80159b0:	d3f6      	bcc.n	80159a0 <CopyDataInit>
  ldr  r2, =_sbss
 80159b2:	4a0b      	ldr	r2, [pc, #44]	; (80159e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80159b4:	e002      	b.n	80159bc <LoopFillZerobss>

080159b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80159b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80159b8:	f842 3b04 	str.w	r3, [r2], #4

080159bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80159bc:	4b09      	ldr	r3, [pc, #36]	; (80159e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80159be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80159c0:	d3f9      	bcc.n	80159b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80159c2:	f7ff fa89 	bl	8014ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80159c6:	f000 f821 	bl	8015a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80159ca:	f7fe f8af 	bl	8013b2c <main>
  bx  lr    
 80159ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80159d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80159d4:	0801c420 	.word	0x0801c420
  ldr  r0, =_sdata
 80159d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80159dc:	2000036c 	.word	0x2000036c
  ldr  r2, =_sbss
 80159e0:	20000370 	.word	0x20000370
  ldr  r3, = _ebss
 80159e4:	2000a364 	.word	0x2000a364

080159e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80159e8:	e7fe      	b.n	80159e8 <ADC_IRQHandler>

080159ea <atof>:
 80159ea:	2100      	movs	r1, #0
 80159ec:	f001 bde0 	b.w	80175b0 <strtod>

080159f0 <atoi>:
 80159f0:	220a      	movs	r2, #10
 80159f2:	2100      	movs	r1, #0
 80159f4:	f001 be7e 	b.w	80176f4 <strtol>

080159f8 <atol>:
 80159f8:	220a      	movs	r2, #10
 80159fa:	2100      	movs	r1, #0
 80159fc:	f001 be7a 	b.w	80176f4 <strtol>

08015a00 <__errno>:
 8015a00:	4b01      	ldr	r3, [pc, #4]	; (8015a08 <__errno+0x8>)
 8015a02:	6818      	ldr	r0, [r3, #0]
 8015a04:	4770      	bx	lr
 8015a06:	bf00      	nop
 8015a08:	20000198 	.word	0x20000198

08015a0c <__libc_init_array>:
 8015a0c:	b570      	push	{r4, r5, r6, lr}
 8015a0e:	4e0d      	ldr	r6, [pc, #52]	; (8015a44 <__libc_init_array+0x38>)
 8015a10:	4c0d      	ldr	r4, [pc, #52]	; (8015a48 <__libc_init_array+0x3c>)
 8015a12:	1ba4      	subs	r4, r4, r6
 8015a14:	10a4      	asrs	r4, r4, #2
 8015a16:	2500      	movs	r5, #0
 8015a18:	42a5      	cmp	r5, r4
 8015a1a:	d109      	bne.n	8015a30 <__libc_init_array+0x24>
 8015a1c:	4e0b      	ldr	r6, [pc, #44]	; (8015a4c <__libc_init_array+0x40>)
 8015a1e:	4c0c      	ldr	r4, [pc, #48]	; (8015a50 <__libc_init_array+0x44>)
 8015a20:	f005 fd90 	bl	801b544 <_init>
 8015a24:	1ba4      	subs	r4, r4, r6
 8015a26:	10a4      	asrs	r4, r4, #2
 8015a28:	2500      	movs	r5, #0
 8015a2a:	42a5      	cmp	r5, r4
 8015a2c:	d105      	bne.n	8015a3a <__libc_init_array+0x2e>
 8015a2e:	bd70      	pop	{r4, r5, r6, pc}
 8015a30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015a34:	4798      	blx	r3
 8015a36:	3501      	adds	r5, #1
 8015a38:	e7ee      	b.n	8015a18 <__libc_init_array+0xc>
 8015a3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015a3e:	4798      	blx	r3
 8015a40:	3501      	adds	r5, #1
 8015a42:	e7f2      	b.n	8015a2a <__libc_init_array+0x1e>
 8015a44:	0801c418 	.word	0x0801c418
 8015a48:	0801c418 	.word	0x0801c418
 8015a4c:	0801c418 	.word	0x0801c418
 8015a50:	0801c41c 	.word	0x0801c41c

08015a54 <malloc>:
 8015a54:	4b02      	ldr	r3, [pc, #8]	; (8015a60 <malloc+0xc>)
 8015a56:	4601      	mov	r1, r0
 8015a58:	6818      	ldr	r0, [r3, #0]
 8015a5a:	f000 b86d 	b.w	8015b38 <_malloc_r>
 8015a5e:	bf00      	nop
 8015a60:	20000198 	.word	0x20000198

08015a64 <free>:
 8015a64:	4b02      	ldr	r3, [pc, #8]	; (8015a70 <free+0xc>)
 8015a66:	4601      	mov	r1, r0
 8015a68:	6818      	ldr	r0, [r3, #0]
 8015a6a:	f000 b817 	b.w	8015a9c <_free_r>
 8015a6e:	bf00      	nop
 8015a70:	20000198 	.word	0x20000198

08015a74 <memcpy>:
 8015a74:	b510      	push	{r4, lr}
 8015a76:	1e43      	subs	r3, r0, #1
 8015a78:	440a      	add	r2, r1
 8015a7a:	4291      	cmp	r1, r2
 8015a7c:	d100      	bne.n	8015a80 <memcpy+0xc>
 8015a7e:	bd10      	pop	{r4, pc}
 8015a80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015a88:	e7f7      	b.n	8015a7a <memcpy+0x6>

08015a8a <memset>:
 8015a8a:	4402      	add	r2, r0
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	4293      	cmp	r3, r2
 8015a90:	d100      	bne.n	8015a94 <memset+0xa>
 8015a92:	4770      	bx	lr
 8015a94:	f803 1b01 	strb.w	r1, [r3], #1
 8015a98:	e7f9      	b.n	8015a8e <memset+0x4>
	...

08015a9c <_free_r>:
 8015a9c:	b538      	push	{r3, r4, r5, lr}
 8015a9e:	4605      	mov	r5, r0
 8015aa0:	2900      	cmp	r1, #0
 8015aa2:	d045      	beq.n	8015b30 <_free_r+0x94>
 8015aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015aa8:	1f0c      	subs	r4, r1, #4
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	bfb8      	it	lt
 8015aae:	18e4      	addlt	r4, r4, r3
 8015ab0:	f002 ffc6 	bl	8018a40 <__malloc_lock>
 8015ab4:	4a1f      	ldr	r2, [pc, #124]	; (8015b34 <_free_r+0x98>)
 8015ab6:	6813      	ldr	r3, [r2, #0]
 8015ab8:	4610      	mov	r0, r2
 8015aba:	b933      	cbnz	r3, 8015aca <_free_r+0x2e>
 8015abc:	6063      	str	r3, [r4, #4]
 8015abe:	6014      	str	r4, [r2, #0]
 8015ac0:	4628      	mov	r0, r5
 8015ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ac6:	f002 bfbc 	b.w	8018a42 <__malloc_unlock>
 8015aca:	42a3      	cmp	r3, r4
 8015acc:	d90c      	bls.n	8015ae8 <_free_r+0x4c>
 8015ace:	6821      	ldr	r1, [r4, #0]
 8015ad0:	1862      	adds	r2, r4, r1
 8015ad2:	4293      	cmp	r3, r2
 8015ad4:	bf04      	itt	eq
 8015ad6:	681a      	ldreq	r2, [r3, #0]
 8015ad8:	685b      	ldreq	r3, [r3, #4]
 8015ada:	6063      	str	r3, [r4, #4]
 8015adc:	bf04      	itt	eq
 8015ade:	1852      	addeq	r2, r2, r1
 8015ae0:	6022      	streq	r2, [r4, #0]
 8015ae2:	6004      	str	r4, [r0, #0]
 8015ae4:	e7ec      	b.n	8015ac0 <_free_r+0x24>
 8015ae6:	4613      	mov	r3, r2
 8015ae8:	685a      	ldr	r2, [r3, #4]
 8015aea:	b10a      	cbz	r2, 8015af0 <_free_r+0x54>
 8015aec:	42a2      	cmp	r2, r4
 8015aee:	d9fa      	bls.n	8015ae6 <_free_r+0x4a>
 8015af0:	6819      	ldr	r1, [r3, #0]
 8015af2:	1858      	adds	r0, r3, r1
 8015af4:	42a0      	cmp	r0, r4
 8015af6:	d10b      	bne.n	8015b10 <_free_r+0x74>
 8015af8:	6820      	ldr	r0, [r4, #0]
 8015afa:	4401      	add	r1, r0
 8015afc:	1858      	adds	r0, r3, r1
 8015afe:	4282      	cmp	r2, r0
 8015b00:	6019      	str	r1, [r3, #0]
 8015b02:	d1dd      	bne.n	8015ac0 <_free_r+0x24>
 8015b04:	6810      	ldr	r0, [r2, #0]
 8015b06:	6852      	ldr	r2, [r2, #4]
 8015b08:	605a      	str	r2, [r3, #4]
 8015b0a:	4401      	add	r1, r0
 8015b0c:	6019      	str	r1, [r3, #0]
 8015b0e:	e7d7      	b.n	8015ac0 <_free_r+0x24>
 8015b10:	d902      	bls.n	8015b18 <_free_r+0x7c>
 8015b12:	230c      	movs	r3, #12
 8015b14:	602b      	str	r3, [r5, #0]
 8015b16:	e7d3      	b.n	8015ac0 <_free_r+0x24>
 8015b18:	6820      	ldr	r0, [r4, #0]
 8015b1a:	1821      	adds	r1, r4, r0
 8015b1c:	428a      	cmp	r2, r1
 8015b1e:	bf04      	itt	eq
 8015b20:	6811      	ldreq	r1, [r2, #0]
 8015b22:	6852      	ldreq	r2, [r2, #4]
 8015b24:	6062      	str	r2, [r4, #4]
 8015b26:	bf04      	itt	eq
 8015b28:	1809      	addeq	r1, r1, r0
 8015b2a:	6021      	streq	r1, [r4, #0]
 8015b2c:	605c      	str	r4, [r3, #4]
 8015b2e:	e7c7      	b.n	8015ac0 <_free_r+0x24>
 8015b30:	bd38      	pop	{r3, r4, r5, pc}
 8015b32:	bf00      	nop
 8015b34:	20000bf8 	.word	0x20000bf8

08015b38 <_malloc_r>:
 8015b38:	b570      	push	{r4, r5, r6, lr}
 8015b3a:	1ccd      	adds	r5, r1, #3
 8015b3c:	f025 0503 	bic.w	r5, r5, #3
 8015b40:	3508      	adds	r5, #8
 8015b42:	2d0c      	cmp	r5, #12
 8015b44:	bf38      	it	cc
 8015b46:	250c      	movcc	r5, #12
 8015b48:	2d00      	cmp	r5, #0
 8015b4a:	4606      	mov	r6, r0
 8015b4c:	db01      	blt.n	8015b52 <_malloc_r+0x1a>
 8015b4e:	42a9      	cmp	r1, r5
 8015b50:	d903      	bls.n	8015b5a <_malloc_r+0x22>
 8015b52:	230c      	movs	r3, #12
 8015b54:	6033      	str	r3, [r6, #0]
 8015b56:	2000      	movs	r0, #0
 8015b58:	bd70      	pop	{r4, r5, r6, pc}
 8015b5a:	f002 ff71 	bl	8018a40 <__malloc_lock>
 8015b5e:	4a21      	ldr	r2, [pc, #132]	; (8015be4 <_malloc_r+0xac>)
 8015b60:	6814      	ldr	r4, [r2, #0]
 8015b62:	4621      	mov	r1, r4
 8015b64:	b991      	cbnz	r1, 8015b8c <_malloc_r+0x54>
 8015b66:	4c20      	ldr	r4, [pc, #128]	; (8015be8 <_malloc_r+0xb0>)
 8015b68:	6823      	ldr	r3, [r4, #0]
 8015b6a:	b91b      	cbnz	r3, 8015b74 <_malloc_r+0x3c>
 8015b6c:	4630      	mov	r0, r6
 8015b6e:	f000 fe7b 	bl	8016868 <_sbrk_r>
 8015b72:	6020      	str	r0, [r4, #0]
 8015b74:	4629      	mov	r1, r5
 8015b76:	4630      	mov	r0, r6
 8015b78:	f000 fe76 	bl	8016868 <_sbrk_r>
 8015b7c:	1c43      	adds	r3, r0, #1
 8015b7e:	d124      	bne.n	8015bca <_malloc_r+0x92>
 8015b80:	230c      	movs	r3, #12
 8015b82:	6033      	str	r3, [r6, #0]
 8015b84:	4630      	mov	r0, r6
 8015b86:	f002 ff5c 	bl	8018a42 <__malloc_unlock>
 8015b8a:	e7e4      	b.n	8015b56 <_malloc_r+0x1e>
 8015b8c:	680b      	ldr	r3, [r1, #0]
 8015b8e:	1b5b      	subs	r3, r3, r5
 8015b90:	d418      	bmi.n	8015bc4 <_malloc_r+0x8c>
 8015b92:	2b0b      	cmp	r3, #11
 8015b94:	d90f      	bls.n	8015bb6 <_malloc_r+0x7e>
 8015b96:	600b      	str	r3, [r1, #0]
 8015b98:	50cd      	str	r5, [r1, r3]
 8015b9a:	18cc      	adds	r4, r1, r3
 8015b9c:	4630      	mov	r0, r6
 8015b9e:	f002 ff50 	bl	8018a42 <__malloc_unlock>
 8015ba2:	f104 000b 	add.w	r0, r4, #11
 8015ba6:	1d23      	adds	r3, r4, #4
 8015ba8:	f020 0007 	bic.w	r0, r0, #7
 8015bac:	1ac3      	subs	r3, r0, r3
 8015bae:	d0d3      	beq.n	8015b58 <_malloc_r+0x20>
 8015bb0:	425a      	negs	r2, r3
 8015bb2:	50e2      	str	r2, [r4, r3]
 8015bb4:	e7d0      	b.n	8015b58 <_malloc_r+0x20>
 8015bb6:	428c      	cmp	r4, r1
 8015bb8:	684b      	ldr	r3, [r1, #4]
 8015bba:	bf16      	itet	ne
 8015bbc:	6063      	strne	r3, [r4, #4]
 8015bbe:	6013      	streq	r3, [r2, #0]
 8015bc0:	460c      	movne	r4, r1
 8015bc2:	e7eb      	b.n	8015b9c <_malloc_r+0x64>
 8015bc4:	460c      	mov	r4, r1
 8015bc6:	6849      	ldr	r1, [r1, #4]
 8015bc8:	e7cc      	b.n	8015b64 <_malloc_r+0x2c>
 8015bca:	1cc4      	adds	r4, r0, #3
 8015bcc:	f024 0403 	bic.w	r4, r4, #3
 8015bd0:	42a0      	cmp	r0, r4
 8015bd2:	d005      	beq.n	8015be0 <_malloc_r+0xa8>
 8015bd4:	1a21      	subs	r1, r4, r0
 8015bd6:	4630      	mov	r0, r6
 8015bd8:	f000 fe46 	bl	8016868 <_sbrk_r>
 8015bdc:	3001      	adds	r0, #1
 8015bde:	d0cf      	beq.n	8015b80 <_malloc_r+0x48>
 8015be0:	6025      	str	r5, [r4, #0]
 8015be2:	e7db      	b.n	8015b9c <_malloc_r+0x64>
 8015be4:	20000bf8 	.word	0x20000bf8
 8015be8:	20000bfc 	.word	0x20000bfc

08015bec <__cvt>:
 8015bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015bf0:	ec55 4b10 	vmov	r4, r5, d0
 8015bf4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015bf6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015bfa:	2d00      	cmp	r5, #0
 8015bfc:	460e      	mov	r6, r1
 8015bfe:	4691      	mov	r9, r2
 8015c00:	4619      	mov	r1, r3
 8015c02:	bfb8      	it	lt
 8015c04:	4622      	movlt	r2, r4
 8015c06:	462b      	mov	r3, r5
 8015c08:	f027 0720 	bic.w	r7, r7, #32
 8015c0c:	bfbb      	ittet	lt
 8015c0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015c12:	461d      	movlt	r5, r3
 8015c14:	2300      	movge	r3, #0
 8015c16:	232d      	movlt	r3, #45	; 0x2d
 8015c18:	bfb8      	it	lt
 8015c1a:	4614      	movlt	r4, r2
 8015c1c:	2f46      	cmp	r7, #70	; 0x46
 8015c1e:	700b      	strb	r3, [r1, #0]
 8015c20:	d004      	beq.n	8015c2c <__cvt+0x40>
 8015c22:	2f45      	cmp	r7, #69	; 0x45
 8015c24:	d100      	bne.n	8015c28 <__cvt+0x3c>
 8015c26:	3601      	adds	r6, #1
 8015c28:	2102      	movs	r1, #2
 8015c2a:	e000      	b.n	8015c2e <__cvt+0x42>
 8015c2c:	2103      	movs	r1, #3
 8015c2e:	ab03      	add	r3, sp, #12
 8015c30:	9301      	str	r3, [sp, #4]
 8015c32:	ab02      	add	r3, sp, #8
 8015c34:	9300      	str	r3, [sp, #0]
 8015c36:	4632      	mov	r2, r6
 8015c38:	4653      	mov	r3, sl
 8015c3a:	ec45 4b10 	vmov	d0, r4, r5
 8015c3e:	f001 fdfb 	bl	8017838 <_dtoa_r>
 8015c42:	2f47      	cmp	r7, #71	; 0x47
 8015c44:	4680      	mov	r8, r0
 8015c46:	d102      	bne.n	8015c4e <__cvt+0x62>
 8015c48:	f019 0f01 	tst.w	r9, #1
 8015c4c:	d026      	beq.n	8015c9c <__cvt+0xb0>
 8015c4e:	2f46      	cmp	r7, #70	; 0x46
 8015c50:	eb08 0906 	add.w	r9, r8, r6
 8015c54:	d111      	bne.n	8015c7a <__cvt+0x8e>
 8015c56:	f898 3000 	ldrb.w	r3, [r8]
 8015c5a:	2b30      	cmp	r3, #48	; 0x30
 8015c5c:	d10a      	bne.n	8015c74 <__cvt+0x88>
 8015c5e:	2200      	movs	r2, #0
 8015c60:	2300      	movs	r3, #0
 8015c62:	4620      	mov	r0, r4
 8015c64:	4629      	mov	r1, r5
 8015c66:	f7ea ff3f 	bl	8000ae8 <__aeabi_dcmpeq>
 8015c6a:	b918      	cbnz	r0, 8015c74 <__cvt+0x88>
 8015c6c:	f1c6 0601 	rsb	r6, r6, #1
 8015c70:	f8ca 6000 	str.w	r6, [sl]
 8015c74:	f8da 3000 	ldr.w	r3, [sl]
 8015c78:	4499      	add	r9, r3
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	4620      	mov	r0, r4
 8015c80:	4629      	mov	r1, r5
 8015c82:	f7ea ff31 	bl	8000ae8 <__aeabi_dcmpeq>
 8015c86:	b938      	cbnz	r0, 8015c98 <__cvt+0xac>
 8015c88:	2230      	movs	r2, #48	; 0x30
 8015c8a:	9b03      	ldr	r3, [sp, #12]
 8015c8c:	454b      	cmp	r3, r9
 8015c8e:	d205      	bcs.n	8015c9c <__cvt+0xb0>
 8015c90:	1c59      	adds	r1, r3, #1
 8015c92:	9103      	str	r1, [sp, #12]
 8015c94:	701a      	strb	r2, [r3, #0]
 8015c96:	e7f8      	b.n	8015c8a <__cvt+0x9e>
 8015c98:	f8cd 900c 	str.w	r9, [sp, #12]
 8015c9c:	9b03      	ldr	r3, [sp, #12]
 8015c9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ca0:	eba3 0308 	sub.w	r3, r3, r8
 8015ca4:	4640      	mov	r0, r8
 8015ca6:	6013      	str	r3, [r2, #0]
 8015ca8:	b004      	add	sp, #16
 8015caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015cae <__exponent>:
 8015cae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015cb0:	2900      	cmp	r1, #0
 8015cb2:	4604      	mov	r4, r0
 8015cb4:	bfba      	itte	lt
 8015cb6:	4249      	neglt	r1, r1
 8015cb8:	232d      	movlt	r3, #45	; 0x2d
 8015cba:	232b      	movge	r3, #43	; 0x2b
 8015cbc:	2909      	cmp	r1, #9
 8015cbe:	f804 2b02 	strb.w	r2, [r4], #2
 8015cc2:	7043      	strb	r3, [r0, #1]
 8015cc4:	dd20      	ble.n	8015d08 <__exponent+0x5a>
 8015cc6:	f10d 0307 	add.w	r3, sp, #7
 8015cca:	461f      	mov	r7, r3
 8015ccc:	260a      	movs	r6, #10
 8015cce:	fb91 f5f6 	sdiv	r5, r1, r6
 8015cd2:	fb06 1115 	mls	r1, r6, r5, r1
 8015cd6:	3130      	adds	r1, #48	; 0x30
 8015cd8:	2d09      	cmp	r5, #9
 8015cda:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015cde:	f103 32ff 	add.w	r2, r3, #4294967295
 8015ce2:	4629      	mov	r1, r5
 8015ce4:	dc09      	bgt.n	8015cfa <__exponent+0x4c>
 8015ce6:	3130      	adds	r1, #48	; 0x30
 8015ce8:	3b02      	subs	r3, #2
 8015cea:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015cee:	42bb      	cmp	r3, r7
 8015cf0:	4622      	mov	r2, r4
 8015cf2:	d304      	bcc.n	8015cfe <__exponent+0x50>
 8015cf4:	1a10      	subs	r0, r2, r0
 8015cf6:	b003      	add	sp, #12
 8015cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cfa:	4613      	mov	r3, r2
 8015cfc:	e7e7      	b.n	8015cce <__exponent+0x20>
 8015cfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d02:	f804 2b01 	strb.w	r2, [r4], #1
 8015d06:	e7f2      	b.n	8015cee <__exponent+0x40>
 8015d08:	2330      	movs	r3, #48	; 0x30
 8015d0a:	4419      	add	r1, r3
 8015d0c:	7083      	strb	r3, [r0, #2]
 8015d0e:	1d02      	adds	r2, r0, #4
 8015d10:	70c1      	strb	r1, [r0, #3]
 8015d12:	e7ef      	b.n	8015cf4 <__exponent+0x46>

08015d14 <_printf_float>:
 8015d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d18:	b08d      	sub	sp, #52	; 0x34
 8015d1a:	460c      	mov	r4, r1
 8015d1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015d20:	4616      	mov	r6, r2
 8015d22:	461f      	mov	r7, r3
 8015d24:	4605      	mov	r5, r0
 8015d26:	f002 fe6b 	bl	8018a00 <_localeconv_r>
 8015d2a:	6803      	ldr	r3, [r0, #0]
 8015d2c:	9304      	str	r3, [sp, #16]
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f7ea fa58 	bl	80001e4 <strlen>
 8015d34:	2300      	movs	r3, #0
 8015d36:	930a      	str	r3, [sp, #40]	; 0x28
 8015d38:	f8d8 3000 	ldr.w	r3, [r8]
 8015d3c:	9005      	str	r0, [sp, #20]
 8015d3e:	3307      	adds	r3, #7
 8015d40:	f023 0307 	bic.w	r3, r3, #7
 8015d44:	f103 0208 	add.w	r2, r3, #8
 8015d48:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015d4c:	f8d4 b000 	ldr.w	fp, [r4]
 8015d50:	f8c8 2000 	str.w	r2, [r8]
 8015d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d58:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015d5c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015d60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015d64:	9307      	str	r3, [sp, #28]
 8015d66:	f8cd 8018 	str.w	r8, [sp, #24]
 8015d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8015d6e:	4ba7      	ldr	r3, [pc, #668]	; (801600c <_printf_float+0x2f8>)
 8015d70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015d74:	f7ea feea 	bl	8000b4c <__aeabi_dcmpun>
 8015d78:	bb70      	cbnz	r0, 8015dd8 <_printf_float+0xc4>
 8015d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8015d7e:	4ba3      	ldr	r3, [pc, #652]	; (801600c <_printf_float+0x2f8>)
 8015d80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015d84:	f7ea fec4 	bl	8000b10 <__aeabi_dcmple>
 8015d88:	bb30      	cbnz	r0, 8015dd8 <_printf_float+0xc4>
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	4640      	mov	r0, r8
 8015d90:	4649      	mov	r1, r9
 8015d92:	f7ea feb3 	bl	8000afc <__aeabi_dcmplt>
 8015d96:	b110      	cbz	r0, 8015d9e <_printf_float+0x8a>
 8015d98:	232d      	movs	r3, #45	; 0x2d
 8015d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d9e:	4a9c      	ldr	r2, [pc, #624]	; (8016010 <_printf_float+0x2fc>)
 8015da0:	4b9c      	ldr	r3, [pc, #624]	; (8016014 <_printf_float+0x300>)
 8015da2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015da6:	bf8c      	ite	hi
 8015da8:	4690      	movhi	r8, r2
 8015daa:	4698      	movls	r8, r3
 8015dac:	2303      	movs	r3, #3
 8015dae:	f02b 0204 	bic.w	r2, fp, #4
 8015db2:	6123      	str	r3, [r4, #16]
 8015db4:	6022      	str	r2, [r4, #0]
 8015db6:	f04f 0900 	mov.w	r9, #0
 8015dba:	9700      	str	r7, [sp, #0]
 8015dbc:	4633      	mov	r3, r6
 8015dbe:	aa0b      	add	r2, sp, #44	; 0x2c
 8015dc0:	4621      	mov	r1, r4
 8015dc2:	4628      	mov	r0, r5
 8015dc4:	f000 f9e6 	bl	8016194 <_printf_common>
 8015dc8:	3001      	adds	r0, #1
 8015dca:	f040 808d 	bne.w	8015ee8 <_printf_float+0x1d4>
 8015dce:	f04f 30ff 	mov.w	r0, #4294967295
 8015dd2:	b00d      	add	sp, #52	; 0x34
 8015dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dd8:	4642      	mov	r2, r8
 8015dda:	464b      	mov	r3, r9
 8015ddc:	4640      	mov	r0, r8
 8015dde:	4649      	mov	r1, r9
 8015de0:	f7ea feb4 	bl	8000b4c <__aeabi_dcmpun>
 8015de4:	b110      	cbz	r0, 8015dec <_printf_float+0xd8>
 8015de6:	4a8c      	ldr	r2, [pc, #560]	; (8016018 <_printf_float+0x304>)
 8015de8:	4b8c      	ldr	r3, [pc, #560]	; (801601c <_printf_float+0x308>)
 8015dea:	e7da      	b.n	8015da2 <_printf_float+0x8e>
 8015dec:	6861      	ldr	r1, [r4, #4]
 8015dee:	1c4b      	adds	r3, r1, #1
 8015df0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015df4:	a80a      	add	r0, sp, #40	; 0x28
 8015df6:	d13e      	bne.n	8015e76 <_printf_float+0x162>
 8015df8:	2306      	movs	r3, #6
 8015dfa:	6063      	str	r3, [r4, #4]
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015e02:	ab09      	add	r3, sp, #36	; 0x24
 8015e04:	9300      	str	r3, [sp, #0]
 8015e06:	ec49 8b10 	vmov	d0, r8, r9
 8015e0a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015e0e:	6022      	str	r2, [r4, #0]
 8015e10:	f8cd a004 	str.w	sl, [sp, #4]
 8015e14:	6861      	ldr	r1, [r4, #4]
 8015e16:	4628      	mov	r0, r5
 8015e18:	f7ff fee8 	bl	8015bec <__cvt>
 8015e1c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015e20:	2b47      	cmp	r3, #71	; 0x47
 8015e22:	4680      	mov	r8, r0
 8015e24:	d109      	bne.n	8015e3a <_printf_float+0x126>
 8015e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e28:	1cd8      	adds	r0, r3, #3
 8015e2a:	db02      	blt.n	8015e32 <_printf_float+0x11e>
 8015e2c:	6862      	ldr	r2, [r4, #4]
 8015e2e:	4293      	cmp	r3, r2
 8015e30:	dd47      	ble.n	8015ec2 <_printf_float+0x1ae>
 8015e32:	f1aa 0a02 	sub.w	sl, sl, #2
 8015e36:	fa5f fa8a 	uxtb.w	sl, sl
 8015e3a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015e3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015e40:	d824      	bhi.n	8015e8c <_printf_float+0x178>
 8015e42:	3901      	subs	r1, #1
 8015e44:	4652      	mov	r2, sl
 8015e46:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015e4a:	9109      	str	r1, [sp, #36]	; 0x24
 8015e4c:	f7ff ff2f 	bl	8015cae <__exponent>
 8015e50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e52:	1813      	adds	r3, r2, r0
 8015e54:	2a01      	cmp	r2, #1
 8015e56:	4681      	mov	r9, r0
 8015e58:	6123      	str	r3, [r4, #16]
 8015e5a:	dc02      	bgt.n	8015e62 <_printf_float+0x14e>
 8015e5c:	6822      	ldr	r2, [r4, #0]
 8015e5e:	07d1      	lsls	r1, r2, #31
 8015e60:	d501      	bpl.n	8015e66 <_printf_float+0x152>
 8015e62:	3301      	adds	r3, #1
 8015e64:	6123      	str	r3, [r4, #16]
 8015e66:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d0a5      	beq.n	8015dba <_printf_float+0xa6>
 8015e6e:	232d      	movs	r3, #45	; 0x2d
 8015e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e74:	e7a1      	b.n	8015dba <_printf_float+0xa6>
 8015e76:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015e7a:	f000 8177 	beq.w	801616c <_printf_float+0x458>
 8015e7e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015e82:	d1bb      	bne.n	8015dfc <_printf_float+0xe8>
 8015e84:	2900      	cmp	r1, #0
 8015e86:	d1b9      	bne.n	8015dfc <_printf_float+0xe8>
 8015e88:	2301      	movs	r3, #1
 8015e8a:	e7b6      	b.n	8015dfa <_printf_float+0xe6>
 8015e8c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015e90:	d119      	bne.n	8015ec6 <_printf_float+0x1b2>
 8015e92:	2900      	cmp	r1, #0
 8015e94:	6863      	ldr	r3, [r4, #4]
 8015e96:	dd0c      	ble.n	8015eb2 <_printf_float+0x19e>
 8015e98:	6121      	str	r1, [r4, #16]
 8015e9a:	b913      	cbnz	r3, 8015ea2 <_printf_float+0x18e>
 8015e9c:	6822      	ldr	r2, [r4, #0]
 8015e9e:	07d2      	lsls	r2, r2, #31
 8015ea0:	d502      	bpl.n	8015ea8 <_printf_float+0x194>
 8015ea2:	3301      	adds	r3, #1
 8015ea4:	440b      	add	r3, r1
 8015ea6:	6123      	str	r3, [r4, #16]
 8015ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015eaa:	65a3      	str	r3, [r4, #88]	; 0x58
 8015eac:	f04f 0900 	mov.w	r9, #0
 8015eb0:	e7d9      	b.n	8015e66 <_printf_float+0x152>
 8015eb2:	b913      	cbnz	r3, 8015eba <_printf_float+0x1a6>
 8015eb4:	6822      	ldr	r2, [r4, #0]
 8015eb6:	07d0      	lsls	r0, r2, #31
 8015eb8:	d501      	bpl.n	8015ebe <_printf_float+0x1aa>
 8015eba:	3302      	adds	r3, #2
 8015ebc:	e7f3      	b.n	8015ea6 <_printf_float+0x192>
 8015ebe:	2301      	movs	r3, #1
 8015ec0:	e7f1      	b.n	8015ea6 <_printf_float+0x192>
 8015ec2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015ec6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015eca:	4293      	cmp	r3, r2
 8015ecc:	db05      	blt.n	8015eda <_printf_float+0x1c6>
 8015ece:	6822      	ldr	r2, [r4, #0]
 8015ed0:	6123      	str	r3, [r4, #16]
 8015ed2:	07d1      	lsls	r1, r2, #31
 8015ed4:	d5e8      	bpl.n	8015ea8 <_printf_float+0x194>
 8015ed6:	3301      	adds	r3, #1
 8015ed8:	e7e5      	b.n	8015ea6 <_printf_float+0x192>
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	bfd4      	ite	le
 8015ede:	f1c3 0302 	rsble	r3, r3, #2
 8015ee2:	2301      	movgt	r3, #1
 8015ee4:	4413      	add	r3, r2
 8015ee6:	e7de      	b.n	8015ea6 <_printf_float+0x192>
 8015ee8:	6823      	ldr	r3, [r4, #0]
 8015eea:	055a      	lsls	r2, r3, #21
 8015eec:	d407      	bmi.n	8015efe <_printf_float+0x1ea>
 8015eee:	6923      	ldr	r3, [r4, #16]
 8015ef0:	4642      	mov	r2, r8
 8015ef2:	4631      	mov	r1, r6
 8015ef4:	4628      	mov	r0, r5
 8015ef6:	47b8      	blx	r7
 8015ef8:	3001      	adds	r0, #1
 8015efa:	d12b      	bne.n	8015f54 <_printf_float+0x240>
 8015efc:	e767      	b.n	8015dce <_printf_float+0xba>
 8015efe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015f02:	f240 80dc 	bls.w	80160be <_printf_float+0x3aa>
 8015f06:	2200      	movs	r2, #0
 8015f08:	2300      	movs	r3, #0
 8015f0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015f0e:	f7ea fdeb 	bl	8000ae8 <__aeabi_dcmpeq>
 8015f12:	2800      	cmp	r0, #0
 8015f14:	d033      	beq.n	8015f7e <_printf_float+0x26a>
 8015f16:	2301      	movs	r3, #1
 8015f18:	4a41      	ldr	r2, [pc, #260]	; (8016020 <_printf_float+0x30c>)
 8015f1a:	4631      	mov	r1, r6
 8015f1c:	4628      	mov	r0, r5
 8015f1e:	47b8      	blx	r7
 8015f20:	3001      	adds	r0, #1
 8015f22:	f43f af54 	beq.w	8015dce <_printf_float+0xba>
 8015f26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015f2a:	429a      	cmp	r2, r3
 8015f2c:	db02      	blt.n	8015f34 <_printf_float+0x220>
 8015f2e:	6823      	ldr	r3, [r4, #0]
 8015f30:	07d8      	lsls	r0, r3, #31
 8015f32:	d50f      	bpl.n	8015f54 <_printf_float+0x240>
 8015f34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015f38:	4631      	mov	r1, r6
 8015f3a:	4628      	mov	r0, r5
 8015f3c:	47b8      	blx	r7
 8015f3e:	3001      	adds	r0, #1
 8015f40:	f43f af45 	beq.w	8015dce <_printf_float+0xba>
 8015f44:	f04f 0800 	mov.w	r8, #0
 8015f48:	f104 091a 	add.w	r9, r4, #26
 8015f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f4e:	3b01      	subs	r3, #1
 8015f50:	4543      	cmp	r3, r8
 8015f52:	dc09      	bgt.n	8015f68 <_printf_float+0x254>
 8015f54:	6823      	ldr	r3, [r4, #0]
 8015f56:	079b      	lsls	r3, r3, #30
 8015f58:	f100 8103 	bmi.w	8016162 <_printf_float+0x44e>
 8015f5c:	68e0      	ldr	r0, [r4, #12]
 8015f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f60:	4298      	cmp	r0, r3
 8015f62:	bfb8      	it	lt
 8015f64:	4618      	movlt	r0, r3
 8015f66:	e734      	b.n	8015dd2 <_printf_float+0xbe>
 8015f68:	2301      	movs	r3, #1
 8015f6a:	464a      	mov	r2, r9
 8015f6c:	4631      	mov	r1, r6
 8015f6e:	4628      	mov	r0, r5
 8015f70:	47b8      	blx	r7
 8015f72:	3001      	adds	r0, #1
 8015f74:	f43f af2b 	beq.w	8015dce <_printf_float+0xba>
 8015f78:	f108 0801 	add.w	r8, r8, #1
 8015f7c:	e7e6      	b.n	8015f4c <_printf_float+0x238>
 8015f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	dc2b      	bgt.n	8015fdc <_printf_float+0x2c8>
 8015f84:	2301      	movs	r3, #1
 8015f86:	4a26      	ldr	r2, [pc, #152]	; (8016020 <_printf_float+0x30c>)
 8015f88:	4631      	mov	r1, r6
 8015f8a:	4628      	mov	r0, r5
 8015f8c:	47b8      	blx	r7
 8015f8e:	3001      	adds	r0, #1
 8015f90:	f43f af1d 	beq.w	8015dce <_printf_float+0xba>
 8015f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f96:	b923      	cbnz	r3, 8015fa2 <_printf_float+0x28e>
 8015f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f9a:	b913      	cbnz	r3, 8015fa2 <_printf_float+0x28e>
 8015f9c:	6823      	ldr	r3, [r4, #0]
 8015f9e:	07d9      	lsls	r1, r3, #31
 8015fa0:	d5d8      	bpl.n	8015f54 <_printf_float+0x240>
 8015fa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015fa6:	4631      	mov	r1, r6
 8015fa8:	4628      	mov	r0, r5
 8015faa:	47b8      	blx	r7
 8015fac:	3001      	adds	r0, #1
 8015fae:	f43f af0e 	beq.w	8015dce <_printf_float+0xba>
 8015fb2:	f04f 0900 	mov.w	r9, #0
 8015fb6:	f104 0a1a 	add.w	sl, r4, #26
 8015fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fbc:	425b      	negs	r3, r3
 8015fbe:	454b      	cmp	r3, r9
 8015fc0:	dc01      	bgt.n	8015fc6 <_printf_float+0x2b2>
 8015fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fc4:	e794      	b.n	8015ef0 <_printf_float+0x1dc>
 8015fc6:	2301      	movs	r3, #1
 8015fc8:	4652      	mov	r2, sl
 8015fca:	4631      	mov	r1, r6
 8015fcc:	4628      	mov	r0, r5
 8015fce:	47b8      	blx	r7
 8015fd0:	3001      	adds	r0, #1
 8015fd2:	f43f aefc 	beq.w	8015dce <_printf_float+0xba>
 8015fd6:	f109 0901 	add.w	r9, r9, #1
 8015fda:	e7ee      	b.n	8015fba <_printf_float+0x2a6>
 8015fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015fde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015fe0:	429a      	cmp	r2, r3
 8015fe2:	bfa8      	it	ge
 8015fe4:	461a      	movge	r2, r3
 8015fe6:	2a00      	cmp	r2, #0
 8015fe8:	4691      	mov	r9, r2
 8015fea:	dd07      	ble.n	8015ffc <_printf_float+0x2e8>
 8015fec:	4613      	mov	r3, r2
 8015fee:	4631      	mov	r1, r6
 8015ff0:	4642      	mov	r2, r8
 8015ff2:	4628      	mov	r0, r5
 8015ff4:	47b8      	blx	r7
 8015ff6:	3001      	adds	r0, #1
 8015ff8:	f43f aee9 	beq.w	8015dce <_printf_float+0xba>
 8015ffc:	f104 031a 	add.w	r3, r4, #26
 8016000:	f04f 0b00 	mov.w	fp, #0
 8016004:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016008:	9306      	str	r3, [sp, #24]
 801600a:	e015      	b.n	8016038 <_printf_float+0x324>
 801600c:	7fefffff 	.word	0x7fefffff
 8016010:	0801bf28 	.word	0x0801bf28
 8016014:	0801bf24 	.word	0x0801bf24
 8016018:	0801bf30 	.word	0x0801bf30
 801601c:	0801bf2c 	.word	0x0801bf2c
 8016020:	0801bf34 	.word	0x0801bf34
 8016024:	2301      	movs	r3, #1
 8016026:	9a06      	ldr	r2, [sp, #24]
 8016028:	4631      	mov	r1, r6
 801602a:	4628      	mov	r0, r5
 801602c:	47b8      	blx	r7
 801602e:	3001      	adds	r0, #1
 8016030:	f43f aecd 	beq.w	8015dce <_printf_float+0xba>
 8016034:	f10b 0b01 	add.w	fp, fp, #1
 8016038:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801603c:	ebaa 0309 	sub.w	r3, sl, r9
 8016040:	455b      	cmp	r3, fp
 8016042:	dcef      	bgt.n	8016024 <_printf_float+0x310>
 8016044:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016048:	429a      	cmp	r2, r3
 801604a:	44d0      	add	r8, sl
 801604c:	db15      	blt.n	801607a <_printf_float+0x366>
 801604e:	6823      	ldr	r3, [r4, #0]
 8016050:	07da      	lsls	r2, r3, #31
 8016052:	d412      	bmi.n	801607a <_printf_float+0x366>
 8016054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016056:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016058:	eba3 020a 	sub.w	r2, r3, sl
 801605c:	eba3 0a01 	sub.w	sl, r3, r1
 8016060:	4592      	cmp	sl, r2
 8016062:	bfa8      	it	ge
 8016064:	4692      	movge	sl, r2
 8016066:	f1ba 0f00 	cmp.w	sl, #0
 801606a:	dc0e      	bgt.n	801608a <_printf_float+0x376>
 801606c:	f04f 0800 	mov.w	r8, #0
 8016070:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016074:	f104 091a 	add.w	r9, r4, #26
 8016078:	e019      	b.n	80160ae <_printf_float+0x39a>
 801607a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801607e:	4631      	mov	r1, r6
 8016080:	4628      	mov	r0, r5
 8016082:	47b8      	blx	r7
 8016084:	3001      	adds	r0, #1
 8016086:	d1e5      	bne.n	8016054 <_printf_float+0x340>
 8016088:	e6a1      	b.n	8015dce <_printf_float+0xba>
 801608a:	4653      	mov	r3, sl
 801608c:	4642      	mov	r2, r8
 801608e:	4631      	mov	r1, r6
 8016090:	4628      	mov	r0, r5
 8016092:	47b8      	blx	r7
 8016094:	3001      	adds	r0, #1
 8016096:	d1e9      	bne.n	801606c <_printf_float+0x358>
 8016098:	e699      	b.n	8015dce <_printf_float+0xba>
 801609a:	2301      	movs	r3, #1
 801609c:	464a      	mov	r2, r9
 801609e:	4631      	mov	r1, r6
 80160a0:	4628      	mov	r0, r5
 80160a2:	47b8      	blx	r7
 80160a4:	3001      	adds	r0, #1
 80160a6:	f43f ae92 	beq.w	8015dce <_printf_float+0xba>
 80160aa:	f108 0801 	add.w	r8, r8, #1
 80160ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80160b2:	1a9b      	subs	r3, r3, r2
 80160b4:	eba3 030a 	sub.w	r3, r3, sl
 80160b8:	4543      	cmp	r3, r8
 80160ba:	dcee      	bgt.n	801609a <_printf_float+0x386>
 80160bc:	e74a      	b.n	8015f54 <_printf_float+0x240>
 80160be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80160c0:	2a01      	cmp	r2, #1
 80160c2:	dc01      	bgt.n	80160c8 <_printf_float+0x3b4>
 80160c4:	07db      	lsls	r3, r3, #31
 80160c6:	d53a      	bpl.n	801613e <_printf_float+0x42a>
 80160c8:	2301      	movs	r3, #1
 80160ca:	4642      	mov	r2, r8
 80160cc:	4631      	mov	r1, r6
 80160ce:	4628      	mov	r0, r5
 80160d0:	47b8      	blx	r7
 80160d2:	3001      	adds	r0, #1
 80160d4:	f43f ae7b 	beq.w	8015dce <_printf_float+0xba>
 80160d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80160dc:	4631      	mov	r1, r6
 80160de:	4628      	mov	r0, r5
 80160e0:	47b8      	blx	r7
 80160e2:	3001      	adds	r0, #1
 80160e4:	f108 0801 	add.w	r8, r8, #1
 80160e8:	f43f ae71 	beq.w	8015dce <_printf_float+0xba>
 80160ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160ee:	2200      	movs	r2, #0
 80160f0:	f103 3aff 	add.w	sl, r3, #4294967295
 80160f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80160f8:	2300      	movs	r3, #0
 80160fa:	f7ea fcf5 	bl	8000ae8 <__aeabi_dcmpeq>
 80160fe:	b9c8      	cbnz	r0, 8016134 <_printf_float+0x420>
 8016100:	4653      	mov	r3, sl
 8016102:	4642      	mov	r2, r8
 8016104:	4631      	mov	r1, r6
 8016106:	4628      	mov	r0, r5
 8016108:	47b8      	blx	r7
 801610a:	3001      	adds	r0, #1
 801610c:	d10e      	bne.n	801612c <_printf_float+0x418>
 801610e:	e65e      	b.n	8015dce <_printf_float+0xba>
 8016110:	2301      	movs	r3, #1
 8016112:	4652      	mov	r2, sl
 8016114:	4631      	mov	r1, r6
 8016116:	4628      	mov	r0, r5
 8016118:	47b8      	blx	r7
 801611a:	3001      	adds	r0, #1
 801611c:	f43f ae57 	beq.w	8015dce <_printf_float+0xba>
 8016120:	f108 0801 	add.w	r8, r8, #1
 8016124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016126:	3b01      	subs	r3, #1
 8016128:	4543      	cmp	r3, r8
 801612a:	dcf1      	bgt.n	8016110 <_printf_float+0x3fc>
 801612c:	464b      	mov	r3, r9
 801612e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016132:	e6de      	b.n	8015ef2 <_printf_float+0x1de>
 8016134:	f04f 0800 	mov.w	r8, #0
 8016138:	f104 0a1a 	add.w	sl, r4, #26
 801613c:	e7f2      	b.n	8016124 <_printf_float+0x410>
 801613e:	2301      	movs	r3, #1
 8016140:	e7df      	b.n	8016102 <_printf_float+0x3ee>
 8016142:	2301      	movs	r3, #1
 8016144:	464a      	mov	r2, r9
 8016146:	4631      	mov	r1, r6
 8016148:	4628      	mov	r0, r5
 801614a:	47b8      	blx	r7
 801614c:	3001      	adds	r0, #1
 801614e:	f43f ae3e 	beq.w	8015dce <_printf_float+0xba>
 8016152:	f108 0801 	add.w	r8, r8, #1
 8016156:	68e3      	ldr	r3, [r4, #12]
 8016158:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801615a:	1a9b      	subs	r3, r3, r2
 801615c:	4543      	cmp	r3, r8
 801615e:	dcf0      	bgt.n	8016142 <_printf_float+0x42e>
 8016160:	e6fc      	b.n	8015f5c <_printf_float+0x248>
 8016162:	f04f 0800 	mov.w	r8, #0
 8016166:	f104 0919 	add.w	r9, r4, #25
 801616a:	e7f4      	b.n	8016156 <_printf_float+0x442>
 801616c:	2900      	cmp	r1, #0
 801616e:	f43f ae8b 	beq.w	8015e88 <_printf_float+0x174>
 8016172:	2300      	movs	r3, #0
 8016174:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016178:	ab09      	add	r3, sp, #36	; 0x24
 801617a:	9300      	str	r3, [sp, #0]
 801617c:	ec49 8b10 	vmov	d0, r8, r9
 8016180:	6022      	str	r2, [r4, #0]
 8016182:	f8cd a004 	str.w	sl, [sp, #4]
 8016186:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801618a:	4628      	mov	r0, r5
 801618c:	f7ff fd2e 	bl	8015bec <__cvt>
 8016190:	4680      	mov	r8, r0
 8016192:	e648      	b.n	8015e26 <_printf_float+0x112>

08016194 <_printf_common>:
 8016194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016198:	4691      	mov	r9, r2
 801619a:	461f      	mov	r7, r3
 801619c:	688a      	ldr	r2, [r1, #8]
 801619e:	690b      	ldr	r3, [r1, #16]
 80161a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80161a4:	4293      	cmp	r3, r2
 80161a6:	bfb8      	it	lt
 80161a8:	4613      	movlt	r3, r2
 80161aa:	f8c9 3000 	str.w	r3, [r9]
 80161ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80161b2:	4606      	mov	r6, r0
 80161b4:	460c      	mov	r4, r1
 80161b6:	b112      	cbz	r2, 80161be <_printf_common+0x2a>
 80161b8:	3301      	adds	r3, #1
 80161ba:	f8c9 3000 	str.w	r3, [r9]
 80161be:	6823      	ldr	r3, [r4, #0]
 80161c0:	0699      	lsls	r1, r3, #26
 80161c2:	bf42      	ittt	mi
 80161c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80161c8:	3302      	addmi	r3, #2
 80161ca:	f8c9 3000 	strmi.w	r3, [r9]
 80161ce:	6825      	ldr	r5, [r4, #0]
 80161d0:	f015 0506 	ands.w	r5, r5, #6
 80161d4:	d107      	bne.n	80161e6 <_printf_common+0x52>
 80161d6:	f104 0a19 	add.w	sl, r4, #25
 80161da:	68e3      	ldr	r3, [r4, #12]
 80161dc:	f8d9 2000 	ldr.w	r2, [r9]
 80161e0:	1a9b      	subs	r3, r3, r2
 80161e2:	42ab      	cmp	r3, r5
 80161e4:	dc28      	bgt.n	8016238 <_printf_common+0xa4>
 80161e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80161ea:	6822      	ldr	r2, [r4, #0]
 80161ec:	3300      	adds	r3, #0
 80161ee:	bf18      	it	ne
 80161f0:	2301      	movne	r3, #1
 80161f2:	0692      	lsls	r2, r2, #26
 80161f4:	d42d      	bmi.n	8016252 <_printf_common+0xbe>
 80161f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80161fa:	4639      	mov	r1, r7
 80161fc:	4630      	mov	r0, r6
 80161fe:	47c0      	blx	r8
 8016200:	3001      	adds	r0, #1
 8016202:	d020      	beq.n	8016246 <_printf_common+0xb2>
 8016204:	6823      	ldr	r3, [r4, #0]
 8016206:	68e5      	ldr	r5, [r4, #12]
 8016208:	f8d9 2000 	ldr.w	r2, [r9]
 801620c:	f003 0306 	and.w	r3, r3, #6
 8016210:	2b04      	cmp	r3, #4
 8016212:	bf08      	it	eq
 8016214:	1aad      	subeq	r5, r5, r2
 8016216:	68a3      	ldr	r3, [r4, #8]
 8016218:	6922      	ldr	r2, [r4, #16]
 801621a:	bf0c      	ite	eq
 801621c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016220:	2500      	movne	r5, #0
 8016222:	4293      	cmp	r3, r2
 8016224:	bfc4      	itt	gt
 8016226:	1a9b      	subgt	r3, r3, r2
 8016228:	18ed      	addgt	r5, r5, r3
 801622a:	f04f 0900 	mov.w	r9, #0
 801622e:	341a      	adds	r4, #26
 8016230:	454d      	cmp	r5, r9
 8016232:	d11a      	bne.n	801626a <_printf_common+0xd6>
 8016234:	2000      	movs	r0, #0
 8016236:	e008      	b.n	801624a <_printf_common+0xb6>
 8016238:	2301      	movs	r3, #1
 801623a:	4652      	mov	r2, sl
 801623c:	4639      	mov	r1, r7
 801623e:	4630      	mov	r0, r6
 8016240:	47c0      	blx	r8
 8016242:	3001      	adds	r0, #1
 8016244:	d103      	bne.n	801624e <_printf_common+0xba>
 8016246:	f04f 30ff 	mov.w	r0, #4294967295
 801624a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801624e:	3501      	adds	r5, #1
 8016250:	e7c3      	b.n	80161da <_printf_common+0x46>
 8016252:	18e1      	adds	r1, r4, r3
 8016254:	1c5a      	adds	r2, r3, #1
 8016256:	2030      	movs	r0, #48	; 0x30
 8016258:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801625c:	4422      	add	r2, r4
 801625e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016262:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016266:	3302      	adds	r3, #2
 8016268:	e7c5      	b.n	80161f6 <_printf_common+0x62>
 801626a:	2301      	movs	r3, #1
 801626c:	4622      	mov	r2, r4
 801626e:	4639      	mov	r1, r7
 8016270:	4630      	mov	r0, r6
 8016272:	47c0      	blx	r8
 8016274:	3001      	adds	r0, #1
 8016276:	d0e6      	beq.n	8016246 <_printf_common+0xb2>
 8016278:	f109 0901 	add.w	r9, r9, #1
 801627c:	e7d8      	b.n	8016230 <_printf_common+0x9c>
	...

08016280 <_printf_i>:
 8016280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016284:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016288:	460c      	mov	r4, r1
 801628a:	7e09      	ldrb	r1, [r1, #24]
 801628c:	b085      	sub	sp, #20
 801628e:	296e      	cmp	r1, #110	; 0x6e
 8016290:	4617      	mov	r7, r2
 8016292:	4606      	mov	r6, r0
 8016294:	4698      	mov	r8, r3
 8016296:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016298:	f000 80b3 	beq.w	8016402 <_printf_i+0x182>
 801629c:	d822      	bhi.n	80162e4 <_printf_i+0x64>
 801629e:	2963      	cmp	r1, #99	; 0x63
 80162a0:	d036      	beq.n	8016310 <_printf_i+0x90>
 80162a2:	d80a      	bhi.n	80162ba <_printf_i+0x3a>
 80162a4:	2900      	cmp	r1, #0
 80162a6:	f000 80b9 	beq.w	801641c <_printf_i+0x19c>
 80162aa:	2958      	cmp	r1, #88	; 0x58
 80162ac:	f000 8083 	beq.w	80163b6 <_printf_i+0x136>
 80162b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80162b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80162b8:	e032      	b.n	8016320 <_printf_i+0xa0>
 80162ba:	2964      	cmp	r1, #100	; 0x64
 80162bc:	d001      	beq.n	80162c2 <_printf_i+0x42>
 80162be:	2969      	cmp	r1, #105	; 0x69
 80162c0:	d1f6      	bne.n	80162b0 <_printf_i+0x30>
 80162c2:	6820      	ldr	r0, [r4, #0]
 80162c4:	6813      	ldr	r3, [r2, #0]
 80162c6:	0605      	lsls	r5, r0, #24
 80162c8:	f103 0104 	add.w	r1, r3, #4
 80162cc:	d52a      	bpl.n	8016324 <_printf_i+0xa4>
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	6011      	str	r1, [r2, #0]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	da03      	bge.n	80162de <_printf_i+0x5e>
 80162d6:	222d      	movs	r2, #45	; 0x2d
 80162d8:	425b      	negs	r3, r3
 80162da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80162de:	486f      	ldr	r0, [pc, #444]	; (801649c <_printf_i+0x21c>)
 80162e0:	220a      	movs	r2, #10
 80162e2:	e039      	b.n	8016358 <_printf_i+0xd8>
 80162e4:	2973      	cmp	r1, #115	; 0x73
 80162e6:	f000 809d 	beq.w	8016424 <_printf_i+0x1a4>
 80162ea:	d808      	bhi.n	80162fe <_printf_i+0x7e>
 80162ec:	296f      	cmp	r1, #111	; 0x6f
 80162ee:	d020      	beq.n	8016332 <_printf_i+0xb2>
 80162f0:	2970      	cmp	r1, #112	; 0x70
 80162f2:	d1dd      	bne.n	80162b0 <_printf_i+0x30>
 80162f4:	6823      	ldr	r3, [r4, #0]
 80162f6:	f043 0320 	orr.w	r3, r3, #32
 80162fa:	6023      	str	r3, [r4, #0]
 80162fc:	e003      	b.n	8016306 <_printf_i+0x86>
 80162fe:	2975      	cmp	r1, #117	; 0x75
 8016300:	d017      	beq.n	8016332 <_printf_i+0xb2>
 8016302:	2978      	cmp	r1, #120	; 0x78
 8016304:	d1d4      	bne.n	80162b0 <_printf_i+0x30>
 8016306:	2378      	movs	r3, #120	; 0x78
 8016308:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801630c:	4864      	ldr	r0, [pc, #400]	; (80164a0 <_printf_i+0x220>)
 801630e:	e055      	b.n	80163bc <_printf_i+0x13c>
 8016310:	6813      	ldr	r3, [r2, #0]
 8016312:	1d19      	adds	r1, r3, #4
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	6011      	str	r1, [r2, #0]
 8016318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801631c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016320:	2301      	movs	r3, #1
 8016322:	e08c      	b.n	801643e <_printf_i+0x1be>
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	6011      	str	r1, [r2, #0]
 8016328:	f010 0f40 	tst.w	r0, #64	; 0x40
 801632c:	bf18      	it	ne
 801632e:	b21b      	sxthne	r3, r3
 8016330:	e7cf      	b.n	80162d2 <_printf_i+0x52>
 8016332:	6813      	ldr	r3, [r2, #0]
 8016334:	6825      	ldr	r5, [r4, #0]
 8016336:	1d18      	adds	r0, r3, #4
 8016338:	6010      	str	r0, [r2, #0]
 801633a:	0628      	lsls	r0, r5, #24
 801633c:	d501      	bpl.n	8016342 <_printf_i+0xc2>
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	e002      	b.n	8016348 <_printf_i+0xc8>
 8016342:	0668      	lsls	r0, r5, #25
 8016344:	d5fb      	bpl.n	801633e <_printf_i+0xbe>
 8016346:	881b      	ldrh	r3, [r3, #0]
 8016348:	4854      	ldr	r0, [pc, #336]	; (801649c <_printf_i+0x21c>)
 801634a:	296f      	cmp	r1, #111	; 0x6f
 801634c:	bf14      	ite	ne
 801634e:	220a      	movne	r2, #10
 8016350:	2208      	moveq	r2, #8
 8016352:	2100      	movs	r1, #0
 8016354:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016358:	6865      	ldr	r5, [r4, #4]
 801635a:	60a5      	str	r5, [r4, #8]
 801635c:	2d00      	cmp	r5, #0
 801635e:	f2c0 8095 	blt.w	801648c <_printf_i+0x20c>
 8016362:	6821      	ldr	r1, [r4, #0]
 8016364:	f021 0104 	bic.w	r1, r1, #4
 8016368:	6021      	str	r1, [r4, #0]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d13d      	bne.n	80163ea <_printf_i+0x16a>
 801636e:	2d00      	cmp	r5, #0
 8016370:	f040 808e 	bne.w	8016490 <_printf_i+0x210>
 8016374:	4665      	mov	r5, ip
 8016376:	2a08      	cmp	r2, #8
 8016378:	d10b      	bne.n	8016392 <_printf_i+0x112>
 801637a:	6823      	ldr	r3, [r4, #0]
 801637c:	07db      	lsls	r3, r3, #31
 801637e:	d508      	bpl.n	8016392 <_printf_i+0x112>
 8016380:	6923      	ldr	r3, [r4, #16]
 8016382:	6862      	ldr	r2, [r4, #4]
 8016384:	429a      	cmp	r2, r3
 8016386:	bfde      	ittt	le
 8016388:	2330      	movle	r3, #48	; 0x30
 801638a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801638e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016392:	ebac 0305 	sub.w	r3, ip, r5
 8016396:	6123      	str	r3, [r4, #16]
 8016398:	f8cd 8000 	str.w	r8, [sp]
 801639c:	463b      	mov	r3, r7
 801639e:	aa03      	add	r2, sp, #12
 80163a0:	4621      	mov	r1, r4
 80163a2:	4630      	mov	r0, r6
 80163a4:	f7ff fef6 	bl	8016194 <_printf_common>
 80163a8:	3001      	adds	r0, #1
 80163aa:	d14d      	bne.n	8016448 <_printf_i+0x1c8>
 80163ac:	f04f 30ff 	mov.w	r0, #4294967295
 80163b0:	b005      	add	sp, #20
 80163b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163b6:	4839      	ldr	r0, [pc, #228]	; (801649c <_printf_i+0x21c>)
 80163b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80163bc:	6813      	ldr	r3, [r2, #0]
 80163be:	6821      	ldr	r1, [r4, #0]
 80163c0:	1d1d      	adds	r5, r3, #4
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	6015      	str	r5, [r2, #0]
 80163c6:	060a      	lsls	r2, r1, #24
 80163c8:	d50b      	bpl.n	80163e2 <_printf_i+0x162>
 80163ca:	07ca      	lsls	r2, r1, #31
 80163cc:	bf44      	itt	mi
 80163ce:	f041 0120 	orrmi.w	r1, r1, #32
 80163d2:	6021      	strmi	r1, [r4, #0]
 80163d4:	b91b      	cbnz	r3, 80163de <_printf_i+0x15e>
 80163d6:	6822      	ldr	r2, [r4, #0]
 80163d8:	f022 0220 	bic.w	r2, r2, #32
 80163dc:	6022      	str	r2, [r4, #0]
 80163de:	2210      	movs	r2, #16
 80163e0:	e7b7      	b.n	8016352 <_printf_i+0xd2>
 80163e2:	064d      	lsls	r5, r1, #25
 80163e4:	bf48      	it	mi
 80163e6:	b29b      	uxthmi	r3, r3
 80163e8:	e7ef      	b.n	80163ca <_printf_i+0x14a>
 80163ea:	4665      	mov	r5, ip
 80163ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80163f0:	fb02 3311 	mls	r3, r2, r1, r3
 80163f4:	5cc3      	ldrb	r3, [r0, r3]
 80163f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80163fa:	460b      	mov	r3, r1
 80163fc:	2900      	cmp	r1, #0
 80163fe:	d1f5      	bne.n	80163ec <_printf_i+0x16c>
 8016400:	e7b9      	b.n	8016376 <_printf_i+0xf6>
 8016402:	6813      	ldr	r3, [r2, #0]
 8016404:	6825      	ldr	r5, [r4, #0]
 8016406:	6961      	ldr	r1, [r4, #20]
 8016408:	1d18      	adds	r0, r3, #4
 801640a:	6010      	str	r0, [r2, #0]
 801640c:	0628      	lsls	r0, r5, #24
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	d501      	bpl.n	8016416 <_printf_i+0x196>
 8016412:	6019      	str	r1, [r3, #0]
 8016414:	e002      	b.n	801641c <_printf_i+0x19c>
 8016416:	066a      	lsls	r2, r5, #25
 8016418:	d5fb      	bpl.n	8016412 <_printf_i+0x192>
 801641a:	8019      	strh	r1, [r3, #0]
 801641c:	2300      	movs	r3, #0
 801641e:	6123      	str	r3, [r4, #16]
 8016420:	4665      	mov	r5, ip
 8016422:	e7b9      	b.n	8016398 <_printf_i+0x118>
 8016424:	6813      	ldr	r3, [r2, #0]
 8016426:	1d19      	adds	r1, r3, #4
 8016428:	6011      	str	r1, [r2, #0]
 801642a:	681d      	ldr	r5, [r3, #0]
 801642c:	6862      	ldr	r2, [r4, #4]
 801642e:	2100      	movs	r1, #0
 8016430:	4628      	mov	r0, r5
 8016432:	f7e9 fee5 	bl	8000200 <memchr>
 8016436:	b108      	cbz	r0, 801643c <_printf_i+0x1bc>
 8016438:	1b40      	subs	r0, r0, r5
 801643a:	6060      	str	r0, [r4, #4]
 801643c:	6863      	ldr	r3, [r4, #4]
 801643e:	6123      	str	r3, [r4, #16]
 8016440:	2300      	movs	r3, #0
 8016442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016446:	e7a7      	b.n	8016398 <_printf_i+0x118>
 8016448:	6923      	ldr	r3, [r4, #16]
 801644a:	462a      	mov	r2, r5
 801644c:	4639      	mov	r1, r7
 801644e:	4630      	mov	r0, r6
 8016450:	47c0      	blx	r8
 8016452:	3001      	adds	r0, #1
 8016454:	d0aa      	beq.n	80163ac <_printf_i+0x12c>
 8016456:	6823      	ldr	r3, [r4, #0]
 8016458:	079b      	lsls	r3, r3, #30
 801645a:	d413      	bmi.n	8016484 <_printf_i+0x204>
 801645c:	68e0      	ldr	r0, [r4, #12]
 801645e:	9b03      	ldr	r3, [sp, #12]
 8016460:	4298      	cmp	r0, r3
 8016462:	bfb8      	it	lt
 8016464:	4618      	movlt	r0, r3
 8016466:	e7a3      	b.n	80163b0 <_printf_i+0x130>
 8016468:	2301      	movs	r3, #1
 801646a:	464a      	mov	r2, r9
 801646c:	4639      	mov	r1, r7
 801646e:	4630      	mov	r0, r6
 8016470:	47c0      	blx	r8
 8016472:	3001      	adds	r0, #1
 8016474:	d09a      	beq.n	80163ac <_printf_i+0x12c>
 8016476:	3501      	adds	r5, #1
 8016478:	68e3      	ldr	r3, [r4, #12]
 801647a:	9a03      	ldr	r2, [sp, #12]
 801647c:	1a9b      	subs	r3, r3, r2
 801647e:	42ab      	cmp	r3, r5
 8016480:	dcf2      	bgt.n	8016468 <_printf_i+0x1e8>
 8016482:	e7eb      	b.n	801645c <_printf_i+0x1dc>
 8016484:	2500      	movs	r5, #0
 8016486:	f104 0919 	add.w	r9, r4, #25
 801648a:	e7f5      	b.n	8016478 <_printf_i+0x1f8>
 801648c:	2b00      	cmp	r3, #0
 801648e:	d1ac      	bne.n	80163ea <_printf_i+0x16a>
 8016490:	7803      	ldrb	r3, [r0, #0]
 8016492:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016496:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801649a:	e76c      	b.n	8016376 <_printf_i+0xf6>
 801649c:	0801bf36 	.word	0x0801bf36
 80164a0:	0801bf47 	.word	0x0801bf47

080164a4 <_scanf_float>:
 80164a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164a8:	469a      	mov	sl, r3
 80164aa:	688b      	ldr	r3, [r1, #8]
 80164ac:	4616      	mov	r6, r2
 80164ae:	1e5a      	subs	r2, r3, #1
 80164b0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80164b4:	b087      	sub	sp, #28
 80164b6:	bf83      	ittte	hi
 80164b8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80164bc:	189b      	addhi	r3, r3, r2
 80164be:	9301      	strhi	r3, [sp, #4]
 80164c0:	2300      	movls	r3, #0
 80164c2:	bf86      	itte	hi
 80164c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80164c8:	608b      	strhi	r3, [r1, #8]
 80164ca:	9301      	strls	r3, [sp, #4]
 80164cc:	680b      	ldr	r3, [r1, #0]
 80164ce:	4688      	mov	r8, r1
 80164d0:	f04f 0b00 	mov.w	fp, #0
 80164d4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80164d8:	f848 3b1c 	str.w	r3, [r8], #28
 80164dc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80164e0:	4607      	mov	r7, r0
 80164e2:	460c      	mov	r4, r1
 80164e4:	4645      	mov	r5, r8
 80164e6:	465a      	mov	r2, fp
 80164e8:	46d9      	mov	r9, fp
 80164ea:	f8cd b008 	str.w	fp, [sp, #8]
 80164ee:	68a1      	ldr	r1, [r4, #8]
 80164f0:	b181      	cbz	r1, 8016514 <_scanf_float+0x70>
 80164f2:	6833      	ldr	r3, [r6, #0]
 80164f4:	781b      	ldrb	r3, [r3, #0]
 80164f6:	2b49      	cmp	r3, #73	; 0x49
 80164f8:	d071      	beq.n	80165de <_scanf_float+0x13a>
 80164fa:	d84d      	bhi.n	8016598 <_scanf_float+0xf4>
 80164fc:	2b39      	cmp	r3, #57	; 0x39
 80164fe:	d840      	bhi.n	8016582 <_scanf_float+0xde>
 8016500:	2b31      	cmp	r3, #49	; 0x31
 8016502:	f080 8088 	bcs.w	8016616 <_scanf_float+0x172>
 8016506:	2b2d      	cmp	r3, #45	; 0x2d
 8016508:	f000 8090 	beq.w	801662c <_scanf_float+0x188>
 801650c:	d815      	bhi.n	801653a <_scanf_float+0x96>
 801650e:	2b2b      	cmp	r3, #43	; 0x2b
 8016510:	f000 808c 	beq.w	801662c <_scanf_float+0x188>
 8016514:	f1b9 0f00 	cmp.w	r9, #0
 8016518:	d003      	beq.n	8016522 <_scanf_float+0x7e>
 801651a:	6823      	ldr	r3, [r4, #0]
 801651c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016520:	6023      	str	r3, [r4, #0]
 8016522:	3a01      	subs	r2, #1
 8016524:	2a01      	cmp	r2, #1
 8016526:	f200 80ea 	bhi.w	80166fe <_scanf_float+0x25a>
 801652a:	4545      	cmp	r5, r8
 801652c:	f200 80dc 	bhi.w	80166e8 <_scanf_float+0x244>
 8016530:	2601      	movs	r6, #1
 8016532:	4630      	mov	r0, r6
 8016534:	b007      	add	sp, #28
 8016536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801653a:	2b2e      	cmp	r3, #46	; 0x2e
 801653c:	f000 809f 	beq.w	801667e <_scanf_float+0x1da>
 8016540:	2b30      	cmp	r3, #48	; 0x30
 8016542:	d1e7      	bne.n	8016514 <_scanf_float+0x70>
 8016544:	6820      	ldr	r0, [r4, #0]
 8016546:	f410 7f80 	tst.w	r0, #256	; 0x100
 801654a:	d064      	beq.n	8016616 <_scanf_float+0x172>
 801654c:	9b01      	ldr	r3, [sp, #4]
 801654e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8016552:	6020      	str	r0, [r4, #0]
 8016554:	f109 0901 	add.w	r9, r9, #1
 8016558:	b11b      	cbz	r3, 8016562 <_scanf_float+0xbe>
 801655a:	3b01      	subs	r3, #1
 801655c:	3101      	adds	r1, #1
 801655e:	9301      	str	r3, [sp, #4]
 8016560:	60a1      	str	r1, [r4, #8]
 8016562:	68a3      	ldr	r3, [r4, #8]
 8016564:	3b01      	subs	r3, #1
 8016566:	60a3      	str	r3, [r4, #8]
 8016568:	6923      	ldr	r3, [r4, #16]
 801656a:	3301      	adds	r3, #1
 801656c:	6123      	str	r3, [r4, #16]
 801656e:	6873      	ldr	r3, [r6, #4]
 8016570:	3b01      	subs	r3, #1
 8016572:	2b00      	cmp	r3, #0
 8016574:	6073      	str	r3, [r6, #4]
 8016576:	f340 80ac 	ble.w	80166d2 <_scanf_float+0x22e>
 801657a:	6833      	ldr	r3, [r6, #0]
 801657c:	3301      	adds	r3, #1
 801657e:	6033      	str	r3, [r6, #0]
 8016580:	e7b5      	b.n	80164ee <_scanf_float+0x4a>
 8016582:	2b45      	cmp	r3, #69	; 0x45
 8016584:	f000 8085 	beq.w	8016692 <_scanf_float+0x1ee>
 8016588:	2b46      	cmp	r3, #70	; 0x46
 801658a:	d06a      	beq.n	8016662 <_scanf_float+0x1be>
 801658c:	2b41      	cmp	r3, #65	; 0x41
 801658e:	d1c1      	bne.n	8016514 <_scanf_float+0x70>
 8016590:	2a01      	cmp	r2, #1
 8016592:	d1bf      	bne.n	8016514 <_scanf_float+0x70>
 8016594:	2202      	movs	r2, #2
 8016596:	e046      	b.n	8016626 <_scanf_float+0x182>
 8016598:	2b65      	cmp	r3, #101	; 0x65
 801659a:	d07a      	beq.n	8016692 <_scanf_float+0x1ee>
 801659c:	d818      	bhi.n	80165d0 <_scanf_float+0x12c>
 801659e:	2b54      	cmp	r3, #84	; 0x54
 80165a0:	d066      	beq.n	8016670 <_scanf_float+0x1cc>
 80165a2:	d811      	bhi.n	80165c8 <_scanf_float+0x124>
 80165a4:	2b4e      	cmp	r3, #78	; 0x4e
 80165a6:	d1b5      	bne.n	8016514 <_scanf_float+0x70>
 80165a8:	2a00      	cmp	r2, #0
 80165aa:	d146      	bne.n	801663a <_scanf_float+0x196>
 80165ac:	f1b9 0f00 	cmp.w	r9, #0
 80165b0:	d145      	bne.n	801663e <_scanf_float+0x19a>
 80165b2:	6821      	ldr	r1, [r4, #0]
 80165b4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80165b8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80165bc:	d13f      	bne.n	801663e <_scanf_float+0x19a>
 80165be:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80165c2:	6021      	str	r1, [r4, #0]
 80165c4:	2201      	movs	r2, #1
 80165c6:	e02e      	b.n	8016626 <_scanf_float+0x182>
 80165c8:	2b59      	cmp	r3, #89	; 0x59
 80165ca:	d01e      	beq.n	801660a <_scanf_float+0x166>
 80165cc:	2b61      	cmp	r3, #97	; 0x61
 80165ce:	e7de      	b.n	801658e <_scanf_float+0xea>
 80165d0:	2b6e      	cmp	r3, #110	; 0x6e
 80165d2:	d0e9      	beq.n	80165a8 <_scanf_float+0x104>
 80165d4:	d815      	bhi.n	8016602 <_scanf_float+0x15e>
 80165d6:	2b66      	cmp	r3, #102	; 0x66
 80165d8:	d043      	beq.n	8016662 <_scanf_float+0x1be>
 80165da:	2b69      	cmp	r3, #105	; 0x69
 80165dc:	d19a      	bne.n	8016514 <_scanf_float+0x70>
 80165de:	f1bb 0f00 	cmp.w	fp, #0
 80165e2:	d138      	bne.n	8016656 <_scanf_float+0x1b2>
 80165e4:	f1b9 0f00 	cmp.w	r9, #0
 80165e8:	d197      	bne.n	801651a <_scanf_float+0x76>
 80165ea:	6821      	ldr	r1, [r4, #0]
 80165ec:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80165f0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80165f4:	d195      	bne.n	8016522 <_scanf_float+0x7e>
 80165f6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80165fa:	6021      	str	r1, [r4, #0]
 80165fc:	f04f 0b01 	mov.w	fp, #1
 8016600:	e011      	b.n	8016626 <_scanf_float+0x182>
 8016602:	2b74      	cmp	r3, #116	; 0x74
 8016604:	d034      	beq.n	8016670 <_scanf_float+0x1cc>
 8016606:	2b79      	cmp	r3, #121	; 0x79
 8016608:	d184      	bne.n	8016514 <_scanf_float+0x70>
 801660a:	f1bb 0f07 	cmp.w	fp, #7
 801660e:	d181      	bne.n	8016514 <_scanf_float+0x70>
 8016610:	f04f 0b08 	mov.w	fp, #8
 8016614:	e007      	b.n	8016626 <_scanf_float+0x182>
 8016616:	eb12 0f0b 	cmn.w	r2, fp
 801661a:	f47f af7b 	bne.w	8016514 <_scanf_float+0x70>
 801661e:	6821      	ldr	r1, [r4, #0]
 8016620:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016624:	6021      	str	r1, [r4, #0]
 8016626:	702b      	strb	r3, [r5, #0]
 8016628:	3501      	adds	r5, #1
 801662a:	e79a      	b.n	8016562 <_scanf_float+0xbe>
 801662c:	6821      	ldr	r1, [r4, #0]
 801662e:	0608      	lsls	r0, r1, #24
 8016630:	f57f af70 	bpl.w	8016514 <_scanf_float+0x70>
 8016634:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016638:	e7f4      	b.n	8016624 <_scanf_float+0x180>
 801663a:	2a02      	cmp	r2, #2
 801663c:	d047      	beq.n	80166ce <_scanf_float+0x22a>
 801663e:	f1bb 0f01 	cmp.w	fp, #1
 8016642:	d003      	beq.n	801664c <_scanf_float+0x1a8>
 8016644:	f1bb 0f04 	cmp.w	fp, #4
 8016648:	f47f af64 	bne.w	8016514 <_scanf_float+0x70>
 801664c:	f10b 0b01 	add.w	fp, fp, #1
 8016650:	fa5f fb8b 	uxtb.w	fp, fp
 8016654:	e7e7      	b.n	8016626 <_scanf_float+0x182>
 8016656:	f1bb 0f03 	cmp.w	fp, #3
 801665a:	d0f7      	beq.n	801664c <_scanf_float+0x1a8>
 801665c:	f1bb 0f05 	cmp.w	fp, #5
 8016660:	e7f2      	b.n	8016648 <_scanf_float+0x1a4>
 8016662:	f1bb 0f02 	cmp.w	fp, #2
 8016666:	f47f af55 	bne.w	8016514 <_scanf_float+0x70>
 801666a:	f04f 0b03 	mov.w	fp, #3
 801666e:	e7da      	b.n	8016626 <_scanf_float+0x182>
 8016670:	f1bb 0f06 	cmp.w	fp, #6
 8016674:	f47f af4e 	bne.w	8016514 <_scanf_float+0x70>
 8016678:	f04f 0b07 	mov.w	fp, #7
 801667c:	e7d3      	b.n	8016626 <_scanf_float+0x182>
 801667e:	6821      	ldr	r1, [r4, #0]
 8016680:	0588      	lsls	r0, r1, #22
 8016682:	f57f af47 	bpl.w	8016514 <_scanf_float+0x70>
 8016686:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801668a:	6021      	str	r1, [r4, #0]
 801668c:	f8cd 9008 	str.w	r9, [sp, #8]
 8016690:	e7c9      	b.n	8016626 <_scanf_float+0x182>
 8016692:	6821      	ldr	r1, [r4, #0]
 8016694:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016698:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801669c:	d006      	beq.n	80166ac <_scanf_float+0x208>
 801669e:	0548      	lsls	r0, r1, #21
 80166a0:	f57f af38 	bpl.w	8016514 <_scanf_float+0x70>
 80166a4:	f1b9 0f00 	cmp.w	r9, #0
 80166a8:	f43f af3b 	beq.w	8016522 <_scanf_float+0x7e>
 80166ac:	0588      	lsls	r0, r1, #22
 80166ae:	bf58      	it	pl
 80166b0:	9802      	ldrpl	r0, [sp, #8]
 80166b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80166b6:	bf58      	it	pl
 80166b8:	eba9 0000 	subpl.w	r0, r9, r0
 80166bc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80166c0:	bf58      	it	pl
 80166c2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80166c6:	6021      	str	r1, [r4, #0]
 80166c8:	f04f 0900 	mov.w	r9, #0
 80166cc:	e7ab      	b.n	8016626 <_scanf_float+0x182>
 80166ce:	2203      	movs	r2, #3
 80166d0:	e7a9      	b.n	8016626 <_scanf_float+0x182>
 80166d2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80166d6:	9205      	str	r2, [sp, #20]
 80166d8:	4631      	mov	r1, r6
 80166da:	4638      	mov	r0, r7
 80166dc:	4798      	blx	r3
 80166de:	9a05      	ldr	r2, [sp, #20]
 80166e0:	2800      	cmp	r0, #0
 80166e2:	f43f af04 	beq.w	80164ee <_scanf_float+0x4a>
 80166e6:	e715      	b.n	8016514 <_scanf_float+0x70>
 80166e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80166ec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80166f0:	4632      	mov	r2, r6
 80166f2:	4638      	mov	r0, r7
 80166f4:	4798      	blx	r3
 80166f6:	6923      	ldr	r3, [r4, #16]
 80166f8:	3b01      	subs	r3, #1
 80166fa:	6123      	str	r3, [r4, #16]
 80166fc:	e715      	b.n	801652a <_scanf_float+0x86>
 80166fe:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016702:	2b06      	cmp	r3, #6
 8016704:	d80a      	bhi.n	801671c <_scanf_float+0x278>
 8016706:	f1bb 0f02 	cmp.w	fp, #2
 801670a:	d968      	bls.n	80167de <_scanf_float+0x33a>
 801670c:	f1ab 0b03 	sub.w	fp, fp, #3
 8016710:	fa5f fb8b 	uxtb.w	fp, fp
 8016714:	eba5 0b0b 	sub.w	fp, r5, fp
 8016718:	455d      	cmp	r5, fp
 801671a:	d14b      	bne.n	80167b4 <_scanf_float+0x310>
 801671c:	6823      	ldr	r3, [r4, #0]
 801671e:	05da      	lsls	r2, r3, #23
 8016720:	d51f      	bpl.n	8016762 <_scanf_float+0x2be>
 8016722:	055b      	lsls	r3, r3, #21
 8016724:	d468      	bmi.n	80167f8 <_scanf_float+0x354>
 8016726:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801672a:	6923      	ldr	r3, [r4, #16]
 801672c:	2965      	cmp	r1, #101	; 0x65
 801672e:	f103 33ff 	add.w	r3, r3, #4294967295
 8016732:	f105 3bff 	add.w	fp, r5, #4294967295
 8016736:	6123      	str	r3, [r4, #16]
 8016738:	d00d      	beq.n	8016756 <_scanf_float+0x2b2>
 801673a:	2945      	cmp	r1, #69	; 0x45
 801673c:	d00b      	beq.n	8016756 <_scanf_float+0x2b2>
 801673e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016742:	4632      	mov	r2, r6
 8016744:	4638      	mov	r0, r7
 8016746:	4798      	blx	r3
 8016748:	6923      	ldr	r3, [r4, #16]
 801674a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801674e:	3b01      	subs	r3, #1
 8016750:	f1a5 0b02 	sub.w	fp, r5, #2
 8016754:	6123      	str	r3, [r4, #16]
 8016756:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801675a:	4632      	mov	r2, r6
 801675c:	4638      	mov	r0, r7
 801675e:	4798      	blx	r3
 8016760:	465d      	mov	r5, fp
 8016762:	6826      	ldr	r6, [r4, #0]
 8016764:	f016 0610 	ands.w	r6, r6, #16
 8016768:	d17a      	bne.n	8016860 <_scanf_float+0x3bc>
 801676a:	702e      	strb	r6, [r5, #0]
 801676c:	6823      	ldr	r3, [r4, #0]
 801676e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016776:	d142      	bne.n	80167fe <_scanf_float+0x35a>
 8016778:	9b02      	ldr	r3, [sp, #8]
 801677a:	eba9 0303 	sub.w	r3, r9, r3
 801677e:	425a      	negs	r2, r3
 8016780:	2b00      	cmp	r3, #0
 8016782:	d149      	bne.n	8016818 <_scanf_float+0x374>
 8016784:	2200      	movs	r2, #0
 8016786:	4641      	mov	r1, r8
 8016788:	4638      	mov	r0, r7
 801678a:	f000 ff01 	bl	8017590 <_strtod_r>
 801678e:	6825      	ldr	r5, [r4, #0]
 8016790:	f8da 3000 	ldr.w	r3, [sl]
 8016794:	f015 0f02 	tst.w	r5, #2
 8016798:	f103 0204 	add.w	r2, r3, #4
 801679c:	ec59 8b10 	vmov	r8, r9, d0
 80167a0:	f8ca 2000 	str.w	r2, [sl]
 80167a4:	d043      	beq.n	801682e <_scanf_float+0x38a>
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	e9c3 8900 	strd	r8, r9, [r3]
 80167ac:	68e3      	ldr	r3, [r4, #12]
 80167ae:	3301      	adds	r3, #1
 80167b0:	60e3      	str	r3, [r4, #12]
 80167b2:	e6be      	b.n	8016532 <_scanf_float+0x8e>
 80167b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80167b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80167bc:	4632      	mov	r2, r6
 80167be:	4638      	mov	r0, r7
 80167c0:	4798      	blx	r3
 80167c2:	6923      	ldr	r3, [r4, #16]
 80167c4:	3b01      	subs	r3, #1
 80167c6:	6123      	str	r3, [r4, #16]
 80167c8:	e7a6      	b.n	8016718 <_scanf_float+0x274>
 80167ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80167ce:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80167d2:	4632      	mov	r2, r6
 80167d4:	4638      	mov	r0, r7
 80167d6:	4798      	blx	r3
 80167d8:	6923      	ldr	r3, [r4, #16]
 80167da:	3b01      	subs	r3, #1
 80167dc:	6123      	str	r3, [r4, #16]
 80167de:	4545      	cmp	r5, r8
 80167e0:	d8f3      	bhi.n	80167ca <_scanf_float+0x326>
 80167e2:	e6a5      	b.n	8016530 <_scanf_float+0x8c>
 80167e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80167e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80167ec:	4632      	mov	r2, r6
 80167ee:	4638      	mov	r0, r7
 80167f0:	4798      	blx	r3
 80167f2:	6923      	ldr	r3, [r4, #16]
 80167f4:	3b01      	subs	r3, #1
 80167f6:	6123      	str	r3, [r4, #16]
 80167f8:	4545      	cmp	r5, r8
 80167fa:	d8f3      	bhi.n	80167e4 <_scanf_float+0x340>
 80167fc:	e698      	b.n	8016530 <_scanf_float+0x8c>
 80167fe:	9b03      	ldr	r3, [sp, #12]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d0bf      	beq.n	8016784 <_scanf_float+0x2e0>
 8016804:	9904      	ldr	r1, [sp, #16]
 8016806:	230a      	movs	r3, #10
 8016808:	4632      	mov	r2, r6
 801680a:	3101      	adds	r1, #1
 801680c:	4638      	mov	r0, r7
 801680e:	f000 ff5f 	bl	80176d0 <_strtol_r>
 8016812:	9b03      	ldr	r3, [sp, #12]
 8016814:	9d04      	ldr	r5, [sp, #16]
 8016816:	1ac2      	subs	r2, r0, r3
 8016818:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801681c:	429d      	cmp	r5, r3
 801681e:	bf28      	it	cs
 8016820:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016824:	490f      	ldr	r1, [pc, #60]	; (8016864 <_scanf_float+0x3c0>)
 8016826:	4628      	mov	r0, r5
 8016828:	f000 f834 	bl	8016894 <siprintf>
 801682c:	e7aa      	b.n	8016784 <_scanf_float+0x2e0>
 801682e:	f015 0504 	ands.w	r5, r5, #4
 8016832:	d1b8      	bne.n	80167a6 <_scanf_float+0x302>
 8016834:	681f      	ldr	r7, [r3, #0]
 8016836:	ee10 2a10 	vmov	r2, s0
 801683a:	464b      	mov	r3, r9
 801683c:	ee10 0a10 	vmov	r0, s0
 8016840:	4649      	mov	r1, r9
 8016842:	f7ea f983 	bl	8000b4c <__aeabi_dcmpun>
 8016846:	b128      	cbz	r0, 8016854 <_scanf_float+0x3b0>
 8016848:	4628      	mov	r0, r5
 801684a:	f000 f81d 	bl	8016888 <nanf>
 801684e:	ed87 0a00 	vstr	s0, [r7]
 8016852:	e7ab      	b.n	80167ac <_scanf_float+0x308>
 8016854:	4640      	mov	r0, r8
 8016856:	4649      	mov	r1, r9
 8016858:	f7ea f9d6 	bl	8000c08 <__aeabi_d2f>
 801685c:	6038      	str	r0, [r7, #0]
 801685e:	e7a5      	b.n	80167ac <_scanf_float+0x308>
 8016860:	2600      	movs	r6, #0
 8016862:	e666      	b.n	8016532 <_scanf_float+0x8e>
 8016864:	0801bf58 	.word	0x0801bf58

08016868 <_sbrk_r>:
 8016868:	b538      	push	{r3, r4, r5, lr}
 801686a:	4c06      	ldr	r4, [pc, #24]	; (8016884 <_sbrk_r+0x1c>)
 801686c:	2300      	movs	r3, #0
 801686e:	4605      	mov	r5, r0
 8016870:	4608      	mov	r0, r1
 8016872:	6023      	str	r3, [r4, #0]
 8016874:	f7fe fb04 	bl	8014e80 <_sbrk>
 8016878:	1c43      	adds	r3, r0, #1
 801687a:	d102      	bne.n	8016882 <_sbrk_r+0x1a>
 801687c:	6823      	ldr	r3, [r4, #0]
 801687e:	b103      	cbz	r3, 8016882 <_sbrk_r+0x1a>
 8016880:	602b      	str	r3, [r5, #0]
 8016882:	bd38      	pop	{r3, r4, r5, pc}
 8016884:	2000a360 	.word	0x2000a360

08016888 <nanf>:
 8016888:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016890 <nanf+0x8>
 801688c:	4770      	bx	lr
 801688e:	bf00      	nop
 8016890:	7fc00000 	.word	0x7fc00000

08016894 <siprintf>:
 8016894:	b40e      	push	{r1, r2, r3}
 8016896:	b500      	push	{lr}
 8016898:	b09c      	sub	sp, #112	; 0x70
 801689a:	ab1d      	add	r3, sp, #116	; 0x74
 801689c:	9002      	str	r0, [sp, #8]
 801689e:	9006      	str	r0, [sp, #24]
 80168a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80168a4:	4809      	ldr	r0, [pc, #36]	; (80168cc <siprintf+0x38>)
 80168a6:	9107      	str	r1, [sp, #28]
 80168a8:	9104      	str	r1, [sp, #16]
 80168aa:	4909      	ldr	r1, [pc, #36]	; (80168d0 <siprintf+0x3c>)
 80168ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80168b0:	9105      	str	r1, [sp, #20]
 80168b2:	6800      	ldr	r0, [r0, #0]
 80168b4:	9301      	str	r3, [sp, #4]
 80168b6:	a902      	add	r1, sp, #8
 80168b8:	f002 fd2c 	bl	8019314 <_svfiprintf_r>
 80168bc:	9b02      	ldr	r3, [sp, #8]
 80168be:	2200      	movs	r2, #0
 80168c0:	701a      	strb	r2, [r3, #0]
 80168c2:	b01c      	add	sp, #112	; 0x70
 80168c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80168c8:	b003      	add	sp, #12
 80168ca:	4770      	bx	lr
 80168cc:	20000198 	.word	0x20000198
 80168d0:	ffff0208 	.word	0xffff0208

080168d4 <strcat>:
 80168d4:	b510      	push	{r4, lr}
 80168d6:	4603      	mov	r3, r0
 80168d8:	781a      	ldrb	r2, [r3, #0]
 80168da:	1c5c      	adds	r4, r3, #1
 80168dc:	b93a      	cbnz	r2, 80168ee <strcat+0x1a>
 80168de:	3b01      	subs	r3, #1
 80168e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80168e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80168e8:	2a00      	cmp	r2, #0
 80168ea:	d1f9      	bne.n	80168e0 <strcat+0xc>
 80168ec:	bd10      	pop	{r4, pc}
 80168ee:	4623      	mov	r3, r4
 80168f0:	e7f2      	b.n	80168d8 <strcat+0x4>

080168f2 <strchr>:
 80168f2:	b2c9      	uxtb	r1, r1
 80168f4:	4603      	mov	r3, r0
 80168f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80168fa:	b11a      	cbz	r2, 8016904 <strchr+0x12>
 80168fc:	428a      	cmp	r2, r1
 80168fe:	d1f9      	bne.n	80168f4 <strchr+0x2>
 8016900:	4618      	mov	r0, r3
 8016902:	4770      	bx	lr
 8016904:	2900      	cmp	r1, #0
 8016906:	bf18      	it	ne
 8016908:	2300      	movne	r3, #0
 801690a:	e7f9      	b.n	8016900 <strchr+0xe>

0801690c <strcpy>:
 801690c:	4603      	mov	r3, r0
 801690e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016912:	f803 2b01 	strb.w	r2, [r3], #1
 8016916:	2a00      	cmp	r2, #0
 8016918:	d1f9      	bne.n	801690e <strcpy+0x2>
 801691a:	4770      	bx	lr

0801691c <strncmp>:
 801691c:	b510      	push	{r4, lr}
 801691e:	b16a      	cbz	r2, 801693c <strncmp+0x20>
 8016920:	3901      	subs	r1, #1
 8016922:	1884      	adds	r4, r0, r2
 8016924:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016928:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801692c:	4293      	cmp	r3, r2
 801692e:	d103      	bne.n	8016938 <strncmp+0x1c>
 8016930:	42a0      	cmp	r0, r4
 8016932:	d001      	beq.n	8016938 <strncmp+0x1c>
 8016934:	2b00      	cmp	r3, #0
 8016936:	d1f5      	bne.n	8016924 <strncmp+0x8>
 8016938:	1a98      	subs	r0, r3, r2
 801693a:	bd10      	pop	{r4, pc}
 801693c:	4610      	mov	r0, r2
 801693e:	e7fc      	b.n	801693a <strncmp+0x1e>

08016940 <strncpy>:
 8016940:	b570      	push	{r4, r5, r6, lr}
 8016942:	3901      	subs	r1, #1
 8016944:	4604      	mov	r4, r0
 8016946:	b902      	cbnz	r2, 801694a <strncpy+0xa>
 8016948:	bd70      	pop	{r4, r5, r6, pc}
 801694a:	4623      	mov	r3, r4
 801694c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8016950:	f803 5b01 	strb.w	r5, [r3], #1
 8016954:	1e56      	subs	r6, r2, #1
 8016956:	b92d      	cbnz	r5, 8016964 <strncpy+0x24>
 8016958:	4414      	add	r4, r2
 801695a:	42a3      	cmp	r3, r4
 801695c:	d0f4      	beq.n	8016948 <strncpy+0x8>
 801695e:	f803 5b01 	strb.w	r5, [r3], #1
 8016962:	e7fa      	b.n	801695a <strncpy+0x1a>
 8016964:	461c      	mov	r4, r3
 8016966:	4632      	mov	r2, r6
 8016968:	e7ed      	b.n	8016946 <strncpy+0x6>

0801696a <sulp>:
 801696a:	b570      	push	{r4, r5, r6, lr}
 801696c:	4604      	mov	r4, r0
 801696e:	460d      	mov	r5, r1
 8016970:	ec45 4b10 	vmov	d0, r4, r5
 8016974:	4616      	mov	r6, r2
 8016976:	f002 fb31 	bl	8018fdc <__ulp>
 801697a:	ec51 0b10 	vmov	r0, r1, d0
 801697e:	b17e      	cbz	r6, 80169a0 <sulp+0x36>
 8016980:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016984:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016988:	2b00      	cmp	r3, #0
 801698a:	dd09      	ble.n	80169a0 <sulp+0x36>
 801698c:	051b      	lsls	r3, r3, #20
 801698e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016992:	2400      	movs	r4, #0
 8016994:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016998:	4622      	mov	r2, r4
 801699a:	462b      	mov	r3, r5
 801699c:	f7e9 fe3c 	bl	8000618 <__aeabi_dmul>
 80169a0:	bd70      	pop	{r4, r5, r6, pc}
 80169a2:	0000      	movs	r0, r0
 80169a4:	0000      	movs	r0, r0
	...

080169a8 <_strtod_l>:
 80169a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169ac:	461f      	mov	r7, r3
 80169ae:	b0a1      	sub	sp, #132	; 0x84
 80169b0:	2300      	movs	r3, #0
 80169b2:	4681      	mov	r9, r0
 80169b4:	4638      	mov	r0, r7
 80169b6:	460e      	mov	r6, r1
 80169b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80169ba:	931c      	str	r3, [sp, #112]	; 0x70
 80169bc:	f002 f81d 	bl	80189fa <__localeconv_l>
 80169c0:	4680      	mov	r8, r0
 80169c2:	6800      	ldr	r0, [r0, #0]
 80169c4:	f7e9 fc0e 	bl	80001e4 <strlen>
 80169c8:	f04f 0a00 	mov.w	sl, #0
 80169cc:	4604      	mov	r4, r0
 80169ce:	f04f 0b00 	mov.w	fp, #0
 80169d2:	961b      	str	r6, [sp, #108]	; 0x6c
 80169d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169d6:	781a      	ldrb	r2, [r3, #0]
 80169d8:	2a0d      	cmp	r2, #13
 80169da:	d832      	bhi.n	8016a42 <_strtod_l+0x9a>
 80169dc:	2a09      	cmp	r2, #9
 80169de:	d236      	bcs.n	8016a4e <_strtod_l+0xa6>
 80169e0:	2a00      	cmp	r2, #0
 80169e2:	d03e      	beq.n	8016a62 <_strtod_l+0xba>
 80169e4:	2300      	movs	r3, #0
 80169e6:	930d      	str	r3, [sp, #52]	; 0x34
 80169e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80169ea:	782b      	ldrb	r3, [r5, #0]
 80169ec:	2b30      	cmp	r3, #48	; 0x30
 80169ee:	f040 80ac 	bne.w	8016b4a <_strtod_l+0x1a2>
 80169f2:	786b      	ldrb	r3, [r5, #1]
 80169f4:	2b58      	cmp	r3, #88	; 0x58
 80169f6:	d001      	beq.n	80169fc <_strtod_l+0x54>
 80169f8:	2b78      	cmp	r3, #120	; 0x78
 80169fa:	d167      	bne.n	8016acc <_strtod_l+0x124>
 80169fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169fe:	9301      	str	r3, [sp, #4]
 8016a00:	ab1c      	add	r3, sp, #112	; 0x70
 8016a02:	9300      	str	r3, [sp, #0]
 8016a04:	9702      	str	r7, [sp, #8]
 8016a06:	ab1d      	add	r3, sp, #116	; 0x74
 8016a08:	4a88      	ldr	r2, [pc, #544]	; (8016c2c <_strtod_l+0x284>)
 8016a0a:	a91b      	add	r1, sp, #108	; 0x6c
 8016a0c:	4648      	mov	r0, r9
 8016a0e:	f001 fd1a 	bl	8018446 <__gethex>
 8016a12:	f010 0407 	ands.w	r4, r0, #7
 8016a16:	4606      	mov	r6, r0
 8016a18:	d005      	beq.n	8016a26 <_strtod_l+0x7e>
 8016a1a:	2c06      	cmp	r4, #6
 8016a1c:	d12b      	bne.n	8016a76 <_strtod_l+0xce>
 8016a1e:	3501      	adds	r5, #1
 8016a20:	2300      	movs	r3, #0
 8016a22:	951b      	str	r5, [sp, #108]	; 0x6c
 8016a24:	930d      	str	r3, [sp, #52]	; 0x34
 8016a26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	f040 859a 	bne.w	8017562 <_strtod_l+0xbba>
 8016a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a30:	b1e3      	cbz	r3, 8016a6c <_strtod_l+0xc4>
 8016a32:	4652      	mov	r2, sl
 8016a34:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016a38:	ec43 2b10 	vmov	d0, r2, r3
 8016a3c:	b021      	add	sp, #132	; 0x84
 8016a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a42:	2a2b      	cmp	r2, #43	; 0x2b
 8016a44:	d015      	beq.n	8016a72 <_strtod_l+0xca>
 8016a46:	2a2d      	cmp	r2, #45	; 0x2d
 8016a48:	d004      	beq.n	8016a54 <_strtod_l+0xac>
 8016a4a:	2a20      	cmp	r2, #32
 8016a4c:	d1ca      	bne.n	80169e4 <_strtod_l+0x3c>
 8016a4e:	3301      	adds	r3, #1
 8016a50:	931b      	str	r3, [sp, #108]	; 0x6c
 8016a52:	e7bf      	b.n	80169d4 <_strtod_l+0x2c>
 8016a54:	2201      	movs	r2, #1
 8016a56:	920d      	str	r2, [sp, #52]	; 0x34
 8016a58:	1c5a      	adds	r2, r3, #1
 8016a5a:	921b      	str	r2, [sp, #108]	; 0x6c
 8016a5c:	785b      	ldrb	r3, [r3, #1]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d1c2      	bne.n	80169e8 <_strtod_l+0x40>
 8016a62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016a64:	961b      	str	r6, [sp, #108]	; 0x6c
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	f040 8579 	bne.w	801755e <_strtod_l+0xbb6>
 8016a6c:	4652      	mov	r2, sl
 8016a6e:	465b      	mov	r3, fp
 8016a70:	e7e2      	b.n	8016a38 <_strtod_l+0x90>
 8016a72:	2200      	movs	r2, #0
 8016a74:	e7ef      	b.n	8016a56 <_strtod_l+0xae>
 8016a76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016a78:	b13a      	cbz	r2, 8016a8a <_strtod_l+0xe2>
 8016a7a:	2135      	movs	r1, #53	; 0x35
 8016a7c:	a81e      	add	r0, sp, #120	; 0x78
 8016a7e:	f002 fba5 	bl	80191cc <__copybits>
 8016a82:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016a84:	4648      	mov	r0, r9
 8016a86:	f002 f811 	bl	8018aac <_Bfree>
 8016a8a:	3c01      	subs	r4, #1
 8016a8c:	2c04      	cmp	r4, #4
 8016a8e:	d806      	bhi.n	8016a9e <_strtod_l+0xf6>
 8016a90:	e8df f004 	tbb	[pc, r4]
 8016a94:	1714030a 	.word	0x1714030a
 8016a98:	0a          	.byte	0x0a
 8016a99:	00          	.byte	0x00
 8016a9a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016a9e:	0730      	lsls	r0, r6, #28
 8016aa0:	d5c1      	bpl.n	8016a26 <_strtod_l+0x7e>
 8016aa2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016aa6:	e7be      	b.n	8016a26 <_strtod_l+0x7e>
 8016aa8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016aac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016aae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016ab2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016ab6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016aba:	e7f0      	b.n	8016a9e <_strtod_l+0xf6>
 8016abc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016c30 <_strtod_l+0x288>
 8016ac0:	e7ed      	b.n	8016a9e <_strtod_l+0xf6>
 8016ac2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016ac6:	f04f 3aff 	mov.w	sl, #4294967295
 8016aca:	e7e8      	b.n	8016a9e <_strtod_l+0xf6>
 8016acc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ace:	1c5a      	adds	r2, r3, #1
 8016ad0:	921b      	str	r2, [sp, #108]	; 0x6c
 8016ad2:	785b      	ldrb	r3, [r3, #1]
 8016ad4:	2b30      	cmp	r3, #48	; 0x30
 8016ad6:	d0f9      	beq.n	8016acc <_strtod_l+0x124>
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d0a4      	beq.n	8016a26 <_strtod_l+0x7e>
 8016adc:	2301      	movs	r3, #1
 8016ade:	2500      	movs	r5, #0
 8016ae0:	9306      	str	r3, [sp, #24]
 8016ae2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ae4:	9308      	str	r3, [sp, #32]
 8016ae6:	9507      	str	r5, [sp, #28]
 8016ae8:	9505      	str	r5, [sp, #20]
 8016aea:	220a      	movs	r2, #10
 8016aec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016aee:	7807      	ldrb	r7, [r0, #0]
 8016af0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016af4:	b2d9      	uxtb	r1, r3
 8016af6:	2909      	cmp	r1, #9
 8016af8:	d929      	bls.n	8016b4e <_strtod_l+0x1a6>
 8016afa:	4622      	mov	r2, r4
 8016afc:	f8d8 1000 	ldr.w	r1, [r8]
 8016b00:	f7ff ff0c 	bl	801691c <strncmp>
 8016b04:	2800      	cmp	r0, #0
 8016b06:	d031      	beq.n	8016b6c <_strtod_l+0x1c4>
 8016b08:	2000      	movs	r0, #0
 8016b0a:	9c05      	ldr	r4, [sp, #20]
 8016b0c:	9004      	str	r0, [sp, #16]
 8016b0e:	463b      	mov	r3, r7
 8016b10:	4602      	mov	r2, r0
 8016b12:	2b65      	cmp	r3, #101	; 0x65
 8016b14:	d001      	beq.n	8016b1a <_strtod_l+0x172>
 8016b16:	2b45      	cmp	r3, #69	; 0x45
 8016b18:	d114      	bne.n	8016b44 <_strtod_l+0x19c>
 8016b1a:	b924      	cbnz	r4, 8016b26 <_strtod_l+0x17e>
 8016b1c:	b910      	cbnz	r0, 8016b24 <_strtod_l+0x17c>
 8016b1e:	9b06      	ldr	r3, [sp, #24]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d09e      	beq.n	8016a62 <_strtod_l+0xba>
 8016b24:	2400      	movs	r4, #0
 8016b26:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016b28:	1c73      	adds	r3, r6, #1
 8016b2a:	931b      	str	r3, [sp, #108]	; 0x6c
 8016b2c:	7873      	ldrb	r3, [r6, #1]
 8016b2e:	2b2b      	cmp	r3, #43	; 0x2b
 8016b30:	d078      	beq.n	8016c24 <_strtod_l+0x27c>
 8016b32:	2b2d      	cmp	r3, #45	; 0x2d
 8016b34:	d070      	beq.n	8016c18 <_strtod_l+0x270>
 8016b36:	f04f 0c00 	mov.w	ip, #0
 8016b3a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016b3e:	2f09      	cmp	r7, #9
 8016b40:	d97c      	bls.n	8016c3c <_strtod_l+0x294>
 8016b42:	961b      	str	r6, [sp, #108]	; 0x6c
 8016b44:	f04f 0e00 	mov.w	lr, #0
 8016b48:	e09a      	b.n	8016c80 <_strtod_l+0x2d8>
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	e7c7      	b.n	8016ade <_strtod_l+0x136>
 8016b4e:	9905      	ldr	r1, [sp, #20]
 8016b50:	2908      	cmp	r1, #8
 8016b52:	bfdd      	ittte	le
 8016b54:	9907      	ldrle	r1, [sp, #28]
 8016b56:	fb02 3301 	mlale	r3, r2, r1, r3
 8016b5a:	9307      	strle	r3, [sp, #28]
 8016b5c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016b60:	9b05      	ldr	r3, [sp, #20]
 8016b62:	3001      	adds	r0, #1
 8016b64:	3301      	adds	r3, #1
 8016b66:	9305      	str	r3, [sp, #20]
 8016b68:	901b      	str	r0, [sp, #108]	; 0x6c
 8016b6a:	e7bf      	b.n	8016aec <_strtod_l+0x144>
 8016b6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b6e:	191a      	adds	r2, r3, r4
 8016b70:	921b      	str	r2, [sp, #108]	; 0x6c
 8016b72:	9a05      	ldr	r2, [sp, #20]
 8016b74:	5d1b      	ldrb	r3, [r3, r4]
 8016b76:	2a00      	cmp	r2, #0
 8016b78:	d037      	beq.n	8016bea <_strtod_l+0x242>
 8016b7a:	9c05      	ldr	r4, [sp, #20]
 8016b7c:	4602      	mov	r2, r0
 8016b7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016b82:	2909      	cmp	r1, #9
 8016b84:	d913      	bls.n	8016bae <_strtod_l+0x206>
 8016b86:	2101      	movs	r1, #1
 8016b88:	9104      	str	r1, [sp, #16]
 8016b8a:	e7c2      	b.n	8016b12 <_strtod_l+0x16a>
 8016b8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b8e:	1c5a      	adds	r2, r3, #1
 8016b90:	921b      	str	r2, [sp, #108]	; 0x6c
 8016b92:	785b      	ldrb	r3, [r3, #1]
 8016b94:	3001      	adds	r0, #1
 8016b96:	2b30      	cmp	r3, #48	; 0x30
 8016b98:	d0f8      	beq.n	8016b8c <_strtod_l+0x1e4>
 8016b9a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016b9e:	2a08      	cmp	r2, #8
 8016ba0:	f200 84e4 	bhi.w	801756c <_strtod_l+0xbc4>
 8016ba4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016ba6:	9208      	str	r2, [sp, #32]
 8016ba8:	4602      	mov	r2, r0
 8016baa:	2000      	movs	r0, #0
 8016bac:	4604      	mov	r4, r0
 8016bae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016bb2:	f100 0101 	add.w	r1, r0, #1
 8016bb6:	d012      	beq.n	8016bde <_strtod_l+0x236>
 8016bb8:	440a      	add	r2, r1
 8016bba:	eb00 0c04 	add.w	ip, r0, r4
 8016bbe:	4621      	mov	r1, r4
 8016bc0:	270a      	movs	r7, #10
 8016bc2:	458c      	cmp	ip, r1
 8016bc4:	d113      	bne.n	8016bee <_strtod_l+0x246>
 8016bc6:	1821      	adds	r1, r4, r0
 8016bc8:	2908      	cmp	r1, #8
 8016bca:	f104 0401 	add.w	r4, r4, #1
 8016bce:	4404      	add	r4, r0
 8016bd0:	dc19      	bgt.n	8016c06 <_strtod_l+0x25e>
 8016bd2:	9b07      	ldr	r3, [sp, #28]
 8016bd4:	210a      	movs	r1, #10
 8016bd6:	fb01 e303 	mla	r3, r1, r3, lr
 8016bda:	9307      	str	r3, [sp, #28]
 8016bdc:	2100      	movs	r1, #0
 8016bde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016be0:	1c58      	adds	r0, r3, #1
 8016be2:	901b      	str	r0, [sp, #108]	; 0x6c
 8016be4:	785b      	ldrb	r3, [r3, #1]
 8016be6:	4608      	mov	r0, r1
 8016be8:	e7c9      	b.n	8016b7e <_strtod_l+0x1d6>
 8016bea:	9805      	ldr	r0, [sp, #20]
 8016bec:	e7d3      	b.n	8016b96 <_strtod_l+0x1ee>
 8016bee:	2908      	cmp	r1, #8
 8016bf0:	f101 0101 	add.w	r1, r1, #1
 8016bf4:	dc03      	bgt.n	8016bfe <_strtod_l+0x256>
 8016bf6:	9b07      	ldr	r3, [sp, #28]
 8016bf8:	437b      	muls	r3, r7
 8016bfa:	9307      	str	r3, [sp, #28]
 8016bfc:	e7e1      	b.n	8016bc2 <_strtod_l+0x21a>
 8016bfe:	2910      	cmp	r1, #16
 8016c00:	bfd8      	it	le
 8016c02:	437d      	mulle	r5, r7
 8016c04:	e7dd      	b.n	8016bc2 <_strtod_l+0x21a>
 8016c06:	2c10      	cmp	r4, #16
 8016c08:	bfdc      	itt	le
 8016c0a:	210a      	movle	r1, #10
 8016c0c:	fb01 e505 	mlale	r5, r1, r5, lr
 8016c10:	e7e4      	b.n	8016bdc <_strtod_l+0x234>
 8016c12:	2301      	movs	r3, #1
 8016c14:	9304      	str	r3, [sp, #16]
 8016c16:	e781      	b.n	8016b1c <_strtod_l+0x174>
 8016c18:	f04f 0c01 	mov.w	ip, #1
 8016c1c:	1cb3      	adds	r3, r6, #2
 8016c1e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016c20:	78b3      	ldrb	r3, [r6, #2]
 8016c22:	e78a      	b.n	8016b3a <_strtod_l+0x192>
 8016c24:	f04f 0c00 	mov.w	ip, #0
 8016c28:	e7f8      	b.n	8016c1c <_strtod_l+0x274>
 8016c2a:	bf00      	nop
 8016c2c:	0801bf60 	.word	0x0801bf60
 8016c30:	7ff00000 	.word	0x7ff00000
 8016c34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c36:	1c5f      	adds	r7, r3, #1
 8016c38:	971b      	str	r7, [sp, #108]	; 0x6c
 8016c3a:	785b      	ldrb	r3, [r3, #1]
 8016c3c:	2b30      	cmp	r3, #48	; 0x30
 8016c3e:	d0f9      	beq.n	8016c34 <_strtod_l+0x28c>
 8016c40:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016c44:	2f08      	cmp	r7, #8
 8016c46:	f63f af7d 	bhi.w	8016b44 <_strtod_l+0x19c>
 8016c4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016c4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c50:	930a      	str	r3, [sp, #40]	; 0x28
 8016c52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c54:	1c5f      	adds	r7, r3, #1
 8016c56:	971b      	str	r7, [sp, #108]	; 0x6c
 8016c58:	785b      	ldrb	r3, [r3, #1]
 8016c5a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016c5e:	f1b8 0f09 	cmp.w	r8, #9
 8016c62:	d937      	bls.n	8016cd4 <_strtod_l+0x32c>
 8016c64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016c66:	1a7f      	subs	r7, r7, r1
 8016c68:	2f08      	cmp	r7, #8
 8016c6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016c6e:	dc37      	bgt.n	8016ce0 <_strtod_l+0x338>
 8016c70:	45be      	cmp	lr, r7
 8016c72:	bfa8      	it	ge
 8016c74:	46be      	movge	lr, r7
 8016c76:	f1bc 0f00 	cmp.w	ip, #0
 8016c7a:	d001      	beq.n	8016c80 <_strtod_l+0x2d8>
 8016c7c:	f1ce 0e00 	rsb	lr, lr, #0
 8016c80:	2c00      	cmp	r4, #0
 8016c82:	d151      	bne.n	8016d28 <_strtod_l+0x380>
 8016c84:	2800      	cmp	r0, #0
 8016c86:	f47f aece 	bne.w	8016a26 <_strtod_l+0x7e>
 8016c8a:	9a06      	ldr	r2, [sp, #24]
 8016c8c:	2a00      	cmp	r2, #0
 8016c8e:	f47f aeca 	bne.w	8016a26 <_strtod_l+0x7e>
 8016c92:	9a04      	ldr	r2, [sp, #16]
 8016c94:	2a00      	cmp	r2, #0
 8016c96:	f47f aee4 	bne.w	8016a62 <_strtod_l+0xba>
 8016c9a:	2b4e      	cmp	r3, #78	; 0x4e
 8016c9c:	d027      	beq.n	8016cee <_strtod_l+0x346>
 8016c9e:	dc21      	bgt.n	8016ce4 <_strtod_l+0x33c>
 8016ca0:	2b49      	cmp	r3, #73	; 0x49
 8016ca2:	f47f aede 	bne.w	8016a62 <_strtod_l+0xba>
 8016ca6:	49a0      	ldr	r1, [pc, #640]	; (8016f28 <_strtod_l+0x580>)
 8016ca8:	a81b      	add	r0, sp, #108	; 0x6c
 8016caa:	f001 fdff 	bl	80188ac <__match>
 8016cae:	2800      	cmp	r0, #0
 8016cb0:	f43f aed7 	beq.w	8016a62 <_strtod_l+0xba>
 8016cb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016cb6:	499d      	ldr	r1, [pc, #628]	; (8016f2c <_strtod_l+0x584>)
 8016cb8:	3b01      	subs	r3, #1
 8016cba:	a81b      	add	r0, sp, #108	; 0x6c
 8016cbc:	931b      	str	r3, [sp, #108]	; 0x6c
 8016cbe:	f001 fdf5 	bl	80188ac <__match>
 8016cc2:	b910      	cbnz	r0, 8016cca <_strtod_l+0x322>
 8016cc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016cc6:	3301      	adds	r3, #1
 8016cc8:	931b      	str	r3, [sp, #108]	; 0x6c
 8016cca:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016f40 <_strtod_l+0x598>
 8016cce:	f04f 0a00 	mov.w	sl, #0
 8016cd2:	e6a8      	b.n	8016a26 <_strtod_l+0x7e>
 8016cd4:	210a      	movs	r1, #10
 8016cd6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016cda:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016cde:	e7b8      	b.n	8016c52 <_strtod_l+0x2aa>
 8016ce0:	46be      	mov	lr, r7
 8016ce2:	e7c8      	b.n	8016c76 <_strtod_l+0x2ce>
 8016ce4:	2b69      	cmp	r3, #105	; 0x69
 8016ce6:	d0de      	beq.n	8016ca6 <_strtod_l+0x2fe>
 8016ce8:	2b6e      	cmp	r3, #110	; 0x6e
 8016cea:	f47f aeba 	bne.w	8016a62 <_strtod_l+0xba>
 8016cee:	4990      	ldr	r1, [pc, #576]	; (8016f30 <_strtod_l+0x588>)
 8016cf0:	a81b      	add	r0, sp, #108	; 0x6c
 8016cf2:	f001 fddb 	bl	80188ac <__match>
 8016cf6:	2800      	cmp	r0, #0
 8016cf8:	f43f aeb3 	beq.w	8016a62 <_strtod_l+0xba>
 8016cfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016cfe:	781b      	ldrb	r3, [r3, #0]
 8016d00:	2b28      	cmp	r3, #40	; 0x28
 8016d02:	d10e      	bne.n	8016d22 <_strtod_l+0x37a>
 8016d04:	aa1e      	add	r2, sp, #120	; 0x78
 8016d06:	498b      	ldr	r1, [pc, #556]	; (8016f34 <_strtod_l+0x58c>)
 8016d08:	a81b      	add	r0, sp, #108	; 0x6c
 8016d0a:	f001 fde3 	bl	80188d4 <__hexnan>
 8016d0e:	2805      	cmp	r0, #5
 8016d10:	d107      	bne.n	8016d22 <_strtod_l+0x37a>
 8016d12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016d14:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016d18:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016d1c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016d20:	e681      	b.n	8016a26 <_strtod_l+0x7e>
 8016d22:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016f48 <_strtod_l+0x5a0>
 8016d26:	e7d2      	b.n	8016cce <_strtod_l+0x326>
 8016d28:	ebae 0302 	sub.w	r3, lr, r2
 8016d2c:	9306      	str	r3, [sp, #24]
 8016d2e:	9b05      	ldr	r3, [sp, #20]
 8016d30:	9807      	ldr	r0, [sp, #28]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	bf08      	it	eq
 8016d36:	4623      	moveq	r3, r4
 8016d38:	2c10      	cmp	r4, #16
 8016d3a:	9305      	str	r3, [sp, #20]
 8016d3c:	46a0      	mov	r8, r4
 8016d3e:	bfa8      	it	ge
 8016d40:	f04f 0810 	movge.w	r8, #16
 8016d44:	f7e9 fbee 	bl	8000524 <__aeabi_ui2d>
 8016d48:	2c09      	cmp	r4, #9
 8016d4a:	4682      	mov	sl, r0
 8016d4c:	468b      	mov	fp, r1
 8016d4e:	dc13      	bgt.n	8016d78 <_strtod_l+0x3d0>
 8016d50:	9b06      	ldr	r3, [sp, #24]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	f43f ae67 	beq.w	8016a26 <_strtod_l+0x7e>
 8016d58:	9b06      	ldr	r3, [sp, #24]
 8016d5a:	dd7a      	ble.n	8016e52 <_strtod_l+0x4aa>
 8016d5c:	2b16      	cmp	r3, #22
 8016d5e:	dc61      	bgt.n	8016e24 <_strtod_l+0x47c>
 8016d60:	4a75      	ldr	r2, [pc, #468]	; (8016f38 <_strtod_l+0x590>)
 8016d62:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016d66:	e9de 0100 	ldrd	r0, r1, [lr]
 8016d6a:	4652      	mov	r2, sl
 8016d6c:	465b      	mov	r3, fp
 8016d6e:	f7e9 fc53 	bl	8000618 <__aeabi_dmul>
 8016d72:	4682      	mov	sl, r0
 8016d74:	468b      	mov	fp, r1
 8016d76:	e656      	b.n	8016a26 <_strtod_l+0x7e>
 8016d78:	4b6f      	ldr	r3, [pc, #444]	; (8016f38 <_strtod_l+0x590>)
 8016d7a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016d7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016d82:	f7e9 fc49 	bl	8000618 <__aeabi_dmul>
 8016d86:	4606      	mov	r6, r0
 8016d88:	4628      	mov	r0, r5
 8016d8a:	460f      	mov	r7, r1
 8016d8c:	f7e9 fbca 	bl	8000524 <__aeabi_ui2d>
 8016d90:	4602      	mov	r2, r0
 8016d92:	460b      	mov	r3, r1
 8016d94:	4630      	mov	r0, r6
 8016d96:	4639      	mov	r1, r7
 8016d98:	f7e9 fa88 	bl	80002ac <__adddf3>
 8016d9c:	2c0f      	cmp	r4, #15
 8016d9e:	4682      	mov	sl, r0
 8016da0:	468b      	mov	fp, r1
 8016da2:	ddd5      	ble.n	8016d50 <_strtod_l+0x3a8>
 8016da4:	9b06      	ldr	r3, [sp, #24]
 8016da6:	eba4 0808 	sub.w	r8, r4, r8
 8016daa:	4498      	add	r8, r3
 8016dac:	f1b8 0f00 	cmp.w	r8, #0
 8016db0:	f340 8096 	ble.w	8016ee0 <_strtod_l+0x538>
 8016db4:	f018 030f 	ands.w	r3, r8, #15
 8016db8:	d00a      	beq.n	8016dd0 <_strtod_l+0x428>
 8016dba:	495f      	ldr	r1, [pc, #380]	; (8016f38 <_strtod_l+0x590>)
 8016dbc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016dc0:	4652      	mov	r2, sl
 8016dc2:	465b      	mov	r3, fp
 8016dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016dc8:	f7e9 fc26 	bl	8000618 <__aeabi_dmul>
 8016dcc:	4682      	mov	sl, r0
 8016dce:	468b      	mov	fp, r1
 8016dd0:	f038 080f 	bics.w	r8, r8, #15
 8016dd4:	d073      	beq.n	8016ebe <_strtod_l+0x516>
 8016dd6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016dda:	dd47      	ble.n	8016e6c <_strtod_l+0x4c4>
 8016ddc:	2400      	movs	r4, #0
 8016dde:	46a0      	mov	r8, r4
 8016de0:	9407      	str	r4, [sp, #28]
 8016de2:	9405      	str	r4, [sp, #20]
 8016de4:	2322      	movs	r3, #34	; 0x22
 8016de6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016f40 <_strtod_l+0x598>
 8016dea:	f8c9 3000 	str.w	r3, [r9]
 8016dee:	f04f 0a00 	mov.w	sl, #0
 8016df2:	9b07      	ldr	r3, [sp, #28]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	f43f ae16 	beq.w	8016a26 <_strtod_l+0x7e>
 8016dfa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016dfc:	4648      	mov	r0, r9
 8016dfe:	f001 fe55 	bl	8018aac <_Bfree>
 8016e02:	9905      	ldr	r1, [sp, #20]
 8016e04:	4648      	mov	r0, r9
 8016e06:	f001 fe51 	bl	8018aac <_Bfree>
 8016e0a:	4641      	mov	r1, r8
 8016e0c:	4648      	mov	r0, r9
 8016e0e:	f001 fe4d 	bl	8018aac <_Bfree>
 8016e12:	9907      	ldr	r1, [sp, #28]
 8016e14:	4648      	mov	r0, r9
 8016e16:	f001 fe49 	bl	8018aac <_Bfree>
 8016e1a:	4621      	mov	r1, r4
 8016e1c:	4648      	mov	r0, r9
 8016e1e:	f001 fe45 	bl	8018aac <_Bfree>
 8016e22:	e600      	b.n	8016a26 <_strtod_l+0x7e>
 8016e24:	9a06      	ldr	r2, [sp, #24]
 8016e26:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016e2a:	4293      	cmp	r3, r2
 8016e2c:	dbba      	blt.n	8016da4 <_strtod_l+0x3fc>
 8016e2e:	4d42      	ldr	r5, [pc, #264]	; (8016f38 <_strtod_l+0x590>)
 8016e30:	f1c4 040f 	rsb	r4, r4, #15
 8016e34:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016e38:	4652      	mov	r2, sl
 8016e3a:	465b      	mov	r3, fp
 8016e3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e40:	f7e9 fbea 	bl	8000618 <__aeabi_dmul>
 8016e44:	9b06      	ldr	r3, [sp, #24]
 8016e46:	1b1c      	subs	r4, r3, r4
 8016e48:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016e4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016e50:	e78d      	b.n	8016d6e <_strtod_l+0x3c6>
 8016e52:	f113 0f16 	cmn.w	r3, #22
 8016e56:	dba5      	blt.n	8016da4 <_strtod_l+0x3fc>
 8016e58:	4a37      	ldr	r2, [pc, #220]	; (8016f38 <_strtod_l+0x590>)
 8016e5a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016e5e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016e62:	4650      	mov	r0, sl
 8016e64:	4659      	mov	r1, fp
 8016e66:	f7e9 fd01 	bl	800086c <__aeabi_ddiv>
 8016e6a:	e782      	b.n	8016d72 <_strtod_l+0x3ca>
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	4e33      	ldr	r6, [pc, #204]	; (8016f3c <_strtod_l+0x594>)
 8016e70:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016e74:	4650      	mov	r0, sl
 8016e76:	4659      	mov	r1, fp
 8016e78:	461d      	mov	r5, r3
 8016e7a:	f1b8 0f01 	cmp.w	r8, #1
 8016e7e:	dc21      	bgt.n	8016ec4 <_strtod_l+0x51c>
 8016e80:	b10b      	cbz	r3, 8016e86 <_strtod_l+0x4de>
 8016e82:	4682      	mov	sl, r0
 8016e84:	468b      	mov	fp, r1
 8016e86:	4b2d      	ldr	r3, [pc, #180]	; (8016f3c <_strtod_l+0x594>)
 8016e88:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016e8c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016e90:	4652      	mov	r2, sl
 8016e92:	465b      	mov	r3, fp
 8016e94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016e98:	f7e9 fbbe 	bl	8000618 <__aeabi_dmul>
 8016e9c:	4b28      	ldr	r3, [pc, #160]	; (8016f40 <_strtod_l+0x598>)
 8016e9e:	460a      	mov	r2, r1
 8016ea0:	400b      	ands	r3, r1
 8016ea2:	4928      	ldr	r1, [pc, #160]	; (8016f44 <_strtod_l+0x59c>)
 8016ea4:	428b      	cmp	r3, r1
 8016ea6:	4682      	mov	sl, r0
 8016ea8:	d898      	bhi.n	8016ddc <_strtod_l+0x434>
 8016eaa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016eae:	428b      	cmp	r3, r1
 8016eb0:	bf86      	itte	hi
 8016eb2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016f4c <_strtod_l+0x5a4>
 8016eb6:	f04f 3aff 	movhi.w	sl, #4294967295
 8016eba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	9304      	str	r3, [sp, #16]
 8016ec2:	e077      	b.n	8016fb4 <_strtod_l+0x60c>
 8016ec4:	f018 0f01 	tst.w	r8, #1
 8016ec8:	d006      	beq.n	8016ed8 <_strtod_l+0x530>
 8016eca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ed2:	f7e9 fba1 	bl	8000618 <__aeabi_dmul>
 8016ed6:	2301      	movs	r3, #1
 8016ed8:	3501      	adds	r5, #1
 8016eda:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016ede:	e7cc      	b.n	8016e7a <_strtod_l+0x4d2>
 8016ee0:	d0ed      	beq.n	8016ebe <_strtod_l+0x516>
 8016ee2:	f1c8 0800 	rsb	r8, r8, #0
 8016ee6:	f018 020f 	ands.w	r2, r8, #15
 8016eea:	d00a      	beq.n	8016f02 <_strtod_l+0x55a>
 8016eec:	4b12      	ldr	r3, [pc, #72]	; (8016f38 <_strtod_l+0x590>)
 8016eee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016ef2:	4650      	mov	r0, sl
 8016ef4:	4659      	mov	r1, fp
 8016ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016efa:	f7e9 fcb7 	bl	800086c <__aeabi_ddiv>
 8016efe:	4682      	mov	sl, r0
 8016f00:	468b      	mov	fp, r1
 8016f02:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016f06:	d0da      	beq.n	8016ebe <_strtod_l+0x516>
 8016f08:	f1b8 0f1f 	cmp.w	r8, #31
 8016f0c:	dd20      	ble.n	8016f50 <_strtod_l+0x5a8>
 8016f0e:	2400      	movs	r4, #0
 8016f10:	46a0      	mov	r8, r4
 8016f12:	9407      	str	r4, [sp, #28]
 8016f14:	9405      	str	r4, [sp, #20]
 8016f16:	2322      	movs	r3, #34	; 0x22
 8016f18:	f04f 0a00 	mov.w	sl, #0
 8016f1c:	f04f 0b00 	mov.w	fp, #0
 8016f20:	f8c9 3000 	str.w	r3, [r9]
 8016f24:	e765      	b.n	8016df2 <_strtod_l+0x44a>
 8016f26:	bf00      	nop
 8016f28:	0801bf29 	.word	0x0801bf29
 8016f2c:	0801bfb3 	.word	0x0801bfb3
 8016f30:	0801bf31 	.word	0x0801bf31
 8016f34:	0801bf74 	.word	0x0801bf74
 8016f38:	0801bff0 	.word	0x0801bff0
 8016f3c:	0801bfc8 	.word	0x0801bfc8
 8016f40:	7ff00000 	.word	0x7ff00000
 8016f44:	7ca00000 	.word	0x7ca00000
 8016f48:	fff80000 	.word	0xfff80000
 8016f4c:	7fefffff 	.word	0x7fefffff
 8016f50:	f018 0310 	ands.w	r3, r8, #16
 8016f54:	bf18      	it	ne
 8016f56:	236a      	movne	r3, #106	; 0x6a
 8016f58:	4da0      	ldr	r5, [pc, #640]	; (80171dc <_strtod_l+0x834>)
 8016f5a:	9304      	str	r3, [sp, #16]
 8016f5c:	4650      	mov	r0, sl
 8016f5e:	4659      	mov	r1, fp
 8016f60:	2300      	movs	r3, #0
 8016f62:	f1b8 0f00 	cmp.w	r8, #0
 8016f66:	f300 810a 	bgt.w	801717e <_strtod_l+0x7d6>
 8016f6a:	b10b      	cbz	r3, 8016f70 <_strtod_l+0x5c8>
 8016f6c:	4682      	mov	sl, r0
 8016f6e:	468b      	mov	fp, r1
 8016f70:	9b04      	ldr	r3, [sp, #16]
 8016f72:	b1bb      	cbz	r3, 8016fa4 <_strtod_l+0x5fc>
 8016f74:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016f78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	4659      	mov	r1, fp
 8016f80:	dd10      	ble.n	8016fa4 <_strtod_l+0x5fc>
 8016f82:	2b1f      	cmp	r3, #31
 8016f84:	f340 8107 	ble.w	8017196 <_strtod_l+0x7ee>
 8016f88:	2b34      	cmp	r3, #52	; 0x34
 8016f8a:	bfde      	ittt	le
 8016f8c:	3b20      	suble	r3, #32
 8016f8e:	f04f 32ff 	movle.w	r2, #4294967295
 8016f92:	fa02 f303 	lslle.w	r3, r2, r3
 8016f96:	f04f 0a00 	mov.w	sl, #0
 8016f9a:	bfcc      	ite	gt
 8016f9c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016fa0:	ea03 0b01 	andle.w	fp, r3, r1
 8016fa4:	2200      	movs	r2, #0
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	4650      	mov	r0, sl
 8016faa:	4659      	mov	r1, fp
 8016fac:	f7e9 fd9c 	bl	8000ae8 <__aeabi_dcmpeq>
 8016fb0:	2800      	cmp	r0, #0
 8016fb2:	d1ac      	bne.n	8016f0e <_strtod_l+0x566>
 8016fb4:	9b07      	ldr	r3, [sp, #28]
 8016fb6:	9300      	str	r3, [sp, #0]
 8016fb8:	9a05      	ldr	r2, [sp, #20]
 8016fba:	9908      	ldr	r1, [sp, #32]
 8016fbc:	4623      	mov	r3, r4
 8016fbe:	4648      	mov	r0, r9
 8016fc0:	f001 fdc6 	bl	8018b50 <__s2b>
 8016fc4:	9007      	str	r0, [sp, #28]
 8016fc6:	2800      	cmp	r0, #0
 8016fc8:	f43f af08 	beq.w	8016ddc <_strtod_l+0x434>
 8016fcc:	9a06      	ldr	r2, [sp, #24]
 8016fce:	9b06      	ldr	r3, [sp, #24]
 8016fd0:	2a00      	cmp	r2, #0
 8016fd2:	f1c3 0300 	rsb	r3, r3, #0
 8016fd6:	bfa8      	it	ge
 8016fd8:	2300      	movge	r3, #0
 8016fda:	930e      	str	r3, [sp, #56]	; 0x38
 8016fdc:	2400      	movs	r4, #0
 8016fde:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016fe2:	9316      	str	r3, [sp, #88]	; 0x58
 8016fe4:	46a0      	mov	r8, r4
 8016fe6:	9b07      	ldr	r3, [sp, #28]
 8016fe8:	4648      	mov	r0, r9
 8016fea:	6859      	ldr	r1, [r3, #4]
 8016fec:	f001 fd2a 	bl	8018a44 <_Balloc>
 8016ff0:	9005      	str	r0, [sp, #20]
 8016ff2:	2800      	cmp	r0, #0
 8016ff4:	f43f aef6 	beq.w	8016de4 <_strtod_l+0x43c>
 8016ff8:	9b07      	ldr	r3, [sp, #28]
 8016ffa:	691a      	ldr	r2, [r3, #16]
 8016ffc:	3202      	adds	r2, #2
 8016ffe:	f103 010c 	add.w	r1, r3, #12
 8017002:	0092      	lsls	r2, r2, #2
 8017004:	300c      	adds	r0, #12
 8017006:	f7fe fd35 	bl	8015a74 <memcpy>
 801700a:	aa1e      	add	r2, sp, #120	; 0x78
 801700c:	a91d      	add	r1, sp, #116	; 0x74
 801700e:	ec4b ab10 	vmov	d0, sl, fp
 8017012:	4648      	mov	r0, r9
 8017014:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8017018:	f002 f856 	bl	80190c8 <__d2b>
 801701c:	901c      	str	r0, [sp, #112]	; 0x70
 801701e:	2800      	cmp	r0, #0
 8017020:	f43f aee0 	beq.w	8016de4 <_strtod_l+0x43c>
 8017024:	2101      	movs	r1, #1
 8017026:	4648      	mov	r0, r9
 8017028:	f001 fe1e 	bl	8018c68 <__i2b>
 801702c:	4680      	mov	r8, r0
 801702e:	2800      	cmp	r0, #0
 8017030:	f43f aed8 	beq.w	8016de4 <_strtod_l+0x43c>
 8017034:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017036:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017038:	2e00      	cmp	r6, #0
 801703a:	bfab      	itete	ge
 801703c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801703e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8017040:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8017042:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8017044:	bfac      	ite	ge
 8017046:	18f7      	addge	r7, r6, r3
 8017048:	1b9d      	sublt	r5, r3, r6
 801704a:	9b04      	ldr	r3, [sp, #16]
 801704c:	1af6      	subs	r6, r6, r3
 801704e:	4416      	add	r6, r2
 8017050:	4b63      	ldr	r3, [pc, #396]	; (80171e0 <_strtod_l+0x838>)
 8017052:	3e01      	subs	r6, #1
 8017054:	429e      	cmp	r6, r3
 8017056:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801705a:	f280 80af 	bge.w	80171bc <_strtod_l+0x814>
 801705e:	1b9b      	subs	r3, r3, r6
 8017060:	2b1f      	cmp	r3, #31
 8017062:	eba2 0203 	sub.w	r2, r2, r3
 8017066:	f04f 0101 	mov.w	r1, #1
 801706a:	f300 809b 	bgt.w	80171a4 <_strtod_l+0x7fc>
 801706e:	fa01 f303 	lsl.w	r3, r1, r3
 8017072:	930f      	str	r3, [sp, #60]	; 0x3c
 8017074:	2300      	movs	r3, #0
 8017076:	930a      	str	r3, [sp, #40]	; 0x28
 8017078:	18be      	adds	r6, r7, r2
 801707a:	9b04      	ldr	r3, [sp, #16]
 801707c:	42b7      	cmp	r7, r6
 801707e:	4415      	add	r5, r2
 8017080:	441d      	add	r5, r3
 8017082:	463b      	mov	r3, r7
 8017084:	bfa8      	it	ge
 8017086:	4633      	movge	r3, r6
 8017088:	42ab      	cmp	r3, r5
 801708a:	bfa8      	it	ge
 801708c:	462b      	movge	r3, r5
 801708e:	2b00      	cmp	r3, #0
 8017090:	bfc2      	ittt	gt
 8017092:	1af6      	subgt	r6, r6, r3
 8017094:	1aed      	subgt	r5, r5, r3
 8017096:	1aff      	subgt	r7, r7, r3
 8017098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801709a:	b1bb      	cbz	r3, 80170cc <_strtod_l+0x724>
 801709c:	4641      	mov	r1, r8
 801709e:	461a      	mov	r2, r3
 80170a0:	4648      	mov	r0, r9
 80170a2:	f001 fe81 	bl	8018da8 <__pow5mult>
 80170a6:	4680      	mov	r8, r0
 80170a8:	2800      	cmp	r0, #0
 80170aa:	f43f ae9b 	beq.w	8016de4 <_strtod_l+0x43c>
 80170ae:	4601      	mov	r1, r0
 80170b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80170b2:	4648      	mov	r0, r9
 80170b4:	f001 fde1 	bl	8018c7a <__multiply>
 80170b8:	900c      	str	r0, [sp, #48]	; 0x30
 80170ba:	2800      	cmp	r0, #0
 80170bc:	f43f ae92 	beq.w	8016de4 <_strtod_l+0x43c>
 80170c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80170c2:	4648      	mov	r0, r9
 80170c4:	f001 fcf2 	bl	8018aac <_Bfree>
 80170c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170ca:	931c      	str	r3, [sp, #112]	; 0x70
 80170cc:	2e00      	cmp	r6, #0
 80170ce:	dc7a      	bgt.n	80171c6 <_strtod_l+0x81e>
 80170d0:	9b06      	ldr	r3, [sp, #24]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	dd08      	ble.n	80170e8 <_strtod_l+0x740>
 80170d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80170d8:	9905      	ldr	r1, [sp, #20]
 80170da:	4648      	mov	r0, r9
 80170dc:	f001 fe64 	bl	8018da8 <__pow5mult>
 80170e0:	9005      	str	r0, [sp, #20]
 80170e2:	2800      	cmp	r0, #0
 80170e4:	f43f ae7e 	beq.w	8016de4 <_strtod_l+0x43c>
 80170e8:	2d00      	cmp	r5, #0
 80170ea:	dd08      	ble.n	80170fe <_strtod_l+0x756>
 80170ec:	462a      	mov	r2, r5
 80170ee:	9905      	ldr	r1, [sp, #20]
 80170f0:	4648      	mov	r0, r9
 80170f2:	f001 fea7 	bl	8018e44 <__lshift>
 80170f6:	9005      	str	r0, [sp, #20]
 80170f8:	2800      	cmp	r0, #0
 80170fa:	f43f ae73 	beq.w	8016de4 <_strtod_l+0x43c>
 80170fe:	2f00      	cmp	r7, #0
 8017100:	dd08      	ble.n	8017114 <_strtod_l+0x76c>
 8017102:	4641      	mov	r1, r8
 8017104:	463a      	mov	r2, r7
 8017106:	4648      	mov	r0, r9
 8017108:	f001 fe9c 	bl	8018e44 <__lshift>
 801710c:	4680      	mov	r8, r0
 801710e:	2800      	cmp	r0, #0
 8017110:	f43f ae68 	beq.w	8016de4 <_strtod_l+0x43c>
 8017114:	9a05      	ldr	r2, [sp, #20]
 8017116:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017118:	4648      	mov	r0, r9
 801711a:	f001 ff01 	bl	8018f20 <__mdiff>
 801711e:	4604      	mov	r4, r0
 8017120:	2800      	cmp	r0, #0
 8017122:	f43f ae5f 	beq.w	8016de4 <_strtod_l+0x43c>
 8017126:	68c3      	ldr	r3, [r0, #12]
 8017128:	930c      	str	r3, [sp, #48]	; 0x30
 801712a:	2300      	movs	r3, #0
 801712c:	60c3      	str	r3, [r0, #12]
 801712e:	4641      	mov	r1, r8
 8017130:	f001 fedc 	bl	8018eec <__mcmp>
 8017134:	2800      	cmp	r0, #0
 8017136:	da55      	bge.n	80171e4 <_strtod_l+0x83c>
 8017138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801713a:	b9e3      	cbnz	r3, 8017176 <_strtod_l+0x7ce>
 801713c:	f1ba 0f00 	cmp.w	sl, #0
 8017140:	d119      	bne.n	8017176 <_strtod_l+0x7ce>
 8017142:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017146:	b9b3      	cbnz	r3, 8017176 <_strtod_l+0x7ce>
 8017148:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801714c:	0d1b      	lsrs	r3, r3, #20
 801714e:	051b      	lsls	r3, r3, #20
 8017150:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017154:	d90f      	bls.n	8017176 <_strtod_l+0x7ce>
 8017156:	6963      	ldr	r3, [r4, #20]
 8017158:	b913      	cbnz	r3, 8017160 <_strtod_l+0x7b8>
 801715a:	6923      	ldr	r3, [r4, #16]
 801715c:	2b01      	cmp	r3, #1
 801715e:	dd0a      	ble.n	8017176 <_strtod_l+0x7ce>
 8017160:	4621      	mov	r1, r4
 8017162:	2201      	movs	r2, #1
 8017164:	4648      	mov	r0, r9
 8017166:	f001 fe6d 	bl	8018e44 <__lshift>
 801716a:	4641      	mov	r1, r8
 801716c:	4604      	mov	r4, r0
 801716e:	f001 febd 	bl	8018eec <__mcmp>
 8017172:	2800      	cmp	r0, #0
 8017174:	dc67      	bgt.n	8017246 <_strtod_l+0x89e>
 8017176:	9b04      	ldr	r3, [sp, #16]
 8017178:	2b00      	cmp	r3, #0
 801717a:	d171      	bne.n	8017260 <_strtod_l+0x8b8>
 801717c:	e63d      	b.n	8016dfa <_strtod_l+0x452>
 801717e:	f018 0f01 	tst.w	r8, #1
 8017182:	d004      	beq.n	801718e <_strtod_l+0x7e6>
 8017184:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017188:	f7e9 fa46 	bl	8000618 <__aeabi_dmul>
 801718c:	2301      	movs	r3, #1
 801718e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017192:	3508      	adds	r5, #8
 8017194:	e6e5      	b.n	8016f62 <_strtod_l+0x5ba>
 8017196:	f04f 32ff 	mov.w	r2, #4294967295
 801719a:	fa02 f303 	lsl.w	r3, r2, r3
 801719e:	ea03 0a0a 	and.w	sl, r3, sl
 80171a2:	e6ff      	b.n	8016fa4 <_strtod_l+0x5fc>
 80171a4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80171a8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80171ac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80171b0:	36e2      	adds	r6, #226	; 0xe2
 80171b2:	fa01 f306 	lsl.w	r3, r1, r6
 80171b6:	930a      	str	r3, [sp, #40]	; 0x28
 80171b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80171ba:	e75d      	b.n	8017078 <_strtod_l+0x6d0>
 80171bc:	2300      	movs	r3, #0
 80171be:	930a      	str	r3, [sp, #40]	; 0x28
 80171c0:	2301      	movs	r3, #1
 80171c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80171c4:	e758      	b.n	8017078 <_strtod_l+0x6d0>
 80171c6:	4632      	mov	r2, r6
 80171c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80171ca:	4648      	mov	r0, r9
 80171cc:	f001 fe3a 	bl	8018e44 <__lshift>
 80171d0:	901c      	str	r0, [sp, #112]	; 0x70
 80171d2:	2800      	cmp	r0, #0
 80171d4:	f47f af7c 	bne.w	80170d0 <_strtod_l+0x728>
 80171d8:	e604      	b.n	8016de4 <_strtod_l+0x43c>
 80171da:	bf00      	nop
 80171dc:	0801bf88 	.word	0x0801bf88
 80171e0:	fffffc02 	.word	0xfffffc02
 80171e4:	465d      	mov	r5, fp
 80171e6:	f040 8086 	bne.w	80172f6 <_strtod_l+0x94e>
 80171ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80171ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80171f0:	b32a      	cbz	r2, 801723e <_strtod_l+0x896>
 80171f2:	4aaf      	ldr	r2, [pc, #700]	; (80174b0 <_strtod_l+0xb08>)
 80171f4:	4293      	cmp	r3, r2
 80171f6:	d153      	bne.n	80172a0 <_strtod_l+0x8f8>
 80171f8:	9b04      	ldr	r3, [sp, #16]
 80171fa:	4650      	mov	r0, sl
 80171fc:	b1d3      	cbz	r3, 8017234 <_strtod_l+0x88c>
 80171fe:	4aad      	ldr	r2, [pc, #692]	; (80174b4 <_strtod_l+0xb0c>)
 8017200:	402a      	ands	r2, r5
 8017202:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017206:	f04f 31ff 	mov.w	r1, #4294967295
 801720a:	d816      	bhi.n	801723a <_strtod_l+0x892>
 801720c:	0d12      	lsrs	r2, r2, #20
 801720e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017212:	fa01 f303 	lsl.w	r3, r1, r3
 8017216:	4298      	cmp	r0, r3
 8017218:	d142      	bne.n	80172a0 <_strtod_l+0x8f8>
 801721a:	4ba7      	ldr	r3, [pc, #668]	; (80174b8 <_strtod_l+0xb10>)
 801721c:	429d      	cmp	r5, r3
 801721e:	d102      	bne.n	8017226 <_strtod_l+0x87e>
 8017220:	3001      	adds	r0, #1
 8017222:	f43f addf 	beq.w	8016de4 <_strtod_l+0x43c>
 8017226:	4ba3      	ldr	r3, [pc, #652]	; (80174b4 <_strtod_l+0xb0c>)
 8017228:	402b      	ands	r3, r5
 801722a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801722e:	f04f 0a00 	mov.w	sl, #0
 8017232:	e7a0      	b.n	8017176 <_strtod_l+0x7ce>
 8017234:	f04f 33ff 	mov.w	r3, #4294967295
 8017238:	e7ed      	b.n	8017216 <_strtod_l+0x86e>
 801723a:	460b      	mov	r3, r1
 801723c:	e7eb      	b.n	8017216 <_strtod_l+0x86e>
 801723e:	bb7b      	cbnz	r3, 80172a0 <_strtod_l+0x8f8>
 8017240:	f1ba 0f00 	cmp.w	sl, #0
 8017244:	d12c      	bne.n	80172a0 <_strtod_l+0x8f8>
 8017246:	9904      	ldr	r1, [sp, #16]
 8017248:	4a9a      	ldr	r2, [pc, #616]	; (80174b4 <_strtod_l+0xb0c>)
 801724a:	465b      	mov	r3, fp
 801724c:	b1f1      	cbz	r1, 801728c <_strtod_l+0x8e4>
 801724e:	ea02 010b 	and.w	r1, r2, fp
 8017252:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017256:	dc19      	bgt.n	801728c <_strtod_l+0x8e4>
 8017258:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801725c:	f77f ae5b 	ble.w	8016f16 <_strtod_l+0x56e>
 8017260:	4a96      	ldr	r2, [pc, #600]	; (80174bc <_strtod_l+0xb14>)
 8017262:	2300      	movs	r3, #0
 8017264:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017268:	4650      	mov	r0, sl
 801726a:	4659      	mov	r1, fp
 801726c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017270:	f7e9 f9d2 	bl	8000618 <__aeabi_dmul>
 8017274:	4682      	mov	sl, r0
 8017276:	468b      	mov	fp, r1
 8017278:	2900      	cmp	r1, #0
 801727a:	f47f adbe 	bne.w	8016dfa <_strtod_l+0x452>
 801727e:	2800      	cmp	r0, #0
 8017280:	f47f adbb 	bne.w	8016dfa <_strtod_l+0x452>
 8017284:	2322      	movs	r3, #34	; 0x22
 8017286:	f8c9 3000 	str.w	r3, [r9]
 801728a:	e5b6      	b.n	8016dfa <_strtod_l+0x452>
 801728c:	4013      	ands	r3, r2
 801728e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017292:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017296:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801729a:	f04f 3aff 	mov.w	sl, #4294967295
 801729e:	e76a      	b.n	8017176 <_strtod_l+0x7ce>
 80172a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172a2:	b193      	cbz	r3, 80172ca <_strtod_l+0x922>
 80172a4:	422b      	tst	r3, r5
 80172a6:	f43f af66 	beq.w	8017176 <_strtod_l+0x7ce>
 80172aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80172ac:	9a04      	ldr	r2, [sp, #16]
 80172ae:	4650      	mov	r0, sl
 80172b0:	4659      	mov	r1, fp
 80172b2:	b173      	cbz	r3, 80172d2 <_strtod_l+0x92a>
 80172b4:	f7ff fb59 	bl	801696a <sulp>
 80172b8:	4602      	mov	r2, r0
 80172ba:	460b      	mov	r3, r1
 80172bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80172c0:	f7e8 fff4 	bl	80002ac <__adddf3>
 80172c4:	4682      	mov	sl, r0
 80172c6:	468b      	mov	fp, r1
 80172c8:	e755      	b.n	8017176 <_strtod_l+0x7ce>
 80172ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172cc:	ea13 0f0a 	tst.w	r3, sl
 80172d0:	e7e9      	b.n	80172a6 <_strtod_l+0x8fe>
 80172d2:	f7ff fb4a 	bl	801696a <sulp>
 80172d6:	4602      	mov	r2, r0
 80172d8:	460b      	mov	r3, r1
 80172da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80172de:	f7e8 ffe3 	bl	80002a8 <__aeabi_dsub>
 80172e2:	2200      	movs	r2, #0
 80172e4:	2300      	movs	r3, #0
 80172e6:	4682      	mov	sl, r0
 80172e8:	468b      	mov	fp, r1
 80172ea:	f7e9 fbfd 	bl	8000ae8 <__aeabi_dcmpeq>
 80172ee:	2800      	cmp	r0, #0
 80172f0:	f47f ae11 	bne.w	8016f16 <_strtod_l+0x56e>
 80172f4:	e73f      	b.n	8017176 <_strtod_l+0x7ce>
 80172f6:	4641      	mov	r1, r8
 80172f8:	4620      	mov	r0, r4
 80172fa:	f001 ff34 	bl	8019166 <__ratio>
 80172fe:	ec57 6b10 	vmov	r6, r7, d0
 8017302:	2200      	movs	r2, #0
 8017304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017308:	ee10 0a10 	vmov	r0, s0
 801730c:	4639      	mov	r1, r7
 801730e:	f7e9 fbff 	bl	8000b10 <__aeabi_dcmple>
 8017312:	2800      	cmp	r0, #0
 8017314:	d077      	beq.n	8017406 <_strtod_l+0xa5e>
 8017316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017318:	2b00      	cmp	r3, #0
 801731a:	d04a      	beq.n	80173b2 <_strtod_l+0xa0a>
 801731c:	4b68      	ldr	r3, [pc, #416]	; (80174c0 <_strtod_l+0xb18>)
 801731e:	2200      	movs	r2, #0
 8017320:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017324:	4f66      	ldr	r7, [pc, #408]	; (80174c0 <_strtod_l+0xb18>)
 8017326:	2600      	movs	r6, #0
 8017328:	4b62      	ldr	r3, [pc, #392]	; (80174b4 <_strtod_l+0xb0c>)
 801732a:	402b      	ands	r3, r5
 801732c:	930f      	str	r3, [sp, #60]	; 0x3c
 801732e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017330:	4b64      	ldr	r3, [pc, #400]	; (80174c4 <_strtod_l+0xb1c>)
 8017332:	429a      	cmp	r2, r3
 8017334:	f040 80ce 	bne.w	80174d4 <_strtod_l+0xb2c>
 8017338:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801733c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017340:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8017344:	ec4b ab10 	vmov	d0, sl, fp
 8017348:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801734c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017350:	f001 fe44 	bl	8018fdc <__ulp>
 8017354:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017358:	ec53 2b10 	vmov	r2, r3, d0
 801735c:	f7e9 f95c 	bl	8000618 <__aeabi_dmul>
 8017360:	4652      	mov	r2, sl
 8017362:	465b      	mov	r3, fp
 8017364:	f7e8 ffa2 	bl	80002ac <__adddf3>
 8017368:	460b      	mov	r3, r1
 801736a:	4952      	ldr	r1, [pc, #328]	; (80174b4 <_strtod_l+0xb0c>)
 801736c:	4a56      	ldr	r2, [pc, #344]	; (80174c8 <_strtod_l+0xb20>)
 801736e:	4019      	ands	r1, r3
 8017370:	4291      	cmp	r1, r2
 8017372:	4682      	mov	sl, r0
 8017374:	d95b      	bls.n	801742e <_strtod_l+0xa86>
 8017376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017378:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801737c:	4293      	cmp	r3, r2
 801737e:	d103      	bne.n	8017388 <_strtod_l+0x9e0>
 8017380:	9b08      	ldr	r3, [sp, #32]
 8017382:	3301      	adds	r3, #1
 8017384:	f43f ad2e 	beq.w	8016de4 <_strtod_l+0x43c>
 8017388:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80174b8 <_strtod_l+0xb10>
 801738c:	f04f 3aff 	mov.w	sl, #4294967295
 8017390:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017392:	4648      	mov	r0, r9
 8017394:	f001 fb8a 	bl	8018aac <_Bfree>
 8017398:	9905      	ldr	r1, [sp, #20]
 801739a:	4648      	mov	r0, r9
 801739c:	f001 fb86 	bl	8018aac <_Bfree>
 80173a0:	4641      	mov	r1, r8
 80173a2:	4648      	mov	r0, r9
 80173a4:	f001 fb82 	bl	8018aac <_Bfree>
 80173a8:	4621      	mov	r1, r4
 80173aa:	4648      	mov	r0, r9
 80173ac:	f001 fb7e 	bl	8018aac <_Bfree>
 80173b0:	e619      	b.n	8016fe6 <_strtod_l+0x63e>
 80173b2:	f1ba 0f00 	cmp.w	sl, #0
 80173b6:	d11a      	bne.n	80173ee <_strtod_l+0xa46>
 80173b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80173bc:	b9eb      	cbnz	r3, 80173fa <_strtod_l+0xa52>
 80173be:	2200      	movs	r2, #0
 80173c0:	4b3f      	ldr	r3, [pc, #252]	; (80174c0 <_strtod_l+0xb18>)
 80173c2:	4630      	mov	r0, r6
 80173c4:	4639      	mov	r1, r7
 80173c6:	f7e9 fb99 	bl	8000afc <__aeabi_dcmplt>
 80173ca:	b9c8      	cbnz	r0, 8017400 <_strtod_l+0xa58>
 80173cc:	4630      	mov	r0, r6
 80173ce:	4639      	mov	r1, r7
 80173d0:	2200      	movs	r2, #0
 80173d2:	4b3e      	ldr	r3, [pc, #248]	; (80174cc <_strtod_l+0xb24>)
 80173d4:	f7e9 f920 	bl	8000618 <__aeabi_dmul>
 80173d8:	4606      	mov	r6, r0
 80173da:	460f      	mov	r7, r1
 80173dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80173e0:	9618      	str	r6, [sp, #96]	; 0x60
 80173e2:	9319      	str	r3, [sp, #100]	; 0x64
 80173e4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80173e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80173ec:	e79c      	b.n	8017328 <_strtod_l+0x980>
 80173ee:	f1ba 0f01 	cmp.w	sl, #1
 80173f2:	d102      	bne.n	80173fa <_strtod_l+0xa52>
 80173f4:	2d00      	cmp	r5, #0
 80173f6:	f43f ad8e 	beq.w	8016f16 <_strtod_l+0x56e>
 80173fa:	2200      	movs	r2, #0
 80173fc:	4b34      	ldr	r3, [pc, #208]	; (80174d0 <_strtod_l+0xb28>)
 80173fe:	e78f      	b.n	8017320 <_strtod_l+0x978>
 8017400:	2600      	movs	r6, #0
 8017402:	4f32      	ldr	r7, [pc, #200]	; (80174cc <_strtod_l+0xb24>)
 8017404:	e7ea      	b.n	80173dc <_strtod_l+0xa34>
 8017406:	4b31      	ldr	r3, [pc, #196]	; (80174cc <_strtod_l+0xb24>)
 8017408:	4630      	mov	r0, r6
 801740a:	4639      	mov	r1, r7
 801740c:	2200      	movs	r2, #0
 801740e:	f7e9 f903 	bl	8000618 <__aeabi_dmul>
 8017412:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017414:	4606      	mov	r6, r0
 8017416:	460f      	mov	r7, r1
 8017418:	b933      	cbnz	r3, 8017428 <_strtod_l+0xa80>
 801741a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801741e:	9010      	str	r0, [sp, #64]	; 0x40
 8017420:	9311      	str	r3, [sp, #68]	; 0x44
 8017422:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017426:	e7df      	b.n	80173e8 <_strtod_l+0xa40>
 8017428:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801742c:	e7f9      	b.n	8017422 <_strtod_l+0xa7a>
 801742e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017432:	9b04      	ldr	r3, [sp, #16]
 8017434:	2b00      	cmp	r3, #0
 8017436:	d1ab      	bne.n	8017390 <_strtod_l+0x9e8>
 8017438:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801743c:	0d1b      	lsrs	r3, r3, #20
 801743e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017440:	051b      	lsls	r3, r3, #20
 8017442:	429a      	cmp	r2, r3
 8017444:	465d      	mov	r5, fp
 8017446:	d1a3      	bne.n	8017390 <_strtod_l+0x9e8>
 8017448:	4639      	mov	r1, r7
 801744a:	4630      	mov	r0, r6
 801744c:	f7e9 fb94 	bl	8000b78 <__aeabi_d2iz>
 8017450:	f7e9 f878 	bl	8000544 <__aeabi_i2d>
 8017454:	460b      	mov	r3, r1
 8017456:	4602      	mov	r2, r0
 8017458:	4639      	mov	r1, r7
 801745a:	4630      	mov	r0, r6
 801745c:	f7e8 ff24 	bl	80002a8 <__aeabi_dsub>
 8017460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017462:	4606      	mov	r6, r0
 8017464:	460f      	mov	r7, r1
 8017466:	b933      	cbnz	r3, 8017476 <_strtod_l+0xace>
 8017468:	f1ba 0f00 	cmp.w	sl, #0
 801746c:	d103      	bne.n	8017476 <_strtod_l+0xace>
 801746e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8017472:	2d00      	cmp	r5, #0
 8017474:	d06d      	beq.n	8017552 <_strtod_l+0xbaa>
 8017476:	a30a      	add	r3, pc, #40	; (adr r3, 80174a0 <_strtod_l+0xaf8>)
 8017478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801747c:	4630      	mov	r0, r6
 801747e:	4639      	mov	r1, r7
 8017480:	f7e9 fb3c 	bl	8000afc <__aeabi_dcmplt>
 8017484:	2800      	cmp	r0, #0
 8017486:	f47f acb8 	bne.w	8016dfa <_strtod_l+0x452>
 801748a:	a307      	add	r3, pc, #28	; (adr r3, 80174a8 <_strtod_l+0xb00>)
 801748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017490:	4630      	mov	r0, r6
 8017492:	4639      	mov	r1, r7
 8017494:	f7e9 fb50 	bl	8000b38 <__aeabi_dcmpgt>
 8017498:	2800      	cmp	r0, #0
 801749a:	f43f af79 	beq.w	8017390 <_strtod_l+0x9e8>
 801749e:	e4ac      	b.n	8016dfa <_strtod_l+0x452>
 80174a0:	94a03595 	.word	0x94a03595
 80174a4:	3fdfffff 	.word	0x3fdfffff
 80174a8:	35afe535 	.word	0x35afe535
 80174ac:	3fe00000 	.word	0x3fe00000
 80174b0:	000fffff 	.word	0x000fffff
 80174b4:	7ff00000 	.word	0x7ff00000
 80174b8:	7fefffff 	.word	0x7fefffff
 80174bc:	39500000 	.word	0x39500000
 80174c0:	3ff00000 	.word	0x3ff00000
 80174c4:	7fe00000 	.word	0x7fe00000
 80174c8:	7c9fffff 	.word	0x7c9fffff
 80174cc:	3fe00000 	.word	0x3fe00000
 80174d0:	bff00000 	.word	0xbff00000
 80174d4:	9b04      	ldr	r3, [sp, #16]
 80174d6:	b333      	cbz	r3, 8017526 <_strtod_l+0xb7e>
 80174d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80174da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80174de:	d822      	bhi.n	8017526 <_strtod_l+0xb7e>
 80174e0:	a327      	add	r3, pc, #156	; (adr r3, 8017580 <_strtod_l+0xbd8>)
 80174e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174e6:	4630      	mov	r0, r6
 80174e8:	4639      	mov	r1, r7
 80174ea:	f7e9 fb11 	bl	8000b10 <__aeabi_dcmple>
 80174ee:	b1a0      	cbz	r0, 801751a <_strtod_l+0xb72>
 80174f0:	4639      	mov	r1, r7
 80174f2:	4630      	mov	r0, r6
 80174f4:	f7e9 fb68 	bl	8000bc8 <__aeabi_d2uiz>
 80174f8:	2800      	cmp	r0, #0
 80174fa:	bf08      	it	eq
 80174fc:	2001      	moveq	r0, #1
 80174fe:	f7e9 f811 	bl	8000524 <__aeabi_ui2d>
 8017502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017504:	4606      	mov	r6, r0
 8017506:	460f      	mov	r7, r1
 8017508:	bb03      	cbnz	r3, 801754c <_strtod_l+0xba4>
 801750a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801750e:	9012      	str	r0, [sp, #72]	; 0x48
 8017510:	9313      	str	r3, [sp, #76]	; 0x4c
 8017512:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017516:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801751a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801751c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801751e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017522:	1a9b      	subs	r3, r3, r2
 8017524:	930b      	str	r3, [sp, #44]	; 0x2c
 8017526:	ed9d 0b08 	vldr	d0, [sp, #32]
 801752a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801752e:	f001 fd55 	bl	8018fdc <__ulp>
 8017532:	4650      	mov	r0, sl
 8017534:	ec53 2b10 	vmov	r2, r3, d0
 8017538:	4659      	mov	r1, fp
 801753a:	f7e9 f86d 	bl	8000618 <__aeabi_dmul>
 801753e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017542:	f7e8 feb3 	bl	80002ac <__adddf3>
 8017546:	4682      	mov	sl, r0
 8017548:	468b      	mov	fp, r1
 801754a:	e772      	b.n	8017432 <_strtod_l+0xa8a>
 801754c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017550:	e7df      	b.n	8017512 <_strtod_l+0xb6a>
 8017552:	a30d      	add	r3, pc, #52	; (adr r3, 8017588 <_strtod_l+0xbe0>)
 8017554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017558:	f7e9 fad0 	bl	8000afc <__aeabi_dcmplt>
 801755c:	e79c      	b.n	8017498 <_strtod_l+0xaf0>
 801755e:	2300      	movs	r3, #0
 8017560:	930d      	str	r3, [sp, #52]	; 0x34
 8017562:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017564:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017566:	6013      	str	r3, [r2, #0]
 8017568:	f7ff ba61 	b.w	8016a2e <_strtod_l+0x86>
 801756c:	2b65      	cmp	r3, #101	; 0x65
 801756e:	f04f 0200 	mov.w	r2, #0
 8017572:	f43f ab4e 	beq.w	8016c12 <_strtod_l+0x26a>
 8017576:	2101      	movs	r1, #1
 8017578:	4614      	mov	r4, r2
 801757a:	9104      	str	r1, [sp, #16]
 801757c:	f7ff bacb 	b.w	8016b16 <_strtod_l+0x16e>
 8017580:	ffc00000 	.word	0xffc00000
 8017584:	41dfffff 	.word	0x41dfffff
 8017588:	94a03595 	.word	0x94a03595
 801758c:	3fcfffff 	.word	0x3fcfffff

08017590 <_strtod_r>:
 8017590:	4b05      	ldr	r3, [pc, #20]	; (80175a8 <_strtod_r+0x18>)
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	b410      	push	{r4}
 8017596:	6a1b      	ldr	r3, [r3, #32]
 8017598:	4c04      	ldr	r4, [pc, #16]	; (80175ac <_strtod_r+0x1c>)
 801759a:	2b00      	cmp	r3, #0
 801759c:	bf08      	it	eq
 801759e:	4623      	moveq	r3, r4
 80175a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175a4:	f7ff ba00 	b.w	80169a8 <_strtod_l>
 80175a8:	20000198 	.word	0x20000198
 80175ac:	200001fc 	.word	0x200001fc

080175b0 <strtod>:
 80175b0:	4b07      	ldr	r3, [pc, #28]	; (80175d0 <strtod+0x20>)
 80175b2:	4a08      	ldr	r2, [pc, #32]	; (80175d4 <strtod+0x24>)
 80175b4:	b410      	push	{r4}
 80175b6:	681c      	ldr	r4, [r3, #0]
 80175b8:	6a23      	ldr	r3, [r4, #32]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	bf08      	it	eq
 80175be:	4613      	moveq	r3, r2
 80175c0:	460a      	mov	r2, r1
 80175c2:	4601      	mov	r1, r0
 80175c4:	4620      	mov	r0, r4
 80175c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175ca:	f7ff b9ed 	b.w	80169a8 <_strtod_l>
 80175ce:	bf00      	nop
 80175d0:	20000198 	.word	0x20000198
 80175d4:	200001fc 	.word	0x200001fc

080175d8 <_strtol_l.isra.0>:
 80175d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175dc:	4680      	mov	r8, r0
 80175de:	4689      	mov	r9, r1
 80175e0:	4692      	mov	sl, r2
 80175e2:	461e      	mov	r6, r3
 80175e4:	460f      	mov	r7, r1
 80175e6:	463d      	mov	r5, r7
 80175e8:	9808      	ldr	r0, [sp, #32]
 80175ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80175ee:	f001 fa01 	bl	80189f4 <__locale_ctype_ptr_l>
 80175f2:	4420      	add	r0, r4
 80175f4:	7843      	ldrb	r3, [r0, #1]
 80175f6:	f013 0308 	ands.w	r3, r3, #8
 80175fa:	d132      	bne.n	8017662 <_strtol_l.isra.0+0x8a>
 80175fc:	2c2d      	cmp	r4, #45	; 0x2d
 80175fe:	d132      	bne.n	8017666 <_strtol_l.isra.0+0x8e>
 8017600:	787c      	ldrb	r4, [r7, #1]
 8017602:	1cbd      	adds	r5, r7, #2
 8017604:	2201      	movs	r2, #1
 8017606:	2e00      	cmp	r6, #0
 8017608:	d05d      	beq.n	80176c6 <_strtol_l.isra.0+0xee>
 801760a:	2e10      	cmp	r6, #16
 801760c:	d109      	bne.n	8017622 <_strtol_l.isra.0+0x4a>
 801760e:	2c30      	cmp	r4, #48	; 0x30
 8017610:	d107      	bne.n	8017622 <_strtol_l.isra.0+0x4a>
 8017612:	782b      	ldrb	r3, [r5, #0]
 8017614:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017618:	2b58      	cmp	r3, #88	; 0x58
 801761a:	d14f      	bne.n	80176bc <_strtol_l.isra.0+0xe4>
 801761c:	786c      	ldrb	r4, [r5, #1]
 801761e:	2610      	movs	r6, #16
 8017620:	3502      	adds	r5, #2
 8017622:	2a00      	cmp	r2, #0
 8017624:	bf14      	ite	ne
 8017626:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801762a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801762e:	2700      	movs	r7, #0
 8017630:	fbb1 fcf6 	udiv	ip, r1, r6
 8017634:	4638      	mov	r0, r7
 8017636:	fb06 1e1c 	mls	lr, r6, ip, r1
 801763a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801763e:	2b09      	cmp	r3, #9
 8017640:	d817      	bhi.n	8017672 <_strtol_l.isra.0+0x9a>
 8017642:	461c      	mov	r4, r3
 8017644:	42a6      	cmp	r6, r4
 8017646:	dd23      	ble.n	8017690 <_strtol_l.isra.0+0xb8>
 8017648:	1c7b      	adds	r3, r7, #1
 801764a:	d007      	beq.n	801765c <_strtol_l.isra.0+0x84>
 801764c:	4584      	cmp	ip, r0
 801764e:	d31c      	bcc.n	801768a <_strtol_l.isra.0+0xb2>
 8017650:	d101      	bne.n	8017656 <_strtol_l.isra.0+0x7e>
 8017652:	45a6      	cmp	lr, r4
 8017654:	db19      	blt.n	801768a <_strtol_l.isra.0+0xb2>
 8017656:	fb00 4006 	mla	r0, r0, r6, r4
 801765a:	2701      	movs	r7, #1
 801765c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017660:	e7eb      	b.n	801763a <_strtol_l.isra.0+0x62>
 8017662:	462f      	mov	r7, r5
 8017664:	e7bf      	b.n	80175e6 <_strtol_l.isra.0+0xe>
 8017666:	2c2b      	cmp	r4, #43	; 0x2b
 8017668:	bf04      	itt	eq
 801766a:	1cbd      	addeq	r5, r7, #2
 801766c:	787c      	ldrbeq	r4, [r7, #1]
 801766e:	461a      	mov	r2, r3
 8017670:	e7c9      	b.n	8017606 <_strtol_l.isra.0+0x2e>
 8017672:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017676:	2b19      	cmp	r3, #25
 8017678:	d801      	bhi.n	801767e <_strtol_l.isra.0+0xa6>
 801767a:	3c37      	subs	r4, #55	; 0x37
 801767c:	e7e2      	b.n	8017644 <_strtol_l.isra.0+0x6c>
 801767e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017682:	2b19      	cmp	r3, #25
 8017684:	d804      	bhi.n	8017690 <_strtol_l.isra.0+0xb8>
 8017686:	3c57      	subs	r4, #87	; 0x57
 8017688:	e7dc      	b.n	8017644 <_strtol_l.isra.0+0x6c>
 801768a:	f04f 37ff 	mov.w	r7, #4294967295
 801768e:	e7e5      	b.n	801765c <_strtol_l.isra.0+0x84>
 8017690:	1c7b      	adds	r3, r7, #1
 8017692:	d108      	bne.n	80176a6 <_strtol_l.isra.0+0xce>
 8017694:	2322      	movs	r3, #34	; 0x22
 8017696:	f8c8 3000 	str.w	r3, [r8]
 801769a:	4608      	mov	r0, r1
 801769c:	f1ba 0f00 	cmp.w	sl, #0
 80176a0:	d107      	bne.n	80176b2 <_strtol_l.isra.0+0xda>
 80176a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176a6:	b102      	cbz	r2, 80176aa <_strtol_l.isra.0+0xd2>
 80176a8:	4240      	negs	r0, r0
 80176aa:	f1ba 0f00 	cmp.w	sl, #0
 80176ae:	d0f8      	beq.n	80176a2 <_strtol_l.isra.0+0xca>
 80176b0:	b10f      	cbz	r7, 80176b6 <_strtol_l.isra.0+0xde>
 80176b2:	f105 39ff 	add.w	r9, r5, #4294967295
 80176b6:	f8ca 9000 	str.w	r9, [sl]
 80176ba:	e7f2      	b.n	80176a2 <_strtol_l.isra.0+0xca>
 80176bc:	2430      	movs	r4, #48	; 0x30
 80176be:	2e00      	cmp	r6, #0
 80176c0:	d1af      	bne.n	8017622 <_strtol_l.isra.0+0x4a>
 80176c2:	2608      	movs	r6, #8
 80176c4:	e7ad      	b.n	8017622 <_strtol_l.isra.0+0x4a>
 80176c6:	2c30      	cmp	r4, #48	; 0x30
 80176c8:	d0a3      	beq.n	8017612 <_strtol_l.isra.0+0x3a>
 80176ca:	260a      	movs	r6, #10
 80176cc:	e7a9      	b.n	8017622 <_strtol_l.isra.0+0x4a>
	...

080176d0 <_strtol_r>:
 80176d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80176d2:	4c06      	ldr	r4, [pc, #24]	; (80176ec <_strtol_r+0x1c>)
 80176d4:	4d06      	ldr	r5, [pc, #24]	; (80176f0 <_strtol_r+0x20>)
 80176d6:	6824      	ldr	r4, [r4, #0]
 80176d8:	6a24      	ldr	r4, [r4, #32]
 80176da:	2c00      	cmp	r4, #0
 80176dc:	bf08      	it	eq
 80176de:	462c      	moveq	r4, r5
 80176e0:	9400      	str	r4, [sp, #0]
 80176e2:	f7ff ff79 	bl	80175d8 <_strtol_l.isra.0>
 80176e6:	b003      	add	sp, #12
 80176e8:	bd30      	pop	{r4, r5, pc}
 80176ea:	bf00      	nop
 80176ec:	20000198 	.word	0x20000198
 80176f0:	200001fc 	.word	0x200001fc

080176f4 <strtol>:
 80176f4:	4b08      	ldr	r3, [pc, #32]	; (8017718 <strtol+0x24>)
 80176f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80176f8:	681c      	ldr	r4, [r3, #0]
 80176fa:	4d08      	ldr	r5, [pc, #32]	; (801771c <strtol+0x28>)
 80176fc:	6a23      	ldr	r3, [r4, #32]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	bf08      	it	eq
 8017702:	462b      	moveq	r3, r5
 8017704:	9300      	str	r3, [sp, #0]
 8017706:	4613      	mov	r3, r2
 8017708:	460a      	mov	r2, r1
 801770a:	4601      	mov	r1, r0
 801770c:	4620      	mov	r0, r4
 801770e:	f7ff ff63 	bl	80175d8 <_strtol_l.isra.0>
 8017712:	b003      	add	sp, #12
 8017714:	bd30      	pop	{r4, r5, pc}
 8017716:	bf00      	nop
 8017718:	20000198 	.word	0x20000198
 801771c:	200001fc 	.word	0x200001fc

08017720 <quorem>:
 8017720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017724:	6903      	ldr	r3, [r0, #16]
 8017726:	690c      	ldr	r4, [r1, #16]
 8017728:	42a3      	cmp	r3, r4
 801772a:	4680      	mov	r8, r0
 801772c:	f2c0 8082 	blt.w	8017834 <quorem+0x114>
 8017730:	3c01      	subs	r4, #1
 8017732:	f101 0714 	add.w	r7, r1, #20
 8017736:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801773a:	f100 0614 	add.w	r6, r0, #20
 801773e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017742:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017746:	eb06 030c 	add.w	r3, r6, ip
 801774a:	3501      	adds	r5, #1
 801774c:	eb07 090c 	add.w	r9, r7, ip
 8017750:	9301      	str	r3, [sp, #4]
 8017752:	fbb0 f5f5 	udiv	r5, r0, r5
 8017756:	b395      	cbz	r5, 80177be <quorem+0x9e>
 8017758:	f04f 0a00 	mov.w	sl, #0
 801775c:	4638      	mov	r0, r7
 801775e:	46b6      	mov	lr, r6
 8017760:	46d3      	mov	fp, sl
 8017762:	f850 2b04 	ldr.w	r2, [r0], #4
 8017766:	b293      	uxth	r3, r2
 8017768:	fb05 a303 	mla	r3, r5, r3, sl
 801776c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017770:	b29b      	uxth	r3, r3
 8017772:	ebab 0303 	sub.w	r3, fp, r3
 8017776:	0c12      	lsrs	r2, r2, #16
 8017778:	f8de b000 	ldr.w	fp, [lr]
 801777c:	fb05 a202 	mla	r2, r5, r2, sl
 8017780:	fa13 f38b 	uxtah	r3, r3, fp
 8017784:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017788:	fa1f fb82 	uxth.w	fp, r2
 801778c:	f8de 2000 	ldr.w	r2, [lr]
 8017790:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017794:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017798:	b29b      	uxth	r3, r3
 801779a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801779e:	4581      	cmp	r9, r0
 80177a0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80177a4:	f84e 3b04 	str.w	r3, [lr], #4
 80177a8:	d2db      	bcs.n	8017762 <quorem+0x42>
 80177aa:	f856 300c 	ldr.w	r3, [r6, ip]
 80177ae:	b933      	cbnz	r3, 80177be <quorem+0x9e>
 80177b0:	9b01      	ldr	r3, [sp, #4]
 80177b2:	3b04      	subs	r3, #4
 80177b4:	429e      	cmp	r6, r3
 80177b6:	461a      	mov	r2, r3
 80177b8:	d330      	bcc.n	801781c <quorem+0xfc>
 80177ba:	f8c8 4010 	str.w	r4, [r8, #16]
 80177be:	4640      	mov	r0, r8
 80177c0:	f001 fb94 	bl	8018eec <__mcmp>
 80177c4:	2800      	cmp	r0, #0
 80177c6:	db25      	blt.n	8017814 <quorem+0xf4>
 80177c8:	3501      	adds	r5, #1
 80177ca:	4630      	mov	r0, r6
 80177cc:	f04f 0c00 	mov.w	ip, #0
 80177d0:	f857 2b04 	ldr.w	r2, [r7], #4
 80177d4:	f8d0 e000 	ldr.w	lr, [r0]
 80177d8:	b293      	uxth	r3, r2
 80177da:	ebac 0303 	sub.w	r3, ip, r3
 80177de:	0c12      	lsrs	r2, r2, #16
 80177e0:	fa13 f38e 	uxtah	r3, r3, lr
 80177e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80177e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80177ec:	b29b      	uxth	r3, r3
 80177ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80177f2:	45b9      	cmp	r9, r7
 80177f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80177f8:	f840 3b04 	str.w	r3, [r0], #4
 80177fc:	d2e8      	bcs.n	80177d0 <quorem+0xb0>
 80177fe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017802:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017806:	b92a      	cbnz	r2, 8017814 <quorem+0xf4>
 8017808:	3b04      	subs	r3, #4
 801780a:	429e      	cmp	r6, r3
 801780c:	461a      	mov	r2, r3
 801780e:	d30b      	bcc.n	8017828 <quorem+0x108>
 8017810:	f8c8 4010 	str.w	r4, [r8, #16]
 8017814:	4628      	mov	r0, r5
 8017816:	b003      	add	sp, #12
 8017818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801781c:	6812      	ldr	r2, [r2, #0]
 801781e:	3b04      	subs	r3, #4
 8017820:	2a00      	cmp	r2, #0
 8017822:	d1ca      	bne.n	80177ba <quorem+0x9a>
 8017824:	3c01      	subs	r4, #1
 8017826:	e7c5      	b.n	80177b4 <quorem+0x94>
 8017828:	6812      	ldr	r2, [r2, #0]
 801782a:	3b04      	subs	r3, #4
 801782c:	2a00      	cmp	r2, #0
 801782e:	d1ef      	bne.n	8017810 <quorem+0xf0>
 8017830:	3c01      	subs	r4, #1
 8017832:	e7ea      	b.n	801780a <quorem+0xea>
 8017834:	2000      	movs	r0, #0
 8017836:	e7ee      	b.n	8017816 <quorem+0xf6>

08017838 <_dtoa_r>:
 8017838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801783c:	ec57 6b10 	vmov	r6, r7, d0
 8017840:	b097      	sub	sp, #92	; 0x5c
 8017842:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017844:	9106      	str	r1, [sp, #24]
 8017846:	4604      	mov	r4, r0
 8017848:	920b      	str	r2, [sp, #44]	; 0x2c
 801784a:	9312      	str	r3, [sp, #72]	; 0x48
 801784c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017850:	e9cd 6700 	strd	r6, r7, [sp]
 8017854:	b93d      	cbnz	r5, 8017866 <_dtoa_r+0x2e>
 8017856:	2010      	movs	r0, #16
 8017858:	f7fe f8fc 	bl	8015a54 <malloc>
 801785c:	6260      	str	r0, [r4, #36]	; 0x24
 801785e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017862:	6005      	str	r5, [r0, #0]
 8017864:	60c5      	str	r5, [r0, #12]
 8017866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017868:	6819      	ldr	r1, [r3, #0]
 801786a:	b151      	cbz	r1, 8017882 <_dtoa_r+0x4a>
 801786c:	685a      	ldr	r2, [r3, #4]
 801786e:	604a      	str	r2, [r1, #4]
 8017870:	2301      	movs	r3, #1
 8017872:	4093      	lsls	r3, r2
 8017874:	608b      	str	r3, [r1, #8]
 8017876:	4620      	mov	r0, r4
 8017878:	f001 f918 	bl	8018aac <_Bfree>
 801787c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801787e:	2200      	movs	r2, #0
 8017880:	601a      	str	r2, [r3, #0]
 8017882:	1e3b      	subs	r3, r7, #0
 8017884:	bfbb      	ittet	lt
 8017886:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801788a:	9301      	strlt	r3, [sp, #4]
 801788c:	2300      	movge	r3, #0
 801788e:	2201      	movlt	r2, #1
 8017890:	bfac      	ite	ge
 8017892:	f8c8 3000 	strge.w	r3, [r8]
 8017896:	f8c8 2000 	strlt.w	r2, [r8]
 801789a:	4baf      	ldr	r3, [pc, #700]	; (8017b58 <_dtoa_r+0x320>)
 801789c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80178a0:	ea33 0308 	bics.w	r3, r3, r8
 80178a4:	d114      	bne.n	80178d0 <_dtoa_r+0x98>
 80178a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80178a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80178ac:	6013      	str	r3, [r2, #0]
 80178ae:	9b00      	ldr	r3, [sp, #0]
 80178b0:	b923      	cbnz	r3, 80178bc <_dtoa_r+0x84>
 80178b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80178b6:	2800      	cmp	r0, #0
 80178b8:	f000 8542 	beq.w	8018340 <_dtoa_r+0xb08>
 80178bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80178be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017b6c <_dtoa_r+0x334>
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	f000 8544 	beq.w	8018350 <_dtoa_r+0xb18>
 80178c8:	f10b 0303 	add.w	r3, fp, #3
 80178cc:	f000 bd3e 	b.w	801834c <_dtoa_r+0xb14>
 80178d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80178d4:	2200      	movs	r2, #0
 80178d6:	2300      	movs	r3, #0
 80178d8:	4630      	mov	r0, r6
 80178da:	4639      	mov	r1, r7
 80178dc:	f7e9 f904 	bl	8000ae8 <__aeabi_dcmpeq>
 80178e0:	4681      	mov	r9, r0
 80178e2:	b168      	cbz	r0, 8017900 <_dtoa_r+0xc8>
 80178e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80178e6:	2301      	movs	r3, #1
 80178e8:	6013      	str	r3, [r2, #0]
 80178ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	f000 8524 	beq.w	801833a <_dtoa_r+0xb02>
 80178f2:	4b9a      	ldr	r3, [pc, #616]	; (8017b5c <_dtoa_r+0x324>)
 80178f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80178f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80178fa:	6013      	str	r3, [r2, #0]
 80178fc:	f000 bd28 	b.w	8018350 <_dtoa_r+0xb18>
 8017900:	aa14      	add	r2, sp, #80	; 0x50
 8017902:	a915      	add	r1, sp, #84	; 0x54
 8017904:	ec47 6b10 	vmov	d0, r6, r7
 8017908:	4620      	mov	r0, r4
 801790a:	f001 fbdd 	bl	80190c8 <__d2b>
 801790e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017912:	9004      	str	r0, [sp, #16]
 8017914:	2d00      	cmp	r5, #0
 8017916:	d07c      	beq.n	8017a12 <_dtoa_r+0x1da>
 8017918:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801791c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017920:	46b2      	mov	sl, r6
 8017922:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017926:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801792a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801792e:	2200      	movs	r2, #0
 8017930:	4b8b      	ldr	r3, [pc, #556]	; (8017b60 <_dtoa_r+0x328>)
 8017932:	4650      	mov	r0, sl
 8017934:	4659      	mov	r1, fp
 8017936:	f7e8 fcb7 	bl	80002a8 <__aeabi_dsub>
 801793a:	a381      	add	r3, pc, #516	; (adr r3, 8017b40 <_dtoa_r+0x308>)
 801793c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017940:	f7e8 fe6a 	bl	8000618 <__aeabi_dmul>
 8017944:	a380      	add	r3, pc, #512	; (adr r3, 8017b48 <_dtoa_r+0x310>)
 8017946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801794a:	f7e8 fcaf 	bl	80002ac <__adddf3>
 801794e:	4606      	mov	r6, r0
 8017950:	4628      	mov	r0, r5
 8017952:	460f      	mov	r7, r1
 8017954:	f7e8 fdf6 	bl	8000544 <__aeabi_i2d>
 8017958:	a37d      	add	r3, pc, #500	; (adr r3, 8017b50 <_dtoa_r+0x318>)
 801795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801795e:	f7e8 fe5b 	bl	8000618 <__aeabi_dmul>
 8017962:	4602      	mov	r2, r0
 8017964:	460b      	mov	r3, r1
 8017966:	4630      	mov	r0, r6
 8017968:	4639      	mov	r1, r7
 801796a:	f7e8 fc9f 	bl	80002ac <__adddf3>
 801796e:	4606      	mov	r6, r0
 8017970:	460f      	mov	r7, r1
 8017972:	f7e9 f901 	bl	8000b78 <__aeabi_d2iz>
 8017976:	2200      	movs	r2, #0
 8017978:	4682      	mov	sl, r0
 801797a:	2300      	movs	r3, #0
 801797c:	4630      	mov	r0, r6
 801797e:	4639      	mov	r1, r7
 8017980:	f7e9 f8bc 	bl	8000afc <__aeabi_dcmplt>
 8017984:	b148      	cbz	r0, 801799a <_dtoa_r+0x162>
 8017986:	4650      	mov	r0, sl
 8017988:	f7e8 fddc 	bl	8000544 <__aeabi_i2d>
 801798c:	4632      	mov	r2, r6
 801798e:	463b      	mov	r3, r7
 8017990:	f7e9 f8aa 	bl	8000ae8 <__aeabi_dcmpeq>
 8017994:	b908      	cbnz	r0, 801799a <_dtoa_r+0x162>
 8017996:	f10a 3aff 	add.w	sl, sl, #4294967295
 801799a:	f1ba 0f16 	cmp.w	sl, #22
 801799e:	d859      	bhi.n	8017a54 <_dtoa_r+0x21c>
 80179a0:	4970      	ldr	r1, [pc, #448]	; (8017b64 <_dtoa_r+0x32c>)
 80179a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80179a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80179aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80179ae:	f7e9 f8c3 	bl	8000b38 <__aeabi_dcmpgt>
 80179b2:	2800      	cmp	r0, #0
 80179b4:	d050      	beq.n	8017a58 <_dtoa_r+0x220>
 80179b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80179ba:	2300      	movs	r3, #0
 80179bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80179be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80179c0:	1b5d      	subs	r5, r3, r5
 80179c2:	f1b5 0801 	subs.w	r8, r5, #1
 80179c6:	bf49      	itett	mi
 80179c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80179cc:	2300      	movpl	r3, #0
 80179ce:	9305      	strmi	r3, [sp, #20]
 80179d0:	f04f 0800 	movmi.w	r8, #0
 80179d4:	bf58      	it	pl
 80179d6:	9305      	strpl	r3, [sp, #20]
 80179d8:	f1ba 0f00 	cmp.w	sl, #0
 80179dc:	db3e      	blt.n	8017a5c <_dtoa_r+0x224>
 80179de:	2300      	movs	r3, #0
 80179e0:	44d0      	add	r8, sl
 80179e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80179e6:	9307      	str	r3, [sp, #28]
 80179e8:	9b06      	ldr	r3, [sp, #24]
 80179ea:	2b09      	cmp	r3, #9
 80179ec:	f200 8090 	bhi.w	8017b10 <_dtoa_r+0x2d8>
 80179f0:	2b05      	cmp	r3, #5
 80179f2:	bfc4      	itt	gt
 80179f4:	3b04      	subgt	r3, #4
 80179f6:	9306      	strgt	r3, [sp, #24]
 80179f8:	9b06      	ldr	r3, [sp, #24]
 80179fa:	f1a3 0302 	sub.w	r3, r3, #2
 80179fe:	bfcc      	ite	gt
 8017a00:	2500      	movgt	r5, #0
 8017a02:	2501      	movle	r5, #1
 8017a04:	2b03      	cmp	r3, #3
 8017a06:	f200 808f 	bhi.w	8017b28 <_dtoa_r+0x2f0>
 8017a0a:	e8df f003 	tbb	[pc, r3]
 8017a0e:	7f7d      	.short	0x7f7d
 8017a10:	7131      	.short	0x7131
 8017a12:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017a16:	441d      	add	r5, r3
 8017a18:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017a1c:	2820      	cmp	r0, #32
 8017a1e:	dd13      	ble.n	8017a48 <_dtoa_r+0x210>
 8017a20:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017a24:	9b00      	ldr	r3, [sp, #0]
 8017a26:	fa08 f800 	lsl.w	r8, r8, r0
 8017a2a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017a2e:	fa23 f000 	lsr.w	r0, r3, r0
 8017a32:	ea48 0000 	orr.w	r0, r8, r0
 8017a36:	f7e8 fd75 	bl	8000524 <__aeabi_ui2d>
 8017a3a:	2301      	movs	r3, #1
 8017a3c:	4682      	mov	sl, r0
 8017a3e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017a42:	3d01      	subs	r5, #1
 8017a44:	9313      	str	r3, [sp, #76]	; 0x4c
 8017a46:	e772      	b.n	801792e <_dtoa_r+0xf6>
 8017a48:	9b00      	ldr	r3, [sp, #0]
 8017a4a:	f1c0 0020 	rsb	r0, r0, #32
 8017a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8017a52:	e7f0      	b.n	8017a36 <_dtoa_r+0x1fe>
 8017a54:	2301      	movs	r3, #1
 8017a56:	e7b1      	b.n	80179bc <_dtoa_r+0x184>
 8017a58:	900f      	str	r0, [sp, #60]	; 0x3c
 8017a5a:	e7b0      	b.n	80179be <_dtoa_r+0x186>
 8017a5c:	9b05      	ldr	r3, [sp, #20]
 8017a5e:	eba3 030a 	sub.w	r3, r3, sl
 8017a62:	9305      	str	r3, [sp, #20]
 8017a64:	f1ca 0300 	rsb	r3, sl, #0
 8017a68:	9307      	str	r3, [sp, #28]
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	930e      	str	r3, [sp, #56]	; 0x38
 8017a6e:	e7bb      	b.n	80179e8 <_dtoa_r+0x1b0>
 8017a70:	2301      	movs	r3, #1
 8017a72:	930a      	str	r3, [sp, #40]	; 0x28
 8017a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	dd59      	ble.n	8017b2e <_dtoa_r+0x2f6>
 8017a7a:	9302      	str	r3, [sp, #8]
 8017a7c:	4699      	mov	r9, r3
 8017a7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017a80:	2200      	movs	r2, #0
 8017a82:	6072      	str	r2, [r6, #4]
 8017a84:	2204      	movs	r2, #4
 8017a86:	f102 0014 	add.w	r0, r2, #20
 8017a8a:	4298      	cmp	r0, r3
 8017a8c:	6871      	ldr	r1, [r6, #4]
 8017a8e:	d953      	bls.n	8017b38 <_dtoa_r+0x300>
 8017a90:	4620      	mov	r0, r4
 8017a92:	f000 ffd7 	bl	8018a44 <_Balloc>
 8017a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017a98:	6030      	str	r0, [r6, #0]
 8017a9a:	f1b9 0f0e 	cmp.w	r9, #14
 8017a9e:	f8d3 b000 	ldr.w	fp, [r3]
 8017aa2:	f200 80e6 	bhi.w	8017c72 <_dtoa_r+0x43a>
 8017aa6:	2d00      	cmp	r5, #0
 8017aa8:	f000 80e3 	beq.w	8017c72 <_dtoa_r+0x43a>
 8017aac:	ed9d 7b00 	vldr	d7, [sp]
 8017ab0:	f1ba 0f00 	cmp.w	sl, #0
 8017ab4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017ab8:	dd74      	ble.n	8017ba4 <_dtoa_r+0x36c>
 8017aba:	4a2a      	ldr	r2, [pc, #168]	; (8017b64 <_dtoa_r+0x32c>)
 8017abc:	f00a 030f 	and.w	r3, sl, #15
 8017ac0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017ac4:	ed93 7b00 	vldr	d7, [r3]
 8017ac8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017acc:	06f0      	lsls	r0, r6, #27
 8017ace:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017ad2:	d565      	bpl.n	8017ba0 <_dtoa_r+0x368>
 8017ad4:	4b24      	ldr	r3, [pc, #144]	; (8017b68 <_dtoa_r+0x330>)
 8017ad6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017ada:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017ade:	f7e8 fec5 	bl	800086c <__aeabi_ddiv>
 8017ae2:	e9cd 0100 	strd	r0, r1, [sp]
 8017ae6:	f006 060f 	and.w	r6, r6, #15
 8017aea:	2503      	movs	r5, #3
 8017aec:	4f1e      	ldr	r7, [pc, #120]	; (8017b68 <_dtoa_r+0x330>)
 8017aee:	e04c      	b.n	8017b8a <_dtoa_r+0x352>
 8017af0:	2301      	movs	r3, #1
 8017af2:	930a      	str	r3, [sp, #40]	; 0x28
 8017af4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017af6:	4453      	add	r3, sl
 8017af8:	f103 0901 	add.w	r9, r3, #1
 8017afc:	9302      	str	r3, [sp, #8]
 8017afe:	464b      	mov	r3, r9
 8017b00:	2b01      	cmp	r3, #1
 8017b02:	bfb8      	it	lt
 8017b04:	2301      	movlt	r3, #1
 8017b06:	e7ba      	b.n	8017a7e <_dtoa_r+0x246>
 8017b08:	2300      	movs	r3, #0
 8017b0a:	e7b2      	b.n	8017a72 <_dtoa_r+0x23a>
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	e7f0      	b.n	8017af2 <_dtoa_r+0x2ba>
 8017b10:	2501      	movs	r5, #1
 8017b12:	2300      	movs	r3, #0
 8017b14:	9306      	str	r3, [sp, #24]
 8017b16:	950a      	str	r5, [sp, #40]	; 0x28
 8017b18:	f04f 33ff 	mov.w	r3, #4294967295
 8017b1c:	9302      	str	r3, [sp, #8]
 8017b1e:	4699      	mov	r9, r3
 8017b20:	2200      	movs	r2, #0
 8017b22:	2312      	movs	r3, #18
 8017b24:	920b      	str	r2, [sp, #44]	; 0x2c
 8017b26:	e7aa      	b.n	8017a7e <_dtoa_r+0x246>
 8017b28:	2301      	movs	r3, #1
 8017b2a:	930a      	str	r3, [sp, #40]	; 0x28
 8017b2c:	e7f4      	b.n	8017b18 <_dtoa_r+0x2e0>
 8017b2e:	2301      	movs	r3, #1
 8017b30:	9302      	str	r3, [sp, #8]
 8017b32:	4699      	mov	r9, r3
 8017b34:	461a      	mov	r2, r3
 8017b36:	e7f5      	b.n	8017b24 <_dtoa_r+0x2ec>
 8017b38:	3101      	adds	r1, #1
 8017b3a:	6071      	str	r1, [r6, #4]
 8017b3c:	0052      	lsls	r2, r2, #1
 8017b3e:	e7a2      	b.n	8017a86 <_dtoa_r+0x24e>
 8017b40:	636f4361 	.word	0x636f4361
 8017b44:	3fd287a7 	.word	0x3fd287a7
 8017b48:	8b60c8b3 	.word	0x8b60c8b3
 8017b4c:	3fc68a28 	.word	0x3fc68a28
 8017b50:	509f79fb 	.word	0x509f79fb
 8017b54:	3fd34413 	.word	0x3fd34413
 8017b58:	7ff00000 	.word	0x7ff00000
 8017b5c:	0801bf35 	.word	0x0801bf35
 8017b60:	3ff80000 	.word	0x3ff80000
 8017b64:	0801bff0 	.word	0x0801bff0
 8017b68:	0801bfc8 	.word	0x0801bfc8
 8017b6c:	0801bfb9 	.word	0x0801bfb9
 8017b70:	07f1      	lsls	r1, r6, #31
 8017b72:	d508      	bpl.n	8017b86 <_dtoa_r+0x34e>
 8017b74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017b7c:	f7e8 fd4c 	bl	8000618 <__aeabi_dmul>
 8017b80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017b84:	3501      	adds	r5, #1
 8017b86:	1076      	asrs	r6, r6, #1
 8017b88:	3708      	adds	r7, #8
 8017b8a:	2e00      	cmp	r6, #0
 8017b8c:	d1f0      	bne.n	8017b70 <_dtoa_r+0x338>
 8017b8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017b92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b96:	f7e8 fe69 	bl	800086c <__aeabi_ddiv>
 8017b9a:	e9cd 0100 	strd	r0, r1, [sp]
 8017b9e:	e01a      	b.n	8017bd6 <_dtoa_r+0x39e>
 8017ba0:	2502      	movs	r5, #2
 8017ba2:	e7a3      	b.n	8017aec <_dtoa_r+0x2b4>
 8017ba4:	f000 80a0 	beq.w	8017ce8 <_dtoa_r+0x4b0>
 8017ba8:	f1ca 0600 	rsb	r6, sl, #0
 8017bac:	4b9f      	ldr	r3, [pc, #636]	; (8017e2c <_dtoa_r+0x5f4>)
 8017bae:	4fa0      	ldr	r7, [pc, #640]	; (8017e30 <_dtoa_r+0x5f8>)
 8017bb0:	f006 020f 	and.w	r2, r6, #15
 8017bb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017bc0:	f7e8 fd2a 	bl	8000618 <__aeabi_dmul>
 8017bc4:	e9cd 0100 	strd	r0, r1, [sp]
 8017bc8:	1136      	asrs	r6, r6, #4
 8017bca:	2300      	movs	r3, #0
 8017bcc:	2502      	movs	r5, #2
 8017bce:	2e00      	cmp	r6, #0
 8017bd0:	d17f      	bne.n	8017cd2 <_dtoa_r+0x49a>
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d1e1      	bne.n	8017b9a <_dtoa_r+0x362>
 8017bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	f000 8087 	beq.w	8017cec <_dtoa_r+0x4b4>
 8017bde:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017be2:	2200      	movs	r2, #0
 8017be4:	4b93      	ldr	r3, [pc, #588]	; (8017e34 <_dtoa_r+0x5fc>)
 8017be6:	4630      	mov	r0, r6
 8017be8:	4639      	mov	r1, r7
 8017bea:	f7e8 ff87 	bl	8000afc <__aeabi_dcmplt>
 8017bee:	2800      	cmp	r0, #0
 8017bf0:	d07c      	beq.n	8017cec <_dtoa_r+0x4b4>
 8017bf2:	f1b9 0f00 	cmp.w	r9, #0
 8017bf6:	d079      	beq.n	8017cec <_dtoa_r+0x4b4>
 8017bf8:	9b02      	ldr	r3, [sp, #8]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	dd35      	ble.n	8017c6a <_dtoa_r+0x432>
 8017bfe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017c02:	9308      	str	r3, [sp, #32]
 8017c04:	4639      	mov	r1, r7
 8017c06:	2200      	movs	r2, #0
 8017c08:	4b8b      	ldr	r3, [pc, #556]	; (8017e38 <_dtoa_r+0x600>)
 8017c0a:	4630      	mov	r0, r6
 8017c0c:	f7e8 fd04 	bl	8000618 <__aeabi_dmul>
 8017c10:	e9cd 0100 	strd	r0, r1, [sp]
 8017c14:	9f02      	ldr	r7, [sp, #8]
 8017c16:	3501      	adds	r5, #1
 8017c18:	4628      	mov	r0, r5
 8017c1a:	f7e8 fc93 	bl	8000544 <__aeabi_i2d>
 8017c1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017c22:	f7e8 fcf9 	bl	8000618 <__aeabi_dmul>
 8017c26:	2200      	movs	r2, #0
 8017c28:	4b84      	ldr	r3, [pc, #528]	; (8017e3c <_dtoa_r+0x604>)
 8017c2a:	f7e8 fb3f 	bl	80002ac <__adddf3>
 8017c2e:	4605      	mov	r5, r0
 8017c30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017c34:	2f00      	cmp	r7, #0
 8017c36:	d15d      	bne.n	8017cf4 <_dtoa_r+0x4bc>
 8017c38:	2200      	movs	r2, #0
 8017c3a:	4b81      	ldr	r3, [pc, #516]	; (8017e40 <_dtoa_r+0x608>)
 8017c3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c40:	f7e8 fb32 	bl	80002a8 <__aeabi_dsub>
 8017c44:	462a      	mov	r2, r5
 8017c46:	4633      	mov	r3, r6
 8017c48:	e9cd 0100 	strd	r0, r1, [sp]
 8017c4c:	f7e8 ff74 	bl	8000b38 <__aeabi_dcmpgt>
 8017c50:	2800      	cmp	r0, #0
 8017c52:	f040 8288 	bne.w	8018166 <_dtoa_r+0x92e>
 8017c56:	462a      	mov	r2, r5
 8017c58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017c5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c60:	f7e8 ff4c 	bl	8000afc <__aeabi_dcmplt>
 8017c64:	2800      	cmp	r0, #0
 8017c66:	f040 827c 	bne.w	8018162 <_dtoa_r+0x92a>
 8017c6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017c6e:	e9cd 2300 	strd	r2, r3, [sp]
 8017c72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	f2c0 8150 	blt.w	8017f1a <_dtoa_r+0x6e2>
 8017c7a:	f1ba 0f0e 	cmp.w	sl, #14
 8017c7e:	f300 814c 	bgt.w	8017f1a <_dtoa_r+0x6e2>
 8017c82:	4b6a      	ldr	r3, [pc, #424]	; (8017e2c <_dtoa_r+0x5f4>)
 8017c84:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017c88:	ed93 7b00 	vldr	d7, [r3]
 8017c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017c94:	f280 80d8 	bge.w	8017e48 <_dtoa_r+0x610>
 8017c98:	f1b9 0f00 	cmp.w	r9, #0
 8017c9c:	f300 80d4 	bgt.w	8017e48 <_dtoa_r+0x610>
 8017ca0:	f040 825e 	bne.w	8018160 <_dtoa_r+0x928>
 8017ca4:	2200      	movs	r2, #0
 8017ca6:	4b66      	ldr	r3, [pc, #408]	; (8017e40 <_dtoa_r+0x608>)
 8017ca8:	ec51 0b17 	vmov	r0, r1, d7
 8017cac:	f7e8 fcb4 	bl	8000618 <__aeabi_dmul>
 8017cb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017cb4:	f7e8 ff36 	bl	8000b24 <__aeabi_dcmpge>
 8017cb8:	464f      	mov	r7, r9
 8017cba:	464e      	mov	r6, r9
 8017cbc:	2800      	cmp	r0, #0
 8017cbe:	f040 8234 	bne.w	801812a <_dtoa_r+0x8f2>
 8017cc2:	2331      	movs	r3, #49	; 0x31
 8017cc4:	f10b 0501 	add.w	r5, fp, #1
 8017cc8:	f88b 3000 	strb.w	r3, [fp]
 8017ccc:	f10a 0a01 	add.w	sl, sl, #1
 8017cd0:	e22f      	b.n	8018132 <_dtoa_r+0x8fa>
 8017cd2:	07f2      	lsls	r2, r6, #31
 8017cd4:	d505      	bpl.n	8017ce2 <_dtoa_r+0x4aa>
 8017cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017cda:	f7e8 fc9d 	bl	8000618 <__aeabi_dmul>
 8017cde:	3501      	adds	r5, #1
 8017ce0:	2301      	movs	r3, #1
 8017ce2:	1076      	asrs	r6, r6, #1
 8017ce4:	3708      	adds	r7, #8
 8017ce6:	e772      	b.n	8017bce <_dtoa_r+0x396>
 8017ce8:	2502      	movs	r5, #2
 8017cea:	e774      	b.n	8017bd6 <_dtoa_r+0x39e>
 8017cec:	f8cd a020 	str.w	sl, [sp, #32]
 8017cf0:	464f      	mov	r7, r9
 8017cf2:	e791      	b.n	8017c18 <_dtoa_r+0x3e0>
 8017cf4:	4b4d      	ldr	r3, [pc, #308]	; (8017e2c <_dtoa_r+0x5f4>)
 8017cf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017cfa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d047      	beq.n	8017d94 <_dtoa_r+0x55c>
 8017d04:	4602      	mov	r2, r0
 8017d06:	460b      	mov	r3, r1
 8017d08:	2000      	movs	r0, #0
 8017d0a:	494e      	ldr	r1, [pc, #312]	; (8017e44 <_dtoa_r+0x60c>)
 8017d0c:	f7e8 fdae 	bl	800086c <__aeabi_ddiv>
 8017d10:	462a      	mov	r2, r5
 8017d12:	4633      	mov	r3, r6
 8017d14:	f7e8 fac8 	bl	80002a8 <__aeabi_dsub>
 8017d18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017d1c:	465d      	mov	r5, fp
 8017d1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d22:	f7e8 ff29 	bl	8000b78 <__aeabi_d2iz>
 8017d26:	4606      	mov	r6, r0
 8017d28:	f7e8 fc0c 	bl	8000544 <__aeabi_i2d>
 8017d2c:	4602      	mov	r2, r0
 8017d2e:	460b      	mov	r3, r1
 8017d30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d34:	f7e8 fab8 	bl	80002a8 <__aeabi_dsub>
 8017d38:	3630      	adds	r6, #48	; 0x30
 8017d3a:	f805 6b01 	strb.w	r6, [r5], #1
 8017d3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017d42:	e9cd 0100 	strd	r0, r1, [sp]
 8017d46:	f7e8 fed9 	bl	8000afc <__aeabi_dcmplt>
 8017d4a:	2800      	cmp	r0, #0
 8017d4c:	d163      	bne.n	8017e16 <_dtoa_r+0x5de>
 8017d4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017d52:	2000      	movs	r0, #0
 8017d54:	4937      	ldr	r1, [pc, #220]	; (8017e34 <_dtoa_r+0x5fc>)
 8017d56:	f7e8 faa7 	bl	80002a8 <__aeabi_dsub>
 8017d5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017d5e:	f7e8 fecd 	bl	8000afc <__aeabi_dcmplt>
 8017d62:	2800      	cmp	r0, #0
 8017d64:	f040 80b7 	bne.w	8017ed6 <_dtoa_r+0x69e>
 8017d68:	eba5 030b 	sub.w	r3, r5, fp
 8017d6c:	429f      	cmp	r7, r3
 8017d6e:	f77f af7c 	ble.w	8017c6a <_dtoa_r+0x432>
 8017d72:	2200      	movs	r2, #0
 8017d74:	4b30      	ldr	r3, [pc, #192]	; (8017e38 <_dtoa_r+0x600>)
 8017d76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017d7a:	f7e8 fc4d 	bl	8000618 <__aeabi_dmul>
 8017d7e:	2200      	movs	r2, #0
 8017d80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017d84:	4b2c      	ldr	r3, [pc, #176]	; (8017e38 <_dtoa_r+0x600>)
 8017d86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d8a:	f7e8 fc45 	bl	8000618 <__aeabi_dmul>
 8017d8e:	e9cd 0100 	strd	r0, r1, [sp]
 8017d92:	e7c4      	b.n	8017d1e <_dtoa_r+0x4e6>
 8017d94:	462a      	mov	r2, r5
 8017d96:	4633      	mov	r3, r6
 8017d98:	f7e8 fc3e 	bl	8000618 <__aeabi_dmul>
 8017d9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017da0:	eb0b 0507 	add.w	r5, fp, r7
 8017da4:	465e      	mov	r6, fp
 8017da6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017daa:	f7e8 fee5 	bl	8000b78 <__aeabi_d2iz>
 8017dae:	4607      	mov	r7, r0
 8017db0:	f7e8 fbc8 	bl	8000544 <__aeabi_i2d>
 8017db4:	3730      	adds	r7, #48	; 0x30
 8017db6:	4602      	mov	r2, r0
 8017db8:	460b      	mov	r3, r1
 8017dba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017dbe:	f7e8 fa73 	bl	80002a8 <__aeabi_dsub>
 8017dc2:	f806 7b01 	strb.w	r7, [r6], #1
 8017dc6:	42ae      	cmp	r6, r5
 8017dc8:	e9cd 0100 	strd	r0, r1, [sp]
 8017dcc:	f04f 0200 	mov.w	r2, #0
 8017dd0:	d126      	bne.n	8017e20 <_dtoa_r+0x5e8>
 8017dd2:	4b1c      	ldr	r3, [pc, #112]	; (8017e44 <_dtoa_r+0x60c>)
 8017dd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017dd8:	f7e8 fa68 	bl	80002ac <__adddf3>
 8017ddc:	4602      	mov	r2, r0
 8017dde:	460b      	mov	r3, r1
 8017de0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017de4:	f7e8 fea8 	bl	8000b38 <__aeabi_dcmpgt>
 8017de8:	2800      	cmp	r0, #0
 8017dea:	d174      	bne.n	8017ed6 <_dtoa_r+0x69e>
 8017dec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017df0:	2000      	movs	r0, #0
 8017df2:	4914      	ldr	r1, [pc, #80]	; (8017e44 <_dtoa_r+0x60c>)
 8017df4:	f7e8 fa58 	bl	80002a8 <__aeabi_dsub>
 8017df8:	4602      	mov	r2, r0
 8017dfa:	460b      	mov	r3, r1
 8017dfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017e00:	f7e8 fe7c 	bl	8000afc <__aeabi_dcmplt>
 8017e04:	2800      	cmp	r0, #0
 8017e06:	f43f af30 	beq.w	8017c6a <_dtoa_r+0x432>
 8017e0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017e0e:	2b30      	cmp	r3, #48	; 0x30
 8017e10:	f105 32ff 	add.w	r2, r5, #4294967295
 8017e14:	d002      	beq.n	8017e1c <_dtoa_r+0x5e4>
 8017e16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017e1a:	e04a      	b.n	8017eb2 <_dtoa_r+0x67a>
 8017e1c:	4615      	mov	r5, r2
 8017e1e:	e7f4      	b.n	8017e0a <_dtoa_r+0x5d2>
 8017e20:	4b05      	ldr	r3, [pc, #20]	; (8017e38 <_dtoa_r+0x600>)
 8017e22:	f7e8 fbf9 	bl	8000618 <__aeabi_dmul>
 8017e26:	e9cd 0100 	strd	r0, r1, [sp]
 8017e2a:	e7bc      	b.n	8017da6 <_dtoa_r+0x56e>
 8017e2c:	0801bff0 	.word	0x0801bff0
 8017e30:	0801bfc8 	.word	0x0801bfc8
 8017e34:	3ff00000 	.word	0x3ff00000
 8017e38:	40240000 	.word	0x40240000
 8017e3c:	401c0000 	.word	0x401c0000
 8017e40:	40140000 	.word	0x40140000
 8017e44:	3fe00000 	.word	0x3fe00000
 8017e48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017e4c:	465d      	mov	r5, fp
 8017e4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017e52:	4630      	mov	r0, r6
 8017e54:	4639      	mov	r1, r7
 8017e56:	f7e8 fd09 	bl	800086c <__aeabi_ddiv>
 8017e5a:	f7e8 fe8d 	bl	8000b78 <__aeabi_d2iz>
 8017e5e:	4680      	mov	r8, r0
 8017e60:	f7e8 fb70 	bl	8000544 <__aeabi_i2d>
 8017e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017e68:	f7e8 fbd6 	bl	8000618 <__aeabi_dmul>
 8017e6c:	4602      	mov	r2, r0
 8017e6e:	460b      	mov	r3, r1
 8017e70:	4630      	mov	r0, r6
 8017e72:	4639      	mov	r1, r7
 8017e74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017e78:	f7e8 fa16 	bl	80002a8 <__aeabi_dsub>
 8017e7c:	f805 6b01 	strb.w	r6, [r5], #1
 8017e80:	eba5 060b 	sub.w	r6, r5, fp
 8017e84:	45b1      	cmp	r9, r6
 8017e86:	4602      	mov	r2, r0
 8017e88:	460b      	mov	r3, r1
 8017e8a:	d139      	bne.n	8017f00 <_dtoa_r+0x6c8>
 8017e8c:	f7e8 fa0e 	bl	80002ac <__adddf3>
 8017e90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017e94:	4606      	mov	r6, r0
 8017e96:	460f      	mov	r7, r1
 8017e98:	f7e8 fe4e 	bl	8000b38 <__aeabi_dcmpgt>
 8017e9c:	b9c8      	cbnz	r0, 8017ed2 <_dtoa_r+0x69a>
 8017e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ea2:	4630      	mov	r0, r6
 8017ea4:	4639      	mov	r1, r7
 8017ea6:	f7e8 fe1f 	bl	8000ae8 <__aeabi_dcmpeq>
 8017eaa:	b110      	cbz	r0, 8017eb2 <_dtoa_r+0x67a>
 8017eac:	f018 0f01 	tst.w	r8, #1
 8017eb0:	d10f      	bne.n	8017ed2 <_dtoa_r+0x69a>
 8017eb2:	9904      	ldr	r1, [sp, #16]
 8017eb4:	4620      	mov	r0, r4
 8017eb6:	f000 fdf9 	bl	8018aac <_Bfree>
 8017eba:	2300      	movs	r3, #0
 8017ebc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017ebe:	702b      	strb	r3, [r5, #0]
 8017ec0:	f10a 0301 	add.w	r3, sl, #1
 8017ec4:	6013      	str	r3, [r2, #0]
 8017ec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	f000 8241 	beq.w	8018350 <_dtoa_r+0xb18>
 8017ece:	601d      	str	r5, [r3, #0]
 8017ed0:	e23e      	b.n	8018350 <_dtoa_r+0xb18>
 8017ed2:	f8cd a020 	str.w	sl, [sp, #32]
 8017ed6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017eda:	2a39      	cmp	r2, #57	; 0x39
 8017edc:	f105 33ff 	add.w	r3, r5, #4294967295
 8017ee0:	d108      	bne.n	8017ef4 <_dtoa_r+0x6bc>
 8017ee2:	459b      	cmp	fp, r3
 8017ee4:	d10a      	bne.n	8017efc <_dtoa_r+0x6c4>
 8017ee6:	9b08      	ldr	r3, [sp, #32]
 8017ee8:	3301      	adds	r3, #1
 8017eea:	9308      	str	r3, [sp, #32]
 8017eec:	2330      	movs	r3, #48	; 0x30
 8017eee:	f88b 3000 	strb.w	r3, [fp]
 8017ef2:	465b      	mov	r3, fp
 8017ef4:	781a      	ldrb	r2, [r3, #0]
 8017ef6:	3201      	adds	r2, #1
 8017ef8:	701a      	strb	r2, [r3, #0]
 8017efa:	e78c      	b.n	8017e16 <_dtoa_r+0x5de>
 8017efc:	461d      	mov	r5, r3
 8017efe:	e7ea      	b.n	8017ed6 <_dtoa_r+0x69e>
 8017f00:	2200      	movs	r2, #0
 8017f02:	4b9b      	ldr	r3, [pc, #620]	; (8018170 <_dtoa_r+0x938>)
 8017f04:	f7e8 fb88 	bl	8000618 <__aeabi_dmul>
 8017f08:	2200      	movs	r2, #0
 8017f0a:	2300      	movs	r3, #0
 8017f0c:	4606      	mov	r6, r0
 8017f0e:	460f      	mov	r7, r1
 8017f10:	f7e8 fdea 	bl	8000ae8 <__aeabi_dcmpeq>
 8017f14:	2800      	cmp	r0, #0
 8017f16:	d09a      	beq.n	8017e4e <_dtoa_r+0x616>
 8017f18:	e7cb      	b.n	8017eb2 <_dtoa_r+0x67a>
 8017f1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f1c:	2a00      	cmp	r2, #0
 8017f1e:	f000 808b 	beq.w	8018038 <_dtoa_r+0x800>
 8017f22:	9a06      	ldr	r2, [sp, #24]
 8017f24:	2a01      	cmp	r2, #1
 8017f26:	dc6e      	bgt.n	8018006 <_dtoa_r+0x7ce>
 8017f28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017f2a:	2a00      	cmp	r2, #0
 8017f2c:	d067      	beq.n	8017ffe <_dtoa_r+0x7c6>
 8017f2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017f32:	9f07      	ldr	r7, [sp, #28]
 8017f34:	9d05      	ldr	r5, [sp, #20]
 8017f36:	9a05      	ldr	r2, [sp, #20]
 8017f38:	2101      	movs	r1, #1
 8017f3a:	441a      	add	r2, r3
 8017f3c:	4620      	mov	r0, r4
 8017f3e:	9205      	str	r2, [sp, #20]
 8017f40:	4498      	add	r8, r3
 8017f42:	f000 fe91 	bl	8018c68 <__i2b>
 8017f46:	4606      	mov	r6, r0
 8017f48:	2d00      	cmp	r5, #0
 8017f4a:	dd0c      	ble.n	8017f66 <_dtoa_r+0x72e>
 8017f4c:	f1b8 0f00 	cmp.w	r8, #0
 8017f50:	dd09      	ble.n	8017f66 <_dtoa_r+0x72e>
 8017f52:	4545      	cmp	r5, r8
 8017f54:	9a05      	ldr	r2, [sp, #20]
 8017f56:	462b      	mov	r3, r5
 8017f58:	bfa8      	it	ge
 8017f5a:	4643      	movge	r3, r8
 8017f5c:	1ad2      	subs	r2, r2, r3
 8017f5e:	9205      	str	r2, [sp, #20]
 8017f60:	1aed      	subs	r5, r5, r3
 8017f62:	eba8 0803 	sub.w	r8, r8, r3
 8017f66:	9b07      	ldr	r3, [sp, #28]
 8017f68:	b1eb      	cbz	r3, 8017fa6 <_dtoa_r+0x76e>
 8017f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d067      	beq.n	8018040 <_dtoa_r+0x808>
 8017f70:	b18f      	cbz	r7, 8017f96 <_dtoa_r+0x75e>
 8017f72:	4631      	mov	r1, r6
 8017f74:	463a      	mov	r2, r7
 8017f76:	4620      	mov	r0, r4
 8017f78:	f000 ff16 	bl	8018da8 <__pow5mult>
 8017f7c:	9a04      	ldr	r2, [sp, #16]
 8017f7e:	4601      	mov	r1, r0
 8017f80:	4606      	mov	r6, r0
 8017f82:	4620      	mov	r0, r4
 8017f84:	f000 fe79 	bl	8018c7a <__multiply>
 8017f88:	9904      	ldr	r1, [sp, #16]
 8017f8a:	9008      	str	r0, [sp, #32]
 8017f8c:	4620      	mov	r0, r4
 8017f8e:	f000 fd8d 	bl	8018aac <_Bfree>
 8017f92:	9b08      	ldr	r3, [sp, #32]
 8017f94:	9304      	str	r3, [sp, #16]
 8017f96:	9b07      	ldr	r3, [sp, #28]
 8017f98:	1bda      	subs	r2, r3, r7
 8017f9a:	d004      	beq.n	8017fa6 <_dtoa_r+0x76e>
 8017f9c:	9904      	ldr	r1, [sp, #16]
 8017f9e:	4620      	mov	r0, r4
 8017fa0:	f000 ff02 	bl	8018da8 <__pow5mult>
 8017fa4:	9004      	str	r0, [sp, #16]
 8017fa6:	2101      	movs	r1, #1
 8017fa8:	4620      	mov	r0, r4
 8017faa:	f000 fe5d 	bl	8018c68 <__i2b>
 8017fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fb0:	4607      	mov	r7, r0
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	f000 81d0 	beq.w	8018358 <_dtoa_r+0xb20>
 8017fb8:	461a      	mov	r2, r3
 8017fba:	4601      	mov	r1, r0
 8017fbc:	4620      	mov	r0, r4
 8017fbe:	f000 fef3 	bl	8018da8 <__pow5mult>
 8017fc2:	9b06      	ldr	r3, [sp, #24]
 8017fc4:	2b01      	cmp	r3, #1
 8017fc6:	4607      	mov	r7, r0
 8017fc8:	dc40      	bgt.n	801804c <_dtoa_r+0x814>
 8017fca:	9b00      	ldr	r3, [sp, #0]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d139      	bne.n	8018044 <_dtoa_r+0x80c>
 8017fd0:	9b01      	ldr	r3, [sp, #4]
 8017fd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d136      	bne.n	8018048 <_dtoa_r+0x810>
 8017fda:	9b01      	ldr	r3, [sp, #4]
 8017fdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017fe0:	0d1b      	lsrs	r3, r3, #20
 8017fe2:	051b      	lsls	r3, r3, #20
 8017fe4:	b12b      	cbz	r3, 8017ff2 <_dtoa_r+0x7ba>
 8017fe6:	9b05      	ldr	r3, [sp, #20]
 8017fe8:	3301      	adds	r3, #1
 8017fea:	9305      	str	r3, [sp, #20]
 8017fec:	f108 0801 	add.w	r8, r8, #1
 8017ff0:	2301      	movs	r3, #1
 8017ff2:	9307      	str	r3, [sp, #28]
 8017ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d12a      	bne.n	8018050 <_dtoa_r+0x818>
 8017ffa:	2001      	movs	r0, #1
 8017ffc:	e030      	b.n	8018060 <_dtoa_r+0x828>
 8017ffe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018000:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018004:	e795      	b.n	8017f32 <_dtoa_r+0x6fa>
 8018006:	9b07      	ldr	r3, [sp, #28]
 8018008:	f109 37ff 	add.w	r7, r9, #4294967295
 801800c:	42bb      	cmp	r3, r7
 801800e:	bfbf      	itttt	lt
 8018010:	9b07      	ldrlt	r3, [sp, #28]
 8018012:	9707      	strlt	r7, [sp, #28]
 8018014:	1afa      	sublt	r2, r7, r3
 8018016:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8018018:	bfbb      	ittet	lt
 801801a:	189b      	addlt	r3, r3, r2
 801801c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801801e:	1bdf      	subge	r7, r3, r7
 8018020:	2700      	movlt	r7, #0
 8018022:	f1b9 0f00 	cmp.w	r9, #0
 8018026:	bfb5      	itete	lt
 8018028:	9b05      	ldrlt	r3, [sp, #20]
 801802a:	9d05      	ldrge	r5, [sp, #20]
 801802c:	eba3 0509 	sublt.w	r5, r3, r9
 8018030:	464b      	movge	r3, r9
 8018032:	bfb8      	it	lt
 8018034:	2300      	movlt	r3, #0
 8018036:	e77e      	b.n	8017f36 <_dtoa_r+0x6fe>
 8018038:	9f07      	ldr	r7, [sp, #28]
 801803a:	9d05      	ldr	r5, [sp, #20]
 801803c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801803e:	e783      	b.n	8017f48 <_dtoa_r+0x710>
 8018040:	9a07      	ldr	r2, [sp, #28]
 8018042:	e7ab      	b.n	8017f9c <_dtoa_r+0x764>
 8018044:	2300      	movs	r3, #0
 8018046:	e7d4      	b.n	8017ff2 <_dtoa_r+0x7ba>
 8018048:	9b00      	ldr	r3, [sp, #0]
 801804a:	e7d2      	b.n	8017ff2 <_dtoa_r+0x7ba>
 801804c:	2300      	movs	r3, #0
 801804e:	9307      	str	r3, [sp, #28]
 8018050:	693b      	ldr	r3, [r7, #16]
 8018052:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8018056:	6918      	ldr	r0, [r3, #16]
 8018058:	f000 fdb8 	bl	8018bcc <__hi0bits>
 801805c:	f1c0 0020 	rsb	r0, r0, #32
 8018060:	4440      	add	r0, r8
 8018062:	f010 001f 	ands.w	r0, r0, #31
 8018066:	d047      	beq.n	80180f8 <_dtoa_r+0x8c0>
 8018068:	f1c0 0320 	rsb	r3, r0, #32
 801806c:	2b04      	cmp	r3, #4
 801806e:	dd3b      	ble.n	80180e8 <_dtoa_r+0x8b0>
 8018070:	9b05      	ldr	r3, [sp, #20]
 8018072:	f1c0 001c 	rsb	r0, r0, #28
 8018076:	4403      	add	r3, r0
 8018078:	9305      	str	r3, [sp, #20]
 801807a:	4405      	add	r5, r0
 801807c:	4480      	add	r8, r0
 801807e:	9b05      	ldr	r3, [sp, #20]
 8018080:	2b00      	cmp	r3, #0
 8018082:	dd05      	ble.n	8018090 <_dtoa_r+0x858>
 8018084:	461a      	mov	r2, r3
 8018086:	9904      	ldr	r1, [sp, #16]
 8018088:	4620      	mov	r0, r4
 801808a:	f000 fedb 	bl	8018e44 <__lshift>
 801808e:	9004      	str	r0, [sp, #16]
 8018090:	f1b8 0f00 	cmp.w	r8, #0
 8018094:	dd05      	ble.n	80180a2 <_dtoa_r+0x86a>
 8018096:	4639      	mov	r1, r7
 8018098:	4642      	mov	r2, r8
 801809a:	4620      	mov	r0, r4
 801809c:	f000 fed2 	bl	8018e44 <__lshift>
 80180a0:	4607      	mov	r7, r0
 80180a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80180a4:	b353      	cbz	r3, 80180fc <_dtoa_r+0x8c4>
 80180a6:	4639      	mov	r1, r7
 80180a8:	9804      	ldr	r0, [sp, #16]
 80180aa:	f000 ff1f 	bl	8018eec <__mcmp>
 80180ae:	2800      	cmp	r0, #0
 80180b0:	da24      	bge.n	80180fc <_dtoa_r+0x8c4>
 80180b2:	2300      	movs	r3, #0
 80180b4:	220a      	movs	r2, #10
 80180b6:	9904      	ldr	r1, [sp, #16]
 80180b8:	4620      	mov	r0, r4
 80180ba:	f000 fd0e 	bl	8018ada <__multadd>
 80180be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80180c0:	9004      	str	r0, [sp, #16]
 80180c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	f000 814d 	beq.w	8018366 <_dtoa_r+0xb2e>
 80180cc:	2300      	movs	r3, #0
 80180ce:	4631      	mov	r1, r6
 80180d0:	220a      	movs	r2, #10
 80180d2:	4620      	mov	r0, r4
 80180d4:	f000 fd01 	bl	8018ada <__multadd>
 80180d8:	9b02      	ldr	r3, [sp, #8]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	4606      	mov	r6, r0
 80180de:	dc4f      	bgt.n	8018180 <_dtoa_r+0x948>
 80180e0:	9b06      	ldr	r3, [sp, #24]
 80180e2:	2b02      	cmp	r3, #2
 80180e4:	dd4c      	ble.n	8018180 <_dtoa_r+0x948>
 80180e6:	e011      	b.n	801810c <_dtoa_r+0x8d4>
 80180e8:	d0c9      	beq.n	801807e <_dtoa_r+0x846>
 80180ea:	9a05      	ldr	r2, [sp, #20]
 80180ec:	331c      	adds	r3, #28
 80180ee:	441a      	add	r2, r3
 80180f0:	9205      	str	r2, [sp, #20]
 80180f2:	441d      	add	r5, r3
 80180f4:	4498      	add	r8, r3
 80180f6:	e7c2      	b.n	801807e <_dtoa_r+0x846>
 80180f8:	4603      	mov	r3, r0
 80180fa:	e7f6      	b.n	80180ea <_dtoa_r+0x8b2>
 80180fc:	f1b9 0f00 	cmp.w	r9, #0
 8018100:	dc38      	bgt.n	8018174 <_dtoa_r+0x93c>
 8018102:	9b06      	ldr	r3, [sp, #24]
 8018104:	2b02      	cmp	r3, #2
 8018106:	dd35      	ble.n	8018174 <_dtoa_r+0x93c>
 8018108:	f8cd 9008 	str.w	r9, [sp, #8]
 801810c:	9b02      	ldr	r3, [sp, #8]
 801810e:	b963      	cbnz	r3, 801812a <_dtoa_r+0x8f2>
 8018110:	4639      	mov	r1, r7
 8018112:	2205      	movs	r2, #5
 8018114:	4620      	mov	r0, r4
 8018116:	f000 fce0 	bl	8018ada <__multadd>
 801811a:	4601      	mov	r1, r0
 801811c:	4607      	mov	r7, r0
 801811e:	9804      	ldr	r0, [sp, #16]
 8018120:	f000 fee4 	bl	8018eec <__mcmp>
 8018124:	2800      	cmp	r0, #0
 8018126:	f73f adcc 	bgt.w	8017cc2 <_dtoa_r+0x48a>
 801812a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801812c:	465d      	mov	r5, fp
 801812e:	ea6f 0a03 	mvn.w	sl, r3
 8018132:	f04f 0900 	mov.w	r9, #0
 8018136:	4639      	mov	r1, r7
 8018138:	4620      	mov	r0, r4
 801813a:	f000 fcb7 	bl	8018aac <_Bfree>
 801813e:	2e00      	cmp	r6, #0
 8018140:	f43f aeb7 	beq.w	8017eb2 <_dtoa_r+0x67a>
 8018144:	f1b9 0f00 	cmp.w	r9, #0
 8018148:	d005      	beq.n	8018156 <_dtoa_r+0x91e>
 801814a:	45b1      	cmp	r9, r6
 801814c:	d003      	beq.n	8018156 <_dtoa_r+0x91e>
 801814e:	4649      	mov	r1, r9
 8018150:	4620      	mov	r0, r4
 8018152:	f000 fcab 	bl	8018aac <_Bfree>
 8018156:	4631      	mov	r1, r6
 8018158:	4620      	mov	r0, r4
 801815a:	f000 fca7 	bl	8018aac <_Bfree>
 801815e:	e6a8      	b.n	8017eb2 <_dtoa_r+0x67a>
 8018160:	2700      	movs	r7, #0
 8018162:	463e      	mov	r6, r7
 8018164:	e7e1      	b.n	801812a <_dtoa_r+0x8f2>
 8018166:	f8dd a020 	ldr.w	sl, [sp, #32]
 801816a:	463e      	mov	r6, r7
 801816c:	e5a9      	b.n	8017cc2 <_dtoa_r+0x48a>
 801816e:	bf00      	nop
 8018170:	40240000 	.word	0x40240000
 8018174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018176:	f8cd 9008 	str.w	r9, [sp, #8]
 801817a:	2b00      	cmp	r3, #0
 801817c:	f000 80fa 	beq.w	8018374 <_dtoa_r+0xb3c>
 8018180:	2d00      	cmp	r5, #0
 8018182:	dd05      	ble.n	8018190 <_dtoa_r+0x958>
 8018184:	4631      	mov	r1, r6
 8018186:	462a      	mov	r2, r5
 8018188:	4620      	mov	r0, r4
 801818a:	f000 fe5b 	bl	8018e44 <__lshift>
 801818e:	4606      	mov	r6, r0
 8018190:	9b07      	ldr	r3, [sp, #28]
 8018192:	2b00      	cmp	r3, #0
 8018194:	d04c      	beq.n	8018230 <_dtoa_r+0x9f8>
 8018196:	6871      	ldr	r1, [r6, #4]
 8018198:	4620      	mov	r0, r4
 801819a:	f000 fc53 	bl	8018a44 <_Balloc>
 801819e:	6932      	ldr	r2, [r6, #16]
 80181a0:	3202      	adds	r2, #2
 80181a2:	4605      	mov	r5, r0
 80181a4:	0092      	lsls	r2, r2, #2
 80181a6:	f106 010c 	add.w	r1, r6, #12
 80181aa:	300c      	adds	r0, #12
 80181ac:	f7fd fc62 	bl	8015a74 <memcpy>
 80181b0:	2201      	movs	r2, #1
 80181b2:	4629      	mov	r1, r5
 80181b4:	4620      	mov	r0, r4
 80181b6:	f000 fe45 	bl	8018e44 <__lshift>
 80181ba:	9b00      	ldr	r3, [sp, #0]
 80181bc:	f8cd b014 	str.w	fp, [sp, #20]
 80181c0:	f003 0301 	and.w	r3, r3, #1
 80181c4:	46b1      	mov	r9, r6
 80181c6:	9307      	str	r3, [sp, #28]
 80181c8:	4606      	mov	r6, r0
 80181ca:	4639      	mov	r1, r7
 80181cc:	9804      	ldr	r0, [sp, #16]
 80181ce:	f7ff faa7 	bl	8017720 <quorem>
 80181d2:	4649      	mov	r1, r9
 80181d4:	4605      	mov	r5, r0
 80181d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80181da:	9804      	ldr	r0, [sp, #16]
 80181dc:	f000 fe86 	bl	8018eec <__mcmp>
 80181e0:	4632      	mov	r2, r6
 80181e2:	9000      	str	r0, [sp, #0]
 80181e4:	4639      	mov	r1, r7
 80181e6:	4620      	mov	r0, r4
 80181e8:	f000 fe9a 	bl	8018f20 <__mdiff>
 80181ec:	68c3      	ldr	r3, [r0, #12]
 80181ee:	4602      	mov	r2, r0
 80181f0:	bb03      	cbnz	r3, 8018234 <_dtoa_r+0x9fc>
 80181f2:	4601      	mov	r1, r0
 80181f4:	9008      	str	r0, [sp, #32]
 80181f6:	9804      	ldr	r0, [sp, #16]
 80181f8:	f000 fe78 	bl	8018eec <__mcmp>
 80181fc:	9a08      	ldr	r2, [sp, #32]
 80181fe:	4603      	mov	r3, r0
 8018200:	4611      	mov	r1, r2
 8018202:	4620      	mov	r0, r4
 8018204:	9308      	str	r3, [sp, #32]
 8018206:	f000 fc51 	bl	8018aac <_Bfree>
 801820a:	9b08      	ldr	r3, [sp, #32]
 801820c:	b9a3      	cbnz	r3, 8018238 <_dtoa_r+0xa00>
 801820e:	9a06      	ldr	r2, [sp, #24]
 8018210:	b992      	cbnz	r2, 8018238 <_dtoa_r+0xa00>
 8018212:	9a07      	ldr	r2, [sp, #28]
 8018214:	b982      	cbnz	r2, 8018238 <_dtoa_r+0xa00>
 8018216:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801821a:	d029      	beq.n	8018270 <_dtoa_r+0xa38>
 801821c:	9b00      	ldr	r3, [sp, #0]
 801821e:	2b00      	cmp	r3, #0
 8018220:	dd01      	ble.n	8018226 <_dtoa_r+0x9ee>
 8018222:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8018226:	9b05      	ldr	r3, [sp, #20]
 8018228:	1c5d      	adds	r5, r3, #1
 801822a:	f883 8000 	strb.w	r8, [r3]
 801822e:	e782      	b.n	8018136 <_dtoa_r+0x8fe>
 8018230:	4630      	mov	r0, r6
 8018232:	e7c2      	b.n	80181ba <_dtoa_r+0x982>
 8018234:	2301      	movs	r3, #1
 8018236:	e7e3      	b.n	8018200 <_dtoa_r+0x9c8>
 8018238:	9a00      	ldr	r2, [sp, #0]
 801823a:	2a00      	cmp	r2, #0
 801823c:	db04      	blt.n	8018248 <_dtoa_r+0xa10>
 801823e:	d125      	bne.n	801828c <_dtoa_r+0xa54>
 8018240:	9a06      	ldr	r2, [sp, #24]
 8018242:	bb1a      	cbnz	r2, 801828c <_dtoa_r+0xa54>
 8018244:	9a07      	ldr	r2, [sp, #28]
 8018246:	bb0a      	cbnz	r2, 801828c <_dtoa_r+0xa54>
 8018248:	2b00      	cmp	r3, #0
 801824a:	ddec      	ble.n	8018226 <_dtoa_r+0x9ee>
 801824c:	2201      	movs	r2, #1
 801824e:	9904      	ldr	r1, [sp, #16]
 8018250:	4620      	mov	r0, r4
 8018252:	f000 fdf7 	bl	8018e44 <__lshift>
 8018256:	4639      	mov	r1, r7
 8018258:	9004      	str	r0, [sp, #16]
 801825a:	f000 fe47 	bl	8018eec <__mcmp>
 801825e:	2800      	cmp	r0, #0
 8018260:	dc03      	bgt.n	801826a <_dtoa_r+0xa32>
 8018262:	d1e0      	bne.n	8018226 <_dtoa_r+0x9ee>
 8018264:	f018 0f01 	tst.w	r8, #1
 8018268:	d0dd      	beq.n	8018226 <_dtoa_r+0x9ee>
 801826a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801826e:	d1d8      	bne.n	8018222 <_dtoa_r+0x9ea>
 8018270:	9b05      	ldr	r3, [sp, #20]
 8018272:	9a05      	ldr	r2, [sp, #20]
 8018274:	1c5d      	adds	r5, r3, #1
 8018276:	2339      	movs	r3, #57	; 0x39
 8018278:	7013      	strb	r3, [r2, #0]
 801827a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801827e:	2b39      	cmp	r3, #57	; 0x39
 8018280:	f105 32ff 	add.w	r2, r5, #4294967295
 8018284:	d04f      	beq.n	8018326 <_dtoa_r+0xaee>
 8018286:	3301      	adds	r3, #1
 8018288:	7013      	strb	r3, [r2, #0]
 801828a:	e754      	b.n	8018136 <_dtoa_r+0x8fe>
 801828c:	9a05      	ldr	r2, [sp, #20]
 801828e:	2b00      	cmp	r3, #0
 8018290:	f102 0501 	add.w	r5, r2, #1
 8018294:	dd06      	ble.n	80182a4 <_dtoa_r+0xa6c>
 8018296:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801829a:	d0e9      	beq.n	8018270 <_dtoa_r+0xa38>
 801829c:	f108 0801 	add.w	r8, r8, #1
 80182a0:	9b05      	ldr	r3, [sp, #20]
 80182a2:	e7c2      	b.n	801822a <_dtoa_r+0x9f2>
 80182a4:	9a02      	ldr	r2, [sp, #8]
 80182a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80182aa:	eba5 030b 	sub.w	r3, r5, fp
 80182ae:	4293      	cmp	r3, r2
 80182b0:	d021      	beq.n	80182f6 <_dtoa_r+0xabe>
 80182b2:	2300      	movs	r3, #0
 80182b4:	220a      	movs	r2, #10
 80182b6:	9904      	ldr	r1, [sp, #16]
 80182b8:	4620      	mov	r0, r4
 80182ba:	f000 fc0e 	bl	8018ada <__multadd>
 80182be:	45b1      	cmp	r9, r6
 80182c0:	9004      	str	r0, [sp, #16]
 80182c2:	f04f 0300 	mov.w	r3, #0
 80182c6:	f04f 020a 	mov.w	r2, #10
 80182ca:	4649      	mov	r1, r9
 80182cc:	4620      	mov	r0, r4
 80182ce:	d105      	bne.n	80182dc <_dtoa_r+0xaa4>
 80182d0:	f000 fc03 	bl	8018ada <__multadd>
 80182d4:	4681      	mov	r9, r0
 80182d6:	4606      	mov	r6, r0
 80182d8:	9505      	str	r5, [sp, #20]
 80182da:	e776      	b.n	80181ca <_dtoa_r+0x992>
 80182dc:	f000 fbfd 	bl	8018ada <__multadd>
 80182e0:	4631      	mov	r1, r6
 80182e2:	4681      	mov	r9, r0
 80182e4:	2300      	movs	r3, #0
 80182e6:	220a      	movs	r2, #10
 80182e8:	4620      	mov	r0, r4
 80182ea:	f000 fbf6 	bl	8018ada <__multadd>
 80182ee:	4606      	mov	r6, r0
 80182f0:	e7f2      	b.n	80182d8 <_dtoa_r+0xaa0>
 80182f2:	f04f 0900 	mov.w	r9, #0
 80182f6:	2201      	movs	r2, #1
 80182f8:	9904      	ldr	r1, [sp, #16]
 80182fa:	4620      	mov	r0, r4
 80182fc:	f000 fda2 	bl	8018e44 <__lshift>
 8018300:	4639      	mov	r1, r7
 8018302:	9004      	str	r0, [sp, #16]
 8018304:	f000 fdf2 	bl	8018eec <__mcmp>
 8018308:	2800      	cmp	r0, #0
 801830a:	dcb6      	bgt.n	801827a <_dtoa_r+0xa42>
 801830c:	d102      	bne.n	8018314 <_dtoa_r+0xadc>
 801830e:	f018 0f01 	tst.w	r8, #1
 8018312:	d1b2      	bne.n	801827a <_dtoa_r+0xa42>
 8018314:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018318:	2b30      	cmp	r3, #48	; 0x30
 801831a:	f105 32ff 	add.w	r2, r5, #4294967295
 801831e:	f47f af0a 	bne.w	8018136 <_dtoa_r+0x8fe>
 8018322:	4615      	mov	r5, r2
 8018324:	e7f6      	b.n	8018314 <_dtoa_r+0xadc>
 8018326:	4593      	cmp	fp, r2
 8018328:	d105      	bne.n	8018336 <_dtoa_r+0xafe>
 801832a:	2331      	movs	r3, #49	; 0x31
 801832c:	f10a 0a01 	add.w	sl, sl, #1
 8018330:	f88b 3000 	strb.w	r3, [fp]
 8018334:	e6ff      	b.n	8018136 <_dtoa_r+0x8fe>
 8018336:	4615      	mov	r5, r2
 8018338:	e79f      	b.n	801827a <_dtoa_r+0xa42>
 801833a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80183a0 <_dtoa_r+0xb68>
 801833e:	e007      	b.n	8018350 <_dtoa_r+0xb18>
 8018340:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018342:	f8df b060 	ldr.w	fp, [pc, #96]	; 80183a4 <_dtoa_r+0xb6c>
 8018346:	b11b      	cbz	r3, 8018350 <_dtoa_r+0xb18>
 8018348:	f10b 0308 	add.w	r3, fp, #8
 801834c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801834e:	6013      	str	r3, [r2, #0]
 8018350:	4658      	mov	r0, fp
 8018352:	b017      	add	sp, #92	; 0x5c
 8018354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018358:	9b06      	ldr	r3, [sp, #24]
 801835a:	2b01      	cmp	r3, #1
 801835c:	f77f ae35 	ble.w	8017fca <_dtoa_r+0x792>
 8018360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018362:	9307      	str	r3, [sp, #28]
 8018364:	e649      	b.n	8017ffa <_dtoa_r+0x7c2>
 8018366:	9b02      	ldr	r3, [sp, #8]
 8018368:	2b00      	cmp	r3, #0
 801836a:	dc03      	bgt.n	8018374 <_dtoa_r+0xb3c>
 801836c:	9b06      	ldr	r3, [sp, #24]
 801836e:	2b02      	cmp	r3, #2
 8018370:	f73f aecc 	bgt.w	801810c <_dtoa_r+0x8d4>
 8018374:	465d      	mov	r5, fp
 8018376:	4639      	mov	r1, r7
 8018378:	9804      	ldr	r0, [sp, #16]
 801837a:	f7ff f9d1 	bl	8017720 <quorem>
 801837e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018382:	f805 8b01 	strb.w	r8, [r5], #1
 8018386:	9a02      	ldr	r2, [sp, #8]
 8018388:	eba5 030b 	sub.w	r3, r5, fp
 801838c:	429a      	cmp	r2, r3
 801838e:	ddb0      	ble.n	80182f2 <_dtoa_r+0xaba>
 8018390:	2300      	movs	r3, #0
 8018392:	220a      	movs	r2, #10
 8018394:	9904      	ldr	r1, [sp, #16]
 8018396:	4620      	mov	r0, r4
 8018398:	f000 fb9f 	bl	8018ada <__multadd>
 801839c:	9004      	str	r0, [sp, #16]
 801839e:	e7ea      	b.n	8018376 <_dtoa_r+0xb3e>
 80183a0:	0801bf34 	.word	0x0801bf34
 80183a4:	0801bfb0 	.word	0x0801bfb0

080183a8 <rshift>:
 80183a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183aa:	6906      	ldr	r6, [r0, #16]
 80183ac:	114b      	asrs	r3, r1, #5
 80183ae:	429e      	cmp	r6, r3
 80183b0:	f100 0414 	add.w	r4, r0, #20
 80183b4:	dd30      	ble.n	8018418 <rshift+0x70>
 80183b6:	f011 011f 	ands.w	r1, r1, #31
 80183ba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80183be:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80183c2:	d108      	bne.n	80183d6 <rshift+0x2e>
 80183c4:	4621      	mov	r1, r4
 80183c6:	42b2      	cmp	r2, r6
 80183c8:	460b      	mov	r3, r1
 80183ca:	d211      	bcs.n	80183f0 <rshift+0x48>
 80183cc:	f852 3b04 	ldr.w	r3, [r2], #4
 80183d0:	f841 3b04 	str.w	r3, [r1], #4
 80183d4:	e7f7      	b.n	80183c6 <rshift+0x1e>
 80183d6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80183da:	f1c1 0c20 	rsb	ip, r1, #32
 80183de:	40cd      	lsrs	r5, r1
 80183e0:	3204      	adds	r2, #4
 80183e2:	4623      	mov	r3, r4
 80183e4:	42b2      	cmp	r2, r6
 80183e6:	4617      	mov	r7, r2
 80183e8:	d30c      	bcc.n	8018404 <rshift+0x5c>
 80183ea:	601d      	str	r5, [r3, #0]
 80183ec:	b105      	cbz	r5, 80183f0 <rshift+0x48>
 80183ee:	3304      	adds	r3, #4
 80183f0:	1b1a      	subs	r2, r3, r4
 80183f2:	42a3      	cmp	r3, r4
 80183f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80183f8:	bf08      	it	eq
 80183fa:	2300      	moveq	r3, #0
 80183fc:	6102      	str	r2, [r0, #16]
 80183fe:	bf08      	it	eq
 8018400:	6143      	streq	r3, [r0, #20]
 8018402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018404:	683f      	ldr	r7, [r7, #0]
 8018406:	fa07 f70c 	lsl.w	r7, r7, ip
 801840a:	433d      	orrs	r5, r7
 801840c:	f843 5b04 	str.w	r5, [r3], #4
 8018410:	f852 5b04 	ldr.w	r5, [r2], #4
 8018414:	40cd      	lsrs	r5, r1
 8018416:	e7e5      	b.n	80183e4 <rshift+0x3c>
 8018418:	4623      	mov	r3, r4
 801841a:	e7e9      	b.n	80183f0 <rshift+0x48>

0801841c <__hexdig_fun>:
 801841c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018420:	2b09      	cmp	r3, #9
 8018422:	d802      	bhi.n	801842a <__hexdig_fun+0xe>
 8018424:	3820      	subs	r0, #32
 8018426:	b2c0      	uxtb	r0, r0
 8018428:	4770      	bx	lr
 801842a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801842e:	2b05      	cmp	r3, #5
 8018430:	d801      	bhi.n	8018436 <__hexdig_fun+0x1a>
 8018432:	3847      	subs	r0, #71	; 0x47
 8018434:	e7f7      	b.n	8018426 <__hexdig_fun+0xa>
 8018436:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801843a:	2b05      	cmp	r3, #5
 801843c:	d801      	bhi.n	8018442 <__hexdig_fun+0x26>
 801843e:	3827      	subs	r0, #39	; 0x27
 8018440:	e7f1      	b.n	8018426 <__hexdig_fun+0xa>
 8018442:	2000      	movs	r0, #0
 8018444:	4770      	bx	lr

08018446 <__gethex>:
 8018446:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801844a:	b08b      	sub	sp, #44	; 0x2c
 801844c:	468a      	mov	sl, r1
 801844e:	9002      	str	r0, [sp, #8]
 8018450:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018452:	9306      	str	r3, [sp, #24]
 8018454:	4690      	mov	r8, r2
 8018456:	f000 fad0 	bl	80189fa <__localeconv_l>
 801845a:	6803      	ldr	r3, [r0, #0]
 801845c:	9303      	str	r3, [sp, #12]
 801845e:	4618      	mov	r0, r3
 8018460:	f7e7 fec0 	bl	80001e4 <strlen>
 8018464:	9b03      	ldr	r3, [sp, #12]
 8018466:	9001      	str	r0, [sp, #4]
 8018468:	4403      	add	r3, r0
 801846a:	f04f 0b00 	mov.w	fp, #0
 801846e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018472:	9307      	str	r3, [sp, #28]
 8018474:	f8da 3000 	ldr.w	r3, [sl]
 8018478:	3302      	adds	r3, #2
 801847a:	461f      	mov	r7, r3
 801847c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018480:	2830      	cmp	r0, #48	; 0x30
 8018482:	d06c      	beq.n	801855e <__gethex+0x118>
 8018484:	f7ff ffca 	bl	801841c <__hexdig_fun>
 8018488:	4604      	mov	r4, r0
 801848a:	2800      	cmp	r0, #0
 801848c:	d16a      	bne.n	8018564 <__gethex+0x11e>
 801848e:	9a01      	ldr	r2, [sp, #4]
 8018490:	9903      	ldr	r1, [sp, #12]
 8018492:	4638      	mov	r0, r7
 8018494:	f7fe fa42 	bl	801691c <strncmp>
 8018498:	2800      	cmp	r0, #0
 801849a:	d166      	bne.n	801856a <__gethex+0x124>
 801849c:	9b01      	ldr	r3, [sp, #4]
 801849e:	5cf8      	ldrb	r0, [r7, r3]
 80184a0:	18fe      	adds	r6, r7, r3
 80184a2:	f7ff ffbb 	bl	801841c <__hexdig_fun>
 80184a6:	2800      	cmp	r0, #0
 80184a8:	d062      	beq.n	8018570 <__gethex+0x12a>
 80184aa:	4633      	mov	r3, r6
 80184ac:	7818      	ldrb	r0, [r3, #0]
 80184ae:	2830      	cmp	r0, #48	; 0x30
 80184b0:	461f      	mov	r7, r3
 80184b2:	f103 0301 	add.w	r3, r3, #1
 80184b6:	d0f9      	beq.n	80184ac <__gethex+0x66>
 80184b8:	f7ff ffb0 	bl	801841c <__hexdig_fun>
 80184bc:	fab0 f580 	clz	r5, r0
 80184c0:	096d      	lsrs	r5, r5, #5
 80184c2:	4634      	mov	r4, r6
 80184c4:	f04f 0b01 	mov.w	fp, #1
 80184c8:	463a      	mov	r2, r7
 80184ca:	4616      	mov	r6, r2
 80184cc:	3201      	adds	r2, #1
 80184ce:	7830      	ldrb	r0, [r6, #0]
 80184d0:	f7ff ffa4 	bl	801841c <__hexdig_fun>
 80184d4:	2800      	cmp	r0, #0
 80184d6:	d1f8      	bne.n	80184ca <__gethex+0x84>
 80184d8:	9a01      	ldr	r2, [sp, #4]
 80184da:	9903      	ldr	r1, [sp, #12]
 80184dc:	4630      	mov	r0, r6
 80184de:	f7fe fa1d 	bl	801691c <strncmp>
 80184e2:	b950      	cbnz	r0, 80184fa <__gethex+0xb4>
 80184e4:	b954      	cbnz	r4, 80184fc <__gethex+0xb6>
 80184e6:	9b01      	ldr	r3, [sp, #4]
 80184e8:	18f4      	adds	r4, r6, r3
 80184ea:	4622      	mov	r2, r4
 80184ec:	4616      	mov	r6, r2
 80184ee:	3201      	adds	r2, #1
 80184f0:	7830      	ldrb	r0, [r6, #0]
 80184f2:	f7ff ff93 	bl	801841c <__hexdig_fun>
 80184f6:	2800      	cmp	r0, #0
 80184f8:	d1f8      	bne.n	80184ec <__gethex+0xa6>
 80184fa:	b10c      	cbz	r4, 8018500 <__gethex+0xba>
 80184fc:	1ba4      	subs	r4, r4, r6
 80184fe:	00a4      	lsls	r4, r4, #2
 8018500:	7833      	ldrb	r3, [r6, #0]
 8018502:	2b50      	cmp	r3, #80	; 0x50
 8018504:	d001      	beq.n	801850a <__gethex+0xc4>
 8018506:	2b70      	cmp	r3, #112	; 0x70
 8018508:	d140      	bne.n	801858c <__gethex+0x146>
 801850a:	7873      	ldrb	r3, [r6, #1]
 801850c:	2b2b      	cmp	r3, #43	; 0x2b
 801850e:	d031      	beq.n	8018574 <__gethex+0x12e>
 8018510:	2b2d      	cmp	r3, #45	; 0x2d
 8018512:	d033      	beq.n	801857c <__gethex+0x136>
 8018514:	1c71      	adds	r1, r6, #1
 8018516:	f04f 0900 	mov.w	r9, #0
 801851a:	7808      	ldrb	r0, [r1, #0]
 801851c:	f7ff ff7e 	bl	801841c <__hexdig_fun>
 8018520:	1e43      	subs	r3, r0, #1
 8018522:	b2db      	uxtb	r3, r3
 8018524:	2b18      	cmp	r3, #24
 8018526:	d831      	bhi.n	801858c <__gethex+0x146>
 8018528:	f1a0 0210 	sub.w	r2, r0, #16
 801852c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018530:	f7ff ff74 	bl	801841c <__hexdig_fun>
 8018534:	1e43      	subs	r3, r0, #1
 8018536:	b2db      	uxtb	r3, r3
 8018538:	2b18      	cmp	r3, #24
 801853a:	d922      	bls.n	8018582 <__gethex+0x13c>
 801853c:	f1b9 0f00 	cmp.w	r9, #0
 8018540:	d000      	beq.n	8018544 <__gethex+0xfe>
 8018542:	4252      	negs	r2, r2
 8018544:	4414      	add	r4, r2
 8018546:	f8ca 1000 	str.w	r1, [sl]
 801854a:	b30d      	cbz	r5, 8018590 <__gethex+0x14a>
 801854c:	f1bb 0f00 	cmp.w	fp, #0
 8018550:	bf0c      	ite	eq
 8018552:	2706      	moveq	r7, #6
 8018554:	2700      	movne	r7, #0
 8018556:	4638      	mov	r0, r7
 8018558:	b00b      	add	sp, #44	; 0x2c
 801855a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801855e:	f10b 0b01 	add.w	fp, fp, #1
 8018562:	e78a      	b.n	801847a <__gethex+0x34>
 8018564:	2500      	movs	r5, #0
 8018566:	462c      	mov	r4, r5
 8018568:	e7ae      	b.n	80184c8 <__gethex+0x82>
 801856a:	463e      	mov	r6, r7
 801856c:	2501      	movs	r5, #1
 801856e:	e7c7      	b.n	8018500 <__gethex+0xba>
 8018570:	4604      	mov	r4, r0
 8018572:	e7fb      	b.n	801856c <__gethex+0x126>
 8018574:	f04f 0900 	mov.w	r9, #0
 8018578:	1cb1      	adds	r1, r6, #2
 801857a:	e7ce      	b.n	801851a <__gethex+0xd4>
 801857c:	f04f 0901 	mov.w	r9, #1
 8018580:	e7fa      	b.n	8018578 <__gethex+0x132>
 8018582:	230a      	movs	r3, #10
 8018584:	fb03 0202 	mla	r2, r3, r2, r0
 8018588:	3a10      	subs	r2, #16
 801858a:	e7cf      	b.n	801852c <__gethex+0xe6>
 801858c:	4631      	mov	r1, r6
 801858e:	e7da      	b.n	8018546 <__gethex+0x100>
 8018590:	1bf3      	subs	r3, r6, r7
 8018592:	3b01      	subs	r3, #1
 8018594:	4629      	mov	r1, r5
 8018596:	2b07      	cmp	r3, #7
 8018598:	dc49      	bgt.n	801862e <__gethex+0x1e8>
 801859a:	9802      	ldr	r0, [sp, #8]
 801859c:	f000 fa52 	bl	8018a44 <_Balloc>
 80185a0:	9b01      	ldr	r3, [sp, #4]
 80185a2:	f100 0914 	add.w	r9, r0, #20
 80185a6:	f04f 0b00 	mov.w	fp, #0
 80185aa:	f1c3 0301 	rsb	r3, r3, #1
 80185ae:	4605      	mov	r5, r0
 80185b0:	f8cd 9010 	str.w	r9, [sp, #16]
 80185b4:	46da      	mov	sl, fp
 80185b6:	9308      	str	r3, [sp, #32]
 80185b8:	42b7      	cmp	r7, r6
 80185ba:	d33b      	bcc.n	8018634 <__gethex+0x1ee>
 80185bc:	9804      	ldr	r0, [sp, #16]
 80185be:	f840 ab04 	str.w	sl, [r0], #4
 80185c2:	eba0 0009 	sub.w	r0, r0, r9
 80185c6:	1080      	asrs	r0, r0, #2
 80185c8:	6128      	str	r0, [r5, #16]
 80185ca:	0147      	lsls	r7, r0, #5
 80185cc:	4650      	mov	r0, sl
 80185ce:	f000 fafd 	bl	8018bcc <__hi0bits>
 80185d2:	f8d8 6000 	ldr.w	r6, [r8]
 80185d6:	1a3f      	subs	r7, r7, r0
 80185d8:	42b7      	cmp	r7, r6
 80185da:	dd64      	ble.n	80186a6 <__gethex+0x260>
 80185dc:	1bbf      	subs	r7, r7, r6
 80185de:	4639      	mov	r1, r7
 80185e0:	4628      	mov	r0, r5
 80185e2:	f000 fe0d 	bl	8019200 <__any_on>
 80185e6:	4682      	mov	sl, r0
 80185e8:	b178      	cbz	r0, 801860a <__gethex+0x1c4>
 80185ea:	1e7b      	subs	r3, r7, #1
 80185ec:	1159      	asrs	r1, r3, #5
 80185ee:	f003 021f 	and.w	r2, r3, #31
 80185f2:	f04f 0a01 	mov.w	sl, #1
 80185f6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80185fa:	fa0a f202 	lsl.w	r2, sl, r2
 80185fe:	420a      	tst	r2, r1
 8018600:	d003      	beq.n	801860a <__gethex+0x1c4>
 8018602:	4553      	cmp	r3, sl
 8018604:	dc46      	bgt.n	8018694 <__gethex+0x24e>
 8018606:	f04f 0a02 	mov.w	sl, #2
 801860a:	4639      	mov	r1, r7
 801860c:	4628      	mov	r0, r5
 801860e:	f7ff fecb 	bl	80183a8 <rshift>
 8018612:	443c      	add	r4, r7
 8018614:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018618:	42a3      	cmp	r3, r4
 801861a:	da52      	bge.n	80186c2 <__gethex+0x27c>
 801861c:	4629      	mov	r1, r5
 801861e:	9802      	ldr	r0, [sp, #8]
 8018620:	f000 fa44 	bl	8018aac <_Bfree>
 8018624:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018626:	2300      	movs	r3, #0
 8018628:	6013      	str	r3, [r2, #0]
 801862a:	27a3      	movs	r7, #163	; 0xa3
 801862c:	e793      	b.n	8018556 <__gethex+0x110>
 801862e:	3101      	adds	r1, #1
 8018630:	105b      	asrs	r3, r3, #1
 8018632:	e7b0      	b.n	8018596 <__gethex+0x150>
 8018634:	1e73      	subs	r3, r6, #1
 8018636:	9305      	str	r3, [sp, #20]
 8018638:	9a07      	ldr	r2, [sp, #28]
 801863a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801863e:	4293      	cmp	r3, r2
 8018640:	d018      	beq.n	8018674 <__gethex+0x22e>
 8018642:	f1bb 0f20 	cmp.w	fp, #32
 8018646:	d107      	bne.n	8018658 <__gethex+0x212>
 8018648:	9b04      	ldr	r3, [sp, #16]
 801864a:	f8c3 a000 	str.w	sl, [r3]
 801864e:	3304      	adds	r3, #4
 8018650:	f04f 0a00 	mov.w	sl, #0
 8018654:	9304      	str	r3, [sp, #16]
 8018656:	46d3      	mov	fp, sl
 8018658:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801865c:	f7ff fede 	bl	801841c <__hexdig_fun>
 8018660:	f000 000f 	and.w	r0, r0, #15
 8018664:	fa00 f00b 	lsl.w	r0, r0, fp
 8018668:	ea4a 0a00 	orr.w	sl, sl, r0
 801866c:	f10b 0b04 	add.w	fp, fp, #4
 8018670:	9b05      	ldr	r3, [sp, #20]
 8018672:	e00d      	b.n	8018690 <__gethex+0x24a>
 8018674:	9b05      	ldr	r3, [sp, #20]
 8018676:	9a08      	ldr	r2, [sp, #32]
 8018678:	4413      	add	r3, r2
 801867a:	42bb      	cmp	r3, r7
 801867c:	d3e1      	bcc.n	8018642 <__gethex+0x1fc>
 801867e:	4618      	mov	r0, r3
 8018680:	9a01      	ldr	r2, [sp, #4]
 8018682:	9903      	ldr	r1, [sp, #12]
 8018684:	9309      	str	r3, [sp, #36]	; 0x24
 8018686:	f7fe f949 	bl	801691c <strncmp>
 801868a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801868c:	2800      	cmp	r0, #0
 801868e:	d1d8      	bne.n	8018642 <__gethex+0x1fc>
 8018690:	461e      	mov	r6, r3
 8018692:	e791      	b.n	80185b8 <__gethex+0x172>
 8018694:	1eb9      	subs	r1, r7, #2
 8018696:	4628      	mov	r0, r5
 8018698:	f000 fdb2 	bl	8019200 <__any_on>
 801869c:	2800      	cmp	r0, #0
 801869e:	d0b2      	beq.n	8018606 <__gethex+0x1c0>
 80186a0:	f04f 0a03 	mov.w	sl, #3
 80186a4:	e7b1      	b.n	801860a <__gethex+0x1c4>
 80186a6:	da09      	bge.n	80186bc <__gethex+0x276>
 80186a8:	1bf7      	subs	r7, r6, r7
 80186aa:	4629      	mov	r1, r5
 80186ac:	463a      	mov	r2, r7
 80186ae:	9802      	ldr	r0, [sp, #8]
 80186b0:	f000 fbc8 	bl	8018e44 <__lshift>
 80186b4:	1be4      	subs	r4, r4, r7
 80186b6:	4605      	mov	r5, r0
 80186b8:	f100 0914 	add.w	r9, r0, #20
 80186bc:	f04f 0a00 	mov.w	sl, #0
 80186c0:	e7a8      	b.n	8018614 <__gethex+0x1ce>
 80186c2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80186c6:	42a0      	cmp	r0, r4
 80186c8:	dd6a      	ble.n	80187a0 <__gethex+0x35a>
 80186ca:	1b04      	subs	r4, r0, r4
 80186cc:	42a6      	cmp	r6, r4
 80186ce:	dc2e      	bgt.n	801872e <__gethex+0x2e8>
 80186d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80186d4:	2b02      	cmp	r3, #2
 80186d6:	d022      	beq.n	801871e <__gethex+0x2d8>
 80186d8:	2b03      	cmp	r3, #3
 80186da:	d024      	beq.n	8018726 <__gethex+0x2e0>
 80186dc:	2b01      	cmp	r3, #1
 80186de:	d115      	bne.n	801870c <__gethex+0x2c6>
 80186e0:	42a6      	cmp	r6, r4
 80186e2:	d113      	bne.n	801870c <__gethex+0x2c6>
 80186e4:	2e01      	cmp	r6, #1
 80186e6:	dc0b      	bgt.n	8018700 <__gethex+0x2ba>
 80186e8:	9a06      	ldr	r2, [sp, #24]
 80186ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80186ee:	6013      	str	r3, [r2, #0]
 80186f0:	2301      	movs	r3, #1
 80186f2:	612b      	str	r3, [r5, #16]
 80186f4:	f8c9 3000 	str.w	r3, [r9]
 80186f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80186fa:	2762      	movs	r7, #98	; 0x62
 80186fc:	601d      	str	r5, [r3, #0]
 80186fe:	e72a      	b.n	8018556 <__gethex+0x110>
 8018700:	1e71      	subs	r1, r6, #1
 8018702:	4628      	mov	r0, r5
 8018704:	f000 fd7c 	bl	8019200 <__any_on>
 8018708:	2800      	cmp	r0, #0
 801870a:	d1ed      	bne.n	80186e8 <__gethex+0x2a2>
 801870c:	4629      	mov	r1, r5
 801870e:	9802      	ldr	r0, [sp, #8]
 8018710:	f000 f9cc 	bl	8018aac <_Bfree>
 8018714:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018716:	2300      	movs	r3, #0
 8018718:	6013      	str	r3, [r2, #0]
 801871a:	2750      	movs	r7, #80	; 0x50
 801871c:	e71b      	b.n	8018556 <__gethex+0x110>
 801871e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018720:	2b00      	cmp	r3, #0
 8018722:	d0e1      	beq.n	80186e8 <__gethex+0x2a2>
 8018724:	e7f2      	b.n	801870c <__gethex+0x2c6>
 8018726:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018728:	2b00      	cmp	r3, #0
 801872a:	d1dd      	bne.n	80186e8 <__gethex+0x2a2>
 801872c:	e7ee      	b.n	801870c <__gethex+0x2c6>
 801872e:	1e67      	subs	r7, r4, #1
 8018730:	f1ba 0f00 	cmp.w	sl, #0
 8018734:	d131      	bne.n	801879a <__gethex+0x354>
 8018736:	b127      	cbz	r7, 8018742 <__gethex+0x2fc>
 8018738:	4639      	mov	r1, r7
 801873a:	4628      	mov	r0, r5
 801873c:	f000 fd60 	bl	8019200 <__any_on>
 8018740:	4682      	mov	sl, r0
 8018742:	117a      	asrs	r2, r7, #5
 8018744:	2301      	movs	r3, #1
 8018746:	f007 071f 	and.w	r7, r7, #31
 801874a:	fa03 f707 	lsl.w	r7, r3, r7
 801874e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018752:	4621      	mov	r1, r4
 8018754:	421f      	tst	r7, r3
 8018756:	4628      	mov	r0, r5
 8018758:	bf18      	it	ne
 801875a:	f04a 0a02 	orrne.w	sl, sl, #2
 801875e:	1b36      	subs	r6, r6, r4
 8018760:	f7ff fe22 	bl	80183a8 <rshift>
 8018764:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018768:	2702      	movs	r7, #2
 801876a:	f1ba 0f00 	cmp.w	sl, #0
 801876e:	d048      	beq.n	8018802 <__gethex+0x3bc>
 8018770:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018774:	2b02      	cmp	r3, #2
 8018776:	d015      	beq.n	80187a4 <__gethex+0x35e>
 8018778:	2b03      	cmp	r3, #3
 801877a:	d017      	beq.n	80187ac <__gethex+0x366>
 801877c:	2b01      	cmp	r3, #1
 801877e:	d109      	bne.n	8018794 <__gethex+0x34e>
 8018780:	f01a 0f02 	tst.w	sl, #2
 8018784:	d006      	beq.n	8018794 <__gethex+0x34e>
 8018786:	f8d9 3000 	ldr.w	r3, [r9]
 801878a:	ea4a 0a03 	orr.w	sl, sl, r3
 801878e:	f01a 0f01 	tst.w	sl, #1
 8018792:	d10e      	bne.n	80187b2 <__gethex+0x36c>
 8018794:	f047 0710 	orr.w	r7, r7, #16
 8018798:	e033      	b.n	8018802 <__gethex+0x3bc>
 801879a:	f04f 0a01 	mov.w	sl, #1
 801879e:	e7d0      	b.n	8018742 <__gethex+0x2fc>
 80187a0:	2701      	movs	r7, #1
 80187a2:	e7e2      	b.n	801876a <__gethex+0x324>
 80187a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80187a6:	f1c3 0301 	rsb	r3, r3, #1
 80187aa:	9315      	str	r3, [sp, #84]	; 0x54
 80187ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d0f0      	beq.n	8018794 <__gethex+0x34e>
 80187b2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80187b6:	f105 0314 	add.w	r3, r5, #20
 80187ba:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80187be:	eb03 010a 	add.w	r1, r3, sl
 80187c2:	f04f 0c00 	mov.w	ip, #0
 80187c6:	4618      	mov	r0, r3
 80187c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80187cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80187d0:	d01c      	beq.n	801880c <__gethex+0x3c6>
 80187d2:	3201      	adds	r2, #1
 80187d4:	6002      	str	r2, [r0, #0]
 80187d6:	2f02      	cmp	r7, #2
 80187d8:	f105 0314 	add.w	r3, r5, #20
 80187dc:	d138      	bne.n	8018850 <__gethex+0x40a>
 80187de:	f8d8 2000 	ldr.w	r2, [r8]
 80187e2:	3a01      	subs	r2, #1
 80187e4:	42b2      	cmp	r2, r6
 80187e6:	d10a      	bne.n	80187fe <__gethex+0x3b8>
 80187e8:	1171      	asrs	r1, r6, #5
 80187ea:	2201      	movs	r2, #1
 80187ec:	f006 061f 	and.w	r6, r6, #31
 80187f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80187f4:	fa02 f606 	lsl.w	r6, r2, r6
 80187f8:	421e      	tst	r6, r3
 80187fa:	bf18      	it	ne
 80187fc:	4617      	movne	r7, r2
 80187fe:	f047 0720 	orr.w	r7, r7, #32
 8018802:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018804:	601d      	str	r5, [r3, #0]
 8018806:	9b06      	ldr	r3, [sp, #24]
 8018808:	601c      	str	r4, [r3, #0]
 801880a:	e6a4      	b.n	8018556 <__gethex+0x110>
 801880c:	4299      	cmp	r1, r3
 801880e:	f843 cc04 	str.w	ip, [r3, #-4]
 8018812:	d8d8      	bhi.n	80187c6 <__gethex+0x380>
 8018814:	68ab      	ldr	r3, [r5, #8]
 8018816:	4599      	cmp	r9, r3
 8018818:	db12      	blt.n	8018840 <__gethex+0x3fa>
 801881a:	6869      	ldr	r1, [r5, #4]
 801881c:	9802      	ldr	r0, [sp, #8]
 801881e:	3101      	adds	r1, #1
 8018820:	f000 f910 	bl	8018a44 <_Balloc>
 8018824:	692a      	ldr	r2, [r5, #16]
 8018826:	3202      	adds	r2, #2
 8018828:	f105 010c 	add.w	r1, r5, #12
 801882c:	4683      	mov	fp, r0
 801882e:	0092      	lsls	r2, r2, #2
 8018830:	300c      	adds	r0, #12
 8018832:	f7fd f91f 	bl	8015a74 <memcpy>
 8018836:	4629      	mov	r1, r5
 8018838:	9802      	ldr	r0, [sp, #8]
 801883a:	f000 f937 	bl	8018aac <_Bfree>
 801883e:	465d      	mov	r5, fp
 8018840:	692b      	ldr	r3, [r5, #16]
 8018842:	1c5a      	adds	r2, r3, #1
 8018844:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018848:	612a      	str	r2, [r5, #16]
 801884a:	2201      	movs	r2, #1
 801884c:	615a      	str	r2, [r3, #20]
 801884e:	e7c2      	b.n	80187d6 <__gethex+0x390>
 8018850:	692a      	ldr	r2, [r5, #16]
 8018852:	454a      	cmp	r2, r9
 8018854:	dd0b      	ble.n	801886e <__gethex+0x428>
 8018856:	2101      	movs	r1, #1
 8018858:	4628      	mov	r0, r5
 801885a:	f7ff fda5 	bl	80183a8 <rshift>
 801885e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018862:	3401      	adds	r4, #1
 8018864:	42a3      	cmp	r3, r4
 8018866:	f6ff aed9 	blt.w	801861c <__gethex+0x1d6>
 801886a:	2701      	movs	r7, #1
 801886c:	e7c7      	b.n	80187fe <__gethex+0x3b8>
 801886e:	f016 061f 	ands.w	r6, r6, #31
 8018872:	d0fa      	beq.n	801886a <__gethex+0x424>
 8018874:	449a      	add	sl, r3
 8018876:	f1c6 0620 	rsb	r6, r6, #32
 801887a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801887e:	f000 f9a5 	bl	8018bcc <__hi0bits>
 8018882:	42b0      	cmp	r0, r6
 8018884:	dbe7      	blt.n	8018856 <__gethex+0x410>
 8018886:	e7f0      	b.n	801886a <__gethex+0x424>

08018888 <L_shift>:
 8018888:	f1c2 0208 	rsb	r2, r2, #8
 801888c:	0092      	lsls	r2, r2, #2
 801888e:	b570      	push	{r4, r5, r6, lr}
 8018890:	f1c2 0620 	rsb	r6, r2, #32
 8018894:	6843      	ldr	r3, [r0, #4]
 8018896:	6804      	ldr	r4, [r0, #0]
 8018898:	fa03 f506 	lsl.w	r5, r3, r6
 801889c:	432c      	orrs	r4, r5
 801889e:	40d3      	lsrs	r3, r2
 80188a0:	6004      	str	r4, [r0, #0]
 80188a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80188a6:	4288      	cmp	r0, r1
 80188a8:	d3f4      	bcc.n	8018894 <L_shift+0xc>
 80188aa:	bd70      	pop	{r4, r5, r6, pc}

080188ac <__match>:
 80188ac:	b530      	push	{r4, r5, lr}
 80188ae:	6803      	ldr	r3, [r0, #0]
 80188b0:	3301      	adds	r3, #1
 80188b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80188b6:	b914      	cbnz	r4, 80188be <__match+0x12>
 80188b8:	6003      	str	r3, [r0, #0]
 80188ba:	2001      	movs	r0, #1
 80188bc:	bd30      	pop	{r4, r5, pc}
 80188be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80188c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80188c6:	2d19      	cmp	r5, #25
 80188c8:	bf98      	it	ls
 80188ca:	3220      	addls	r2, #32
 80188cc:	42a2      	cmp	r2, r4
 80188ce:	d0f0      	beq.n	80188b2 <__match+0x6>
 80188d0:	2000      	movs	r0, #0
 80188d2:	e7f3      	b.n	80188bc <__match+0x10>

080188d4 <__hexnan>:
 80188d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188d8:	680b      	ldr	r3, [r1, #0]
 80188da:	6801      	ldr	r1, [r0, #0]
 80188dc:	115f      	asrs	r7, r3, #5
 80188de:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80188e2:	f013 031f 	ands.w	r3, r3, #31
 80188e6:	b087      	sub	sp, #28
 80188e8:	bf18      	it	ne
 80188ea:	3704      	addne	r7, #4
 80188ec:	2500      	movs	r5, #0
 80188ee:	1f3e      	subs	r6, r7, #4
 80188f0:	4682      	mov	sl, r0
 80188f2:	4690      	mov	r8, r2
 80188f4:	9301      	str	r3, [sp, #4]
 80188f6:	f847 5c04 	str.w	r5, [r7, #-4]
 80188fa:	46b1      	mov	r9, r6
 80188fc:	4634      	mov	r4, r6
 80188fe:	9502      	str	r5, [sp, #8]
 8018900:	46ab      	mov	fp, r5
 8018902:	784a      	ldrb	r2, [r1, #1]
 8018904:	1c4b      	adds	r3, r1, #1
 8018906:	9303      	str	r3, [sp, #12]
 8018908:	b342      	cbz	r2, 801895c <__hexnan+0x88>
 801890a:	4610      	mov	r0, r2
 801890c:	9105      	str	r1, [sp, #20]
 801890e:	9204      	str	r2, [sp, #16]
 8018910:	f7ff fd84 	bl	801841c <__hexdig_fun>
 8018914:	2800      	cmp	r0, #0
 8018916:	d143      	bne.n	80189a0 <__hexnan+0xcc>
 8018918:	9a04      	ldr	r2, [sp, #16]
 801891a:	9905      	ldr	r1, [sp, #20]
 801891c:	2a20      	cmp	r2, #32
 801891e:	d818      	bhi.n	8018952 <__hexnan+0x7e>
 8018920:	9b02      	ldr	r3, [sp, #8]
 8018922:	459b      	cmp	fp, r3
 8018924:	dd13      	ble.n	801894e <__hexnan+0x7a>
 8018926:	454c      	cmp	r4, r9
 8018928:	d206      	bcs.n	8018938 <__hexnan+0x64>
 801892a:	2d07      	cmp	r5, #7
 801892c:	dc04      	bgt.n	8018938 <__hexnan+0x64>
 801892e:	462a      	mov	r2, r5
 8018930:	4649      	mov	r1, r9
 8018932:	4620      	mov	r0, r4
 8018934:	f7ff ffa8 	bl	8018888 <L_shift>
 8018938:	4544      	cmp	r4, r8
 801893a:	d944      	bls.n	80189c6 <__hexnan+0xf2>
 801893c:	2300      	movs	r3, #0
 801893e:	f1a4 0904 	sub.w	r9, r4, #4
 8018942:	f844 3c04 	str.w	r3, [r4, #-4]
 8018946:	f8cd b008 	str.w	fp, [sp, #8]
 801894a:	464c      	mov	r4, r9
 801894c:	461d      	mov	r5, r3
 801894e:	9903      	ldr	r1, [sp, #12]
 8018950:	e7d7      	b.n	8018902 <__hexnan+0x2e>
 8018952:	2a29      	cmp	r2, #41	; 0x29
 8018954:	d14a      	bne.n	80189ec <__hexnan+0x118>
 8018956:	3102      	adds	r1, #2
 8018958:	f8ca 1000 	str.w	r1, [sl]
 801895c:	f1bb 0f00 	cmp.w	fp, #0
 8018960:	d044      	beq.n	80189ec <__hexnan+0x118>
 8018962:	454c      	cmp	r4, r9
 8018964:	d206      	bcs.n	8018974 <__hexnan+0xa0>
 8018966:	2d07      	cmp	r5, #7
 8018968:	dc04      	bgt.n	8018974 <__hexnan+0xa0>
 801896a:	462a      	mov	r2, r5
 801896c:	4649      	mov	r1, r9
 801896e:	4620      	mov	r0, r4
 8018970:	f7ff ff8a 	bl	8018888 <L_shift>
 8018974:	4544      	cmp	r4, r8
 8018976:	d928      	bls.n	80189ca <__hexnan+0xf6>
 8018978:	4643      	mov	r3, r8
 801897a:	f854 2b04 	ldr.w	r2, [r4], #4
 801897e:	f843 2b04 	str.w	r2, [r3], #4
 8018982:	42a6      	cmp	r6, r4
 8018984:	d2f9      	bcs.n	801897a <__hexnan+0xa6>
 8018986:	2200      	movs	r2, #0
 8018988:	f843 2b04 	str.w	r2, [r3], #4
 801898c:	429e      	cmp	r6, r3
 801898e:	d2fb      	bcs.n	8018988 <__hexnan+0xb4>
 8018990:	6833      	ldr	r3, [r6, #0]
 8018992:	b91b      	cbnz	r3, 801899c <__hexnan+0xc8>
 8018994:	4546      	cmp	r6, r8
 8018996:	d127      	bne.n	80189e8 <__hexnan+0x114>
 8018998:	2301      	movs	r3, #1
 801899a:	6033      	str	r3, [r6, #0]
 801899c:	2005      	movs	r0, #5
 801899e:	e026      	b.n	80189ee <__hexnan+0x11a>
 80189a0:	3501      	adds	r5, #1
 80189a2:	2d08      	cmp	r5, #8
 80189a4:	f10b 0b01 	add.w	fp, fp, #1
 80189a8:	dd06      	ble.n	80189b8 <__hexnan+0xe4>
 80189aa:	4544      	cmp	r4, r8
 80189ac:	d9cf      	bls.n	801894e <__hexnan+0x7a>
 80189ae:	2300      	movs	r3, #0
 80189b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80189b4:	2501      	movs	r5, #1
 80189b6:	3c04      	subs	r4, #4
 80189b8:	6822      	ldr	r2, [r4, #0]
 80189ba:	f000 000f 	and.w	r0, r0, #15
 80189be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80189c2:	6020      	str	r0, [r4, #0]
 80189c4:	e7c3      	b.n	801894e <__hexnan+0x7a>
 80189c6:	2508      	movs	r5, #8
 80189c8:	e7c1      	b.n	801894e <__hexnan+0x7a>
 80189ca:	9b01      	ldr	r3, [sp, #4]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d0df      	beq.n	8018990 <__hexnan+0xbc>
 80189d0:	f04f 32ff 	mov.w	r2, #4294967295
 80189d4:	f1c3 0320 	rsb	r3, r3, #32
 80189d8:	fa22 f303 	lsr.w	r3, r2, r3
 80189dc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80189e0:	401a      	ands	r2, r3
 80189e2:	f847 2c04 	str.w	r2, [r7, #-4]
 80189e6:	e7d3      	b.n	8018990 <__hexnan+0xbc>
 80189e8:	3e04      	subs	r6, #4
 80189ea:	e7d1      	b.n	8018990 <__hexnan+0xbc>
 80189ec:	2004      	movs	r0, #4
 80189ee:	b007      	add	sp, #28
 80189f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080189f4 <__locale_ctype_ptr_l>:
 80189f4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80189f8:	4770      	bx	lr

080189fa <__localeconv_l>:
 80189fa:	30f0      	adds	r0, #240	; 0xf0
 80189fc:	4770      	bx	lr
	...

08018a00 <_localeconv_r>:
 8018a00:	4b04      	ldr	r3, [pc, #16]	; (8018a14 <_localeconv_r+0x14>)
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	6a18      	ldr	r0, [r3, #32]
 8018a06:	4b04      	ldr	r3, [pc, #16]	; (8018a18 <_localeconv_r+0x18>)
 8018a08:	2800      	cmp	r0, #0
 8018a0a:	bf08      	it	eq
 8018a0c:	4618      	moveq	r0, r3
 8018a0e:	30f0      	adds	r0, #240	; 0xf0
 8018a10:	4770      	bx	lr
 8018a12:	bf00      	nop
 8018a14:	20000198 	.word	0x20000198
 8018a18:	200001fc 	.word	0x200001fc

08018a1c <__ascii_mbtowc>:
 8018a1c:	b082      	sub	sp, #8
 8018a1e:	b901      	cbnz	r1, 8018a22 <__ascii_mbtowc+0x6>
 8018a20:	a901      	add	r1, sp, #4
 8018a22:	b142      	cbz	r2, 8018a36 <__ascii_mbtowc+0x1a>
 8018a24:	b14b      	cbz	r3, 8018a3a <__ascii_mbtowc+0x1e>
 8018a26:	7813      	ldrb	r3, [r2, #0]
 8018a28:	600b      	str	r3, [r1, #0]
 8018a2a:	7812      	ldrb	r2, [r2, #0]
 8018a2c:	1c10      	adds	r0, r2, #0
 8018a2e:	bf18      	it	ne
 8018a30:	2001      	movne	r0, #1
 8018a32:	b002      	add	sp, #8
 8018a34:	4770      	bx	lr
 8018a36:	4610      	mov	r0, r2
 8018a38:	e7fb      	b.n	8018a32 <__ascii_mbtowc+0x16>
 8018a3a:	f06f 0001 	mvn.w	r0, #1
 8018a3e:	e7f8      	b.n	8018a32 <__ascii_mbtowc+0x16>

08018a40 <__malloc_lock>:
 8018a40:	4770      	bx	lr

08018a42 <__malloc_unlock>:
 8018a42:	4770      	bx	lr

08018a44 <_Balloc>:
 8018a44:	b570      	push	{r4, r5, r6, lr}
 8018a46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018a48:	4604      	mov	r4, r0
 8018a4a:	460e      	mov	r6, r1
 8018a4c:	b93d      	cbnz	r5, 8018a5e <_Balloc+0x1a>
 8018a4e:	2010      	movs	r0, #16
 8018a50:	f7fd f800 	bl	8015a54 <malloc>
 8018a54:	6260      	str	r0, [r4, #36]	; 0x24
 8018a56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018a5a:	6005      	str	r5, [r0, #0]
 8018a5c:	60c5      	str	r5, [r0, #12]
 8018a5e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018a60:	68eb      	ldr	r3, [r5, #12]
 8018a62:	b183      	cbz	r3, 8018a86 <_Balloc+0x42>
 8018a64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018a66:	68db      	ldr	r3, [r3, #12]
 8018a68:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018a6c:	b9b8      	cbnz	r0, 8018a9e <_Balloc+0x5a>
 8018a6e:	2101      	movs	r1, #1
 8018a70:	fa01 f506 	lsl.w	r5, r1, r6
 8018a74:	1d6a      	adds	r2, r5, #5
 8018a76:	0092      	lsls	r2, r2, #2
 8018a78:	4620      	mov	r0, r4
 8018a7a:	f000 fbe2 	bl	8019242 <_calloc_r>
 8018a7e:	b160      	cbz	r0, 8018a9a <_Balloc+0x56>
 8018a80:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018a84:	e00e      	b.n	8018aa4 <_Balloc+0x60>
 8018a86:	2221      	movs	r2, #33	; 0x21
 8018a88:	2104      	movs	r1, #4
 8018a8a:	4620      	mov	r0, r4
 8018a8c:	f000 fbd9 	bl	8019242 <_calloc_r>
 8018a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018a92:	60e8      	str	r0, [r5, #12]
 8018a94:	68db      	ldr	r3, [r3, #12]
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d1e4      	bne.n	8018a64 <_Balloc+0x20>
 8018a9a:	2000      	movs	r0, #0
 8018a9c:	bd70      	pop	{r4, r5, r6, pc}
 8018a9e:	6802      	ldr	r2, [r0, #0]
 8018aa0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018aa4:	2300      	movs	r3, #0
 8018aa6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018aaa:	e7f7      	b.n	8018a9c <_Balloc+0x58>

08018aac <_Bfree>:
 8018aac:	b570      	push	{r4, r5, r6, lr}
 8018aae:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018ab0:	4606      	mov	r6, r0
 8018ab2:	460d      	mov	r5, r1
 8018ab4:	b93c      	cbnz	r4, 8018ac6 <_Bfree+0x1a>
 8018ab6:	2010      	movs	r0, #16
 8018ab8:	f7fc ffcc 	bl	8015a54 <malloc>
 8018abc:	6270      	str	r0, [r6, #36]	; 0x24
 8018abe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018ac2:	6004      	str	r4, [r0, #0]
 8018ac4:	60c4      	str	r4, [r0, #12]
 8018ac6:	b13d      	cbz	r5, 8018ad8 <_Bfree+0x2c>
 8018ac8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018aca:	686a      	ldr	r2, [r5, #4]
 8018acc:	68db      	ldr	r3, [r3, #12]
 8018ace:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018ad2:	6029      	str	r1, [r5, #0]
 8018ad4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018ad8:	bd70      	pop	{r4, r5, r6, pc}

08018ada <__multadd>:
 8018ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ade:	690d      	ldr	r5, [r1, #16]
 8018ae0:	461f      	mov	r7, r3
 8018ae2:	4606      	mov	r6, r0
 8018ae4:	460c      	mov	r4, r1
 8018ae6:	f101 0c14 	add.w	ip, r1, #20
 8018aea:	2300      	movs	r3, #0
 8018aec:	f8dc 0000 	ldr.w	r0, [ip]
 8018af0:	b281      	uxth	r1, r0
 8018af2:	fb02 7101 	mla	r1, r2, r1, r7
 8018af6:	0c0f      	lsrs	r7, r1, #16
 8018af8:	0c00      	lsrs	r0, r0, #16
 8018afa:	fb02 7000 	mla	r0, r2, r0, r7
 8018afe:	b289      	uxth	r1, r1
 8018b00:	3301      	adds	r3, #1
 8018b02:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018b06:	429d      	cmp	r5, r3
 8018b08:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018b0c:	f84c 1b04 	str.w	r1, [ip], #4
 8018b10:	dcec      	bgt.n	8018aec <__multadd+0x12>
 8018b12:	b1d7      	cbz	r7, 8018b4a <__multadd+0x70>
 8018b14:	68a3      	ldr	r3, [r4, #8]
 8018b16:	42ab      	cmp	r3, r5
 8018b18:	dc12      	bgt.n	8018b40 <__multadd+0x66>
 8018b1a:	6861      	ldr	r1, [r4, #4]
 8018b1c:	4630      	mov	r0, r6
 8018b1e:	3101      	adds	r1, #1
 8018b20:	f7ff ff90 	bl	8018a44 <_Balloc>
 8018b24:	6922      	ldr	r2, [r4, #16]
 8018b26:	3202      	adds	r2, #2
 8018b28:	f104 010c 	add.w	r1, r4, #12
 8018b2c:	4680      	mov	r8, r0
 8018b2e:	0092      	lsls	r2, r2, #2
 8018b30:	300c      	adds	r0, #12
 8018b32:	f7fc ff9f 	bl	8015a74 <memcpy>
 8018b36:	4621      	mov	r1, r4
 8018b38:	4630      	mov	r0, r6
 8018b3a:	f7ff ffb7 	bl	8018aac <_Bfree>
 8018b3e:	4644      	mov	r4, r8
 8018b40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018b44:	3501      	adds	r5, #1
 8018b46:	615f      	str	r7, [r3, #20]
 8018b48:	6125      	str	r5, [r4, #16]
 8018b4a:	4620      	mov	r0, r4
 8018b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018b50 <__s2b>:
 8018b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b54:	460c      	mov	r4, r1
 8018b56:	4615      	mov	r5, r2
 8018b58:	461f      	mov	r7, r3
 8018b5a:	2209      	movs	r2, #9
 8018b5c:	3308      	adds	r3, #8
 8018b5e:	4606      	mov	r6, r0
 8018b60:	fb93 f3f2 	sdiv	r3, r3, r2
 8018b64:	2100      	movs	r1, #0
 8018b66:	2201      	movs	r2, #1
 8018b68:	429a      	cmp	r2, r3
 8018b6a:	db20      	blt.n	8018bae <__s2b+0x5e>
 8018b6c:	4630      	mov	r0, r6
 8018b6e:	f7ff ff69 	bl	8018a44 <_Balloc>
 8018b72:	9b08      	ldr	r3, [sp, #32]
 8018b74:	6143      	str	r3, [r0, #20]
 8018b76:	2d09      	cmp	r5, #9
 8018b78:	f04f 0301 	mov.w	r3, #1
 8018b7c:	6103      	str	r3, [r0, #16]
 8018b7e:	dd19      	ble.n	8018bb4 <__s2b+0x64>
 8018b80:	f104 0809 	add.w	r8, r4, #9
 8018b84:	46c1      	mov	r9, r8
 8018b86:	442c      	add	r4, r5
 8018b88:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018b8c:	4601      	mov	r1, r0
 8018b8e:	3b30      	subs	r3, #48	; 0x30
 8018b90:	220a      	movs	r2, #10
 8018b92:	4630      	mov	r0, r6
 8018b94:	f7ff ffa1 	bl	8018ada <__multadd>
 8018b98:	45a1      	cmp	r9, r4
 8018b9a:	d1f5      	bne.n	8018b88 <__s2b+0x38>
 8018b9c:	eb08 0405 	add.w	r4, r8, r5
 8018ba0:	3c08      	subs	r4, #8
 8018ba2:	1b2d      	subs	r5, r5, r4
 8018ba4:	1963      	adds	r3, r4, r5
 8018ba6:	42bb      	cmp	r3, r7
 8018ba8:	db07      	blt.n	8018bba <__s2b+0x6a>
 8018baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018bae:	0052      	lsls	r2, r2, #1
 8018bb0:	3101      	adds	r1, #1
 8018bb2:	e7d9      	b.n	8018b68 <__s2b+0x18>
 8018bb4:	340a      	adds	r4, #10
 8018bb6:	2509      	movs	r5, #9
 8018bb8:	e7f3      	b.n	8018ba2 <__s2b+0x52>
 8018bba:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018bbe:	4601      	mov	r1, r0
 8018bc0:	3b30      	subs	r3, #48	; 0x30
 8018bc2:	220a      	movs	r2, #10
 8018bc4:	4630      	mov	r0, r6
 8018bc6:	f7ff ff88 	bl	8018ada <__multadd>
 8018bca:	e7eb      	b.n	8018ba4 <__s2b+0x54>

08018bcc <__hi0bits>:
 8018bcc:	0c02      	lsrs	r2, r0, #16
 8018bce:	0412      	lsls	r2, r2, #16
 8018bd0:	4603      	mov	r3, r0
 8018bd2:	b9b2      	cbnz	r2, 8018c02 <__hi0bits+0x36>
 8018bd4:	0403      	lsls	r3, r0, #16
 8018bd6:	2010      	movs	r0, #16
 8018bd8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018bdc:	bf04      	itt	eq
 8018bde:	021b      	lsleq	r3, r3, #8
 8018be0:	3008      	addeq	r0, #8
 8018be2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018be6:	bf04      	itt	eq
 8018be8:	011b      	lsleq	r3, r3, #4
 8018bea:	3004      	addeq	r0, #4
 8018bec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018bf0:	bf04      	itt	eq
 8018bf2:	009b      	lsleq	r3, r3, #2
 8018bf4:	3002      	addeq	r0, #2
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	db06      	blt.n	8018c08 <__hi0bits+0x3c>
 8018bfa:	005b      	lsls	r3, r3, #1
 8018bfc:	d503      	bpl.n	8018c06 <__hi0bits+0x3a>
 8018bfe:	3001      	adds	r0, #1
 8018c00:	4770      	bx	lr
 8018c02:	2000      	movs	r0, #0
 8018c04:	e7e8      	b.n	8018bd8 <__hi0bits+0xc>
 8018c06:	2020      	movs	r0, #32
 8018c08:	4770      	bx	lr

08018c0a <__lo0bits>:
 8018c0a:	6803      	ldr	r3, [r0, #0]
 8018c0c:	f013 0207 	ands.w	r2, r3, #7
 8018c10:	4601      	mov	r1, r0
 8018c12:	d00b      	beq.n	8018c2c <__lo0bits+0x22>
 8018c14:	07da      	lsls	r2, r3, #31
 8018c16:	d423      	bmi.n	8018c60 <__lo0bits+0x56>
 8018c18:	0798      	lsls	r0, r3, #30
 8018c1a:	bf49      	itett	mi
 8018c1c:	085b      	lsrmi	r3, r3, #1
 8018c1e:	089b      	lsrpl	r3, r3, #2
 8018c20:	2001      	movmi	r0, #1
 8018c22:	600b      	strmi	r3, [r1, #0]
 8018c24:	bf5c      	itt	pl
 8018c26:	600b      	strpl	r3, [r1, #0]
 8018c28:	2002      	movpl	r0, #2
 8018c2a:	4770      	bx	lr
 8018c2c:	b298      	uxth	r0, r3
 8018c2e:	b9a8      	cbnz	r0, 8018c5c <__lo0bits+0x52>
 8018c30:	0c1b      	lsrs	r3, r3, #16
 8018c32:	2010      	movs	r0, #16
 8018c34:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018c38:	bf04      	itt	eq
 8018c3a:	0a1b      	lsreq	r3, r3, #8
 8018c3c:	3008      	addeq	r0, #8
 8018c3e:	071a      	lsls	r2, r3, #28
 8018c40:	bf04      	itt	eq
 8018c42:	091b      	lsreq	r3, r3, #4
 8018c44:	3004      	addeq	r0, #4
 8018c46:	079a      	lsls	r2, r3, #30
 8018c48:	bf04      	itt	eq
 8018c4a:	089b      	lsreq	r3, r3, #2
 8018c4c:	3002      	addeq	r0, #2
 8018c4e:	07da      	lsls	r2, r3, #31
 8018c50:	d402      	bmi.n	8018c58 <__lo0bits+0x4e>
 8018c52:	085b      	lsrs	r3, r3, #1
 8018c54:	d006      	beq.n	8018c64 <__lo0bits+0x5a>
 8018c56:	3001      	adds	r0, #1
 8018c58:	600b      	str	r3, [r1, #0]
 8018c5a:	4770      	bx	lr
 8018c5c:	4610      	mov	r0, r2
 8018c5e:	e7e9      	b.n	8018c34 <__lo0bits+0x2a>
 8018c60:	2000      	movs	r0, #0
 8018c62:	4770      	bx	lr
 8018c64:	2020      	movs	r0, #32
 8018c66:	4770      	bx	lr

08018c68 <__i2b>:
 8018c68:	b510      	push	{r4, lr}
 8018c6a:	460c      	mov	r4, r1
 8018c6c:	2101      	movs	r1, #1
 8018c6e:	f7ff fee9 	bl	8018a44 <_Balloc>
 8018c72:	2201      	movs	r2, #1
 8018c74:	6144      	str	r4, [r0, #20]
 8018c76:	6102      	str	r2, [r0, #16]
 8018c78:	bd10      	pop	{r4, pc}

08018c7a <__multiply>:
 8018c7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c7e:	4614      	mov	r4, r2
 8018c80:	690a      	ldr	r2, [r1, #16]
 8018c82:	6923      	ldr	r3, [r4, #16]
 8018c84:	429a      	cmp	r2, r3
 8018c86:	bfb8      	it	lt
 8018c88:	460b      	movlt	r3, r1
 8018c8a:	4688      	mov	r8, r1
 8018c8c:	bfbc      	itt	lt
 8018c8e:	46a0      	movlt	r8, r4
 8018c90:	461c      	movlt	r4, r3
 8018c92:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018c96:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018c9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018c9e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018ca2:	eb07 0609 	add.w	r6, r7, r9
 8018ca6:	42b3      	cmp	r3, r6
 8018ca8:	bfb8      	it	lt
 8018caa:	3101      	addlt	r1, #1
 8018cac:	f7ff feca 	bl	8018a44 <_Balloc>
 8018cb0:	f100 0514 	add.w	r5, r0, #20
 8018cb4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018cb8:	462b      	mov	r3, r5
 8018cba:	2200      	movs	r2, #0
 8018cbc:	4573      	cmp	r3, lr
 8018cbe:	d316      	bcc.n	8018cee <__multiply+0x74>
 8018cc0:	f104 0214 	add.w	r2, r4, #20
 8018cc4:	f108 0114 	add.w	r1, r8, #20
 8018cc8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018ccc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018cd0:	9300      	str	r3, [sp, #0]
 8018cd2:	9b00      	ldr	r3, [sp, #0]
 8018cd4:	9201      	str	r2, [sp, #4]
 8018cd6:	4293      	cmp	r3, r2
 8018cd8:	d80c      	bhi.n	8018cf4 <__multiply+0x7a>
 8018cda:	2e00      	cmp	r6, #0
 8018cdc:	dd03      	ble.n	8018ce6 <__multiply+0x6c>
 8018cde:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d05d      	beq.n	8018da2 <__multiply+0x128>
 8018ce6:	6106      	str	r6, [r0, #16]
 8018ce8:	b003      	add	sp, #12
 8018cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cee:	f843 2b04 	str.w	r2, [r3], #4
 8018cf2:	e7e3      	b.n	8018cbc <__multiply+0x42>
 8018cf4:	f8b2 b000 	ldrh.w	fp, [r2]
 8018cf8:	f1bb 0f00 	cmp.w	fp, #0
 8018cfc:	d023      	beq.n	8018d46 <__multiply+0xcc>
 8018cfe:	4689      	mov	r9, r1
 8018d00:	46ac      	mov	ip, r5
 8018d02:	f04f 0800 	mov.w	r8, #0
 8018d06:	f859 4b04 	ldr.w	r4, [r9], #4
 8018d0a:	f8dc a000 	ldr.w	sl, [ip]
 8018d0e:	b2a3      	uxth	r3, r4
 8018d10:	fa1f fa8a 	uxth.w	sl, sl
 8018d14:	fb0b a303 	mla	r3, fp, r3, sl
 8018d18:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018d1c:	f8dc 4000 	ldr.w	r4, [ip]
 8018d20:	4443      	add	r3, r8
 8018d22:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018d26:	fb0b 840a 	mla	r4, fp, sl, r8
 8018d2a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018d2e:	46e2      	mov	sl, ip
 8018d30:	b29b      	uxth	r3, r3
 8018d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018d36:	454f      	cmp	r7, r9
 8018d38:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018d3c:	f84a 3b04 	str.w	r3, [sl], #4
 8018d40:	d82b      	bhi.n	8018d9a <__multiply+0x120>
 8018d42:	f8cc 8004 	str.w	r8, [ip, #4]
 8018d46:	9b01      	ldr	r3, [sp, #4]
 8018d48:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018d4c:	3204      	adds	r2, #4
 8018d4e:	f1ba 0f00 	cmp.w	sl, #0
 8018d52:	d020      	beq.n	8018d96 <__multiply+0x11c>
 8018d54:	682b      	ldr	r3, [r5, #0]
 8018d56:	4689      	mov	r9, r1
 8018d58:	46a8      	mov	r8, r5
 8018d5a:	f04f 0b00 	mov.w	fp, #0
 8018d5e:	f8b9 c000 	ldrh.w	ip, [r9]
 8018d62:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018d66:	fb0a 440c 	mla	r4, sl, ip, r4
 8018d6a:	445c      	add	r4, fp
 8018d6c:	46c4      	mov	ip, r8
 8018d6e:	b29b      	uxth	r3, r3
 8018d70:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018d74:	f84c 3b04 	str.w	r3, [ip], #4
 8018d78:	f859 3b04 	ldr.w	r3, [r9], #4
 8018d7c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018d80:	0c1b      	lsrs	r3, r3, #16
 8018d82:	fb0a b303 	mla	r3, sl, r3, fp
 8018d86:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018d8a:	454f      	cmp	r7, r9
 8018d8c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018d90:	d805      	bhi.n	8018d9e <__multiply+0x124>
 8018d92:	f8c8 3004 	str.w	r3, [r8, #4]
 8018d96:	3504      	adds	r5, #4
 8018d98:	e79b      	b.n	8018cd2 <__multiply+0x58>
 8018d9a:	46d4      	mov	ip, sl
 8018d9c:	e7b3      	b.n	8018d06 <__multiply+0x8c>
 8018d9e:	46e0      	mov	r8, ip
 8018da0:	e7dd      	b.n	8018d5e <__multiply+0xe4>
 8018da2:	3e01      	subs	r6, #1
 8018da4:	e799      	b.n	8018cda <__multiply+0x60>
	...

08018da8 <__pow5mult>:
 8018da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018dac:	4615      	mov	r5, r2
 8018dae:	f012 0203 	ands.w	r2, r2, #3
 8018db2:	4606      	mov	r6, r0
 8018db4:	460f      	mov	r7, r1
 8018db6:	d007      	beq.n	8018dc8 <__pow5mult+0x20>
 8018db8:	3a01      	subs	r2, #1
 8018dba:	4c21      	ldr	r4, [pc, #132]	; (8018e40 <__pow5mult+0x98>)
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018dc2:	f7ff fe8a 	bl	8018ada <__multadd>
 8018dc6:	4607      	mov	r7, r0
 8018dc8:	10ad      	asrs	r5, r5, #2
 8018dca:	d035      	beq.n	8018e38 <__pow5mult+0x90>
 8018dcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018dce:	b93c      	cbnz	r4, 8018de0 <__pow5mult+0x38>
 8018dd0:	2010      	movs	r0, #16
 8018dd2:	f7fc fe3f 	bl	8015a54 <malloc>
 8018dd6:	6270      	str	r0, [r6, #36]	; 0x24
 8018dd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018ddc:	6004      	str	r4, [r0, #0]
 8018dde:	60c4      	str	r4, [r0, #12]
 8018de0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018de4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018de8:	b94c      	cbnz	r4, 8018dfe <__pow5mult+0x56>
 8018dea:	f240 2171 	movw	r1, #625	; 0x271
 8018dee:	4630      	mov	r0, r6
 8018df0:	f7ff ff3a 	bl	8018c68 <__i2b>
 8018df4:	2300      	movs	r3, #0
 8018df6:	f8c8 0008 	str.w	r0, [r8, #8]
 8018dfa:	4604      	mov	r4, r0
 8018dfc:	6003      	str	r3, [r0, #0]
 8018dfe:	f04f 0800 	mov.w	r8, #0
 8018e02:	07eb      	lsls	r3, r5, #31
 8018e04:	d50a      	bpl.n	8018e1c <__pow5mult+0x74>
 8018e06:	4639      	mov	r1, r7
 8018e08:	4622      	mov	r2, r4
 8018e0a:	4630      	mov	r0, r6
 8018e0c:	f7ff ff35 	bl	8018c7a <__multiply>
 8018e10:	4639      	mov	r1, r7
 8018e12:	4681      	mov	r9, r0
 8018e14:	4630      	mov	r0, r6
 8018e16:	f7ff fe49 	bl	8018aac <_Bfree>
 8018e1a:	464f      	mov	r7, r9
 8018e1c:	106d      	asrs	r5, r5, #1
 8018e1e:	d00b      	beq.n	8018e38 <__pow5mult+0x90>
 8018e20:	6820      	ldr	r0, [r4, #0]
 8018e22:	b938      	cbnz	r0, 8018e34 <__pow5mult+0x8c>
 8018e24:	4622      	mov	r2, r4
 8018e26:	4621      	mov	r1, r4
 8018e28:	4630      	mov	r0, r6
 8018e2a:	f7ff ff26 	bl	8018c7a <__multiply>
 8018e2e:	6020      	str	r0, [r4, #0]
 8018e30:	f8c0 8000 	str.w	r8, [r0]
 8018e34:	4604      	mov	r4, r0
 8018e36:	e7e4      	b.n	8018e02 <__pow5mult+0x5a>
 8018e38:	4638      	mov	r0, r7
 8018e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e3e:	bf00      	nop
 8018e40:	0801c0b8 	.word	0x0801c0b8

08018e44 <__lshift>:
 8018e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e48:	460c      	mov	r4, r1
 8018e4a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018e4e:	6923      	ldr	r3, [r4, #16]
 8018e50:	6849      	ldr	r1, [r1, #4]
 8018e52:	eb0a 0903 	add.w	r9, sl, r3
 8018e56:	68a3      	ldr	r3, [r4, #8]
 8018e58:	4607      	mov	r7, r0
 8018e5a:	4616      	mov	r6, r2
 8018e5c:	f109 0501 	add.w	r5, r9, #1
 8018e60:	42ab      	cmp	r3, r5
 8018e62:	db32      	blt.n	8018eca <__lshift+0x86>
 8018e64:	4638      	mov	r0, r7
 8018e66:	f7ff fded 	bl	8018a44 <_Balloc>
 8018e6a:	2300      	movs	r3, #0
 8018e6c:	4680      	mov	r8, r0
 8018e6e:	f100 0114 	add.w	r1, r0, #20
 8018e72:	461a      	mov	r2, r3
 8018e74:	4553      	cmp	r3, sl
 8018e76:	db2b      	blt.n	8018ed0 <__lshift+0x8c>
 8018e78:	6920      	ldr	r0, [r4, #16]
 8018e7a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018e7e:	f104 0314 	add.w	r3, r4, #20
 8018e82:	f016 021f 	ands.w	r2, r6, #31
 8018e86:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018e8a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018e8e:	d025      	beq.n	8018edc <__lshift+0x98>
 8018e90:	f1c2 0e20 	rsb	lr, r2, #32
 8018e94:	2000      	movs	r0, #0
 8018e96:	681e      	ldr	r6, [r3, #0]
 8018e98:	468a      	mov	sl, r1
 8018e9a:	4096      	lsls	r6, r2
 8018e9c:	4330      	orrs	r0, r6
 8018e9e:	f84a 0b04 	str.w	r0, [sl], #4
 8018ea2:	f853 0b04 	ldr.w	r0, [r3], #4
 8018ea6:	459c      	cmp	ip, r3
 8018ea8:	fa20 f00e 	lsr.w	r0, r0, lr
 8018eac:	d814      	bhi.n	8018ed8 <__lshift+0x94>
 8018eae:	6048      	str	r0, [r1, #4]
 8018eb0:	b108      	cbz	r0, 8018eb6 <__lshift+0x72>
 8018eb2:	f109 0502 	add.w	r5, r9, #2
 8018eb6:	3d01      	subs	r5, #1
 8018eb8:	4638      	mov	r0, r7
 8018eba:	f8c8 5010 	str.w	r5, [r8, #16]
 8018ebe:	4621      	mov	r1, r4
 8018ec0:	f7ff fdf4 	bl	8018aac <_Bfree>
 8018ec4:	4640      	mov	r0, r8
 8018ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018eca:	3101      	adds	r1, #1
 8018ecc:	005b      	lsls	r3, r3, #1
 8018ece:	e7c7      	b.n	8018e60 <__lshift+0x1c>
 8018ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018ed4:	3301      	adds	r3, #1
 8018ed6:	e7cd      	b.n	8018e74 <__lshift+0x30>
 8018ed8:	4651      	mov	r1, sl
 8018eda:	e7dc      	b.n	8018e96 <__lshift+0x52>
 8018edc:	3904      	subs	r1, #4
 8018ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ee2:	f841 2f04 	str.w	r2, [r1, #4]!
 8018ee6:	459c      	cmp	ip, r3
 8018ee8:	d8f9      	bhi.n	8018ede <__lshift+0x9a>
 8018eea:	e7e4      	b.n	8018eb6 <__lshift+0x72>

08018eec <__mcmp>:
 8018eec:	6903      	ldr	r3, [r0, #16]
 8018eee:	690a      	ldr	r2, [r1, #16]
 8018ef0:	1a9b      	subs	r3, r3, r2
 8018ef2:	b530      	push	{r4, r5, lr}
 8018ef4:	d10c      	bne.n	8018f10 <__mcmp+0x24>
 8018ef6:	0092      	lsls	r2, r2, #2
 8018ef8:	3014      	adds	r0, #20
 8018efa:	3114      	adds	r1, #20
 8018efc:	1884      	adds	r4, r0, r2
 8018efe:	4411      	add	r1, r2
 8018f00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018f04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018f08:	4295      	cmp	r5, r2
 8018f0a:	d003      	beq.n	8018f14 <__mcmp+0x28>
 8018f0c:	d305      	bcc.n	8018f1a <__mcmp+0x2e>
 8018f0e:	2301      	movs	r3, #1
 8018f10:	4618      	mov	r0, r3
 8018f12:	bd30      	pop	{r4, r5, pc}
 8018f14:	42a0      	cmp	r0, r4
 8018f16:	d3f3      	bcc.n	8018f00 <__mcmp+0x14>
 8018f18:	e7fa      	b.n	8018f10 <__mcmp+0x24>
 8018f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8018f1e:	e7f7      	b.n	8018f10 <__mcmp+0x24>

08018f20 <__mdiff>:
 8018f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f24:	460d      	mov	r5, r1
 8018f26:	4607      	mov	r7, r0
 8018f28:	4611      	mov	r1, r2
 8018f2a:	4628      	mov	r0, r5
 8018f2c:	4614      	mov	r4, r2
 8018f2e:	f7ff ffdd 	bl	8018eec <__mcmp>
 8018f32:	1e06      	subs	r6, r0, #0
 8018f34:	d108      	bne.n	8018f48 <__mdiff+0x28>
 8018f36:	4631      	mov	r1, r6
 8018f38:	4638      	mov	r0, r7
 8018f3a:	f7ff fd83 	bl	8018a44 <_Balloc>
 8018f3e:	2301      	movs	r3, #1
 8018f40:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f48:	bfa4      	itt	ge
 8018f4a:	4623      	movge	r3, r4
 8018f4c:	462c      	movge	r4, r5
 8018f4e:	4638      	mov	r0, r7
 8018f50:	6861      	ldr	r1, [r4, #4]
 8018f52:	bfa6      	itte	ge
 8018f54:	461d      	movge	r5, r3
 8018f56:	2600      	movge	r6, #0
 8018f58:	2601      	movlt	r6, #1
 8018f5a:	f7ff fd73 	bl	8018a44 <_Balloc>
 8018f5e:	692b      	ldr	r3, [r5, #16]
 8018f60:	60c6      	str	r6, [r0, #12]
 8018f62:	6926      	ldr	r6, [r4, #16]
 8018f64:	f105 0914 	add.w	r9, r5, #20
 8018f68:	f104 0214 	add.w	r2, r4, #20
 8018f6c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018f70:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018f74:	f100 0514 	add.w	r5, r0, #20
 8018f78:	f04f 0e00 	mov.w	lr, #0
 8018f7c:	f852 ab04 	ldr.w	sl, [r2], #4
 8018f80:	f859 4b04 	ldr.w	r4, [r9], #4
 8018f84:	fa1e f18a 	uxtah	r1, lr, sl
 8018f88:	b2a3      	uxth	r3, r4
 8018f8a:	1ac9      	subs	r1, r1, r3
 8018f8c:	0c23      	lsrs	r3, r4, #16
 8018f8e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018f92:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018f96:	b289      	uxth	r1, r1
 8018f98:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018f9c:	45c8      	cmp	r8, r9
 8018f9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018fa2:	4694      	mov	ip, r2
 8018fa4:	f845 3b04 	str.w	r3, [r5], #4
 8018fa8:	d8e8      	bhi.n	8018f7c <__mdiff+0x5c>
 8018faa:	45bc      	cmp	ip, r7
 8018fac:	d304      	bcc.n	8018fb8 <__mdiff+0x98>
 8018fae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018fb2:	b183      	cbz	r3, 8018fd6 <__mdiff+0xb6>
 8018fb4:	6106      	str	r6, [r0, #16]
 8018fb6:	e7c5      	b.n	8018f44 <__mdiff+0x24>
 8018fb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018fbc:	fa1e f381 	uxtah	r3, lr, r1
 8018fc0:	141a      	asrs	r2, r3, #16
 8018fc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018fc6:	b29b      	uxth	r3, r3
 8018fc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018fcc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018fd0:	f845 3b04 	str.w	r3, [r5], #4
 8018fd4:	e7e9      	b.n	8018faa <__mdiff+0x8a>
 8018fd6:	3e01      	subs	r6, #1
 8018fd8:	e7e9      	b.n	8018fae <__mdiff+0x8e>
	...

08018fdc <__ulp>:
 8018fdc:	4b12      	ldr	r3, [pc, #72]	; (8019028 <__ulp+0x4c>)
 8018fde:	ee10 2a90 	vmov	r2, s1
 8018fe2:	401a      	ands	r2, r3
 8018fe4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	dd04      	ble.n	8018ff6 <__ulp+0x1a>
 8018fec:	2000      	movs	r0, #0
 8018fee:	4619      	mov	r1, r3
 8018ff0:	ec41 0b10 	vmov	d0, r0, r1
 8018ff4:	4770      	bx	lr
 8018ff6:	425b      	negs	r3, r3
 8018ff8:	151b      	asrs	r3, r3, #20
 8018ffa:	2b13      	cmp	r3, #19
 8018ffc:	f04f 0000 	mov.w	r0, #0
 8019000:	f04f 0100 	mov.w	r1, #0
 8019004:	dc04      	bgt.n	8019010 <__ulp+0x34>
 8019006:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801900a:	fa42 f103 	asr.w	r1, r2, r3
 801900e:	e7ef      	b.n	8018ff0 <__ulp+0x14>
 8019010:	3b14      	subs	r3, #20
 8019012:	2b1e      	cmp	r3, #30
 8019014:	f04f 0201 	mov.w	r2, #1
 8019018:	bfda      	itte	le
 801901a:	f1c3 031f 	rsble	r3, r3, #31
 801901e:	fa02 f303 	lslle.w	r3, r2, r3
 8019022:	4613      	movgt	r3, r2
 8019024:	4618      	mov	r0, r3
 8019026:	e7e3      	b.n	8018ff0 <__ulp+0x14>
 8019028:	7ff00000 	.word	0x7ff00000

0801902c <__b2d>:
 801902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801902e:	6905      	ldr	r5, [r0, #16]
 8019030:	f100 0714 	add.w	r7, r0, #20
 8019034:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019038:	1f2e      	subs	r6, r5, #4
 801903a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801903e:	4620      	mov	r0, r4
 8019040:	f7ff fdc4 	bl	8018bcc <__hi0bits>
 8019044:	f1c0 0320 	rsb	r3, r0, #32
 8019048:	280a      	cmp	r0, #10
 801904a:	600b      	str	r3, [r1, #0]
 801904c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80190c4 <__b2d+0x98>
 8019050:	dc14      	bgt.n	801907c <__b2d+0x50>
 8019052:	f1c0 0e0b 	rsb	lr, r0, #11
 8019056:	fa24 f10e 	lsr.w	r1, r4, lr
 801905a:	42b7      	cmp	r7, r6
 801905c:	ea41 030c 	orr.w	r3, r1, ip
 8019060:	bf34      	ite	cc
 8019062:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019066:	2100      	movcs	r1, #0
 8019068:	3015      	adds	r0, #21
 801906a:	fa04 f000 	lsl.w	r0, r4, r0
 801906e:	fa21 f10e 	lsr.w	r1, r1, lr
 8019072:	ea40 0201 	orr.w	r2, r0, r1
 8019076:	ec43 2b10 	vmov	d0, r2, r3
 801907a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801907c:	42b7      	cmp	r7, r6
 801907e:	bf3a      	itte	cc
 8019080:	f1a5 0608 	subcc.w	r6, r5, #8
 8019084:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019088:	2100      	movcs	r1, #0
 801908a:	380b      	subs	r0, #11
 801908c:	d015      	beq.n	80190ba <__b2d+0x8e>
 801908e:	4084      	lsls	r4, r0
 8019090:	f1c0 0520 	rsb	r5, r0, #32
 8019094:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8019098:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801909c:	42be      	cmp	r6, r7
 801909e:	fa21 fc05 	lsr.w	ip, r1, r5
 80190a2:	ea44 030c 	orr.w	r3, r4, ip
 80190a6:	bf8c      	ite	hi
 80190a8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80190ac:	2400      	movls	r4, #0
 80190ae:	fa01 f000 	lsl.w	r0, r1, r0
 80190b2:	40ec      	lsrs	r4, r5
 80190b4:	ea40 0204 	orr.w	r2, r0, r4
 80190b8:	e7dd      	b.n	8019076 <__b2d+0x4a>
 80190ba:	ea44 030c 	orr.w	r3, r4, ip
 80190be:	460a      	mov	r2, r1
 80190c0:	e7d9      	b.n	8019076 <__b2d+0x4a>
 80190c2:	bf00      	nop
 80190c4:	3ff00000 	.word	0x3ff00000

080190c8 <__d2b>:
 80190c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80190cc:	460e      	mov	r6, r1
 80190ce:	2101      	movs	r1, #1
 80190d0:	ec59 8b10 	vmov	r8, r9, d0
 80190d4:	4615      	mov	r5, r2
 80190d6:	f7ff fcb5 	bl	8018a44 <_Balloc>
 80190da:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80190de:	4607      	mov	r7, r0
 80190e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80190e4:	bb34      	cbnz	r4, 8019134 <__d2b+0x6c>
 80190e6:	9301      	str	r3, [sp, #4]
 80190e8:	f1b8 0300 	subs.w	r3, r8, #0
 80190ec:	d027      	beq.n	801913e <__d2b+0x76>
 80190ee:	a802      	add	r0, sp, #8
 80190f0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80190f4:	f7ff fd89 	bl	8018c0a <__lo0bits>
 80190f8:	9900      	ldr	r1, [sp, #0]
 80190fa:	b1f0      	cbz	r0, 801913a <__d2b+0x72>
 80190fc:	9a01      	ldr	r2, [sp, #4]
 80190fe:	f1c0 0320 	rsb	r3, r0, #32
 8019102:	fa02 f303 	lsl.w	r3, r2, r3
 8019106:	430b      	orrs	r3, r1
 8019108:	40c2      	lsrs	r2, r0
 801910a:	617b      	str	r3, [r7, #20]
 801910c:	9201      	str	r2, [sp, #4]
 801910e:	9b01      	ldr	r3, [sp, #4]
 8019110:	61bb      	str	r3, [r7, #24]
 8019112:	2b00      	cmp	r3, #0
 8019114:	bf14      	ite	ne
 8019116:	2102      	movne	r1, #2
 8019118:	2101      	moveq	r1, #1
 801911a:	6139      	str	r1, [r7, #16]
 801911c:	b1c4      	cbz	r4, 8019150 <__d2b+0x88>
 801911e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8019122:	4404      	add	r4, r0
 8019124:	6034      	str	r4, [r6, #0]
 8019126:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801912a:	6028      	str	r0, [r5, #0]
 801912c:	4638      	mov	r0, r7
 801912e:	b003      	add	sp, #12
 8019130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019138:	e7d5      	b.n	80190e6 <__d2b+0x1e>
 801913a:	6179      	str	r1, [r7, #20]
 801913c:	e7e7      	b.n	801910e <__d2b+0x46>
 801913e:	a801      	add	r0, sp, #4
 8019140:	f7ff fd63 	bl	8018c0a <__lo0bits>
 8019144:	9b01      	ldr	r3, [sp, #4]
 8019146:	617b      	str	r3, [r7, #20]
 8019148:	2101      	movs	r1, #1
 801914a:	6139      	str	r1, [r7, #16]
 801914c:	3020      	adds	r0, #32
 801914e:	e7e5      	b.n	801911c <__d2b+0x54>
 8019150:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8019154:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019158:	6030      	str	r0, [r6, #0]
 801915a:	6918      	ldr	r0, [r3, #16]
 801915c:	f7ff fd36 	bl	8018bcc <__hi0bits>
 8019160:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8019164:	e7e1      	b.n	801912a <__d2b+0x62>

08019166 <__ratio>:
 8019166:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801916a:	4688      	mov	r8, r1
 801916c:	4669      	mov	r1, sp
 801916e:	4681      	mov	r9, r0
 8019170:	f7ff ff5c 	bl	801902c <__b2d>
 8019174:	a901      	add	r1, sp, #4
 8019176:	4640      	mov	r0, r8
 8019178:	ec57 6b10 	vmov	r6, r7, d0
 801917c:	f7ff ff56 	bl	801902c <__b2d>
 8019180:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019184:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019188:	eba3 0c02 	sub.w	ip, r3, r2
 801918c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019190:	1a9b      	subs	r3, r3, r2
 8019192:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019196:	ec5b ab10 	vmov	sl, fp, d0
 801919a:	2b00      	cmp	r3, #0
 801919c:	bfce      	itee	gt
 801919e:	463a      	movgt	r2, r7
 80191a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80191a4:	465a      	movle	r2, fp
 80191a6:	4659      	mov	r1, fp
 80191a8:	463d      	mov	r5, r7
 80191aa:	bfd4      	ite	le
 80191ac:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80191b0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80191b4:	4630      	mov	r0, r6
 80191b6:	ee10 2a10 	vmov	r2, s0
 80191ba:	460b      	mov	r3, r1
 80191bc:	4629      	mov	r1, r5
 80191be:	f7e7 fb55 	bl	800086c <__aeabi_ddiv>
 80191c2:	ec41 0b10 	vmov	d0, r0, r1
 80191c6:	b003      	add	sp, #12
 80191c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080191cc <__copybits>:
 80191cc:	3901      	subs	r1, #1
 80191ce:	b510      	push	{r4, lr}
 80191d0:	1149      	asrs	r1, r1, #5
 80191d2:	6914      	ldr	r4, [r2, #16]
 80191d4:	3101      	adds	r1, #1
 80191d6:	f102 0314 	add.w	r3, r2, #20
 80191da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80191de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80191e2:	42a3      	cmp	r3, r4
 80191e4:	4602      	mov	r2, r0
 80191e6:	d303      	bcc.n	80191f0 <__copybits+0x24>
 80191e8:	2300      	movs	r3, #0
 80191ea:	428a      	cmp	r2, r1
 80191ec:	d305      	bcc.n	80191fa <__copybits+0x2e>
 80191ee:	bd10      	pop	{r4, pc}
 80191f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80191f4:	f840 2b04 	str.w	r2, [r0], #4
 80191f8:	e7f3      	b.n	80191e2 <__copybits+0x16>
 80191fa:	f842 3b04 	str.w	r3, [r2], #4
 80191fe:	e7f4      	b.n	80191ea <__copybits+0x1e>

08019200 <__any_on>:
 8019200:	f100 0214 	add.w	r2, r0, #20
 8019204:	6900      	ldr	r0, [r0, #16]
 8019206:	114b      	asrs	r3, r1, #5
 8019208:	4298      	cmp	r0, r3
 801920a:	b510      	push	{r4, lr}
 801920c:	db11      	blt.n	8019232 <__any_on+0x32>
 801920e:	dd0a      	ble.n	8019226 <__any_on+0x26>
 8019210:	f011 011f 	ands.w	r1, r1, #31
 8019214:	d007      	beq.n	8019226 <__any_on+0x26>
 8019216:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801921a:	fa24 f001 	lsr.w	r0, r4, r1
 801921e:	fa00 f101 	lsl.w	r1, r0, r1
 8019222:	428c      	cmp	r4, r1
 8019224:	d10b      	bne.n	801923e <__any_on+0x3e>
 8019226:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801922a:	4293      	cmp	r3, r2
 801922c:	d803      	bhi.n	8019236 <__any_on+0x36>
 801922e:	2000      	movs	r0, #0
 8019230:	bd10      	pop	{r4, pc}
 8019232:	4603      	mov	r3, r0
 8019234:	e7f7      	b.n	8019226 <__any_on+0x26>
 8019236:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801923a:	2900      	cmp	r1, #0
 801923c:	d0f5      	beq.n	801922a <__any_on+0x2a>
 801923e:	2001      	movs	r0, #1
 8019240:	e7f6      	b.n	8019230 <__any_on+0x30>

08019242 <_calloc_r>:
 8019242:	b538      	push	{r3, r4, r5, lr}
 8019244:	fb02 f401 	mul.w	r4, r2, r1
 8019248:	4621      	mov	r1, r4
 801924a:	f7fc fc75 	bl	8015b38 <_malloc_r>
 801924e:	4605      	mov	r5, r0
 8019250:	b118      	cbz	r0, 801925a <_calloc_r+0x18>
 8019252:	4622      	mov	r2, r4
 8019254:	2100      	movs	r1, #0
 8019256:	f7fc fc18 	bl	8015a8a <memset>
 801925a:	4628      	mov	r0, r5
 801925c:	bd38      	pop	{r3, r4, r5, pc}

0801925e <__ssputs_r>:
 801925e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019262:	688e      	ldr	r6, [r1, #8]
 8019264:	429e      	cmp	r6, r3
 8019266:	4682      	mov	sl, r0
 8019268:	460c      	mov	r4, r1
 801926a:	4690      	mov	r8, r2
 801926c:	4699      	mov	r9, r3
 801926e:	d837      	bhi.n	80192e0 <__ssputs_r+0x82>
 8019270:	898a      	ldrh	r2, [r1, #12]
 8019272:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019276:	d031      	beq.n	80192dc <__ssputs_r+0x7e>
 8019278:	6825      	ldr	r5, [r4, #0]
 801927a:	6909      	ldr	r1, [r1, #16]
 801927c:	1a6f      	subs	r7, r5, r1
 801927e:	6965      	ldr	r5, [r4, #20]
 8019280:	2302      	movs	r3, #2
 8019282:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019286:	fb95 f5f3 	sdiv	r5, r5, r3
 801928a:	f109 0301 	add.w	r3, r9, #1
 801928e:	443b      	add	r3, r7
 8019290:	429d      	cmp	r5, r3
 8019292:	bf38      	it	cc
 8019294:	461d      	movcc	r5, r3
 8019296:	0553      	lsls	r3, r2, #21
 8019298:	d530      	bpl.n	80192fc <__ssputs_r+0x9e>
 801929a:	4629      	mov	r1, r5
 801929c:	f7fc fc4c 	bl	8015b38 <_malloc_r>
 80192a0:	4606      	mov	r6, r0
 80192a2:	b950      	cbnz	r0, 80192ba <__ssputs_r+0x5c>
 80192a4:	230c      	movs	r3, #12
 80192a6:	f8ca 3000 	str.w	r3, [sl]
 80192aa:	89a3      	ldrh	r3, [r4, #12]
 80192ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192b0:	81a3      	strh	r3, [r4, #12]
 80192b2:	f04f 30ff 	mov.w	r0, #4294967295
 80192b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192ba:	463a      	mov	r2, r7
 80192bc:	6921      	ldr	r1, [r4, #16]
 80192be:	f7fc fbd9 	bl	8015a74 <memcpy>
 80192c2:	89a3      	ldrh	r3, [r4, #12]
 80192c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80192c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80192cc:	81a3      	strh	r3, [r4, #12]
 80192ce:	6126      	str	r6, [r4, #16]
 80192d0:	6165      	str	r5, [r4, #20]
 80192d2:	443e      	add	r6, r7
 80192d4:	1bed      	subs	r5, r5, r7
 80192d6:	6026      	str	r6, [r4, #0]
 80192d8:	60a5      	str	r5, [r4, #8]
 80192da:	464e      	mov	r6, r9
 80192dc:	454e      	cmp	r6, r9
 80192de:	d900      	bls.n	80192e2 <__ssputs_r+0x84>
 80192e0:	464e      	mov	r6, r9
 80192e2:	4632      	mov	r2, r6
 80192e4:	4641      	mov	r1, r8
 80192e6:	6820      	ldr	r0, [r4, #0]
 80192e8:	f000 f919 	bl	801951e <memmove>
 80192ec:	68a3      	ldr	r3, [r4, #8]
 80192ee:	1b9b      	subs	r3, r3, r6
 80192f0:	60a3      	str	r3, [r4, #8]
 80192f2:	6823      	ldr	r3, [r4, #0]
 80192f4:	441e      	add	r6, r3
 80192f6:	6026      	str	r6, [r4, #0]
 80192f8:	2000      	movs	r0, #0
 80192fa:	e7dc      	b.n	80192b6 <__ssputs_r+0x58>
 80192fc:	462a      	mov	r2, r5
 80192fe:	f000 f927 	bl	8019550 <_realloc_r>
 8019302:	4606      	mov	r6, r0
 8019304:	2800      	cmp	r0, #0
 8019306:	d1e2      	bne.n	80192ce <__ssputs_r+0x70>
 8019308:	6921      	ldr	r1, [r4, #16]
 801930a:	4650      	mov	r0, sl
 801930c:	f7fc fbc6 	bl	8015a9c <_free_r>
 8019310:	e7c8      	b.n	80192a4 <__ssputs_r+0x46>
	...

08019314 <_svfiprintf_r>:
 8019314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019318:	461d      	mov	r5, r3
 801931a:	898b      	ldrh	r3, [r1, #12]
 801931c:	061f      	lsls	r7, r3, #24
 801931e:	b09d      	sub	sp, #116	; 0x74
 8019320:	4680      	mov	r8, r0
 8019322:	460c      	mov	r4, r1
 8019324:	4616      	mov	r6, r2
 8019326:	d50f      	bpl.n	8019348 <_svfiprintf_r+0x34>
 8019328:	690b      	ldr	r3, [r1, #16]
 801932a:	b96b      	cbnz	r3, 8019348 <_svfiprintf_r+0x34>
 801932c:	2140      	movs	r1, #64	; 0x40
 801932e:	f7fc fc03 	bl	8015b38 <_malloc_r>
 8019332:	6020      	str	r0, [r4, #0]
 8019334:	6120      	str	r0, [r4, #16]
 8019336:	b928      	cbnz	r0, 8019344 <_svfiprintf_r+0x30>
 8019338:	230c      	movs	r3, #12
 801933a:	f8c8 3000 	str.w	r3, [r8]
 801933e:	f04f 30ff 	mov.w	r0, #4294967295
 8019342:	e0c8      	b.n	80194d6 <_svfiprintf_r+0x1c2>
 8019344:	2340      	movs	r3, #64	; 0x40
 8019346:	6163      	str	r3, [r4, #20]
 8019348:	2300      	movs	r3, #0
 801934a:	9309      	str	r3, [sp, #36]	; 0x24
 801934c:	2320      	movs	r3, #32
 801934e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019352:	2330      	movs	r3, #48	; 0x30
 8019354:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019358:	9503      	str	r5, [sp, #12]
 801935a:	f04f 0b01 	mov.w	fp, #1
 801935e:	4637      	mov	r7, r6
 8019360:	463d      	mov	r5, r7
 8019362:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019366:	b10b      	cbz	r3, 801936c <_svfiprintf_r+0x58>
 8019368:	2b25      	cmp	r3, #37	; 0x25
 801936a:	d13e      	bne.n	80193ea <_svfiprintf_r+0xd6>
 801936c:	ebb7 0a06 	subs.w	sl, r7, r6
 8019370:	d00b      	beq.n	801938a <_svfiprintf_r+0x76>
 8019372:	4653      	mov	r3, sl
 8019374:	4632      	mov	r2, r6
 8019376:	4621      	mov	r1, r4
 8019378:	4640      	mov	r0, r8
 801937a:	f7ff ff70 	bl	801925e <__ssputs_r>
 801937e:	3001      	adds	r0, #1
 8019380:	f000 80a4 	beq.w	80194cc <_svfiprintf_r+0x1b8>
 8019384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019386:	4453      	add	r3, sl
 8019388:	9309      	str	r3, [sp, #36]	; 0x24
 801938a:	783b      	ldrb	r3, [r7, #0]
 801938c:	2b00      	cmp	r3, #0
 801938e:	f000 809d 	beq.w	80194cc <_svfiprintf_r+0x1b8>
 8019392:	2300      	movs	r3, #0
 8019394:	f04f 32ff 	mov.w	r2, #4294967295
 8019398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801939c:	9304      	str	r3, [sp, #16]
 801939e:	9307      	str	r3, [sp, #28]
 80193a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80193a4:	931a      	str	r3, [sp, #104]	; 0x68
 80193a6:	462f      	mov	r7, r5
 80193a8:	2205      	movs	r2, #5
 80193aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80193ae:	4850      	ldr	r0, [pc, #320]	; (80194f0 <_svfiprintf_r+0x1dc>)
 80193b0:	f7e6 ff26 	bl	8000200 <memchr>
 80193b4:	9b04      	ldr	r3, [sp, #16]
 80193b6:	b9d0      	cbnz	r0, 80193ee <_svfiprintf_r+0xda>
 80193b8:	06d9      	lsls	r1, r3, #27
 80193ba:	bf44      	itt	mi
 80193bc:	2220      	movmi	r2, #32
 80193be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80193c2:	071a      	lsls	r2, r3, #28
 80193c4:	bf44      	itt	mi
 80193c6:	222b      	movmi	r2, #43	; 0x2b
 80193c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80193cc:	782a      	ldrb	r2, [r5, #0]
 80193ce:	2a2a      	cmp	r2, #42	; 0x2a
 80193d0:	d015      	beq.n	80193fe <_svfiprintf_r+0xea>
 80193d2:	9a07      	ldr	r2, [sp, #28]
 80193d4:	462f      	mov	r7, r5
 80193d6:	2000      	movs	r0, #0
 80193d8:	250a      	movs	r5, #10
 80193da:	4639      	mov	r1, r7
 80193dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80193e0:	3b30      	subs	r3, #48	; 0x30
 80193e2:	2b09      	cmp	r3, #9
 80193e4:	d94d      	bls.n	8019482 <_svfiprintf_r+0x16e>
 80193e6:	b1b8      	cbz	r0, 8019418 <_svfiprintf_r+0x104>
 80193e8:	e00f      	b.n	801940a <_svfiprintf_r+0xf6>
 80193ea:	462f      	mov	r7, r5
 80193ec:	e7b8      	b.n	8019360 <_svfiprintf_r+0x4c>
 80193ee:	4a40      	ldr	r2, [pc, #256]	; (80194f0 <_svfiprintf_r+0x1dc>)
 80193f0:	1a80      	subs	r0, r0, r2
 80193f2:	fa0b f000 	lsl.w	r0, fp, r0
 80193f6:	4318      	orrs	r0, r3
 80193f8:	9004      	str	r0, [sp, #16]
 80193fa:	463d      	mov	r5, r7
 80193fc:	e7d3      	b.n	80193a6 <_svfiprintf_r+0x92>
 80193fe:	9a03      	ldr	r2, [sp, #12]
 8019400:	1d11      	adds	r1, r2, #4
 8019402:	6812      	ldr	r2, [r2, #0]
 8019404:	9103      	str	r1, [sp, #12]
 8019406:	2a00      	cmp	r2, #0
 8019408:	db01      	blt.n	801940e <_svfiprintf_r+0xfa>
 801940a:	9207      	str	r2, [sp, #28]
 801940c:	e004      	b.n	8019418 <_svfiprintf_r+0x104>
 801940e:	4252      	negs	r2, r2
 8019410:	f043 0302 	orr.w	r3, r3, #2
 8019414:	9207      	str	r2, [sp, #28]
 8019416:	9304      	str	r3, [sp, #16]
 8019418:	783b      	ldrb	r3, [r7, #0]
 801941a:	2b2e      	cmp	r3, #46	; 0x2e
 801941c:	d10c      	bne.n	8019438 <_svfiprintf_r+0x124>
 801941e:	787b      	ldrb	r3, [r7, #1]
 8019420:	2b2a      	cmp	r3, #42	; 0x2a
 8019422:	d133      	bne.n	801948c <_svfiprintf_r+0x178>
 8019424:	9b03      	ldr	r3, [sp, #12]
 8019426:	1d1a      	adds	r2, r3, #4
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	9203      	str	r2, [sp, #12]
 801942c:	2b00      	cmp	r3, #0
 801942e:	bfb8      	it	lt
 8019430:	f04f 33ff 	movlt.w	r3, #4294967295
 8019434:	3702      	adds	r7, #2
 8019436:	9305      	str	r3, [sp, #20]
 8019438:	4d2e      	ldr	r5, [pc, #184]	; (80194f4 <_svfiprintf_r+0x1e0>)
 801943a:	7839      	ldrb	r1, [r7, #0]
 801943c:	2203      	movs	r2, #3
 801943e:	4628      	mov	r0, r5
 8019440:	f7e6 fede 	bl	8000200 <memchr>
 8019444:	b138      	cbz	r0, 8019456 <_svfiprintf_r+0x142>
 8019446:	2340      	movs	r3, #64	; 0x40
 8019448:	1b40      	subs	r0, r0, r5
 801944a:	fa03 f000 	lsl.w	r0, r3, r0
 801944e:	9b04      	ldr	r3, [sp, #16]
 8019450:	4303      	orrs	r3, r0
 8019452:	3701      	adds	r7, #1
 8019454:	9304      	str	r3, [sp, #16]
 8019456:	7839      	ldrb	r1, [r7, #0]
 8019458:	4827      	ldr	r0, [pc, #156]	; (80194f8 <_svfiprintf_r+0x1e4>)
 801945a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801945e:	2206      	movs	r2, #6
 8019460:	1c7e      	adds	r6, r7, #1
 8019462:	f7e6 fecd 	bl	8000200 <memchr>
 8019466:	2800      	cmp	r0, #0
 8019468:	d038      	beq.n	80194dc <_svfiprintf_r+0x1c8>
 801946a:	4b24      	ldr	r3, [pc, #144]	; (80194fc <_svfiprintf_r+0x1e8>)
 801946c:	bb13      	cbnz	r3, 80194b4 <_svfiprintf_r+0x1a0>
 801946e:	9b03      	ldr	r3, [sp, #12]
 8019470:	3307      	adds	r3, #7
 8019472:	f023 0307 	bic.w	r3, r3, #7
 8019476:	3308      	adds	r3, #8
 8019478:	9303      	str	r3, [sp, #12]
 801947a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801947c:	444b      	add	r3, r9
 801947e:	9309      	str	r3, [sp, #36]	; 0x24
 8019480:	e76d      	b.n	801935e <_svfiprintf_r+0x4a>
 8019482:	fb05 3202 	mla	r2, r5, r2, r3
 8019486:	2001      	movs	r0, #1
 8019488:	460f      	mov	r7, r1
 801948a:	e7a6      	b.n	80193da <_svfiprintf_r+0xc6>
 801948c:	2300      	movs	r3, #0
 801948e:	3701      	adds	r7, #1
 8019490:	9305      	str	r3, [sp, #20]
 8019492:	4619      	mov	r1, r3
 8019494:	250a      	movs	r5, #10
 8019496:	4638      	mov	r0, r7
 8019498:	f810 2b01 	ldrb.w	r2, [r0], #1
 801949c:	3a30      	subs	r2, #48	; 0x30
 801949e:	2a09      	cmp	r2, #9
 80194a0:	d903      	bls.n	80194aa <_svfiprintf_r+0x196>
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d0c8      	beq.n	8019438 <_svfiprintf_r+0x124>
 80194a6:	9105      	str	r1, [sp, #20]
 80194a8:	e7c6      	b.n	8019438 <_svfiprintf_r+0x124>
 80194aa:	fb05 2101 	mla	r1, r5, r1, r2
 80194ae:	2301      	movs	r3, #1
 80194b0:	4607      	mov	r7, r0
 80194b2:	e7f0      	b.n	8019496 <_svfiprintf_r+0x182>
 80194b4:	ab03      	add	r3, sp, #12
 80194b6:	9300      	str	r3, [sp, #0]
 80194b8:	4622      	mov	r2, r4
 80194ba:	4b11      	ldr	r3, [pc, #68]	; (8019500 <_svfiprintf_r+0x1ec>)
 80194bc:	a904      	add	r1, sp, #16
 80194be:	4640      	mov	r0, r8
 80194c0:	f7fc fc28 	bl	8015d14 <_printf_float>
 80194c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80194c8:	4681      	mov	r9, r0
 80194ca:	d1d6      	bne.n	801947a <_svfiprintf_r+0x166>
 80194cc:	89a3      	ldrh	r3, [r4, #12]
 80194ce:	065b      	lsls	r3, r3, #25
 80194d0:	f53f af35 	bmi.w	801933e <_svfiprintf_r+0x2a>
 80194d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80194d6:	b01d      	add	sp, #116	; 0x74
 80194d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194dc:	ab03      	add	r3, sp, #12
 80194de:	9300      	str	r3, [sp, #0]
 80194e0:	4622      	mov	r2, r4
 80194e2:	4b07      	ldr	r3, [pc, #28]	; (8019500 <_svfiprintf_r+0x1ec>)
 80194e4:	a904      	add	r1, sp, #16
 80194e6:	4640      	mov	r0, r8
 80194e8:	f7fc feca 	bl	8016280 <_printf_i>
 80194ec:	e7ea      	b.n	80194c4 <_svfiprintf_r+0x1b0>
 80194ee:	bf00      	nop
 80194f0:	0801c0c4 	.word	0x0801c0c4
 80194f4:	0801c0ca 	.word	0x0801c0ca
 80194f8:	0801c0ce 	.word	0x0801c0ce
 80194fc:	08015d15 	.word	0x08015d15
 8019500:	0801925f 	.word	0x0801925f

08019504 <__ascii_wctomb>:
 8019504:	b149      	cbz	r1, 801951a <__ascii_wctomb+0x16>
 8019506:	2aff      	cmp	r2, #255	; 0xff
 8019508:	bf85      	ittet	hi
 801950a:	238a      	movhi	r3, #138	; 0x8a
 801950c:	6003      	strhi	r3, [r0, #0]
 801950e:	700a      	strbls	r2, [r1, #0]
 8019510:	f04f 30ff 	movhi.w	r0, #4294967295
 8019514:	bf98      	it	ls
 8019516:	2001      	movls	r0, #1
 8019518:	4770      	bx	lr
 801951a:	4608      	mov	r0, r1
 801951c:	4770      	bx	lr

0801951e <memmove>:
 801951e:	4288      	cmp	r0, r1
 8019520:	b510      	push	{r4, lr}
 8019522:	eb01 0302 	add.w	r3, r1, r2
 8019526:	d807      	bhi.n	8019538 <memmove+0x1a>
 8019528:	1e42      	subs	r2, r0, #1
 801952a:	4299      	cmp	r1, r3
 801952c:	d00a      	beq.n	8019544 <memmove+0x26>
 801952e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019532:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019536:	e7f8      	b.n	801952a <memmove+0xc>
 8019538:	4283      	cmp	r3, r0
 801953a:	d9f5      	bls.n	8019528 <memmove+0xa>
 801953c:	1881      	adds	r1, r0, r2
 801953e:	1ad2      	subs	r2, r2, r3
 8019540:	42d3      	cmn	r3, r2
 8019542:	d100      	bne.n	8019546 <memmove+0x28>
 8019544:	bd10      	pop	{r4, pc}
 8019546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801954a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801954e:	e7f7      	b.n	8019540 <memmove+0x22>

08019550 <_realloc_r>:
 8019550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019552:	4607      	mov	r7, r0
 8019554:	4614      	mov	r4, r2
 8019556:	460e      	mov	r6, r1
 8019558:	b921      	cbnz	r1, 8019564 <_realloc_r+0x14>
 801955a:	4611      	mov	r1, r2
 801955c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019560:	f7fc baea 	b.w	8015b38 <_malloc_r>
 8019564:	b922      	cbnz	r2, 8019570 <_realloc_r+0x20>
 8019566:	f7fc fa99 	bl	8015a9c <_free_r>
 801956a:	4625      	mov	r5, r4
 801956c:	4628      	mov	r0, r5
 801956e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019570:	f000 f814 	bl	801959c <_malloc_usable_size_r>
 8019574:	42a0      	cmp	r0, r4
 8019576:	d20f      	bcs.n	8019598 <_realloc_r+0x48>
 8019578:	4621      	mov	r1, r4
 801957a:	4638      	mov	r0, r7
 801957c:	f7fc fadc 	bl	8015b38 <_malloc_r>
 8019580:	4605      	mov	r5, r0
 8019582:	2800      	cmp	r0, #0
 8019584:	d0f2      	beq.n	801956c <_realloc_r+0x1c>
 8019586:	4631      	mov	r1, r6
 8019588:	4622      	mov	r2, r4
 801958a:	f7fc fa73 	bl	8015a74 <memcpy>
 801958e:	4631      	mov	r1, r6
 8019590:	4638      	mov	r0, r7
 8019592:	f7fc fa83 	bl	8015a9c <_free_r>
 8019596:	e7e9      	b.n	801956c <_realloc_r+0x1c>
 8019598:	4635      	mov	r5, r6
 801959a:	e7e7      	b.n	801956c <_realloc_r+0x1c>

0801959c <_malloc_usable_size_r>:
 801959c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80195a0:	1f18      	subs	r0, r3, #4
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	bfbc      	itt	lt
 80195a6:	580b      	ldrlt	r3, [r1, r0]
 80195a8:	18c0      	addlt	r0, r0, r3
 80195aa:	4770      	bx	lr
 80195ac:	0000      	movs	r0, r0
	...

080195b0 <cos>:
 80195b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80195b2:	ec51 0b10 	vmov	r0, r1, d0
 80195b6:	4a1e      	ldr	r2, [pc, #120]	; (8019630 <cos+0x80>)
 80195b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80195bc:	4293      	cmp	r3, r2
 80195be:	dc06      	bgt.n	80195ce <cos+0x1e>
 80195c0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8019628 <cos+0x78>
 80195c4:	f001 f838 	bl	801a638 <__kernel_cos>
 80195c8:	ec51 0b10 	vmov	r0, r1, d0
 80195cc:	e007      	b.n	80195de <cos+0x2e>
 80195ce:	4a19      	ldr	r2, [pc, #100]	; (8019634 <cos+0x84>)
 80195d0:	4293      	cmp	r3, r2
 80195d2:	dd09      	ble.n	80195e8 <cos+0x38>
 80195d4:	ee10 2a10 	vmov	r2, s0
 80195d8:	460b      	mov	r3, r1
 80195da:	f7e6 fe65 	bl	80002a8 <__aeabi_dsub>
 80195de:	ec41 0b10 	vmov	d0, r0, r1
 80195e2:	b005      	add	sp, #20
 80195e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80195e8:	4668      	mov	r0, sp
 80195ea:	f000 fd7d 	bl	801a0e8 <__ieee754_rem_pio2>
 80195ee:	f000 0003 	and.w	r0, r0, #3
 80195f2:	2801      	cmp	r0, #1
 80195f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80195f8:	ed9d 0b00 	vldr	d0, [sp]
 80195fc:	d007      	beq.n	801960e <cos+0x5e>
 80195fe:	2802      	cmp	r0, #2
 8019600:	d00e      	beq.n	8019620 <cos+0x70>
 8019602:	2800      	cmp	r0, #0
 8019604:	d0de      	beq.n	80195c4 <cos+0x14>
 8019606:	2001      	movs	r0, #1
 8019608:	f001 fc1e 	bl	801ae48 <__kernel_sin>
 801960c:	e7dc      	b.n	80195c8 <cos+0x18>
 801960e:	f001 fc1b 	bl	801ae48 <__kernel_sin>
 8019612:	ec53 2b10 	vmov	r2, r3, d0
 8019616:	ee10 0a10 	vmov	r0, s0
 801961a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801961e:	e7de      	b.n	80195de <cos+0x2e>
 8019620:	f001 f80a 	bl	801a638 <__kernel_cos>
 8019624:	e7f5      	b.n	8019612 <cos+0x62>
 8019626:	bf00      	nop
	...
 8019630:	3fe921fb 	.word	0x3fe921fb
 8019634:	7fefffff 	.word	0x7fefffff

08019638 <sin>:
 8019638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801963a:	ec51 0b10 	vmov	r0, r1, d0
 801963e:	4a20      	ldr	r2, [pc, #128]	; (80196c0 <sin+0x88>)
 8019640:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019644:	4293      	cmp	r3, r2
 8019646:	dc07      	bgt.n	8019658 <sin+0x20>
 8019648:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80196b8 <sin+0x80>
 801964c:	2000      	movs	r0, #0
 801964e:	f001 fbfb 	bl	801ae48 <__kernel_sin>
 8019652:	ec51 0b10 	vmov	r0, r1, d0
 8019656:	e007      	b.n	8019668 <sin+0x30>
 8019658:	4a1a      	ldr	r2, [pc, #104]	; (80196c4 <sin+0x8c>)
 801965a:	4293      	cmp	r3, r2
 801965c:	dd09      	ble.n	8019672 <sin+0x3a>
 801965e:	ee10 2a10 	vmov	r2, s0
 8019662:	460b      	mov	r3, r1
 8019664:	f7e6 fe20 	bl	80002a8 <__aeabi_dsub>
 8019668:	ec41 0b10 	vmov	d0, r0, r1
 801966c:	b005      	add	sp, #20
 801966e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019672:	4668      	mov	r0, sp
 8019674:	f000 fd38 	bl	801a0e8 <__ieee754_rem_pio2>
 8019678:	f000 0003 	and.w	r0, r0, #3
 801967c:	2801      	cmp	r0, #1
 801967e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019682:	ed9d 0b00 	vldr	d0, [sp]
 8019686:	d004      	beq.n	8019692 <sin+0x5a>
 8019688:	2802      	cmp	r0, #2
 801968a:	d005      	beq.n	8019698 <sin+0x60>
 801968c:	b970      	cbnz	r0, 80196ac <sin+0x74>
 801968e:	2001      	movs	r0, #1
 8019690:	e7dd      	b.n	801964e <sin+0x16>
 8019692:	f000 ffd1 	bl	801a638 <__kernel_cos>
 8019696:	e7dc      	b.n	8019652 <sin+0x1a>
 8019698:	2001      	movs	r0, #1
 801969a:	f001 fbd5 	bl	801ae48 <__kernel_sin>
 801969e:	ec53 2b10 	vmov	r2, r3, d0
 80196a2:	ee10 0a10 	vmov	r0, s0
 80196a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80196aa:	e7dd      	b.n	8019668 <sin+0x30>
 80196ac:	f000 ffc4 	bl	801a638 <__kernel_cos>
 80196b0:	e7f5      	b.n	801969e <sin+0x66>
 80196b2:	bf00      	nop
 80196b4:	f3af 8000 	nop.w
	...
 80196c0:	3fe921fb 	.word	0x3fe921fb
 80196c4:	7fefffff 	.word	0x7fefffff

080196c8 <asin>:
 80196c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196ca:	ed2d 8b02 	vpush	{d8}
 80196ce:	4e26      	ldr	r6, [pc, #152]	; (8019768 <asin+0xa0>)
 80196d0:	b08b      	sub	sp, #44	; 0x2c
 80196d2:	ec55 4b10 	vmov	r4, r5, d0
 80196d6:	f000 f907 	bl	80198e8 <__ieee754_asin>
 80196da:	f996 3000 	ldrsb.w	r3, [r6]
 80196de:	eeb0 8a40 	vmov.f32	s16, s0
 80196e2:	eef0 8a60 	vmov.f32	s17, s1
 80196e6:	3301      	adds	r3, #1
 80196e8:	d036      	beq.n	8019758 <asin+0x90>
 80196ea:	4622      	mov	r2, r4
 80196ec:	462b      	mov	r3, r5
 80196ee:	4620      	mov	r0, r4
 80196f0:	4629      	mov	r1, r5
 80196f2:	f7e7 fa2b 	bl	8000b4c <__aeabi_dcmpun>
 80196f6:	4607      	mov	r7, r0
 80196f8:	bb70      	cbnz	r0, 8019758 <asin+0x90>
 80196fa:	ec45 4b10 	vmov	d0, r4, r5
 80196fe:	f001 fdff 	bl	801b300 <fabs>
 8019702:	2200      	movs	r2, #0
 8019704:	4b19      	ldr	r3, [pc, #100]	; (801976c <asin+0xa4>)
 8019706:	ec51 0b10 	vmov	r0, r1, d0
 801970a:	f7e7 fa15 	bl	8000b38 <__aeabi_dcmpgt>
 801970e:	b318      	cbz	r0, 8019758 <asin+0x90>
 8019710:	2301      	movs	r3, #1
 8019712:	9300      	str	r3, [sp, #0]
 8019714:	4816      	ldr	r0, [pc, #88]	; (8019770 <asin+0xa8>)
 8019716:	4b17      	ldr	r3, [pc, #92]	; (8019774 <asin+0xac>)
 8019718:	9301      	str	r3, [sp, #4]
 801971a:	9708      	str	r7, [sp, #32]
 801971c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8019720:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8019724:	f001 fe80 	bl	801b428 <nan>
 8019728:	f996 3000 	ldrsb.w	r3, [r6]
 801972c:	2b02      	cmp	r3, #2
 801972e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8019732:	d104      	bne.n	801973e <asin+0x76>
 8019734:	f7fc f964 	bl	8015a00 <__errno>
 8019738:	2321      	movs	r3, #33	; 0x21
 801973a:	6003      	str	r3, [r0, #0]
 801973c:	e004      	b.n	8019748 <asin+0x80>
 801973e:	4668      	mov	r0, sp
 8019740:	f001 fe6e 	bl	801b420 <matherr>
 8019744:	2800      	cmp	r0, #0
 8019746:	d0f5      	beq.n	8019734 <asin+0x6c>
 8019748:	9b08      	ldr	r3, [sp, #32]
 801974a:	b11b      	cbz	r3, 8019754 <asin+0x8c>
 801974c:	f7fc f958 	bl	8015a00 <__errno>
 8019750:	9b08      	ldr	r3, [sp, #32]
 8019752:	6003      	str	r3, [r0, #0]
 8019754:	ed9d 8b06 	vldr	d8, [sp, #24]
 8019758:	eeb0 0a48 	vmov.f32	s0, s16
 801975c:	eef0 0a68 	vmov.f32	s1, s17
 8019760:	b00b      	add	sp, #44	; 0x2c
 8019762:	ecbd 8b02 	vpop	{d8}
 8019766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019768:	20000368 	.word	0x20000368
 801976c:	3ff00000 	.word	0x3ff00000
 8019770:	0801c0c9 	.word	0x0801c0c9
 8019774:	0801c1d6 	.word	0x0801c1d6

08019778 <atan2>:
 8019778:	f000 bac6 	b.w	8019d08 <__ieee754_atan2>

0801977c <fmod>:
 801977c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019780:	ed2d 8b02 	vpush	{d8}
 8019784:	b08b      	sub	sp, #44	; 0x2c
 8019786:	ec55 4b10 	vmov	r4, r5, d0
 801978a:	ec57 6b11 	vmov	r6, r7, d1
 801978e:	f000 fb99 	bl	8019ec4 <__ieee754_fmod>
 8019792:	4b2a      	ldr	r3, [pc, #168]	; (801983c <fmod+0xc0>)
 8019794:	eeb0 8a40 	vmov.f32	s16, s0
 8019798:	eef0 8a60 	vmov.f32	s17, s1
 801979c:	f993 8000 	ldrsb.w	r8, [r3]
 80197a0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80197a4:	d030      	beq.n	8019808 <fmod+0x8c>
 80197a6:	4632      	mov	r2, r6
 80197a8:	463b      	mov	r3, r7
 80197aa:	4630      	mov	r0, r6
 80197ac:	4639      	mov	r1, r7
 80197ae:	f7e7 f9cd 	bl	8000b4c <__aeabi_dcmpun>
 80197b2:	bb48      	cbnz	r0, 8019808 <fmod+0x8c>
 80197b4:	4622      	mov	r2, r4
 80197b6:	462b      	mov	r3, r5
 80197b8:	4620      	mov	r0, r4
 80197ba:	4629      	mov	r1, r5
 80197bc:	f7e7 f9c6 	bl	8000b4c <__aeabi_dcmpun>
 80197c0:	4681      	mov	r9, r0
 80197c2:	bb08      	cbnz	r0, 8019808 <fmod+0x8c>
 80197c4:	2200      	movs	r2, #0
 80197c6:	2300      	movs	r3, #0
 80197c8:	4630      	mov	r0, r6
 80197ca:	4639      	mov	r1, r7
 80197cc:	f7e7 f98c 	bl	8000ae8 <__aeabi_dcmpeq>
 80197d0:	b1d0      	cbz	r0, 8019808 <fmod+0x8c>
 80197d2:	2301      	movs	r3, #1
 80197d4:	9300      	str	r3, [sp, #0]
 80197d6:	4b1a      	ldr	r3, [pc, #104]	; (8019840 <fmod+0xc4>)
 80197d8:	9301      	str	r3, [sp, #4]
 80197da:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80197de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80197e2:	f8cd 9020 	str.w	r9, [sp, #32]
 80197e6:	f1b8 0f00 	cmp.w	r8, #0
 80197ea:	d116      	bne.n	801981a <fmod+0x9e>
 80197ec:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80197f0:	4668      	mov	r0, sp
 80197f2:	f001 fe15 	bl	801b420 <matherr>
 80197f6:	b1d8      	cbz	r0, 8019830 <fmod+0xb4>
 80197f8:	9b08      	ldr	r3, [sp, #32]
 80197fa:	b11b      	cbz	r3, 8019804 <fmod+0x88>
 80197fc:	f7fc f900 	bl	8015a00 <__errno>
 8019800:	9b08      	ldr	r3, [sp, #32]
 8019802:	6003      	str	r3, [r0, #0]
 8019804:	ed9d 8b06 	vldr	d8, [sp, #24]
 8019808:	eeb0 0a48 	vmov.f32	s0, s16
 801980c:	eef0 0a68 	vmov.f32	s1, s17
 8019810:	b00b      	add	sp, #44	; 0x2c
 8019812:	ecbd 8b02 	vpop	{d8}
 8019816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801981a:	2200      	movs	r2, #0
 801981c:	2300      	movs	r3, #0
 801981e:	4610      	mov	r0, r2
 8019820:	4619      	mov	r1, r3
 8019822:	f7e7 f823 	bl	800086c <__aeabi_ddiv>
 8019826:	f1b8 0f02 	cmp.w	r8, #2
 801982a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801982e:	d1df      	bne.n	80197f0 <fmod+0x74>
 8019830:	f7fc f8e6 	bl	8015a00 <__errno>
 8019834:	2321      	movs	r3, #33	; 0x21
 8019836:	6003      	str	r3, [r0, #0]
 8019838:	e7de      	b.n	80197f8 <fmod+0x7c>
 801983a:	bf00      	nop
 801983c:	20000368 	.word	0x20000368
 8019840:	0801c1db 	.word	0x0801c1db

08019844 <sqrtf>:
 8019844:	b510      	push	{r4, lr}
 8019846:	ed2d 8b02 	vpush	{d8}
 801984a:	b08a      	sub	sp, #40	; 0x28
 801984c:	eeb0 8a40 	vmov.f32	s16, s0
 8019850:	f000 feec 	bl	801a62c <__ieee754_sqrtf>
 8019854:	4b21      	ldr	r3, [pc, #132]	; (80198dc <sqrtf+0x98>)
 8019856:	f993 4000 	ldrsb.w	r4, [r3]
 801985a:	1c63      	adds	r3, r4, #1
 801985c:	d02c      	beq.n	80198b8 <sqrtf+0x74>
 801985e:	eeb4 8a48 	vcmp.f32	s16, s16
 8019862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019866:	d627      	bvs.n	80198b8 <sqrtf+0x74>
 8019868:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801986c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019870:	d522      	bpl.n	80198b8 <sqrtf+0x74>
 8019872:	2301      	movs	r3, #1
 8019874:	9300      	str	r3, [sp, #0]
 8019876:	4b1a      	ldr	r3, [pc, #104]	; (80198e0 <sqrtf+0x9c>)
 8019878:	9301      	str	r3, [sp, #4]
 801987a:	ee18 0a10 	vmov	r0, s16
 801987e:	2300      	movs	r3, #0
 8019880:	9308      	str	r3, [sp, #32]
 8019882:	f7e6 fe71 	bl	8000568 <__aeabi_f2d>
 8019886:	2200      	movs	r2, #0
 8019888:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801988c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019890:	2300      	movs	r3, #0
 8019892:	b9ac      	cbnz	r4, 80198c0 <sqrtf+0x7c>
 8019894:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019898:	4668      	mov	r0, sp
 801989a:	f001 fdc1 	bl	801b420 <matherr>
 801989e:	b1b8      	cbz	r0, 80198d0 <sqrtf+0x8c>
 80198a0:	9b08      	ldr	r3, [sp, #32]
 80198a2:	b11b      	cbz	r3, 80198ac <sqrtf+0x68>
 80198a4:	f7fc f8ac 	bl	8015a00 <__errno>
 80198a8:	9b08      	ldr	r3, [sp, #32]
 80198aa:	6003      	str	r3, [r0, #0]
 80198ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80198b0:	f7e7 f9aa 	bl	8000c08 <__aeabi_d2f>
 80198b4:	ee00 0a10 	vmov	s0, r0
 80198b8:	b00a      	add	sp, #40	; 0x28
 80198ba:	ecbd 8b02 	vpop	{d8}
 80198be:	bd10      	pop	{r4, pc}
 80198c0:	4610      	mov	r0, r2
 80198c2:	4619      	mov	r1, r3
 80198c4:	f7e6 ffd2 	bl	800086c <__aeabi_ddiv>
 80198c8:	2c02      	cmp	r4, #2
 80198ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80198ce:	d1e3      	bne.n	8019898 <sqrtf+0x54>
 80198d0:	f7fc f896 	bl	8015a00 <__errno>
 80198d4:	2321      	movs	r3, #33	; 0x21
 80198d6:	6003      	str	r3, [r0, #0]
 80198d8:	e7e2      	b.n	80198a0 <sqrtf+0x5c>
 80198da:	bf00      	nop
 80198dc:	20000368 	.word	0x20000368
 80198e0:	0801c1e0 	.word	0x0801c1e0
 80198e4:	00000000 	.word	0x00000000

080198e8 <__ieee754_asin>:
 80198e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198ec:	ec55 4b10 	vmov	r4, r5, d0
 80198f0:	4bcb      	ldr	r3, [pc, #812]	; (8019c20 <__ieee754_asin+0x338>)
 80198f2:	b087      	sub	sp, #28
 80198f4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80198f8:	429f      	cmp	r7, r3
 80198fa:	9501      	str	r5, [sp, #4]
 80198fc:	dd31      	ble.n	8019962 <__ieee754_asin+0x7a>
 80198fe:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8019902:	ee10 3a10 	vmov	r3, s0
 8019906:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 801990a:	433b      	orrs	r3, r7
 801990c:	d117      	bne.n	801993e <__ieee754_asin+0x56>
 801990e:	a3aa      	add	r3, pc, #680	; (adr r3, 8019bb8 <__ieee754_asin+0x2d0>)
 8019910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019914:	ee10 0a10 	vmov	r0, s0
 8019918:	4629      	mov	r1, r5
 801991a:	f7e6 fe7d 	bl	8000618 <__aeabi_dmul>
 801991e:	a3a8      	add	r3, pc, #672	; (adr r3, 8019bc0 <__ieee754_asin+0x2d8>)
 8019920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019924:	4606      	mov	r6, r0
 8019926:	460f      	mov	r7, r1
 8019928:	4620      	mov	r0, r4
 801992a:	4629      	mov	r1, r5
 801992c:	f7e6 fe74 	bl	8000618 <__aeabi_dmul>
 8019930:	4602      	mov	r2, r0
 8019932:	460b      	mov	r3, r1
 8019934:	4630      	mov	r0, r6
 8019936:	4639      	mov	r1, r7
 8019938:	f7e6 fcb8 	bl	80002ac <__adddf3>
 801993c:	e00a      	b.n	8019954 <__ieee754_asin+0x6c>
 801993e:	ee10 2a10 	vmov	r2, s0
 8019942:	462b      	mov	r3, r5
 8019944:	4620      	mov	r0, r4
 8019946:	4629      	mov	r1, r5
 8019948:	f7e6 fcae 	bl	80002a8 <__aeabi_dsub>
 801994c:	4602      	mov	r2, r0
 801994e:	460b      	mov	r3, r1
 8019950:	f7e6 ff8c 	bl	800086c <__aeabi_ddiv>
 8019954:	4604      	mov	r4, r0
 8019956:	460d      	mov	r5, r1
 8019958:	ec45 4b10 	vmov	d0, r4, r5
 801995c:	b007      	add	sp, #28
 801995e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019962:	4bb0      	ldr	r3, [pc, #704]	; (8019c24 <__ieee754_asin+0x33c>)
 8019964:	429f      	cmp	r7, r3
 8019966:	dc11      	bgt.n	801998c <__ieee754_asin+0xa4>
 8019968:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801996c:	f280 80ae 	bge.w	8019acc <__ieee754_asin+0x1e4>
 8019970:	a395      	add	r3, pc, #596	; (adr r3, 8019bc8 <__ieee754_asin+0x2e0>)
 8019972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019976:	ee10 0a10 	vmov	r0, s0
 801997a:	4629      	mov	r1, r5
 801997c:	f7e6 fc96 	bl	80002ac <__adddf3>
 8019980:	2200      	movs	r2, #0
 8019982:	4ba9      	ldr	r3, [pc, #676]	; (8019c28 <__ieee754_asin+0x340>)
 8019984:	f7e7 f8d8 	bl	8000b38 <__aeabi_dcmpgt>
 8019988:	2800      	cmp	r0, #0
 801998a:	d1e5      	bne.n	8019958 <__ieee754_asin+0x70>
 801998c:	ec45 4b10 	vmov	d0, r4, r5
 8019990:	f001 fcb6 	bl	801b300 <fabs>
 8019994:	2000      	movs	r0, #0
 8019996:	ec53 2b10 	vmov	r2, r3, d0
 801999a:	49a3      	ldr	r1, [pc, #652]	; (8019c28 <__ieee754_asin+0x340>)
 801999c:	f7e6 fc84 	bl	80002a8 <__aeabi_dsub>
 80199a0:	2200      	movs	r2, #0
 80199a2:	4ba2      	ldr	r3, [pc, #648]	; (8019c2c <__ieee754_asin+0x344>)
 80199a4:	f7e6 fe38 	bl	8000618 <__aeabi_dmul>
 80199a8:	a389      	add	r3, pc, #548	; (adr r3, 8019bd0 <__ieee754_asin+0x2e8>)
 80199aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199ae:	4604      	mov	r4, r0
 80199b0:	460d      	mov	r5, r1
 80199b2:	f7e6 fe31 	bl	8000618 <__aeabi_dmul>
 80199b6:	a388      	add	r3, pc, #544	; (adr r3, 8019bd8 <__ieee754_asin+0x2f0>)
 80199b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199bc:	f7e6 fc76 	bl	80002ac <__adddf3>
 80199c0:	4622      	mov	r2, r4
 80199c2:	462b      	mov	r3, r5
 80199c4:	f7e6 fe28 	bl	8000618 <__aeabi_dmul>
 80199c8:	a385      	add	r3, pc, #532	; (adr r3, 8019be0 <__ieee754_asin+0x2f8>)
 80199ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199ce:	f7e6 fc6b 	bl	80002a8 <__aeabi_dsub>
 80199d2:	4622      	mov	r2, r4
 80199d4:	462b      	mov	r3, r5
 80199d6:	f7e6 fe1f 	bl	8000618 <__aeabi_dmul>
 80199da:	a383      	add	r3, pc, #524	; (adr r3, 8019be8 <__ieee754_asin+0x300>)
 80199dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199e0:	f7e6 fc64 	bl	80002ac <__adddf3>
 80199e4:	4622      	mov	r2, r4
 80199e6:	462b      	mov	r3, r5
 80199e8:	f7e6 fe16 	bl	8000618 <__aeabi_dmul>
 80199ec:	a380      	add	r3, pc, #512	; (adr r3, 8019bf0 <__ieee754_asin+0x308>)
 80199ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199f2:	f7e6 fc59 	bl	80002a8 <__aeabi_dsub>
 80199f6:	4622      	mov	r2, r4
 80199f8:	462b      	mov	r3, r5
 80199fa:	f7e6 fe0d 	bl	8000618 <__aeabi_dmul>
 80199fe:	a37e      	add	r3, pc, #504	; (adr r3, 8019bf8 <__ieee754_asin+0x310>)
 8019a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a04:	f7e6 fc52 	bl	80002ac <__adddf3>
 8019a08:	4622      	mov	r2, r4
 8019a0a:	462b      	mov	r3, r5
 8019a0c:	f7e6 fe04 	bl	8000618 <__aeabi_dmul>
 8019a10:	a37b      	add	r3, pc, #492	; (adr r3, 8019c00 <__ieee754_asin+0x318>)
 8019a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a16:	4680      	mov	r8, r0
 8019a18:	4689      	mov	r9, r1
 8019a1a:	4620      	mov	r0, r4
 8019a1c:	4629      	mov	r1, r5
 8019a1e:	f7e6 fdfb 	bl	8000618 <__aeabi_dmul>
 8019a22:	a379      	add	r3, pc, #484	; (adr r3, 8019c08 <__ieee754_asin+0x320>)
 8019a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a28:	f7e6 fc3e 	bl	80002a8 <__aeabi_dsub>
 8019a2c:	4622      	mov	r2, r4
 8019a2e:	462b      	mov	r3, r5
 8019a30:	f7e6 fdf2 	bl	8000618 <__aeabi_dmul>
 8019a34:	a376      	add	r3, pc, #472	; (adr r3, 8019c10 <__ieee754_asin+0x328>)
 8019a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a3a:	f7e6 fc37 	bl	80002ac <__adddf3>
 8019a3e:	4622      	mov	r2, r4
 8019a40:	462b      	mov	r3, r5
 8019a42:	f7e6 fde9 	bl	8000618 <__aeabi_dmul>
 8019a46:	a374      	add	r3, pc, #464	; (adr r3, 8019c18 <__ieee754_asin+0x330>)
 8019a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a4c:	f7e6 fc2c 	bl	80002a8 <__aeabi_dsub>
 8019a50:	4622      	mov	r2, r4
 8019a52:	462b      	mov	r3, r5
 8019a54:	f7e6 fde0 	bl	8000618 <__aeabi_dmul>
 8019a58:	4b73      	ldr	r3, [pc, #460]	; (8019c28 <__ieee754_asin+0x340>)
 8019a5a:	2200      	movs	r2, #0
 8019a5c:	f7e6 fc26 	bl	80002ac <__adddf3>
 8019a60:	ec45 4b10 	vmov	d0, r4, r5
 8019a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019a68:	f000 fd30 	bl	801a4cc <__ieee754_sqrt>
 8019a6c:	4b70      	ldr	r3, [pc, #448]	; (8019c30 <__ieee754_asin+0x348>)
 8019a6e:	429f      	cmp	r7, r3
 8019a70:	ec5b ab10 	vmov	sl, fp, d0
 8019a74:	f340 80de 	ble.w	8019c34 <__ieee754_asin+0x34c>
 8019a78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019a7c:	4640      	mov	r0, r8
 8019a7e:	4649      	mov	r1, r9
 8019a80:	f7e6 fef4 	bl	800086c <__aeabi_ddiv>
 8019a84:	4652      	mov	r2, sl
 8019a86:	465b      	mov	r3, fp
 8019a88:	f7e6 fdc6 	bl	8000618 <__aeabi_dmul>
 8019a8c:	4652      	mov	r2, sl
 8019a8e:	465b      	mov	r3, fp
 8019a90:	f7e6 fc0c 	bl	80002ac <__adddf3>
 8019a94:	4602      	mov	r2, r0
 8019a96:	460b      	mov	r3, r1
 8019a98:	f7e6 fc08 	bl	80002ac <__adddf3>
 8019a9c:	a348      	add	r3, pc, #288	; (adr r3, 8019bc0 <__ieee754_asin+0x2d8>)
 8019a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019aa2:	f7e6 fc01 	bl	80002a8 <__aeabi_dsub>
 8019aa6:	4602      	mov	r2, r0
 8019aa8:	460b      	mov	r3, r1
 8019aaa:	a143      	add	r1, pc, #268	; (adr r1, 8019bb8 <__ieee754_asin+0x2d0>)
 8019aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ab0:	f7e6 fbfa 	bl	80002a8 <__aeabi_dsub>
 8019ab4:	9b01      	ldr	r3, [sp, #4]
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	bfdc      	itt	le
 8019aba:	4602      	movle	r2, r0
 8019abc:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8019ac0:	4604      	mov	r4, r0
 8019ac2:	460d      	mov	r5, r1
 8019ac4:	bfdc      	itt	le
 8019ac6:	4614      	movle	r4, r2
 8019ac8:	461d      	movle	r5, r3
 8019aca:	e745      	b.n	8019958 <__ieee754_asin+0x70>
 8019acc:	ee10 2a10 	vmov	r2, s0
 8019ad0:	ee10 0a10 	vmov	r0, s0
 8019ad4:	462b      	mov	r3, r5
 8019ad6:	4629      	mov	r1, r5
 8019ad8:	f7e6 fd9e 	bl	8000618 <__aeabi_dmul>
 8019adc:	a33c      	add	r3, pc, #240	; (adr r3, 8019bd0 <__ieee754_asin+0x2e8>)
 8019ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ae2:	4606      	mov	r6, r0
 8019ae4:	460f      	mov	r7, r1
 8019ae6:	f7e6 fd97 	bl	8000618 <__aeabi_dmul>
 8019aea:	a33b      	add	r3, pc, #236	; (adr r3, 8019bd8 <__ieee754_asin+0x2f0>)
 8019aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019af0:	f7e6 fbdc 	bl	80002ac <__adddf3>
 8019af4:	4632      	mov	r2, r6
 8019af6:	463b      	mov	r3, r7
 8019af8:	f7e6 fd8e 	bl	8000618 <__aeabi_dmul>
 8019afc:	a338      	add	r3, pc, #224	; (adr r3, 8019be0 <__ieee754_asin+0x2f8>)
 8019afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b02:	f7e6 fbd1 	bl	80002a8 <__aeabi_dsub>
 8019b06:	4632      	mov	r2, r6
 8019b08:	463b      	mov	r3, r7
 8019b0a:	f7e6 fd85 	bl	8000618 <__aeabi_dmul>
 8019b0e:	a336      	add	r3, pc, #216	; (adr r3, 8019be8 <__ieee754_asin+0x300>)
 8019b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b14:	f7e6 fbca 	bl	80002ac <__adddf3>
 8019b18:	4632      	mov	r2, r6
 8019b1a:	463b      	mov	r3, r7
 8019b1c:	f7e6 fd7c 	bl	8000618 <__aeabi_dmul>
 8019b20:	a333      	add	r3, pc, #204	; (adr r3, 8019bf0 <__ieee754_asin+0x308>)
 8019b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b26:	f7e6 fbbf 	bl	80002a8 <__aeabi_dsub>
 8019b2a:	4632      	mov	r2, r6
 8019b2c:	463b      	mov	r3, r7
 8019b2e:	f7e6 fd73 	bl	8000618 <__aeabi_dmul>
 8019b32:	a331      	add	r3, pc, #196	; (adr r3, 8019bf8 <__ieee754_asin+0x310>)
 8019b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b38:	f7e6 fbb8 	bl	80002ac <__adddf3>
 8019b3c:	4632      	mov	r2, r6
 8019b3e:	463b      	mov	r3, r7
 8019b40:	f7e6 fd6a 	bl	8000618 <__aeabi_dmul>
 8019b44:	a32e      	add	r3, pc, #184	; (adr r3, 8019c00 <__ieee754_asin+0x318>)
 8019b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b4a:	4680      	mov	r8, r0
 8019b4c:	4689      	mov	r9, r1
 8019b4e:	4630      	mov	r0, r6
 8019b50:	4639      	mov	r1, r7
 8019b52:	f7e6 fd61 	bl	8000618 <__aeabi_dmul>
 8019b56:	a32c      	add	r3, pc, #176	; (adr r3, 8019c08 <__ieee754_asin+0x320>)
 8019b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b5c:	f7e6 fba4 	bl	80002a8 <__aeabi_dsub>
 8019b60:	4632      	mov	r2, r6
 8019b62:	463b      	mov	r3, r7
 8019b64:	f7e6 fd58 	bl	8000618 <__aeabi_dmul>
 8019b68:	a329      	add	r3, pc, #164	; (adr r3, 8019c10 <__ieee754_asin+0x328>)
 8019b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b6e:	f7e6 fb9d 	bl	80002ac <__adddf3>
 8019b72:	4632      	mov	r2, r6
 8019b74:	463b      	mov	r3, r7
 8019b76:	f7e6 fd4f 	bl	8000618 <__aeabi_dmul>
 8019b7a:	a327      	add	r3, pc, #156	; (adr r3, 8019c18 <__ieee754_asin+0x330>)
 8019b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b80:	f7e6 fb92 	bl	80002a8 <__aeabi_dsub>
 8019b84:	4632      	mov	r2, r6
 8019b86:	463b      	mov	r3, r7
 8019b88:	f7e6 fd46 	bl	8000618 <__aeabi_dmul>
 8019b8c:	2200      	movs	r2, #0
 8019b8e:	4b26      	ldr	r3, [pc, #152]	; (8019c28 <__ieee754_asin+0x340>)
 8019b90:	f7e6 fb8c 	bl	80002ac <__adddf3>
 8019b94:	4602      	mov	r2, r0
 8019b96:	460b      	mov	r3, r1
 8019b98:	4640      	mov	r0, r8
 8019b9a:	4649      	mov	r1, r9
 8019b9c:	f7e6 fe66 	bl	800086c <__aeabi_ddiv>
 8019ba0:	4622      	mov	r2, r4
 8019ba2:	462b      	mov	r3, r5
 8019ba4:	f7e6 fd38 	bl	8000618 <__aeabi_dmul>
 8019ba8:	4602      	mov	r2, r0
 8019baa:	460b      	mov	r3, r1
 8019bac:	4620      	mov	r0, r4
 8019bae:	4629      	mov	r1, r5
 8019bb0:	e6c2      	b.n	8019938 <__ieee754_asin+0x50>
 8019bb2:	bf00      	nop
 8019bb4:	f3af 8000 	nop.w
 8019bb8:	54442d18 	.word	0x54442d18
 8019bbc:	3ff921fb 	.word	0x3ff921fb
 8019bc0:	33145c07 	.word	0x33145c07
 8019bc4:	3c91a626 	.word	0x3c91a626
 8019bc8:	8800759c 	.word	0x8800759c
 8019bcc:	7e37e43c 	.word	0x7e37e43c
 8019bd0:	0dfdf709 	.word	0x0dfdf709
 8019bd4:	3f023de1 	.word	0x3f023de1
 8019bd8:	7501b288 	.word	0x7501b288
 8019bdc:	3f49efe0 	.word	0x3f49efe0
 8019be0:	b5688f3b 	.word	0xb5688f3b
 8019be4:	3fa48228 	.word	0x3fa48228
 8019be8:	0e884455 	.word	0x0e884455
 8019bec:	3fc9c155 	.word	0x3fc9c155
 8019bf0:	03eb6f7d 	.word	0x03eb6f7d
 8019bf4:	3fd4d612 	.word	0x3fd4d612
 8019bf8:	55555555 	.word	0x55555555
 8019bfc:	3fc55555 	.word	0x3fc55555
 8019c00:	b12e9282 	.word	0xb12e9282
 8019c04:	3fb3b8c5 	.word	0x3fb3b8c5
 8019c08:	1b8d0159 	.word	0x1b8d0159
 8019c0c:	3fe6066c 	.word	0x3fe6066c
 8019c10:	9c598ac8 	.word	0x9c598ac8
 8019c14:	40002ae5 	.word	0x40002ae5
 8019c18:	1c8a2d4b 	.word	0x1c8a2d4b
 8019c1c:	40033a27 	.word	0x40033a27
 8019c20:	3fefffff 	.word	0x3fefffff
 8019c24:	3fdfffff 	.word	0x3fdfffff
 8019c28:	3ff00000 	.word	0x3ff00000
 8019c2c:	3fe00000 	.word	0x3fe00000
 8019c30:	3fef3332 	.word	0x3fef3332
 8019c34:	ee10 2a10 	vmov	r2, s0
 8019c38:	ee10 0a10 	vmov	r0, s0
 8019c3c:	465b      	mov	r3, fp
 8019c3e:	4659      	mov	r1, fp
 8019c40:	f7e6 fb34 	bl	80002ac <__adddf3>
 8019c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019c48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019c4c:	4640      	mov	r0, r8
 8019c4e:	4649      	mov	r1, r9
 8019c50:	f7e6 fe0c 	bl	800086c <__aeabi_ddiv>
 8019c54:	4602      	mov	r2, r0
 8019c56:	460b      	mov	r3, r1
 8019c58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019c5c:	f7e6 fcdc 	bl	8000618 <__aeabi_dmul>
 8019c60:	2600      	movs	r6, #0
 8019c62:	4680      	mov	r8, r0
 8019c64:	4689      	mov	r9, r1
 8019c66:	4632      	mov	r2, r6
 8019c68:	465b      	mov	r3, fp
 8019c6a:	4630      	mov	r0, r6
 8019c6c:	4659      	mov	r1, fp
 8019c6e:	f7e6 fcd3 	bl	8000618 <__aeabi_dmul>
 8019c72:	4602      	mov	r2, r0
 8019c74:	460b      	mov	r3, r1
 8019c76:	4620      	mov	r0, r4
 8019c78:	4629      	mov	r1, r5
 8019c7a:	f7e6 fb15 	bl	80002a8 <__aeabi_dsub>
 8019c7e:	4632      	mov	r2, r6
 8019c80:	4604      	mov	r4, r0
 8019c82:	460d      	mov	r5, r1
 8019c84:	465b      	mov	r3, fp
 8019c86:	4650      	mov	r0, sl
 8019c88:	4659      	mov	r1, fp
 8019c8a:	f7e6 fb0f 	bl	80002ac <__adddf3>
 8019c8e:	4602      	mov	r2, r0
 8019c90:	460b      	mov	r3, r1
 8019c92:	4620      	mov	r0, r4
 8019c94:	4629      	mov	r1, r5
 8019c96:	f7e6 fde9 	bl	800086c <__aeabi_ddiv>
 8019c9a:	4602      	mov	r2, r0
 8019c9c:	460b      	mov	r3, r1
 8019c9e:	f7e6 fb05 	bl	80002ac <__adddf3>
 8019ca2:	4602      	mov	r2, r0
 8019ca4:	460b      	mov	r3, r1
 8019ca6:	a114      	add	r1, pc, #80	; (adr r1, 8019cf8 <__ieee754_asin+0x410>)
 8019ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cac:	f7e6 fafc 	bl	80002a8 <__aeabi_dsub>
 8019cb0:	4602      	mov	r2, r0
 8019cb2:	460b      	mov	r3, r1
 8019cb4:	4640      	mov	r0, r8
 8019cb6:	4649      	mov	r1, r9
 8019cb8:	f7e6 faf6 	bl	80002a8 <__aeabi_dsub>
 8019cbc:	465f      	mov	r7, fp
 8019cbe:	4604      	mov	r4, r0
 8019cc0:	460d      	mov	r5, r1
 8019cc2:	4632      	mov	r2, r6
 8019cc4:	465b      	mov	r3, fp
 8019cc6:	4630      	mov	r0, r6
 8019cc8:	4639      	mov	r1, r7
 8019cca:	f7e6 faef 	bl	80002ac <__adddf3>
 8019cce:	4602      	mov	r2, r0
 8019cd0:	460b      	mov	r3, r1
 8019cd2:	a10b      	add	r1, pc, #44	; (adr r1, 8019d00 <__ieee754_asin+0x418>)
 8019cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cd8:	f7e6 fae6 	bl	80002a8 <__aeabi_dsub>
 8019cdc:	4602      	mov	r2, r0
 8019cde:	460b      	mov	r3, r1
 8019ce0:	4620      	mov	r0, r4
 8019ce2:	4629      	mov	r1, r5
 8019ce4:	f7e6 fae0 	bl	80002a8 <__aeabi_dsub>
 8019ce8:	4602      	mov	r2, r0
 8019cea:	460b      	mov	r3, r1
 8019cec:	a104      	add	r1, pc, #16	; (adr r1, 8019d00 <__ieee754_asin+0x418>)
 8019cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cf2:	e6dd      	b.n	8019ab0 <__ieee754_asin+0x1c8>
 8019cf4:	f3af 8000 	nop.w
 8019cf8:	33145c07 	.word	0x33145c07
 8019cfc:	3c91a626 	.word	0x3c91a626
 8019d00:	54442d18 	.word	0x54442d18
 8019d04:	3fe921fb 	.word	0x3fe921fb

08019d08 <__ieee754_atan2>:
 8019d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019d0c:	ec57 6b11 	vmov	r6, r7, d1
 8019d10:	4273      	negs	r3, r6
 8019d12:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8019d16:	4333      	orrs	r3, r6
 8019d18:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8019ec0 <__ieee754_atan2+0x1b8>
 8019d1c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8019d20:	4573      	cmp	r3, lr
 8019d22:	ec51 0b10 	vmov	r0, r1, d0
 8019d26:	ee11 8a10 	vmov	r8, s2
 8019d2a:	d80a      	bhi.n	8019d42 <__ieee754_atan2+0x3a>
 8019d2c:	4244      	negs	r4, r0
 8019d2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019d32:	4304      	orrs	r4, r0
 8019d34:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8019d38:	4574      	cmp	r4, lr
 8019d3a:	468c      	mov	ip, r1
 8019d3c:	ee10 9a10 	vmov	r9, s0
 8019d40:	d907      	bls.n	8019d52 <__ieee754_atan2+0x4a>
 8019d42:	4632      	mov	r2, r6
 8019d44:	463b      	mov	r3, r7
 8019d46:	f7e6 fab1 	bl	80002ac <__adddf3>
 8019d4a:	ec41 0b10 	vmov	d0, r0, r1
 8019d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d52:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8019d56:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019d5a:	4334      	orrs	r4, r6
 8019d5c:	d103      	bne.n	8019d66 <__ieee754_atan2+0x5e>
 8019d5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019d62:	f001 b92d 	b.w	801afc0 <atan>
 8019d66:	17bc      	asrs	r4, r7, #30
 8019d68:	f004 0402 	and.w	r4, r4, #2
 8019d6c:	ea53 0909 	orrs.w	r9, r3, r9
 8019d70:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8019d74:	d107      	bne.n	8019d86 <__ieee754_atan2+0x7e>
 8019d76:	2c02      	cmp	r4, #2
 8019d78:	d073      	beq.n	8019e62 <__ieee754_atan2+0x15a>
 8019d7a:	2c03      	cmp	r4, #3
 8019d7c:	d1e5      	bne.n	8019d4a <__ieee754_atan2+0x42>
 8019d7e:	a13e      	add	r1, pc, #248	; (adr r1, 8019e78 <__ieee754_atan2+0x170>)
 8019d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d84:	e7e1      	b.n	8019d4a <__ieee754_atan2+0x42>
 8019d86:	ea52 0808 	orrs.w	r8, r2, r8
 8019d8a:	d106      	bne.n	8019d9a <__ieee754_atan2+0x92>
 8019d8c:	f1bc 0f00 	cmp.w	ip, #0
 8019d90:	da6b      	bge.n	8019e6a <__ieee754_atan2+0x162>
 8019d92:	a13b      	add	r1, pc, #236	; (adr r1, 8019e80 <__ieee754_atan2+0x178>)
 8019d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d98:	e7d7      	b.n	8019d4a <__ieee754_atan2+0x42>
 8019d9a:	4572      	cmp	r2, lr
 8019d9c:	d120      	bne.n	8019de0 <__ieee754_atan2+0xd8>
 8019d9e:	4293      	cmp	r3, r2
 8019da0:	d111      	bne.n	8019dc6 <__ieee754_atan2+0xbe>
 8019da2:	2c02      	cmp	r4, #2
 8019da4:	d007      	beq.n	8019db6 <__ieee754_atan2+0xae>
 8019da6:	2c03      	cmp	r4, #3
 8019da8:	d009      	beq.n	8019dbe <__ieee754_atan2+0xb6>
 8019daa:	2c01      	cmp	r4, #1
 8019dac:	d155      	bne.n	8019e5a <__ieee754_atan2+0x152>
 8019dae:	a136      	add	r1, pc, #216	; (adr r1, 8019e88 <__ieee754_atan2+0x180>)
 8019db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019db4:	e7c9      	b.n	8019d4a <__ieee754_atan2+0x42>
 8019db6:	a136      	add	r1, pc, #216	; (adr r1, 8019e90 <__ieee754_atan2+0x188>)
 8019db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019dbc:	e7c5      	b.n	8019d4a <__ieee754_atan2+0x42>
 8019dbe:	a136      	add	r1, pc, #216	; (adr r1, 8019e98 <__ieee754_atan2+0x190>)
 8019dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019dc4:	e7c1      	b.n	8019d4a <__ieee754_atan2+0x42>
 8019dc6:	2c02      	cmp	r4, #2
 8019dc8:	d04b      	beq.n	8019e62 <__ieee754_atan2+0x15a>
 8019dca:	2c03      	cmp	r4, #3
 8019dcc:	d0d7      	beq.n	8019d7e <__ieee754_atan2+0x76>
 8019dce:	2c01      	cmp	r4, #1
 8019dd0:	f04f 0000 	mov.w	r0, #0
 8019dd4:	d102      	bne.n	8019ddc <__ieee754_atan2+0xd4>
 8019dd6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019dda:	e7b6      	b.n	8019d4a <__ieee754_atan2+0x42>
 8019ddc:	2100      	movs	r1, #0
 8019dde:	e7b4      	b.n	8019d4a <__ieee754_atan2+0x42>
 8019de0:	4573      	cmp	r3, lr
 8019de2:	d0d3      	beq.n	8019d8c <__ieee754_atan2+0x84>
 8019de4:	1a9b      	subs	r3, r3, r2
 8019de6:	151b      	asrs	r3, r3, #20
 8019de8:	2b3c      	cmp	r3, #60	; 0x3c
 8019dea:	dc1e      	bgt.n	8019e2a <__ieee754_atan2+0x122>
 8019dec:	2f00      	cmp	r7, #0
 8019dee:	da01      	bge.n	8019df4 <__ieee754_atan2+0xec>
 8019df0:	333c      	adds	r3, #60	; 0x3c
 8019df2:	db1e      	blt.n	8019e32 <__ieee754_atan2+0x12a>
 8019df4:	4632      	mov	r2, r6
 8019df6:	463b      	mov	r3, r7
 8019df8:	f7e6 fd38 	bl	800086c <__aeabi_ddiv>
 8019dfc:	ec41 0b10 	vmov	d0, r0, r1
 8019e00:	f001 fa7e 	bl	801b300 <fabs>
 8019e04:	f001 f8dc 	bl	801afc0 <atan>
 8019e08:	ec51 0b10 	vmov	r0, r1, d0
 8019e0c:	2c01      	cmp	r4, #1
 8019e0e:	d013      	beq.n	8019e38 <__ieee754_atan2+0x130>
 8019e10:	2c02      	cmp	r4, #2
 8019e12:	d015      	beq.n	8019e40 <__ieee754_atan2+0x138>
 8019e14:	2c00      	cmp	r4, #0
 8019e16:	d098      	beq.n	8019d4a <__ieee754_atan2+0x42>
 8019e18:	a321      	add	r3, pc, #132	; (adr r3, 8019ea0 <__ieee754_atan2+0x198>)
 8019e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e1e:	f7e6 fa43 	bl	80002a8 <__aeabi_dsub>
 8019e22:	a321      	add	r3, pc, #132	; (adr r3, 8019ea8 <__ieee754_atan2+0x1a0>)
 8019e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e28:	e014      	b.n	8019e54 <__ieee754_atan2+0x14c>
 8019e2a:	a121      	add	r1, pc, #132	; (adr r1, 8019eb0 <__ieee754_atan2+0x1a8>)
 8019e2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e30:	e7ec      	b.n	8019e0c <__ieee754_atan2+0x104>
 8019e32:	2000      	movs	r0, #0
 8019e34:	2100      	movs	r1, #0
 8019e36:	e7e9      	b.n	8019e0c <__ieee754_atan2+0x104>
 8019e38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019e3c:	4619      	mov	r1, r3
 8019e3e:	e784      	b.n	8019d4a <__ieee754_atan2+0x42>
 8019e40:	a317      	add	r3, pc, #92	; (adr r3, 8019ea0 <__ieee754_atan2+0x198>)
 8019e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e46:	f7e6 fa2f 	bl	80002a8 <__aeabi_dsub>
 8019e4a:	4602      	mov	r2, r0
 8019e4c:	460b      	mov	r3, r1
 8019e4e:	a116      	add	r1, pc, #88	; (adr r1, 8019ea8 <__ieee754_atan2+0x1a0>)
 8019e50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e54:	f7e6 fa28 	bl	80002a8 <__aeabi_dsub>
 8019e58:	e777      	b.n	8019d4a <__ieee754_atan2+0x42>
 8019e5a:	a117      	add	r1, pc, #92	; (adr r1, 8019eb8 <__ieee754_atan2+0x1b0>)
 8019e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e60:	e773      	b.n	8019d4a <__ieee754_atan2+0x42>
 8019e62:	a111      	add	r1, pc, #68	; (adr r1, 8019ea8 <__ieee754_atan2+0x1a0>)
 8019e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e68:	e76f      	b.n	8019d4a <__ieee754_atan2+0x42>
 8019e6a:	a111      	add	r1, pc, #68	; (adr r1, 8019eb0 <__ieee754_atan2+0x1a8>)
 8019e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e70:	e76b      	b.n	8019d4a <__ieee754_atan2+0x42>
 8019e72:	bf00      	nop
 8019e74:	f3af 8000 	nop.w
 8019e78:	54442d18 	.word	0x54442d18
 8019e7c:	c00921fb 	.word	0xc00921fb
 8019e80:	54442d18 	.word	0x54442d18
 8019e84:	bff921fb 	.word	0xbff921fb
 8019e88:	54442d18 	.word	0x54442d18
 8019e8c:	bfe921fb 	.word	0xbfe921fb
 8019e90:	7f3321d2 	.word	0x7f3321d2
 8019e94:	4002d97c 	.word	0x4002d97c
 8019e98:	7f3321d2 	.word	0x7f3321d2
 8019e9c:	c002d97c 	.word	0xc002d97c
 8019ea0:	33145c07 	.word	0x33145c07
 8019ea4:	3ca1a626 	.word	0x3ca1a626
 8019ea8:	54442d18 	.word	0x54442d18
 8019eac:	400921fb 	.word	0x400921fb
 8019eb0:	54442d18 	.word	0x54442d18
 8019eb4:	3ff921fb 	.word	0x3ff921fb
 8019eb8:	54442d18 	.word	0x54442d18
 8019ebc:	3fe921fb 	.word	0x3fe921fb
 8019ec0:	7ff00000 	.word	0x7ff00000

08019ec4 <__ieee754_fmod>:
 8019ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ec8:	ec53 2b11 	vmov	r2, r3, d1
 8019ecc:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8019ed0:	ea5e 0402 	orrs.w	r4, lr, r2
 8019ed4:	ec51 0b10 	vmov	r0, r1, d0
 8019ed8:	461e      	mov	r6, r3
 8019eda:	ee11 5a10 	vmov	r5, s2
 8019ede:	4694      	mov	ip, r2
 8019ee0:	d00c      	beq.n	8019efc <__ieee754_fmod+0x38>
 8019ee2:	4c7a      	ldr	r4, [pc, #488]	; (801a0cc <__ieee754_fmod+0x208>)
 8019ee4:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8019ee8:	45a0      	cmp	r8, r4
 8019eea:	4689      	mov	r9, r1
 8019eec:	dc06      	bgt.n	8019efc <__ieee754_fmod+0x38>
 8019eee:	4254      	negs	r4, r2
 8019ef0:	4314      	orrs	r4, r2
 8019ef2:	4f77      	ldr	r7, [pc, #476]	; (801a0d0 <__ieee754_fmod+0x20c>)
 8019ef4:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8019ef8:	42bc      	cmp	r4, r7
 8019efa:	d909      	bls.n	8019f10 <__ieee754_fmod+0x4c>
 8019efc:	f7e6 fb8c 	bl	8000618 <__aeabi_dmul>
 8019f00:	4602      	mov	r2, r0
 8019f02:	460b      	mov	r3, r1
 8019f04:	f7e6 fcb2 	bl	800086c <__aeabi_ddiv>
 8019f08:	ec41 0b10 	vmov	d0, r0, r1
 8019f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f10:	45f0      	cmp	r8, lr
 8019f12:	ee10 2a10 	vmov	r2, s0
 8019f16:	4607      	mov	r7, r0
 8019f18:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8019f1c:	dc0a      	bgt.n	8019f34 <__ieee754_fmod+0x70>
 8019f1e:	dbf3      	blt.n	8019f08 <__ieee754_fmod+0x44>
 8019f20:	42a8      	cmp	r0, r5
 8019f22:	d3f1      	bcc.n	8019f08 <__ieee754_fmod+0x44>
 8019f24:	d106      	bne.n	8019f34 <__ieee754_fmod+0x70>
 8019f26:	496b      	ldr	r1, [pc, #428]	; (801a0d4 <__ieee754_fmod+0x210>)
 8019f28:	0fe4      	lsrs	r4, r4, #31
 8019f2a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8019f2e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8019f32:	e7e9      	b.n	8019f08 <__ieee754_fmod+0x44>
 8019f34:	4b68      	ldr	r3, [pc, #416]	; (801a0d8 <__ieee754_fmod+0x214>)
 8019f36:	4598      	cmp	r8, r3
 8019f38:	dc49      	bgt.n	8019fce <__ieee754_fmod+0x10a>
 8019f3a:	f1b8 0f00 	cmp.w	r8, #0
 8019f3e:	d13d      	bne.n	8019fbc <__ieee754_fmod+0xf8>
 8019f40:	4866      	ldr	r0, [pc, #408]	; (801a0dc <__ieee754_fmod+0x218>)
 8019f42:	4611      	mov	r1, r2
 8019f44:	2900      	cmp	r1, #0
 8019f46:	dc36      	bgt.n	8019fb6 <__ieee754_fmod+0xf2>
 8019f48:	459e      	cmp	lr, r3
 8019f4a:	dc51      	bgt.n	8019ff0 <__ieee754_fmod+0x12c>
 8019f4c:	f1be 0f00 	cmp.w	lr, #0
 8019f50:	d145      	bne.n	8019fde <__ieee754_fmod+0x11a>
 8019f52:	4b62      	ldr	r3, [pc, #392]	; (801a0dc <__ieee754_fmod+0x218>)
 8019f54:	4629      	mov	r1, r5
 8019f56:	2900      	cmp	r1, #0
 8019f58:	dc3e      	bgt.n	8019fd8 <__ieee754_fmod+0x114>
 8019f5a:	4961      	ldr	r1, [pc, #388]	; (801a0e0 <__ieee754_fmod+0x21c>)
 8019f5c:	4288      	cmp	r0, r1
 8019f5e:	db4c      	blt.n	8019ffa <__ieee754_fmod+0x136>
 8019f60:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8019f64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019f68:	4a5d      	ldr	r2, [pc, #372]	; (801a0e0 <__ieee754_fmod+0x21c>)
 8019f6a:	4293      	cmp	r3, r2
 8019f6c:	db59      	blt.n	801a022 <__ieee754_fmod+0x15e>
 8019f6e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8019f72:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8019f76:	1ac0      	subs	r0, r0, r3
 8019f78:	1b8a      	subs	r2, r1, r6
 8019f7a:	eba7 050c 	sub.w	r5, r7, ip
 8019f7e:	2800      	cmp	r0, #0
 8019f80:	d166      	bne.n	801a050 <__ieee754_fmod+0x18c>
 8019f82:	4567      	cmp	r7, ip
 8019f84:	bf38      	it	cc
 8019f86:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8019f8a:	2a00      	cmp	r2, #0
 8019f8c:	bfbc      	itt	lt
 8019f8e:	463d      	movlt	r5, r7
 8019f90:	460a      	movlt	r2, r1
 8019f92:	ea52 0105 	orrs.w	r1, r2, r5
 8019f96:	d0c6      	beq.n	8019f26 <__ieee754_fmod+0x62>
 8019f98:	494f      	ldr	r1, [pc, #316]	; (801a0d8 <__ieee754_fmod+0x214>)
 8019f9a:	428a      	cmp	r2, r1
 8019f9c:	dd6d      	ble.n	801a07a <__ieee754_fmod+0x1b6>
 8019f9e:	4950      	ldr	r1, [pc, #320]	; (801a0e0 <__ieee754_fmod+0x21c>)
 8019fa0:	428b      	cmp	r3, r1
 8019fa2:	db70      	blt.n	801a086 <__ieee754_fmod+0x1c2>
 8019fa4:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8019fa8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8019fac:	4314      	orrs	r4, r2
 8019fae:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8019fb2:	4628      	mov	r0, r5
 8019fb4:	e7a8      	b.n	8019f08 <__ieee754_fmod+0x44>
 8019fb6:	3801      	subs	r0, #1
 8019fb8:	0049      	lsls	r1, r1, #1
 8019fba:	e7c3      	b.n	8019f44 <__ieee754_fmod+0x80>
 8019fbc:	4848      	ldr	r0, [pc, #288]	; (801a0e0 <__ieee754_fmod+0x21c>)
 8019fbe:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8019fc2:	0049      	lsls	r1, r1, #1
 8019fc4:	2900      	cmp	r1, #0
 8019fc6:	f100 30ff 	add.w	r0, r0, #4294967295
 8019fca:	dcfa      	bgt.n	8019fc2 <__ieee754_fmod+0xfe>
 8019fcc:	e7bc      	b.n	8019f48 <__ieee754_fmod+0x84>
 8019fce:	ea4f 5028 	mov.w	r0, r8, asr #20
 8019fd2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8019fd6:	e7b7      	b.n	8019f48 <__ieee754_fmod+0x84>
 8019fd8:	3b01      	subs	r3, #1
 8019fda:	0049      	lsls	r1, r1, #1
 8019fdc:	e7bb      	b.n	8019f56 <__ieee754_fmod+0x92>
 8019fde:	4b40      	ldr	r3, [pc, #256]	; (801a0e0 <__ieee754_fmod+0x21c>)
 8019fe0:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8019fe4:	0049      	lsls	r1, r1, #1
 8019fe6:	2900      	cmp	r1, #0
 8019fe8:	f103 33ff 	add.w	r3, r3, #4294967295
 8019fec:	dcfa      	bgt.n	8019fe4 <__ieee754_fmod+0x120>
 8019fee:	e7b4      	b.n	8019f5a <__ieee754_fmod+0x96>
 8019ff0:	ea4f 532e 	mov.w	r3, lr, asr #20
 8019ff4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019ff8:	e7af      	b.n	8019f5a <__ieee754_fmod+0x96>
 8019ffa:	1a0f      	subs	r7, r1, r0
 8019ffc:	2f1f      	cmp	r7, #31
 8019ffe:	dc0a      	bgt.n	801a016 <__ieee754_fmod+0x152>
 801a000:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 801a004:	fa08 f807 	lsl.w	r8, r8, r7
 801a008:	fa22 f101 	lsr.w	r1, r2, r1
 801a00c:	ea41 0108 	orr.w	r1, r1, r8
 801a010:	fa02 f707 	lsl.w	r7, r2, r7
 801a014:	e7a8      	b.n	8019f68 <__ieee754_fmod+0xa4>
 801a016:	4933      	ldr	r1, [pc, #204]	; (801a0e4 <__ieee754_fmod+0x220>)
 801a018:	1a09      	subs	r1, r1, r0
 801a01a:	fa02 f101 	lsl.w	r1, r2, r1
 801a01e:	2700      	movs	r7, #0
 801a020:	e7a2      	b.n	8019f68 <__ieee754_fmod+0xa4>
 801a022:	eba2 0c03 	sub.w	ip, r2, r3
 801a026:	f1bc 0f1f 	cmp.w	ip, #31
 801a02a:	dc0a      	bgt.n	801a042 <__ieee754_fmod+0x17e>
 801a02c:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 801a030:	fa0e fe0c 	lsl.w	lr, lr, ip
 801a034:	fa25 f606 	lsr.w	r6, r5, r6
 801a038:	ea46 060e 	orr.w	r6, r6, lr
 801a03c:	fa05 fc0c 	lsl.w	ip, r5, ip
 801a040:	e799      	b.n	8019f76 <__ieee754_fmod+0xb2>
 801a042:	4e28      	ldr	r6, [pc, #160]	; (801a0e4 <__ieee754_fmod+0x220>)
 801a044:	1af6      	subs	r6, r6, r3
 801a046:	fa05 f606 	lsl.w	r6, r5, r6
 801a04a:	f04f 0c00 	mov.w	ip, #0
 801a04e:	e792      	b.n	8019f76 <__ieee754_fmod+0xb2>
 801a050:	4567      	cmp	r7, ip
 801a052:	bf38      	it	cc
 801a054:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801a058:	2a00      	cmp	r2, #0
 801a05a:	da05      	bge.n	801a068 <__ieee754_fmod+0x1a4>
 801a05c:	0ffa      	lsrs	r2, r7, #31
 801a05e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801a062:	007f      	lsls	r7, r7, #1
 801a064:	3801      	subs	r0, #1
 801a066:	e787      	b.n	8019f78 <__ieee754_fmod+0xb4>
 801a068:	ea52 0105 	orrs.w	r1, r2, r5
 801a06c:	f43f af5b 	beq.w	8019f26 <__ieee754_fmod+0x62>
 801a070:	0fe9      	lsrs	r1, r5, #31
 801a072:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 801a076:	006f      	lsls	r7, r5, #1
 801a078:	e7f4      	b.n	801a064 <__ieee754_fmod+0x1a0>
 801a07a:	0fe8      	lsrs	r0, r5, #31
 801a07c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a080:	006d      	lsls	r5, r5, #1
 801a082:	3b01      	subs	r3, #1
 801a084:	e789      	b.n	8019f9a <__ieee754_fmod+0xd6>
 801a086:	1ac9      	subs	r1, r1, r3
 801a088:	2914      	cmp	r1, #20
 801a08a:	dc0a      	bgt.n	801a0a2 <__ieee754_fmod+0x1de>
 801a08c:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 801a090:	fa02 f303 	lsl.w	r3, r2, r3
 801a094:	40cd      	lsrs	r5, r1
 801a096:	432b      	orrs	r3, r5
 801a098:	410a      	asrs	r2, r1
 801a09a:	ea42 0104 	orr.w	r1, r2, r4
 801a09e:	4618      	mov	r0, r3
 801a0a0:	e732      	b.n	8019f08 <__ieee754_fmod+0x44>
 801a0a2:	291f      	cmp	r1, #31
 801a0a4:	dc07      	bgt.n	801a0b6 <__ieee754_fmod+0x1f2>
 801a0a6:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 801a0aa:	40cd      	lsrs	r5, r1
 801a0ac:	fa02 f303 	lsl.w	r3, r2, r3
 801a0b0:	432b      	orrs	r3, r5
 801a0b2:	4622      	mov	r2, r4
 801a0b4:	e7f1      	b.n	801a09a <__ieee754_fmod+0x1d6>
 801a0b6:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801a0ba:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801a0be:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801a0c2:	33e2      	adds	r3, #226	; 0xe2
 801a0c4:	fa42 f303 	asr.w	r3, r2, r3
 801a0c8:	e7f3      	b.n	801a0b2 <__ieee754_fmod+0x1ee>
 801a0ca:	bf00      	nop
 801a0cc:	7fefffff 	.word	0x7fefffff
 801a0d0:	7ff00000 	.word	0x7ff00000
 801a0d4:	0801c1e8 	.word	0x0801c1e8
 801a0d8:	000fffff 	.word	0x000fffff
 801a0dc:	fffffbed 	.word	0xfffffbed
 801a0e0:	fffffc02 	.word	0xfffffc02
 801a0e4:	fffffbe2 	.word	0xfffffbe2

0801a0e8 <__ieee754_rem_pio2>:
 801a0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0ec:	ec57 6b10 	vmov	r6, r7, d0
 801a0f0:	4bc3      	ldr	r3, [pc, #780]	; (801a400 <__ieee754_rem_pio2+0x318>)
 801a0f2:	b08d      	sub	sp, #52	; 0x34
 801a0f4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801a0f8:	4598      	cmp	r8, r3
 801a0fa:	4604      	mov	r4, r0
 801a0fc:	9704      	str	r7, [sp, #16]
 801a0fe:	dc07      	bgt.n	801a110 <__ieee754_rem_pio2+0x28>
 801a100:	2200      	movs	r2, #0
 801a102:	2300      	movs	r3, #0
 801a104:	ed84 0b00 	vstr	d0, [r4]
 801a108:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a10c:	2500      	movs	r5, #0
 801a10e:	e027      	b.n	801a160 <__ieee754_rem_pio2+0x78>
 801a110:	4bbc      	ldr	r3, [pc, #752]	; (801a404 <__ieee754_rem_pio2+0x31c>)
 801a112:	4598      	cmp	r8, r3
 801a114:	dc75      	bgt.n	801a202 <__ieee754_rem_pio2+0x11a>
 801a116:	9b04      	ldr	r3, [sp, #16]
 801a118:	4dbb      	ldr	r5, [pc, #748]	; (801a408 <__ieee754_rem_pio2+0x320>)
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	ee10 0a10 	vmov	r0, s0
 801a120:	a3a9      	add	r3, pc, #676	; (adr r3, 801a3c8 <__ieee754_rem_pio2+0x2e0>)
 801a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a126:	4639      	mov	r1, r7
 801a128:	dd36      	ble.n	801a198 <__ieee754_rem_pio2+0xb0>
 801a12a:	f7e6 f8bd 	bl	80002a8 <__aeabi_dsub>
 801a12e:	45a8      	cmp	r8, r5
 801a130:	4606      	mov	r6, r0
 801a132:	460f      	mov	r7, r1
 801a134:	d018      	beq.n	801a168 <__ieee754_rem_pio2+0x80>
 801a136:	a3a6      	add	r3, pc, #664	; (adr r3, 801a3d0 <__ieee754_rem_pio2+0x2e8>)
 801a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a13c:	f7e6 f8b4 	bl	80002a8 <__aeabi_dsub>
 801a140:	4602      	mov	r2, r0
 801a142:	460b      	mov	r3, r1
 801a144:	e9c4 2300 	strd	r2, r3, [r4]
 801a148:	4630      	mov	r0, r6
 801a14a:	4639      	mov	r1, r7
 801a14c:	f7e6 f8ac 	bl	80002a8 <__aeabi_dsub>
 801a150:	a39f      	add	r3, pc, #636	; (adr r3, 801a3d0 <__ieee754_rem_pio2+0x2e8>)
 801a152:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a156:	f7e6 f8a7 	bl	80002a8 <__aeabi_dsub>
 801a15a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a15e:	2501      	movs	r5, #1
 801a160:	4628      	mov	r0, r5
 801a162:	b00d      	add	sp, #52	; 0x34
 801a164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a168:	a39b      	add	r3, pc, #620	; (adr r3, 801a3d8 <__ieee754_rem_pio2+0x2f0>)
 801a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a16e:	f7e6 f89b 	bl	80002a8 <__aeabi_dsub>
 801a172:	a39b      	add	r3, pc, #620	; (adr r3, 801a3e0 <__ieee754_rem_pio2+0x2f8>)
 801a174:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a178:	4606      	mov	r6, r0
 801a17a:	460f      	mov	r7, r1
 801a17c:	f7e6 f894 	bl	80002a8 <__aeabi_dsub>
 801a180:	4602      	mov	r2, r0
 801a182:	460b      	mov	r3, r1
 801a184:	e9c4 2300 	strd	r2, r3, [r4]
 801a188:	4630      	mov	r0, r6
 801a18a:	4639      	mov	r1, r7
 801a18c:	f7e6 f88c 	bl	80002a8 <__aeabi_dsub>
 801a190:	a393      	add	r3, pc, #588	; (adr r3, 801a3e0 <__ieee754_rem_pio2+0x2f8>)
 801a192:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a196:	e7de      	b.n	801a156 <__ieee754_rem_pio2+0x6e>
 801a198:	f7e6 f888 	bl	80002ac <__adddf3>
 801a19c:	45a8      	cmp	r8, r5
 801a19e:	4606      	mov	r6, r0
 801a1a0:	460f      	mov	r7, r1
 801a1a2:	d016      	beq.n	801a1d2 <__ieee754_rem_pio2+0xea>
 801a1a4:	a38a      	add	r3, pc, #552	; (adr r3, 801a3d0 <__ieee754_rem_pio2+0x2e8>)
 801a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1aa:	f7e6 f87f 	bl	80002ac <__adddf3>
 801a1ae:	4602      	mov	r2, r0
 801a1b0:	460b      	mov	r3, r1
 801a1b2:	e9c4 2300 	strd	r2, r3, [r4]
 801a1b6:	4630      	mov	r0, r6
 801a1b8:	4639      	mov	r1, r7
 801a1ba:	f7e6 f875 	bl	80002a8 <__aeabi_dsub>
 801a1be:	a384      	add	r3, pc, #528	; (adr r3, 801a3d0 <__ieee754_rem_pio2+0x2e8>)
 801a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1c4:	f7e6 f872 	bl	80002ac <__adddf3>
 801a1c8:	f04f 35ff 	mov.w	r5, #4294967295
 801a1cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a1d0:	e7c6      	b.n	801a160 <__ieee754_rem_pio2+0x78>
 801a1d2:	a381      	add	r3, pc, #516	; (adr r3, 801a3d8 <__ieee754_rem_pio2+0x2f0>)
 801a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1d8:	f7e6 f868 	bl	80002ac <__adddf3>
 801a1dc:	a380      	add	r3, pc, #512	; (adr r3, 801a3e0 <__ieee754_rem_pio2+0x2f8>)
 801a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1e2:	4606      	mov	r6, r0
 801a1e4:	460f      	mov	r7, r1
 801a1e6:	f7e6 f861 	bl	80002ac <__adddf3>
 801a1ea:	4602      	mov	r2, r0
 801a1ec:	460b      	mov	r3, r1
 801a1ee:	e9c4 2300 	strd	r2, r3, [r4]
 801a1f2:	4630      	mov	r0, r6
 801a1f4:	4639      	mov	r1, r7
 801a1f6:	f7e6 f857 	bl	80002a8 <__aeabi_dsub>
 801a1fa:	a379      	add	r3, pc, #484	; (adr r3, 801a3e0 <__ieee754_rem_pio2+0x2f8>)
 801a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a200:	e7e0      	b.n	801a1c4 <__ieee754_rem_pio2+0xdc>
 801a202:	4b82      	ldr	r3, [pc, #520]	; (801a40c <__ieee754_rem_pio2+0x324>)
 801a204:	4598      	cmp	r8, r3
 801a206:	f300 80d0 	bgt.w	801a3aa <__ieee754_rem_pio2+0x2c2>
 801a20a:	f001 f879 	bl	801b300 <fabs>
 801a20e:	ec57 6b10 	vmov	r6, r7, d0
 801a212:	ee10 0a10 	vmov	r0, s0
 801a216:	a374      	add	r3, pc, #464	; (adr r3, 801a3e8 <__ieee754_rem_pio2+0x300>)
 801a218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a21c:	4639      	mov	r1, r7
 801a21e:	f7e6 f9fb 	bl	8000618 <__aeabi_dmul>
 801a222:	2200      	movs	r2, #0
 801a224:	4b7a      	ldr	r3, [pc, #488]	; (801a410 <__ieee754_rem_pio2+0x328>)
 801a226:	f7e6 f841 	bl	80002ac <__adddf3>
 801a22a:	f7e6 fca5 	bl	8000b78 <__aeabi_d2iz>
 801a22e:	4605      	mov	r5, r0
 801a230:	f7e6 f988 	bl	8000544 <__aeabi_i2d>
 801a234:	a364      	add	r3, pc, #400	; (adr r3, 801a3c8 <__ieee754_rem_pio2+0x2e0>)
 801a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a23a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a23e:	f7e6 f9eb 	bl	8000618 <__aeabi_dmul>
 801a242:	4602      	mov	r2, r0
 801a244:	460b      	mov	r3, r1
 801a246:	4630      	mov	r0, r6
 801a248:	4639      	mov	r1, r7
 801a24a:	f7e6 f82d 	bl	80002a8 <__aeabi_dsub>
 801a24e:	a360      	add	r3, pc, #384	; (adr r3, 801a3d0 <__ieee754_rem_pio2+0x2e8>)
 801a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a254:	4682      	mov	sl, r0
 801a256:	468b      	mov	fp, r1
 801a258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a25c:	f7e6 f9dc 	bl	8000618 <__aeabi_dmul>
 801a260:	2d1f      	cmp	r5, #31
 801a262:	4606      	mov	r6, r0
 801a264:	460f      	mov	r7, r1
 801a266:	dc0c      	bgt.n	801a282 <__ieee754_rem_pio2+0x19a>
 801a268:	1e6a      	subs	r2, r5, #1
 801a26a:	4b6a      	ldr	r3, [pc, #424]	; (801a414 <__ieee754_rem_pio2+0x32c>)
 801a26c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a270:	4543      	cmp	r3, r8
 801a272:	d006      	beq.n	801a282 <__ieee754_rem_pio2+0x19a>
 801a274:	4632      	mov	r2, r6
 801a276:	463b      	mov	r3, r7
 801a278:	4650      	mov	r0, sl
 801a27a:	4659      	mov	r1, fp
 801a27c:	f7e6 f814 	bl	80002a8 <__aeabi_dsub>
 801a280:	e00e      	b.n	801a2a0 <__ieee754_rem_pio2+0x1b8>
 801a282:	4632      	mov	r2, r6
 801a284:	463b      	mov	r3, r7
 801a286:	4650      	mov	r0, sl
 801a288:	4659      	mov	r1, fp
 801a28a:	f7e6 f80d 	bl	80002a8 <__aeabi_dsub>
 801a28e:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a292:	9305      	str	r3, [sp, #20]
 801a294:	9a05      	ldr	r2, [sp, #20]
 801a296:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a29a:	1ad3      	subs	r3, r2, r3
 801a29c:	2b10      	cmp	r3, #16
 801a29e:	dc02      	bgt.n	801a2a6 <__ieee754_rem_pio2+0x1be>
 801a2a0:	e9c4 0100 	strd	r0, r1, [r4]
 801a2a4:	e039      	b.n	801a31a <__ieee754_rem_pio2+0x232>
 801a2a6:	a34c      	add	r3, pc, #304	; (adr r3, 801a3d8 <__ieee754_rem_pio2+0x2f0>)
 801a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a2b0:	f7e6 f9b2 	bl	8000618 <__aeabi_dmul>
 801a2b4:	4606      	mov	r6, r0
 801a2b6:	460f      	mov	r7, r1
 801a2b8:	4602      	mov	r2, r0
 801a2ba:	460b      	mov	r3, r1
 801a2bc:	4650      	mov	r0, sl
 801a2be:	4659      	mov	r1, fp
 801a2c0:	f7e5 fff2 	bl	80002a8 <__aeabi_dsub>
 801a2c4:	4602      	mov	r2, r0
 801a2c6:	460b      	mov	r3, r1
 801a2c8:	4680      	mov	r8, r0
 801a2ca:	4689      	mov	r9, r1
 801a2cc:	4650      	mov	r0, sl
 801a2ce:	4659      	mov	r1, fp
 801a2d0:	f7e5 ffea 	bl	80002a8 <__aeabi_dsub>
 801a2d4:	4632      	mov	r2, r6
 801a2d6:	463b      	mov	r3, r7
 801a2d8:	f7e5 ffe6 	bl	80002a8 <__aeabi_dsub>
 801a2dc:	a340      	add	r3, pc, #256	; (adr r3, 801a3e0 <__ieee754_rem_pio2+0x2f8>)
 801a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2e2:	4606      	mov	r6, r0
 801a2e4:	460f      	mov	r7, r1
 801a2e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a2ea:	f7e6 f995 	bl	8000618 <__aeabi_dmul>
 801a2ee:	4632      	mov	r2, r6
 801a2f0:	463b      	mov	r3, r7
 801a2f2:	f7e5 ffd9 	bl	80002a8 <__aeabi_dsub>
 801a2f6:	4602      	mov	r2, r0
 801a2f8:	460b      	mov	r3, r1
 801a2fa:	4606      	mov	r6, r0
 801a2fc:	460f      	mov	r7, r1
 801a2fe:	4640      	mov	r0, r8
 801a300:	4649      	mov	r1, r9
 801a302:	f7e5 ffd1 	bl	80002a8 <__aeabi_dsub>
 801a306:	9a05      	ldr	r2, [sp, #20]
 801a308:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a30c:	1ad3      	subs	r3, r2, r3
 801a30e:	2b31      	cmp	r3, #49	; 0x31
 801a310:	dc20      	bgt.n	801a354 <__ieee754_rem_pio2+0x26c>
 801a312:	e9c4 0100 	strd	r0, r1, [r4]
 801a316:	46c2      	mov	sl, r8
 801a318:	46cb      	mov	fp, r9
 801a31a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a31e:	4650      	mov	r0, sl
 801a320:	4642      	mov	r2, r8
 801a322:	464b      	mov	r3, r9
 801a324:	4659      	mov	r1, fp
 801a326:	f7e5 ffbf 	bl	80002a8 <__aeabi_dsub>
 801a32a:	463b      	mov	r3, r7
 801a32c:	4632      	mov	r2, r6
 801a32e:	f7e5 ffbb 	bl	80002a8 <__aeabi_dsub>
 801a332:	9b04      	ldr	r3, [sp, #16]
 801a334:	2b00      	cmp	r3, #0
 801a336:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a33a:	f6bf af11 	bge.w	801a160 <__ieee754_rem_pio2+0x78>
 801a33e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a342:	6063      	str	r3, [r4, #4]
 801a344:	f8c4 8000 	str.w	r8, [r4]
 801a348:	60a0      	str	r0, [r4, #8]
 801a34a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a34e:	60e3      	str	r3, [r4, #12]
 801a350:	426d      	negs	r5, r5
 801a352:	e705      	b.n	801a160 <__ieee754_rem_pio2+0x78>
 801a354:	a326      	add	r3, pc, #152	; (adr r3, 801a3f0 <__ieee754_rem_pio2+0x308>)
 801a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a35a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a35e:	f7e6 f95b 	bl	8000618 <__aeabi_dmul>
 801a362:	4606      	mov	r6, r0
 801a364:	460f      	mov	r7, r1
 801a366:	4602      	mov	r2, r0
 801a368:	460b      	mov	r3, r1
 801a36a:	4640      	mov	r0, r8
 801a36c:	4649      	mov	r1, r9
 801a36e:	f7e5 ff9b 	bl	80002a8 <__aeabi_dsub>
 801a372:	4602      	mov	r2, r0
 801a374:	460b      	mov	r3, r1
 801a376:	4682      	mov	sl, r0
 801a378:	468b      	mov	fp, r1
 801a37a:	4640      	mov	r0, r8
 801a37c:	4649      	mov	r1, r9
 801a37e:	f7e5 ff93 	bl	80002a8 <__aeabi_dsub>
 801a382:	4632      	mov	r2, r6
 801a384:	463b      	mov	r3, r7
 801a386:	f7e5 ff8f 	bl	80002a8 <__aeabi_dsub>
 801a38a:	a31b      	add	r3, pc, #108	; (adr r3, 801a3f8 <__ieee754_rem_pio2+0x310>)
 801a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a390:	4606      	mov	r6, r0
 801a392:	460f      	mov	r7, r1
 801a394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a398:	f7e6 f93e 	bl	8000618 <__aeabi_dmul>
 801a39c:	4632      	mov	r2, r6
 801a39e:	463b      	mov	r3, r7
 801a3a0:	f7e5 ff82 	bl	80002a8 <__aeabi_dsub>
 801a3a4:	4606      	mov	r6, r0
 801a3a6:	460f      	mov	r7, r1
 801a3a8:	e764      	b.n	801a274 <__ieee754_rem_pio2+0x18c>
 801a3aa:	4b1b      	ldr	r3, [pc, #108]	; (801a418 <__ieee754_rem_pio2+0x330>)
 801a3ac:	4598      	cmp	r8, r3
 801a3ae:	dd35      	ble.n	801a41c <__ieee754_rem_pio2+0x334>
 801a3b0:	ee10 2a10 	vmov	r2, s0
 801a3b4:	463b      	mov	r3, r7
 801a3b6:	4630      	mov	r0, r6
 801a3b8:	4639      	mov	r1, r7
 801a3ba:	f7e5 ff75 	bl	80002a8 <__aeabi_dsub>
 801a3be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a3c2:	e9c4 0100 	strd	r0, r1, [r4]
 801a3c6:	e6a1      	b.n	801a10c <__ieee754_rem_pio2+0x24>
 801a3c8:	54400000 	.word	0x54400000
 801a3cc:	3ff921fb 	.word	0x3ff921fb
 801a3d0:	1a626331 	.word	0x1a626331
 801a3d4:	3dd0b461 	.word	0x3dd0b461
 801a3d8:	1a600000 	.word	0x1a600000
 801a3dc:	3dd0b461 	.word	0x3dd0b461
 801a3e0:	2e037073 	.word	0x2e037073
 801a3e4:	3ba3198a 	.word	0x3ba3198a
 801a3e8:	6dc9c883 	.word	0x6dc9c883
 801a3ec:	3fe45f30 	.word	0x3fe45f30
 801a3f0:	2e000000 	.word	0x2e000000
 801a3f4:	3ba3198a 	.word	0x3ba3198a
 801a3f8:	252049c1 	.word	0x252049c1
 801a3fc:	397b839a 	.word	0x397b839a
 801a400:	3fe921fb 	.word	0x3fe921fb
 801a404:	4002d97b 	.word	0x4002d97b
 801a408:	3ff921fb 	.word	0x3ff921fb
 801a40c:	413921fb 	.word	0x413921fb
 801a410:	3fe00000 	.word	0x3fe00000
 801a414:	0801c1f8 	.word	0x0801c1f8
 801a418:	7fefffff 	.word	0x7fefffff
 801a41c:	ea4f 5528 	mov.w	r5, r8, asr #20
 801a420:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801a424:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801a428:	4630      	mov	r0, r6
 801a42a:	460f      	mov	r7, r1
 801a42c:	f7e6 fba4 	bl	8000b78 <__aeabi_d2iz>
 801a430:	f7e6 f888 	bl	8000544 <__aeabi_i2d>
 801a434:	4602      	mov	r2, r0
 801a436:	460b      	mov	r3, r1
 801a438:	4630      	mov	r0, r6
 801a43a:	4639      	mov	r1, r7
 801a43c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a440:	f7e5 ff32 	bl	80002a8 <__aeabi_dsub>
 801a444:	2200      	movs	r2, #0
 801a446:	4b1f      	ldr	r3, [pc, #124]	; (801a4c4 <__ieee754_rem_pio2+0x3dc>)
 801a448:	f7e6 f8e6 	bl	8000618 <__aeabi_dmul>
 801a44c:	460f      	mov	r7, r1
 801a44e:	4606      	mov	r6, r0
 801a450:	f7e6 fb92 	bl	8000b78 <__aeabi_d2iz>
 801a454:	f7e6 f876 	bl	8000544 <__aeabi_i2d>
 801a458:	4602      	mov	r2, r0
 801a45a:	460b      	mov	r3, r1
 801a45c:	4630      	mov	r0, r6
 801a45e:	4639      	mov	r1, r7
 801a460:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a464:	f7e5 ff20 	bl	80002a8 <__aeabi_dsub>
 801a468:	2200      	movs	r2, #0
 801a46a:	4b16      	ldr	r3, [pc, #88]	; (801a4c4 <__ieee754_rem_pio2+0x3dc>)
 801a46c:	f7e6 f8d4 	bl	8000618 <__aeabi_dmul>
 801a470:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a474:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801a478:	f04f 0803 	mov.w	r8, #3
 801a47c:	2600      	movs	r6, #0
 801a47e:	2700      	movs	r7, #0
 801a480:	4632      	mov	r2, r6
 801a482:	463b      	mov	r3, r7
 801a484:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801a488:	f108 3aff 	add.w	sl, r8, #4294967295
 801a48c:	f7e6 fb2c 	bl	8000ae8 <__aeabi_dcmpeq>
 801a490:	b9b0      	cbnz	r0, 801a4c0 <__ieee754_rem_pio2+0x3d8>
 801a492:	4b0d      	ldr	r3, [pc, #52]	; (801a4c8 <__ieee754_rem_pio2+0x3e0>)
 801a494:	9301      	str	r3, [sp, #4]
 801a496:	2302      	movs	r3, #2
 801a498:	9300      	str	r3, [sp, #0]
 801a49a:	462a      	mov	r2, r5
 801a49c:	4643      	mov	r3, r8
 801a49e:	4621      	mov	r1, r4
 801a4a0:	a806      	add	r0, sp, #24
 801a4a2:	f000 f991 	bl	801a7c8 <__kernel_rem_pio2>
 801a4a6:	9b04      	ldr	r3, [sp, #16]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	4605      	mov	r5, r0
 801a4ac:	f6bf ae58 	bge.w	801a160 <__ieee754_rem_pio2+0x78>
 801a4b0:	6863      	ldr	r3, [r4, #4]
 801a4b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a4b6:	6063      	str	r3, [r4, #4]
 801a4b8:	68e3      	ldr	r3, [r4, #12]
 801a4ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801a4be:	e746      	b.n	801a34e <__ieee754_rem_pio2+0x266>
 801a4c0:	46d0      	mov	r8, sl
 801a4c2:	e7dd      	b.n	801a480 <__ieee754_rem_pio2+0x398>
 801a4c4:	41700000 	.word	0x41700000
 801a4c8:	0801c278 	.word	0x0801c278

0801a4cc <__ieee754_sqrt>:
 801a4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4d0:	4955      	ldr	r1, [pc, #340]	; (801a628 <__ieee754_sqrt+0x15c>)
 801a4d2:	ec55 4b10 	vmov	r4, r5, d0
 801a4d6:	43a9      	bics	r1, r5
 801a4d8:	462b      	mov	r3, r5
 801a4da:	462a      	mov	r2, r5
 801a4dc:	d112      	bne.n	801a504 <__ieee754_sqrt+0x38>
 801a4de:	ee10 2a10 	vmov	r2, s0
 801a4e2:	ee10 0a10 	vmov	r0, s0
 801a4e6:	4629      	mov	r1, r5
 801a4e8:	f7e6 f896 	bl	8000618 <__aeabi_dmul>
 801a4ec:	4602      	mov	r2, r0
 801a4ee:	460b      	mov	r3, r1
 801a4f0:	4620      	mov	r0, r4
 801a4f2:	4629      	mov	r1, r5
 801a4f4:	f7e5 feda 	bl	80002ac <__adddf3>
 801a4f8:	4604      	mov	r4, r0
 801a4fa:	460d      	mov	r5, r1
 801a4fc:	ec45 4b10 	vmov	d0, r4, r5
 801a500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a504:	2d00      	cmp	r5, #0
 801a506:	ee10 0a10 	vmov	r0, s0
 801a50a:	4621      	mov	r1, r4
 801a50c:	dc0f      	bgt.n	801a52e <__ieee754_sqrt+0x62>
 801a50e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a512:	4330      	orrs	r0, r6
 801a514:	d0f2      	beq.n	801a4fc <__ieee754_sqrt+0x30>
 801a516:	b155      	cbz	r5, 801a52e <__ieee754_sqrt+0x62>
 801a518:	ee10 2a10 	vmov	r2, s0
 801a51c:	4620      	mov	r0, r4
 801a51e:	4629      	mov	r1, r5
 801a520:	f7e5 fec2 	bl	80002a8 <__aeabi_dsub>
 801a524:	4602      	mov	r2, r0
 801a526:	460b      	mov	r3, r1
 801a528:	f7e6 f9a0 	bl	800086c <__aeabi_ddiv>
 801a52c:	e7e4      	b.n	801a4f8 <__ieee754_sqrt+0x2c>
 801a52e:	151b      	asrs	r3, r3, #20
 801a530:	d073      	beq.n	801a61a <__ieee754_sqrt+0x14e>
 801a532:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a536:	07dd      	lsls	r5, r3, #31
 801a538:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801a53c:	bf48      	it	mi
 801a53e:	0fc8      	lsrmi	r0, r1, #31
 801a540:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801a544:	bf44      	itt	mi
 801a546:	0049      	lslmi	r1, r1, #1
 801a548:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801a54c:	2500      	movs	r5, #0
 801a54e:	1058      	asrs	r0, r3, #1
 801a550:	0fcb      	lsrs	r3, r1, #31
 801a552:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801a556:	0049      	lsls	r1, r1, #1
 801a558:	2316      	movs	r3, #22
 801a55a:	462c      	mov	r4, r5
 801a55c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801a560:	19a7      	adds	r7, r4, r6
 801a562:	4297      	cmp	r7, r2
 801a564:	bfde      	ittt	le
 801a566:	19bc      	addle	r4, r7, r6
 801a568:	1bd2      	suble	r2, r2, r7
 801a56a:	19ad      	addle	r5, r5, r6
 801a56c:	0fcf      	lsrs	r7, r1, #31
 801a56e:	3b01      	subs	r3, #1
 801a570:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801a574:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a578:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a57c:	d1f0      	bne.n	801a560 <__ieee754_sqrt+0x94>
 801a57e:	f04f 0c20 	mov.w	ip, #32
 801a582:	469e      	mov	lr, r3
 801a584:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801a588:	42a2      	cmp	r2, r4
 801a58a:	eb06 070e 	add.w	r7, r6, lr
 801a58e:	dc02      	bgt.n	801a596 <__ieee754_sqrt+0xca>
 801a590:	d112      	bne.n	801a5b8 <__ieee754_sqrt+0xec>
 801a592:	428f      	cmp	r7, r1
 801a594:	d810      	bhi.n	801a5b8 <__ieee754_sqrt+0xec>
 801a596:	2f00      	cmp	r7, #0
 801a598:	eb07 0e06 	add.w	lr, r7, r6
 801a59c:	da42      	bge.n	801a624 <__ieee754_sqrt+0x158>
 801a59e:	f1be 0f00 	cmp.w	lr, #0
 801a5a2:	db3f      	blt.n	801a624 <__ieee754_sqrt+0x158>
 801a5a4:	f104 0801 	add.w	r8, r4, #1
 801a5a8:	1b12      	subs	r2, r2, r4
 801a5aa:	428f      	cmp	r7, r1
 801a5ac:	bf88      	it	hi
 801a5ae:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a5b2:	1bc9      	subs	r1, r1, r7
 801a5b4:	4433      	add	r3, r6
 801a5b6:	4644      	mov	r4, r8
 801a5b8:	0052      	lsls	r2, r2, #1
 801a5ba:	f1bc 0c01 	subs.w	ip, ip, #1
 801a5be:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801a5c2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801a5c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a5ca:	d1dd      	bne.n	801a588 <__ieee754_sqrt+0xbc>
 801a5cc:	430a      	orrs	r2, r1
 801a5ce:	d006      	beq.n	801a5de <__ieee754_sqrt+0x112>
 801a5d0:	1c5c      	adds	r4, r3, #1
 801a5d2:	bf13      	iteet	ne
 801a5d4:	3301      	addne	r3, #1
 801a5d6:	3501      	addeq	r5, #1
 801a5d8:	4663      	moveq	r3, ip
 801a5da:	f023 0301 	bicne.w	r3, r3, #1
 801a5de:	106a      	asrs	r2, r5, #1
 801a5e0:	085b      	lsrs	r3, r3, #1
 801a5e2:	07e9      	lsls	r1, r5, #31
 801a5e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a5e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a5ec:	bf48      	it	mi
 801a5ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a5f2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801a5f6:	461c      	mov	r4, r3
 801a5f8:	e780      	b.n	801a4fc <__ieee754_sqrt+0x30>
 801a5fa:	0aca      	lsrs	r2, r1, #11
 801a5fc:	3815      	subs	r0, #21
 801a5fe:	0549      	lsls	r1, r1, #21
 801a600:	2a00      	cmp	r2, #0
 801a602:	d0fa      	beq.n	801a5fa <__ieee754_sqrt+0x12e>
 801a604:	02d6      	lsls	r6, r2, #11
 801a606:	d50a      	bpl.n	801a61e <__ieee754_sqrt+0x152>
 801a608:	f1c3 0420 	rsb	r4, r3, #32
 801a60c:	fa21 f404 	lsr.w	r4, r1, r4
 801a610:	1e5d      	subs	r5, r3, #1
 801a612:	4099      	lsls	r1, r3
 801a614:	4322      	orrs	r2, r4
 801a616:	1b43      	subs	r3, r0, r5
 801a618:	e78b      	b.n	801a532 <__ieee754_sqrt+0x66>
 801a61a:	4618      	mov	r0, r3
 801a61c:	e7f0      	b.n	801a600 <__ieee754_sqrt+0x134>
 801a61e:	0052      	lsls	r2, r2, #1
 801a620:	3301      	adds	r3, #1
 801a622:	e7ef      	b.n	801a604 <__ieee754_sqrt+0x138>
 801a624:	46a0      	mov	r8, r4
 801a626:	e7bf      	b.n	801a5a8 <__ieee754_sqrt+0xdc>
 801a628:	7ff00000 	.word	0x7ff00000

0801a62c <__ieee754_sqrtf>:
 801a62c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a630:	4770      	bx	lr
 801a632:	0000      	movs	r0, r0
 801a634:	0000      	movs	r0, r0
	...

0801a638 <__kernel_cos>:
 801a638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a63c:	ec59 8b10 	vmov	r8, r9, d0
 801a640:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801a644:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801a648:	ed2d 8b02 	vpush	{d8}
 801a64c:	eeb0 8a41 	vmov.f32	s16, s2
 801a650:	eef0 8a61 	vmov.f32	s17, s3
 801a654:	da07      	bge.n	801a666 <__kernel_cos+0x2e>
 801a656:	ee10 0a10 	vmov	r0, s0
 801a65a:	4649      	mov	r1, r9
 801a65c:	f7e6 fa8c 	bl	8000b78 <__aeabi_d2iz>
 801a660:	2800      	cmp	r0, #0
 801a662:	f000 8089 	beq.w	801a778 <__kernel_cos+0x140>
 801a666:	4642      	mov	r2, r8
 801a668:	464b      	mov	r3, r9
 801a66a:	4640      	mov	r0, r8
 801a66c:	4649      	mov	r1, r9
 801a66e:	f7e5 ffd3 	bl	8000618 <__aeabi_dmul>
 801a672:	2200      	movs	r2, #0
 801a674:	4b4e      	ldr	r3, [pc, #312]	; (801a7b0 <__kernel_cos+0x178>)
 801a676:	4604      	mov	r4, r0
 801a678:	460d      	mov	r5, r1
 801a67a:	f7e5 ffcd 	bl	8000618 <__aeabi_dmul>
 801a67e:	a340      	add	r3, pc, #256	; (adr r3, 801a780 <__kernel_cos+0x148>)
 801a680:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a684:	4682      	mov	sl, r0
 801a686:	468b      	mov	fp, r1
 801a688:	4620      	mov	r0, r4
 801a68a:	4629      	mov	r1, r5
 801a68c:	f7e5 ffc4 	bl	8000618 <__aeabi_dmul>
 801a690:	a33d      	add	r3, pc, #244	; (adr r3, 801a788 <__kernel_cos+0x150>)
 801a692:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a696:	f7e5 fe09 	bl	80002ac <__adddf3>
 801a69a:	4622      	mov	r2, r4
 801a69c:	462b      	mov	r3, r5
 801a69e:	f7e5 ffbb 	bl	8000618 <__aeabi_dmul>
 801a6a2:	a33b      	add	r3, pc, #236	; (adr r3, 801a790 <__kernel_cos+0x158>)
 801a6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6a8:	f7e5 fdfe 	bl	80002a8 <__aeabi_dsub>
 801a6ac:	4622      	mov	r2, r4
 801a6ae:	462b      	mov	r3, r5
 801a6b0:	f7e5 ffb2 	bl	8000618 <__aeabi_dmul>
 801a6b4:	a338      	add	r3, pc, #224	; (adr r3, 801a798 <__kernel_cos+0x160>)
 801a6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ba:	f7e5 fdf7 	bl	80002ac <__adddf3>
 801a6be:	4622      	mov	r2, r4
 801a6c0:	462b      	mov	r3, r5
 801a6c2:	f7e5 ffa9 	bl	8000618 <__aeabi_dmul>
 801a6c6:	a336      	add	r3, pc, #216	; (adr r3, 801a7a0 <__kernel_cos+0x168>)
 801a6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6cc:	f7e5 fdec 	bl	80002a8 <__aeabi_dsub>
 801a6d0:	4622      	mov	r2, r4
 801a6d2:	462b      	mov	r3, r5
 801a6d4:	f7e5 ffa0 	bl	8000618 <__aeabi_dmul>
 801a6d8:	a333      	add	r3, pc, #204	; (adr r3, 801a7a8 <__kernel_cos+0x170>)
 801a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6de:	f7e5 fde5 	bl	80002ac <__adddf3>
 801a6e2:	4622      	mov	r2, r4
 801a6e4:	462b      	mov	r3, r5
 801a6e6:	f7e5 ff97 	bl	8000618 <__aeabi_dmul>
 801a6ea:	4622      	mov	r2, r4
 801a6ec:	462b      	mov	r3, r5
 801a6ee:	f7e5 ff93 	bl	8000618 <__aeabi_dmul>
 801a6f2:	ec53 2b18 	vmov	r2, r3, d8
 801a6f6:	4604      	mov	r4, r0
 801a6f8:	460d      	mov	r5, r1
 801a6fa:	4640      	mov	r0, r8
 801a6fc:	4649      	mov	r1, r9
 801a6fe:	f7e5 ff8b 	bl	8000618 <__aeabi_dmul>
 801a702:	460b      	mov	r3, r1
 801a704:	4602      	mov	r2, r0
 801a706:	4629      	mov	r1, r5
 801a708:	4620      	mov	r0, r4
 801a70a:	f7e5 fdcd 	bl	80002a8 <__aeabi_dsub>
 801a70e:	4b29      	ldr	r3, [pc, #164]	; (801a7b4 <__kernel_cos+0x17c>)
 801a710:	429e      	cmp	r6, r3
 801a712:	4680      	mov	r8, r0
 801a714:	4689      	mov	r9, r1
 801a716:	dc11      	bgt.n	801a73c <__kernel_cos+0x104>
 801a718:	4602      	mov	r2, r0
 801a71a:	460b      	mov	r3, r1
 801a71c:	4650      	mov	r0, sl
 801a71e:	4659      	mov	r1, fp
 801a720:	f7e5 fdc2 	bl	80002a8 <__aeabi_dsub>
 801a724:	460b      	mov	r3, r1
 801a726:	4924      	ldr	r1, [pc, #144]	; (801a7b8 <__kernel_cos+0x180>)
 801a728:	4602      	mov	r2, r0
 801a72a:	2000      	movs	r0, #0
 801a72c:	f7e5 fdbc 	bl	80002a8 <__aeabi_dsub>
 801a730:	ecbd 8b02 	vpop	{d8}
 801a734:	ec41 0b10 	vmov	d0, r0, r1
 801a738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a73c:	4b1f      	ldr	r3, [pc, #124]	; (801a7bc <__kernel_cos+0x184>)
 801a73e:	491e      	ldr	r1, [pc, #120]	; (801a7b8 <__kernel_cos+0x180>)
 801a740:	429e      	cmp	r6, r3
 801a742:	bfcc      	ite	gt
 801a744:	4d1e      	ldrgt	r5, [pc, #120]	; (801a7c0 <__kernel_cos+0x188>)
 801a746:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801a74a:	2400      	movs	r4, #0
 801a74c:	4622      	mov	r2, r4
 801a74e:	462b      	mov	r3, r5
 801a750:	2000      	movs	r0, #0
 801a752:	f7e5 fda9 	bl	80002a8 <__aeabi_dsub>
 801a756:	4622      	mov	r2, r4
 801a758:	4606      	mov	r6, r0
 801a75a:	460f      	mov	r7, r1
 801a75c:	462b      	mov	r3, r5
 801a75e:	4650      	mov	r0, sl
 801a760:	4659      	mov	r1, fp
 801a762:	f7e5 fda1 	bl	80002a8 <__aeabi_dsub>
 801a766:	4642      	mov	r2, r8
 801a768:	464b      	mov	r3, r9
 801a76a:	f7e5 fd9d 	bl	80002a8 <__aeabi_dsub>
 801a76e:	4602      	mov	r2, r0
 801a770:	460b      	mov	r3, r1
 801a772:	4630      	mov	r0, r6
 801a774:	4639      	mov	r1, r7
 801a776:	e7d9      	b.n	801a72c <__kernel_cos+0xf4>
 801a778:	2000      	movs	r0, #0
 801a77a:	490f      	ldr	r1, [pc, #60]	; (801a7b8 <__kernel_cos+0x180>)
 801a77c:	e7d8      	b.n	801a730 <__kernel_cos+0xf8>
 801a77e:	bf00      	nop
 801a780:	be8838d4 	.word	0xbe8838d4
 801a784:	bda8fae9 	.word	0xbda8fae9
 801a788:	bdb4b1c4 	.word	0xbdb4b1c4
 801a78c:	3e21ee9e 	.word	0x3e21ee9e
 801a790:	809c52ad 	.word	0x809c52ad
 801a794:	3e927e4f 	.word	0x3e927e4f
 801a798:	19cb1590 	.word	0x19cb1590
 801a79c:	3efa01a0 	.word	0x3efa01a0
 801a7a0:	16c15177 	.word	0x16c15177
 801a7a4:	3f56c16c 	.word	0x3f56c16c
 801a7a8:	5555554c 	.word	0x5555554c
 801a7ac:	3fa55555 	.word	0x3fa55555
 801a7b0:	3fe00000 	.word	0x3fe00000
 801a7b4:	3fd33332 	.word	0x3fd33332
 801a7b8:	3ff00000 	.word	0x3ff00000
 801a7bc:	3fe90000 	.word	0x3fe90000
 801a7c0:	3fd20000 	.word	0x3fd20000
 801a7c4:	00000000 	.word	0x00000000

0801a7c8 <__kernel_rem_pio2>:
 801a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7cc:	ed2d 8b02 	vpush	{d8}
 801a7d0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801a7d4:	1ed4      	subs	r4, r2, #3
 801a7d6:	9308      	str	r3, [sp, #32]
 801a7d8:	9101      	str	r1, [sp, #4]
 801a7da:	4bc5      	ldr	r3, [pc, #788]	; (801aaf0 <__kernel_rem_pio2+0x328>)
 801a7dc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801a7de:	9009      	str	r0, [sp, #36]	; 0x24
 801a7e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a7e4:	9304      	str	r3, [sp, #16]
 801a7e6:	9b08      	ldr	r3, [sp, #32]
 801a7e8:	3b01      	subs	r3, #1
 801a7ea:	9307      	str	r3, [sp, #28]
 801a7ec:	2318      	movs	r3, #24
 801a7ee:	fb94 f4f3 	sdiv	r4, r4, r3
 801a7f2:	f06f 0317 	mvn.w	r3, #23
 801a7f6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a7fa:	fb04 3303 	mla	r3, r4, r3, r3
 801a7fe:	eb03 0a02 	add.w	sl, r3, r2
 801a802:	9b04      	ldr	r3, [sp, #16]
 801a804:	9a07      	ldr	r2, [sp, #28]
 801a806:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801aae0 <__kernel_rem_pio2+0x318>
 801a80a:	eb03 0802 	add.w	r8, r3, r2
 801a80e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a810:	1aa7      	subs	r7, r4, r2
 801a812:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a816:	ae22      	add	r6, sp, #136	; 0x88
 801a818:	2500      	movs	r5, #0
 801a81a:	4545      	cmp	r5, r8
 801a81c:	dd13      	ble.n	801a846 <__kernel_rem_pio2+0x7e>
 801a81e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801aae0 <__kernel_rem_pio2+0x318>
 801a822:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801a826:	2600      	movs	r6, #0
 801a828:	9b04      	ldr	r3, [sp, #16]
 801a82a:	429e      	cmp	r6, r3
 801a82c:	dc32      	bgt.n	801a894 <__kernel_rem_pio2+0xcc>
 801a82e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a830:	9302      	str	r3, [sp, #8]
 801a832:	9b08      	ldr	r3, [sp, #32]
 801a834:	199d      	adds	r5, r3, r6
 801a836:	ab22      	add	r3, sp, #136	; 0x88
 801a838:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a83c:	9306      	str	r3, [sp, #24]
 801a83e:	ec59 8b18 	vmov	r8, r9, d8
 801a842:	2700      	movs	r7, #0
 801a844:	e01f      	b.n	801a886 <__kernel_rem_pio2+0xbe>
 801a846:	42ef      	cmn	r7, r5
 801a848:	d407      	bmi.n	801a85a <__kernel_rem_pio2+0x92>
 801a84a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a84e:	f7e5 fe79 	bl	8000544 <__aeabi_i2d>
 801a852:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a856:	3501      	adds	r5, #1
 801a858:	e7df      	b.n	801a81a <__kernel_rem_pio2+0x52>
 801a85a:	ec51 0b18 	vmov	r0, r1, d8
 801a85e:	e7f8      	b.n	801a852 <__kernel_rem_pio2+0x8a>
 801a860:	9906      	ldr	r1, [sp, #24]
 801a862:	9d02      	ldr	r5, [sp, #8]
 801a864:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801a868:	9106      	str	r1, [sp, #24]
 801a86a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801a86e:	9502      	str	r5, [sp, #8]
 801a870:	f7e5 fed2 	bl	8000618 <__aeabi_dmul>
 801a874:	4602      	mov	r2, r0
 801a876:	460b      	mov	r3, r1
 801a878:	4640      	mov	r0, r8
 801a87a:	4649      	mov	r1, r9
 801a87c:	f7e5 fd16 	bl	80002ac <__adddf3>
 801a880:	3701      	adds	r7, #1
 801a882:	4680      	mov	r8, r0
 801a884:	4689      	mov	r9, r1
 801a886:	9b07      	ldr	r3, [sp, #28]
 801a888:	429f      	cmp	r7, r3
 801a88a:	dde9      	ble.n	801a860 <__kernel_rem_pio2+0x98>
 801a88c:	e8eb 8902 	strd	r8, r9, [fp], #8
 801a890:	3601      	adds	r6, #1
 801a892:	e7c9      	b.n	801a828 <__kernel_rem_pio2+0x60>
 801a894:	9b04      	ldr	r3, [sp, #16]
 801a896:	aa0e      	add	r2, sp, #56	; 0x38
 801a898:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a89c:	930c      	str	r3, [sp, #48]	; 0x30
 801a89e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a8a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a8a4:	9c04      	ldr	r4, [sp, #16]
 801a8a6:	930b      	str	r3, [sp, #44]	; 0x2c
 801a8a8:	ab9a      	add	r3, sp, #616	; 0x268
 801a8aa:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801a8ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a8b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a8b6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801a8ba:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a8be:	ab9a      	add	r3, sp, #616	; 0x268
 801a8c0:	445b      	add	r3, fp
 801a8c2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801a8c6:	2500      	movs	r5, #0
 801a8c8:	1b63      	subs	r3, r4, r5
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	dc78      	bgt.n	801a9c0 <__kernel_rem_pio2+0x1f8>
 801a8ce:	4650      	mov	r0, sl
 801a8d0:	ec49 8b10 	vmov	d0, r8, r9
 801a8d4:	f000 fdb0 	bl	801b438 <scalbn>
 801a8d8:	ec57 6b10 	vmov	r6, r7, d0
 801a8dc:	2200      	movs	r2, #0
 801a8de:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a8e2:	ee10 0a10 	vmov	r0, s0
 801a8e6:	4639      	mov	r1, r7
 801a8e8:	f7e5 fe96 	bl	8000618 <__aeabi_dmul>
 801a8ec:	ec41 0b10 	vmov	d0, r0, r1
 801a8f0:	f000 fd12 	bl	801b318 <floor>
 801a8f4:	2200      	movs	r2, #0
 801a8f6:	ec51 0b10 	vmov	r0, r1, d0
 801a8fa:	4b7e      	ldr	r3, [pc, #504]	; (801aaf4 <__kernel_rem_pio2+0x32c>)
 801a8fc:	f7e5 fe8c 	bl	8000618 <__aeabi_dmul>
 801a900:	4602      	mov	r2, r0
 801a902:	460b      	mov	r3, r1
 801a904:	4630      	mov	r0, r6
 801a906:	4639      	mov	r1, r7
 801a908:	f7e5 fcce 	bl	80002a8 <__aeabi_dsub>
 801a90c:	460f      	mov	r7, r1
 801a90e:	4606      	mov	r6, r0
 801a910:	f7e6 f932 	bl	8000b78 <__aeabi_d2iz>
 801a914:	9006      	str	r0, [sp, #24]
 801a916:	f7e5 fe15 	bl	8000544 <__aeabi_i2d>
 801a91a:	4602      	mov	r2, r0
 801a91c:	460b      	mov	r3, r1
 801a91e:	4630      	mov	r0, r6
 801a920:	4639      	mov	r1, r7
 801a922:	f7e5 fcc1 	bl	80002a8 <__aeabi_dsub>
 801a926:	f1ba 0f00 	cmp.w	sl, #0
 801a92a:	4606      	mov	r6, r0
 801a92c:	460f      	mov	r7, r1
 801a92e:	dd6c      	ble.n	801aa0a <__kernel_rem_pio2+0x242>
 801a930:	1e62      	subs	r2, r4, #1
 801a932:	ab0e      	add	r3, sp, #56	; 0x38
 801a934:	f1ca 0118 	rsb	r1, sl, #24
 801a938:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a93c:	9d06      	ldr	r5, [sp, #24]
 801a93e:	fa40 f301 	asr.w	r3, r0, r1
 801a942:	441d      	add	r5, r3
 801a944:	408b      	lsls	r3, r1
 801a946:	1ac0      	subs	r0, r0, r3
 801a948:	ab0e      	add	r3, sp, #56	; 0x38
 801a94a:	9506      	str	r5, [sp, #24]
 801a94c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801a950:	f1ca 0317 	rsb	r3, sl, #23
 801a954:	fa40 f303 	asr.w	r3, r0, r3
 801a958:	9302      	str	r3, [sp, #8]
 801a95a:	9b02      	ldr	r3, [sp, #8]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	dd62      	ble.n	801aa26 <__kernel_rem_pio2+0x25e>
 801a960:	9b06      	ldr	r3, [sp, #24]
 801a962:	2200      	movs	r2, #0
 801a964:	3301      	adds	r3, #1
 801a966:	9306      	str	r3, [sp, #24]
 801a968:	4615      	mov	r5, r2
 801a96a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a96e:	4294      	cmp	r4, r2
 801a970:	f300 8095 	bgt.w	801aa9e <__kernel_rem_pio2+0x2d6>
 801a974:	f1ba 0f00 	cmp.w	sl, #0
 801a978:	dd07      	ble.n	801a98a <__kernel_rem_pio2+0x1c2>
 801a97a:	f1ba 0f01 	cmp.w	sl, #1
 801a97e:	f000 80a2 	beq.w	801aac6 <__kernel_rem_pio2+0x2fe>
 801a982:	f1ba 0f02 	cmp.w	sl, #2
 801a986:	f000 80c1 	beq.w	801ab0c <__kernel_rem_pio2+0x344>
 801a98a:	9b02      	ldr	r3, [sp, #8]
 801a98c:	2b02      	cmp	r3, #2
 801a98e:	d14a      	bne.n	801aa26 <__kernel_rem_pio2+0x25e>
 801a990:	4632      	mov	r2, r6
 801a992:	463b      	mov	r3, r7
 801a994:	2000      	movs	r0, #0
 801a996:	4958      	ldr	r1, [pc, #352]	; (801aaf8 <__kernel_rem_pio2+0x330>)
 801a998:	f7e5 fc86 	bl	80002a8 <__aeabi_dsub>
 801a99c:	4606      	mov	r6, r0
 801a99e:	460f      	mov	r7, r1
 801a9a0:	2d00      	cmp	r5, #0
 801a9a2:	d040      	beq.n	801aa26 <__kernel_rem_pio2+0x25e>
 801a9a4:	4650      	mov	r0, sl
 801a9a6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801aae8 <__kernel_rem_pio2+0x320>
 801a9aa:	f000 fd45 	bl	801b438 <scalbn>
 801a9ae:	4630      	mov	r0, r6
 801a9b0:	4639      	mov	r1, r7
 801a9b2:	ec53 2b10 	vmov	r2, r3, d0
 801a9b6:	f7e5 fc77 	bl	80002a8 <__aeabi_dsub>
 801a9ba:	4606      	mov	r6, r0
 801a9bc:	460f      	mov	r7, r1
 801a9be:	e032      	b.n	801aa26 <__kernel_rem_pio2+0x25e>
 801a9c0:	2200      	movs	r2, #0
 801a9c2:	4b4e      	ldr	r3, [pc, #312]	; (801aafc <__kernel_rem_pio2+0x334>)
 801a9c4:	4640      	mov	r0, r8
 801a9c6:	4649      	mov	r1, r9
 801a9c8:	f7e5 fe26 	bl	8000618 <__aeabi_dmul>
 801a9cc:	f7e6 f8d4 	bl	8000b78 <__aeabi_d2iz>
 801a9d0:	f7e5 fdb8 	bl	8000544 <__aeabi_i2d>
 801a9d4:	2200      	movs	r2, #0
 801a9d6:	4b4a      	ldr	r3, [pc, #296]	; (801ab00 <__kernel_rem_pio2+0x338>)
 801a9d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a9dc:	f7e5 fe1c 	bl	8000618 <__aeabi_dmul>
 801a9e0:	4602      	mov	r2, r0
 801a9e2:	460b      	mov	r3, r1
 801a9e4:	4640      	mov	r0, r8
 801a9e6:	4649      	mov	r1, r9
 801a9e8:	f7e5 fc5e 	bl	80002a8 <__aeabi_dsub>
 801a9ec:	f7e6 f8c4 	bl	8000b78 <__aeabi_d2iz>
 801a9f0:	ab0e      	add	r3, sp, #56	; 0x38
 801a9f2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801a9f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801a9fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a9fe:	f7e5 fc55 	bl	80002ac <__adddf3>
 801aa02:	3501      	adds	r5, #1
 801aa04:	4680      	mov	r8, r0
 801aa06:	4689      	mov	r9, r1
 801aa08:	e75e      	b.n	801a8c8 <__kernel_rem_pio2+0x100>
 801aa0a:	d105      	bne.n	801aa18 <__kernel_rem_pio2+0x250>
 801aa0c:	1e63      	subs	r3, r4, #1
 801aa0e:	aa0e      	add	r2, sp, #56	; 0x38
 801aa10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801aa14:	15c3      	asrs	r3, r0, #23
 801aa16:	e79f      	b.n	801a958 <__kernel_rem_pio2+0x190>
 801aa18:	2200      	movs	r2, #0
 801aa1a:	4b3a      	ldr	r3, [pc, #232]	; (801ab04 <__kernel_rem_pio2+0x33c>)
 801aa1c:	f7e6 f882 	bl	8000b24 <__aeabi_dcmpge>
 801aa20:	2800      	cmp	r0, #0
 801aa22:	d139      	bne.n	801aa98 <__kernel_rem_pio2+0x2d0>
 801aa24:	9002      	str	r0, [sp, #8]
 801aa26:	2200      	movs	r2, #0
 801aa28:	2300      	movs	r3, #0
 801aa2a:	4630      	mov	r0, r6
 801aa2c:	4639      	mov	r1, r7
 801aa2e:	f7e6 f85b 	bl	8000ae8 <__aeabi_dcmpeq>
 801aa32:	2800      	cmp	r0, #0
 801aa34:	f000 80c7 	beq.w	801abc6 <__kernel_rem_pio2+0x3fe>
 801aa38:	1e65      	subs	r5, r4, #1
 801aa3a:	462b      	mov	r3, r5
 801aa3c:	2200      	movs	r2, #0
 801aa3e:	9904      	ldr	r1, [sp, #16]
 801aa40:	428b      	cmp	r3, r1
 801aa42:	da6a      	bge.n	801ab1a <__kernel_rem_pio2+0x352>
 801aa44:	2a00      	cmp	r2, #0
 801aa46:	f000 8088 	beq.w	801ab5a <__kernel_rem_pio2+0x392>
 801aa4a:	ab0e      	add	r3, sp, #56	; 0x38
 801aa4c:	f1aa 0a18 	sub.w	sl, sl, #24
 801aa50:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	f000 80b4 	beq.w	801abc2 <__kernel_rem_pio2+0x3fa>
 801aa5a:	4650      	mov	r0, sl
 801aa5c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801aae8 <__kernel_rem_pio2+0x320>
 801aa60:	f000 fcea 	bl	801b438 <scalbn>
 801aa64:	00ec      	lsls	r4, r5, #3
 801aa66:	ab72      	add	r3, sp, #456	; 0x1c8
 801aa68:	191e      	adds	r6, r3, r4
 801aa6a:	ec59 8b10 	vmov	r8, r9, d0
 801aa6e:	f106 0a08 	add.w	sl, r6, #8
 801aa72:	462f      	mov	r7, r5
 801aa74:	2f00      	cmp	r7, #0
 801aa76:	f280 80df 	bge.w	801ac38 <__kernel_rem_pio2+0x470>
 801aa7a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801aae0 <__kernel_rem_pio2+0x318>
 801aa7e:	f04f 0a00 	mov.w	sl, #0
 801aa82:	eba5 030a 	sub.w	r3, r5, sl
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	f2c0 810a 	blt.w	801aca0 <__kernel_rem_pio2+0x4d8>
 801aa8c:	f8df b078 	ldr.w	fp, [pc, #120]	; 801ab08 <__kernel_rem_pio2+0x340>
 801aa90:	ec59 8b18 	vmov	r8, r9, d8
 801aa94:	2700      	movs	r7, #0
 801aa96:	e0f5      	b.n	801ac84 <__kernel_rem_pio2+0x4bc>
 801aa98:	2302      	movs	r3, #2
 801aa9a:	9302      	str	r3, [sp, #8]
 801aa9c:	e760      	b.n	801a960 <__kernel_rem_pio2+0x198>
 801aa9e:	ab0e      	add	r3, sp, #56	; 0x38
 801aaa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aaa4:	b94d      	cbnz	r5, 801aaba <__kernel_rem_pio2+0x2f2>
 801aaa6:	b12b      	cbz	r3, 801aab4 <__kernel_rem_pio2+0x2ec>
 801aaa8:	a80e      	add	r0, sp, #56	; 0x38
 801aaaa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801aaae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801aab2:	2301      	movs	r3, #1
 801aab4:	3201      	adds	r2, #1
 801aab6:	461d      	mov	r5, r3
 801aab8:	e759      	b.n	801a96e <__kernel_rem_pio2+0x1a6>
 801aaba:	a80e      	add	r0, sp, #56	; 0x38
 801aabc:	1acb      	subs	r3, r1, r3
 801aabe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801aac2:	462b      	mov	r3, r5
 801aac4:	e7f6      	b.n	801aab4 <__kernel_rem_pio2+0x2ec>
 801aac6:	1e62      	subs	r2, r4, #1
 801aac8:	ab0e      	add	r3, sp, #56	; 0x38
 801aaca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aace:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801aad2:	a90e      	add	r1, sp, #56	; 0x38
 801aad4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801aad8:	e757      	b.n	801a98a <__kernel_rem_pio2+0x1c2>
 801aada:	bf00      	nop
 801aadc:	f3af 8000 	nop.w
	...
 801aaec:	3ff00000 	.word	0x3ff00000
 801aaf0:	0801c3c0 	.word	0x0801c3c0
 801aaf4:	40200000 	.word	0x40200000
 801aaf8:	3ff00000 	.word	0x3ff00000
 801aafc:	3e700000 	.word	0x3e700000
 801ab00:	41700000 	.word	0x41700000
 801ab04:	3fe00000 	.word	0x3fe00000
 801ab08:	0801c380 	.word	0x0801c380
 801ab0c:	1e62      	subs	r2, r4, #1
 801ab0e:	ab0e      	add	r3, sp, #56	; 0x38
 801ab10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ab14:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801ab18:	e7db      	b.n	801aad2 <__kernel_rem_pio2+0x30a>
 801ab1a:	a90e      	add	r1, sp, #56	; 0x38
 801ab1c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801ab20:	3b01      	subs	r3, #1
 801ab22:	430a      	orrs	r2, r1
 801ab24:	e78b      	b.n	801aa3e <__kernel_rem_pio2+0x276>
 801ab26:	3301      	adds	r3, #1
 801ab28:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801ab2c:	2900      	cmp	r1, #0
 801ab2e:	d0fa      	beq.n	801ab26 <__kernel_rem_pio2+0x35e>
 801ab30:	9a08      	ldr	r2, [sp, #32]
 801ab32:	4422      	add	r2, r4
 801ab34:	00d2      	lsls	r2, r2, #3
 801ab36:	a922      	add	r1, sp, #136	; 0x88
 801ab38:	18e3      	adds	r3, r4, r3
 801ab3a:	9206      	str	r2, [sp, #24]
 801ab3c:	440a      	add	r2, r1
 801ab3e:	9302      	str	r3, [sp, #8]
 801ab40:	f10b 0108 	add.w	r1, fp, #8
 801ab44:	f102 0308 	add.w	r3, r2, #8
 801ab48:	1c66      	adds	r6, r4, #1
 801ab4a:	910a      	str	r1, [sp, #40]	; 0x28
 801ab4c:	2500      	movs	r5, #0
 801ab4e:	930d      	str	r3, [sp, #52]	; 0x34
 801ab50:	9b02      	ldr	r3, [sp, #8]
 801ab52:	42b3      	cmp	r3, r6
 801ab54:	da04      	bge.n	801ab60 <__kernel_rem_pio2+0x398>
 801ab56:	461c      	mov	r4, r3
 801ab58:	e6a6      	b.n	801a8a8 <__kernel_rem_pio2+0xe0>
 801ab5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ab5c:	2301      	movs	r3, #1
 801ab5e:	e7e3      	b.n	801ab28 <__kernel_rem_pio2+0x360>
 801ab60:	9b06      	ldr	r3, [sp, #24]
 801ab62:	18ef      	adds	r7, r5, r3
 801ab64:	ab22      	add	r3, sp, #136	; 0x88
 801ab66:	441f      	add	r7, r3
 801ab68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab6a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801ab6e:	f7e5 fce9 	bl	8000544 <__aeabi_i2d>
 801ab72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab74:	461c      	mov	r4, r3
 801ab76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab78:	e9c7 0100 	strd	r0, r1, [r7]
 801ab7c:	eb03 0b05 	add.w	fp, r3, r5
 801ab80:	2700      	movs	r7, #0
 801ab82:	f04f 0800 	mov.w	r8, #0
 801ab86:	f04f 0900 	mov.w	r9, #0
 801ab8a:	9b07      	ldr	r3, [sp, #28]
 801ab8c:	429f      	cmp	r7, r3
 801ab8e:	dd08      	ble.n	801aba2 <__kernel_rem_pio2+0x3da>
 801ab90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab92:	aa72      	add	r2, sp, #456	; 0x1c8
 801ab94:	18eb      	adds	r3, r5, r3
 801ab96:	4413      	add	r3, r2
 801ab98:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801ab9c:	3601      	adds	r6, #1
 801ab9e:	3508      	adds	r5, #8
 801aba0:	e7d6      	b.n	801ab50 <__kernel_rem_pio2+0x388>
 801aba2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801aba6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801abaa:	f7e5 fd35 	bl	8000618 <__aeabi_dmul>
 801abae:	4602      	mov	r2, r0
 801abb0:	460b      	mov	r3, r1
 801abb2:	4640      	mov	r0, r8
 801abb4:	4649      	mov	r1, r9
 801abb6:	f7e5 fb79 	bl	80002ac <__adddf3>
 801abba:	3701      	adds	r7, #1
 801abbc:	4680      	mov	r8, r0
 801abbe:	4689      	mov	r9, r1
 801abc0:	e7e3      	b.n	801ab8a <__kernel_rem_pio2+0x3c2>
 801abc2:	3d01      	subs	r5, #1
 801abc4:	e741      	b.n	801aa4a <__kernel_rem_pio2+0x282>
 801abc6:	f1ca 0000 	rsb	r0, sl, #0
 801abca:	ec47 6b10 	vmov	d0, r6, r7
 801abce:	f000 fc33 	bl	801b438 <scalbn>
 801abd2:	ec57 6b10 	vmov	r6, r7, d0
 801abd6:	2200      	movs	r2, #0
 801abd8:	4b99      	ldr	r3, [pc, #612]	; (801ae40 <__kernel_rem_pio2+0x678>)
 801abda:	ee10 0a10 	vmov	r0, s0
 801abde:	4639      	mov	r1, r7
 801abe0:	f7e5 ffa0 	bl	8000b24 <__aeabi_dcmpge>
 801abe4:	b1f8      	cbz	r0, 801ac26 <__kernel_rem_pio2+0x45e>
 801abe6:	2200      	movs	r2, #0
 801abe8:	4b96      	ldr	r3, [pc, #600]	; (801ae44 <__kernel_rem_pio2+0x67c>)
 801abea:	4630      	mov	r0, r6
 801abec:	4639      	mov	r1, r7
 801abee:	f7e5 fd13 	bl	8000618 <__aeabi_dmul>
 801abf2:	f7e5 ffc1 	bl	8000b78 <__aeabi_d2iz>
 801abf6:	4680      	mov	r8, r0
 801abf8:	f7e5 fca4 	bl	8000544 <__aeabi_i2d>
 801abfc:	2200      	movs	r2, #0
 801abfe:	4b90      	ldr	r3, [pc, #576]	; (801ae40 <__kernel_rem_pio2+0x678>)
 801ac00:	f7e5 fd0a 	bl	8000618 <__aeabi_dmul>
 801ac04:	460b      	mov	r3, r1
 801ac06:	4602      	mov	r2, r0
 801ac08:	4639      	mov	r1, r7
 801ac0a:	4630      	mov	r0, r6
 801ac0c:	f7e5 fb4c 	bl	80002a8 <__aeabi_dsub>
 801ac10:	f7e5 ffb2 	bl	8000b78 <__aeabi_d2iz>
 801ac14:	1c65      	adds	r5, r4, #1
 801ac16:	ab0e      	add	r3, sp, #56	; 0x38
 801ac18:	f10a 0a18 	add.w	sl, sl, #24
 801ac1c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ac20:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801ac24:	e719      	b.n	801aa5a <__kernel_rem_pio2+0x292>
 801ac26:	4630      	mov	r0, r6
 801ac28:	4639      	mov	r1, r7
 801ac2a:	f7e5 ffa5 	bl	8000b78 <__aeabi_d2iz>
 801ac2e:	ab0e      	add	r3, sp, #56	; 0x38
 801ac30:	4625      	mov	r5, r4
 801ac32:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ac36:	e710      	b.n	801aa5a <__kernel_rem_pio2+0x292>
 801ac38:	ab0e      	add	r3, sp, #56	; 0x38
 801ac3a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801ac3e:	f7e5 fc81 	bl	8000544 <__aeabi_i2d>
 801ac42:	4642      	mov	r2, r8
 801ac44:	464b      	mov	r3, r9
 801ac46:	f7e5 fce7 	bl	8000618 <__aeabi_dmul>
 801ac4a:	2200      	movs	r2, #0
 801ac4c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801ac50:	4b7c      	ldr	r3, [pc, #496]	; (801ae44 <__kernel_rem_pio2+0x67c>)
 801ac52:	4640      	mov	r0, r8
 801ac54:	4649      	mov	r1, r9
 801ac56:	f7e5 fcdf 	bl	8000618 <__aeabi_dmul>
 801ac5a:	3f01      	subs	r7, #1
 801ac5c:	4680      	mov	r8, r0
 801ac5e:	4689      	mov	r9, r1
 801ac60:	e708      	b.n	801aa74 <__kernel_rem_pio2+0x2ac>
 801ac62:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801ac66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac6a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801ac6e:	f7e5 fcd3 	bl	8000618 <__aeabi_dmul>
 801ac72:	4602      	mov	r2, r0
 801ac74:	460b      	mov	r3, r1
 801ac76:	4640      	mov	r0, r8
 801ac78:	4649      	mov	r1, r9
 801ac7a:	f7e5 fb17 	bl	80002ac <__adddf3>
 801ac7e:	3701      	adds	r7, #1
 801ac80:	4680      	mov	r8, r0
 801ac82:	4689      	mov	r9, r1
 801ac84:	9b04      	ldr	r3, [sp, #16]
 801ac86:	429f      	cmp	r7, r3
 801ac88:	dc01      	bgt.n	801ac8e <__kernel_rem_pio2+0x4c6>
 801ac8a:	45ba      	cmp	sl, r7
 801ac8c:	dae9      	bge.n	801ac62 <__kernel_rem_pio2+0x49a>
 801ac8e:	ab4a      	add	r3, sp, #296	; 0x128
 801ac90:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ac94:	e9c3 8900 	strd	r8, r9, [r3]
 801ac98:	f10a 0a01 	add.w	sl, sl, #1
 801ac9c:	3e08      	subs	r6, #8
 801ac9e:	e6f0      	b.n	801aa82 <__kernel_rem_pio2+0x2ba>
 801aca0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801aca2:	2b03      	cmp	r3, #3
 801aca4:	d85b      	bhi.n	801ad5e <__kernel_rem_pio2+0x596>
 801aca6:	e8df f003 	tbb	[pc, r3]
 801acaa:	264a      	.short	0x264a
 801acac:	0226      	.short	0x0226
 801acae:	ab9a      	add	r3, sp, #616	; 0x268
 801acb0:	441c      	add	r4, r3
 801acb2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801acb6:	46a2      	mov	sl, r4
 801acb8:	46ab      	mov	fp, r5
 801acba:	f1bb 0f00 	cmp.w	fp, #0
 801acbe:	dc6c      	bgt.n	801ad9a <__kernel_rem_pio2+0x5d2>
 801acc0:	46a2      	mov	sl, r4
 801acc2:	46ab      	mov	fp, r5
 801acc4:	f1bb 0f01 	cmp.w	fp, #1
 801acc8:	f300 8086 	bgt.w	801add8 <__kernel_rem_pio2+0x610>
 801accc:	2000      	movs	r0, #0
 801acce:	2100      	movs	r1, #0
 801acd0:	2d01      	cmp	r5, #1
 801acd2:	f300 80a0 	bgt.w	801ae16 <__kernel_rem_pio2+0x64e>
 801acd6:	9b02      	ldr	r3, [sp, #8]
 801acd8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801acdc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	f040 809e 	bne.w	801ae22 <__kernel_rem_pio2+0x65a>
 801ace6:	9b01      	ldr	r3, [sp, #4]
 801ace8:	e9c3 7800 	strd	r7, r8, [r3]
 801acec:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801acf0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801acf4:	e033      	b.n	801ad5e <__kernel_rem_pio2+0x596>
 801acf6:	3408      	adds	r4, #8
 801acf8:	ab4a      	add	r3, sp, #296	; 0x128
 801acfa:	441c      	add	r4, r3
 801acfc:	462e      	mov	r6, r5
 801acfe:	2000      	movs	r0, #0
 801ad00:	2100      	movs	r1, #0
 801ad02:	2e00      	cmp	r6, #0
 801ad04:	da3a      	bge.n	801ad7c <__kernel_rem_pio2+0x5b4>
 801ad06:	9b02      	ldr	r3, [sp, #8]
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d03d      	beq.n	801ad88 <__kernel_rem_pio2+0x5c0>
 801ad0c:	4602      	mov	r2, r0
 801ad0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ad12:	9c01      	ldr	r4, [sp, #4]
 801ad14:	e9c4 2300 	strd	r2, r3, [r4]
 801ad18:	4602      	mov	r2, r0
 801ad1a:	460b      	mov	r3, r1
 801ad1c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801ad20:	f7e5 fac2 	bl	80002a8 <__aeabi_dsub>
 801ad24:	ae4c      	add	r6, sp, #304	; 0x130
 801ad26:	2401      	movs	r4, #1
 801ad28:	42a5      	cmp	r5, r4
 801ad2a:	da30      	bge.n	801ad8e <__kernel_rem_pio2+0x5c6>
 801ad2c:	9b02      	ldr	r3, [sp, #8]
 801ad2e:	b113      	cbz	r3, 801ad36 <__kernel_rem_pio2+0x56e>
 801ad30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ad34:	4619      	mov	r1, r3
 801ad36:	9b01      	ldr	r3, [sp, #4]
 801ad38:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801ad3c:	e00f      	b.n	801ad5e <__kernel_rem_pio2+0x596>
 801ad3e:	ab9a      	add	r3, sp, #616	; 0x268
 801ad40:	441c      	add	r4, r3
 801ad42:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801ad46:	2000      	movs	r0, #0
 801ad48:	2100      	movs	r1, #0
 801ad4a:	2d00      	cmp	r5, #0
 801ad4c:	da10      	bge.n	801ad70 <__kernel_rem_pio2+0x5a8>
 801ad4e:	9b02      	ldr	r3, [sp, #8]
 801ad50:	b113      	cbz	r3, 801ad58 <__kernel_rem_pio2+0x590>
 801ad52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ad56:	4619      	mov	r1, r3
 801ad58:	9b01      	ldr	r3, [sp, #4]
 801ad5a:	e9c3 0100 	strd	r0, r1, [r3]
 801ad5e:	9b06      	ldr	r3, [sp, #24]
 801ad60:	f003 0007 	and.w	r0, r3, #7
 801ad64:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801ad68:	ecbd 8b02 	vpop	{d8}
 801ad6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad70:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ad74:	f7e5 fa9a 	bl	80002ac <__adddf3>
 801ad78:	3d01      	subs	r5, #1
 801ad7a:	e7e6      	b.n	801ad4a <__kernel_rem_pio2+0x582>
 801ad7c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ad80:	f7e5 fa94 	bl	80002ac <__adddf3>
 801ad84:	3e01      	subs	r6, #1
 801ad86:	e7bc      	b.n	801ad02 <__kernel_rem_pio2+0x53a>
 801ad88:	4602      	mov	r2, r0
 801ad8a:	460b      	mov	r3, r1
 801ad8c:	e7c1      	b.n	801ad12 <__kernel_rem_pio2+0x54a>
 801ad8e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801ad92:	f7e5 fa8b 	bl	80002ac <__adddf3>
 801ad96:	3401      	adds	r4, #1
 801ad98:	e7c6      	b.n	801ad28 <__kernel_rem_pio2+0x560>
 801ad9a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801ad9e:	ed3a 7b02 	vldmdb	sl!, {d7}
 801ada2:	4640      	mov	r0, r8
 801ada4:	ec53 2b17 	vmov	r2, r3, d7
 801ada8:	4649      	mov	r1, r9
 801adaa:	ed8d 7b04 	vstr	d7, [sp, #16]
 801adae:	f7e5 fa7d 	bl	80002ac <__adddf3>
 801adb2:	4602      	mov	r2, r0
 801adb4:	460b      	mov	r3, r1
 801adb6:	4606      	mov	r6, r0
 801adb8:	460f      	mov	r7, r1
 801adba:	4640      	mov	r0, r8
 801adbc:	4649      	mov	r1, r9
 801adbe:	f7e5 fa73 	bl	80002a8 <__aeabi_dsub>
 801adc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801adc6:	f7e5 fa71 	bl	80002ac <__adddf3>
 801adca:	f10b 3bff 	add.w	fp, fp, #4294967295
 801adce:	e9ca 0100 	strd	r0, r1, [sl]
 801add2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801add6:	e770      	b.n	801acba <__kernel_rem_pio2+0x4f2>
 801add8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801addc:	ed3a 7b02 	vldmdb	sl!, {d7}
 801ade0:	4630      	mov	r0, r6
 801ade2:	ec53 2b17 	vmov	r2, r3, d7
 801ade6:	4639      	mov	r1, r7
 801ade8:	ed8d 7b04 	vstr	d7, [sp, #16]
 801adec:	f7e5 fa5e 	bl	80002ac <__adddf3>
 801adf0:	4602      	mov	r2, r0
 801adf2:	460b      	mov	r3, r1
 801adf4:	4680      	mov	r8, r0
 801adf6:	4689      	mov	r9, r1
 801adf8:	4630      	mov	r0, r6
 801adfa:	4639      	mov	r1, r7
 801adfc:	f7e5 fa54 	bl	80002a8 <__aeabi_dsub>
 801ae00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ae04:	f7e5 fa52 	bl	80002ac <__adddf3>
 801ae08:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ae0c:	e9ca 0100 	strd	r0, r1, [sl]
 801ae10:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801ae14:	e756      	b.n	801acc4 <__kernel_rem_pio2+0x4fc>
 801ae16:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801ae1a:	f7e5 fa47 	bl	80002ac <__adddf3>
 801ae1e:	3d01      	subs	r5, #1
 801ae20:	e756      	b.n	801acd0 <__kernel_rem_pio2+0x508>
 801ae22:	9b01      	ldr	r3, [sp, #4]
 801ae24:	9a01      	ldr	r2, [sp, #4]
 801ae26:	601f      	str	r7, [r3, #0]
 801ae28:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801ae2c:	605c      	str	r4, [r3, #4]
 801ae2e:	609d      	str	r5, [r3, #8]
 801ae30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801ae34:	60d3      	str	r3, [r2, #12]
 801ae36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ae3a:	6110      	str	r0, [r2, #16]
 801ae3c:	6153      	str	r3, [r2, #20]
 801ae3e:	e78e      	b.n	801ad5e <__kernel_rem_pio2+0x596>
 801ae40:	41700000 	.word	0x41700000
 801ae44:	3e700000 	.word	0x3e700000

0801ae48 <__kernel_sin>:
 801ae48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae4c:	ec55 4b10 	vmov	r4, r5, d0
 801ae50:	b085      	sub	sp, #20
 801ae52:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ae56:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801ae5a:	ed8d 1b00 	vstr	d1, [sp]
 801ae5e:	9002      	str	r0, [sp, #8]
 801ae60:	da06      	bge.n	801ae70 <__kernel_sin+0x28>
 801ae62:	ee10 0a10 	vmov	r0, s0
 801ae66:	4629      	mov	r1, r5
 801ae68:	f7e5 fe86 	bl	8000b78 <__aeabi_d2iz>
 801ae6c:	2800      	cmp	r0, #0
 801ae6e:	d051      	beq.n	801af14 <__kernel_sin+0xcc>
 801ae70:	4622      	mov	r2, r4
 801ae72:	462b      	mov	r3, r5
 801ae74:	4620      	mov	r0, r4
 801ae76:	4629      	mov	r1, r5
 801ae78:	f7e5 fbce 	bl	8000618 <__aeabi_dmul>
 801ae7c:	4682      	mov	sl, r0
 801ae7e:	468b      	mov	fp, r1
 801ae80:	4602      	mov	r2, r0
 801ae82:	460b      	mov	r3, r1
 801ae84:	4620      	mov	r0, r4
 801ae86:	4629      	mov	r1, r5
 801ae88:	f7e5 fbc6 	bl	8000618 <__aeabi_dmul>
 801ae8c:	a341      	add	r3, pc, #260	; (adr r3, 801af94 <__kernel_sin+0x14c>)
 801ae8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae92:	4680      	mov	r8, r0
 801ae94:	4689      	mov	r9, r1
 801ae96:	4650      	mov	r0, sl
 801ae98:	4659      	mov	r1, fp
 801ae9a:	f7e5 fbbd 	bl	8000618 <__aeabi_dmul>
 801ae9e:	a33f      	add	r3, pc, #252	; (adr r3, 801af9c <__kernel_sin+0x154>)
 801aea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aea4:	f7e5 fa00 	bl	80002a8 <__aeabi_dsub>
 801aea8:	4652      	mov	r2, sl
 801aeaa:	465b      	mov	r3, fp
 801aeac:	f7e5 fbb4 	bl	8000618 <__aeabi_dmul>
 801aeb0:	a33c      	add	r3, pc, #240	; (adr r3, 801afa4 <__kernel_sin+0x15c>)
 801aeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeb6:	f7e5 f9f9 	bl	80002ac <__adddf3>
 801aeba:	4652      	mov	r2, sl
 801aebc:	465b      	mov	r3, fp
 801aebe:	f7e5 fbab 	bl	8000618 <__aeabi_dmul>
 801aec2:	a33a      	add	r3, pc, #232	; (adr r3, 801afac <__kernel_sin+0x164>)
 801aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aec8:	f7e5 f9ee 	bl	80002a8 <__aeabi_dsub>
 801aecc:	4652      	mov	r2, sl
 801aece:	465b      	mov	r3, fp
 801aed0:	f7e5 fba2 	bl	8000618 <__aeabi_dmul>
 801aed4:	a337      	add	r3, pc, #220	; (adr r3, 801afb4 <__kernel_sin+0x16c>)
 801aed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aeda:	f7e5 f9e7 	bl	80002ac <__adddf3>
 801aede:	9b02      	ldr	r3, [sp, #8]
 801aee0:	4606      	mov	r6, r0
 801aee2:	460f      	mov	r7, r1
 801aee4:	b9db      	cbnz	r3, 801af1e <__kernel_sin+0xd6>
 801aee6:	4602      	mov	r2, r0
 801aee8:	460b      	mov	r3, r1
 801aeea:	4650      	mov	r0, sl
 801aeec:	4659      	mov	r1, fp
 801aeee:	f7e5 fb93 	bl	8000618 <__aeabi_dmul>
 801aef2:	a325      	add	r3, pc, #148	; (adr r3, 801af88 <__kernel_sin+0x140>)
 801aef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aef8:	f7e5 f9d6 	bl	80002a8 <__aeabi_dsub>
 801aefc:	4642      	mov	r2, r8
 801aefe:	464b      	mov	r3, r9
 801af00:	f7e5 fb8a 	bl	8000618 <__aeabi_dmul>
 801af04:	4602      	mov	r2, r0
 801af06:	460b      	mov	r3, r1
 801af08:	4620      	mov	r0, r4
 801af0a:	4629      	mov	r1, r5
 801af0c:	f7e5 f9ce 	bl	80002ac <__adddf3>
 801af10:	4604      	mov	r4, r0
 801af12:	460d      	mov	r5, r1
 801af14:	ec45 4b10 	vmov	d0, r4, r5
 801af18:	b005      	add	sp, #20
 801af1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af1e:	2200      	movs	r2, #0
 801af20:	4b1b      	ldr	r3, [pc, #108]	; (801af90 <__kernel_sin+0x148>)
 801af22:	e9dd 0100 	ldrd	r0, r1, [sp]
 801af26:	f7e5 fb77 	bl	8000618 <__aeabi_dmul>
 801af2a:	4632      	mov	r2, r6
 801af2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801af30:	463b      	mov	r3, r7
 801af32:	4640      	mov	r0, r8
 801af34:	4649      	mov	r1, r9
 801af36:	f7e5 fb6f 	bl	8000618 <__aeabi_dmul>
 801af3a:	4602      	mov	r2, r0
 801af3c:	460b      	mov	r3, r1
 801af3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801af42:	f7e5 f9b1 	bl	80002a8 <__aeabi_dsub>
 801af46:	4652      	mov	r2, sl
 801af48:	465b      	mov	r3, fp
 801af4a:	f7e5 fb65 	bl	8000618 <__aeabi_dmul>
 801af4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801af52:	f7e5 f9a9 	bl	80002a8 <__aeabi_dsub>
 801af56:	a30c      	add	r3, pc, #48	; (adr r3, 801af88 <__kernel_sin+0x140>)
 801af58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af5c:	4606      	mov	r6, r0
 801af5e:	460f      	mov	r7, r1
 801af60:	4640      	mov	r0, r8
 801af62:	4649      	mov	r1, r9
 801af64:	f7e5 fb58 	bl	8000618 <__aeabi_dmul>
 801af68:	4602      	mov	r2, r0
 801af6a:	460b      	mov	r3, r1
 801af6c:	4630      	mov	r0, r6
 801af6e:	4639      	mov	r1, r7
 801af70:	f7e5 f99c 	bl	80002ac <__adddf3>
 801af74:	4602      	mov	r2, r0
 801af76:	460b      	mov	r3, r1
 801af78:	4620      	mov	r0, r4
 801af7a:	4629      	mov	r1, r5
 801af7c:	f7e5 f994 	bl	80002a8 <__aeabi_dsub>
 801af80:	e7c6      	b.n	801af10 <__kernel_sin+0xc8>
 801af82:	bf00      	nop
 801af84:	f3af 8000 	nop.w
 801af88:	55555549 	.word	0x55555549
 801af8c:	3fc55555 	.word	0x3fc55555
 801af90:	3fe00000 	.word	0x3fe00000
 801af94:	5acfd57c 	.word	0x5acfd57c
 801af98:	3de5d93a 	.word	0x3de5d93a
 801af9c:	8a2b9ceb 	.word	0x8a2b9ceb
 801afa0:	3e5ae5e6 	.word	0x3e5ae5e6
 801afa4:	57b1fe7d 	.word	0x57b1fe7d
 801afa8:	3ec71de3 	.word	0x3ec71de3
 801afac:	19c161d5 	.word	0x19c161d5
 801afb0:	3f2a01a0 	.word	0x3f2a01a0
 801afb4:	1110f8a6 	.word	0x1110f8a6
 801afb8:	3f811111 	.word	0x3f811111
 801afbc:	00000000 	.word	0x00000000

0801afc0 <atan>:
 801afc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afc4:	ec55 4b10 	vmov	r4, r5, d0
 801afc8:	4bc3      	ldr	r3, [pc, #780]	; (801b2d8 <atan+0x318>)
 801afca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801afce:	429e      	cmp	r6, r3
 801afd0:	46ab      	mov	fp, r5
 801afd2:	dd18      	ble.n	801b006 <atan+0x46>
 801afd4:	4bc1      	ldr	r3, [pc, #772]	; (801b2dc <atan+0x31c>)
 801afd6:	429e      	cmp	r6, r3
 801afd8:	dc01      	bgt.n	801afde <atan+0x1e>
 801afda:	d109      	bne.n	801aff0 <atan+0x30>
 801afdc:	b144      	cbz	r4, 801aff0 <atan+0x30>
 801afde:	4622      	mov	r2, r4
 801afe0:	462b      	mov	r3, r5
 801afe2:	4620      	mov	r0, r4
 801afe4:	4629      	mov	r1, r5
 801afe6:	f7e5 f961 	bl	80002ac <__adddf3>
 801afea:	4604      	mov	r4, r0
 801afec:	460d      	mov	r5, r1
 801afee:	e006      	b.n	801affe <atan+0x3e>
 801aff0:	f1bb 0f00 	cmp.w	fp, #0
 801aff4:	f340 8131 	ble.w	801b25a <atan+0x29a>
 801aff8:	a59b      	add	r5, pc, #620	; (adr r5, 801b268 <atan+0x2a8>)
 801affa:	e9d5 4500 	ldrd	r4, r5, [r5]
 801affe:	ec45 4b10 	vmov	d0, r4, r5
 801b002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b006:	4bb6      	ldr	r3, [pc, #728]	; (801b2e0 <atan+0x320>)
 801b008:	429e      	cmp	r6, r3
 801b00a:	dc14      	bgt.n	801b036 <atan+0x76>
 801b00c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801b010:	429e      	cmp	r6, r3
 801b012:	dc0d      	bgt.n	801b030 <atan+0x70>
 801b014:	a396      	add	r3, pc, #600	; (adr r3, 801b270 <atan+0x2b0>)
 801b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b01a:	ee10 0a10 	vmov	r0, s0
 801b01e:	4629      	mov	r1, r5
 801b020:	f7e5 f944 	bl	80002ac <__adddf3>
 801b024:	2200      	movs	r2, #0
 801b026:	4baf      	ldr	r3, [pc, #700]	; (801b2e4 <atan+0x324>)
 801b028:	f7e5 fd86 	bl	8000b38 <__aeabi_dcmpgt>
 801b02c:	2800      	cmp	r0, #0
 801b02e:	d1e6      	bne.n	801affe <atan+0x3e>
 801b030:	f04f 3aff 	mov.w	sl, #4294967295
 801b034:	e02b      	b.n	801b08e <atan+0xce>
 801b036:	f000 f963 	bl	801b300 <fabs>
 801b03a:	4bab      	ldr	r3, [pc, #684]	; (801b2e8 <atan+0x328>)
 801b03c:	429e      	cmp	r6, r3
 801b03e:	ec55 4b10 	vmov	r4, r5, d0
 801b042:	f300 80bf 	bgt.w	801b1c4 <atan+0x204>
 801b046:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801b04a:	429e      	cmp	r6, r3
 801b04c:	f300 80a0 	bgt.w	801b190 <atan+0x1d0>
 801b050:	ee10 2a10 	vmov	r2, s0
 801b054:	ee10 0a10 	vmov	r0, s0
 801b058:	462b      	mov	r3, r5
 801b05a:	4629      	mov	r1, r5
 801b05c:	f7e5 f926 	bl	80002ac <__adddf3>
 801b060:	2200      	movs	r2, #0
 801b062:	4ba0      	ldr	r3, [pc, #640]	; (801b2e4 <atan+0x324>)
 801b064:	f7e5 f920 	bl	80002a8 <__aeabi_dsub>
 801b068:	2200      	movs	r2, #0
 801b06a:	4606      	mov	r6, r0
 801b06c:	460f      	mov	r7, r1
 801b06e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b072:	4620      	mov	r0, r4
 801b074:	4629      	mov	r1, r5
 801b076:	f7e5 f919 	bl	80002ac <__adddf3>
 801b07a:	4602      	mov	r2, r0
 801b07c:	460b      	mov	r3, r1
 801b07e:	4630      	mov	r0, r6
 801b080:	4639      	mov	r1, r7
 801b082:	f7e5 fbf3 	bl	800086c <__aeabi_ddiv>
 801b086:	f04f 0a00 	mov.w	sl, #0
 801b08a:	4604      	mov	r4, r0
 801b08c:	460d      	mov	r5, r1
 801b08e:	4622      	mov	r2, r4
 801b090:	462b      	mov	r3, r5
 801b092:	4620      	mov	r0, r4
 801b094:	4629      	mov	r1, r5
 801b096:	f7e5 fabf 	bl	8000618 <__aeabi_dmul>
 801b09a:	4602      	mov	r2, r0
 801b09c:	460b      	mov	r3, r1
 801b09e:	4680      	mov	r8, r0
 801b0a0:	4689      	mov	r9, r1
 801b0a2:	f7e5 fab9 	bl	8000618 <__aeabi_dmul>
 801b0a6:	a374      	add	r3, pc, #464	; (adr r3, 801b278 <atan+0x2b8>)
 801b0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0ac:	4606      	mov	r6, r0
 801b0ae:	460f      	mov	r7, r1
 801b0b0:	f7e5 fab2 	bl	8000618 <__aeabi_dmul>
 801b0b4:	a372      	add	r3, pc, #456	; (adr r3, 801b280 <atan+0x2c0>)
 801b0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0ba:	f7e5 f8f7 	bl	80002ac <__adddf3>
 801b0be:	4632      	mov	r2, r6
 801b0c0:	463b      	mov	r3, r7
 801b0c2:	f7e5 faa9 	bl	8000618 <__aeabi_dmul>
 801b0c6:	a370      	add	r3, pc, #448	; (adr r3, 801b288 <atan+0x2c8>)
 801b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0cc:	f7e5 f8ee 	bl	80002ac <__adddf3>
 801b0d0:	4632      	mov	r2, r6
 801b0d2:	463b      	mov	r3, r7
 801b0d4:	f7e5 faa0 	bl	8000618 <__aeabi_dmul>
 801b0d8:	a36d      	add	r3, pc, #436	; (adr r3, 801b290 <atan+0x2d0>)
 801b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0de:	f7e5 f8e5 	bl	80002ac <__adddf3>
 801b0e2:	4632      	mov	r2, r6
 801b0e4:	463b      	mov	r3, r7
 801b0e6:	f7e5 fa97 	bl	8000618 <__aeabi_dmul>
 801b0ea:	a36b      	add	r3, pc, #428	; (adr r3, 801b298 <atan+0x2d8>)
 801b0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0f0:	f7e5 f8dc 	bl	80002ac <__adddf3>
 801b0f4:	4632      	mov	r2, r6
 801b0f6:	463b      	mov	r3, r7
 801b0f8:	f7e5 fa8e 	bl	8000618 <__aeabi_dmul>
 801b0fc:	a368      	add	r3, pc, #416	; (adr r3, 801b2a0 <atan+0x2e0>)
 801b0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b102:	f7e5 f8d3 	bl	80002ac <__adddf3>
 801b106:	4642      	mov	r2, r8
 801b108:	464b      	mov	r3, r9
 801b10a:	f7e5 fa85 	bl	8000618 <__aeabi_dmul>
 801b10e:	a366      	add	r3, pc, #408	; (adr r3, 801b2a8 <atan+0x2e8>)
 801b110:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b114:	4680      	mov	r8, r0
 801b116:	4689      	mov	r9, r1
 801b118:	4630      	mov	r0, r6
 801b11a:	4639      	mov	r1, r7
 801b11c:	f7e5 fa7c 	bl	8000618 <__aeabi_dmul>
 801b120:	a363      	add	r3, pc, #396	; (adr r3, 801b2b0 <atan+0x2f0>)
 801b122:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b126:	f7e5 f8bf 	bl	80002a8 <__aeabi_dsub>
 801b12a:	4632      	mov	r2, r6
 801b12c:	463b      	mov	r3, r7
 801b12e:	f7e5 fa73 	bl	8000618 <__aeabi_dmul>
 801b132:	a361      	add	r3, pc, #388	; (adr r3, 801b2b8 <atan+0x2f8>)
 801b134:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b138:	f7e5 f8b6 	bl	80002a8 <__aeabi_dsub>
 801b13c:	4632      	mov	r2, r6
 801b13e:	463b      	mov	r3, r7
 801b140:	f7e5 fa6a 	bl	8000618 <__aeabi_dmul>
 801b144:	a35e      	add	r3, pc, #376	; (adr r3, 801b2c0 <atan+0x300>)
 801b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b14a:	f7e5 f8ad 	bl	80002a8 <__aeabi_dsub>
 801b14e:	4632      	mov	r2, r6
 801b150:	463b      	mov	r3, r7
 801b152:	f7e5 fa61 	bl	8000618 <__aeabi_dmul>
 801b156:	a35c      	add	r3, pc, #368	; (adr r3, 801b2c8 <atan+0x308>)
 801b158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b15c:	f7e5 f8a4 	bl	80002a8 <__aeabi_dsub>
 801b160:	4632      	mov	r2, r6
 801b162:	463b      	mov	r3, r7
 801b164:	f7e5 fa58 	bl	8000618 <__aeabi_dmul>
 801b168:	4602      	mov	r2, r0
 801b16a:	460b      	mov	r3, r1
 801b16c:	4640      	mov	r0, r8
 801b16e:	4649      	mov	r1, r9
 801b170:	f7e5 f89c 	bl	80002ac <__adddf3>
 801b174:	4622      	mov	r2, r4
 801b176:	462b      	mov	r3, r5
 801b178:	f7e5 fa4e 	bl	8000618 <__aeabi_dmul>
 801b17c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801b180:	4602      	mov	r2, r0
 801b182:	460b      	mov	r3, r1
 801b184:	d14b      	bne.n	801b21e <atan+0x25e>
 801b186:	4620      	mov	r0, r4
 801b188:	4629      	mov	r1, r5
 801b18a:	f7e5 f88d 	bl	80002a8 <__aeabi_dsub>
 801b18e:	e72c      	b.n	801afea <atan+0x2a>
 801b190:	ee10 0a10 	vmov	r0, s0
 801b194:	2200      	movs	r2, #0
 801b196:	4b53      	ldr	r3, [pc, #332]	; (801b2e4 <atan+0x324>)
 801b198:	4629      	mov	r1, r5
 801b19a:	f7e5 f885 	bl	80002a8 <__aeabi_dsub>
 801b19e:	2200      	movs	r2, #0
 801b1a0:	4606      	mov	r6, r0
 801b1a2:	460f      	mov	r7, r1
 801b1a4:	4b4f      	ldr	r3, [pc, #316]	; (801b2e4 <atan+0x324>)
 801b1a6:	4620      	mov	r0, r4
 801b1a8:	4629      	mov	r1, r5
 801b1aa:	f7e5 f87f 	bl	80002ac <__adddf3>
 801b1ae:	4602      	mov	r2, r0
 801b1b0:	460b      	mov	r3, r1
 801b1b2:	4630      	mov	r0, r6
 801b1b4:	4639      	mov	r1, r7
 801b1b6:	f7e5 fb59 	bl	800086c <__aeabi_ddiv>
 801b1ba:	f04f 0a01 	mov.w	sl, #1
 801b1be:	4604      	mov	r4, r0
 801b1c0:	460d      	mov	r5, r1
 801b1c2:	e764      	b.n	801b08e <atan+0xce>
 801b1c4:	4b49      	ldr	r3, [pc, #292]	; (801b2ec <atan+0x32c>)
 801b1c6:	429e      	cmp	r6, r3
 801b1c8:	dc1d      	bgt.n	801b206 <atan+0x246>
 801b1ca:	ee10 0a10 	vmov	r0, s0
 801b1ce:	2200      	movs	r2, #0
 801b1d0:	4b47      	ldr	r3, [pc, #284]	; (801b2f0 <atan+0x330>)
 801b1d2:	4629      	mov	r1, r5
 801b1d4:	f7e5 f868 	bl	80002a8 <__aeabi_dsub>
 801b1d8:	2200      	movs	r2, #0
 801b1da:	4606      	mov	r6, r0
 801b1dc:	460f      	mov	r7, r1
 801b1de:	4b44      	ldr	r3, [pc, #272]	; (801b2f0 <atan+0x330>)
 801b1e0:	4620      	mov	r0, r4
 801b1e2:	4629      	mov	r1, r5
 801b1e4:	f7e5 fa18 	bl	8000618 <__aeabi_dmul>
 801b1e8:	2200      	movs	r2, #0
 801b1ea:	4b3e      	ldr	r3, [pc, #248]	; (801b2e4 <atan+0x324>)
 801b1ec:	f7e5 f85e 	bl	80002ac <__adddf3>
 801b1f0:	4602      	mov	r2, r0
 801b1f2:	460b      	mov	r3, r1
 801b1f4:	4630      	mov	r0, r6
 801b1f6:	4639      	mov	r1, r7
 801b1f8:	f7e5 fb38 	bl	800086c <__aeabi_ddiv>
 801b1fc:	f04f 0a02 	mov.w	sl, #2
 801b200:	4604      	mov	r4, r0
 801b202:	460d      	mov	r5, r1
 801b204:	e743      	b.n	801b08e <atan+0xce>
 801b206:	462b      	mov	r3, r5
 801b208:	ee10 2a10 	vmov	r2, s0
 801b20c:	2000      	movs	r0, #0
 801b20e:	4939      	ldr	r1, [pc, #228]	; (801b2f4 <atan+0x334>)
 801b210:	f7e5 fb2c 	bl	800086c <__aeabi_ddiv>
 801b214:	f04f 0a03 	mov.w	sl, #3
 801b218:	4604      	mov	r4, r0
 801b21a:	460d      	mov	r5, r1
 801b21c:	e737      	b.n	801b08e <atan+0xce>
 801b21e:	4b36      	ldr	r3, [pc, #216]	; (801b2f8 <atan+0x338>)
 801b220:	4e36      	ldr	r6, [pc, #216]	; (801b2fc <atan+0x33c>)
 801b222:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801b226:	4456      	add	r6, sl
 801b228:	449a      	add	sl, r3
 801b22a:	e9da 2300 	ldrd	r2, r3, [sl]
 801b22e:	f7e5 f83b 	bl	80002a8 <__aeabi_dsub>
 801b232:	4622      	mov	r2, r4
 801b234:	462b      	mov	r3, r5
 801b236:	f7e5 f837 	bl	80002a8 <__aeabi_dsub>
 801b23a:	4602      	mov	r2, r0
 801b23c:	460b      	mov	r3, r1
 801b23e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801b242:	f7e5 f831 	bl	80002a8 <__aeabi_dsub>
 801b246:	f1bb 0f00 	cmp.w	fp, #0
 801b24a:	4604      	mov	r4, r0
 801b24c:	460d      	mov	r5, r1
 801b24e:	f6bf aed6 	bge.w	801affe <atan+0x3e>
 801b252:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b256:	461d      	mov	r5, r3
 801b258:	e6d1      	b.n	801affe <atan+0x3e>
 801b25a:	a51d      	add	r5, pc, #116	; (adr r5, 801b2d0 <atan+0x310>)
 801b25c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b260:	e6cd      	b.n	801affe <atan+0x3e>
 801b262:	bf00      	nop
 801b264:	f3af 8000 	nop.w
 801b268:	54442d18 	.word	0x54442d18
 801b26c:	3ff921fb 	.word	0x3ff921fb
 801b270:	8800759c 	.word	0x8800759c
 801b274:	7e37e43c 	.word	0x7e37e43c
 801b278:	e322da11 	.word	0xe322da11
 801b27c:	3f90ad3a 	.word	0x3f90ad3a
 801b280:	24760deb 	.word	0x24760deb
 801b284:	3fa97b4b 	.word	0x3fa97b4b
 801b288:	a0d03d51 	.word	0xa0d03d51
 801b28c:	3fb10d66 	.word	0x3fb10d66
 801b290:	c54c206e 	.word	0xc54c206e
 801b294:	3fb745cd 	.word	0x3fb745cd
 801b298:	920083ff 	.word	0x920083ff
 801b29c:	3fc24924 	.word	0x3fc24924
 801b2a0:	5555550d 	.word	0x5555550d
 801b2a4:	3fd55555 	.word	0x3fd55555
 801b2a8:	2c6a6c2f 	.word	0x2c6a6c2f
 801b2ac:	bfa2b444 	.word	0xbfa2b444
 801b2b0:	52defd9a 	.word	0x52defd9a
 801b2b4:	3fadde2d 	.word	0x3fadde2d
 801b2b8:	af749a6d 	.word	0xaf749a6d
 801b2bc:	3fb3b0f2 	.word	0x3fb3b0f2
 801b2c0:	fe231671 	.word	0xfe231671
 801b2c4:	3fbc71c6 	.word	0x3fbc71c6
 801b2c8:	9998ebc4 	.word	0x9998ebc4
 801b2cc:	3fc99999 	.word	0x3fc99999
 801b2d0:	54442d18 	.word	0x54442d18
 801b2d4:	bff921fb 	.word	0xbff921fb
 801b2d8:	440fffff 	.word	0x440fffff
 801b2dc:	7ff00000 	.word	0x7ff00000
 801b2e0:	3fdbffff 	.word	0x3fdbffff
 801b2e4:	3ff00000 	.word	0x3ff00000
 801b2e8:	3ff2ffff 	.word	0x3ff2ffff
 801b2ec:	40037fff 	.word	0x40037fff
 801b2f0:	3ff80000 	.word	0x3ff80000
 801b2f4:	bff00000 	.word	0xbff00000
 801b2f8:	0801c3f0 	.word	0x0801c3f0
 801b2fc:	0801c3d0 	.word	0x0801c3d0

0801b300 <fabs>:
 801b300:	ec51 0b10 	vmov	r0, r1, d0
 801b304:	ee10 2a10 	vmov	r2, s0
 801b308:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b30c:	ec43 2b10 	vmov	d0, r2, r3
 801b310:	4770      	bx	lr
 801b312:	0000      	movs	r0, r0
 801b314:	0000      	movs	r0, r0
	...

0801b318 <floor>:
 801b318:	ec51 0b10 	vmov	r0, r1, d0
 801b31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b320:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b324:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801b328:	2e13      	cmp	r6, #19
 801b32a:	460c      	mov	r4, r1
 801b32c:	ee10 5a10 	vmov	r5, s0
 801b330:	4680      	mov	r8, r0
 801b332:	dc34      	bgt.n	801b39e <floor+0x86>
 801b334:	2e00      	cmp	r6, #0
 801b336:	da16      	bge.n	801b366 <floor+0x4e>
 801b338:	a335      	add	r3, pc, #212	; (adr r3, 801b410 <floor+0xf8>)
 801b33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b33e:	f7e4 ffb5 	bl	80002ac <__adddf3>
 801b342:	2200      	movs	r2, #0
 801b344:	2300      	movs	r3, #0
 801b346:	f7e5 fbf7 	bl	8000b38 <__aeabi_dcmpgt>
 801b34a:	b148      	cbz	r0, 801b360 <floor+0x48>
 801b34c:	2c00      	cmp	r4, #0
 801b34e:	da59      	bge.n	801b404 <floor+0xec>
 801b350:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b354:	4a30      	ldr	r2, [pc, #192]	; (801b418 <floor+0x100>)
 801b356:	432b      	orrs	r3, r5
 801b358:	2500      	movs	r5, #0
 801b35a:	42ab      	cmp	r3, r5
 801b35c:	bf18      	it	ne
 801b35e:	4614      	movne	r4, r2
 801b360:	4621      	mov	r1, r4
 801b362:	4628      	mov	r0, r5
 801b364:	e025      	b.n	801b3b2 <floor+0x9a>
 801b366:	4f2d      	ldr	r7, [pc, #180]	; (801b41c <floor+0x104>)
 801b368:	4137      	asrs	r7, r6
 801b36a:	ea01 0307 	and.w	r3, r1, r7
 801b36e:	4303      	orrs	r3, r0
 801b370:	d01f      	beq.n	801b3b2 <floor+0x9a>
 801b372:	a327      	add	r3, pc, #156	; (adr r3, 801b410 <floor+0xf8>)
 801b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b378:	f7e4 ff98 	bl	80002ac <__adddf3>
 801b37c:	2200      	movs	r2, #0
 801b37e:	2300      	movs	r3, #0
 801b380:	f7e5 fbda 	bl	8000b38 <__aeabi_dcmpgt>
 801b384:	2800      	cmp	r0, #0
 801b386:	d0eb      	beq.n	801b360 <floor+0x48>
 801b388:	2c00      	cmp	r4, #0
 801b38a:	bfbe      	ittt	lt
 801b38c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b390:	fa43 f606 	asrlt.w	r6, r3, r6
 801b394:	19a4      	addlt	r4, r4, r6
 801b396:	ea24 0407 	bic.w	r4, r4, r7
 801b39a:	2500      	movs	r5, #0
 801b39c:	e7e0      	b.n	801b360 <floor+0x48>
 801b39e:	2e33      	cmp	r6, #51	; 0x33
 801b3a0:	dd0b      	ble.n	801b3ba <floor+0xa2>
 801b3a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b3a6:	d104      	bne.n	801b3b2 <floor+0x9a>
 801b3a8:	ee10 2a10 	vmov	r2, s0
 801b3ac:	460b      	mov	r3, r1
 801b3ae:	f7e4 ff7d 	bl	80002ac <__adddf3>
 801b3b2:	ec41 0b10 	vmov	d0, r0, r1
 801b3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3ba:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801b3be:	f04f 33ff 	mov.w	r3, #4294967295
 801b3c2:	fa23 f707 	lsr.w	r7, r3, r7
 801b3c6:	4207      	tst	r7, r0
 801b3c8:	d0f3      	beq.n	801b3b2 <floor+0x9a>
 801b3ca:	a311      	add	r3, pc, #68	; (adr r3, 801b410 <floor+0xf8>)
 801b3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3d0:	f7e4 ff6c 	bl	80002ac <__adddf3>
 801b3d4:	2200      	movs	r2, #0
 801b3d6:	2300      	movs	r3, #0
 801b3d8:	f7e5 fbae 	bl	8000b38 <__aeabi_dcmpgt>
 801b3dc:	2800      	cmp	r0, #0
 801b3de:	d0bf      	beq.n	801b360 <floor+0x48>
 801b3e0:	2c00      	cmp	r4, #0
 801b3e2:	da02      	bge.n	801b3ea <floor+0xd2>
 801b3e4:	2e14      	cmp	r6, #20
 801b3e6:	d103      	bne.n	801b3f0 <floor+0xd8>
 801b3e8:	3401      	adds	r4, #1
 801b3ea:	ea25 0507 	bic.w	r5, r5, r7
 801b3ee:	e7b7      	b.n	801b360 <floor+0x48>
 801b3f0:	2301      	movs	r3, #1
 801b3f2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b3f6:	fa03 f606 	lsl.w	r6, r3, r6
 801b3fa:	4435      	add	r5, r6
 801b3fc:	4545      	cmp	r5, r8
 801b3fe:	bf38      	it	cc
 801b400:	18e4      	addcc	r4, r4, r3
 801b402:	e7f2      	b.n	801b3ea <floor+0xd2>
 801b404:	2500      	movs	r5, #0
 801b406:	462c      	mov	r4, r5
 801b408:	e7aa      	b.n	801b360 <floor+0x48>
 801b40a:	bf00      	nop
 801b40c:	f3af 8000 	nop.w
 801b410:	8800759c 	.word	0x8800759c
 801b414:	7e37e43c 	.word	0x7e37e43c
 801b418:	bff00000 	.word	0xbff00000
 801b41c:	000fffff 	.word	0x000fffff

0801b420 <matherr>:
 801b420:	2000      	movs	r0, #0
 801b422:	4770      	bx	lr
 801b424:	0000      	movs	r0, r0
	...

0801b428 <nan>:
 801b428:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b430 <nan+0x8>
 801b42c:	4770      	bx	lr
 801b42e:	bf00      	nop
 801b430:	00000000 	.word	0x00000000
 801b434:	7ff80000 	.word	0x7ff80000

0801b438 <scalbn>:
 801b438:	b570      	push	{r4, r5, r6, lr}
 801b43a:	ec55 4b10 	vmov	r4, r5, d0
 801b43e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b442:	4606      	mov	r6, r0
 801b444:	462b      	mov	r3, r5
 801b446:	b9aa      	cbnz	r2, 801b474 <scalbn+0x3c>
 801b448:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b44c:	4323      	orrs	r3, r4
 801b44e:	d03b      	beq.n	801b4c8 <scalbn+0x90>
 801b450:	4b31      	ldr	r3, [pc, #196]	; (801b518 <scalbn+0xe0>)
 801b452:	4629      	mov	r1, r5
 801b454:	2200      	movs	r2, #0
 801b456:	ee10 0a10 	vmov	r0, s0
 801b45a:	f7e5 f8dd 	bl	8000618 <__aeabi_dmul>
 801b45e:	4b2f      	ldr	r3, [pc, #188]	; (801b51c <scalbn+0xe4>)
 801b460:	429e      	cmp	r6, r3
 801b462:	4604      	mov	r4, r0
 801b464:	460d      	mov	r5, r1
 801b466:	da12      	bge.n	801b48e <scalbn+0x56>
 801b468:	a327      	add	r3, pc, #156	; (adr r3, 801b508 <scalbn+0xd0>)
 801b46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b46e:	f7e5 f8d3 	bl	8000618 <__aeabi_dmul>
 801b472:	e009      	b.n	801b488 <scalbn+0x50>
 801b474:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b478:	428a      	cmp	r2, r1
 801b47a:	d10c      	bne.n	801b496 <scalbn+0x5e>
 801b47c:	ee10 2a10 	vmov	r2, s0
 801b480:	4620      	mov	r0, r4
 801b482:	4629      	mov	r1, r5
 801b484:	f7e4 ff12 	bl	80002ac <__adddf3>
 801b488:	4604      	mov	r4, r0
 801b48a:	460d      	mov	r5, r1
 801b48c:	e01c      	b.n	801b4c8 <scalbn+0x90>
 801b48e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b492:	460b      	mov	r3, r1
 801b494:	3a36      	subs	r2, #54	; 0x36
 801b496:	4432      	add	r2, r6
 801b498:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b49c:	428a      	cmp	r2, r1
 801b49e:	dd0b      	ble.n	801b4b8 <scalbn+0x80>
 801b4a0:	ec45 4b11 	vmov	d1, r4, r5
 801b4a4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b510 <scalbn+0xd8>
 801b4a8:	f000 f83c 	bl	801b524 <copysign>
 801b4ac:	a318      	add	r3, pc, #96	; (adr r3, 801b510 <scalbn+0xd8>)
 801b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4b2:	ec51 0b10 	vmov	r0, r1, d0
 801b4b6:	e7da      	b.n	801b46e <scalbn+0x36>
 801b4b8:	2a00      	cmp	r2, #0
 801b4ba:	dd08      	ble.n	801b4ce <scalbn+0x96>
 801b4bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b4c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b4c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b4c8:	ec45 4b10 	vmov	d0, r4, r5
 801b4cc:	bd70      	pop	{r4, r5, r6, pc}
 801b4ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b4d2:	da0d      	bge.n	801b4f0 <scalbn+0xb8>
 801b4d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b4d8:	429e      	cmp	r6, r3
 801b4da:	ec45 4b11 	vmov	d1, r4, r5
 801b4de:	dce1      	bgt.n	801b4a4 <scalbn+0x6c>
 801b4e0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b508 <scalbn+0xd0>
 801b4e4:	f000 f81e 	bl	801b524 <copysign>
 801b4e8:	a307      	add	r3, pc, #28	; (adr r3, 801b508 <scalbn+0xd0>)
 801b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4ee:	e7e0      	b.n	801b4b2 <scalbn+0x7a>
 801b4f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b4f4:	3236      	adds	r2, #54	; 0x36
 801b4f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b4fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b4fe:	4620      	mov	r0, r4
 801b500:	4629      	mov	r1, r5
 801b502:	2200      	movs	r2, #0
 801b504:	4b06      	ldr	r3, [pc, #24]	; (801b520 <scalbn+0xe8>)
 801b506:	e7b2      	b.n	801b46e <scalbn+0x36>
 801b508:	c2f8f359 	.word	0xc2f8f359
 801b50c:	01a56e1f 	.word	0x01a56e1f
 801b510:	8800759c 	.word	0x8800759c
 801b514:	7e37e43c 	.word	0x7e37e43c
 801b518:	43500000 	.word	0x43500000
 801b51c:	ffff3cb0 	.word	0xffff3cb0
 801b520:	3c900000 	.word	0x3c900000

0801b524 <copysign>:
 801b524:	ec51 0b10 	vmov	r0, r1, d0
 801b528:	ee11 0a90 	vmov	r0, s3
 801b52c:	ee10 2a10 	vmov	r2, s0
 801b530:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b534:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b538:	ea41 0300 	orr.w	r3, r1, r0
 801b53c:	ec43 2b10 	vmov	d0, r2, r3
 801b540:	4770      	bx	lr
	...

0801b544 <_init>:
 801b544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b546:	bf00      	nop
 801b548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b54a:	bc08      	pop	{r3}
 801b54c:	469e      	mov	lr, r3
 801b54e:	4770      	bx	lr

0801b550 <_fini>:
 801b550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b552:	bf00      	nop
 801b554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b556:	bc08      	pop	{r3}
 801b558:	469e      	mov	lr, r3
 801b55a:	4770      	bx	lr
