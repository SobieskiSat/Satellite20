
Satellite20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ccc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  08012e60  08012e60  00022e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013428  08013428  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  08013428  08013428  00023428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013430  08013430  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013430  08013430  00023430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013434  08013434  00023434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08013438  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000650c  2000034c  08013784  0003034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006858  08013784  00036858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e165  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005877  00000000  00000000  0005e4e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002118  00000000  00000000  00063d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001eb0  00000000  00000000  00065e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000974e  00000000  00000000  00067d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ff43  00000000  00000000  0007146e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6549  00000000  00000000  000913b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001678fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009878  00000000  00000000  00167978  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000034c 	.word	0x2000034c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012e44 	.word	0x08012e44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000350 	.word	0x20000350
 80001cc:	08012e44 	.word	0x08012e44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <println>:

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
};
static inline void println(char* str)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2140      	movs	r1, #64	; 0x40
 8000f94:	4820      	ldr	r0, [pc, #128]	; (8001018 <println+0x90>)
 8000f96:	f001 fa85 	bl	80024a4 <HAL_GPIO_WritePin>

	printLen = strlen(str);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff f918 	bl	80001d0 <strlen>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	; (800101c <println+0x94>)
 8000fa4:	601a      	str	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < printLen; i++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e009      	b.n	8000fc0 <println+0x38>
	{
		printBuffer[i] = str[i];
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	441a      	add	r2, r3
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	7811      	ldrb	r1, [r2, #0]
 8000fb6:	4a1a      	ldr	r2, [pc, #104]	; (8001020 <println+0x98>)
 8000fb8:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	7bfa      	ldrb	r2, [r7, #15]
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <println+0x94>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d3f0      	bcc.n	8000fac <println+0x24>
	}
	printBuffer[printLen] = '\n';
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <println+0x94>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a14      	ldr	r2, [pc, #80]	; (8001020 <println+0x98>)
 8000fd0:	210a      	movs	r1, #10
 8000fd2:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <println+0x94>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	4a11      	ldr	r2, [pc, #68]	; (8001020 <println+0x98>)
 8000fdc:	210d      	movs	r1, #13
 8000fde:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <println+0x94>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <println+0x98>)
 8000fe8:	2100      	movs	r1, #0
 8000fea:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 8000fec:	bf00      	nop
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <println+0x94>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	3303      	adds	r3, #3
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4809      	ldr	r0, [pc, #36]	; (8001020 <println+0x98>)
 8000ffc:	f00d fd50 	bl	800eaa0 <CDC_Transmit_FS>
 8001000:	4603      	mov	r3, r0
 8001002:	2b01      	cmp	r3, #1
 8001004:	d0f3      	beq.n	8000fee <println+0x66>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	2140      	movs	r1, #64	; 0x40
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <println+0x90>)
 800100c:	f001 fa4a 	bl	80024a4 <HAL_GPIO_WritePin>
	#endif
};
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40020800 	.word	0x40020800
 800101c:	20000368 	.word	0x20000368
 8001020:	2000036c 	.word	0x2000036c

08001024 <millis>:
#include "main.h"
#include "run.h"

// TIM5 has 32-bit counter -> takes longer to overflow
static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
 8001028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <millis+0x1c>)
 8001030:	fba2 2303 	umull	r2, r3, r2, r3
 8001034:	099b      	lsrs	r3, r3, #6
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	10624dd3 	.word	0x10624dd3

08001044 <getTime>:
	rtc_date.Date = dateTime->dayM;
	if (HAL_RTC_SetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN) != HAL_OK) return false;
}

static inline DateTime getTime(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	811a      	strh	r2, [r3, #8]

	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 800106c:	f00c fe70 	bl	800dd50 <Get_RTC_Instance>
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	f003 fb1a 	bl	80046b0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 800107c:	f00c fe68 	bl	800dd50 <Get_RTC_Instance>
 8001080:	f107 0318 	add.w	r3, r7, #24
 8001084:	2200      	movs	r2, #0
 8001086:	4619      	mov	r1, r3
 8001088:	f003 fc17 	bl	80048ba <HAL_RTC_GetDate>

	toReturn.year = rtc_date.Year;
 800108c:	7efb      	ldrb	r3, [r7, #27]
 800108e:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 8001090:	7e7b      	ldrb	r3, [r7, #25]
 8001092:	737b      	strb	r3, [r7, #13]
	//toReturn.dayY = rtc_date.
	toReturn.dayM = rtc_date.Date;
 8001094:	7ebb      	ldrb	r3, [r7, #26]
 8001096:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8001098:	7e3b      	ldrb	r3, [r7, #24]
 800109a:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 800109c:	7f3b      	ldrb	r3, [r7, #28]
 800109e:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 80010a0:	7f7b      	ldrb	r3, [r7, #29]
 80010a2:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 80010a4:	7fbb      	ldrb	r3, [r7, #30]
 80010a6:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 80010a8:	f7ff ffbc 	bl	8001024 <millis>
 80010ac:	4602      	mov	r2, r0
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <getTime+0x9c>)
 80010b0:	fba3 1302 	umull	r1, r3, r3, r2
 80010b4:	099b      	lsrs	r3, r3, #6
 80010b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010ba:	fb01 f303 	mul.w	r3, r1, r3
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	82bb      	strh	r3, [r7, #20]

	return toReturn;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	461a      	mov	r2, r3
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	cb03      	ldmia	r3!, {r0, r1}
 80010ce:	6010      	str	r0, [r2, #0]
 80010d0:	6051      	str	r1, [r2, #4]
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	8113      	strh	r3, [r2, #8]
}
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	3730      	adds	r7, #48	; 0x30
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	10624dd3 	.word	0x10624dd3

080010e4 <SD_setFileTime>:
#include "run.h"
#include "main.h"
#include "ff.h"

FRESULT SD_setFileTime(char* patho, DateTime* dateTime)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
    FILINFO infoo;

    // fatfso counts date from 1980, +20 to year needed
    infoo.fdate = (WORD)(((dateTime->year + 20) << 9) | (dateTime->month << 5) | (dateTime->dayM));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	3314      	adds	r3, #20
 80010f4:	025b      	lsls	r3, r3, #9
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	785b      	ldrb	r3, [r3, #1]
 80010fc:	015b      	lsls	r3, r3, #5
 80010fe:	b21b      	sxth	r3, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	b21a      	sxth	r2, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	789b      	ldrb	r3, [r3, #2]
 8001108:	b21b      	sxth	r3, r3
 800110a:	4313      	orrs	r3, r2
 800110c:	b21b      	sxth	r3, r3
 800110e:	b29b      	uxth	r3, r3
 8001110:	81bb      	strh	r3, [r7, #12]
    // fatfso stores seconds as 0:30, /2 division needed
    infoo.ftime = (WORD)((dateTime->hour << 11) | (dateTime->minute << 5) | (dateTime->second / 2));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	02db      	lsls	r3, r3, #11
 8001118:	b21a      	sxth	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	795b      	ldrb	r3, [r3, #5]
 800111e:	015b      	lsls	r3, r3, #5
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21a      	sxth	r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	799b      	ldrb	r3, [r3, #6]
 800112a:	085b      	lsrs	r3, r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	b21b      	sxth	r3, r3
 8001130:	4313      	orrs	r3, r2
 8001132:	b21b      	sxth	r3, r3
 8001134:	b29b      	uxth	r3, r3
 8001136:	81fb      	strh	r3, [r7, #14]

    //f_utime((const TCHAR*)patho, &infoo); // << 	WHY ISNT THIS WORKING...../.......
    return FR_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <SD_init>:


FRESULT SD_init()
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0

	if (BSP_SD_Init() != MSD_OK) return FR_NOT_READY;
 800114e:	f00b febb 	bl	800cec8 <BSP_SD_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SD_init+0x14>
 8001158:	2303      	movs	r3, #3
 800115a:	e027      	b.n	80011ac <SD_init+0x64>

	if (FATFS_UnLinkDriver(SDPath) != 0) return FR_NOT_READY;
 800115c:	4815      	ldr	r0, [pc, #84]	; (80011b4 <SD_init+0x6c>)
 800115e:	f00b fea5 	bl	800ceac <FATFS_UnLinkDriver>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SD_init+0x24>
 8001168:	2303      	movs	r3, #3
 800116a:	e01f      	b.n	80011ac <SD_init+0x64>

	if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0) return FR_NOT_READY;
 800116c:	4911      	ldr	r1, [pc, #68]	; (80011b4 <SD_init+0x6c>)
 800116e:	4812      	ldr	r0, [pc, #72]	; (80011b8 <SD_init+0x70>)
 8001170:	f00b fe54 	bl	800ce1c <FATFS_LinkDriver>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SD_init+0x36>
 800117a:	2303      	movs	r3, #3
 800117c:	e016      	b.n	80011ac <SD_init+0x64>

	f_mount(0, SDPath, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <SD_init+0x6c>)
 8001182:	2000      	movs	r0, #0
 8001184:	f00b f8a2 	bl	800c2cc <f_mount>
	FRESULT mountStatus = f_mount(&fso, SDPath, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	490a      	ldr	r1, [pc, #40]	; (80011b4 <SD_init+0x6c>)
 800118c:	480b      	ldr	r0, [pc, #44]	; (80011bc <SD_init+0x74>)
 800118e:	f00b f89d 	bl	800c2cc <f_mount>
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
	if (mountStatus != FR_OK)
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d006      	beq.n	80011aa <SD_init+0x62>
	{
		f_mount(0, SDPath, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	4905      	ldr	r1, [pc, #20]	; (80011b4 <SD_init+0x6c>)
 80011a0:	2000      	movs	r0, #0
 80011a2:	f00b f893 	bl	800c2cc <f_mount>
		return mountStatus;
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	e000      	b.n	80011ac <SD_init+0x64>
	}

	return FR_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20002c38 	.word	0x20002c38
 80011b8:	08013144 	.word	0x08013144
 80011bc:	20001bf4 	.word	0x20001bf4

080011c0 <SD_deinit>:
FRESULT SD_deinit()
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	//if (FATFS_UnLinkDriver(SDPath) != 0) return FR_NOT_READY;
	f_mount(0, SDPath, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	4903      	ldr	r1, [pc, #12]	; (80011d4 <SD_deinit+0x14>)
 80011c8:	2000      	movs	r0, #0
 80011ca:	f00b f87f 	bl	800c2cc <f_mount>

	return FR_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20002c38 	.word	0x20002c38

080011d8 <SD_newFile>:

FRESULT SD_newFile(char* path)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	println("[SD] Before open.");
 80011e0:	4818      	ldr	r0, [pc, #96]	; (8001244 <SD_newFile+0x6c>)
 80011e2:	f7ff fed1 	bl	8000f88 <println>
	stato = f_open(&fileo, path, FA_WRITE | FA_CREATE_NEW);
 80011e6:	2206      	movs	r2, #6
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4817      	ldr	r0, [pc, #92]	; (8001248 <SD_newFile+0x70>)
 80011ec:	f00b f8b4 	bl	800c358 <f_open>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <SD_newFile+0x74>)
 80011f6:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK)
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <SD_newFile+0x74>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d007      	beq.n	8001210 <SD_newFile+0x38>
	{
		f_mount(0, SDPath, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	4913      	ldr	r1, [pc, #76]	; (8001250 <SD_newFile+0x78>)
 8001204:	2000      	movs	r0, #0
 8001206:	f00b f861 	bl	800c2cc <f_mount>
		return stato;
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <SD_newFile+0x74>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	e015      	b.n	800123c <SD_newFile+0x64>
	}


	DateTime now = getTime();
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff15 	bl	8001044 <getTime>
	println("[SD] Time get!");
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <SD_newFile+0x7c>)
 800121c:	f7ff feb4 	bl	8000f88 <println>
	SD_setFileTime(path, &now);
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4619      	mov	r1, r3
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff5c 	bl	80010e4 <SD_setFileTime>
	println("[SD] Time set!");
 800122c:	480a      	ldr	r0, [pc, #40]	; (8001258 <SD_newFile+0x80>)
 800122e:	f7ff feab 	bl	8000f88 <println>

	f_close(&fileo);
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <SD_newFile+0x70>)
 8001234:	f00b fc6e 	bl	800cb14 <f_close>
	return stato;
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <SD_newFile+0x74>)
 800123a:	781b      	ldrb	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	08012e60 	.word	0x08012e60
 8001248:	20000bc4 	.word	0x20000bc4
 800124c:	20000bc0 	.word	0x20000bc0
 8001250:	20002c38 	.word	0x20002c38
 8001254:	08012e74 	.word	0x08012e74
 8001258:	08012e84 	.word	0x08012e84

0800125c <SD_writeToFile>:
	return f_unlink(path);
}


FRESULT SD_writeToFile(char* path, char* content)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	stato = f_open(&fileo, path,  FA_WRITE | FA_OPEN_APPEND);
 8001266:	2232      	movs	r2, #50	; 0x32
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4819      	ldr	r0, [pc, #100]	; (80012d0 <SD_writeToFile+0x74>)
 800126c:	f00b f874 	bl	800c358 <f_open>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <SD_writeToFile+0x78>)
 8001276:	701a      	strb	r2, [r3, #0]
	println("openo");
 8001278:	4817      	ldr	r0, [pc, #92]	; (80012d8 <SD_writeToFile+0x7c>)
 800127a:	f7ff fe85 	bl	8000f88 <println>
	if (stato != FR_OK) return stato;
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <SD_writeToFile+0x78>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <SD_writeToFile+0x30>
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <SD_writeToFile+0x78>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	e01d      	b.n	80012c8 <SD_writeToFile+0x6c>

	println("writeno");
 800128c:	4813      	ldr	r0, [pc, #76]	; (80012dc <SD_writeToFile+0x80>)
 800128e:	f7ff fe7b 	bl	8000f88 <println>
	stato = f_write(&fileo, content, strlen(content), &testByteo);
 8001292:	6838      	ldr	r0, [r7, #0]
 8001294:	f7fe ff9c 	bl	80001d0 <strlen>
 8001298:	4602      	mov	r2, r0
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <SD_writeToFile+0x84>)
 800129c:	6839      	ldr	r1, [r7, #0]
 800129e:	480c      	ldr	r0, [pc, #48]	; (80012d0 <SD_writeToFile+0x74>)
 80012a0:	f00b fa26 	bl	800c6f0 <f_write>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <SD_writeToFile+0x78>)
 80012aa:	701a      	strb	r2, [r3, #0]
	if (stato != FR_OK) return stato;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <SD_writeToFile+0x78>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <SD_writeToFile+0x5e>
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <SD_writeToFile+0x78>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	e006      	b.n	80012c8 <SD_writeToFile+0x6c>

	println("closeno");
 80012ba:	480a      	ldr	r0, [pc, #40]	; (80012e4 <SD_writeToFile+0x88>)
 80012bc:	f7ff fe64 	bl	8000f88 <println>
	return f_close(&fileo);
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <SD_writeToFile+0x74>)
 80012c2:	f00b fc27 	bl	800cb14 <f_close>
 80012c6:	4603      	mov	r3, r0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000bc4 	.word	0x20000bc4
 80012d4:	20000bc0 	.word	0x20000bc0
 80012d8:	08012e94 	.word	0x08012e94
 80012dc:	08012e9c 	.word	0x08012e9c
 80012e0:	20002c28 	.word	0x20002c28
 80012e4:	08012ea4 	.word	0x08012ea4

080012e8 <print>:
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2140      	movs	r1, #64	; 0x40
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <print+0x40>)
 80012f6:	f001 f8d5 	bl	80024a4 <HAL_GPIO_WritePin>
	while (CDC_Transmit_FS((uint8_t*) str, strlen(str)) == USBD_BUSY);
 80012fa:	bf00      	nop
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7fe ff67 	bl	80001d0 <strlen>
 8001302:	4603      	mov	r3, r0
 8001304:	b29b      	uxth	r3, r3
 8001306:	4619      	mov	r1, r3
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f00d fbc9 	bl	800eaa0 <CDC_Transmit_FS>
 800130e:	4603      	mov	r3, r0
 8001310:	2b01      	cmp	r3, #1
 8001312:	d0f3      	beq.n	80012fc <print+0x14>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	2140      	movs	r1, #64	; 0x40
 8001318:	4803      	ldr	r0, [pc, #12]	; (8001328 <print+0x40>)
 800131a:	f001 f8c3 	bl	80024a4 <HAL_GPIO_WritePin>
};
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40020800 	.word	0x40020800

0800132c <println>:
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	2140      	movs	r1, #64	; 0x40
 8001338:	4820      	ldr	r0, [pc, #128]	; (80013bc <println+0x90>)
 800133a:	f001 f8b3 	bl	80024a4 <HAL_GPIO_WritePin>
	printLen = strlen(str);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7fe ff46 	bl	80001d0 <strlen>
 8001344:	4602      	mov	r2, r0
 8001346:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <println+0x94>)
 8001348:	601a      	str	r2, [r3, #0]
	for (i = 0; i < printLen; i++)
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	e009      	b.n	8001364 <println+0x38>
		printBuffer[i] = str[i];
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	441a      	add	r2, r3
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	7811      	ldrb	r1, [r2, #0]
 800135a:	4a1a      	ldr	r2, [pc, #104]	; (80013c4 <println+0x98>)
 800135c:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	3301      	adds	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <println+0x94>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d3f0      	bcc.n	8001350 <println+0x24>
	printBuffer[printLen] = '\n';
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <println+0x94>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <println+0x98>)
 8001374:	210a      	movs	r1, #10
 8001376:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <println+0x94>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <println+0x98>)
 8001380:	210d      	movs	r1, #13
 8001382:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <println+0x94>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	3302      	adds	r3, #2
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <println+0x98>)
 800138c:	2100      	movs	r1, #0
 800138e:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 8001390:	bf00      	nop
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <println+0x94>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	3303      	adds	r3, #3
 800139a:	b29b      	uxth	r3, r3
 800139c:	4619      	mov	r1, r3
 800139e:	4809      	ldr	r0, [pc, #36]	; (80013c4 <println+0x98>)
 80013a0:	f00d fb7e 	bl	800eaa0 <CDC_Transmit_FS>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d0f3      	beq.n	8001392 <println+0x66>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2140      	movs	r1, #64	; 0x40
 80013ae:	4803      	ldr	r0, [pc, #12]	; (80013bc <println+0x90>)
 80013b0:	f001 f878 	bl	80024a4 <HAL_GPIO_WritePin>
};
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40020800 	.word	0x40020800
 80013c0:	2000056c 	.word	0x2000056c
 80013c4:	20000570 	.word	0x20000570

080013c8 <print_int>:

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
	#endif
}
static inline void print_int(int number)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	2140      	movs	r1, #64	; 0x40
 80013d4:	480f      	ldr	r0, [pc, #60]	; (8001414 <print_int+0x4c>)
 80013d6:	f001 f865 	bl	80024a4 <HAL_GPIO_WritePin>

	printLen = sprintf(printBuffer, "%d", number);
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	490e      	ldr	r1, [pc, #56]	; (8001418 <print_int+0x50>)
 80013de:	480f      	ldr	r0, [pc, #60]	; (800141c <print_int+0x54>)
 80013e0:	f00e ff06 	bl	80101f0 <siprintf>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <print_int+0x58>)
 80013ea:	601a      	str	r2, [r3, #0]
	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY);
 80013ec:	bf00      	nop
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <print_int+0x58>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4619      	mov	r1, r3
 80013f6:	4809      	ldr	r0, [pc, #36]	; (800141c <print_int+0x54>)
 80013f8:	f00d fb52 	bl	800eaa0 <CDC_Transmit_FS>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d0f5      	beq.n	80013ee <print_int+0x26>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2140      	movs	r1, #64	; 0x40
 8001406:	4803      	ldr	r0, [pc, #12]	; (8001414 <print_int+0x4c>)
 8001408:	f001 f84c 	bl	80024a4 <HAL_GPIO_WritePin>
	#endif
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40020800 	.word	0x40020800
 8001418:	08012eac 	.word	0x08012eac
 800141c:	20000570 	.word	0x20000570
 8001420:	2000056c 	.word	0x2000056c

08001424 <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
 8001428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <millis+0x1c>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	099b      	lsrs	r3, r3, #6
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	10624dd3 	.word	0x10624dd3

08001444 <getTime>:
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	811a      	strh	r2, [r3, #8]
	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 800146c:	f00c fc70 	bl	800dd50 <Get_RTC_Instance>
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	2200      	movs	r2, #0
 8001476:	4619      	mov	r1, r3
 8001478:	f003 f91a 	bl	80046b0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 800147c:	f00c fc68 	bl	800dd50 <Get_RTC_Instance>
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	2200      	movs	r2, #0
 8001486:	4619      	mov	r1, r3
 8001488:	f003 fa17 	bl	80048ba <HAL_RTC_GetDate>
	toReturn.year = rtc_date.Year;
 800148c:	7efb      	ldrb	r3, [r7, #27]
 800148e:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 8001490:	7e7b      	ldrb	r3, [r7, #25]
 8001492:	737b      	strb	r3, [r7, #13]
	toReturn.dayM = rtc_date.Date;
 8001494:	7ebb      	ldrb	r3, [r7, #26]
 8001496:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8001498:	7e3b      	ldrb	r3, [r7, #24]
 800149a:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 800149c:	7f3b      	ldrb	r3, [r7, #28]
 800149e:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 80014a0:	7f7b      	ldrb	r3, [r7, #29]
 80014a2:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 80014a4:	7fbb      	ldrb	r3, [r7, #30]
 80014a6:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 80014a8:	f7ff ffbc 	bl	8001424 <millis>
 80014ac:	4602      	mov	r2, r0
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <getTime+0x9c>)
 80014b0:	fba3 1302 	umull	r1, r3, r3, r2
 80014b4:	099b      	lsrs	r3, r3, #6
 80014b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014ba:	fb01 f303 	mul.w	r3, r1, r3
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	82bb      	strh	r3, [r7, #20]
	return toReturn;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	461a      	mov	r2, r3
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	cb03      	ldmia	r3!, {r0, r1}
 80014ce:	6010      	str	r0, [r2, #0]
 80014d0:	6051      	str	r1, [r2, #4]
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	8113      	strh	r3, [r2, #8]
}
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	3730      	adds	r7, #48	; 0x30
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	10624dd3 	.word	0x10624dd3

080014e4 <log_new>:
#include "motors.h"
#include "sx1278.h"
#include "run.h"

void log_new()
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
	DateTime now = getTime();
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ffa8 	bl	8001444 <getTime>

	char directoryName[8] = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
	//sprintf(directoryName, "/%02d%02d%02d%02", now.hour, now.minute, now.dayM, now.month);
	sprintf(directoryName, "/heilo");
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	4a69      	ldr	r2, [pc, #420]	; (80016a4 <log_new+0x1c0>)
 8001500:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001504:	6018      	str	r0, [r3, #0]
 8001506:	3304      	adds	r3, #4
 8001508:	8019      	strh	r1, [r3, #0]
 800150a:	3302      	adds	r3, #2
 800150c:	0c0a      	lsrs	r2, r1, #16
 800150e:	701a      	strb	r2, [r3, #0]

	println("");
 8001510:	4865      	ldr	r0, [pc, #404]	; (80016a8 <log_new+0x1c4>)
 8001512:	f7ff ff0b 	bl	800132c <println>
	print(directoryName);
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fee5 	bl	80012e8 <print>
	println("");
 800151e:	4862      	ldr	r0, [pc, #392]	; (80016a8 <log_new+0x1c4>)
 8001520:	f7ff ff04 	bl	800132c <println>
	print(strcat(directoryName, "/LOG.TXT"));
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4618      	mov	r0, r3
 8001528:	f7fe fe52 	bl	80001d0 <strlen>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	4413      	add	r3, r2
 8001534:	495d      	ldr	r1, [pc, #372]	; (80016ac <log_new+0x1c8>)
 8001536:	461a      	mov	r2, r3
 8001538:	460b      	mov	r3, r1
 800153a:	cb03      	ldmia	r3!, {r0, r1}
 800153c:	6010      	str	r0, [r2, #0]
 800153e:	6051      	str	r1, [r2, #4]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	7213      	strb	r3, [r2, #8]
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fece 	bl	80012e8 <print>
	println("");
 800154c:	4856      	ldr	r0, [pc, #344]	; (80016a8 <log_new+0x1c4>)
 800154e:	f7ff feed 	bl	800132c <println>

	print_int(SD_init());
 8001552:	f7ff fdf9 	bl	8001148 <SD_init>
 8001556:	4603      	mov	r3, r0
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff35 	bl	80013c8 <print_int>
	//print_int(SD_newDirectory((char*)directoryName));
	print_int(f_mkdir("/heilo"));
 800155e:	4851      	ldr	r0, [pc, #324]	; (80016a4 <log_new+0x1c0>)
 8001560:	f00b fb02 	bl	800cb68 <f_mkdir>
 8001564:	4603      	mov	r3, r0
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff2e 	bl	80013c8 <print_int>
	print_int(SD_newFile(strcat(directoryName, "/LOG.TXT")));
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe fe2e 	bl	80001d0 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	4413      	add	r3, r2
 800157c:	494b      	ldr	r1, [pc, #300]	; (80016ac <log_new+0x1c8>)
 800157e:	461a      	mov	r2, r3
 8001580:	460b      	mov	r3, r1
 8001582:	cb03      	ldmia	r3!, {r0, r1}
 8001584:	6010      	str	r0, [r2, #0]
 8001586:	6051      	str	r1, [r2, #4]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	7213      	strb	r3, [r2, #8]
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fe22 	bl	80011d8 <SD_newFile>
 8001594:	4603      	mov	r3, r0
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff16 	bl	80013c8 <print_int>
	print_int(SD_newFile(strcat(directoryName, "/BMP.TXT")));
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe fe16 	bl	80001d0 <strlen>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	4413      	add	r3, r2
 80015ac:	4940      	ldr	r1, [pc, #256]	; (80016b0 <log_new+0x1cc>)
 80015ae:	461a      	mov	r2, r3
 80015b0:	460b      	mov	r3, r1
 80015b2:	cb03      	ldmia	r3!, {r0, r1}
 80015b4:	6010      	str	r0, [r2, #0]
 80015b6:	6051      	str	r1, [r2, #4]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	7213      	strb	r3, [r2, #8]
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fe0a 	bl	80011d8 <SD_newFile>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fefe 	bl	80013c8 <print_int>
	print_int(SD_newFile(strcat(directoryName, "/GPS.TXT")));
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe fdfe 	bl	80001d0 <strlen>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	4413      	add	r3, r2
 80015dc:	4935      	ldr	r1, [pc, #212]	; (80016b4 <log_new+0x1d0>)
 80015de:	461a      	mov	r2, r3
 80015e0:	460b      	mov	r3, r1
 80015e2:	cb03      	ldmia	r3!, {r0, r1}
 80015e4:	6010      	str	r0, [r2, #0]
 80015e6:	6051      	str	r1, [r2, #4]
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	7213      	strb	r3, [r2, #8]
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fdf2 	bl	80011d8 <SD_newFile>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fee6 	bl	80013c8 <print_int>
	print_int(SD_newFile(strcat(directoryName, "/IMU.TXT")));
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe fde6 	bl	80001d0 <strlen>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	4413      	add	r3, r2
 800160c:	492a      	ldr	r1, [pc, #168]	; (80016b8 <log_new+0x1d4>)
 800160e:	461a      	mov	r2, r3
 8001610:	460b      	mov	r3, r1
 8001612:	cb03      	ldmia	r3!, {r0, r1}
 8001614:	6010      	str	r0, [r2, #0]
 8001616:	6051      	str	r1, [r2, #4]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	7213      	strb	r3, [r2, #8]
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fdda 	bl	80011d8 <SD_newFile>
 8001624:	4603      	mov	r3, r0
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fece 	bl	80013c8 <print_int>
	print_int(SD_newFile(strcat(directoryName, "/MOT.TXT")));
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fdce 	bl	80001d0 <strlen>
 8001634:	4603      	mov	r3, r0
 8001636:	461a      	mov	r2, r3
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	4413      	add	r3, r2
 800163c:	491f      	ldr	r1, [pc, #124]	; (80016bc <log_new+0x1d8>)
 800163e:	461a      	mov	r2, r3
 8001640:	460b      	mov	r3, r1
 8001642:	cb03      	ldmia	r3!, {r0, r1}
 8001644:	6010      	str	r0, [r2, #0]
 8001646:	6051      	str	r1, [r2, #4]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	7213      	strb	r3, [r2, #8]
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fdc2 	bl	80011d8 <SD_newFile>
 8001654:	4603      	mov	r3, r0
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff feb6 	bl	80013c8 <print_int>
	print_int(SD_newFile(strcat(directoryName, "/RADIO.TXT")));
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe fdb6 	bl	80001d0 <strlen>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	4413      	add	r3, r2
 800166c:	4914      	ldr	r1, [pc, #80]	; (80016c0 <log_new+0x1dc>)
 800166e:	461a      	mov	r2, r3
 8001670:	460b      	mov	r3, r1
 8001672:	cb03      	ldmia	r3!, {r0, r1}
 8001674:	6010      	str	r0, [r2, #0]
 8001676:	6051      	str	r1, [r2, #4]
 8001678:	8819      	ldrh	r1, [r3, #0]
 800167a:	789b      	ldrb	r3, [r3, #2]
 800167c:	8111      	strh	r1, [r2, #8]
 800167e:	7293      	strb	r3, [r2, #10]
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fda8 	bl	80011d8 <SD_newFile>
 8001688:	4603      	mov	r3, r0
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fe9c 	bl	80013c8 <print_int>
	print_int(SD_deinit());
 8001690:	f7ff fd96 	bl	80011c0 <SD_deinit>
 8001694:	4603      	mov	r3, r0
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fe96 	bl	80013c8 <print_int>
}
 800169c:	bf00      	nop
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	08012eb0 	.word	0x08012eb0
 80016a8:	08012eb8 	.word	0x08012eb8
 80016ac:	08012ebc 	.word	0x08012ebc
 80016b0:	08012ec8 	.word	0x08012ec8
 80016b4:	08012ed4 	.word	0x08012ed4
 80016b8:	08012ee0 	.word	0x08012ee0
 80016bc:	08012eec 	.word	0x08012eec
 80016c0:	08012ef8 	.word	0x08012ef8

080016c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_Init+0x40>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <HAL_Init+0x40>)
 80016ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_Init+0x40>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <HAL_Init+0x40>)
 80016da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a07      	ldr	r2, [pc, #28]	; (8001704 <HAL_Init+0x40>)
 80016e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ec:	2003      	movs	r0, #3
 80016ee:	f000 f94d 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f000 f808 	bl	8001708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f8:	f00c fd60 	bl	800e1bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023c00 	.word	0x40023c00

08001708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x54>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_InitTick+0x58>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f965 	bl	80019f6 <HAL_SYSTICK_Config>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e00e      	b.n	8001754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d80a      	bhi.n	8001752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800173c:	2200      	movs	r2, #0
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f000 f92d 	bl	80019a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001748:	4a06      	ldr	r2, [pc, #24]	; (8001764 <HAL_InitTick+0x5c>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e000      	b.n	8001754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000118 	.word	0x20000118
 8001760:	20000004 	.word	0x20000004
 8001764:	20000000 	.word	0x20000000

08001768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x20>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4413      	add	r3, r2
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <HAL_IncTick+0x24>)
 800177a:	6013      	str	r3, [r2, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000004 	.word	0x20000004
 800178c:	20002c30 	.word	0x20002c30

08001790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_GetTick+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20002c30 	.word	0x20002c30

080017a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b0:	f7ff ffee 	bl	8001790 <HAL_GetTick>
 80017b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c0:	d005      	beq.n	80017ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_Delay+0x40>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ce:	bf00      	nop
 80017d0:	f7ff ffde 	bl	8001790 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d8f7      	bhi.n	80017d0 <HAL_Delay+0x28>
  {
  }
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000004 	.word	0x20000004

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff8e 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff29 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b4:	f7ff ff3e 	bl	8001834 <__NVIC_GetPriorityGrouping>
 80019b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7ff ff8e 	bl	80018e0 <NVIC_EncodePriority>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff5d 	bl	800188c <__NVIC_SetPriority>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff31 	bl	8001850 <__NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffa2 	bl	8001948 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff feb8 	bl	8001790 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e099      	b.n	8001b60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2202      	movs	r2, #2
 8001a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a4c:	e00f      	b.n	8001a6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a4e:	f7ff fe9f 	bl	8001790 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d908      	bls.n	8001a6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2203      	movs	r2, #3
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e078      	b.n	8001b60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e8      	bne.n	8001a4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <HAL_DMA_Init+0x158>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d107      	bne.n	8001ad8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f023 0307 	bic.w	r3, r3, #7
 8001aee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d117      	bne.n	8001b32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00e      	beq.n	8001b32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fa99 	bl	800204c <DMA_CheckFifoParam>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2240      	movs	r2, #64	; 0x40
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e016      	b.n	8001b60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fa50 	bl	8001fe0 <DMA_CalcBaseAndBitshift>
 8001b40:	4603      	mov	r3, r0
 8001b42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	223f      	movs	r2, #63	; 0x3f
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	f010803f 	.word	0xf010803f

08001b6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_DMA_Start_IT+0x26>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e048      	b.n	8001c24 <HAL_DMA_Start_IT+0xb8>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d137      	bne.n	8001c16 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f9e2 	bl	8001f84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc4:	223f      	movs	r2, #63	; 0x3f
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0216 	orr.w	r2, r2, #22
 8001bda:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d007      	beq.n	8001c04 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0208 	orr.w	r2, r2, #8
 8001c02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e005      	b.n	8001c22 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d004      	beq.n	8001c4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2280      	movs	r2, #128	; 0x80
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00c      	b.n	8001c64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2205      	movs	r2, #5
 8001c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0201 	bic.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c7c:	4b92      	ldr	r3, [pc, #584]	; (8001ec8 <HAL_DMA_IRQHandler+0x258>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a92      	ldr	r2, [pc, #584]	; (8001ecc <HAL_DMA_IRQHandler+0x25c>)
 8001c82:	fba2 2303 	umull	r2, r3, r2, r3
 8001c86:	0a9b      	lsrs	r3, r3, #10
 8001c88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9a:	2208      	movs	r2, #8
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d01a      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d013      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0204 	bic.w	r2, r2, #4
 8001cc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc8:	2208      	movs	r2, #8
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd4:	f043 0201 	orr.w	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d012      	beq.n	8001d12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00b      	beq.n	8001d12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfe:	2201      	movs	r2, #1
 8001d00:	409a      	lsls	r2, r3
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0a:	f043 0202 	orr.w	r2, r3, #2
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	2204      	movs	r2, #4
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d012      	beq.n	8001d48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00b      	beq.n	8001d48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d34:	2204      	movs	r2, #4
 8001d36:	409a      	lsls	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d40:	f043 0204 	orr.w	r2, r3, #4
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d043      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d03c      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d018      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d108      	bne.n	8001da0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d024      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	4798      	blx	r3
 8001d9e:	e01f      	b.n	8001de0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01b      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
 8001db0:	e016      	b.n	8001de0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d107      	bne.n	8001dd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0208 	bic.w	r2, r2, #8
 8001dce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de4:	2220      	movs	r2, #32
 8001de6:	409a      	lsls	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 808e 	beq.w	8001f0e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 8086 	beq.w	8001f0e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e06:	2220      	movs	r2, #32
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d136      	bne.n	8001e88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0216 	bic.w	r2, r2, #22
 8001e28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d103      	bne.n	8001e4a <HAL_DMA_IRQHandler+0x1da>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d007      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0208 	bic.w	r2, r2, #8
 8001e58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5e:	223f      	movs	r2, #63	; 0x3f
 8001e60:	409a      	lsls	r2, r3
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d07d      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
        }
        return;
 8001e86:	e078      	b.n	8001f7a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d01c      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d108      	bne.n	8001eb6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d030      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	4798      	blx	r3
 8001eb4:	e02b      	b.n	8001f0e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d027      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	4798      	blx	r3
 8001ec6:	e022      	b.n	8001f0e <HAL_DMA_IRQHandler+0x29e>
 8001ec8:	20000118 	.word	0x20000118
 8001ecc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10f      	bne.n	8001efe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0210 	bic.w	r2, r2, #16
 8001eec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d032      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d022      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2205      	movs	r2, #5
 8001f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d307      	bcc.n	8001f56 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f2      	bne.n	8001f3a <HAL_DMA_IRQHandler+0x2ca>
 8001f54:	e000      	b.n	8001f58 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f56:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
 8001f78:	e000      	b.n	8001f7c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f7a:	bf00      	nop
    }
  }
}
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop

08001f84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fa0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b40      	cmp	r3, #64	; 0x40
 8001fb0:	d108      	bne.n	8001fc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fc2:	e007      	b.n	8001fd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	60da      	str	r2, [r3, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	3b10      	subs	r3, #16
 8001ff0:	4a14      	ldr	r2, [pc, #80]	; (8002044 <DMA_CalcBaseAndBitshift+0x64>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ffa:	4a13      	ldr	r2, [pc, #76]	; (8002048 <DMA_CalcBaseAndBitshift+0x68>)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b03      	cmp	r3, #3
 800200c:	d909      	bls.n	8002022 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002016:	f023 0303 	bic.w	r3, r3, #3
 800201a:	1d1a      	adds	r2, r3, #4
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	659a      	str	r2, [r3, #88]	; 0x58
 8002020:	e007      	b.n	8002032 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800202a:	f023 0303 	bic.w	r3, r3, #3
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	aaaaaaab 	.word	0xaaaaaaab
 8002048:	080130bc 	.word	0x080130bc

0800204c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d11f      	bne.n	80020a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d855      	bhi.n	8002118 <DMA_CheckFifoParam+0xcc>
 800206c:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <DMA_CheckFifoParam+0x28>)
 800206e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002072:	bf00      	nop
 8002074:	08002085 	.word	0x08002085
 8002078:	08002097 	.word	0x08002097
 800207c:	08002085 	.word	0x08002085
 8002080:	08002119 	.word	0x08002119
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d045      	beq.n	800211c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002094:	e042      	b.n	800211c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800209e:	d13f      	bne.n	8002120 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a4:	e03c      	b.n	8002120 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ae:	d121      	bne.n	80020f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d836      	bhi.n	8002124 <DMA_CheckFifoParam+0xd8>
 80020b6:	a201      	add	r2, pc, #4	; (adr r2, 80020bc <DMA_CheckFifoParam+0x70>)
 80020b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020bc:	080020cd 	.word	0x080020cd
 80020c0:	080020d3 	.word	0x080020d3
 80020c4:	080020cd 	.word	0x080020cd
 80020c8:	080020e5 	.word	0x080020e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
      break;
 80020d0:	e02f      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d024      	beq.n	8002128 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e2:	e021      	b.n	8002128 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020ec:	d11e      	bne.n	800212c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020f2:	e01b      	b.n	800212c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d902      	bls.n	8002100 <DMA_CheckFifoParam+0xb4>
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d003      	beq.n	8002106 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020fe:	e018      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
      break;
 8002104:	e015      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00e      	beq.n	8002130 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
      break;
 8002116:	e00b      	b.n	8002130 <DMA_CheckFifoParam+0xe4>
      break;
 8002118:	bf00      	nop
 800211a:	e00a      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
      break;
 800211c:	bf00      	nop
 800211e:	e008      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
      break;
 8002120:	bf00      	nop
 8002122:	e006      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
      break;
 8002124:	bf00      	nop
 8002126:	e004      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
      break;
 8002128:	bf00      	nop
 800212a:	e002      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
      break;   
 800212c:	bf00      	nop
 800212e:	e000      	b.n	8002132 <DMA_CheckFifoParam+0xe6>
      break;
 8002130:	bf00      	nop
    }
  } 
  
  return status; 
 8002132:	7bfb      	ldrb	r3, [r7, #15]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	; 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	e16b      	b.n	8002434 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800215c:	2201      	movs	r2, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	f040 815a 	bne.w	800242e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x4a>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b12      	cmp	r3, #18
 8002188:	d123      	bne.n	80021d2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	08da      	lsrs	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3208      	adds	r2, #8
 8002192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	220f      	movs	r2, #15
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	08da      	lsrs	r2, r3, #3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3208      	adds	r2, #8
 80021cc:	69b9      	ldr	r1, [r7, #24]
 80021ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	2203      	movs	r2, #3
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 0203 	and.w	r2, r3, #3
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d00b      	beq.n	8002226 <HAL_GPIO_Init+0xe6>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d007      	beq.n	8002226 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800221a:	2b11      	cmp	r3, #17
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b12      	cmp	r3, #18
 8002224:	d130      	bne.n	8002288 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 0201 	and.w	r2, r3, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80b4 	beq.w	800242e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	4b5f      	ldr	r3, [pc, #380]	; (8002448 <HAL_GPIO_Init+0x308>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	4a5e      	ldr	r2, [pc, #376]	; (8002448 <HAL_GPIO_Init+0x308>)
 80022d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d4:	6453      	str	r3, [r2, #68]	; 0x44
 80022d6:	4b5c      	ldr	r3, [pc, #368]	; (8002448 <HAL_GPIO_Init+0x308>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022e2:	4a5a      	ldr	r2, [pc, #360]	; (800244c <HAL_GPIO_Init+0x30c>)
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	3302      	adds	r3, #2
 80022ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	220f      	movs	r2, #15
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a51      	ldr	r2, [pc, #324]	; (8002450 <HAL_GPIO_Init+0x310>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d02b      	beq.n	8002366 <HAL_GPIO_Init+0x226>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a50      	ldr	r2, [pc, #320]	; (8002454 <HAL_GPIO_Init+0x314>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d025      	beq.n	8002362 <HAL_GPIO_Init+0x222>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4f      	ldr	r2, [pc, #316]	; (8002458 <HAL_GPIO_Init+0x318>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d01f      	beq.n	800235e <HAL_GPIO_Init+0x21e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4e      	ldr	r2, [pc, #312]	; (800245c <HAL_GPIO_Init+0x31c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d019      	beq.n	800235a <HAL_GPIO_Init+0x21a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4d      	ldr	r2, [pc, #308]	; (8002460 <HAL_GPIO_Init+0x320>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <HAL_GPIO_Init+0x216>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4c      	ldr	r2, [pc, #304]	; (8002464 <HAL_GPIO_Init+0x324>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00d      	beq.n	8002352 <HAL_GPIO_Init+0x212>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4b      	ldr	r2, [pc, #300]	; (8002468 <HAL_GPIO_Init+0x328>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d007      	beq.n	800234e <HAL_GPIO_Init+0x20e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4a      	ldr	r2, [pc, #296]	; (800246c <HAL_GPIO_Init+0x32c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d101      	bne.n	800234a <HAL_GPIO_Init+0x20a>
 8002346:	2307      	movs	r3, #7
 8002348:	e00e      	b.n	8002368 <HAL_GPIO_Init+0x228>
 800234a:	2308      	movs	r3, #8
 800234c:	e00c      	b.n	8002368 <HAL_GPIO_Init+0x228>
 800234e:	2306      	movs	r3, #6
 8002350:	e00a      	b.n	8002368 <HAL_GPIO_Init+0x228>
 8002352:	2305      	movs	r3, #5
 8002354:	e008      	b.n	8002368 <HAL_GPIO_Init+0x228>
 8002356:	2304      	movs	r3, #4
 8002358:	e006      	b.n	8002368 <HAL_GPIO_Init+0x228>
 800235a:	2303      	movs	r3, #3
 800235c:	e004      	b.n	8002368 <HAL_GPIO_Init+0x228>
 800235e:	2302      	movs	r3, #2
 8002360:	e002      	b.n	8002368 <HAL_GPIO_Init+0x228>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_GPIO_Init+0x228>
 8002366:	2300      	movs	r3, #0
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	f002 0203 	and.w	r2, r2, #3
 800236e:	0092      	lsls	r2, r2, #2
 8002370:	4093      	lsls	r3, r2
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002378:	4934      	ldr	r1, [pc, #208]	; (800244c <HAL_GPIO_Init+0x30c>)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002386:	4b3a      	ldr	r3, [pc, #232]	; (8002470 <HAL_GPIO_Init+0x330>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023aa:	4a31      	ldr	r2, [pc, #196]	; (8002470 <HAL_GPIO_Init+0x330>)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023b0:	4b2f      	ldr	r3, [pc, #188]	; (8002470 <HAL_GPIO_Init+0x330>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d4:	4a26      	ldr	r2, [pc, #152]	; (8002470 <HAL_GPIO_Init+0x330>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023da:	4b25      	ldr	r3, [pc, #148]	; (8002470 <HAL_GPIO_Init+0x330>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fe:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <HAL_GPIO_Init+0x330>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_GPIO_Init+0x330>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002428:	4a11      	ldr	r2, [pc, #68]	; (8002470 <HAL_GPIO_Init+0x330>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3301      	adds	r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b0f      	cmp	r3, #15
 8002438:	f67f ae90 	bls.w	800215c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800243c:	bf00      	nop
 800243e:	3724      	adds	r7, #36	; 0x24
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	40023800 	.word	0x40023800
 800244c:	40013800 	.word	0x40013800
 8002450:	40020000 	.word	0x40020000
 8002454:	40020400 	.word	0x40020400
 8002458:	40020800 	.word	0x40020800
 800245c:	40020c00 	.word	0x40020c00
 8002460:	40021000 	.word	0x40021000
 8002464:	40021400 	.word	0x40021400
 8002468:	40021800 	.word	0x40021800
 800246c:	40021c00 	.word	0x40021c00
 8002470:	40013c00 	.word	0x40013c00

08002474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	887b      	ldrh	r3, [r7, #2]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
 8002490:	e001      	b.n	8002496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002496:	7bfb      	ldrb	r3, [r7, #15]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024c0:	e003      	b.n	80024ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	619a      	str	r2, [r3, #24]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e10f      	b.n	800270a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f00b fe84 	bl	800e20c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2224      	movs	r2, #36	; 0x24
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800251c:	f001 fe70 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8002520:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4a7b      	ldr	r2, [pc, #492]	; (8002714 <HAL_I2C_Init+0x23c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d807      	bhi.n	800253c <HAL_I2C_Init+0x64>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a7a      	ldr	r2, [pc, #488]	; (8002718 <HAL_I2C_Init+0x240>)
 8002530:	4293      	cmp	r3, r2
 8002532:	bf94      	ite	ls
 8002534:	2301      	movls	r3, #1
 8002536:	2300      	movhi	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	e006      	b.n	800254a <HAL_I2C_Init+0x72>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4a77      	ldr	r2, [pc, #476]	; (800271c <HAL_I2C_Init+0x244>)
 8002540:	4293      	cmp	r3, r2
 8002542:	bf94      	ite	ls
 8002544:	2301      	movls	r3, #1
 8002546:	2300      	movhi	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e0db      	b.n	800270a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4a72      	ldr	r2, [pc, #456]	; (8002720 <HAL_I2C_Init+0x248>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	0c9b      	lsrs	r3, r3, #18
 800255c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	430a      	orrs	r2, r1
 8002570:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4a64      	ldr	r2, [pc, #400]	; (8002714 <HAL_I2C_Init+0x23c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d802      	bhi.n	800258c <HAL_I2C_Init+0xb4>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3301      	adds	r3, #1
 800258a:	e009      	b.n	80025a0 <HAL_I2C_Init+0xc8>
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	4a63      	ldr	r2, [pc, #396]	; (8002724 <HAL_I2C_Init+0x24c>)
 8002598:	fba2 2303 	umull	r2, r3, r2, r3
 800259c:	099b      	lsrs	r3, r3, #6
 800259e:	3301      	adds	r3, #1
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	430b      	orrs	r3, r1
 80025a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4956      	ldr	r1, [pc, #344]	; (8002714 <HAL_I2C_Init+0x23c>)
 80025bc:	428b      	cmp	r3, r1
 80025be:	d80d      	bhi.n	80025dc <HAL_I2C_Init+0x104>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1e59      	subs	r1, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	bf38      	it	cc
 80025d8:	2304      	movcc	r3, #4
 80025da:	e04f      	b.n	800267c <HAL_I2C_Init+0x1a4>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d111      	bne.n	8002608 <HAL_I2C_Init+0x130>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1e58      	subs	r0, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	440b      	add	r3, r1
 80025f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e012      	b.n	800262e <HAL_I2C_Init+0x156>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	0099      	lsls	r1, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	fbb0 f3f3 	udiv	r3, r0, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_Init+0x15e>
 8002632:	2301      	movs	r3, #1
 8002634:	e022      	b.n	800267c <HAL_I2C_Init+0x1a4>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10e      	bne.n	800265c <HAL_I2C_Init+0x184>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1e58      	subs	r0, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	440b      	add	r3, r1
 800264c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265a:	e00f      	b.n	800267c <HAL_I2C_Init+0x1a4>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1e58      	subs	r0, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	0099      	lsls	r1, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002672:	3301      	adds	r3, #1
 8002674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002678:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	6809      	ldr	r1, [r1, #0]
 8002680:	4313      	orrs	r3, r2
 8002682:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69da      	ldr	r2, [r3, #28]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6911      	ldr	r1, [r2, #16]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68d2      	ldr	r2, [r2, #12]
 80026b6:	4311      	orrs	r1, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	430b      	orrs	r3, r1
 80026be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	000186a0 	.word	0x000186a0
 8002718:	001e847f 	.word	0x001e847f
 800271c:	003d08ff 	.word	0x003d08ff
 8002720:	431bde83 	.word	0x431bde83
 8002724:	10624dd3 	.word	0x10624dd3

08002728 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272a:	b08f      	sub	sp, #60	; 0x3c
 800272c:	af0a      	add	r7, sp, #40	; 0x28
 800272e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e10f      	b.n	800295a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d106      	bne.n	800275a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f00c f9c9 	bl	800eaec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2203      	movs	r2, #3
 800275e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f005 fabe 	bl	8007cfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	687e      	ldr	r6, [r7, #4]
 8002786:	466d      	mov	r5, sp
 8002788:	f106 0410 	add.w	r4, r6, #16
 800278c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800278e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002794:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002798:	e885 0003 	stmia.w	r5, {r0, r1}
 800279c:	1d33      	adds	r3, r6, #4
 800279e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a0:	6838      	ldr	r0, [r7, #0]
 80027a2:	f005 f995 	bl	8007ad0 <USB_CoreInit>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0d0      	b.n	800295a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f005 faac 	bl	8007d1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	e04a      	b.n	8002860 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027ca:	7bfa      	ldrb	r2, [r7, #15]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	333d      	adds	r3, #61	; 0x3d
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	333c      	adds	r3, #60	; 0x3c
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	b298      	uxth	r0, r3
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	3342      	adds	r3, #66	; 0x42
 8002806:	4602      	mov	r2, r0
 8002808:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800280a:	7bfa      	ldrb	r2, [r7, #15]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	1a9b      	subs	r3, r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	333f      	adds	r3, #63	; 0x3f
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800281e:	7bfa      	ldrb	r2, [r7, #15]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	3344      	adds	r3, #68	; 0x44
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002832:	7bfa      	ldrb	r2, [r7, #15]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	3348      	adds	r3, #72	; 0x48
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002846:	7bfa      	ldrb	r2, [r7, #15]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	3350      	adds	r3, #80	; 0x50
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	3301      	adds	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
 8002860:	7bfa      	ldrb	r2, [r7, #15]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	429a      	cmp	r2, r3
 8002868:	d3af      	bcc.n	80027ca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
 800286e:	e044      	b.n	80028fa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002870:	7bfa      	ldrb	r2, [r7, #15]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002886:	7bfa      	ldrb	r2, [r7, #15]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002898:	7bfa      	ldrb	r2, [r7, #15]
 800289a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	1a9b      	subs	r3, r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	3301      	adds	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
 80028fa:	7bfa      	ldrb	r2, [r7, #15]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	d3b5      	bcc.n	8002870 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	687e      	ldr	r6, [r7, #4]
 800290c:	466d      	mov	r5, sp
 800290e:	f106 0410 	add.w	r4, r6, #16
 8002912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800291a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800291e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002922:	1d33      	adds	r3, r6, #4
 8002924:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002926:	6838      	ldr	r0, [r7, #0]
 8002928:	f005 fa22 	bl	8007d70 <USB_DevInit>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2202      	movs	r2, #2
 8002936:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e00d      	b.n	800295a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f006 fa17 	bl	8008d86 <USB_DevDisconnect>

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002962 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_PCD_Start+0x1c>
 800297a:	2302      	movs	r3, #2
 800297c:	e020      	b.n	80029c0 <HAL_PCD_Start+0x5e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	2b01      	cmp	r3, #1
 800298c:	d109      	bne.n	80029a2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002992:	2b01      	cmp	r3, #1
 8002994:	d005      	beq.n	80029a2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f006 f9d5 	bl	8008d56 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f005 f991 	bl	8007cd8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b08d      	sub	sp, #52	; 0x34
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f006 fa7c 	bl	8008edc <USB_GetMode>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 838e 	bne.w	8003108 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f006 f9e0 	bl	8008db6 <USB_ReadInterrupts>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8384 	beq.w	8003106 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f006 f9d7 	bl	8008db6 <USB_ReadInterrupts>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d107      	bne.n	8002a22 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f002 0202 	and.w	r2, r2, #2
 8002a20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f006 f9c5 	bl	8008db6 <USB_ReadInterrupts>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a36:	d17b      	bne.n	8002b30 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f006 f9cb 	bl	8008ddc <USB_ReadDevAllOutEpInterrupt>
 8002a46:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a48:	e06f      	b.n	8002b2a <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d064      	beq.n	8002b1e <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f006 f9f0 	bl	8008e44 <USB_ReadDevOutEPInterrupt>
 8002a64:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00c      	beq.n	8002a8a <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2301      	movs	r3, #1
 8002a80:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 fe0d 	bl	80036a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00c      	beq.n	8002aae <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 ff0c 	bl	80038b4 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2308      	movs	r3, #8
 8002aac:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	2310      	movs	r3, #16
 8002ac8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d015      	beq.n	8002b00 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d108      	bne.n	8002aee <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	2101      	movs	r1, #1
 8002aea:	f006 fa3b 	bl	8008f64 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afa:	461a      	mov	r2, r3
 8002afc:	2320      	movs	r3, #32
 8002afe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b16:	461a      	mov	r2, r3
 8002b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b1c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	3301      	adds	r3, #1
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	085b      	lsrs	r3, r3, #1
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d18c      	bne.n	8002a4a <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f006 f93e 	bl	8008db6 <USB_ReadInterrupts>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b44:	f040 80c4 	bne.w	8002cd0 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f006 f95f 	bl	8008e10 <USB_ReadDevAllInEpInterrupt>
 8002b52:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b58:	e0b6      	b.n	8002cc8 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80ab 	beq.w	8002cbc <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f006 f985 	bl	8008e80 <USB_ReadDevInEPInterrupt>
 8002b76:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d05b      	beq.n	8002c3a <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	2201      	movs	r2, #1
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69f9      	ldr	r1, [r7, #28]
 8002b9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d11b      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	3348      	adds	r3, #72	; 0x48
 8002bd0:	6819      	ldr	r1, [r3, #0]
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4403      	add	r3, r0
 8002be0:	3344      	adds	r3, #68	; 0x44
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4419      	add	r1, r3
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4403      	add	r3, r0
 8002bf4:	3348      	adds	r3, #72	; 0x48
 8002bf6:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f00b fff5 	bl	800ebee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d116      	bne.n	8002c3a <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d113      	bne.n	8002c3a <HAL_PCD_IRQHandler+0x272>
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c16:	4613      	mov	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	3350      	adds	r3, #80	; 0x50
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d108      	bne.n	8002c3a <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c32:	461a      	mov	r2, r3
 8002c34:	2101      	movs	r1, #1
 8002c36:	f006 f995 	bl	8008f64 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c50:	461a      	mov	r2, r3
 8002c52:	2308      	movs	r3, #8
 8002c54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2310      	movs	r3, #16
 8002c70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2340      	movs	r3, #64	; 0x40
 8002c8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fc67 	bl	800358a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f47f af45 	bne.w	8002b5a <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f006 f86e 	bl	8008db6 <USB_ReadInterrupts>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ce4:	d122      	bne.n	8002d2c <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d108      	bne.n	8002d16 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fe88 	bl	8003a24 <HAL_PCDEx_LPM_Callback>
 8002d14:	e002      	b.n	8002d1c <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f00b ffe0 	bl	800ecdc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f006 f840 	bl	8008db6 <USB_ReadInterrupts>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d40:	d112      	bne.n	8002d68 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d102      	bne.n	8002d58 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f00b ff9c 	bl	800ec90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d66:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f006 f822 	bl	8008db6 <USB_ReadInterrupts>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7c:	f040 80a7 	bne.w	8002ece <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d8e:	f023 0301 	bic.w	r3, r3, #1
 8002d92:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2110      	movs	r1, #16
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f005 f95a 	bl	8008054 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da0:	2300      	movs	r3, #0
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da4:	e036      	b.n	8002e14 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db2:	461a      	mov	r2, r3
 8002db4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002db8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dca:	0151      	lsls	r1, r2, #5
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	440a      	add	r2, r1
 8002dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002dd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de6:	461a      	mov	r2, r3
 8002de8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dfe:	0151      	lsls	r1, r2, #5
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	440a      	add	r2, r1
 8002e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e0c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	3301      	adds	r3, #1
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d3c3      	bcc.n	8002da6 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e2c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e30:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d016      	beq.n	8002e68 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e4a:	f043 030b 	orr.w	r3, r3, #11
 8002e4e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e60:	f043 030b 	orr.w	r3, r3, #11
 8002e64:	6453      	str	r3, [r2, #68]	; 0x44
 8002e66:	e015      	b.n	8002e94 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e7a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e7e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e8e:	f043 030b 	orr.w	r3, r3, #11
 8002e92:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ea2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ea6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f006 f853 	bl	8008f64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695a      	ldr	r2, [r3, #20]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ecc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f005 ff6f 	bl	8008db6 <USB_ReadInterrupts>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee2:	d124      	bne.n	8002f2e <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f006 f805 	bl	8008ef8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f005 f90f 	bl	8008116 <USB_GetDevSpeed>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461a      	mov	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681c      	ldr	r4, [r3, #0]
 8002f04:	f001 f970 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8002f08:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	4620      	mov	r0, r4
 8002f14:	f004 fe3e 	bl	8007b94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f00b fe90 	bl	800ec3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695a      	ldr	r2, [r3, #20]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f005 ff3f 	bl	8008db6 <USB_ReadInterrupts>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b10      	cmp	r3, #16
 8002f40:	d161      	bne.n	8003006 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699a      	ldr	r2, [r3, #24]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0210 	bic.w	r2, r2, #16
 8002f50:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f003 020f 	and.w	r2, r3, #15
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3304      	adds	r3, #4
 8002f70:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	0c5b      	lsrs	r3, r3, #17
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d124      	bne.n	8002fc8 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d035      	beq.n	8002ff6 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	091b      	lsrs	r3, r3, #4
 8002f92:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	6a38      	ldr	r0, [r7, #32]
 8002f9e:	f005 fdb7 	bl	8008b10 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fae:	441a      	add	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	699a      	ldr	r2, [r3, #24]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fc0:	441a      	add	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	619a      	str	r2, [r3, #24]
 8002fc6:	e016      	b.n	8002ff6 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	0c5b      	lsrs	r3, r3, #17
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	2b06      	cmp	r3, #6
 8002fd2:	d110      	bne.n	8002ff6 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fda:	2208      	movs	r2, #8
 8002fdc:	4619      	mov	r1, r3
 8002fde:	6a38      	ldr	r0, [r7, #32]
 8002fe0:	f005 fd96 	bl	8008b10 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	699a      	ldr	r2, [r3, #24]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	091b      	lsrs	r3, r3, #4
 8002fec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ff0:	441a      	add	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699a      	ldr	r2, [r3, #24]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0210 	orr.w	r2, r2, #16
 8003004:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f005 fed3 	bl	8008db6 <USB_ReadInterrupts>
 8003010:	4603      	mov	r3, r0
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b08      	cmp	r3, #8
 8003018:	d10a      	bne.n	8003030 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f00b fe01 	bl	800ec22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695a      	ldr	r2, [r3, #20]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f002 0208 	and.w	r2, r2, #8
 800302e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f005 febe 	bl	8008db6 <USB_ReadInterrupts>
 800303a:	4603      	mov	r3, r0
 800303c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003044:	d10f      	bne.n	8003066 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	b2db      	uxtb	r3, r3
 800304e:	4619      	mov	r1, r3
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f00b fe63 	bl	800ed1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695a      	ldr	r2, [r3, #20]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003064:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f005 fea3 	bl	8008db6 <USB_ReadInterrupts>
 8003070:	4603      	mov	r3, r0
 8003072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003076:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800307a:	d10f      	bne.n	800309c <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	b2db      	uxtb	r3, r3
 8003084:	4619      	mov	r1, r3
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f00b fe36 	bl	800ecf8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800309a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f005 fe88 	bl	8008db6 <USB_ReadInterrupts>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b0:	d10a      	bne.n	80030c8 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f00b fe44 	bl	800ed40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80030c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f005 fe72 	bl	8008db6 <USB_ReadInterrupts>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d115      	bne.n	8003108 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f00b fe34 	bl	800ed5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6859      	ldr	r1, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	430a      	orrs	r2, r1
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	e000      	b.n	8003108 <HAL_PCD_IRQHandler+0x740>
      return;
 8003106:	bf00      	nop
    }
  }
}
 8003108:	3734      	adds	r7, #52	; 0x34
 800310a:	46bd      	mov	sp, r7
 800310c:	bd90      	pop	{r4, r7, pc}

0800310e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	460b      	mov	r3, r1
 8003118:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_PCD_SetAddress+0x1a>
 8003124:	2302      	movs	r3, #2
 8003126:	e013      	b.n	8003150 <HAL_PCD_SetAddress+0x42>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	4611      	mov	r1, r2
 8003140:	4618      	mov	r0, r3
 8003142:	f005 fde2 	bl	8008d0a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	4608      	mov	r0, r1
 8003162:	4611      	mov	r1, r2
 8003164:	461a      	mov	r2, r3
 8003166:	4603      	mov	r3, r0
 8003168:	70fb      	strb	r3, [r7, #3]
 800316a:	460b      	mov	r3, r1
 800316c:	803b      	strh	r3, [r7, #0]
 800316e:	4613      	mov	r3, r2
 8003170:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800317a:	2b00      	cmp	r3, #0
 800317c:	da0f      	bge.n	800319e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	f003 020f 	and.w	r2, r3, #15
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	3338      	adds	r3, #56	; 0x38
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	3304      	adds	r3, #4
 8003194:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2201      	movs	r2, #1
 800319a:	705a      	strb	r2, [r3, #1]
 800319c:	e00f      	b.n	80031be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	f003 020f 	and.w	r2, r3, #15
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4413      	add	r3, r2
 80031b4:	3304      	adds	r3, #4
 80031b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031ca:	883a      	ldrh	r2, [r7, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	78ba      	ldrb	r2, [r7, #2]
 80031d4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	785b      	ldrb	r3, [r3, #1]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d004      	beq.n	80031e8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031e8:	78bb      	ldrb	r3, [r7, #2]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d102      	bne.n	80031f4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_PCD_EP_Open+0xaa>
 80031fe:	2302      	movs	r3, #2
 8003200:	e00e      	b.n	8003220 <HAL_PCD_EP_Open+0xc8>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68f9      	ldr	r1, [r7, #12]
 8003210:	4618      	mov	r0, r3
 8003212:	f004 ffa5 	bl	8008160 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800321e:	7afb      	ldrb	r3, [r7, #11]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003238:	2b00      	cmp	r3, #0
 800323a:	da0f      	bge.n	800325c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	f003 020f 	and.w	r2, r3, #15
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	3338      	adds	r3, #56	; 0x38
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	4413      	add	r3, r2
 8003250:	3304      	adds	r3, #4
 8003252:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	705a      	strb	r2, [r3, #1]
 800325a:	e00f      	b.n	800327c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	f003 020f 	and.w	r2, r3, #15
 8003262:	4613      	mov	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	3304      	adds	r3, #4
 8003274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	b2da      	uxtb	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_PCD_EP_Close+0x6e>
 8003292:	2302      	movs	r3, #2
 8003294:	e00e      	b.n	80032b4 <HAL_PCD_EP_Close+0x8c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68f9      	ldr	r1, [r7, #12]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f004 ffe3 	bl	8008270 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	460b      	mov	r3, r1
 80032ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032cc:	7afb      	ldrb	r3, [r7, #11]
 80032ce:	f003 020f 	and.w	r2, r3, #15
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4413      	add	r3, r2
 80032e2:	3304      	adds	r3, #4
 80032e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2200      	movs	r2, #0
 80032f6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2200      	movs	r2, #0
 80032fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032fe:	7afb      	ldrb	r3, [r7, #11]
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	b2da      	uxtb	r2, r3
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d102      	bne.n	8003318 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003318:	7afb      	ldrb	r3, [r7, #11]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	6979      	ldr	r1, [r7, #20]
 8003330:	f005 fa66 	bl	8008800 <USB_EP0StartXfer>
 8003334:	e008      	b.n	8003348 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	461a      	mov	r2, r3
 8003342:	6979      	ldr	r1, [r7, #20]
 8003344:	f005 f818 	bl	8008378 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	f003 020f 	and.w	r2, r3, #15
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003374:	681b      	ldr	r3, [r3, #0]
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b086      	sub	sp, #24
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	460b      	mov	r3, r1
 8003390:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003392:	7afb      	ldrb	r3, [r7, #11]
 8003394:	f003 020f 	and.w	r2, r3, #15
 8003398:	4613      	mov	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	3338      	adds	r3, #56	; 0x38
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4413      	add	r3, r2
 80033a6:	3304      	adds	r3, #4
 80033a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2200      	movs	r2, #0
 80033ba:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2201      	movs	r2, #1
 80033c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c2:	7afb      	ldrb	r3, [r7, #11]
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d102      	bne.n	80033dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033dc:	7afb      	ldrb	r3, [r7, #11]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	6979      	ldr	r1, [r7, #20]
 80033f4:	f005 fa04 	bl	8008800 <USB_EP0StartXfer>
 80033f8:	e008      	b.n	800340c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	6979      	ldr	r1, [r7, #20]
 8003408:	f004 ffb6 	bl	8008378 <USB_EPStartXfer>
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	460b      	mov	r3, r1
 8003420:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	f003 020f 	and.w	r2, r3, #15
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	429a      	cmp	r2, r3
 800342e:	d901      	bls.n	8003434 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e050      	b.n	80034d6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003434:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003438:	2b00      	cmp	r3, #0
 800343a:	da0f      	bge.n	800345c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	f003 020f 	and.w	r2, r3, #15
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	3338      	adds	r3, #56	; 0x38
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	4413      	add	r3, r2
 8003450:	3304      	adds	r3, #4
 8003452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	705a      	strb	r2, [r3, #1]
 800345a:	e00d      	b.n	8003478 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	4613      	mov	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	3304      	adds	r3, #4
 8003470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	b2da      	uxtb	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_PCD_EP_SetStall+0x82>
 8003494:	2302      	movs	r3, #2
 8003496:	e01e      	b.n	80034d6 <HAL_PCD_EP_SetStall+0xc0>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68f9      	ldr	r1, [r7, #12]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f005 fb5b 	bl	8008b62 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	b2d9      	uxtb	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034c6:	461a      	mov	r2, r3
 80034c8:	f005 fd4c 	bl	8008f64 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	f003 020f 	and.w	r2, r3, #15
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d901      	bls.n	80034fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e042      	b.n	8003582 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003500:	2b00      	cmp	r3, #0
 8003502:	da0f      	bge.n	8003524 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	f003 020f 	and.w	r2, r3, #15
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	3338      	adds	r3, #56	; 0x38
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4413      	add	r3, r2
 8003518:	3304      	adds	r3, #4
 800351a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	705a      	strb	r2, [r3, #1]
 8003522:	e00f      	b.n	8003544 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	f003 020f 	and.w	r2, r3, #15
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	b2da      	uxtb	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_PCD_EP_ClrStall+0x86>
 8003560:	2302      	movs	r3, #2
 8003562:	e00e      	b.n	8003582 <HAL_PCD_EP_ClrStall+0xa4>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68f9      	ldr	r1, [r7, #12]
 8003572:	4618      	mov	r0, r3
 8003574:	f005 fb63 	bl	8008c3e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b08a      	sub	sp, #40	; 0x28
 800358e:	af02      	add	r7, sp, #8
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	3338      	adds	r3, #56	; 0x38
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4413      	add	r3, r2
 80035ae:	3304      	adds	r3, #4
 80035b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	699a      	ldr	r2, [r3, #24]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d901      	bls.n	80035c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e06c      	b.n	800369c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d902      	bls.n	80035de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3303      	adds	r3, #3
 80035e2:	089b      	lsrs	r3, r3, #2
 80035e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035e6:	e02b      	b.n	8003640 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	695a      	ldr	r2, [r3, #20]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	69fa      	ldr	r2, [r7, #28]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d902      	bls.n	8003604 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	3303      	adds	r3, #3
 8003608:	089b      	lsrs	r3, r3, #2
 800360a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68d9      	ldr	r1, [r3, #12]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800361c:	b2db      	uxtb	r3, r3
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	4603      	mov	r3, r0
 8003622:	6978      	ldr	r0, [r7, #20]
 8003624:	f005 fa3f 	bl	8008aa6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	441a      	add	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	699a      	ldr	r2, [r3, #24]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	441a      	add	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	b29b      	uxth	r3, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	429a      	cmp	r2, r3
 8003654:	d809      	bhi.n	800366a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	699a      	ldr	r2, [r3, #24]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800365e:	429a      	cmp	r2, r3
 8003660:	d203      	bcs.n	800366a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1be      	bne.n	80035e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	429a      	cmp	r2, r3
 8003674:	d811      	bhi.n	800369a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	2201      	movs	r2, #1
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	43db      	mvns	r3, r3
 8003690:	6939      	ldr	r1, [r7, #16]
 8003692:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003696:	4013      	ands	r3, r2
 8003698:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	333c      	adds	r3, #60	; 0x3c
 80036bc:	3304      	adds	r3, #4
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	f040 80b3 	bne.w	8003842 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d028      	beq.n	8003738 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4a70      	ldr	r2, [pc, #448]	; (80038ac <PCD_EP_OutXfrComplete_int+0x208>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d90e      	bls.n	800370c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d009      	beq.n	800370c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003704:	461a      	mov	r2, r3
 8003706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800370a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f00b fa41 	bl	800eb94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800371c:	461a      	mov	r2, r3
 800371e:	2101      	movs	r1, #1
 8003720:	f005 fc20 	bl	8008f64 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003730:	461a      	mov	r2, r3
 8003732:	2308      	movs	r3, #8
 8003734:	6093      	str	r3, [r2, #8]
 8003736:	e0b3      	b.n	80038a0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4413      	add	r3, r2
 800374a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374e:	461a      	mov	r2, r3
 8003750:	2320      	movs	r3, #32
 8003752:	6093      	str	r3, [r2, #8]
 8003754:	e0a4      	b.n	80038a0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800375c:	2b00      	cmp	r3, #0
 800375e:	f040 809f 	bne.w	80038a0 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4a51      	ldr	r2, [pc, #324]	; (80038ac <PCD_EP_OutXfrComplete_int+0x208>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d90f      	bls.n	800378a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4413      	add	r3, r2
 800377c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003780:	461a      	mov	r2, r3
 8003782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003786:	6093      	str	r3, [r2, #8]
 8003788:	e08a      	b.n	80038a0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800379c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	0159      	lsls	r1, r3, #5
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	440b      	add	r3, r1
 80037a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80037b0:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	4613      	mov	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4403      	add	r3, r0
 80037c0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80037c4:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037d8:	6819      	ldr	r1, [r3, #0]
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4403      	add	r3, r0
 80037e8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4419      	add	r1, r3
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4403      	add	r3, r0
 80037fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003802:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	b2db      	uxtb	r3, r3
 8003808:	4619      	mov	r1, r3
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f00b f9d4 	bl	800ebb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d144      	bne.n	80038a0 <PCD_EP_OutXfrComplete_int+0x1fc>
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	4613      	mov	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d138      	bne.n	80038a0 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003838:	461a      	mov	r2, r3
 800383a:	2101      	movs	r1, #1
 800383c:	f005 fb92 	bl	8008f64 <USB_EP0_OutStart>
 8003840:	e02e      	b.n	80038a0 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4a1a      	ldr	r2, [pc, #104]	; (80038b0 <PCD_EP_OutXfrComplete_int+0x20c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d124      	bne.n	8003894 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003860:	461a      	mov	r2, r3
 8003862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003866:	6093      	str	r3, [r2, #8]
 8003868:	e01a      	b.n	80038a0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003880:	461a      	mov	r2, r3
 8003882:	2320      	movs	r3, #32
 8003884:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	4619      	mov	r1, r3
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f00b f993 	bl	800ebb8 <HAL_PCD_DataOutStageCallback>
 8003892:	e005      	b.n	80038a0 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	4619      	mov	r1, r3
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f00b f98c 	bl	800ebb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	4f54300a 	.word	0x4f54300a
 80038b0:	4f54310a 	.word	0x4f54310a

080038b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	333c      	adds	r3, #60	; 0x3c
 80038cc:	3304      	adds	r3, #4
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d113      	bne.n	8003912 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4a1f      	ldr	r2, [pc, #124]	; (800396c <PCD_EP_OutSetupPacket_int+0xb8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d922      	bls.n	8003938 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01d      	beq.n	8003938 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003908:	461a      	mov	r2, r3
 800390a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800390e:	6093      	str	r3, [r2, #8]
 8003910:	e012      	b.n	8003938 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4a16      	ldr	r2, [pc, #88]	; (8003970 <PCD_EP_OutSetupPacket_int+0xbc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d10e      	bne.n	8003938 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003920:	2b00      	cmp	r3, #0
 8003922:	d009      	beq.n	8003938 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003930:	461a      	mov	r2, r3
 8003932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003936:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f00b f92b 	bl	800eb94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4a0a      	ldr	r2, [pc, #40]	; (800396c <PCD_EP_OutSetupPacket_int+0xb8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d90c      	bls.n	8003960 <PCD_EP_OutSetupPacket_int+0xac>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d108      	bne.n	8003960 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003958:	461a      	mov	r2, r3
 800395a:	2101      	movs	r1, #1
 800395c:	f005 fb02 	bl	8008f64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	4f54300a 	.word	0x4f54300a
 8003970:	4f54310a 	.word	0x4f54310a

08003974 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	70fb      	strb	r3, [r7, #3]
 8003980:	4613      	mov	r3, r2
 8003982:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d107      	bne.n	80039a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003992:	883b      	ldrh	r3, [r7, #0]
 8003994:	0419      	lsls	r1, r3, #16
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	430a      	orrs	r2, r1
 800399e:	629a      	str	r2, [r3, #40]	; 0x28
 80039a0:	e028      	b.n	80039f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	0c1b      	lsrs	r3, r3, #16
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	4413      	add	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039b0:	2300      	movs	r3, #0
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	e00d      	b.n	80039d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	3340      	adds	r3, #64	; 0x40
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	0c1b      	lsrs	r3, r3, #16
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	4413      	add	r3, r2
 80039ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	3301      	adds	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
 80039d2:	7bfa      	ldrb	r2, [r7, #15]
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	429a      	cmp	r2, r3
 80039da:	d3ec      	bcc.n	80039b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039dc:	883b      	ldrh	r3, [r7, #0]
 80039de:	0418      	lsls	r0, r3, #16
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6819      	ldr	r1, [r3, #0]
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	4302      	orrs	r2, r0
 80039ec:	3340      	adds	r3, #64	; 0x40
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	887a      	ldrh	r2, [r7, #2]
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e22d      	b.n	8003eaa <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d075      	beq.n	8003b46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a5a:	4ba3      	ldr	r3, [pc, #652]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d00c      	beq.n	8003a80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a66:	4ba0      	ldr	r3, [pc, #640]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d112      	bne.n	8003a98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a72:	4b9d      	ldr	r3, [pc, #628]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a7e:	d10b      	bne.n	8003a98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a80:	4b99      	ldr	r3, [pc, #612]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d05b      	beq.n	8003b44 <HAL_RCC_OscConfig+0x108>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d157      	bne.n	8003b44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e208      	b.n	8003eaa <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa0:	d106      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x74>
 8003aa2:	4b91      	ldr	r3, [pc, #580]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a90      	ldr	r2, [pc, #576]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e01d      	b.n	8003aec <HAL_RCC_OscConfig+0xb0>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x98>
 8003aba:	4b8b      	ldr	r3, [pc, #556]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a8a      	ldr	r2, [pc, #552]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	4b88      	ldr	r3, [pc, #544]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a87      	ldr	r2, [pc, #540]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	e00b      	b.n	8003aec <HAL_RCC_OscConfig+0xb0>
 8003ad4:	4b84      	ldr	r3, [pc, #528]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a83      	ldr	r2, [pc, #524]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4b81      	ldr	r3, [pc, #516]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a80      	ldr	r2, [pc, #512]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d013      	beq.n	8003b1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7fd fe4c 	bl	8001790 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003afc:	f7fd fe48 	bl	8001790 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b64      	cmp	r3, #100	; 0x64
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e1cd      	b.n	8003eaa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0e:	4b76      	ldr	r3, [pc, #472]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0xc0>
 8003b1a:	e014      	b.n	8003b46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fd fe38 	bl	8001790 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b24:	f7fd fe34 	bl	8001790 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	; 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e1b9      	b.n	8003eaa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b36:	4b6c      	ldr	r3, [pc, #432]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0xe8>
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d063      	beq.n	8003c1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b52:	4b65      	ldr	r3, [pc, #404]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b5e:	4b62      	ldr	r3, [pc, #392]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d11c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b6a:	4b5f      	ldr	r3, [pc, #380]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d116      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	4b5c      	ldr	r3, [pc, #368]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_RCC_OscConfig+0x152>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d001      	beq.n	8003b8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e18d      	b.n	8003eaa <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8e:	4b56      	ldr	r3, [pc, #344]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4952      	ldr	r1, [pc, #328]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba2:	e03a      	b.n	8003c1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bac:	4b4f      	ldr	r3, [pc, #316]	; (8003cec <HAL_RCC_OscConfig+0x2b0>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7fd fded 	bl	8001790 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bba:	f7fd fde9 	bl	8001790 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e16e      	b.n	8003eaa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bcc:	4b46      	ldr	r3, [pc, #280]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd8:	4b43      	ldr	r3, [pc, #268]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4940      	ldr	r1, [pc, #256]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]
 8003bec:	e015      	b.n	8003c1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bee:	4b3f      	ldr	r3, [pc, #252]	; (8003cec <HAL_RCC_OscConfig+0x2b0>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fd fdcc 	bl	8001790 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bfc:	f7fd fdc8 	bl	8001790 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e14d      	b.n	8003eaa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0e:	4b36      	ldr	r3, [pc, #216]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d030      	beq.n	8003c88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d016      	beq.n	8003c5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c2e:	4b30      	ldr	r3, [pc, #192]	; (8003cf0 <HAL_RCC_OscConfig+0x2b4>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7fd fdac 	bl	8001790 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c3c:	f7fd fda8 	bl	8001790 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e12d      	b.n	8003eaa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4e:	4b26      	ldr	r3, [pc, #152]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x200>
 8003c5a:	e015      	b.n	8003c88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c5c:	4b24      	ldr	r3, [pc, #144]	; (8003cf0 <HAL_RCC_OscConfig+0x2b4>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c62:	f7fd fd95 	bl	8001790 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c6a:	f7fd fd91 	bl	8001790 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e116      	b.n	8003eaa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1f0      	bne.n	8003c6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80a0 	beq.w	8003dd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c96:	2300      	movs	r3, #0
 8003c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9a:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10f      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	4a0e      	ldr	r2, [pc, #56]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_RCC_OscConfig+0x2b8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d121      	bne.n	8003d16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd2:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <HAL_RCC_OscConfig+0x2b8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a07      	ldr	r2, [pc, #28]	; (8003cf4 <HAL_RCC_OscConfig+0x2b8>)
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cde:	f7fd fd57 	bl	8001790 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce4:	e011      	b.n	8003d0a <HAL_RCC_OscConfig+0x2ce>
 8003ce6:	bf00      	nop
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	42470000 	.word	0x42470000
 8003cf0:	42470e80 	.word	0x42470e80
 8003cf4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf8:	f7fd fd4a 	bl	8001790 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e0cf      	b.n	8003eaa <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0a:	4b6a      	ldr	r3, [pc, #424]	; (8003eb4 <HAL_RCC_OscConfig+0x478>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d106      	bne.n	8003d2c <HAL_RCC_OscConfig+0x2f0>
 8003d1e:	4b66      	ldr	r3, [pc, #408]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	4a65      	ldr	r2, [pc, #404]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2a:	e01c      	b.n	8003d66 <HAL_RCC_OscConfig+0x32a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	d10c      	bne.n	8003d4e <HAL_RCC_OscConfig+0x312>
 8003d34:	4b60      	ldr	r3, [pc, #384]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	4a5f      	ldr	r2, [pc, #380]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003d3a:	f043 0304 	orr.w	r3, r3, #4
 8003d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d40:	4b5d      	ldr	r3, [pc, #372]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d44:	4a5c      	ldr	r2, [pc, #368]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4c:	e00b      	b.n	8003d66 <HAL_RCC_OscConfig+0x32a>
 8003d4e:	4b5a      	ldr	r3, [pc, #360]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	4a59      	ldr	r2, [pc, #356]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5a:	4b57      	ldr	r3, [pc, #348]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	4a56      	ldr	r2, [pc, #344]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003d60:	f023 0304 	bic.w	r3, r3, #4
 8003d64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d015      	beq.n	8003d9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6e:	f7fd fd0f 	bl	8001790 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d76:	f7fd fd0b 	bl	8001790 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e08e      	b.n	8003eaa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8c:	4b4a      	ldr	r3, [pc, #296]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ee      	beq.n	8003d76 <HAL_RCC_OscConfig+0x33a>
 8003d98:	e014      	b.n	8003dc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9a:	f7fd fcf9 	bl	8001790 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da0:	e00a      	b.n	8003db8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da2:	f7fd fcf5 	bl	8001790 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e078      	b.n	8003eaa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db8:	4b3f      	ldr	r3, [pc, #252]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1ee      	bne.n	8003da2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d105      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dca:	4b3b      	ldr	r3, [pc, #236]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	4a3a      	ldr	r2, [pc, #232]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d064      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dde:	4b36      	ldr	r3, [pc, #216]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d05c      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d141      	bne.n	8003e76 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df2:	4b32      	ldr	r3, [pc, #200]	; (8003ebc <HAL_RCC_OscConfig+0x480>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fd fcca 	bl	8001790 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fd fcc6 	bl	8001790 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e04b      	b.n	8003eaa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e12:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69da      	ldr	r2, [r3, #28]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	019b      	lsls	r3, r3, #6
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	3b01      	subs	r3, #1
 8003e38:	041b      	lsls	r3, r3, #16
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	061b      	lsls	r3, r3, #24
 8003e42:	491d      	ldr	r1, [pc, #116]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e48:	4b1c      	ldr	r3, [pc, #112]	; (8003ebc <HAL_RCC_OscConfig+0x480>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4e:	f7fd fc9f 	bl	8001790 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e56:	f7fd fc9b 	bl	8001790 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e020      	b.n	8003eaa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e68:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f0      	beq.n	8003e56 <HAL_RCC_OscConfig+0x41a>
 8003e74:	e018      	b.n	8003ea8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e76:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <HAL_RCC_OscConfig+0x480>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd fc88 	bl	8001790 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e84:	f7fd fc84 	bl	8001790 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e009      	b.n	8003eaa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e96:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <HAL_RCC_OscConfig+0x47c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x448>
 8003ea2:	e001      	b.n	8003ea8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40007000 	.word	0x40007000
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	42470060 	.word	0x42470060

08003ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0ca      	b.n	800406a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed4:	4b67      	ldr	r3, [pc, #412]	; (8004074 <HAL_RCC_ClockConfig+0x1b4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d90c      	bls.n	8003efc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee2:	4b64      	ldr	r3, [pc, #400]	; (8004074 <HAL_RCC_ClockConfig+0x1b4>)
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	4b62      	ldr	r3, [pc, #392]	; (8004074 <HAL_RCC_ClockConfig+0x1b4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0b6      	b.n	800406a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d020      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f14:	4b58      	ldr	r3, [pc, #352]	; (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a57      	ldr	r2, [pc, #348]	; (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f2c:	4b52      	ldr	r3, [pc, #328]	; (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	4a51      	ldr	r2, [pc, #324]	; (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003f32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f38:	4b4f      	ldr	r3, [pc, #316]	; (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	494c      	ldr	r1, [pc, #304]	; (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d044      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d107      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5e:	4b46      	ldr	r3, [pc, #280]	; (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d119      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e07d      	b.n	800406a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d003      	beq.n	8003f7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d107      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7e:	4b3e      	ldr	r3, [pc, #248]	; (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e06d      	b.n	800406a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8e:	4b3a      	ldr	r3, [pc, #232]	; (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e065      	b.n	800406a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f9e:	4b36      	ldr	r3, [pc, #216]	; (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f023 0203 	bic.w	r2, r3, #3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	4933      	ldr	r1, [pc, #204]	; (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb0:	f7fd fbee 	bl	8001790 <HAL_GetTick>
 8003fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb8:	f7fd fbea 	bl	8001790 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e04d      	b.n	800406a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fce:	4b2a      	ldr	r3, [pc, #168]	; (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 020c 	and.w	r2, r3, #12
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d1eb      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe0:	4b24      	ldr	r3, [pc, #144]	; (8004074 <HAL_RCC_ClockConfig+0x1b4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d20c      	bcs.n	8004008 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fee:	4b21      	ldr	r3, [pc, #132]	; (8004074 <HAL_RCC_ClockConfig+0x1b4>)
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff6:	4b1f      	ldr	r3, [pc, #124]	; (8004074 <HAL_RCC_ClockConfig+0x1b4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e030      	b.n	800406a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004014:	4b18      	ldr	r3, [pc, #96]	; (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4915      	ldr	r1, [pc, #84]	; (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8004022:	4313      	orrs	r3, r2
 8004024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d009      	beq.n	8004046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004032:	4b11      	ldr	r3, [pc, #68]	; (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	490d      	ldr	r1, [pc, #52]	; (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 8004042:	4313      	orrs	r3, r2
 8004044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004046:	f000 f81d 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 800404a:	4601      	mov	r1, r0
 800404c:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <HAL_RCC_ClockConfig+0x1b8>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	4a09      	ldr	r2, [pc, #36]	; (800407c <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	5cd3      	ldrb	r3, [r2, r3]
 800405a:	fa21 f303 	lsr.w	r3, r1, r3
 800405e:	4a08      	ldr	r2, [pc, #32]	; (8004080 <HAL_RCC_ClockConfig+0x1c0>)
 8004060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004062:	2000      	movs	r0, #0
 8004064:	f7fd fb50 	bl	8001708 <HAL_InitTick>

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023c00 	.word	0x40023c00
 8004078:	40023800 	.word	0x40023800
 800407c:	08013158 	.word	0x08013158
 8004080:	20000118 	.word	0x20000118

08004084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	607b      	str	r3, [r7, #4]
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	2300      	movs	r3, #0
 8004094:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800409a:	4b50      	ldr	r3, [pc, #320]	; (80041dc <HAL_RCC_GetSysClockFreq+0x158>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d007      	beq.n	80040b6 <HAL_RCC_GetSysClockFreq+0x32>
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d008      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x38>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f040 808d 	bne.w	80041ca <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040b0:	4b4b      	ldr	r3, [pc, #300]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80040b2:	60bb      	str	r3, [r7, #8]
       break;
 80040b4:	e08c      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040b6:	4b4b      	ldr	r3, [pc, #300]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80040b8:	60bb      	str	r3, [r7, #8]
      break;
 80040ba:	e089      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040bc:	4b47      	ldr	r3, [pc, #284]	; (80041dc <HAL_RCC_GetSysClockFreq+0x158>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040c6:	4b45      	ldr	r3, [pc, #276]	; (80041dc <HAL_RCC_GetSysClockFreq+0x158>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d023      	beq.n	800411a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d2:	4b42      	ldr	r3, [pc, #264]	; (80041dc <HAL_RCC_GetSysClockFreq+0x158>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	099b      	lsrs	r3, r3, #6
 80040d8:	f04f 0400 	mov.w	r4, #0
 80040dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	ea03 0501 	and.w	r5, r3, r1
 80040e8:	ea04 0602 	and.w	r6, r4, r2
 80040ec:	4a3d      	ldr	r2, [pc, #244]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80040ee:	fb02 f106 	mul.w	r1, r2, r6
 80040f2:	2200      	movs	r2, #0
 80040f4:	fb02 f205 	mul.w	r2, r2, r5
 80040f8:	440a      	add	r2, r1
 80040fa:	493a      	ldr	r1, [pc, #232]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80040fc:	fba5 0101 	umull	r0, r1, r5, r1
 8004100:	1853      	adds	r3, r2, r1
 8004102:	4619      	mov	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f04f 0400 	mov.w	r4, #0
 800410a:	461a      	mov	r2, r3
 800410c:	4623      	mov	r3, r4
 800410e:	f7fc fdbb 	bl	8000c88 <__aeabi_uldivmod>
 8004112:	4603      	mov	r3, r0
 8004114:	460c      	mov	r4, r1
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	e049      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800411a:	4b30      	ldr	r3, [pc, #192]	; (80041dc <HAL_RCC_GetSysClockFreq+0x158>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	099b      	lsrs	r3, r3, #6
 8004120:	f04f 0400 	mov.w	r4, #0
 8004124:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	ea03 0501 	and.w	r5, r3, r1
 8004130:	ea04 0602 	and.w	r6, r4, r2
 8004134:	4629      	mov	r1, r5
 8004136:	4632      	mov	r2, r6
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	f04f 0400 	mov.w	r4, #0
 8004140:	0154      	lsls	r4, r2, #5
 8004142:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004146:	014b      	lsls	r3, r1, #5
 8004148:	4619      	mov	r1, r3
 800414a:	4622      	mov	r2, r4
 800414c:	1b49      	subs	r1, r1, r5
 800414e:	eb62 0206 	sbc.w	r2, r2, r6
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	f04f 0400 	mov.w	r4, #0
 800415a:	0194      	lsls	r4, r2, #6
 800415c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004160:	018b      	lsls	r3, r1, #6
 8004162:	1a5b      	subs	r3, r3, r1
 8004164:	eb64 0402 	sbc.w	r4, r4, r2
 8004168:	f04f 0100 	mov.w	r1, #0
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	00e2      	lsls	r2, r4, #3
 8004172:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004176:	00d9      	lsls	r1, r3, #3
 8004178:	460b      	mov	r3, r1
 800417a:	4614      	mov	r4, r2
 800417c:	195b      	adds	r3, r3, r5
 800417e:	eb44 0406 	adc.w	r4, r4, r6
 8004182:	f04f 0100 	mov.w	r1, #0
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	02a2      	lsls	r2, r4, #10
 800418c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004190:	0299      	lsls	r1, r3, #10
 8004192:	460b      	mov	r3, r1
 8004194:	4614      	mov	r4, r2
 8004196:	4618      	mov	r0, r3
 8004198:	4621      	mov	r1, r4
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f04f 0400 	mov.w	r4, #0
 80041a0:	461a      	mov	r2, r3
 80041a2:	4623      	mov	r3, r4
 80041a4:	f7fc fd70 	bl	8000c88 <__aeabi_uldivmod>
 80041a8:	4603      	mov	r3, r0
 80041aa:	460c      	mov	r4, r1
 80041ac:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041ae:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <HAL_RCC_GetSysClockFreq+0x158>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	0c1b      	lsrs	r3, r3, #16
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	3301      	adds	r3, #1
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c6:	60bb      	str	r3, [r7, #8]
      break;
 80041c8:	e002      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041ca:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80041cc:	60bb      	str	r3, [r7, #8]
      break;
 80041ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041d0:	68bb      	ldr	r3, [r7, #8]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041da:	bf00      	nop
 80041dc:	40023800 	.word	0x40023800
 80041e0:	00f42400 	.word	0x00f42400
 80041e4:	00b71b00 	.word	0x00b71b00

080041e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041ec:	4b03      	ldr	r3, [pc, #12]	; (80041fc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ee:	681b      	ldr	r3, [r3, #0]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20000118 	.word	0x20000118

08004200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004204:	f7ff fff0 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8004208:	4601      	mov	r1, r0
 800420a:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	0a9b      	lsrs	r3, r3, #10
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	4a03      	ldr	r2, [pc, #12]	; (8004224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004216:	5cd3      	ldrb	r3, [r2, r3]
 8004218:	fa21 f303 	lsr.w	r3, r1, r3
}
 800421c:	4618      	mov	r0, r3
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40023800 	.word	0x40023800
 8004224:	08013168 	.word	0x08013168

08004228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800422c:	f7ff ffdc 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8004230:	4601      	mov	r1, r0
 8004232:	4b05      	ldr	r3, [pc, #20]	; (8004248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	0b5b      	lsrs	r3, r3, #13
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	4a03      	ldr	r2, [pc, #12]	; (800424c <HAL_RCC_GetPCLK2Freq+0x24>)
 800423e:	5cd3      	ldrb	r3, [r2, r3]
 8004240:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40023800 	.word	0x40023800
 800424c:	08013168 	.word	0x08013168

08004250 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d105      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004274:	2b00      	cmp	r3, #0
 8004276:	d035      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004278:	4b62      	ldr	r3, [pc, #392]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800427e:	f7fd fa87 	bl	8001790 <HAL_GetTick>
 8004282:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004284:	e008      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004286:	f7fd fa83 	bl	8001790 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e0b0      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004298:	4b5b      	ldr	r3, [pc, #364]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f0      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	019a      	lsls	r2, r3, #6
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	071b      	lsls	r3, r3, #28
 80042b0:	4955      	ldr	r1, [pc, #340]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042b8:	4b52      	ldr	r3, [pc, #328]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042be:	f7fd fa67 	bl	8001790 <HAL_GetTick>
 80042c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042c4:	e008      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042c6:	f7fd fa63 	bl	8001790 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e090      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042d8:	4b4b      	ldr	r3, [pc, #300]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0f0      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8083 	beq.w	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	4b44      	ldr	r3, [pc, #272]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	4a43      	ldr	r2, [pc, #268]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004300:	6413      	str	r3, [r2, #64]	; 0x40
 8004302:	4b41      	ldr	r3, [pc, #260]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800430e:	4b3f      	ldr	r3, [pc, #252]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a3e      	ldr	r2, [pc, #248]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004318:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800431a:	f7fd fa39 	bl	8001790 <HAL_GetTick>
 800431e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004320:	e008      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004322:	f7fd fa35 	bl	8001790 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e062      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004334:	4b35      	ldr	r3, [pc, #212]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004340:	4b31      	ldr	r3, [pc, #196]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004348:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d02f      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	429a      	cmp	r2, r3
 800435c:	d028      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800435e:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004366:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004368:	4b29      	ldr	r3, [pc, #164]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800436a:	2201      	movs	r2, #1
 800436c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800436e:	4b28      	ldr	r3, [pc, #160]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004374:	4a24      	ldr	r2, [pc, #144]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800437a:	4b23      	ldr	r3, [pc, #140]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b01      	cmp	r3, #1
 8004384:	d114      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004386:	f7fd fa03 	bl	8001790 <HAL_GetTick>
 800438a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800438c:	e00a      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800438e:	f7fd f9ff 	bl	8001790 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	f241 3288 	movw	r2, #5000	; 0x1388
 800439c:	4293      	cmp	r3, r2
 800439e:	d901      	bls.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e02a      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a4:	4b18      	ldr	r3, [pc, #96]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0ee      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043bc:	d10d      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d2:	490d      	ldr	r1, [pc, #52]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	608b      	str	r3, [r1, #8]
 80043d8:	e005      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043e4:	6093      	str	r3, [r2, #8]
 80043e6:	4b08      	ldr	r3, [pc, #32]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f2:	4905      	ldr	r1, [pc, #20]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	42470068 	.word	0x42470068
 8004408:	40023800 	.word	0x40023800
 800440c:	40007000 	.word	0x40007000
 8004410:	42470e40 	.word	0x42470e40

08004414 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e083      	b.n	800452e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	7f5b      	ldrb	r3, [r3, #29]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d105      	bne.n	800443c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f009 ff30 	bl	800e29c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	22ca      	movs	r2, #202	; 0xca
 8004448:	625a      	str	r2, [r3, #36]	; 0x24
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2253      	movs	r2, #83	; 0x53
 8004450:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 faa8 	bl	80049a8 <RTC_EnterInitMode>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d008      	beq.n	8004470 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	22ff      	movs	r2, #255	; 0xff
 8004464:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2204      	movs	r2, #4
 800446a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e05e      	b.n	800452e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6812      	ldr	r2, [r2, #0]
 800447a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800447e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004482:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6899      	ldr	r1, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	68d2      	ldr	r2, [r2, #12]
 80044aa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6919      	ldr	r1, [r3, #16]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	041a      	lsls	r2, r3, #16
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10e      	bne.n	80044fc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fa3a 	bl	8004958 <HAL_RTC_WaitForSynchro>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d008      	beq.n	80044fc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	22ff      	movs	r2, #255	; 0xff
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2204      	movs	r2, #4
 80044f6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e018      	b.n	800452e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800450a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	22ff      	movs	r2, #255	; 0xff
 8004524:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800452c:	2300      	movs	r3, #0
  }
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004536:	b590      	push	{r4, r7, lr}
 8004538:	b087      	sub	sp, #28
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	7f1b      	ldrb	r3, [r3, #28]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_RTC_SetTime+0x1c>
 800454e:	2302      	movs	r3, #2
 8004550:	e0aa      	b.n	80046a8 <HAL_RTC_SetTime+0x172>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2202      	movs	r2, #2
 800455c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d126      	bne.n	80045b2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2200      	movs	r2, #0
 8004576:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fa3f 	bl	8004a00 <RTC_ByteToBcd2>
 8004582:	4603      	mov	r3, r0
 8004584:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	785b      	ldrb	r3, [r3, #1]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fa38 	bl	8004a00 <RTC_ByteToBcd2>
 8004590:	4603      	mov	r3, r0
 8004592:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004594:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	789b      	ldrb	r3, [r3, #2]
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fa30 	bl	8004a00 <RTC_ByteToBcd2>
 80045a0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80045a2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	78db      	ldrb	r3, [r3, #3]
 80045aa:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	e018      	b.n	80045e4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2200      	movs	r2, #0
 80045c4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	785b      	ldrb	r3, [r3, #1]
 80045d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80045d2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80045d8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	78db      	ldrb	r3, [r3, #3]
 80045de:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80045e0:	4313      	orrs	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	22ca      	movs	r2, #202	; 0xca
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2253      	movs	r2, #83	; 0x53
 80045f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f9d7 	bl	80049a8 <RTC_EnterInitMode>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00b      	beq.n	8004618 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	22ff      	movs	r2, #255	; 0xff
 8004606:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2204      	movs	r2, #4
 800460c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e047      	b.n	80046a8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004622:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004626:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004636:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6899      	ldr	r1, [r3, #8]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	431a      	orrs	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800465e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0320 	and.w	r3, r3, #32
 800466a:	2b00      	cmp	r3, #0
 800466c:	d111      	bne.n	8004692 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f972 	bl	8004958 <HAL_RTC_WaitForSynchro>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00b      	beq.n	8004692 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	22ff      	movs	r2, #255	; 0xff
 8004680:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2204      	movs	r2, #4
 8004686:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e00a      	b.n	80046a8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	22ff      	movs	r2, #255	; 0xff
 8004698:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80046a6:	2300      	movs	r3, #0
  }
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	371c      	adds	r7, #28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd90      	pop	{r4, r7, pc}

080046b0 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80046e2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80046e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	0c1b      	lsrs	r3, r3, #16
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	0a1b      	lsrs	r3, r3, #8
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004702:	b2da      	uxtb	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004710:	b2da      	uxtb	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004720:	b2da      	uxtb	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d11a      	bne.n	8004762 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f983 	bl	8004a3c <RTC_Bcd2ToByte>
 8004736:	4603      	mov	r3, r0
 8004738:	461a      	mov	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	785b      	ldrb	r3, [r3, #1]
 8004742:	4618      	mov	r0, r3
 8004744:	f000 f97a 	bl	8004a3c <RTC_Bcd2ToByte>
 8004748:	4603      	mov	r3, r0
 800474a:	461a      	mov	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	789b      	ldrb	r3, [r3, #2]
 8004754:	4618      	mov	r0, r3
 8004756:	f000 f971 	bl	8004a3c <RTC_Bcd2ToByte>
 800475a:	4603      	mov	r3, r0
 800475c:	461a      	mov	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800476c:	b590      	push	{r4, r7, lr}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	7f1b      	ldrb	r3, [r3, #28]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_RTC_SetDate+0x1c>
 8004784:	2302      	movs	r3, #2
 8004786:	e094      	b.n	80048b2 <HAL_RTC_SetDate+0x146>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2202      	movs	r2, #2
 8004792:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10e      	bne.n	80047b8 <HAL_RTC_SetDate+0x4c>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	785b      	ldrb	r3, [r3, #1]
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	785b      	ldrb	r3, [r3, #1]
 80047aa:	f023 0310 	bic.w	r3, r3, #16
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	330a      	adds	r3, #10
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d11c      	bne.n	80047f8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	78db      	ldrb	r3, [r3, #3]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 f91c 	bl	8004a00 <RTC_ByteToBcd2>
 80047c8:	4603      	mov	r3, r0
 80047ca:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	785b      	ldrb	r3, [r3, #1]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 f915 	bl	8004a00 <RTC_ByteToBcd2>
 80047d6:	4603      	mov	r3, r0
 80047d8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80047da:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	789b      	ldrb	r3, [r3, #2]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 f90d 	bl	8004a00 <RTC_ByteToBcd2>
 80047e6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80047e8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e00e      	b.n	8004816 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	78db      	ldrb	r3, [r3, #3]
 80047fc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004804:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800480a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	22ca      	movs	r2, #202	; 0xca
 800481c:	625a      	str	r2, [r3, #36]	; 0x24
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2253      	movs	r2, #83	; 0x53
 8004824:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f8be 	bl	80049a8 <RTC_EnterInitMode>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00b      	beq.n	800484a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	22ff      	movs	r2, #255	; 0xff
 8004838:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2204      	movs	r2, #4
 800483e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e033      	b.n	80048b2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004854:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004858:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004868:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0320 	and.w	r3, r3, #32
 8004874:	2b00      	cmp	r3, #0
 8004876:	d111      	bne.n	800489c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f86d 	bl	8004958 <HAL_RTC_WaitForSynchro>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00b      	beq.n	800489c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	22ff      	movs	r2, #255	; 0xff
 800488a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2204      	movs	r2, #4
 8004890:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e00a      	b.n	80048b2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	22ff      	movs	r2, #255	; 0xff
 80048a2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80048b0:	2300      	movs	r3, #0
  }
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd90      	pop	{r4, r7, pc}

080048ba <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b086      	sub	sp, #24
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80048d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80048d8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	0c1b      	lsrs	r3, r3, #16
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	0a1b      	lsrs	r3, r3, #8
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	f003 031f 	and.w	r3, r3, #31
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	0b5b      	lsrs	r3, r3, #13
 8004906:	b2db      	uxtb	r3, r3
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	b2da      	uxtb	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d11a      	bne.n	800494e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	78db      	ldrb	r3, [r3, #3]
 800491c:	4618      	mov	r0, r3
 800491e:	f000 f88d 	bl	8004a3c <RTC_Bcd2ToByte>
 8004922:	4603      	mov	r3, r0
 8004924:	461a      	mov	r2, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	785b      	ldrb	r3, [r3, #1]
 800492e:	4618      	mov	r0, r3
 8004930:	f000 f884 	bl	8004a3c <RTC_Bcd2ToByte>
 8004934:	4603      	mov	r3, r0
 8004936:	461a      	mov	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	789b      	ldrb	r3, [r3, #2]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 f87b 	bl	8004a3c <RTC_Bcd2ToByte>
 8004946:	4603      	mov	r3, r0
 8004948:	461a      	mov	r2, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004972:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004974:	f7fc ff0c 	bl	8001790 <HAL_GetTick>
 8004978:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800497a:	e009      	b.n	8004990 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800497c:	f7fc ff08 	bl	8001790 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800498a:	d901      	bls.n	8004990 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e007      	b.n	80049a0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0ee      	beq.n	800497c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d119      	bne.n	80049f6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f04f 32ff 	mov.w	r2, #4294967295
 80049ca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049cc:	f7fc fee0 	bl	8001790 <HAL_GetTick>
 80049d0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80049d2:	e009      	b.n	80049e8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80049d4:	f7fc fedc 	bl	8001790 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049e2:	d901      	bls.n	80049e8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e007      	b.n	80049f8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0ee      	beq.n	80049d4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004a0e:	e005      	b.n	8004a1c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3301      	adds	r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	3b0a      	subs	r3, #10
 8004a1a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	2b09      	cmp	r3, #9
 8004a20:	d8f6      	bhi.n	8004a10 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	b2db      	uxtb	r3, r3
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	4413      	add	r3, r2
 8004a6a:	b2db      	uxtb	r3, r3
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e01d      	b.n	8004ac6 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d105      	bne.n	8004aa2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f009 fc13 	bl	800e2c8 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2203      	movs	r2, #3
 8004aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f810 	bl	8004ad0 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004ad0:	b5b0      	push	{r4, r5, r7, lr}
 8004ad2:	b08e      	sub	sp, #56	; 0x38
 8004ad4:	af04      	add	r7, sp, #16
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004aec:	2300      	movs	r3, #0
 8004aee:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004af0:	2376      	movs	r3, #118	; 0x76
 8004af2:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681d      	ldr	r5, [r3, #0]
 8004af8:	466c      	mov	r4, sp
 8004afa:	f107 0318 	add.w	r3, r7, #24
 8004afe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b06:	f107 030c 	add.w	r3, r7, #12
 8004b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	f002 fa7f 	bl	8007010 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8004b12:	4b1c      	ldr	r3, [pc, #112]	; (8004b84 <HAL_SD_InitCard+0xb4>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f002 fac0 	bl	80070a2 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004b22:	4b18      	ldr	r3, [pc, #96]	; (8004b84 <HAL_SD_InitCard+0xb4>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8004b28:	2002      	movs	r0, #2
 8004b2a:	f7fc fe3d 	bl	80017a8 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fffe 	bl	8005b30 <SD_PowerON>
 8004b34:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00b      	beq.n	8004b54 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e013      	b.n	8004b7c <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 ff22 	bl	800599e <SD_InitCard>
 8004b5a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00b      	beq.n	8004b7a <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3728      	adds	r7, #40	; 0x28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bdb0      	pop	{r4, r5, r7, pc}
 8004b84:	422580a0 	.word	0x422580a0

08004b88 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08c      	sub	sp, #48	; 0x30
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d107      	bne.n	8004bb0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e0ad      	b.n	8004d0c <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	f040 80a6 	bne.w	8004d0a <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	441a      	add	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d907      	bls.n	8004be2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e094      	b.n	8004d0c <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2203      	movs	r2, #3
 8004be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004c00:	f043 0302 	orr.w	r3, r3, #2
 8004c04:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	4a42      	ldr	r2, [pc, #264]	; (8004d14 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8004c0c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c12:	4a41      	ldr	r2, [pc, #260]	; (8004d18 <HAL_SD_ReadBlocks_DMA+0x190>)
 8004c14:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3380      	adds	r3, #128	; 0x80
 8004c28:	4619      	mov	r1, r3
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	025b      	lsls	r3, r3, #9
 8004c30:	089b      	lsrs	r3, r3, #2
 8004c32:	f7fc ff9b 	bl	8001b6c <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004c36:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <HAL_SD_ReadBlocks_DMA+0x194>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d002      	beq.n	8004c4a <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	025b      	lsls	r3, r3, #9
 8004c48:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c4e:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	025b      	lsls	r3, r3, #9
 8004c54:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004c56:	2390      	movs	r3, #144	; 0x90
 8004c58:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004c62:	2301      	movs	r3, #1
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f107 0214 	add.w	r2, r7, #20
 8004c6e:	4611      	mov	r1, r2
 8004c70:	4618      	mov	r0, r3
 8004c72:	f002 fa7e 	bl	8007172 <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f002 faa3 	bl	80071ca <SDMMC_CmdBlockLength>
 8004c84:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d010      	beq.n	8004cae <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e02e      	b.n	8004d0c <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d90a      	bls.n	8004cca <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2282      	movs	r2, #130	; 0x82
 8004cb8:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f002 faca 	bl	800725a <SDMMC_CmdReadMultiBlock>
 8004cc6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004cc8:	e009      	b.n	8004cde <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2281      	movs	r2, #129	; 0x81
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f002 fa9b 	bl	8007212 <SDMMC_CmdReadSingleBlock>
 8004cdc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d010      	beq.n	8004d06 <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004cec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e002      	b.n	8004d0c <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	e000      	b.n	8004d0c <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 8004d0a:	2302      	movs	r3, #2
  }
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3730      	adds	r7, #48	; 0x30
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	080057af 	.word	0x080057af
 8004d18:	0800581d 	.word	0x0800581d
 8004d1c:	4225858c 	.word	0x4225858c

08004d20 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08c      	sub	sp, #48	; 0x30
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d107      	bne.n	8004d48 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0ad      	b.n	8004ea4 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	f040 80a6 	bne.w	8004ea2 <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	441a      	add	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d907      	bls.n	8004d7a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e094      	b.n	8004ea4 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2200      	movs	r2, #0
 8004d88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	6812      	ldr	r2, [r2, #0]
 8004d94:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004d98:	f043 0302 	orr.w	r3, r3, #2
 8004d9c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	4a42      	ldr	r2, [pc, #264]	; (8004eac <HAL_SD_WriteBlocks_DMA+0x18c>)
 8004da4:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	4a41      	ldr	r2, [pc, #260]	; (8004eb0 <HAL_SD_WriteBlocks_DMA+0x190>)
 8004dac:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	2200      	movs	r2, #0
 8004db4:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d002      	beq.n	8004dc4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	025b      	lsls	r3, r3, #9
 8004dc2:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f002 f9fc 	bl	80071ca <SDMMC_CmdBlockLength>
 8004dd2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d010      	beq.n	8004dfc <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004de2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dea:	431a      	orrs	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e053      	b.n	8004ea4 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d90a      	bls.n	8004e18 <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	22a0      	movs	r2, #160	; 0xa0
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f002 fa6b 	bl	80072ea <SDMMC_CmdWriteMultiBlock>
 8004e14:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004e16:	e009      	b.n	8004e2c <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2290      	movs	r2, #144	; 0x90
 8004e1c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f002 fa3c 	bl	80072a2 <SDMMC_CmdWriteSingleBlock>
 8004e2a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d010      	beq.n	8004e54 <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004e3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	431a      	orrs	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e027      	b.n	8004ea4 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004e54:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <HAL_SD_WriteBlocks_DMA+0x194>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3380      	adds	r3, #128	; 0x80
 8004e66:	461a      	mov	r2, r3
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	025b      	lsls	r3, r3, #9
 8004e6c:	089b      	lsrs	r3, r3, #2
 8004e6e:	f7fc fe7d 	bl	8001b6c <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e72:	f04f 33ff 	mov.w	r3, #4294967295
 8004e76:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	025b      	lsls	r3, r3, #9
 8004e7c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004e7e:	2390      	movs	r3, #144	; 0x90
 8004e80:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004e82:	2300      	movs	r3, #0
 8004e84:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f107 0214 	add.w	r2, r7, #20
 8004e96:	4611      	mov	r1, r2
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f002 f96a 	bl	8007172 <SDIO_ConfigData>
    
    return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e000      	b.n	8004ea4 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
  }
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3730      	adds	r7, #48	; 0x30
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	08005785 	.word	0x08005785
 8004eb0:	0800581d 	.word	0x0800581d
 8004eb4:	4225858c 	.word	0x4225858c

08004eb8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 808d 	beq.w	8004fee <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004eec:	f023 0302 	bic.w	r3, r3, #2
 8004ef0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d03a      	beq.n	8004f74 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d105      	bne.n	8004f16 <HAL_SD_IRQHandler+0x5e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d011      	beq.n	8004f3a <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f002 fa0a 	bl	8007334 <SDMMC_CmdStopTransfer>
 8004f20:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f925 	bl	8005184 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004f42:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d105      	bne.n	8004f64 <HAL_SD_IRQHandler+0xac>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f008 f83b 	bl	800cfe0 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 8004f6a:	e103      	b.n	8005174 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f008 f82d 	bl	800cfcc <HAL_SD_TxCpltCallback>
}
 8004f72:	e0ff      	b.n	8005174 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80f9 	beq.w	8005174 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d011      	beq.n	8004fb2 <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f002 f9ce 	bl	8007334 <SDMMC_CmdStopTransfer>
 8004f98:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f8e9 	bl	8005184 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f040 80da 	bne.w	8005174 <HAL_SD_IRQHandler+0x2bc>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f040 80d3 	bne.w	8005174 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0208 	bic.w	r2, r2, #8
 8004fdc:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f007 fff0 	bl	800cfcc <HAL_SD_TxCpltCallback>
}
 8004fec:	e0c2      	b.n	8005174 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d008      	beq.n	800500e <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005004:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 ffef 	bl	8005fea <SD_Write_IT>
}
 800500c:	e0b2      	b.n	8005174 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005024:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 ffb7 	bl	8005f9a <SD_Read_IT>
}
 800502c:	e0a2      	b.n	8005174 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005034:	f240 233a 	movw	r3, #570	; 0x23a
 8005038:	4013      	ands	r3, r2
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 809a 	beq.w	8005174 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d005      	beq.n	800505a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	f043 0202 	orr.w	r2, r3, #2
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	f043 0208 	orr.w	r2, r3, #8
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d005      	beq.n	800508e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	f043 0220 	orr.w	r2, r3, #32
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a0:	f043 0210 	orr.w	r2, r3, #16
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	f043 0208 	orr.w	r2, r3, #8
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80050ca:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80050da:	f023 0302 	bic.w	r3, r3, #2
 80050de:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d036      	beq.n	800515a <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d011      	beq.n	8005118 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	4a20      	ldr	r2, [pc, #128]	; (800517c <HAL_SD_IRQHandler+0x2c4>)
 80050fa:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	4618      	mov	r0, r3
 8005102:	f7fc fd93 	bl	8001c2c <HAL_DMA_Abort_IT>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d033      	beq.n	8005174 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fbc8 	bl	80058a6 <SD_DMATxAbort>
}
 8005116:	e02d      	b.n	8005174 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511c:	2b00      	cmp	r3, #0
 800511e:	d011      	beq.n	8005144 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005124:	4a16      	ldr	r2, [pc, #88]	; (8005180 <HAL_SD_IRQHandler+0x2c8>)
 8005126:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512c:	4618      	mov	r0, r3
 800512e:	f7fc fd7d 	bl	8001c2c <HAL_DMA_Abort_IT>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01d      	beq.n	8005174 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fbf0 	bl	8005922 <SD_DMARxAbort>
}
 8005142:	e017      	b.n	8005174 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f007 ff30 	bl	800cfb8 <HAL_SD_AbortCallback>
}
 8005158:	e00c      	b.n	8005174 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d006      	beq.n	8005174 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f808 	bl	8005184 <HAL_SD_ErrorCallback>
}
 8005174:	bf00      	nop
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	080058a7 	.word	0x080058a7
 8005180:	08005923 	.word	0x08005923

08005184 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051aa:	0e1b      	lsrs	r3, r3, #24
 80051ac:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	099b      	lsrs	r3, r3, #6
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f003 0303 	and.w	r3, r3, #3
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	089b      	lsrs	r3, r3, #2
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051f2:	0a1b      	lsrs	r3, r3, #8
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005204:	b2db      	uxtb	r3, r3
 8005206:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	b2da      	uxtb	r2, r3
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005214:	0e1b      	lsrs	r3, r3, #24
 8005216:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	b29b      	uxth	r3, r3
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	b29a      	uxth	r2, r3
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005228:	0c1b      	lsrs	r3, r3, #16
 800522a:	b2db      	uxtb	r3, r3
 800522c:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	88db      	ldrh	r3, [r3, #6]
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	091b      	lsrs	r3, r3, #4
 8005238:	b29b      	uxth	r3, r3
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	b29b      	uxth	r3, r3
 8005240:	4313      	orrs	r3, r2
 8005242:	b29a      	uxth	r2, r3
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	b2db      	uxtb	r3, r3
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	b2da      	uxtb	r2, r3
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800525a:	0a1b      	lsrs	r3, r3, #8
 800525c:	b2db      	uxtb	r3, r3
 800525e:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	09db      	lsrs	r3, r3, #7
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	b2da      	uxtb	r2, r3
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	099b      	lsrs	r3, r3, #6
 8005274:	b2db      	uxtb	r3, r3
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	b2da      	uxtb	r2, r3
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	b2db      	uxtb	r3, r3
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	b2da      	uxtb	r2, r3
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	091b      	lsrs	r3, r3, #4
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	b2da      	uxtb	r2, r3
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2200      	movs	r2, #0
 80052a4:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f040 8087 	bne.w	80053be <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	029b      	lsls	r3, r3, #10
 80052b4:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	431a      	orrs	r2, r3
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d6:	0e1b      	lsrs	r3, r3, #24
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	099b      	lsrs	r3, r3, #6
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	431a      	orrs	r2, r3
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	08db      	lsrs	r3, r3, #3
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	b2da      	uxtb	r2, r3
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005310:	0c1b      	lsrs	r3, r3, #16
 8005312:	b2db      	uxtb	r3, r3
 8005314:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	095b      	lsrs	r3, r3, #5
 800531a:	b2db      	uxtb	r3, r3
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	b2da      	uxtb	r2, r3
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	089b      	lsrs	r3, r3, #2
 800532a:	b2db      	uxtb	r3, r3
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	b2da      	uxtb	r2, r3
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	b2db      	uxtb	r3, r3
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f003 0306 	and.w	r3, r3, #6
 8005342:	b2da      	uxtb	r2, r3
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800534c:	0a1b      	lsrs	r3, r3, #8
 800534e:	b2db      	uxtb	r3, r3
 8005350:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	7e1b      	ldrb	r3, [r3, #24]
 8005356:	b2da      	uxtb	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	09db      	lsrs	r3, r3, #7
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	b2db      	uxtb	r3, r3
 8005364:	4313      	orrs	r3, r2
 8005366:	b2da      	uxtb	r2, r3
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	7e1b      	ldrb	r3, [r3, #24]
 800537a:	b2db      	uxtb	r3, r3
 800537c:	3302      	adds	r3, #2
 800537e:	2201      	movs	r2, #1
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005388:	fb02 f203 	mul.w	r2, r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	7a1b      	ldrb	r3, [r3, #8]
 8005394:	b2db      	uxtb	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	2301      	movs	r3, #1
 800539a:	fa03 f202 	lsl.w	r2, r3, r2
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80053aa:	0a52      	lsrs	r2, r2, #9
 80053ac:	fb02 f203 	mul.w	r2, r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ba:	661a      	str	r2, [r3, #96]	; 0x60
 80053bc:	e04d      	b.n	800545a <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d138      	bne.n	8005438 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	041b      	lsls	r3, r3, #16
 80053d2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053de:	0e1b      	lsrs	r3, r3, #24
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	431a      	orrs	r2, r3
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f6:	0c1b      	lsrs	r3, r3, #16
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	431a      	orrs	r2, r3
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800540c:	0a1b      	lsrs	r3, r3, #8
 800540e:	b2db      	uxtb	r3, r3
 8005410:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	3301      	adds	r3, #1
 8005418:	029a      	lsls	r2, r3, #10
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	655a      	str	r2, [r3, #84]	; 0x54
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800542c:	659a      	str	r2, [r3, #88]	; 0x58
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	661a      	str	r2, [r3, #96]	; 0x60
 8005436:	e010      	b.n	800545a <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005440:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005446:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e0c1      	b.n	80055de <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	099b      	lsrs	r3, r3, #6
 800545e:	b2db      	uxtb	r3, r3
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	b2da      	uxtb	r2, r3
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005476:	b2da      	uxtb	r2, r3
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005480:	b2db      	uxtb	r3, r3
 8005482:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	7e9b      	ldrb	r3, [r3, #26]
 8005488:	b2da      	uxtb	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	09db      	lsrs	r3, r3, #7
 800548e:	b2db      	uxtb	r3, r3
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	b2db      	uxtb	r3, r3
 8005496:	4313      	orrs	r3, r2
 8005498:	b2da      	uxtb	r2, r3
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b0:	0e1b      	lsrs	r3, r3, #24
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	09db      	lsrs	r3, r3, #7
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	089b      	lsrs	r3, r3, #2
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	f003 030c 	and.w	r3, r3, #12
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fc:	0c1b      	lsrs	r3, r3, #16
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	7fdb      	ldrb	r3, [r3, #31]
 8005506:	b2da      	uxtb	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	099b      	lsrs	r3, r3, #6
 800550c:	b2db      	uxtb	r3, r3
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	b2db      	uxtb	r3, r3
 8005514:	4313      	orrs	r3, r2
 8005516:	b2da      	uxtb	r2, r3
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	b2db      	uxtb	r3, r3
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	b2da      	uxtb	r2, r3
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	b2da      	uxtb	r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554a:	0a1b      	lsrs	r3, r3, #8
 800554c:	b2db      	uxtb	r3, r3
 800554e:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	09db      	lsrs	r3, r3, #7
 8005554:	b2db      	uxtb	r3, r3
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	b2da      	uxtb	r2, r3
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	099b      	lsrs	r3, r3, #6
 8005566:	b2db      	uxtb	r3, r3
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	b2da      	uxtb	r2, r3
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	b2db      	uxtb	r3, r3
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	b2da      	uxtb	r2, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	091b      	lsrs	r3, r3, #4
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	b2da      	uxtb	r2, r3
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	089b      	lsrs	r3, r3, #2
 800559c:	b2db      	uxtb	r3, r3
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	085b      	lsrs	r3, r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005642:	b5b0      	push	{r4, r5, r7, lr}
 8005644:	b08e      	sub	sp, #56	; 0x38
 8005646:	af04      	add	r7, sp, #16
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800564c:	2300      	movs	r3, #0
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2203      	movs	r2, #3
 8005654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565c:	2b03      	cmp	r3, #3
 800565e:	d02e      	beq.n	80056be <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005666:	d106      	bne.n	8005676 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	639a      	str	r2, [r3, #56]	; 0x38
 8005674:	e029      	b.n	80056ca <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800567c:	d10a      	bne.n	8005694 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fb28 	bl	8005cd4 <SD_WideBus_Enable>
 8005684:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	431a      	orrs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	639a      	str	r2, [r3, #56]	; 0x38
 8005692:	e01a      	b.n	80056ca <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fb67 	bl	8005d6e <SD_WideBus_Disable>
 80056a0:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	639a      	str	r2, [r3, #56]	; 0x38
 80056ae:	e00c      	b.n	80056ca <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38
 80056bc:	e005      	b.n	80056ca <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80056da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e024      	b.n	8005732 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681d      	ldr	r5, [r3, #0]
 800570e:	466c      	mov	r4, sp
 8005710:	f107 0318 	add.w	r3, r7, #24
 8005714:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005718:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800571c:	f107 030c 	add.w	r3, r7, #12
 8005720:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005722:	4628      	mov	r0, r5
 8005724:	f001 fc74 	bl	8007010 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3728      	adds	r7, #40	; 0x28
 8005736:	46bd      	mov	sp, r7
 8005738:	bdb0      	pop	{r4, r5, r7, pc}

0800573a <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b086      	sub	sp, #24
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8005742:	2304      	movs	r3, #4
 8005744:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005746:	2300      	movs	r3, #0
 8005748:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800574e:	f107 030c 	add.w	r3, r7, #12
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fa93 	bl	8005c80 <SD_SendStatus>
 800575a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	0a5b      	lsrs	r3, r3, #9
 8005772:	b2db      	uxtb	r3, r3
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800577a:	7dfb      	ldrb	r3, [r7, #23]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057a0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80057a2:	bf00      	nop
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b084      	sub	sp, #16
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80057bc:	2300      	movs	r3, #0
 80057be:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c4:	2b82      	cmp	r3, #130	; 0x82
 80057c6:	d111      	bne.n	80057ec <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f001 fdb1 	bl	8007334 <SDMMC_CmdStopTransfer>
 80057d2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d008      	beq.n	80057ec <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	431a      	orrs	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f7ff fccc 	bl	8005184 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0208 	bic.w	r2, r2, #8
 80057fa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005804:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f007 fbe6 	bl	800cfe0 <HAL_SD_RxCpltCallback>
#endif
}
 8005814:	bf00      	nop
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005830:	2b01      	cmp	r3, #1
 8005832:	d004      	beq.n	800583e <SD_DMAError+0x22>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583a:	2b01      	cmp	r3, #1
 800583c:	d12c      	bne.n	8005898 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005846:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005856:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7ff ff68 	bl	800573a <HAL_SD_GetCardState>
 800586a:	4603      	mov	r3, r0
 800586c:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800586e:	7afb      	ldrb	r3, [r7, #11]
 8005870:	2b06      	cmp	r3, #6
 8005872:	d002      	beq.n	800587a <SD_DMAError+0x5e>
 8005874:	7afb      	ldrb	r3, [r7, #11]
 8005876:	2b05      	cmp	r3, #5
 8005878:	d10a      	bne.n	8005890 <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4618      	mov	r0, r3
 8005880:	f001 fd58 	bl	8007334 <SDMMC_CmdStopTransfer>
 8005884:	4602      	mov	r2, r0
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	431a      	orrs	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f7ff fc73 	bl	8005184 <HAL_SD_ErrorCallback>
#endif
}
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b084      	sub	sp, #16
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d127      	bne.n	800591a <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f7ff ff35 	bl	800573a <HAL_SD_GetCardState>
 80058d0:	4603      	mov	r3, r0
 80058d2:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80058e2:	7afb      	ldrb	r3, [r7, #11]
 80058e4:	2b06      	cmp	r3, #6
 80058e6:	d002      	beq.n	80058ee <SD_DMATxAbort+0x48>
 80058e8:	7afb      	ldrb	r3, [r7, #11]
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d115      	bne.n	800591a <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f001 fd1e 	bl	8007334 <SDMMC_CmdStopTransfer>
 80058f8:	4602      	mov	r2, r0
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	431a      	orrs	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f007 fb53 	bl	800cfb8 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8005912:	e002      	b.n	800591a <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f7ff fc35 	bl	8005184 <HAL_SD_ErrorCallback>
}
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d127      	bne.n	8005996 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f7ff fef7 	bl	800573a <HAL_SD_GetCardState>
 800594c:	4603      	mov	r3, r0
 800594e:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800595e:	7afb      	ldrb	r3, [r7, #11]
 8005960:	2b06      	cmp	r3, #6
 8005962:	d002      	beq.n	800596a <SD_DMARxAbort+0x48>
 8005964:	7afb      	ldrb	r3, [r7, #11]
 8005966:	2b05      	cmp	r3, #5
 8005968:	d115      	bne.n	8005996 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f001 fce0 	bl	8007334 <SDMMC_CmdStopTransfer>
 8005974:	4602      	mov	r2, r0
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	431a      	orrs	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f007 fb15 	bl	800cfb8 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800598e:	e002      	b.n	8005996 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff fbf7 	bl	8005184 <HAL_SD_ErrorCallback>
}
 8005996:	bf00      	nop
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800599e:	b5b0      	push	{r4, r5, r7, lr}
 80059a0:	b094      	sub	sp, #80	; 0x50
 80059a2:	af04      	add	r7, sp, #16
 80059a4:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80059a6:	2300      	movs	r3, #0
 80059a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 80059aa:	2301      	movs	r3, #1
 80059ac:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 fb83 	bl	80070be <SDIO_GetPowerState>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d102      	bne.n	80059c4 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80059be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80059c2:	e0b1      	b.n	8005b28 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d02f      	beq.n	8005a2c <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f001 fdc9 	bl	8007568 <SDMMC_CmdSendCID>
 80059d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80059d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <SD_InitCard+0x44>
    {
      return errorstate;
 80059de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e0:	e0a2      	b.n	8005b28 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2100      	movs	r1, #0
 80059e8:	4618      	mov	r0, r3
 80059ea:	f001 fbad 	bl	8007148 <SDIO_GetResponse>
 80059ee:	4602      	mov	r2, r0
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2104      	movs	r1, #4
 80059fa:	4618      	mov	r0, r3
 80059fc:	f001 fba4 	bl	8007148 <SDIO_GetResponse>
 8005a00:	4602      	mov	r2, r0
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2108      	movs	r1, #8
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f001 fb9b 	bl	8007148 <SDIO_GetResponse>
 8005a12:	4602      	mov	r2, r0
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	210c      	movs	r1, #12
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f001 fb92 	bl	8007148 <SDIO_GetResponse>
 8005a24:	4602      	mov	r2, r0
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d00d      	beq.n	8005a50 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f107 020e 	add.w	r2, r7, #14
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f001 fdd3 	bl	80075ea <SDMMC_CmdSetRelAdd>
 8005a44:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <SD_InitCard+0xb2>
    {
      return errorstate;
 8005a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4e:	e06b      	b.n	8005b28 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d036      	beq.n	8005ac6 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005a58:	89fb      	ldrh	r3, [r7, #14]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a68:	041b      	lsls	r3, r3, #16
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	f001 fd9b 	bl	80075a8 <SDMMC_CmdSendCSD>
 8005a72:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <SD_InitCard+0xe0>
    {
      return errorstate;
 8005a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a7c:	e054      	b.n	8005b28 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2100      	movs	r1, #0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 fb5f 	bl	8007148 <SDIO_GetResponse>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2104      	movs	r1, #4
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 fb56 	bl	8007148 <SDIO_GetResponse>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2108      	movs	r1, #8
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f001 fb4d 	bl	8007148 <SDIO_GetResponse>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	210c      	movs	r1, #12
 8005aba:	4618      	mov	r0, r3
 8005abc:	f001 fb44 	bl	8007148 <SDIO_GetResponse>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2104      	movs	r1, #4
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 fb3b 	bl	8007148 <SDIO_GetResponse>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	0d1a      	lsrs	r2, r3, #20
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8005ada:	f107 0310 	add.w	r3, r7, #16
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff fb59 	bl	8005198 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6819      	ldr	r1, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aee:	041b      	lsls	r3, r3, #16
 8005af0:	f04f 0400 	mov.w	r4, #0
 8005af4:	461a      	mov	r2, r3
 8005af6:	4623      	mov	r3, r4
 8005af8:	4608      	mov	r0, r1
 8005afa:	f001 fc3f 	bl	800737c <SDMMC_CmdSelDesel>
 8005afe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <SD_InitCard+0x16c>
  {
    return errorstate;
 8005b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b08:	e00e      	b.n	8005b28 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681d      	ldr	r5, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	466c      	mov	r4, sp
 8005b12:	f103 0210 	add.w	r2, r3, #16
 8005b16:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b20:	4628      	mov	r0, r5
 8005b22:	f001 fa75 	bl	8007010 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3740      	adds	r7, #64	; 0x40
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bdb0      	pop	{r4, r5, r7, pc}

08005b30 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	2300      	movs	r3, #0
 8005b42:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 fc3a 	bl	80073c6 <SDMMC_CmdGoIdleState>
 8005b52:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <SD_PowerON+0x2e>
  {
    return errorstate;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	e08c      	b.n	8005c78 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 fc4f 	bl	8007406 <SDMMC_CmdOperCond>
 8005b68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d03d      	beq.n	8005bec <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8005b76:	e032      	b.n	8005bde <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	60ba      	str	r2, [r7, #8]
 8005b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d102      	bne.n	8005b8c <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005b86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b8a:	e075      	b.n	8005c78 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2100      	movs	r1, #0
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 fc58 	bl	8007448 <SDMMC_CmdAppCommand>
 8005b98:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ba0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ba4:	e068      	b.n	8005c78 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2100      	movs	r1, #0
 8005bac:	4618      	mov	r0, r3
 8005bae:	f001 fc6f 	bl	8007490 <SDMMC_CmdAppOperCommand>
 8005bb2:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005bba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005bbe:	e05b      	b.n	8005c78 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 fabe 	bl	8007148 <SDIO_GetResponse>
 8005bcc:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	0fdb      	lsrs	r3, r3, #31
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <SD_PowerON+0xaa>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <SD_PowerON+0xac>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0c9      	beq.n	8005b78 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	645a      	str	r2, [r3, #68]	; 0x44
 8005bea:	e044      	b.n	8005c76 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8005bf2:	e031      	b.n	8005c58 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	60ba      	str	r2, [r7, #8]
 8005bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d102      	bne.n	8005c08 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005c02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c06:	e037      	b.n	8005c78 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 fc1a 	bl	8007448 <SDMMC_CmdAppCommand>
 8005c14:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <SD_PowerON+0xf0>
      {
        return errorstate;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	e02b      	b.n	8005c78 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f001 fc31 	bl	8007490 <SDMMC_CmdAppOperCommand>
 8005c2e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <SD_PowerON+0x10a>
      {
        return errorstate;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	e01e      	b.n	8005c78 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2100      	movs	r1, #0
 8005c40:	4618      	mov	r0, r3
 8005c42:	f001 fa81 	bl	8007148 <SDIO_GetResponse>
 8005c46:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	0fdb      	lsrs	r3, r3, #31
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <SD_PowerON+0x124>
 8005c50:	2301      	movs	r3, #1
 8005c52:	e000      	b.n	8005c56 <SD_PowerON+0x126>
 8005c54:	2300      	movs	r3, #0
 8005c56:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0ca      	beq.n	8005bf4 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	645a      	str	r2, [r3, #68]	; 0x44
 8005c6e:	e002      	b.n	8005c76 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d102      	bne.n	8005c9a <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8005c94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c98:	e018      	b.n	8005ccc <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca2:	041b      	lsls	r3, r3, #16
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	f001 fcc2 	bl	8007630 <SDMMC_CmdSendStatus>
 8005cac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <SD_SendStatus+0x38>
  {
    return errorstate;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	e009      	b.n	8005ccc <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 fa42 	bl	8007148 <SDIO_GetResponse>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2100      	movs	r1, #0
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 fa2a 	bl	8007148 <SDIO_GetResponse>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cfe:	d102      	bne.n	8005d06 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005d00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d04:	e02f      	b.n	8005d66 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005d06:	f107 030c 	add.w	r3, r7, #12
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f87b 	bl	8005e08 <SD_FindSCR>
 8005d12:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	e023      	b.n	8005d66 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01c      	beq.n	8005d62 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d30:	041b      	lsls	r3, r3, #16
 8005d32:	4619      	mov	r1, r3
 8005d34:	4610      	mov	r0, r2
 8005d36:	f001 fb87 	bl	8007448 <SDMMC_CmdAppCommand>
 8005d3a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	e00f      	b.n	8005d66 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2102      	movs	r1, #2
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 fbc4 	bl	80074da <SDMMC_CmdBusWidth>
 8005d52:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	e003      	b.n	8005d66 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	e001      	b.n	8005d66 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b086      	sub	sp, #24
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2100      	movs	r1, #0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f001 f9dd 	bl	8007148 <SDIO_GetResponse>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d98:	d102      	bne.n	8005da0 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005d9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d9e:	e02f      	b.n	8005e00 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005da0:	f107 030c 	add.w	r3, r7, #12
 8005da4:	4619      	mov	r1, r3
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f82e 	bl	8005e08 <SD_FindSCR>
 8005dac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	e023      	b.n	8005e00 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d01c      	beq.n	8005dfc <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dca:	041b      	lsls	r3, r3, #16
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	f001 fb3a 	bl	8007448 <SDMMC_CmdAppCommand>
 8005dd4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	e00f      	b.n	8005e00 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2100      	movs	r1, #0
 8005de6:	4618      	mov	r0, r3
 8005de8:	f001 fb77 	bl	80074da <SDMMC_CmdBusWidth>
 8005dec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	e003      	b.n	8005e00 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	e001      	b.n	8005e00 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005dfc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005e08:	b590      	push	{r4, r7, lr}
 8005e0a:	b08f      	sub	sp, #60	; 0x3c
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8005e16:	f7fb fcbb 	bl	8001790 <HAL_GetTick>
 8005e1a:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	2300      	movs	r3, #0
 8005e26:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2108      	movs	r1, #8
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f001 f9cb 	bl	80071ca <SDMMC_CmdBlockLength>
 8005e34:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	e0a8      	b.n	8005f92 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e48:	041b      	lsls	r3, r3, #16
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	f001 fafb 	bl	8007448 <SDMMC_CmdAppCommand>
 8005e52:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8005e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <SD_FindSCR+0x56>
  {
    return errorstate;
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5c:	e099      	b.n	8005f92 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e62:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8005e64:	2308      	movs	r3, #8
 8005e66:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005e68:	2330      	movs	r3, #48	; 0x30
 8005e6a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005e74:	2301      	movs	r3, #1
 8005e76:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f107 0214 	add.w	r2, r7, #20
 8005e80:	4611      	mov	r1, r2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 f975 	bl	8007172 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f001 fb48 	bl	8007522 <SDMMC_CmdSendSCR>
 8005e92:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d022      	beq.n	8005ee0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	e079      	b.n	8005f92 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00e      	beq.n	8005eca <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6819      	ldr	r1, [r3, #0]
 8005eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	f107 020c 	add.w	r2, r7, #12
 8005eb8:	18d4      	adds	r4, r2, r3
 8005eba:	4608      	mov	r0, r1
 8005ebc:	f001 f8d3 	bl	8007066 <SDIO_ReadFIFO>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	6023      	str	r3, [r4, #0]
      index++;
 8005ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005eca:	f7fb fc61 	bl	8001790 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d102      	bne.n	8005ee0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005eda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ede:	e058      	b.n	8005f92 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ee6:	f240 432a 	movw	r3, #1066	; 0x42a
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0d6      	beq.n	8005e9e <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef6:	f003 0308 	and.w	r3, r3, #8
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2208      	movs	r2, #8
 8005f04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005f06:	2308      	movs	r3, #8
 8005f08:	e043      	b.n	8005f92 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d005      	beq.n	8005f24 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f20:	2302      	movs	r3, #2
 8005f22:	e036      	b.n	8005f92 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d005      	beq.n	8005f3e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2220      	movs	r2, #32
 8005f38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8005f3a:	2320      	movs	r3, #32
 8005f3c:	e029      	b.n	8005f92 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005f46:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	061a      	lsls	r2, r3, #24
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	021b      	lsls	r3, r3, #8
 8005f50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f54:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	0a1b      	lsrs	r3, r3, #8
 8005f5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8005f5e:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8005f6a:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8005f6c:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	061a      	lsls	r2, r3, #24
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f7a:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	0a1b      	lsrs	r3, r3, #8
 8005f80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8005f84:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	0e1b      	lsrs	r3, r3, #24
 8005f8a:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	373c      	adds	r7, #60	; 0x3c
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd90      	pop	{r4, r7, pc}

08005f9a <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005f9a:	b590      	push	{r4, r7, lr}
 8005f9c:	b085      	sub	sp, #20
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005faa:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	e00d      	b.n	8005fce <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6819      	ldr	r1, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	18d4      	adds	r4, r2, r3
 8005fbe:	4608      	mov	r0, r1
 8005fc0:	f001 f851 	bl	8007066 <SDIO_ReadFIFO>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b07      	cmp	r3, #7
 8005fd2:	d9ee      	bls.n	8005fb2 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd8:	f103 0220 	add.w	r2, r3, #32
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd90      	pop	{r4, r7, pc}

08005fea <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	e00b      	b.n	800601a <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	4413      	add	r3, r2
 800600e:	4619      	mov	r1, r3
 8006010:	f001 f836 	bl	8007080 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3301      	adds	r3, #1
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b07      	cmp	r3, #7
 800601e:	d9f0      	bls.n	8006002 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	f103 0220 	add.w	r2, r3, #32
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e056      	b.n	80060f6 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f008 fa30 	bl	800e4c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	431a      	orrs	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	431a      	orrs	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	431a      	orrs	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060a4:	431a      	orrs	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	ea42 0103 	orr.w	r1, r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	0c1b      	lsrs	r3, r3, #16
 80060c6:	f003 0104 	and.w	r1, r3, #4
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e01d      	b.n	800614c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d106      	bne.n	800612a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f008 fa17 	bl	800e558 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2202      	movs	r2, #2
 800612e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3304      	adds	r3, #4
 800613a:	4619      	mov	r1, r3
 800613c:	4610      	mov	r0, r2
 800613e:	f000 f9e1 	bl	8006504 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2b06      	cmp	r3, #6
 8006174:	d007      	beq.n	8006186 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f042 0201 	orr.w	r2, r2, #1
 8006184:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e01d      	b.n	80061ea <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f815 	bl	80061f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4619      	mov	r1, r3
 80061da:	4610      	mov	r0, r2
 80061dc:	f000 f992 	bl	8006504 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
	...

08006208 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800621a:	2b01      	cmp	r3, #1
 800621c:	d101      	bne.n	8006222 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800621e:	2302      	movs	r3, #2
 8006220:	e0b4      	b.n	800638c <HAL_TIM_PWM_ConfigChannel+0x184>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2202      	movs	r2, #2
 800622e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b0c      	cmp	r3, #12
 8006236:	f200 809f 	bhi.w	8006378 <HAL_TIM_PWM_ConfigChannel+0x170>
 800623a:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006240:	08006275 	.word	0x08006275
 8006244:	08006379 	.word	0x08006379
 8006248:	08006379 	.word	0x08006379
 800624c:	08006379 	.word	0x08006379
 8006250:	080062b5 	.word	0x080062b5
 8006254:	08006379 	.word	0x08006379
 8006258:	08006379 	.word	0x08006379
 800625c:	08006379 	.word	0x08006379
 8006260:	080062f7 	.word	0x080062f7
 8006264:	08006379 	.word	0x08006379
 8006268:	08006379 	.word	0x08006379
 800626c:	08006379 	.word	0x08006379
 8006270:	08006337 	.word	0x08006337
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	4618      	mov	r0, r3
 800627c:	f000 f9e2 	bl	8006644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699a      	ldr	r2, [r3, #24]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0208 	orr.w	r2, r2, #8
 800628e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0204 	bic.w	r2, r2, #4
 800629e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6999      	ldr	r1, [r3, #24]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	691a      	ldr	r2, [r3, #16]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	619a      	str	r2, [r3, #24]
      break;
 80062b2:	e062      	b.n	800637a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fa32 	bl	8006724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6999      	ldr	r1, [r3, #24]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	021a      	lsls	r2, r3, #8
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	619a      	str	r2, [r3, #24]
      break;
 80062f4:	e041      	b.n	800637a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fa87 	bl	8006810 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	69da      	ldr	r2, [r3, #28]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0208 	orr.w	r2, r2, #8
 8006310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69da      	ldr	r2, [r3, #28]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0204 	bic.w	r2, r2, #4
 8006320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69d9      	ldr	r1, [r3, #28]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	61da      	str	r2, [r3, #28]
      break;
 8006334:	e021      	b.n	800637a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68b9      	ldr	r1, [r7, #8]
 800633c:	4618      	mov	r0, r3
 800633e:	f000 fadb 	bl	80068f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69da      	ldr	r2, [r3, #28]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69da      	ldr	r2, [r3, #28]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69d9      	ldr	r1, [r3, #28]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	021a      	lsls	r2, r3, #8
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	61da      	str	r2, [r3, #28]
      break;
 8006376:	e000      	b.n	800637a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006378:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_TIM_ConfigClockSource+0x18>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e0a6      	b.n	80064fa <HAL_TIM_ConfigClockSource+0x166>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b40      	cmp	r3, #64	; 0x40
 80063e2:	d067      	beq.n	80064b4 <HAL_TIM_ConfigClockSource+0x120>
 80063e4:	2b40      	cmp	r3, #64	; 0x40
 80063e6:	d80b      	bhi.n	8006400 <HAL_TIM_ConfigClockSource+0x6c>
 80063e8:	2b10      	cmp	r3, #16
 80063ea:	d073      	beq.n	80064d4 <HAL_TIM_ConfigClockSource+0x140>
 80063ec:	2b10      	cmp	r3, #16
 80063ee:	d802      	bhi.n	80063f6 <HAL_TIM_ConfigClockSource+0x62>
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d06f      	beq.n	80064d4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80063f4:	e078      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	d06c      	beq.n	80064d4 <HAL_TIM_ConfigClockSource+0x140>
 80063fa:	2b30      	cmp	r3, #48	; 0x30
 80063fc:	d06a      	beq.n	80064d4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80063fe:	e073      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006400:	2b70      	cmp	r3, #112	; 0x70
 8006402:	d00d      	beq.n	8006420 <HAL_TIM_ConfigClockSource+0x8c>
 8006404:	2b70      	cmp	r3, #112	; 0x70
 8006406:	d804      	bhi.n	8006412 <HAL_TIM_ConfigClockSource+0x7e>
 8006408:	2b50      	cmp	r3, #80	; 0x50
 800640a:	d033      	beq.n	8006474 <HAL_TIM_ConfigClockSource+0xe0>
 800640c:	2b60      	cmp	r3, #96	; 0x60
 800640e:	d041      	beq.n	8006494 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006410:	e06a      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006416:	d066      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0x152>
 8006418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800641c:	d017      	beq.n	800644e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800641e:	e063      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6818      	ldr	r0, [r3, #0]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	6899      	ldr	r1, [r3, #8]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f000 fb32 	bl	8006a98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006442:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	609a      	str	r2, [r3, #8]
      break;
 800644c:	e04c      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6899      	ldr	r1, [r3, #8]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f000 fb1b 	bl	8006a98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006470:	609a      	str	r2, [r3, #8]
      break;
 8006472:	e039      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	6859      	ldr	r1, [r3, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	461a      	mov	r2, r3
 8006482:	f000 fa8f 	bl	80069a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2150      	movs	r1, #80	; 0x50
 800648c:	4618      	mov	r0, r3
 800648e:	f000 fae8 	bl	8006a62 <TIM_ITRx_SetConfig>
      break;
 8006492:	e029      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	6859      	ldr	r1, [r3, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	461a      	mov	r2, r3
 80064a2:	f000 faae 	bl	8006a02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2160      	movs	r1, #96	; 0x60
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fad8 	bl	8006a62 <TIM_ITRx_SetConfig>
      break;
 80064b2:	e019      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	6859      	ldr	r1, [r3, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	461a      	mov	r2, r3
 80064c2:	f000 fa6f 	bl	80069a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2140      	movs	r1, #64	; 0x40
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fac8 	bl	8006a62 <TIM_ITRx_SetConfig>
      break;
 80064d2:	e009      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f000 fabf 	bl	8006a62 <TIM_ITRx_SetConfig>
      break;
 80064e4:	e000      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80064e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a40      	ldr	r2, [pc, #256]	; (8006618 <TIM_Base_SetConfig+0x114>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d013      	beq.n	8006544 <TIM_Base_SetConfig+0x40>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006522:	d00f      	beq.n	8006544 <TIM_Base_SetConfig+0x40>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a3d      	ldr	r2, [pc, #244]	; (800661c <TIM_Base_SetConfig+0x118>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00b      	beq.n	8006544 <TIM_Base_SetConfig+0x40>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a3c      	ldr	r2, [pc, #240]	; (8006620 <TIM_Base_SetConfig+0x11c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d007      	beq.n	8006544 <TIM_Base_SetConfig+0x40>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a3b      	ldr	r2, [pc, #236]	; (8006624 <TIM_Base_SetConfig+0x120>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d003      	beq.n	8006544 <TIM_Base_SetConfig+0x40>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a3a      	ldr	r2, [pc, #232]	; (8006628 <TIM_Base_SetConfig+0x124>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d108      	bne.n	8006556 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a2f      	ldr	r2, [pc, #188]	; (8006618 <TIM_Base_SetConfig+0x114>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d02b      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006564:	d027      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a2c      	ldr	r2, [pc, #176]	; (800661c <TIM_Base_SetConfig+0x118>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d023      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a2b      	ldr	r2, [pc, #172]	; (8006620 <TIM_Base_SetConfig+0x11c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d01f      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a2a      	ldr	r2, [pc, #168]	; (8006624 <TIM_Base_SetConfig+0x120>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01b      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a29      	ldr	r2, [pc, #164]	; (8006628 <TIM_Base_SetConfig+0x124>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d017      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a28      	ldr	r2, [pc, #160]	; (800662c <TIM_Base_SetConfig+0x128>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d013      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a27      	ldr	r2, [pc, #156]	; (8006630 <TIM_Base_SetConfig+0x12c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00f      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a26      	ldr	r2, [pc, #152]	; (8006634 <TIM_Base_SetConfig+0x130>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00b      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a25      	ldr	r2, [pc, #148]	; (8006638 <TIM_Base_SetConfig+0x134>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d007      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a24      	ldr	r2, [pc, #144]	; (800663c <TIM_Base_SetConfig+0x138>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d003      	beq.n	80065b6 <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a23      	ldr	r2, [pc, #140]	; (8006640 <TIM_Base_SetConfig+0x13c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d108      	bne.n	80065c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a0a      	ldr	r2, [pc, #40]	; (8006618 <TIM_Base_SetConfig+0x114>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d003      	beq.n	80065fc <TIM_Base_SetConfig+0xf8>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a0c      	ldr	r2, [pc, #48]	; (8006628 <TIM_Base_SetConfig+0x124>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d103      	bne.n	8006604 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	615a      	str	r2, [r3, #20]
}
 800660a:	bf00      	nop
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	40010000 	.word	0x40010000
 800661c:	40000400 	.word	0x40000400
 8006620:	40000800 	.word	0x40000800
 8006624:	40000c00 	.word	0x40000c00
 8006628:	40010400 	.word	0x40010400
 800662c:	40014000 	.word	0x40014000
 8006630:	40014400 	.word	0x40014400
 8006634:	40014800 	.word	0x40014800
 8006638:	40001800 	.word	0x40001800
 800663c:	40001c00 	.word	0x40001c00
 8006640:	40002000 	.word	0x40002000

08006644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f023 0201 	bic.w	r2, r3, #1
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 0303 	bic.w	r3, r3, #3
 800667a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f023 0302 	bic.w	r3, r3, #2
 800668c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a20      	ldr	r2, [pc, #128]	; (800671c <TIM_OC1_SetConfig+0xd8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d003      	beq.n	80066a8 <TIM_OC1_SetConfig+0x64>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a1f      	ldr	r2, [pc, #124]	; (8006720 <TIM_OC1_SetConfig+0xdc>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d10c      	bne.n	80066c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f023 0308 	bic.w	r3, r3, #8
 80066ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f023 0304 	bic.w	r3, r3, #4
 80066c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a15      	ldr	r2, [pc, #84]	; (800671c <TIM_OC1_SetConfig+0xd8>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d003      	beq.n	80066d2 <TIM_OC1_SetConfig+0x8e>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a14      	ldr	r2, [pc, #80]	; (8006720 <TIM_OC1_SetConfig+0xdc>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d111      	bne.n	80066f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	621a      	str	r2, [r3, #32]
}
 8006710:	bf00      	nop
 8006712:	371c      	adds	r7, #28
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	40010000 	.word	0x40010000
 8006720:	40010400 	.word	0x40010400

08006724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f023 0210 	bic.w	r2, r3, #16
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800675a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	021b      	lsls	r3, r3, #8
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 0320 	bic.w	r3, r3, #32
 800676e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	4313      	orrs	r3, r2
 800677a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a22      	ldr	r2, [pc, #136]	; (8006808 <TIM_OC2_SetConfig+0xe4>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <TIM_OC2_SetConfig+0x68>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a21      	ldr	r2, [pc, #132]	; (800680c <TIM_OC2_SetConfig+0xe8>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d10d      	bne.n	80067a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	011b      	lsls	r3, r3, #4
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a17      	ldr	r2, [pc, #92]	; (8006808 <TIM_OC2_SetConfig+0xe4>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d003      	beq.n	80067b8 <TIM_OC2_SetConfig+0x94>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a16      	ldr	r2, [pc, #88]	; (800680c <TIM_OC2_SetConfig+0xe8>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d113      	bne.n	80067e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	621a      	str	r2, [r3, #32]
}
 80067fa:	bf00      	nop
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40010000 	.word	0x40010000
 800680c:	40010400 	.word	0x40010400

08006810 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0303 	bic.w	r3, r3, #3
 8006846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	021b      	lsls	r3, r3, #8
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	4313      	orrs	r3, r2
 8006864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a21      	ldr	r2, [pc, #132]	; (80068f0 <TIM_OC3_SetConfig+0xe0>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d003      	beq.n	8006876 <TIM_OC3_SetConfig+0x66>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a20      	ldr	r2, [pc, #128]	; (80068f4 <TIM_OC3_SetConfig+0xe4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d10d      	bne.n	8006892 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800687c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a16      	ldr	r2, [pc, #88]	; (80068f0 <TIM_OC3_SetConfig+0xe0>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d003      	beq.n	80068a2 <TIM_OC3_SetConfig+0x92>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a15      	ldr	r2, [pc, #84]	; (80068f4 <TIM_OC3_SetConfig+0xe4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d113      	bne.n	80068ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	621a      	str	r2, [r3, #32]
}
 80068e4:	bf00      	nop
 80068e6:	371c      	adds	r7, #28
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	40010000 	.word	0x40010000
 80068f4:	40010400 	.word	0x40010400

080068f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800692e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	021b      	lsls	r3, r3, #8
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	031b      	lsls	r3, r3, #12
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	4313      	orrs	r3, r2
 800694e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a12      	ldr	r2, [pc, #72]	; (800699c <TIM_OC4_SetConfig+0xa4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d003      	beq.n	8006960 <TIM_OC4_SetConfig+0x68>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a11      	ldr	r2, [pc, #68]	; (80069a0 <TIM_OC4_SetConfig+0xa8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d109      	bne.n	8006974 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	019b      	lsls	r3, r3, #6
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	621a      	str	r2, [r3, #32]
}
 800698e:	bf00      	nop
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40010000 	.word	0x40010000
 80069a0:	40010400 	.word	0x40010400

080069a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	f023 0201 	bic.w	r2, r3, #1
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f023 030a 	bic.w	r3, r3, #10
 80069e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	621a      	str	r2, [r3, #32]
}
 80069f6:	bf00      	nop
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b087      	sub	sp, #28
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	f023 0210 	bic.w	r2, r3, #16
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	031b      	lsls	r3, r3, #12
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	011b      	lsls	r3, r3, #4
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	621a      	str	r2, [r3, #32]
}
 8006a56:	bf00      	nop
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b085      	sub	sp, #20
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	f043 0307 	orr.w	r3, r3, #7
 8006a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	609a      	str	r2, [r3, #8]
}
 8006a8c:	bf00      	nop
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	021a      	lsls	r2, r3, #8
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	431a      	orrs	r2, r3
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	609a      	str	r2, [r3, #8]
}
 8006acc:	bf00      	nop
 8006ace:	371c      	adds	r7, #28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e032      	b.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b28:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b082      	sub	sp, #8
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e03f      	b.n	8006bf4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d106      	bne.n	8006b8e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f007 fd93 	bl	800e6b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2224      	movs	r2, #36	; 0x24
 8006b92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68da      	ldr	r2, [r3, #12]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ba4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f828 	bl	8006bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691a      	ldr	r2, [r3, #16]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695a      	ldr	r2, [r3, #20]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bda:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2220      	movs	r2, #32
 8006be6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bfc:	b5b0      	push	{r4, r5, r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68da      	ldr	r2, [r3, #12]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006c3c:	f023 030c 	bic.w	r3, r3, #12
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6812      	ldr	r2, [r2, #0]
 8006c44:	68f9      	ldr	r1, [r7, #12]
 8006c46:	430b      	orrs	r3, r1
 8006c48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	699a      	ldr	r2, [r3, #24]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c68:	f040 80e4 	bne.w	8006e34 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4aab      	ldr	r2, [pc, #684]	; (8006f20 <UART_SetConfig+0x324>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d004      	beq.n	8006c80 <UART_SetConfig+0x84>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4aaa      	ldr	r2, [pc, #680]	; (8006f24 <UART_SetConfig+0x328>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d16c      	bne.n	8006d5a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006c80:	f7fd fad2 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 8006c84:	4602      	mov	r2, r0
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009a      	lsls	r2, r3, #2
 8006c8e:	441a      	add	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c9a:	4aa3      	ldr	r2, [pc, #652]	; (8006f28 <UART_SetConfig+0x32c>)
 8006c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca0:	095b      	lsrs	r3, r3, #5
 8006ca2:	011c      	lsls	r4, r3, #4
 8006ca4:	f7fd fac0 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	4613      	mov	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	009a      	lsls	r2, r3, #2
 8006cb2:	441a      	add	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	fbb2 f5f3 	udiv	r5, r2, r3
 8006cbe:	f7fd fab3 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	009a      	lsls	r2, r3, #2
 8006ccc:	441a      	add	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd8:	4a93      	ldr	r2, [pc, #588]	; (8006f28 <UART_SetConfig+0x32c>)
 8006cda:	fba2 2303 	umull	r2, r3, r2, r3
 8006cde:	095b      	lsrs	r3, r3, #5
 8006ce0:	2264      	movs	r2, #100	; 0x64
 8006ce2:	fb02 f303 	mul.w	r3, r2, r3
 8006ce6:	1aeb      	subs	r3, r5, r3
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	3332      	adds	r3, #50	; 0x32
 8006cec:	4a8e      	ldr	r2, [pc, #568]	; (8006f28 <UART_SetConfig+0x32c>)
 8006cee:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf2:	095b      	lsrs	r3, r3, #5
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cfa:	441c      	add	r4, r3
 8006cfc:	f7fd fa94 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 8006d00:	4602      	mov	r2, r0
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	009a      	lsls	r2, r3, #2
 8006d0a:	441a      	add	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	fbb2 f5f3 	udiv	r5, r2, r3
 8006d16:	f7fd fa87 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	009a      	lsls	r2, r3, #2
 8006d24:	441a      	add	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d30:	4a7d      	ldr	r2, [pc, #500]	; (8006f28 <UART_SetConfig+0x32c>)
 8006d32:	fba2 2303 	umull	r2, r3, r2, r3
 8006d36:	095b      	lsrs	r3, r3, #5
 8006d38:	2264      	movs	r2, #100	; 0x64
 8006d3a:	fb02 f303 	mul.w	r3, r2, r3
 8006d3e:	1aeb      	subs	r3, r5, r3
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	3332      	adds	r3, #50	; 0x32
 8006d44:	4a78      	ldr	r2, [pc, #480]	; (8006f28 <UART_SetConfig+0x32c>)
 8006d46:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4a:	095b      	lsrs	r3, r3, #5
 8006d4c:	f003 0207 	and.w	r2, r3, #7
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4422      	add	r2, r4
 8006d56:	609a      	str	r2, [r3, #8]
 8006d58:	e154      	b.n	8007004 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006d5a:	f7fd fa51 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	009a      	lsls	r2, r3, #2
 8006d68:	441a      	add	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d74:	4a6c      	ldr	r2, [pc, #432]	; (8006f28 <UART_SetConfig+0x32c>)
 8006d76:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7a:	095b      	lsrs	r3, r3, #5
 8006d7c:	011c      	lsls	r4, r3, #4
 8006d7e:	f7fd fa3f 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8006d82:	4602      	mov	r2, r0
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009a      	lsls	r2, r3, #2
 8006d8c:	441a      	add	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	005b      	lsls	r3, r3, #1
 8006d94:	fbb2 f5f3 	udiv	r5, r2, r3
 8006d98:	f7fd fa32 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	009a      	lsls	r2, r3, #2
 8006da6:	441a      	add	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db2:	4a5d      	ldr	r2, [pc, #372]	; (8006f28 <UART_SetConfig+0x32c>)
 8006db4:	fba2 2303 	umull	r2, r3, r2, r3
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	2264      	movs	r2, #100	; 0x64
 8006dbc:	fb02 f303 	mul.w	r3, r2, r3
 8006dc0:	1aeb      	subs	r3, r5, r3
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	3332      	adds	r3, #50	; 0x32
 8006dc6:	4a58      	ldr	r2, [pc, #352]	; (8006f28 <UART_SetConfig+0x32c>)
 8006dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dd4:	441c      	add	r4, r3
 8006dd6:	f7fd fa13 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	009a      	lsls	r2, r3, #2
 8006de4:	441a      	add	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	fbb2 f5f3 	udiv	r5, r2, r3
 8006df0:	f7fd fa06 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8006df4:	4602      	mov	r2, r0
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009a      	lsls	r2, r3, #2
 8006dfe:	441a      	add	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0a:	4a47      	ldr	r2, [pc, #284]	; (8006f28 <UART_SetConfig+0x32c>)
 8006e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e10:	095b      	lsrs	r3, r3, #5
 8006e12:	2264      	movs	r2, #100	; 0x64
 8006e14:	fb02 f303 	mul.w	r3, r2, r3
 8006e18:	1aeb      	subs	r3, r5, r3
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	3332      	adds	r3, #50	; 0x32
 8006e1e:	4a42      	ldr	r2, [pc, #264]	; (8006f28 <UART_SetConfig+0x32c>)
 8006e20:	fba2 2303 	umull	r2, r3, r2, r3
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	f003 0207 	and.w	r2, r3, #7
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4422      	add	r2, r4
 8006e30:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8006e32:	e0e7      	b.n	8007004 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a39      	ldr	r2, [pc, #228]	; (8006f20 <UART_SetConfig+0x324>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d004      	beq.n	8006e48 <UART_SetConfig+0x24c>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a38      	ldr	r2, [pc, #224]	; (8006f24 <UART_SetConfig+0x328>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d171      	bne.n	8006f2c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006e48:	f7fd f9ee 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	4613      	mov	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	009a      	lsls	r2, r3, #2
 8006e56:	441a      	add	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e62:	4a31      	ldr	r2, [pc, #196]	; (8006f28 <UART_SetConfig+0x32c>)
 8006e64:	fba2 2303 	umull	r2, r3, r2, r3
 8006e68:	095b      	lsrs	r3, r3, #5
 8006e6a:	011c      	lsls	r4, r3, #4
 8006e6c:	f7fd f9dc 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 8006e70:	4602      	mov	r2, r0
 8006e72:	4613      	mov	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	009a      	lsls	r2, r3, #2
 8006e7a:	441a      	add	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	fbb2 f5f3 	udiv	r5, r2, r3
 8006e86:	f7fd f9cf 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	009a      	lsls	r2, r3, #2
 8006e94:	441a      	add	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea0:	4a21      	ldr	r2, [pc, #132]	; (8006f28 <UART_SetConfig+0x32c>)
 8006ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	2264      	movs	r2, #100	; 0x64
 8006eaa:	fb02 f303 	mul.w	r3, r2, r3
 8006eae:	1aeb      	subs	r3, r5, r3
 8006eb0:	011b      	lsls	r3, r3, #4
 8006eb2:	3332      	adds	r3, #50	; 0x32
 8006eb4:	4a1c      	ldr	r2, [pc, #112]	; (8006f28 <UART_SetConfig+0x32c>)
 8006eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ec0:	441c      	add	r4, r3
 8006ec2:	f7fd f9b1 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	009a      	lsls	r2, r3, #2
 8006ed0:	441a      	add	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	fbb2 f5f3 	udiv	r5, r2, r3
 8006edc:	f7fd f9a4 	bl	8004228 <HAL_RCC_GetPCLK2Freq>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	009a      	lsls	r2, r3, #2
 8006eea:	441a      	add	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef6:	4a0c      	ldr	r2, [pc, #48]	; (8006f28 <UART_SetConfig+0x32c>)
 8006ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8006efc:	095b      	lsrs	r3, r3, #5
 8006efe:	2264      	movs	r2, #100	; 0x64
 8006f00:	fb02 f303 	mul.w	r3, r2, r3
 8006f04:	1aeb      	subs	r3, r5, r3
 8006f06:	011b      	lsls	r3, r3, #4
 8006f08:	3332      	adds	r3, #50	; 0x32
 8006f0a:	4a07      	ldr	r2, [pc, #28]	; (8006f28 <UART_SetConfig+0x32c>)
 8006f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f10:	095b      	lsrs	r3, r3, #5
 8006f12:	f003 020f 	and.w	r2, r3, #15
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4422      	add	r2, r4
 8006f1c:	609a      	str	r2, [r3, #8]
 8006f1e:	e071      	b.n	8007004 <UART_SetConfig+0x408>
 8006f20:	40011000 	.word	0x40011000
 8006f24:	40011400 	.word	0x40011400
 8006f28:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006f2c:	f7fd f968 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8006f30:	4602      	mov	r2, r0
 8006f32:	4613      	mov	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	009a      	lsls	r2, r3, #2
 8006f3a:	441a      	add	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f46:	4a31      	ldr	r2, [pc, #196]	; (800700c <UART_SetConfig+0x410>)
 8006f48:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4c:	095b      	lsrs	r3, r3, #5
 8006f4e:	011c      	lsls	r4, r3, #4
 8006f50:	f7fd f956 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8006f54:	4602      	mov	r2, r0
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009a      	lsls	r2, r3, #2
 8006f5e:	441a      	add	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	fbb2 f5f3 	udiv	r5, r2, r3
 8006f6a:	f7fd f949 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	4613      	mov	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	009a      	lsls	r2, r3, #2
 8006f78:	441a      	add	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f84:	4a21      	ldr	r2, [pc, #132]	; (800700c <UART_SetConfig+0x410>)
 8006f86:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8a:	095b      	lsrs	r3, r3, #5
 8006f8c:	2264      	movs	r2, #100	; 0x64
 8006f8e:	fb02 f303 	mul.w	r3, r2, r3
 8006f92:	1aeb      	subs	r3, r5, r3
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	3332      	adds	r3, #50	; 0x32
 8006f98:	4a1c      	ldr	r2, [pc, #112]	; (800700c <UART_SetConfig+0x410>)
 8006f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9e:	095b      	lsrs	r3, r3, #5
 8006fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fa4:	441c      	add	r4, r3
 8006fa6:	f7fd f92b 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8006faa:	4602      	mov	r2, r0
 8006fac:	4613      	mov	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	009a      	lsls	r2, r3, #2
 8006fb4:	441a      	add	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	fbb2 f5f3 	udiv	r5, r2, r3
 8006fc0:	f7fd f91e 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	009a      	lsls	r2, r3, #2
 8006fce:	441a      	add	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fda:	4a0c      	ldr	r2, [pc, #48]	; (800700c <UART_SetConfig+0x410>)
 8006fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe0:	095b      	lsrs	r3, r3, #5
 8006fe2:	2264      	movs	r2, #100	; 0x64
 8006fe4:	fb02 f303 	mul.w	r3, r2, r3
 8006fe8:	1aeb      	subs	r3, r5, r3
 8006fea:	011b      	lsls	r3, r3, #4
 8006fec:	3332      	adds	r3, #50	; 0x32
 8006fee:	4a07      	ldr	r2, [pc, #28]	; (800700c <UART_SetConfig+0x410>)
 8006ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff4:	095b      	lsrs	r3, r3, #5
 8006ff6:	f003 020f 	and.w	r2, r3, #15
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4422      	add	r2, r4
 8007000:	609a      	str	r2, [r3, #8]
}
 8007002:	e7ff      	b.n	8007004 <UART_SetConfig+0x408>
 8007004:	bf00      	nop
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bdb0      	pop	{r4, r5, r7, pc}
 800700c:	51eb851f 	.word	0x51eb851f

08007010 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007010:	b084      	sub	sp, #16
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	f107 001c 	add.w	r0, r7, #28
 800701e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007026:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007028:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800702a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800702e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007030:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007032:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007036:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800703a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800704a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	431a      	orrs	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	b004      	add	sp, #16
 8007064:	4770      	bx	lr

08007066 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80070a2:	b480      	push	{r7}
 80070a4:	b083      	sub	sp, #12
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2203      	movs	r2, #3
 80070ae:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0303 	and.w	r3, r3, #3
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80070da:	b480      	push	{r7}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80070f8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80070fe:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007104:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	4313      	orrs	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007114:	f023 030f 	bic.w	r3, r3, #15
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	431a      	orrs	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800712e:	b480      	push	{r7}
 8007130:	b083      	sub	sp, #12
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	b2db      	uxtb	r3, r3
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	3314      	adds	r3, #20
 800715a:	461a      	mov	r2, r3
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	4413      	add	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
}  
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007172:	b480      	push	{r7}
 8007174:	b085      	sub	sp, #20
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007198:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800719e:	431a      	orrs	r2, r3
                       Data->DPSM);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80071a4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	431a      	orrs	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0

}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b088      	sub	sp, #32
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80071d4:	2300      	movs	r3, #0
 80071d6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80071dc:	2310      	movs	r3, #16
 80071de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071e0:	2340      	movs	r3, #64	; 0x40
 80071e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071e4:	2300      	movs	r3, #0
 80071e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071ec:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071ee:	f107 0308 	add.w	r3, r7, #8
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff ff70 	bl	80070da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80071fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80071fe:	2110      	movs	r1, #16
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fa63 	bl	80076cc <SDMMC_GetCmdResp1>
 8007206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007208:	69fb      	ldr	r3, [r7, #28]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3720      	adds	r7, #32
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b088      	sub	sp, #32
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800721c:	2300      	movs	r3, #0
 800721e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007224:	2311      	movs	r3, #17
 8007226:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007228:	2340      	movs	r3, #64	; 0x40
 800722a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007234:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007236:	f107 0308 	add.w	r3, r7, #8
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff ff4c 	bl	80070da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007242:	f241 3288 	movw	r2, #5000	; 0x1388
 8007246:	2111      	movs	r1, #17
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fa3f 	bl	80076cc <SDMMC_GetCmdResp1>
 800724e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007250:	69fb      	ldr	r3, [r7, #28]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3720      	adds	r7, #32
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b088      	sub	sp, #32
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800726c:	2312      	movs	r3, #18
 800726e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007270:	2340      	movs	r3, #64	; 0x40
 8007272:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007274:	2300      	movs	r3, #0
 8007276:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800727c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800727e:	f107 0308 	add.w	r3, r7, #8
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7ff ff28 	bl	80070da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800728a:	f241 3288 	movw	r2, #5000	; 0x1388
 800728e:	2112      	movs	r1, #18
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fa1b 	bl	80076cc <SDMMC_GetCmdResp1>
 8007296:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007298:	69fb      	ldr	r3, [r7, #28]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3720      	adds	r7, #32
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b088      	sub	sp, #32
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80072ac:	2300      	movs	r3, #0
 80072ae:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80072b4:	2318      	movs	r3, #24
 80072b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072b8:	2340      	movs	r3, #64	; 0x40
 80072ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072bc:	2300      	movs	r3, #0
 80072be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072c4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072c6:	f107 0308 	add.w	r3, r7, #8
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f7ff ff04 	bl	80070da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80072d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d6:	2118      	movs	r1, #24
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f9f7 	bl	80076cc <SDMMC_GetCmdResp1>
 80072de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072e0:	69fb      	ldr	r3, [r7, #28]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3720      	adds	r7, #32
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b088      	sub	sp, #32
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80072f4:	2300      	movs	r3, #0
 80072f6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80072fc:	2319      	movs	r3, #25
 80072fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007300:	2340      	movs	r3, #64	; 0x40
 8007302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007304:	2300      	movs	r3, #0
 8007306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800730c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800730e:	f107 0308 	add.w	r3, r7, #8
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7ff fee0 	bl	80070da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800731a:	f241 3288 	movw	r2, #5000	; 0x1388
 800731e:	2119      	movs	r1, #25
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f9d3 	bl	80076cc <SDMMC_GetCmdResp1>
 8007326:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007328:	69fb      	ldr	r3, [r7, #28]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3720      	adds	r7, #32
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800733c:	2300      	movs	r3, #0
 800733e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007344:	230c      	movs	r3, #12
 8007346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007348:	2340      	movs	r3, #64	; 0x40
 800734a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800734c:	2300      	movs	r3, #0
 800734e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007354:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007356:	f107 0308 	add.w	r3, r7, #8
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff febc 	bl	80070da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8007362:	4a05      	ldr	r2, [pc, #20]	; (8007378 <SDMMC_CmdStopTransfer+0x44>)
 8007364:	210c      	movs	r1, #12
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f9b0 	bl	80076cc <SDMMC_GetCmdResp1>
 800736c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800736e:	69fb      	ldr	r3, [r7, #28]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3720      	adds	r7, #32
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	05f5e100 	.word	0x05f5e100

0800737c <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08a      	sub	sp, #40	; 0x28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007388:	2300      	movs	r3, #0
 800738a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007390:	2307      	movs	r3, #7
 8007392:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007394:	2340      	movs	r3, #64	; 0x40
 8007396:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007398:	2300      	movs	r3, #0
 800739a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800739c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073a0:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073a2:	f107 0310 	add.w	r3, r7, #16
 80073a6:	4619      	mov	r1, r3
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f7ff fe96 	bl	80070da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80073ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80073b2:	2107      	movs	r1, #7
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 f989 	bl	80076cc <SDMMC_GetCmdResp1>
 80073ba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3728      	adds	r7, #40	; 0x28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b088      	sub	sp, #32
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80073ce:	2300      	movs	r3, #0
 80073d0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80073da:	2300      	movs	r3, #0
 80073dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073de:	2300      	movs	r3, #0
 80073e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073e6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073e8:	f107 0308 	add.w	r3, r7, #8
 80073ec:	4619      	mov	r1, r3
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7ff fe73 	bl	80070da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f93f 	bl	8007678 <SDMMC_GetCmdError>
 80073fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073fc:	69fb      	ldr	r3, [r7, #28]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3720      	adds	r7, #32
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b088      	sub	sp, #32
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800740e:	2300      	movs	r3, #0
 8007410:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007412:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007416:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007418:	2308      	movs	r3, #8
 800741a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800741c:	2340      	movs	r3, #64	; 0x40
 800741e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007420:	2300      	movs	r3, #0
 8007422:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007428:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800742a:	f107 0308 	add.w	r3, r7, #8
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff fe52 	bl	80070da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fb10 	bl	8007a5c <SDMMC_GetCmdResp7>
 800743c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800743e:	69fb      	ldr	r3, [r7, #28]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3720      	adds	r7, #32
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b088      	sub	sp, #32
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007452:	2300      	movs	r3, #0
 8007454:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800745a:	2337      	movs	r3, #55	; 0x37
 800745c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800745e:	2340      	movs	r3, #64	; 0x40
 8007460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007462:	2300      	movs	r3, #0
 8007464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800746a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800746c:	f107 0308 	add.w	r3, r7, #8
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7ff fe31 	bl	80070da <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007478:	f241 3288 	movw	r2, #5000	; 0x1388
 800747c:	2137      	movs	r1, #55	; 0x37
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f924 	bl	80076cc <SDMMC_GetCmdResp1>
 8007484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007486:	69fb      	ldr	r3, [r7, #28]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3720      	adds	r7, #32
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b088      	sub	sp, #32
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800749a:	2300      	movs	r3, #0
 800749c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80074aa:	2329      	movs	r3, #41	; 0x29
 80074ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074ae:	2340      	movs	r3, #64	; 0x40
 80074b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074b2:	2300      	movs	r3, #0
 80074b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074ba:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074bc:	f107 0308 	add.w	r3, r7, #8
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff fe09 	bl	80070da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fa25 	bl	8007918 <SDMMC_GetCmdResp3>
 80074ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074d0:	69fb      	ldr	r3, [r7, #28]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3720      	adds	r7, #32
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b088      	sub	sp, #32
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80074e4:	2300      	movs	r3, #0
 80074e6:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80074ec:	2306      	movs	r3, #6
 80074ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074f0:	2340      	movs	r3, #64	; 0x40
 80074f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074fc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074fe:	f107 0308 	add.w	r3, r7, #8
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7ff fde8 	bl	80070da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800750a:	f241 3288 	movw	r2, #5000	; 0x1388
 800750e:	2106      	movs	r1, #6
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f8db 	bl	80076cc <SDMMC_GetCmdResp1>
 8007516:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007518:	69fb      	ldr	r3, [r7, #28]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3720      	adds	r7, #32
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b088      	sub	sp, #32
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800752a:	2300      	movs	r3, #0
 800752c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007532:	2333      	movs	r3, #51	; 0x33
 8007534:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007536:	2340      	movs	r3, #64	; 0x40
 8007538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800753a:	2300      	movs	r3, #0
 800753c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800753e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007542:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007544:	f107 0308 	add.w	r3, r7, #8
 8007548:	4619      	mov	r1, r3
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff fdc5 	bl	80070da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007550:	f241 3288 	movw	r2, #5000	; 0x1388
 8007554:	2133      	movs	r1, #51	; 0x33
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f8b8 	bl	80076cc <SDMMC_GetCmdResp1>
 800755c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800755e:	69fb      	ldr	r3, [r7, #28]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3720      	adds	r7, #32
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b088      	sub	sp, #32
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007570:	2300      	movs	r3, #0
 8007572:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007578:	2302      	movs	r3, #2
 800757a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800757c:	23c0      	movs	r3, #192	; 0xc0
 800757e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007580:	2300      	movs	r3, #0
 8007582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007588:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800758a:	f107 0308 	add.w	r3, r7, #8
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7ff fda2 	bl	80070da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f97e 	bl	8007898 <SDMMC_GetCmdResp2>
 800759c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800759e:	69fb      	ldr	r3, [r7, #28]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3720      	adds	r7, #32
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80075b2:	2300      	movs	r3, #0
 80075b4:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80075ba:	2309      	movs	r3, #9
 80075bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80075be:	23c0      	movs	r3, #192	; 0xc0
 80075c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075c2:	2300      	movs	r3, #0
 80075c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ca:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075cc:	f107 0308 	add.w	r3, r7, #8
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff fd81 	bl	80070da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f95d 	bl	8007898 <SDMMC_GetCmdResp2>
 80075de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075e0:	69fb      	ldr	r3, [r7, #28]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3720      	adds	r7, #32
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b088      	sub	sp, #32
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80075f4:	2300      	movs	r3, #0
 80075f6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80075fc:	2303      	movs	r3, #3
 80075fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007600:	2340      	movs	r3, #64	; 0x40
 8007602:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007604:	2300      	movs	r3, #0
 8007606:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800760c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800760e:	f107 0308 	add.w	r3, r7, #8
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7ff fd60 	bl	80070da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	2103      	movs	r1, #3
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f9ae 	bl	8007980 <SDMMC_GetCmdResp6>
 8007624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007626:	69fb      	ldr	r3, [r7, #28]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3720      	adds	r7, #32
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b088      	sub	sp, #32
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800763a:	2300      	movs	r3, #0
 800763c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007642:	230d      	movs	r3, #13
 8007644:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007646:	2340      	movs	r3, #64	; 0x40
 8007648:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800764a:	2300      	movs	r3, #0
 800764c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800764e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007652:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007654:	f107 0308 	add.w	r3, r7, #8
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff fd3d 	bl	80070da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007660:	f241 3288 	movw	r2, #5000	; 0x1388
 8007664:	210d      	movs	r1, #13
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f830 	bl	80076cc <SDMMC_GetCmdResp1>
 800766c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800766e:	69fb      	ldr	r3, [r7, #28]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3720      	adds	r7, #32
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007678:	b490      	push	{r4, r7}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007680:	4b10      	ldr	r3, [pc, #64]	; (80076c4 <SDMMC_GetCmdError+0x4c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a10      	ldr	r2, [pc, #64]	; (80076c8 <SDMMC_GetCmdError+0x50>)
 8007686:	fba2 2303 	umull	r2, r3, r2, r3
 800768a:	0a5b      	lsrs	r3, r3, #9
 800768c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007690:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007694:	4623      	mov	r3, r4
 8007696:	1e5c      	subs	r4, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d102      	bne.n	80076a2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800769c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076a0:	e00a      	b.n	80076b8 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0f2      	beq.n	8007694 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80076b4:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc90      	pop	{r4, r7}
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	20000118 	.word	0x20000118
 80076c8:	10624dd3 	.word	0x10624dd3

080076cc <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80076cc:	b590      	push	{r4, r7, lr}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	460b      	mov	r3, r1
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076da:	4b6c      	ldr	r3, [pc, #432]	; (800788c <SDMMC_GetCmdResp1+0x1c0>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a6c      	ldr	r2, [pc, #432]	; (8007890 <SDMMC_GetCmdResp1+0x1c4>)
 80076e0:	fba2 2303 	umull	r2, r3, r2, r3
 80076e4:	0a5b      	lsrs	r3, r3, #9
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80076ec:	4623      	mov	r3, r4
 80076ee:	1e5c      	subs	r4, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d102      	bne.n	80076fa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076f8:	e0c3      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0f2      	beq.n	80076ec <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770a:	f003 0304 	and.w	r3, r3, #4
 800770e:	2b00      	cmp	r3, #0
 8007710:	d004      	beq.n	800771c <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2204      	movs	r2, #4
 8007716:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007718:	2304      	movs	r3, #4
 800771a:	e0b2      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	d004      	beq.n	8007732 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2201      	movs	r2, #1
 800772c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800772e:	2301      	movs	r3, #1
 8007730:	e0a7      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7ff fcfb 	bl	800712e <SDIO_GetCommandResponse>
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	7afb      	ldrb	r3, [r7, #11]
 800773e:	4293      	cmp	r3, r2
 8007740:	d001      	beq.n	8007746 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007742:	2301      	movs	r3, #1
 8007744:	e09d      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800774c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800774e:	2100      	movs	r1, #0
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f7ff fcf9 	bl	8007148 <SDIO_GetResponse>
 8007756:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	4b4e      	ldr	r3, [pc, #312]	; (8007894 <SDMMC_GetCmdResp1+0x1c8>)
 800775c:	4013      	ands	r3, r2
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8007762:	2300      	movs	r3, #0
 8007764:	e08d      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	da02      	bge.n	8007772 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800776c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007770:	e087      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800777c:	2340      	movs	r3, #64	; 0x40
 800777e:	e080      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800778a:	2380      	movs	r3, #128	; 0x80
 800778c:	e079      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800779c:	e071      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80077a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ac:	e069      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80077b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077bc:	e061      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80077c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077cc:	e059      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80077d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077dc:	e051      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80077e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077ec:	e049      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80077f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077fc:	e041      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8007808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800780c:	e039      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800781c:	e031      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007828:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800782c:	e029      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007838:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800783c:	e021      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007848:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800784c:	e019      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007858:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800785c:	e011      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007868:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800786c:	e009      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f003 0308 	and.w	r3, r3, #8
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007878:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800787c:	e001      	b.n	8007882 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800787e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007882:	4618      	mov	r0, r3
 8007884:	371c      	adds	r7, #28
 8007886:	46bd      	mov	sp, r7
 8007888:	bd90      	pop	{r4, r7, pc}
 800788a:	bf00      	nop
 800788c:	20000118 	.word	0x20000118
 8007890:	10624dd3 	.word	0x10624dd3
 8007894:	fdffe008 	.word	0xfdffe008

08007898 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007898:	b490      	push	{r4, r7}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078a0:	4b1b      	ldr	r3, [pc, #108]	; (8007910 <SDMMC_GetCmdResp2+0x78>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a1b      	ldr	r2, [pc, #108]	; (8007914 <SDMMC_GetCmdResp2+0x7c>)
 80078a6:	fba2 2303 	umull	r2, r3, r2, r3
 80078aa:	0a5b      	lsrs	r3, r3, #9
 80078ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80078b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80078b4:	4623      	mov	r3, r4
 80078b6:	1e5c      	subs	r4, r3, #1
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d102      	bne.n	80078c2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078c0:	e020      	b.n	8007904 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0f2      	beq.n	80078b4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d004      	beq.n	80078e4 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2204      	movs	r2, #4
 80078de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078e0:	2304      	movs	r3, #4
 80078e2:	e00f      	b.n	8007904 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d004      	beq.n	80078fa <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e004      	b.n	8007904 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007900:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bc90      	pop	{r4, r7}
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	20000118 	.word	0x20000118
 8007914:	10624dd3 	.word	0x10624dd3

08007918 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007918:	b490      	push	{r4, r7}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007920:	4b15      	ldr	r3, [pc, #84]	; (8007978 <SDMMC_GetCmdResp3+0x60>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a15      	ldr	r2, [pc, #84]	; (800797c <SDMMC_GetCmdResp3+0x64>)
 8007926:	fba2 2303 	umull	r2, r3, r2, r3
 800792a:	0a5b      	lsrs	r3, r3, #9
 800792c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007930:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007934:	4623      	mov	r3, r4
 8007936:	1e5c      	subs	r4, r3, #1
 8007938:	2b00      	cmp	r3, #0
 800793a:	d102      	bne.n	8007942 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800793c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007940:	e015      	b.n	800796e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007946:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0f2      	beq.n	8007934 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007952:	f003 0304 	and.w	r3, r3, #4
 8007956:	2b00      	cmp	r3, #0
 8007958:	d004      	beq.n	8007964 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2204      	movs	r2, #4
 800795e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007960:	2304      	movs	r3, #4
 8007962:	e004      	b.n	800796e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800796a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bc90      	pop	{r4, r7}
 8007976:	4770      	bx	lr
 8007978:	20000118 	.word	0x20000118
 800797c:	10624dd3 	.word	0x10624dd3

08007980 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007980:	b590      	push	{r4, r7, lr}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	460b      	mov	r3, r1
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800798e:	4b31      	ldr	r3, [pc, #196]	; (8007a54 <SDMMC_GetCmdResp6+0xd4>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a31      	ldr	r2, [pc, #196]	; (8007a58 <SDMMC_GetCmdResp6+0xd8>)
 8007994:	fba2 2303 	umull	r2, r3, r2, r3
 8007998:	0a5b      	lsrs	r3, r3, #9
 800799a:	f241 3288 	movw	r2, #5000	; 0x1388
 800799e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80079a2:	4623      	mov	r3, r4
 80079a4:	1e5c      	subs	r4, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d102      	bne.n	80079b0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079ae:	e04c      	b.n	8007a4a <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0f2      	beq.n	80079a2 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d004      	beq.n	80079d2 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2204      	movs	r2, #4
 80079cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079ce:	2304      	movs	r3, #4
 80079d0:	e03b      	b.n	8007a4a <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d004      	beq.n	80079e8 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e030      	b.n	8007a4a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f7ff fba0 	bl	800712e <SDIO_GetCommandResponse>
 80079ee:	4603      	mov	r3, r0
 80079f0:	461a      	mov	r2, r3
 80079f2:	7afb      	ldrb	r3, [r7, #11]
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d001      	beq.n	80079fc <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e026      	b.n	8007a4a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007a02:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007a04:	2100      	movs	r1, #0
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f7ff fb9e 	bl	8007148 <SDIO_GetResponse>
 8007a0c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d106      	bne.n	8007a26 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	0c1b      	lsrs	r3, r3, #16
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007a22:	2300      	movs	r3, #0
 8007a24:	e011      	b.n	8007a4a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007a30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a34:	e009      	b.n	8007a4a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d002      	beq.n	8007a46 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a44:	e001      	b.n	8007a4a <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	371c      	adds	r7, #28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd90      	pop	{r4, r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20000118 	.word	0x20000118
 8007a58:	10624dd3 	.word	0x10624dd3

08007a5c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007a5c:	b490      	push	{r4, r7}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a64:	4b18      	ldr	r3, [pc, #96]	; (8007ac8 <SDMMC_GetCmdResp7+0x6c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a18      	ldr	r2, [pc, #96]	; (8007acc <SDMMC_GetCmdResp7+0x70>)
 8007a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6e:	0a5b      	lsrs	r3, r3, #9
 8007a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a74:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007a78:	4623      	mov	r3, r4
 8007a7a:	1e5c      	subs	r4, r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d102      	bne.n	8007a86 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a84:	e01a      	b.n	8007abc <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d0f2      	beq.n	8007a78 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a96:	f003 0304 	and.w	r3, r3, #4
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2240      	movs	r2, #64	; 0x40
 8007aa2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007aa4:	2304      	movs	r3, #4
 8007aa6:	e009      	b.n	8007abc <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2240      	movs	r2, #64	; 0x40
 8007ab8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007aba:	2300      	movs	r3, #0
  
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc90      	pop	{r4, r7}
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	20000118 	.word	0x20000118
 8007acc:	10624dd3 	.word	0x10624dd3

08007ad0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ad0:	b084      	sub	sp, #16
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	f107 001c 	add.w	r0, r7, #28
 8007ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d122      	bne.n	8007b2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d105      	bne.n	8007b22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f001 fa7c 	bl	8009020 <USB_CoreReset>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73fb      	strb	r3, [r7, #15]
 8007b2c:	e01a      	b.n	8007b64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f001 fa70 	bl	8009020 <USB_CoreReset>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d106      	bne.n	8007b58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	639a      	str	r2, [r3, #56]	; 0x38
 8007b56:	e005      	b.n	8007b64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d10b      	bne.n	8007b82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f043 0206 	orr.w	r2, r3, #6
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f043 0220 	orr.w	r2, r3, #32
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b8e:	b004      	add	sp, #16
 8007b90:	4770      	bx	lr
	...

08007b94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d165      	bne.n	8007c74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	4a41      	ldr	r2, [pc, #260]	; (8007cb0 <USB_SetTurnaroundTime+0x11c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d906      	bls.n	8007bbe <USB_SetTurnaroundTime+0x2a>
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	4a40      	ldr	r2, [pc, #256]	; (8007cb4 <USB_SetTurnaroundTime+0x120>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d802      	bhi.n	8007bbe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007bb8:	230f      	movs	r3, #15
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	e062      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	4a3c      	ldr	r2, [pc, #240]	; (8007cb4 <USB_SetTurnaroundTime+0x120>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d906      	bls.n	8007bd4 <USB_SetTurnaroundTime+0x40>
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	4a3b      	ldr	r2, [pc, #236]	; (8007cb8 <USB_SetTurnaroundTime+0x124>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d802      	bhi.n	8007bd4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007bce:	230e      	movs	r3, #14
 8007bd0:	617b      	str	r3, [r7, #20]
 8007bd2:	e057      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	4a38      	ldr	r2, [pc, #224]	; (8007cb8 <USB_SetTurnaroundTime+0x124>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d906      	bls.n	8007bea <USB_SetTurnaroundTime+0x56>
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4a37      	ldr	r2, [pc, #220]	; (8007cbc <USB_SetTurnaroundTime+0x128>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d802      	bhi.n	8007bea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007be4:	230d      	movs	r3, #13
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	e04c      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	4a33      	ldr	r2, [pc, #204]	; (8007cbc <USB_SetTurnaroundTime+0x128>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d906      	bls.n	8007c00 <USB_SetTurnaroundTime+0x6c>
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	4a32      	ldr	r2, [pc, #200]	; (8007cc0 <USB_SetTurnaroundTime+0x12c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d802      	bhi.n	8007c00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007bfa:	230c      	movs	r3, #12
 8007bfc:	617b      	str	r3, [r7, #20]
 8007bfe:	e041      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4a2f      	ldr	r2, [pc, #188]	; (8007cc0 <USB_SetTurnaroundTime+0x12c>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d906      	bls.n	8007c16 <USB_SetTurnaroundTime+0x82>
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	4a2e      	ldr	r2, [pc, #184]	; (8007cc4 <USB_SetTurnaroundTime+0x130>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d802      	bhi.n	8007c16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007c10:	230b      	movs	r3, #11
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	e036      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	4a2a      	ldr	r2, [pc, #168]	; (8007cc4 <USB_SetTurnaroundTime+0x130>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d906      	bls.n	8007c2c <USB_SetTurnaroundTime+0x98>
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	4a29      	ldr	r2, [pc, #164]	; (8007cc8 <USB_SetTurnaroundTime+0x134>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d802      	bhi.n	8007c2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007c26:	230a      	movs	r3, #10
 8007c28:	617b      	str	r3, [r7, #20]
 8007c2a:	e02b      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4a26      	ldr	r2, [pc, #152]	; (8007cc8 <USB_SetTurnaroundTime+0x134>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d906      	bls.n	8007c42 <USB_SetTurnaroundTime+0xae>
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	4a25      	ldr	r2, [pc, #148]	; (8007ccc <USB_SetTurnaroundTime+0x138>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d802      	bhi.n	8007c42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007c3c:	2309      	movs	r3, #9
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	e020      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	4a21      	ldr	r2, [pc, #132]	; (8007ccc <USB_SetTurnaroundTime+0x138>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d906      	bls.n	8007c58 <USB_SetTurnaroundTime+0xc4>
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	4a20      	ldr	r2, [pc, #128]	; (8007cd0 <USB_SetTurnaroundTime+0x13c>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d802      	bhi.n	8007c58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007c52:	2308      	movs	r3, #8
 8007c54:	617b      	str	r3, [r7, #20]
 8007c56:	e015      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	4a1d      	ldr	r2, [pc, #116]	; (8007cd0 <USB_SetTurnaroundTime+0x13c>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d906      	bls.n	8007c6e <USB_SetTurnaroundTime+0xda>
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	4a1c      	ldr	r2, [pc, #112]	; (8007cd4 <USB_SetTurnaroundTime+0x140>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d802      	bhi.n	8007c6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007c68:	2307      	movs	r3, #7
 8007c6a:	617b      	str	r3, [r7, #20]
 8007c6c:	e00a      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007c6e:	2306      	movs	r3, #6
 8007c70:	617b      	str	r3, [r7, #20]
 8007c72:	e007      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007c74:	79fb      	ldrb	r3, [r7, #7]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d102      	bne.n	8007c80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007c7a:	2309      	movs	r3, #9
 8007c7c:	617b      	str	r3, [r7, #20]
 8007c7e:	e001      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007c80:	2309      	movs	r3, #9
 8007c82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	68da      	ldr	r2, [r3, #12]
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	029b      	lsls	r3, r3, #10
 8007c98:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007c9c:	431a      	orrs	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	371c      	adds	r7, #28
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	00d8acbf 	.word	0x00d8acbf
 8007cb4:	00e4e1bf 	.word	0x00e4e1bf
 8007cb8:	00f423ff 	.word	0x00f423ff
 8007cbc:	0106737f 	.word	0x0106737f
 8007cc0:	011a499f 	.word	0x011a499f
 8007cc4:	01312cff 	.word	0x01312cff
 8007cc8:	014ca43f 	.word	0x014ca43f
 8007ccc:	016e35ff 	.word	0x016e35ff
 8007cd0:	01a6ab1f 	.word	0x01a6ab1f
 8007cd4:	01e847ff 	.word	0x01e847ff

08007cd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f043 0201 	orr.w	r2, r3, #1
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f023 0201 	bic.w	r2, r3, #1
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	460b      	mov	r3, r1
 8007d26:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d34:	78fb      	ldrb	r3, [r7, #3]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d106      	bne.n	8007d48 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	60da      	str	r2, [r3, #12]
 8007d46:	e00b      	b.n	8007d60 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d48:	78fb      	ldrb	r3, [r7, #3]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d106      	bne.n	8007d5c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	60da      	str	r2, [r3, #12]
 8007d5a:	e001      	b.n	8007d60 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e003      	b.n	8007d68 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007d60:	2032      	movs	r0, #50	; 0x32
 8007d62:	f7f9 fd21 	bl	80017a8 <HAL_Delay>

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d70:	b084      	sub	sp, #16
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b086      	sub	sp, #24
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	613b      	str	r3, [r7, #16]
 8007d8e:	e009      	b.n	8007da4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	3340      	adds	r3, #64	; 0x40
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	3301      	adds	r3, #1
 8007da2:	613b      	str	r3, [r7, #16]
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	2b0e      	cmp	r3, #14
 8007da8:	d9f2      	bls.n	8007d90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d112      	bne.n	8007dd6 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dcc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	639a      	str	r2, [r3, #56]	; 0x38
 8007dd4:	e00b      	b.n	8007dee <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007df4:	461a      	mov	r2, r3
 8007df6:	2300      	movs	r3, #0
 8007df8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e00:	4619      	mov	r1, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e08:	461a      	mov	r2, r3
 8007e0a:	680b      	ldr	r3, [r1, #0]
 8007e0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d10c      	bne.n	8007e2e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d104      	bne.n	8007e24 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f961 	bl	80080e4 <USB_SetDevSpeed>
 8007e22:	e008      	b.n	8007e36 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e24:	2101      	movs	r1, #1
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f95c 	bl	80080e4 <USB_SetDevSpeed>
 8007e2c:	e003      	b.n	8007e36 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e2e:	2103      	movs	r1, #3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f957 	bl	80080e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e36:	2110      	movs	r1, #16
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f90b 	bl	8008054 <USB_FlushTxFifo>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f929 	bl	80080a0 <USB_FlushRxFifo>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e5e:	461a      	mov	r2, r3
 8007e60:	2300      	movs	r3, #0
 8007e62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e76:	461a      	mov	r2, r3
 8007e78:	2300      	movs	r3, #0
 8007e7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	613b      	str	r3, [r7, #16]
 8007e80:	e043      	b.n	8007f0a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e98:	d118      	bne.n	8007ecc <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10a      	bne.n	8007eb6 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eac:	461a      	mov	r2, r3
 8007eae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	e013      	b.n	8007ede <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	e008      	b.n	8007ede <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed8:	461a      	mov	r2, r3
 8007eda:	2300      	movs	r3, #0
 8007edc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eea:	461a      	mov	r2, r3
 8007eec:	2300      	movs	r3, #0
 8007eee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007efc:	461a      	mov	r2, r3
 8007efe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	3301      	adds	r3, #1
 8007f08:	613b      	str	r3, [r7, #16]
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d3b7      	bcc.n	8007e82 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f12:	2300      	movs	r3, #0
 8007f14:	613b      	str	r3, [r7, #16]
 8007f16:	e043      	b.n	8007fa0 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f2e:	d118      	bne.n	8007f62 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10a      	bne.n	8007f4c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f42:	461a      	mov	r2, r3
 8007f44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	e013      	b.n	8007f74 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f58:	461a      	mov	r2, r3
 8007f5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	e008      	b.n	8007f74 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6e:	461a      	mov	r2, r3
 8007f70:	2300      	movs	r3, #0
 8007f72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f80:	461a      	mov	r2, r3
 8007f82:	2300      	movs	r3, #0
 8007f84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f92:	461a      	mov	r2, r3
 8007f94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	613b      	str	r3, [r7, #16]
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d3b7      	bcc.n	8007f18 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fba:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d111      	bne.n	8007fe6 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fc8:	461a      	mov	r2, r3
 8007fca:	4b20      	ldr	r3, [pc, #128]	; (800804c <USB_DevInit+0x2dc>)
 8007fcc:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fe0:	f043 0303 	orr.w	r3, r3, #3
 8007fe4:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007ff2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d105      	bne.n	8008006 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	f043 0210 	orr.w	r2, r3, #16
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	699a      	ldr	r2, [r3, #24]
 800800a:	4b11      	ldr	r3, [pc, #68]	; (8008050 <USB_DevInit+0x2e0>)
 800800c:	4313      	orrs	r3, r2
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008014:	2b00      	cmp	r3, #0
 8008016:	d005      	beq.n	8008024 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	f043 0208 	orr.w	r2, r3, #8
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008026:	2b01      	cmp	r3, #1
 8008028:	d107      	bne.n	800803a <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008032:	f043 0304 	orr.w	r3, r3, #4
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800803a:	7dfb      	ldrb	r3, [r7, #23]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3718      	adds	r7, #24
 8008040:	46bd      	mov	sp, r7
 8008042:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008046:	b004      	add	sp, #16
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	00800100 	.word	0x00800100
 8008050:	803c3800 	.word	0x803c3800

08008054 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800805e:	2300      	movs	r3, #0
 8008060:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	019b      	lsls	r3, r3, #6
 8008066:	f043 0220 	orr.w	r2, r3, #32
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3301      	adds	r3, #1
 8008072:	60fb      	str	r3, [r7, #12]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4a09      	ldr	r2, [pc, #36]	; (800809c <USB_FlushTxFifo+0x48>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d901      	bls.n	8008080 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e006      	b.n	800808e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	f003 0320 	and.w	r3, r3, #32
 8008088:	2b20      	cmp	r3, #32
 800808a:	d0f0      	beq.n	800806e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3714      	adds	r7, #20
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	00030d40 	.word	0x00030d40

080080a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80080a8:	2300      	movs	r3, #0
 80080aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2210      	movs	r2, #16
 80080b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3301      	adds	r3, #1
 80080b6:	60fb      	str	r3, [r7, #12]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4a09      	ldr	r2, [pc, #36]	; (80080e0 <USB_FlushRxFifo+0x40>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d901      	bls.n	80080c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e006      	b.n	80080d2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	f003 0310 	and.w	r3, r3, #16
 80080cc:	2b10      	cmp	r3, #16
 80080ce:	d0f0      	beq.n	80080b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	00030d40 	.word	0x00030d40

080080e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	460b      	mov	r3, r1
 80080ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	78fb      	ldrb	r3, [r7, #3]
 80080fe:	68f9      	ldr	r1, [r7, #12]
 8008100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008104:	4313      	orrs	r3, r2
 8008106:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008116:	b480      	push	{r7}
 8008118:	b087      	sub	sp, #28
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f003 0306 	and.w	r3, r3, #6
 800812e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d102      	bne.n	800813c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008136:	2300      	movs	r3, #0
 8008138:	75fb      	strb	r3, [r7, #23]
 800813a:	e00a      	b.n	8008152 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2b02      	cmp	r3, #2
 8008140:	d002      	beq.n	8008148 <USB_GetDevSpeed+0x32>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b06      	cmp	r3, #6
 8008146:	d102      	bne.n	800814e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008148:	2302      	movs	r3, #2
 800814a:	75fb      	strb	r3, [r7, #23]
 800814c:	e001      	b.n	8008152 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800814e:	230f      	movs	r3, #15
 8008150:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008152:	7dfb      	ldrb	r3, [r7, #23]
}
 8008154:	4618      	mov	r0, r3
 8008156:	371c      	adds	r7, #28
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	785b      	ldrb	r3, [r3, #1]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d13a      	bne.n	80081f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008182:	69da      	ldr	r2, [r3, #28]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	f003 030f 	and.w	r3, r3, #15
 800818c:	2101      	movs	r1, #1
 800818e:	fa01 f303 	lsl.w	r3, r1, r3
 8008192:	b29b      	uxth	r3, r3
 8008194:	68f9      	ldr	r1, [r7, #12]
 8008196:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800819a:	4313      	orrs	r3, r2
 800819c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d155      	bne.n	8008260 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	78db      	ldrb	r3, [r3, #3]
 80081ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	059b      	lsls	r3, r3, #22
 80081d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081d8:	4313      	orrs	r3, r2
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	0151      	lsls	r1, r2, #5
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	440a      	add	r2, r1
 80081e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	e036      	b.n	8008260 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f8:	69da      	ldr	r2, [r3, #28]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	2101      	movs	r1, #1
 8008204:	fa01 f303 	lsl.w	r3, r1, r3
 8008208:	041b      	lsls	r3, r3, #16
 800820a:	68f9      	ldr	r1, [r7, #12]
 800820c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008210:	4313      	orrs	r3, r2
 8008212:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d11a      	bne.n	8008260 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	015a      	lsls	r2, r3, #5
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	4413      	add	r3, r2
 8008232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	78db      	ldrb	r3, [r3, #3]
 8008244:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008246:	430b      	orrs	r3, r1
 8008248:	4313      	orrs	r3, r2
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	0151      	lsls	r1, r2, #5
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	440a      	add	r2, r1
 8008252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800825a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800825e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
	...

08008270 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	785b      	ldrb	r3, [r3, #1]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d135      	bne.n	80082f8 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	f003 030f 	and.w	r3, r3, #15
 800829c:	2101      	movs	r1, #1
 800829e:	fa01 f303 	lsl.w	r3, r1, r3
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	43db      	mvns	r3, r3
 80082a6:	68f9      	ldr	r1, [r7, #12]
 80082a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082ac:	4013      	ands	r3, r2
 80082ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b6:	69da      	ldr	r2, [r3, #28]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	f003 030f 	and.w	r3, r3, #15
 80082c0:	2101      	movs	r1, #1
 80082c2:	fa01 f303 	lsl.w	r3, r1, r3
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	43db      	mvns	r3, r3
 80082ca:	68f9      	ldr	r1, [r7, #12]
 80082cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082d0:	4013      	ands	r3, r2
 80082d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	0159      	lsls	r1, r3, #5
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	440b      	add	r3, r1
 80082ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ee:	4619      	mov	r1, r3
 80082f0:	4b1f      	ldr	r3, [pc, #124]	; (8008370 <USB_DeactivateEndpoint+0x100>)
 80082f2:	4013      	ands	r3, r2
 80082f4:	600b      	str	r3, [r1, #0]
 80082f6:	e034      	b.n	8008362 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	f003 030f 	and.w	r3, r3, #15
 8008308:	2101      	movs	r1, #1
 800830a:	fa01 f303 	lsl.w	r3, r1, r3
 800830e:	041b      	lsls	r3, r3, #16
 8008310:	43db      	mvns	r3, r3
 8008312:	68f9      	ldr	r1, [r7, #12]
 8008314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008318:	4013      	ands	r3, r2
 800831a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008322:	69da      	ldr	r2, [r3, #28]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	f003 030f 	and.w	r3, r3, #15
 800832c:	2101      	movs	r1, #1
 800832e:	fa01 f303 	lsl.w	r3, r1, r3
 8008332:	041b      	lsls	r3, r3, #16
 8008334:	43db      	mvns	r3, r3
 8008336:	68f9      	ldr	r1, [r7, #12]
 8008338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800833c:	4013      	ands	r3, r2
 800833e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4413      	add	r3, r2
 8008348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	0159      	lsls	r1, r3, #5
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	440b      	add	r3, r1
 8008356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800835a:	4619      	mov	r1, r3
 800835c:	4b05      	ldr	r3, [pc, #20]	; (8008374 <USB_DeactivateEndpoint+0x104>)
 800835e:	4013      	ands	r3, r2
 8008360:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	ec337800 	.word	0xec337800
 8008374:	eff37800 	.word	0xeff37800

08008378 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b08a      	sub	sp, #40	; 0x28
 800837c:	af02      	add	r7, sp, #8
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	4613      	mov	r3, r2
 8008384:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	785b      	ldrb	r3, [r3, #1]
 8008394:	2b01      	cmp	r3, #1
 8008396:	f040 815c 	bne.w	8008652 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d132      	bne.n	8008408 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	69ba      	ldr	r2, [r7, #24]
 80083b2:	0151      	lsls	r1, r2, #5
 80083b4:	69fa      	ldr	r2, [r7, #28]
 80083b6:	440a      	add	r2, r1
 80083b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	0151      	lsls	r1, r2, #5
 80083d8:	69fa      	ldr	r2, [r7, #28]
 80083da:	440a      	add	r2, r1
 80083dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	0151      	lsls	r1, r2, #5
 80083f8:	69fa      	ldr	r2, [r7, #28]
 80083fa:	440a      	add	r2, r1
 80083fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008400:	0cdb      	lsrs	r3, r3, #19
 8008402:	04db      	lsls	r3, r3, #19
 8008404:	6113      	str	r3, [r2, #16]
 8008406:	e074      	b.n	80084f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	4413      	add	r3, r2
 8008410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	69ba      	ldr	r2, [r7, #24]
 8008418:	0151      	lsls	r1, r2, #5
 800841a:	69fa      	ldr	r2, [r7, #28]
 800841c:	440a      	add	r2, r1
 800841e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008422:	0cdb      	lsrs	r3, r3, #19
 8008424:	04db      	lsls	r3, r3, #19
 8008426:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	69ba      	ldr	r2, [r7, #24]
 8008438:	0151      	lsls	r1, r2, #5
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	440a      	add	r2, r1
 800843e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008442:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008446:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800844a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008458:	691a      	ldr	r2, [r3, #16]
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	6959      	ldr	r1, [r3, #20]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	440b      	add	r3, r1
 8008464:	1e59      	subs	r1, r3, #1
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	fbb1 f3f3 	udiv	r3, r1, r3
 800846e:	04d9      	lsls	r1, r3, #19
 8008470:	4b9d      	ldr	r3, [pc, #628]	; (80086e8 <USB_EPStartXfer+0x370>)
 8008472:	400b      	ands	r3, r1
 8008474:	69b9      	ldr	r1, [r7, #24]
 8008476:	0148      	lsls	r0, r1, #5
 8008478:	69f9      	ldr	r1, [r7, #28]
 800847a:	4401      	add	r1, r0
 800847c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008480:	4313      	orrs	r3, r2
 8008482:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008490:	691a      	ldr	r2, [r3, #16]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800849a:	69b9      	ldr	r1, [r7, #24]
 800849c:	0148      	lsls	r0, r1, #5
 800849e:	69f9      	ldr	r1, [r7, #28]
 80084a0:	4401      	add	r1, r0
 80084a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80084a6:	4313      	orrs	r3, r2
 80084a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	78db      	ldrb	r3, [r3, #3]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d11f      	bne.n	80084f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	015a      	lsls	r2, r3, #5
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	4413      	add	r3, r2
 80084ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	0151      	lsls	r1, r2, #5
 80084c4:	69fa      	ldr	r2, [r7, #28]
 80084c6:	440a      	add	r2, r1
 80084c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80084d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	015a      	lsls	r2, r3, #5
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	4413      	add	r3, r2
 80084da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	69ba      	ldr	r2, [r7, #24]
 80084e2:	0151      	lsls	r1, r2, #5
 80084e4:	69fa      	ldr	r2, [r7, #28]
 80084e6:	440a      	add	r2, r1
 80084e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80084f2:	79fb      	ldrb	r3, [r7, #7]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d14b      	bne.n	8008590 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d009      	beq.n	8008514 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850c:	461a      	mov	r2, r3
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	78db      	ldrb	r3, [r3, #3]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d128      	bne.n	800856e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008528:	2b00      	cmp	r3, #0
 800852a:	d110      	bne.n	800854e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	69ba      	ldr	r2, [r7, #24]
 800853c:	0151      	lsls	r1, r2, #5
 800853e:	69fa      	ldr	r2, [r7, #28]
 8008540:	440a      	add	r2, r1
 8008542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008546:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800854a:	6013      	str	r3, [r2, #0]
 800854c:	e00f      	b.n	800856e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	015a      	lsls	r2, r3, #5
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	4413      	add	r3, r2
 8008556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	0151      	lsls	r1, r2, #5
 8008560:	69fa      	ldr	r2, [r7, #28]
 8008562:	440a      	add	r2, r1
 8008564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800856c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	69ba      	ldr	r2, [r7, #24]
 800857e:	0151      	lsls	r1, r2, #5
 8008580:	69fa      	ldr	r2, [r7, #28]
 8008582:	440a      	add	r2, r1
 8008584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008588:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	e12f      	b.n	80087f0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	0151      	lsls	r1, r2, #5
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	440a      	add	r2, r1
 80085a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	78db      	ldrb	r3, [r3, #3]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d015      	beq.n	80085e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	695b      	ldr	r3, [r3, #20]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 8117 	beq.w	80087f0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	f003 030f 	and.w	r3, r3, #15
 80085d2:	2101      	movs	r1, #1
 80085d4:	fa01 f303 	lsl.w	r3, r1, r3
 80085d8:	69f9      	ldr	r1, [r7, #28]
 80085da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085de:	4313      	orrs	r3, r2
 80085e0:	634b      	str	r3, [r1, #52]	; 0x34
 80085e2:	e105      	b.n	80087f0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d110      	bne.n	8008616 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	69ba      	ldr	r2, [r7, #24]
 8008604:	0151      	lsls	r1, r2, #5
 8008606:	69fa      	ldr	r2, [r7, #28]
 8008608:	440a      	add	r2, r1
 800860a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800860e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008612:	6013      	str	r3, [r2, #0]
 8008614:	e00f      	b.n	8008636 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	4413      	add	r3, r2
 800861e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	0151      	lsls	r1, r2, #5
 8008628:	69fa      	ldr	r2, [r7, #28]
 800862a:	440a      	add	r2, r1
 800862c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008634:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	68d9      	ldr	r1, [r3, #12]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	781a      	ldrb	r2, [r3, #0]
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	b298      	uxth	r0, r3
 8008644:	79fb      	ldrb	r3, [r7, #7]
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	4603      	mov	r3, r0
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 fa2b 	bl	8008aa6 <USB_WritePacket>
 8008650:	e0ce      	b.n	80087f0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	4413      	add	r3, r2
 800865a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	0151      	lsls	r1, r2, #5
 8008664:	69fa      	ldr	r2, [r7, #28]
 8008666:	440a      	add	r2, r1
 8008668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800866c:	0cdb      	lsrs	r3, r3, #19
 800866e:	04db      	lsls	r3, r3, #19
 8008670:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	69ba      	ldr	r2, [r7, #24]
 8008682:	0151      	lsls	r1, r2, #5
 8008684:	69fa      	ldr	r2, [r7, #28]
 8008686:	440a      	add	r2, r1
 8008688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800868c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008690:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008694:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d126      	bne.n	80086ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	015a      	lsls	r2, r3, #5
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086aa:	691a      	ldr	r2, [r3, #16]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086b4:	69b9      	ldr	r1, [r7, #24]
 80086b6:	0148      	lsls	r0, r1, #5
 80086b8:	69f9      	ldr	r1, [r7, #28]
 80086ba:	4401      	add	r1, r0
 80086bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80086c0:	4313      	orrs	r3, r2
 80086c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	015a      	lsls	r2, r3, #5
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	69ba      	ldr	r2, [r7, #24]
 80086d4:	0151      	lsls	r1, r2, #5
 80086d6:	69fa      	ldr	r2, [r7, #28]
 80086d8:	440a      	add	r2, r1
 80086da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086e2:	6113      	str	r3, [r2, #16]
 80086e4:	e036      	b.n	8008754 <USB_EPStartXfer+0x3dc>
 80086e6:	bf00      	nop
 80086e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	695a      	ldr	r2, [r3, #20]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	4413      	add	r3, r2
 80086f6:	1e5a      	subs	r2, r3, #1
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008700:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	015a      	lsls	r2, r3, #5
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	4413      	add	r3, r2
 800870a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800870e:	691a      	ldr	r2, [r3, #16]
 8008710:	8afb      	ldrh	r3, [r7, #22]
 8008712:	04d9      	lsls	r1, r3, #19
 8008714:	4b39      	ldr	r3, [pc, #228]	; (80087fc <USB_EPStartXfer+0x484>)
 8008716:	400b      	ands	r3, r1
 8008718:	69b9      	ldr	r1, [r7, #24]
 800871a:	0148      	lsls	r0, r1, #5
 800871c:	69f9      	ldr	r1, [r7, #28]
 800871e:	4401      	add	r1, r0
 8008720:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008724:	4313      	orrs	r3, r2
 8008726:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008734:	691a      	ldr	r2, [r3, #16]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	8af9      	ldrh	r1, [r7, #22]
 800873c:	fb01 f303 	mul.w	r3, r1, r3
 8008740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008744:	69b9      	ldr	r1, [r7, #24]
 8008746:	0148      	lsls	r0, r1, #5
 8008748:	69f9      	ldr	r1, [r7, #28]
 800874a:	4401      	add	r1, r0
 800874c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008750:	4313      	orrs	r3, r2
 8008752:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008754:	79fb      	ldrb	r3, [r7, #7]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d10d      	bne.n	8008776 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d009      	beq.n	8008776 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	68d9      	ldr	r1, [r3, #12]
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	4413      	add	r3, r2
 800876e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008772:	460a      	mov	r2, r1
 8008774:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	78db      	ldrb	r3, [r3, #3]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d128      	bne.n	80087d0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800878a:	2b00      	cmp	r3, #0
 800878c:	d110      	bne.n	80087b0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	4413      	add	r3, r2
 8008796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	0151      	lsls	r1, r2, #5
 80087a0:	69fa      	ldr	r2, [r7, #28]
 80087a2:	440a      	add	r2, r1
 80087a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	e00f      	b.n	80087d0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	0151      	lsls	r1, r2, #5
 80087c2:	69fa      	ldr	r2, [r7, #28]
 80087c4:	440a      	add	r2, r1
 80087c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	69ba      	ldr	r2, [r7, #24]
 80087e0:	0151      	lsls	r1, r2, #5
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	440a      	add	r2, r1
 80087e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3720      	adds	r7, #32
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	1ff80000 	.word	0x1ff80000

08008800 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	4613      	mov	r3, r2
 800880c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	785b      	ldrb	r3, [r3, #1]
 800881c:	2b01      	cmp	r3, #1
 800881e:	f040 80cd 	bne.w	80089bc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d132      	bne.n	8008890 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	015a      	lsls	r2, r3, #5
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	4413      	add	r3, r2
 8008832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	0151      	lsls	r1, r2, #5
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	440a      	add	r2, r1
 8008840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008844:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008848:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800884c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	4413      	add	r3, r2
 8008856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	0151      	lsls	r1, r2, #5
 8008860:	697a      	ldr	r2, [r7, #20]
 8008862:	440a      	add	r2, r1
 8008864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008868:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800886c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	015a      	lsls	r2, r3, #5
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	4413      	add	r3, r2
 8008876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	0151      	lsls	r1, r2, #5
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	440a      	add	r2, r1
 8008884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008888:	0cdb      	lsrs	r3, r3, #19
 800888a:	04db      	lsls	r3, r3, #19
 800888c:	6113      	str	r3, [r2, #16]
 800888e:	e04e      	b.n	800892e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	015a      	lsls	r2, r3, #5
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	4413      	add	r3, r2
 8008898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	0151      	lsls	r1, r2, #5
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	440a      	add	r2, r1
 80088a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088aa:	0cdb      	lsrs	r3, r3, #19
 80088ac:	04db      	lsls	r3, r3, #19
 80088ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	0151      	lsls	r1, r2, #5
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	440a      	add	r2, r1
 80088c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	695a      	ldr	r2, [r3, #20]
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d903      	bls.n	80088e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	689a      	ldr	r2, [r3, #8]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	0151      	lsls	r1, r2, #5
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	440a      	add	r2, r1
 80088fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008902:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008906:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008914:	691a      	ldr	r2, [r3, #16]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800891e:	6939      	ldr	r1, [r7, #16]
 8008920:	0148      	lsls	r0, r1, #5
 8008922:	6979      	ldr	r1, [r7, #20]
 8008924:	4401      	add	r1, r0
 8008926:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800892a:	4313      	orrs	r3, r2
 800892c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800892e:	79fb      	ldrb	r3, [r7, #7]
 8008930:	2b01      	cmp	r3, #1
 8008932:	d11e      	bne.n	8008972 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d009      	beq.n	8008950 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008948:	461a      	mov	r2, r3
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	0151      	lsls	r1, r2, #5
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	440a      	add	r2, r1
 8008966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800896a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	e092      	b.n	8008a98 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	4413      	add	r3, r2
 800897a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	0151      	lsls	r1, r2, #5
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	440a      	add	r2, r1
 8008988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800898c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008990:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d07e      	beq.n	8008a98 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	f003 030f 	and.w	r3, r3, #15
 80089aa:	2101      	movs	r1, #1
 80089ac:	fa01 f303 	lsl.w	r3, r1, r3
 80089b0:	6979      	ldr	r1, [r7, #20]
 80089b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089b6:	4313      	orrs	r3, r2
 80089b8:	634b      	str	r3, [r1, #52]	; 0x34
 80089ba:	e06d      	b.n	8008a98 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	0151      	lsls	r1, r2, #5
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	440a      	add	r2, r1
 80089d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089d6:	0cdb      	lsrs	r3, r3, #19
 80089d8:	04db      	lsls	r3, r3, #19
 80089da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	0151      	lsls	r1, r2, #5
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	440a      	add	r2, r1
 80089f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089fe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	695b      	ldr	r3, [r3, #20]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d003      	beq.n	8008a10 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	689a      	ldr	r2, [r3, #8]
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	015a      	lsls	r2, r3, #5
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	4413      	add	r3, r2
 8008a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	0151      	lsls	r1, r2, #5
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	440a      	add	r2, r1
 8008a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	015a      	lsls	r2, r3, #5
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	4413      	add	r3, r2
 8008a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a3c:	691a      	ldr	r2, [r3, #16]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a46:	6939      	ldr	r1, [r7, #16]
 8008a48:	0148      	lsls	r0, r1, #5
 8008a4a:	6979      	ldr	r1, [r7, #20]
 8008a4c:	4401      	add	r1, r0
 8008a4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a52:	4313      	orrs	r3, r2
 8008a54:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008a56:	79fb      	ldrb	r3, [r7, #7]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d10d      	bne.n	8008a78 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d009      	beq.n	8008a78 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	68d9      	ldr	r1, [r3, #12]
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a74:	460a      	mov	r2, r1
 8008a76:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	0151      	lsls	r1, r2, #5
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	440a      	add	r2, r1
 8008a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	371c      	adds	r7, #28
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b089      	sub	sp, #36	; 0x24
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	60f8      	str	r0, [r7, #12]
 8008aae:	60b9      	str	r1, [r7, #8]
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	71fb      	strb	r3, [r7, #7]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008ac4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d11a      	bne.n	8008b02 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008acc:	88bb      	ldrh	r3, [r7, #4]
 8008ace:	3303      	adds	r3, #3
 8008ad0:	089b      	lsrs	r3, r3, #2
 8008ad2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	61bb      	str	r3, [r7, #24]
 8008ad8:	e00f      	b.n	8008afa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	031a      	lsls	r2, r3, #12
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	3304      	adds	r3, #4
 8008af2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	3301      	adds	r3, #1
 8008af8:	61bb      	str	r3, [r7, #24]
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d3eb      	bcc.n	8008ada <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3724      	adds	r7, #36	; 0x24
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b089      	sub	sp, #36	; 0x24
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008b26:	88fb      	ldrh	r3, [r7, #6]
 8008b28:	3303      	adds	r3, #3
 8008b2a:	089b      	lsrs	r3, r3, #2
 8008b2c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008b2e:	2300      	movs	r3, #0
 8008b30:	61bb      	str	r3, [r7, #24]
 8008b32:	e00b      	b.n	8008b4c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	3304      	adds	r3, #4
 8008b44:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	61bb      	str	r3, [r7, #24]
 8008b4c:	69ba      	ldr	r2, [r7, #24]
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d3ef      	bcc.n	8008b34 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008b54:	69fb      	ldr	r3, [r7, #28]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3724      	adds	r7, #36	; 0x24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b085      	sub	sp, #20
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	785b      	ldrb	r3, [r3, #1]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d12c      	bne.n	8008bd8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	db12      	blt.n	8008bb6 <USB_EPSetStall+0x54>
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00f      	beq.n	8008bb6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	0151      	lsls	r1, r2, #5
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	440a      	add	r2, r1
 8008bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008bb4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	0151      	lsls	r1, r2, #5
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	440a      	add	r2, r1
 8008bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	e02b      	b.n	8008c30 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	db12      	blt.n	8008c10 <USB_EPSetStall+0xae>
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00f      	beq.n	8008c10 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	0151      	lsls	r1, r2, #5
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	440a      	add	r2, r1
 8008c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c0e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	015a      	lsls	r2, r3, #5
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	4413      	add	r3, r2
 8008c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	0151      	lsls	r1, r2, #5
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	440a      	add	r2, r1
 8008c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b085      	sub	sp, #20
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	785b      	ldrb	r3, [r3, #1]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d128      	bne.n	8008cac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	0151      	lsls	r1, r2, #5
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	440a      	add	r2, r1
 8008c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	78db      	ldrb	r3, [r3, #3]
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	d003      	beq.n	8008c8a <USB_EPClearStall+0x4c>
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	78db      	ldrb	r3, [r3, #3]
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d138      	bne.n	8008cfc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	0151      	lsls	r1, r2, #5
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	440a      	add	r2, r1
 8008ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	e027      	b.n	8008cfc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	015a      	lsls	r2, r3, #5
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	0151      	lsls	r1, r2, #5
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	440a      	add	r2, r1
 8008cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	78db      	ldrb	r3, [r3, #3]
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d003      	beq.n	8008cdc <USB_EPClearStall+0x9e>
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	78db      	ldrb	r3, [r3, #3]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d10f      	bne.n	8008cfc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	0151      	lsls	r1, r2, #5
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	440a      	add	r2, r1
 8008cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cfa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b085      	sub	sp, #20
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	460b      	mov	r3, r1
 8008d14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d28:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008d2c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	011b      	lsls	r3, r3, #4
 8008d3a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008d3e:	68f9      	ldr	r1, [r7, #12]
 8008d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d44:	4313      	orrs	r3, r2
 8008d46:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d70:	f023 0302 	bic.w	r3, r3, #2
 8008d74:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008d76:	2003      	movs	r0, #3
 8008d78:	f7f8 fd16 	bl	80017a8 <HAL_Delay>

  return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008da0:	f043 0302 	orr.w	r3, r3, #2
 8008da4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008da6:	2003      	movs	r0, #3
 8008da8:	f7f8 fcfe 	bl	80017a8 <HAL_Delay>

  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b085      	sub	sp, #20
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	695b      	ldr	r3, [r3, #20]
 8008dc2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	4013      	ands	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008dce:	68fb      	ldr	r3, [r7, #12]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3714      	adds	r7, #20
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	0c1b      	lsrs	r3, r3, #16
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	4013      	ands	r3, r2
 8008e32:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	b29b      	uxth	r3, r3
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008e54:	78fb      	ldrb	r3, [r7, #3]
 8008e56:	015a      	lsls	r2, r3, #5
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	4013      	ands	r3, r2
 8008e70:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e72:	68bb      	ldr	r3, [r7, #8]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b087      	sub	sp, #28
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008ea4:	78fb      	ldrb	r3, [r7, #3]
 8008ea6:	f003 030f 	and.w	r3, r3, #15
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb0:	01db      	lsls	r3, r3, #7
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	015a      	lsls	r2, r3, #5
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	4013      	ands	r3, r2
 8008ecc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ece:	68bb      	ldr	r3, [r7, #8]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	371c      	adds	r7, #28
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	f003 0301 	and.w	r3, r3, #1
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008f16:	f023 0307 	bic.w	r3, r3, #7
 8008f1a:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f003 0306 	and.w	r3, r3, #6
 8008f28:	2b04      	cmp	r3, #4
 8008f2a:	d109      	bne.n	8008f40 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f3a:	f043 0303 	orr.w	r3, r3, #3
 8008f3e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
	...

08008f64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b087      	sub	sp, #28
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	607a      	str	r2, [r7, #4]
 8008f70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	333c      	adds	r3, #60	; 0x3c
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	4a26      	ldr	r2, [pc, #152]	; (800901c <USB_EP0_OutStart+0xb8>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d90a      	bls.n	8008f9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f98:	d101      	bne.n	8008f9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e037      	b.n	800900e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	697a      	ldr	r2, [r7, #20]
 8008fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fcc:	f043 0318 	orr.w	r3, r3, #24
 8008fd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	697a      	ldr	r2, [r7, #20]
 8008fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fe0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008fe4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008fe6:	7afb      	ldrb	r3, [r7, #11]
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d10f      	bne.n	800900c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009006:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800900a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	371c      	adds	r7, #28
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	4f54300a 	.word	0x4f54300a

08009020 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009028:	2300      	movs	r3, #0
 800902a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	3301      	adds	r3, #1
 8009030:	60fb      	str	r3, [r7, #12]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	4a13      	ldr	r2, [pc, #76]	; (8009084 <USB_CoreReset+0x64>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d901      	bls.n	800903e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e01b      	b.n	8009076 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	daf2      	bge.n	800902c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009046:	2300      	movs	r3, #0
 8009048:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	f043 0201 	orr.w	r2, r3, #1
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	3301      	adds	r3, #1
 800905a:	60fb      	str	r3, [r7, #12]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	4a09      	ldr	r2, [pc, #36]	; (8009084 <USB_CoreReset+0x64>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d901      	bls.n	8009068 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e006      	b.n	8009076 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	f003 0301 	and.w	r3, r3, #1
 8009070:	2b01      	cmp	r3, #1
 8009072:	d0f0      	beq.n	8009056 <USB_CoreReset+0x36>

  return HAL_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	00030d40 	.word	0x00030d40

08009088 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	460b      	mov	r3, r1
 8009092:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009094:	2300      	movs	r3, #0
 8009096:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	7c1b      	ldrb	r3, [r3, #16]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d115      	bne.n	80090cc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090a4:	2202      	movs	r2, #2
 80090a6:	2181      	movs	r1, #129	; 0x81
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f005 fecc 	bl	800ee46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090b8:	2202      	movs	r2, #2
 80090ba:	2101      	movs	r1, #1
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f005 fec2 	bl	800ee46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80090ca:	e012      	b.n	80090f2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090cc:	2340      	movs	r3, #64	; 0x40
 80090ce:	2202      	movs	r2, #2
 80090d0:	2181      	movs	r1, #129	; 0x81
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f005 feb7 	bl	800ee46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090de:	2340      	movs	r3, #64	; 0x40
 80090e0:	2202      	movs	r2, #2
 80090e2:	2101      	movs	r1, #1
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f005 feae 	bl	800ee46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80090f2:	2308      	movs	r3, #8
 80090f4:	2203      	movs	r2, #3
 80090f6:	2182      	movs	r1, #130	; 0x82
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f005 fea4 	bl	800ee46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8009104:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009108:	f006 f952 	bl	800f3b0 <malloc>
 800910c:	4603      	mov	r3, r0
 800910e:	461a      	mov	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800911c:	2b00      	cmp	r3, #0
 800911e:	d102      	bne.n	8009126 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8009120:	2301      	movs	r3, #1
 8009122:	73fb      	strb	r3, [r7, #15]
 8009124:	e026      	b.n	8009174 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800912c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2200      	movs	r2, #0
 800913c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2200      	movs	r2, #0
 8009144:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	7c1b      	ldrb	r3, [r3, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d109      	bne.n	8009164 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800915a:	2101      	movs	r1, #1
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f005 ff63 	bl	800f028 <USBD_LL_PrepareReceive>
 8009162:	e007      	b.n	8009174 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800916a:	2340      	movs	r3, #64	; 0x40
 800916c:	2101      	movs	r1, #1
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f005 ff5a 	bl	800f028 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009174:	7bfb      	ldrb	r3, [r7, #15]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b084      	sub	sp, #16
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	460b      	mov	r3, r1
 8009188:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800918a:	2300      	movs	r3, #0
 800918c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800918e:	2181      	movs	r1, #129	; 0x81
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f005 fe7e 	bl	800ee92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800919c:	2101      	movs	r1, #1
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f005 fe77 	bl	800ee92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80091ac:	2182      	movs	r1, #130	; 0x82
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f005 fe6f 	bl	800ee92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00e      	beq.n	80091e2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80091d4:	4618      	mov	r0, r3
 80091d6:	f006 f8f3 	bl	800f3c0 <free>
    pdev->pClassData = NULL;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80091fc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80091fe:	2300      	movs	r3, #0
 8009200:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009202:	2300      	movs	r3, #0
 8009204:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009212:	2b00      	cmp	r3, #0
 8009214:	d039      	beq.n	800928a <USBD_CDC_Setup+0x9e>
 8009216:	2b20      	cmp	r3, #32
 8009218:	d17c      	bne.n	8009314 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	88db      	ldrh	r3, [r3, #6]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d029      	beq.n	8009276 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	b25b      	sxtb	r3, r3
 8009228:	2b00      	cmp	r3, #0
 800922a:	da11      	bge.n	8009250 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8009238:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	88d2      	ldrh	r2, [r2, #6]
 800923e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009240:	6939      	ldr	r1, [r7, #16]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	88db      	ldrh	r3, [r3, #6]
 8009246:	461a      	mov	r2, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f001 f9c9 	bl	800a5e0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800924e:	e068      	b.n	8009322 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	785a      	ldrb	r2, [r3, #1]
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	88db      	ldrh	r3, [r3, #6]
 800925e:	b2da      	uxtb	r2, r3
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009266:	6939      	ldr	r1, [r7, #16]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	88db      	ldrh	r3, [r3, #6]
 800926c:	461a      	mov	r2, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f001 f9e4 	bl	800a63c <USBD_CtlPrepareRx>
    break;
 8009274:	e055      	b.n	8009322 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	7850      	ldrb	r0, [r2, #1]
 8009282:	2200      	movs	r2, #0
 8009284:	6839      	ldr	r1, [r7, #0]
 8009286:	4798      	blx	r3
    break;
 8009288:	e04b      	b.n	8009322 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	785b      	ldrb	r3, [r3, #1]
 800928e:	2b0a      	cmp	r3, #10
 8009290:	d017      	beq.n	80092c2 <USBD_CDC_Setup+0xd6>
 8009292:	2b0b      	cmp	r3, #11
 8009294:	d029      	beq.n	80092ea <USBD_CDC_Setup+0xfe>
 8009296:	2b00      	cmp	r3, #0
 8009298:	d133      	bne.n	8009302 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80092a0:	2b03      	cmp	r3, #3
 80092a2:	d107      	bne.n	80092b4 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80092a4:	f107 030c 	add.w	r3, r7, #12
 80092a8:	2202      	movs	r2, #2
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f001 f997 	bl	800a5e0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80092b2:	e02e      	b.n	8009312 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f001 f927 	bl	800a50a <USBD_CtlError>
			  ret = USBD_FAIL;
 80092bc:	2302      	movs	r3, #2
 80092be:	75fb      	strb	r3, [r7, #23]
      break;
 80092c0:	e027      	b.n	8009312 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80092c8:	2b03      	cmp	r3, #3
 80092ca:	d107      	bne.n	80092dc <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80092cc:	f107 030f 	add.w	r3, r7, #15
 80092d0:	2201      	movs	r2, #1
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f001 f983 	bl	800a5e0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80092da:	e01a      	b.n	8009312 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f001 f913 	bl	800a50a <USBD_CtlError>
			  ret = USBD_FAIL;
 80092e4:	2302      	movs	r3, #2
 80092e6:	75fb      	strb	r3, [r7, #23]
      break;
 80092e8:	e013      	b.n	8009312 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	d00d      	beq.n	8009310 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f001 f907 	bl	800a50a <USBD_CtlError>
			  ret = USBD_FAIL;
 80092fc:	2302      	movs	r3, #2
 80092fe:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009300:	e006      	b.n	8009310 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f001 f900 	bl	800a50a <USBD_CtlError>
      ret = USBD_FAIL;
 800930a:	2302      	movs	r3, #2
 800930c:	75fb      	strb	r3, [r7, #23]
      break;
 800930e:	e000      	b.n	8009312 <USBD_CDC_Setup+0x126>
      break;
 8009310:	bf00      	nop
    }
    break;
 8009312:	e006      	b.n	8009322 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f001 f8f7 	bl	800a50a <USBD_CtlError>
    ret = USBD_FAIL;
 800931c:	2302      	movs	r3, #2
 800931e:	75fb      	strb	r3, [r7, #23]
    break;
 8009320:	bf00      	nop
  }

  return ret;
 8009322:	7dfb      	ldrb	r3, [r7, #23]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800933e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009346:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800934e:	2b00      	cmp	r3, #0
 8009350:	d03a      	beq.n	80093c8 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009352:	78fa      	ldrb	r2, [r7, #3]
 8009354:	6879      	ldr	r1, [r7, #4]
 8009356:	4613      	mov	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4413      	add	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	440b      	add	r3, r1
 8009360:	331c      	adds	r3, #28
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d029      	beq.n	80093bc <USBD_CDC_DataIn+0x90>
 8009368:	78fa      	ldrb	r2, [r7, #3]
 800936a:	6879      	ldr	r1, [r7, #4]
 800936c:	4613      	mov	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	4413      	add	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	440b      	add	r3, r1
 8009376:	331c      	adds	r3, #28
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	78f9      	ldrb	r1, [r7, #3]
 800937c:	68b8      	ldr	r0, [r7, #8]
 800937e:	460b      	mov	r3, r1
 8009380:	00db      	lsls	r3, r3, #3
 8009382:	1a5b      	subs	r3, r3, r1
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4403      	add	r3, r0
 8009388:	3344      	adds	r3, #68	; 0x44
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009390:	fb03 f301 	mul.w	r3, r3, r1
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d110      	bne.n	80093bc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800939a:	78fa      	ldrb	r2, [r7, #3]
 800939c:	6879      	ldr	r1, [r7, #4]
 800939e:	4613      	mov	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	440b      	add	r3, r1
 80093a8:	331c      	adds	r3, #28
 80093aa:	2200      	movs	r2, #0
 80093ac:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80093ae:	78f9      	ldrb	r1, [r7, #3]
 80093b0:	2300      	movs	r3, #0
 80093b2:	2200      	movs	r2, #0
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f005 fe14 	bl	800efe2 <USBD_LL_Transmit>
 80093ba:	e003      	b.n	80093c4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	e000      	b.n	80093ca <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80093c8:	2302      	movs	r3, #2
  }
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b084      	sub	sp, #16
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
 80093da:	460b      	mov	r3, r1
 80093dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80093e4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80093e6:	78fb      	ldrb	r3, [r7, #3]
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f005 fe3f 	bl	800f06e <USBD_LL_GetRxDataSize>
 80093f0:	4602      	mov	r2, r0
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00d      	beq.n	800941e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009416:	4611      	mov	r1, r2
 8009418:	4798      	blx	r3

    return USBD_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	e000      	b.n	8009420 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800941e:	2302      	movs	r3, #2
  }
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009436:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800943e:	2b00      	cmp	r3, #0
 8009440:	d015      	beq.n	800946e <USBD_CDC_EP0_RxReady+0x46>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009448:	2bff      	cmp	r3, #255	; 0xff
 800944a:	d010      	beq.n	800946e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800945a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009462:	b292      	uxth	r2, r2
 8009464:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	22ff      	movs	r2, #255	; 0xff
 800946a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2243      	movs	r2, #67	; 0x43
 8009484:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009486:	4b03      	ldr	r3, [pc, #12]	; (8009494 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009488:	4618      	mov	r0, r3
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr
 8009494:	20000090 	.word	0x20000090

08009498 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2243      	movs	r2, #67	; 0x43
 80094a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80094a6:	4b03      	ldr	r3, [pc, #12]	; (80094b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	2000004c 	.word	0x2000004c

080094b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2243      	movs	r2, #67	; 0x43
 80094c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80094c6:	4b03      	ldr	r3, [pc, #12]	; (80094d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr
 80094d4:	200000d4 	.word	0x200000d4

080094d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	220a      	movs	r2, #10
 80094e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80094e6:	4b03      	ldr	r3, [pc, #12]	; (80094f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr
 80094f4:	20000008 	.word	0x20000008

080094f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009502:	2302      	movs	r3, #2
 8009504:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d005      	beq.n	8009518 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8009514:	2300      	movs	r3, #0
 8009516:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009518:	7bfb      	ldrb	r3, [r7, #15]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8009526:	b480      	push	{r7}
 8009528:	b087      	sub	sp, #28
 800952a:	af00      	add	r7, sp, #0
 800952c:	60f8      	str	r0, [r7, #12]
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	4613      	mov	r3, r2
 8009532:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800953a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009544:	88fa      	ldrh	r2, [r7, #6]
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	371c      	adds	r7, #28
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800955a:	b480      	push	{r7}
 800955c:	b085      	sub	sp, #20
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800956a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b084      	sub	sp, #16
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009590:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009598:	2b00      	cmp	r3, #0
 800959a:	d01c      	beq.n	80095d6 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d115      	bne.n	80095d2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	2181      	movs	r1, #129	; 0x81
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f005 fd0a 	bl	800efe2 <USBD_LL_Transmit>

      return USBD_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	e002      	b.n	80095d8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e000      	b.n	80095d8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80095d6:	2302      	movs	r3, #2
  }
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d017      	beq.n	800962a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	7c1b      	ldrb	r3, [r3, #16]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d109      	bne.n	8009616 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800960c:	2101      	movs	r1, #1
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f005 fd0a 	bl	800f028 <USBD_LL_PrepareReceive>
 8009614:	e007      	b.n	8009626 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800961c:	2340      	movs	r3, #64	; 0x40
 800961e:	2101      	movs	r1, #1
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f005 fd01 	bl	800f028 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	e000      	b.n	800962c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800962a:	2302      	movs	r3, #2
  }
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	4613      	mov	r3, r2
 8009640:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d101      	bne.n	800964c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009648:	2302      	movs	r3, #2
 800964a:	e01a      	b.n	8009682 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d003      	beq.n	800966c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	79fa      	ldrb	r2, [r7, #7]
 8009678:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f005 fb7c 	bl	800ed78 <USBD_LL_Init>

  return USBD_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800968a:	b480      	push	{r7}
 800968c:	b085      	sub	sp, #20
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8009694:	2300      	movs	r3, #0
 8009696:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d006      	beq.n	80096ac <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	683a      	ldr	r2, [r7, #0]
 80096a2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80096a6:	2300      	movs	r3, #0
 80096a8:	73fb      	strb	r3, [r7, #15]
 80096aa:	e001      	b.n	80096b0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80096ac:	2302      	movs	r3, #2
 80096ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b082      	sub	sp, #8
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f005 fba2 	bl	800ee10 <USBD_LL_Start>

  return USBD_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80096d6:	b480      	push	{r7}
 80096d8:	b083      	sub	sp, #12
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	460b      	mov	r3, r1
 80096f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80096f8:	2302      	movs	r3, #2
 80096fa:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00c      	beq.n	8009720 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	78fa      	ldrb	r2, [r7, #3]
 8009710:	4611      	mov	r1, r2
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	4798      	blx	r3
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d101      	bne.n	8009720 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800971c:	2300      	movs	r3, #0
 800971e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009720:	7bfb      	ldrb	r3, [r7, #15]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b082      	sub	sp, #8
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	460b      	mov	r3, r1
 8009734:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	78fa      	ldrb	r2, [r7, #3]
 8009740:	4611      	mov	r1, r2
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	4798      	blx	r3
  return USBD_OK;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009760:	6839      	ldr	r1, [r7, #0]
 8009762:	4618      	mov	r0, r3
 8009764:	f000 fe94 	bl	800a490 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8009776:	461a      	mov	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8009784:	f003 031f 	and.w	r3, r3, #31
 8009788:	2b01      	cmp	r3, #1
 800978a:	d00c      	beq.n	80097a6 <USBD_LL_SetupStage+0x56>
 800978c:	2b01      	cmp	r3, #1
 800978e:	d302      	bcc.n	8009796 <USBD_LL_SetupStage+0x46>
 8009790:	2b02      	cmp	r3, #2
 8009792:	d010      	beq.n	80097b6 <USBD_LL_SetupStage+0x66>
 8009794:	e017      	b.n	80097c6 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800979c:	4619      	mov	r1, r3
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fa04 	bl	8009bac <USBD_StdDevReq>
    break;
 80097a4:	e01a      	b.n	80097dc <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fa66 	bl	8009c80 <USBD_StdItfReq>
    break;
 80097b4:	e012      	b.n	80097dc <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80097bc:	4619      	mov	r1, r3
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 faa4 	bl	8009d0c <USBD_StdEPReq>
    break;
 80097c4:	e00a      	b.n	80097dc <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80097cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	4619      	mov	r1, r3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f005 fb7b 	bl	800eed0 <USBD_LL_StallEP>
    break;
 80097da:	bf00      	nop
  }

  return USBD_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b086      	sub	sp, #24
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	60f8      	str	r0, [r7, #12]
 80097ee:	460b      	mov	r3, r1
 80097f0:	607a      	str	r2, [r7, #4]
 80097f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80097f4:	7afb      	ldrb	r3, [r7, #11]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d14b      	bne.n	8009892 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009800:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8009808:	2b03      	cmp	r3, #3
 800980a:	d134      	bne.n	8009876 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	68da      	ldr	r2, [r3, #12]
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	429a      	cmp	r2, r3
 8009816:	d919      	bls.n	800984c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	68da      	ldr	r2, [r3, #12]
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	1ad2      	subs	r2, r2, r3
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	68da      	ldr	r2, [r3, #12]
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800982e:	429a      	cmp	r2, r3
 8009830:	d203      	bcs.n	800983a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8009836:	b29b      	uxth	r3, r3
 8009838:	e002      	b.n	8009840 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800983e:	b29b      	uxth	r3, r3
 8009840:	461a      	mov	r2, r3
 8009842:	6879      	ldr	r1, [r7, #4]
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 ff17 	bl	800a678 <USBD_CtlContinueRx>
 800984a:	e038      	b.n	80098be <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00a      	beq.n	800986e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800985e:	2b03      	cmp	r3, #3
 8009860:	d105      	bne.n	800986e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 ff14 	bl	800a69c <USBD_CtlSendStatus>
 8009874:	e023      	b.n	80098be <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800987c:	2b05      	cmp	r3, #5
 800987e:	d11e      	bne.n	80098be <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8009888:	2100      	movs	r1, #0
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f005 fb20 	bl	800eed0 <USBD_LL_StallEP>
 8009890:	e015      	b.n	80098be <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00d      	beq.n	80098ba <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80098a4:	2b03      	cmp	r3, #3
 80098a6:	d108      	bne.n	80098ba <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	7afa      	ldrb	r2, [r7, #11]
 80098b2:	4611      	mov	r1, r2
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	4798      	blx	r3
 80098b8:	e001      	b.n	80098be <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80098ba:	2302      	movs	r3, #2
 80098bc:	e000      	b.n	80098c0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3718      	adds	r7, #24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	460b      	mov	r3, r1
 80098d2:	607a      	str	r2, [r7, #4]
 80098d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80098d6:	7afb      	ldrb	r3, [r7, #11]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d17f      	bne.n	80099dc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	3314      	adds	r3, #20
 80098e0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d15c      	bne.n	80099a6 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	68da      	ldr	r2, [r3, #12]
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d915      	bls.n	8009924 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	68da      	ldr	r2, [r3, #12]
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	1ad2      	subs	r2, r2, r3
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	b29b      	uxth	r3, r3
 800990c:	461a      	mov	r2, r3
 800990e:	6879      	ldr	r1, [r7, #4]
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f000 fe81 	bl	800a618 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009916:	2300      	movs	r3, #0
 8009918:	2200      	movs	r2, #0
 800991a:	2100      	movs	r1, #0
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f005 fb83 	bl	800f028 <USBD_LL_PrepareReceive>
 8009922:	e04e      	b.n	80099c2 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	6912      	ldr	r2, [r2, #16]
 800992c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009930:	fb02 f201 	mul.w	r2, r2, r1
 8009934:	1a9b      	subs	r3, r3, r2
 8009936:	2b00      	cmp	r3, #0
 8009938:	d11c      	bne.n	8009974 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	689a      	ldr	r2, [r3, #8]
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8009942:	429a      	cmp	r2, r3
 8009944:	d316      	bcc.n	8009974 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	689a      	ldr	r2, [r3, #8]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8009950:	429a      	cmp	r2, r3
 8009952:	d20f      	bcs.n	8009974 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009954:	2200      	movs	r2, #0
 8009956:	2100      	movs	r1, #0
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 fe5d 	bl	800a618 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8009966:	2300      	movs	r3, #0
 8009968:	2200      	movs	r2, #0
 800996a:	2100      	movs	r1, #0
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f005 fb5b 	bl	800f028 <USBD_LL_PrepareReceive>
 8009972:	e026      	b.n	80099c2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00a      	beq.n	8009996 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8009986:	2b03      	cmp	r3, #3
 8009988:	d105      	bne.n	8009996 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009996:	2180      	movs	r1, #128	; 0x80
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f005 fa99 	bl	800eed0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 fe8f 	bl	800a6c2 <USBD_CtlReceiveStatus>
 80099a4:	e00d      	b.n	80099c2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80099ac:	2b04      	cmp	r3, #4
 80099ae:	d004      	beq.n	80099ba <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d103      	bne.n	80099c2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80099ba:	2180      	movs	r1, #128	; 0x80
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f005 fa87 	bl	800eed0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d11d      	bne.n	8009a08 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f7ff fe82 	bl	80096d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80099da:	e015      	b.n	8009a08 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80099e2:	695b      	ldr	r3, [r3, #20]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00d      	beq.n	8009a04 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d108      	bne.n	8009a04 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	7afa      	ldrb	r2, [r7, #11]
 80099fc:	4611      	mov	r1, r2
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	4798      	blx	r3
 8009a02:	e001      	b.n	8009a08 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009a04:	2302      	movs	r3, #2
 8009a06:	e000      	b.n	8009a0a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3718      	adds	r7, #24
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b082      	sub	sp, #8
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a1a:	2340      	movs	r3, #64	; 0x40
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2100      	movs	r1, #0
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f005 fa10 	bl	800ee46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2240      	movs	r2, #64	; 0x40
 8009a32:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a36:	2340      	movs	r3, #64	; 0x40
 8009a38:	2200      	movs	r2, #0
 8009a3a:	2180      	movs	r1, #128	; 0x80
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f005 fa02 	bl	800ee46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2240      	movs	r2, #64	; 0x40
 8009a4c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2201      	movs	r2, #1
 8009a52:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d009      	beq.n	8009a8a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	6852      	ldr	r2, [r2, #4]
 8009a82:	b2d2      	uxtb	r2, r2
 8009a84:	4611      	mov	r1, r2
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	4798      	blx	r3
  }

  return USBD_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	78fa      	ldrb	r2, [r7, #3]
 8009aa4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2204      	movs	r2, #4
 8009acc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b083      	sub	sp, #12
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d10b      	bne.n	8009b2a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009b18:	69db      	ldr	r3, [r3, #28]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d005      	beq.n	8009b2a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr

08009b4e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8009b4e:	b480      	push	{r7}
 8009b50:	b083      	sub	sp, #12
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
 8009b56:	460b      	mov	r3, r1
 8009b58:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr

08009b7e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b082      	sub	sp, #8
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	6852      	ldr	r2, [r2, #4]
 8009b9a:	b2d2      	uxtb	r2, r2
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	4798      	blx	r3

  return USBD_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bc2:	2b20      	cmp	r3, #32
 8009bc4:	d004      	beq.n	8009bd0 <USBD_StdDevReq+0x24>
 8009bc6:	2b40      	cmp	r3, #64	; 0x40
 8009bc8:	d002      	beq.n	8009bd0 <USBD_StdDevReq+0x24>
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d008      	beq.n	8009be0 <USBD_StdDevReq+0x34>
 8009bce:	e04c      	b.n	8009c6a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	4798      	blx	r3
    break;
 8009bde:	e049      	b.n	8009c74 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	785b      	ldrb	r3, [r3, #1]
 8009be4:	2b09      	cmp	r3, #9
 8009be6:	d83a      	bhi.n	8009c5e <USBD_StdDevReq+0xb2>
 8009be8:	a201      	add	r2, pc, #4	; (adr r2, 8009bf0 <USBD_StdDevReq+0x44>)
 8009bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bee:	bf00      	nop
 8009bf0:	08009c41 	.word	0x08009c41
 8009bf4:	08009c55 	.word	0x08009c55
 8009bf8:	08009c5f 	.word	0x08009c5f
 8009bfc:	08009c4b 	.word	0x08009c4b
 8009c00:	08009c5f 	.word	0x08009c5f
 8009c04:	08009c23 	.word	0x08009c23
 8009c08:	08009c19 	.word	0x08009c19
 8009c0c:	08009c5f 	.word	0x08009c5f
 8009c10:	08009c37 	.word	0x08009c37
 8009c14:	08009c2d 	.word	0x08009c2d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8009c18:	6839      	ldr	r1, [r7, #0]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 f9d2 	bl	8009fc4 <USBD_GetDescriptor>
      break;
 8009c20:	e022      	b.n	8009c68 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8009c22:	6839      	ldr	r1, [r7, #0]
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fac7 	bl	800a1b8 <USBD_SetAddress>
      break;
 8009c2a:	e01d      	b.n	8009c68 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fb04 	bl	800a23c <USBD_SetConfig>
      break;
 8009c34:	e018      	b.n	8009c68 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fb8d 	bl	800a358 <USBD_GetConfig>
      break;
 8009c3e:	e013      	b.n	8009c68 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fbbc 	bl	800a3c0 <USBD_GetStatus>
      break;
 8009c48:	e00e      	b.n	8009c68 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fbea 	bl	800a426 <USBD_SetFeature>
      break;
 8009c52:	e009      	b.n	8009c68 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8009c54:	6839      	ldr	r1, [r7, #0]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fbf9 	bl	800a44e <USBD_ClrFeature>
      break;
 8009c5c:	e004      	b.n	8009c68 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8009c5e:	6839      	ldr	r1, [r7, #0]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fc52 	bl	800a50a <USBD_CtlError>
      break;
 8009c66:	bf00      	nop
    }
    break;
 8009c68:	e004      	b.n	8009c74 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fc4c 	bl	800a50a <USBD_CtlError>
    break;
 8009c72:	bf00      	nop
  }

  return ret;
 8009c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop

08009c80 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c96:	2b20      	cmp	r3, #32
 8009c98:	d003      	beq.n	8009ca2 <USBD_StdItfReq+0x22>
 8009c9a:	2b40      	cmp	r3, #64	; 0x40
 8009c9c:	d001      	beq.n	8009ca2 <USBD_StdItfReq+0x22>
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d12a      	bne.n	8009cf8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d81d      	bhi.n	8009cea <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	889b      	ldrh	r3, [r3, #4]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d813      	bhi.n	8009ce0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	6839      	ldr	r1, [r7, #0]
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	4798      	blx	r3
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	88db      	ldrh	r3, [r3, #6]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d110      	bne.n	8009cf4 <USBD_StdItfReq+0x74>
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10d      	bne.n	8009cf4 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fcdf 	bl	800a69c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009cde:	e009      	b.n	8009cf4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fc11 	bl	800a50a <USBD_CtlError>
      break;
 8009ce8:	e004      	b.n	8009cf4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8009cea:	6839      	ldr	r1, [r7, #0]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 fc0c 	bl	800a50a <USBD_CtlError>
      break;
 8009cf2:	e000      	b.n	8009cf6 <USBD_StdItfReq+0x76>
      break;
 8009cf4:	bf00      	nop
    }
    break;
 8009cf6:	e004      	b.n	8009d02 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fc05 	bl	800a50a <USBD_CtlError>
    break;
 8009d00:	bf00      	nop
  }

  return USBD_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	889b      	ldrh	r3, [r3, #4]
 8009d1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d28:	2b20      	cmp	r3, #32
 8009d2a:	d004      	beq.n	8009d36 <USBD_StdEPReq+0x2a>
 8009d2c:	2b40      	cmp	r3, #64	; 0x40
 8009d2e:	d002      	beq.n	8009d36 <USBD_StdEPReq+0x2a>
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d008      	beq.n	8009d46 <USBD_StdEPReq+0x3a>
 8009d34:	e13b      	b.n	8009fae <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	6839      	ldr	r1, [r7, #0]
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	4798      	blx	r3
    break;
 8009d44:	e138      	b.n	8009fb8 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d4e:	2b20      	cmp	r3, #32
 8009d50:	d10a      	bne.n	8009d68 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	4798      	blx	r3
 8009d60:	4603      	mov	r3, r0
 8009d62:	73fb      	strb	r3, [r7, #15]

      return ret;
 8009d64:	7bfb      	ldrb	r3, [r7, #15]
 8009d66:	e128      	b.n	8009fba <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	785b      	ldrb	r3, [r3, #1]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d03e      	beq.n	8009dee <USBD_StdEPReq+0xe2>
 8009d70:	2b03      	cmp	r3, #3
 8009d72:	d002      	beq.n	8009d7a <USBD_StdEPReq+0x6e>
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d070      	beq.n	8009e5a <USBD_StdEPReq+0x14e>
 8009d78:	e113      	b.n	8009fa2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d002      	beq.n	8009d8a <USBD_StdEPReq+0x7e>
 8009d84:	2b03      	cmp	r3, #3
 8009d86:	d015      	beq.n	8009db4 <USBD_StdEPReq+0xa8>
 8009d88:	e02b      	b.n	8009de2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d8a:	7bbb      	ldrb	r3, [r7, #14]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00c      	beq.n	8009daa <USBD_StdEPReq+0x9e>
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
 8009d92:	2b80      	cmp	r3, #128	; 0x80
 8009d94:	d009      	beq.n	8009daa <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8009d96:	7bbb      	ldrb	r3, [r7, #14]
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f005 f898 	bl	800eed0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009da0:	2180      	movs	r1, #128	; 0x80
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f005 f894 	bl	800eed0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009da8:	e020      	b.n	8009dec <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fbac 	bl	800a50a <USBD_CtlError>
        break;
 8009db2:	e01b      	b.n	8009dec <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	885b      	ldrh	r3, [r3, #2]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10e      	bne.n	8009dda <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00b      	beq.n	8009dda <USBD_StdEPReq+0xce>
 8009dc2:	7bbb      	ldrb	r3, [r7, #14]
 8009dc4:	2b80      	cmp	r3, #128	; 0x80
 8009dc6:	d008      	beq.n	8009dda <USBD_StdEPReq+0xce>
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	88db      	ldrh	r3, [r3, #6]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d104      	bne.n	8009dda <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f005 f87b 	bl	800eed0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fc5e 	bl	800a69c <USBD_CtlSendStatus>

        break;
 8009de0:	e004      	b.n	8009dec <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fb90 	bl	800a50a <USBD_CtlError>
        break;
 8009dea:	bf00      	nop
      }
      break;
 8009dec:	e0de      	b.n	8009fac <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	d002      	beq.n	8009dfe <USBD_StdEPReq+0xf2>
 8009df8:	2b03      	cmp	r3, #3
 8009dfa:	d015      	beq.n	8009e28 <USBD_StdEPReq+0x11c>
 8009dfc:	e026      	b.n	8009e4c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00c      	beq.n	8009e1e <USBD_StdEPReq+0x112>
 8009e04:	7bbb      	ldrb	r3, [r7, #14]
 8009e06:	2b80      	cmp	r3, #128	; 0x80
 8009e08:	d009      	beq.n	8009e1e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8009e0a:	7bbb      	ldrb	r3, [r7, #14]
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f005 f85e 	bl	800eed0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8009e14:	2180      	movs	r1, #128	; 0x80
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f005 f85a 	bl	800eed0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009e1c:	e01c      	b.n	8009e58 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8009e1e:	6839      	ldr	r1, [r7, #0]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fb72 	bl	800a50a <USBD_CtlError>
        break;
 8009e26:	e017      	b.n	8009e58 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	885b      	ldrh	r3, [r3, #2]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d112      	bne.n	8009e56 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009e30:	7bbb      	ldrb	r3, [r7, #14]
 8009e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d004      	beq.n	8009e44 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f005 f865 	bl	800ef0e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fc29 	bl	800a69c <USBD_CtlSendStatus>
        }
        break;
 8009e4a:	e004      	b.n	8009e56 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8009e4c:	6839      	ldr	r1, [r7, #0]
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fb5b 	bl	800a50a <USBD_CtlError>
        break;
 8009e54:	e000      	b.n	8009e58 <USBD_StdEPReq+0x14c>
        break;
 8009e56:	bf00      	nop
      }
      break;
 8009e58:	e0a8      	b.n	8009fac <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	d002      	beq.n	8009e6a <USBD_StdEPReq+0x15e>
 8009e64:	2b03      	cmp	r3, #3
 8009e66:	d031      	beq.n	8009ecc <USBD_StdEPReq+0x1c0>
 8009e68:	e095      	b.n	8009f96 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e6a:	7bbb      	ldrb	r3, [r7, #14]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d007      	beq.n	8009e80 <USBD_StdEPReq+0x174>
 8009e70:	7bbb      	ldrb	r3, [r7, #14]
 8009e72:	2b80      	cmp	r3, #128	; 0x80
 8009e74:	d004      	beq.n	8009e80 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8009e76:	6839      	ldr	r1, [r7, #0]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fb46 	bl	800a50a <USBD_CtlError>
          break;
 8009e7e:	e08f      	b.n	8009fa0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009e80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	da0b      	bge.n	8009ea0 <USBD_StdEPReq+0x194>
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e8e:	4613      	mov	r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	4413      	add	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	3310      	adds	r3, #16
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	e00a      	b.n	8009eb6 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	2202      	movs	r2, #2
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fb8b 	bl	800a5e0 <USBD_CtlSendData>
          break;
 8009eca:	e069      	b.n	8009fa0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8009ecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	da11      	bge.n	8009ef8 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ed4:	7bbb      	ldrb	r3, [r7, #14]
 8009ed6:	f003 020f 	and.w	r2, r3, #15
 8009eda:	6879      	ldr	r1, [r7, #4]
 8009edc:	4613      	mov	r3, r2
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	4413      	add	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	440b      	add	r3, r1
 8009ee6:	3318      	adds	r3, #24
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d117      	bne.n	8009f1e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fb0a 	bl	800a50a <USBD_CtlError>
            break;
 8009ef6:	e053      	b.n	8009fa0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ef8:	7bbb      	ldrb	r3, [r7, #14]
 8009efa:	f003 020f 	and.w	r2, r3, #15
 8009efe:	6879      	ldr	r1, [r7, #4]
 8009f00:	4613      	mov	r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	4413      	add	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	440b      	add	r3, r1
 8009f0a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d104      	bne.n	8009f1e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 faf7 	bl	800a50a <USBD_CtlError>
            break;
 8009f1c:	e040      	b.n	8009fa0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009f1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	da0b      	bge.n	8009f3e <USBD_StdEPReq+0x232>
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	4413      	add	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	3310      	adds	r3, #16
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	4413      	add	r3, r2
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	e00a      	b.n	8009f54 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8009f3e:	7bbb      	ldrb	r3, [r7, #14]
 8009f40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8009f44:	4613      	mov	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	4413      	add	r3, r2
 8009f54:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f56:	7bbb      	ldrb	r3, [r7, #14]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <USBD_StdEPReq+0x256>
 8009f5c:	7bbb      	ldrb	r3, [r7, #14]
 8009f5e:	2b80      	cmp	r3, #128	; 0x80
 8009f60:	d103      	bne.n	8009f6a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2200      	movs	r2, #0
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	e00e      	b.n	8009f88 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8009f6a:	7bbb      	ldrb	r3, [r7, #14]
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f004 ffec 	bl	800ef4c <USBD_LL_IsStallEP>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d003      	beq.n	8009f82 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	601a      	str	r2, [r3, #0]
 8009f80:	e002      	b.n	8009f88 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2200      	movs	r2, #0
 8009f86:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fb26 	bl	800a5e0 <USBD_CtlSendData>
          break;
 8009f94:	e004      	b.n	8009fa0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8009f96:	6839      	ldr	r1, [r7, #0]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 fab6 	bl	800a50a <USBD_CtlError>
        break;
 8009f9e:	bf00      	nop
      }
      break;
 8009fa0:	e004      	b.n	8009fac <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8009fa2:	6839      	ldr	r1, [r7, #0]
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 fab0 	bl	800a50a <USBD_CtlError>
      break;
 8009faa:	bf00      	nop
    }
    break;
 8009fac:	e004      	b.n	8009fb8 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 faaa 	bl	800a50a <USBD_CtlError>
    break;
 8009fb6:	bf00      	nop
  }

  return ret;
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	885b      	ldrh	r3, [r3, #2]
 8009fd2:	0a1b      	lsrs	r3, r3, #8
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	2b06      	cmp	r3, #6
 8009fda:	f200 80c9 	bhi.w	800a170 <USBD_GetDescriptor+0x1ac>
 8009fde:	a201      	add	r2, pc, #4	; (adr r2, 8009fe4 <USBD_GetDescriptor+0x20>)
 8009fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe4:	0800a001 	.word	0x0800a001
 8009fe8:	0800a019 	.word	0x0800a019
 8009fec:	0800a059 	.word	0x0800a059
 8009ff0:	0800a171 	.word	0x0800a171
 8009ff4:	0800a171 	.word	0x0800a171
 8009ff8:	0800a11d 	.word	0x0800a11d
 8009ffc:	0800a143 	.word	0x0800a143
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	7c12      	ldrb	r2, [r2, #16]
 800a00c:	f107 010a 	add.w	r1, r7, #10
 800a010:	4610      	mov	r0, r2
 800a012:	4798      	blx	r3
 800a014:	60f8      	str	r0, [r7, #12]
    break;
 800a016:	e0b0      	b.n	800a17a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	7c1b      	ldrb	r3, [r3, #16]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10d      	bne.n	800a03c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a028:	f107 020a 	add.w	r2, r7, #10
 800a02c:	4610      	mov	r0, r2
 800a02e:	4798      	blx	r3
 800a030:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	3301      	adds	r3, #1
 800a036:	2202      	movs	r2, #2
 800a038:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a03a:	e09e      	b.n	800a17a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a044:	f107 020a 	add.w	r2, r7, #10
 800a048:	4610      	mov	r0, r2
 800a04a:	4798      	blx	r3
 800a04c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	3301      	adds	r3, #1
 800a052:	2202      	movs	r2, #2
 800a054:	701a      	strb	r2, [r3, #0]
    break;
 800a056:	e090      	b.n	800a17a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	885b      	ldrh	r3, [r3, #2]
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b05      	cmp	r3, #5
 800a060:	d856      	bhi.n	800a110 <USBD_GetDescriptor+0x14c>
 800a062:	a201      	add	r2, pc, #4	; (adr r2, 800a068 <USBD_GetDescriptor+0xa4>)
 800a064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a068:	0800a081 	.word	0x0800a081
 800a06c:	0800a099 	.word	0x0800a099
 800a070:	0800a0b1 	.word	0x0800a0b1
 800a074:	0800a0c9 	.word	0x0800a0c9
 800a078:	0800a0e1 	.word	0x0800a0e1
 800a07c:	0800a0f9 	.word	0x0800a0f9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	7c12      	ldrb	r2, [r2, #16]
 800a08c:	f107 010a 	add.w	r1, r7, #10
 800a090:	4610      	mov	r0, r2
 800a092:	4798      	blx	r3
 800a094:	60f8      	str	r0, [r7, #12]
      break;
 800a096:	e040      	b.n	800a11a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	7c12      	ldrb	r2, [r2, #16]
 800a0a4:	f107 010a 	add.w	r1, r7, #10
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	4798      	blx	r3
 800a0ac:	60f8      	str	r0, [r7, #12]
      break;
 800a0ae:	e034      	b.n	800a11a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	7c12      	ldrb	r2, [r2, #16]
 800a0bc:	f107 010a 	add.w	r1, r7, #10
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	4798      	blx	r3
 800a0c4:	60f8      	str	r0, [r7, #12]
      break;
 800a0c6:	e028      	b.n	800a11a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	7c12      	ldrb	r2, [r2, #16]
 800a0d4:	f107 010a 	add.w	r1, r7, #10
 800a0d8:	4610      	mov	r0, r2
 800a0da:	4798      	blx	r3
 800a0dc:	60f8      	str	r0, [r7, #12]
      break;
 800a0de:	e01c      	b.n	800a11a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a0e6:	695b      	ldr	r3, [r3, #20]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	7c12      	ldrb	r2, [r2, #16]
 800a0ec:	f107 010a 	add.w	r1, r7, #10
 800a0f0:	4610      	mov	r0, r2
 800a0f2:	4798      	blx	r3
 800a0f4:	60f8      	str	r0, [r7, #12]
      break;
 800a0f6:	e010      	b.n	800a11a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	7c12      	ldrb	r2, [r2, #16]
 800a104:	f107 010a 	add.w	r1, r7, #10
 800a108:	4610      	mov	r0, r2
 800a10a:	4798      	blx	r3
 800a10c:	60f8      	str	r0, [r7, #12]
      break;
 800a10e:	e004      	b.n	800a11a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f9f9 	bl	800a50a <USBD_CtlError>
      return;
 800a118:	e04b      	b.n	800a1b2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800a11a:	e02e      	b.n	800a17a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	7c1b      	ldrb	r3, [r3, #16]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d109      	bne.n	800a138 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a12a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a12c:	f107 020a 	add.w	r2, r7, #10
 800a130:	4610      	mov	r0, r2
 800a132:	4798      	blx	r3
 800a134:	60f8      	str	r0, [r7, #12]
      break;
 800a136:	e020      	b.n	800a17a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f9e5 	bl	800a50a <USBD_CtlError>
      return;
 800a140:	e037      	b.n	800a1b2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	7c1b      	ldrb	r3, [r3, #16]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10d      	bne.n	800a166 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a152:	f107 020a 	add.w	r2, r7, #10
 800a156:	4610      	mov	r0, r2
 800a158:	4798      	blx	r3
 800a15a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	3301      	adds	r3, #1
 800a160:	2207      	movs	r2, #7
 800a162:	701a      	strb	r2, [r3, #0]
      break;
 800a164:	e009      	b.n	800a17a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800a166:	6839      	ldr	r1, [r7, #0]
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f9ce 	bl	800a50a <USBD_CtlError>
      return;
 800a16e:	e020      	b.n	800a1b2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800a170:	6839      	ldr	r1, [r7, #0]
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f9c9 	bl	800a50a <USBD_CtlError>
    return;
 800a178:	e01b      	b.n	800a1b2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800a17a:	897b      	ldrh	r3, [r7, #10]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d011      	beq.n	800a1a4 <USBD_GetDescriptor+0x1e0>
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	88db      	ldrh	r3, [r3, #6]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00d      	beq.n	800a1a4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	88da      	ldrh	r2, [r3, #6]
 800a18c:	897b      	ldrh	r3, [r7, #10]
 800a18e:	4293      	cmp	r3, r2
 800a190:	bf28      	it	cs
 800a192:	4613      	movcs	r3, r2
 800a194:	b29b      	uxth	r3, r3
 800a196:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800a198:	897b      	ldrh	r3, [r7, #10]
 800a19a:	461a      	mov	r2, r3
 800a19c:	68f9      	ldr	r1, [r7, #12]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fa1e 	bl	800a5e0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	88db      	ldrh	r3, [r3, #6]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d102      	bne.n	800a1b2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 fa75 	bl	800a69c <USBD_CtlSendStatus>
  }
}
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	889b      	ldrh	r3, [r3, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d130      	bne.n	800a22c <USBD_SetAddress+0x74>
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	88db      	ldrh	r3, [r3, #6]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d12c      	bne.n	800a22c <USBD_SetAddress+0x74>
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	885b      	ldrh	r3, [r3, #2]
 800a1d6:	2b7f      	cmp	r3, #127	; 0x7f
 800a1d8:	d828      	bhi.n	800a22c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	885b      	ldrh	r3, [r3, #2]
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a1ec:	2b03      	cmp	r3, #3
 800a1ee:	d104      	bne.n	800a1fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800a1f0:	6839      	ldr	r1, [r7, #0]
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f989 	bl	800a50a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f8:	e01c      	b.n	800a234 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	7bfa      	ldrb	r2, [r7, #15]
 800a1fe:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a202:	7bfb      	ldrb	r3, [r7, #15]
 800a204:	4619      	mov	r1, r3
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f004 fecc 	bl	800efa4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fa45 	bl	800a69c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a212:	7bfb      	ldrb	r3, [r7, #15]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d004      	beq.n	800a222 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2202      	movs	r2, #2
 800a21c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a220:	e008      	b.n	800a234 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2201      	movs	r2, #1
 800a226:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a22a:	e003      	b.n	800a234 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f96b 	bl	800a50a <USBD_CtlError>
  }
}
 800a234:	bf00      	nop
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	885b      	ldrh	r3, [r3, #2]
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	4b41      	ldr	r3, [pc, #260]	; (800a354 <USBD_SetConfig+0x118>)
 800a24e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a250:	4b40      	ldr	r3, [pc, #256]	; (800a354 <USBD_SetConfig+0x118>)
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d904      	bls.n	800a262 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 f955 	bl	800a50a <USBD_CtlError>
 800a260:	e075      	b.n	800a34e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d002      	beq.n	800a272 <USBD_SetConfig+0x36>
 800a26c:	2b03      	cmp	r3, #3
 800a26e:	d023      	beq.n	800a2b8 <USBD_SetConfig+0x7c>
 800a270:	e062      	b.n	800a338 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800a272:	4b38      	ldr	r3, [pc, #224]	; (800a354 <USBD_SetConfig+0x118>)
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d01a      	beq.n	800a2b0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800a27a:	4b36      	ldr	r3, [pc, #216]	; (800a354 <USBD_SetConfig+0x118>)
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	461a      	mov	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2203      	movs	r2, #3
 800a288:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a28c:	4b31      	ldr	r3, [pc, #196]	; (800a354 <USBD_SetConfig+0x118>)
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	4619      	mov	r1, r3
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f7ff fa2a 	bl	80096ec <USBD_SetClassConfig>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d104      	bne.n	800a2a8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800a29e:	6839      	ldr	r1, [r7, #0]
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 f932 	bl	800a50a <USBD_CtlError>
          return;
 800a2a6:	e052      	b.n	800a34e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 f9f7 	bl	800a69c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800a2ae:	e04e      	b.n	800a34e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f9f3 	bl	800a69c <USBD_CtlSendStatus>
      break;
 800a2b6:	e04a      	b.n	800a34e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a2b8:	4b26      	ldr	r3, [pc, #152]	; (800a354 <USBD_SetConfig+0x118>)
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d112      	bne.n	800a2e6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800a2c8:	4b22      	ldr	r3, [pc, #136]	; (800a354 <USBD_SetConfig+0x118>)
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800a2d2:	4b20      	ldr	r3, [pc, #128]	; (800a354 <USBD_SetConfig+0x118>)
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f7ff fa26 	bl	800972a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f9dc 	bl	800a69c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800a2e4:	e033      	b.n	800a34e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800a2e6:	4b1b      	ldr	r3, [pc, #108]	; (800a354 <USBD_SetConfig+0x118>)
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d01d      	beq.n	800a330 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff fa14 	bl	800972a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a302:	4b14      	ldr	r3, [pc, #80]	; (800a354 <USBD_SetConfig+0x118>)
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	461a      	mov	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a30c:	4b11      	ldr	r3, [pc, #68]	; (800a354 <USBD_SetConfig+0x118>)
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	4619      	mov	r1, r3
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f7ff f9ea 	bl	80096ec <USBD_SetClassConfig>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d104      	bne.n	800a328 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800a31e:	6839      	ldr	r1, [r7, #0]
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 f8f2 	bl	800a50a <USBD_CtlError>
          return;
 800a326:	e012      	b.n	800a34e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 f9b7 	bl	800a69c <USBD_CtlSendStatus>
      break;
 800a32e:	e00e      	b.n	800a34e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 f9b3 	bl	800a69c <USBD_CtlSendStatus>
      break;
 800a336:	e00a      	b.n	800a34e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800a338:	6839      	ldr	r1, [r7, #0]
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f8e5 	bl	800a50a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800a340:	4b04      	ldr	r3, [pc, #16]	; (800a354 <USBD_SetConfig+0x118>)
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	4619      	mov	r1, r3
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7ff f9ef 	bl	800972a <USBD_ClrClassConfig>
      break;
 800a34c:	bf00      	nop
    }
  }
}
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	20000770 	.word	0x20000770

0800a358 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	88db      	ldrh	r3, [r3, #6]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d004      	beq.n	800a374 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800a36a:	6839      	ldr	r1, [r7, #0]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f8cc 	bl	800a50a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800a372:	e021      	b.n	800a3b8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	db17      	blt.n	800a3ae <USBD_GetConfig+0x56>
 800a37e:	2b02      	cmp	r3, #2
 800a380:	dd02      	ble.n	800a388 <USBD_GetConfig+0x30>
 800a382:	2b03      	cmp	r3, #3
 800a384:	d00b      	beq.n	800a39e <USBD_GetConfig+0x46>
 800a386:	e012      	b.n	800a3ae <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	3308      	adds	r3, #8
 800a392:	2201      	movs	r2, #1
 800a394:	4619      	mov	r1, r3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f922 	bl	800a5e0 <USBD_CtlSendData>
      break;
 800a39c:	e00c      	b.n	800a3b8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	3304      	adds	r3, #4
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f91a 	bl	800a5e0 <USBD_CtlSendData>
      break;
 800a3ac:	e004      	b.n	800a3b8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f8aa 	bl	800a50a <USBD_CtlError>
      break;
 800a3b6:	bf00      	nop
}
 800a3b8:	bf00      	nop
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d81e      	bhi.n	800a414 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	88db      	ldrh	r3, [r3, #6]
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d004      	beq.n	800a3e8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f892 	bl	800a50a <USBD_CtlError>
      break;
 800a3e6:	e01a      	b.n	800a41e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d005      	beq.n	800a404 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	f043 0202 	orr.w	r2, r3, #2
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	330c      	adds	r3, #12
 800a408:	2202      	movs	r2, #2
 800a40a:	4619      	mov	r1, r3
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f8e7 	bl	800a5e0 <USBD_CtlSendData>
    break;
 800a412:	e004      	b.n	800a41e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800a414:	6839      	ldr	r1, [r7, #0]
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f877 	bl	800a50a <USBD_CtlError>
    break;
 800a41c:	bf00      	nop
  }
}
 800a41e:	bf00      	nop
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b082      	sub	sp, #8
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	885b      	ldrh	r3, [r3, #2]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d106      	bne.n	800a446 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f92b 	bl	800a69c <USBD_CtlSendStatus>
  }

}
 800a446:	bf00      	nop
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b082      	sub	sp, #8
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a45e:	3b01      	subs	r3, #1
 800a460:	2b02      	cmp	r3, #2
 800a462:	d80b      	bhi.n	800a47c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	885b      	ldrh	r3, [r3, #2]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d10c      	bne.n	800a486 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 f911 	bl	800a69c <USBD_CtlSendStatus>
    }
    break;
 800a47a:	e004      	b.n	800a486 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800a47c:	6839      	ldr	r1, [r7, #0]
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 f843 	bl	800a50a <USBD_CtlError>
    break;
 800a484:	e000      	b.n	800a488 <USBD_ClrFeature+0x3a>
    break;
 800a486:	bf00      	nop
  }
}
 800a488:	bf00      	nop
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	781a      	ldrb	r2, [r3, #0]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	785a      	ldrb	r2, [r3, #1]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	3302      	adds	r3, #2
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	3303      	adds	r3, #3
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	021b      	lsls	r3, r3, #8
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	4413      	add	r3, r2
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	3305      	adds	r3, #5
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	021b      	lsls	r3, r3, #8
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	4413      	add	r3, r2
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	3306      	adds	r3, #6
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	3307      	adds	r3, #7
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	021b      	lsls	r3, r3, #8
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	4413      	add	r3, r2
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	80da      	strh	r2, [r3, #6]

}
 800a4fe:	bf00      	nop
 800a500:	370c      	adds	r7, #12
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr

0800a50a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b082      	sub	sp, #8
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
 800a512:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800a514:	2180      	movs	r1, #128	; 0x80
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f004 fcda 	bl	800eed0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800a51c:	2100      	movs	r1, #0
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f004 fcd6 	bl	800eed0 <USBD_LL_StallEP>
}
 800a524:	bf00      	nop
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a538:	2300      	movs	r3, #0
 800a53a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d032      	beq.n	800a5a8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 f834 	bl	800a5b0 <USBD_GetLen>
 800a548:	4603      	mov	r3, r0
 800a54a:	3301      	adds	r3, #1
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	005b      	lsls	r3, r3, #1
 800a550:	b29a      	uxth	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a556:	7dfb      	ldrb	r3, [r7, #23]
 800a558:	1c5a      	adds	r2, r3, #1
 800a55a:	75fa      	strb	r2, [r7, #23]
 800a55c:	461a      	mov	r2, r3
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	4413      	add	r3, r2
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	7812      	ldrb	r2, [r2, #0]
 800a566:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a568:	7dfb      	ldrb	r3, [r7, #23]
 800a56a:	1c5a      	adds	r2, r3, #1
 800a56c:	75fa      	strb	r2, [r7, #23]
 800a56e:	461a      	mov	r2, r3
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	4413      	add	r3, r2
 800a574:	2203      	movs	r2, #3
 800a576:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a578:	e012      	b.n	800a5a0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	1c5a      	adds	r2, r3, #1
 800a57e:	60fa      	str	r2, [r7, #12]
 800a580:	7dfa      	ldrb	r2, [r7, #23]
 800a582:	1c51      	adds	r1, r2, #1
 800a584:	75f9      	strb	r1, [r7, #23]
 800a586:	4611      	mov	r1, r2
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	440a      	add	r2, r1
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a590:	7dfb      	ldrb	r3, [r7, #23]
 800a592:	1c5a      	adds	r2, r3, #1
 800a594:	75fa      	strb	r2, [r7, #23]
 800a596:	461a      	mov	r2, r3
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	4413      	add	r3, r2
 800a59c:	2200      	movs	r2, #0
 800a59e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1e8      	bne.n	800a57a <USBD_GetString+0x4e>
    }
  }
}
 800a5a8:	bf00      	nop
 800a5aa:	3718      	adds	r7, #24
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800a5bc:	e005      	b.n	800a5ca <USBD_GetLen+0x1a>
    {
        len++;
 800a5be:	7bfb      	ldrb	r3, [r7, #15]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	73fb      	strb	r3, [r7, #15]
        buf++;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1f5      	bne.n	800a5be <USBD_GetLen+0xe>
    }

    return len;
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3714      	adds	r7, #20
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2202      	movs	r2, #2
 800a5f2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800a5f6:	88fa      	ldrh	r2, [r7, #6]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a5fc:	88fa      	ldrh	r2, [r7, #6]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a602:	88fb      	ldrh	r3, [r7, #6]
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	2100      	movs	r1, #0
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f004 fcea 	bl	800efe2 <USBD_LL_Transmit>

  return USBD_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	4613      	mov	r3, r2
 800a624:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800a626:	88fb      	ldrh	r3, [r7, #6]
 800a628:	68ba      	ldr	r2, [r7, #8]
 800a62a:	2100      	movs	r1, #0
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f004 fcd8 	bl	800efe2 <USBD_LL_Transmit>

  return USBD_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	4613      	mov	r3, r2
 800a648:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2203      	movs	r2, #3
 800a64e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800a652:	88fa      	ldrh	r2, [r7, #6]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800a65a:	88fa      	ldrh	r2, [r7, #6]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800a662:	88fb      	ldrh	r3, [r7, #6]
 800a664:	68ba      	ldr	r2, [r7, #8]
 800a666:	2100      	movs	r1, #0
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f004 fcdd 	bl	800f028 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	4613      	mov	r3, r2
 800a684:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a686:	88fb      	ldrh	r3, [r7, #6]
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	2100      	movs	r1, #0
 800a68c:	68f8      	ldr	r0, [r7, #12]
 800a68e:	f004 fccb 	bl	800f028 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2204      	movs	r2, #4
 800a6a8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f004 fc95 	bl	800efe2 <USBD_LL_Transmit>

  return USBD_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b082      	sub	sp, #8
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2205      	movs	r2, #5
 800a6ce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f004 fca5 	bl	800f028 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3708      	adds	r7, #8
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a6f2:	79fb      	ldrb	r3, [r7, #7]
 800a6f4:	4a08      	ldr	r2, [pc, #32]	; (800a718 <disk_status+0x30>)
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	4413      	add	r3, r2
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	79fa      	ldrb	r2, [r7, #7]
 800a700:	4905      	ldr	r1, [pc, #20]	; (800a718 <disk_status+0x30>)
 800a702:	440a      	add	r2, r1
 800a704:	7a12      	ldrb	r2, [r2, #8]
 800a706:	4610      	mov	r0, r2
 800a708:	4798      	blx	r3
 800a70a:	4603      	mov	r3, r0
 800a70c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	2000079c 	.word	0x2000079c

0800a71c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	4603      	mov	r3, r0
 800a724:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a726:	2300      	movs	r3, #0
 800a728:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a72a:	79fb      	ldrb	r3, [r7, #7]
 800a72c:	4a0d      	ldr	r2, [pc, #52]	; (800a764 <disk_initialize+0x48>)
 800a72e:	5cd3      	ldrb	r3, [r2, r3]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d111      	bne.n	800a758 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a734:	79fb      	ldrb	r3, [r7, #7]
 800a736:	4a0b      	ldr	r2, [pc, #44]	; (800a764 <disk_initialize+0x48>)
 800a738:	2101      	movs	r1, #1
 800a73a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a73c:	79fb      	ldrb	r3, [r7, #7]
 800a73e:	4a09      	ldr	r2, [pc, #36]	; (800a764 <disk_initialize+0x48>)
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	79fa      	ldrb	r2, [r7, #7]
 800a74a:	4906      	ldr	r1, [pc, #24]	; (800a764 <disk_initialize+0x48>)
 800a74c:	440a      	add	r2, r1
 800a74e:	7a12      	ldrb	r2, [r2, #8]
 800a750:	4610      	mov	r0, r2
 800a752:	4798      	blx	r3
 800a754:	4603      	mov	r3, r0
 800a756:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a758:	7bfb      	ldrb	r3, [r7, #15]
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	2000079c 	.word	0x2000079c

0800a768 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a768:	b590      	push	{r4, r7, lr}
 800a76a:	b087      	sub	sp, #28
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60b9      	str	r1, [r7, #8]
 800a770:	607a      	str	r2, [r7, #4]
 800a772:	603b      	str	r3, [r7, #0]
 800a774:	4603      	mov	r3, r0
 800a776:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a778:	7bfb      	ldrb	r3, [r7, #15]
 800a77a:	4a0a      	ldr	r2, [pc, #40]	; (800a7a4 <disk_read+0x3c>)
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	4413      	add	r3, r2
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	689c      	ldr	r4, [r3, #8]
 800a784:	7bfb      	ldrb	r3, [r7, #15]
 800a786:	4a07      	ldr	r2, [pc, #28]	; (800a7a4 <disk_read+0x3c>)
 800a788:	4413      	add	r3, r2
 800a78a:	7a18      	ldrb	r0, [r3, #8]
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	68b9      	ldr	r1, [r7, #8]
 800a792:	47a0      	blx	r4
 800a794:	4603      	mov	r3, r0
 800a796:	75fb      	strb	r3, [r7, #23]
  return res;
 800a798:	7dfb      	ldrb	r3, [r7, #23]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	371c      	adds	r7, #28
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd90      	pop	{r4, r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	2000079c 	.word	0x2000079c

0800a7a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a7a8:	b590      	push	{r4, r7, lr}
 800a7aa:	b087      	sub	sp, #28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60b9      	str	r1, [r7, #8]
 800a7b0:	607a      	str	r2, [r7, #4]
 800a7b2:	603b      	str	r3, [r7, #0]
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ba:	4a0a      	ldr	r2, [pc, #40]	; (800a7e4 <disk_write+0x3c>)
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4413      	add	r3, r2
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	68dc      	ldr	r4, [r3, #12]
 800a7c4:	7bfb      	ldrb	r3, [r7, #15]
 800a7c6:	4a07      	ldr	r2, [pc, #28]	; (800a7e4 <disk_write+0x3c>)
 800a7c8:	4413      	add	r3, r2
 800a7ca:	7a18      	ldrb	r0, [r3, #8]
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	68b9      	ldr	r1, [r7, #8]
 800a7d2:	47a0      	blx	r4
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	75fb      	strb	r3, [r7, #23]
  return res;
 800a7d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	371c      	adds	r7, #28
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd90      	pop	{r4, r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	2000079c 	.word	0x2000079c

0800a7e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	603a      	str	r2, [r7, #0]
 800a7f2:	71fb      	strb	r3, [r7, #7]
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a7f8:	79fb      	ldrb	r3, [r7, #7]
 800a7fa:	4a09      	ldr	r2, [pc, #36]	; (800a820 <disk_ioctl+0x38>)
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4413      	add	r3, r2
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	79fa      	ldrb	r2, [r7, #7]
 800a806:	4906      	ldr	r1, [pc, #24]	; (800a820 <disk_ioctl+0x38>)
 800a808:	440a      	add	r2, r1
 800a80a:	7a10      	ldrb	r0, [r2, #8]
 800a80c:	79b9      	ldrb	r1, [r7, #6]
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	4798      	blx	r3
 800a812:	4603      	mov	r3, r0
 800a814:	73fb      	strb	r3, [r7, #15]
  return res;
 800a816:	7bfb      	ldrb	r3, [r7, #15]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	2000079c 	.word	0x2000079c

0800a824 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	3301      	adds	r3, #1
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a834:	89fb      	ldrh	r3, [r7, #14]
 800a836:	021b      	lsls	r3, r3, #8
 800a838:	b21a      	sxth	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	b21b      	sxth	r3, r3
 800a840:	4313      	orrs	r3, r2
 800a842:	b21b      	sxth	r3, r3
 800a844:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a846:	89fb      	ldrh	r3, [r7, #14]
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3714      	adds	r7, #20
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	3303      	adds	r3, #3
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	021b      	lsls	r3, r3, #8
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	3202      	adds	r2, #2
 800a86c:	7812      	ldrb	r2, [r2, #0]
 800a86e:	4313      	orrs	r3, r2
 800a870:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	021b      	lsls	r3, r3, #8
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	3201      	adds	r2, #1
 800a87a:	7812      	ldrb	r2, [r2, #0]
 800a87c:	4313      	orrs	r3, r2
 800a87e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	021b      	lsls	r3, r3, #8
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	7812      	ldrb	r2, [r2, #0]
 800a888:	4313      	orrs	r3, r2
 800a88a:	60fb      	str	r3, [r7, #12]
	return rv;
 800a88c:	68fb      	ldr	r3, [r7, #12]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3714      	adds	r7, #20
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a89a:	b480      	push	{r7}
 800a89c:	b083      	sub	sp, #12
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	1c5a      	adds	r2, r3, #1
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	887a      	ldrh	r2, [r7, #2]
 800a8ae:	b2d2      	uxtb	r2, r2
 800a8b0:	701a      	strb	r2, [r3, #0]
 800a8b2:	887b      	ldrh	r3, [r7, #2]
 800a8b4:	0a1b      	lsrs	r3, r3, #8
 800a8b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	1c5a      	adds	r2, r3, #1
 800a8bc:	607a      	str	r2, [r7, #4]
 800a8be:	887a      	ldrh	r2, [r7, #2]
 800a8c0:	b2d2      	uxtb	r2, r2
 800a8c2:	701a      	strb	r2, [r3, #0]
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	1c5a      	adds	r2, r3, #1
 800a8de:	607a      	str	r2, [r7, #4]
 800a8e0:	683a      	ldr	r2, [r7, #0]
 800a8e2:	b2d2      	uxtb	r2, r2
 800a8e4:	701a      	strb	r2, [r3, #0]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	0a1b      	lsrs	r3, r3, #8
 800a8ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	1c5a      	adds	r2, r3, #1
 800a8f0:	607a      	str	r2, [r7, #4]
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	b2d2      	uxtb	r2, r2
 800a8f6:	701a      	strb	r2, [r3, #0]
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	0a1b      	lsrs	r3, r3, #8
 800a8fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	1c5a      	adds	r2, r3, #1
 800a902:	607a      	str	r2, [r7, #4]
 800a904:	683a      	ldr	r2, [r7, #0]
 800a906:	b2d2      	uxtb	r2, r2
 800a908:	701a      	strb	r2, [r3, #0]
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	0a1b      	lsrs	r3, r3, #8
 800a90e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	607a      	str	r2, [r7, #4]
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	b2d2      	uxtb	r2, r2
 800a91a:	701a      	strb	r2, [r3, #0]
}
 800a91c:	bf00      	nop
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a928:	b480      	push	{r7}
 800a92a:	b087      	sub	sp, #28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00d      	beq.n	800a95e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a942:	693a      	ldr	r2, [r7, #16]
 800a944:	1c53      	adds	r3, r2, #1
 800a946:	613b      	str	r3, [r7, #16]
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	1c59      	adds	r1, r3, #1
 800a94c:	6179      	str	r1, [r7, #20]
 800a94e:	7812      	ldrb	r2, [r2, #0]
 800a950:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	3b01      	subs	r3, #1
 800a956:	607b      	str	r3, [r7, #4]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1f1      	bne.n	800a942 <mem_cpy+0x1a>
	}
}
 800a95e:	bf00      	nop
 800a960:	371c      	adds	r7, #28
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr

0800a96a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a96a:	b480      	push	{r7}
 800a96c:	b087      	sub	sp, #28
 800a96e:	af00      	add	r7, sp, #0
 800a970:	60f8      	str	r0, [r7, #12]
 800a972:	60b9      	str	r1, [r7, #8]
 800a974:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	1c5a      	adds	r2, r3, #1
 800a97e:	617a      	str	r2, [r7, #20]
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	b2d2      	uxtb	r2, r2
 800a984:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	3b01      	subs	r3, #1
 800a98a:	607b      	str	r3, [r7, #4]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1f3      	bne.n	800a97a <mem_set+0x10>
}
 800a992:	bf00      	nop
 800a994:	371c      	adds	r7, #28
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a99e:	b480      	push	{r7}
 800a9a0:	b089      	sub	sp, #36	; 0x24
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	60f8      	str	r0, [r7, #12]
 800a9a6:	60b9      	str	r1, [r7, #8]
 800a9a8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	61fb      	str	r3, [r7, #28]
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	1c5a      	adds	r2, r3, #1
 800a9ba:	61fa      	str	r2, [r7, #28]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	4619      	mov	r1, r3
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	1c5a      	adds	r2, r3, #1
 800a9c4:	61ba      	str	r2, [r7, #24]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	1acb      	subs	r3, r1, r3
 800a9ca:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	607b      	str	r3, [r7, #4]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d002      	beq.n	800a9de <mem_cmp+0x40>
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d0eb      	beq.n	800a9b6 <mem_cmp+0x18>

	return r;
 800a9de:	697b      	ldr	r3, [r7, #20]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3724      	adds	r7, #36	; 0x24
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a9f6:	e002      	b.n	800a9fe <chk_chr+0x12>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	607b      	str	r3, [r7, #4]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d005      	beq.n	800aa12 <chk_chr+0x26>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d1f2      	bne.n	800a9f8 <chk_chr+0xc>
	return *str;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	781b      	ldrb	r3, [r3, #0]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	370c      	adds	r7, #12
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
	...

0800aa24 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60bb      	str	r3, [r7, #8]
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	60fb      	str	r3, [r7, #12]
 800aa36:	e029      	b.n	800aa8c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800aa38:	4a27      	ldr	r2, [pc, #156]	; (800aad8 <chk_lock+0xb4>)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	011b      	lsls	r3, r3, #4
 800aa3e:	4413      	add	r3, r2
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d01d      	beq.n	800aa82 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aa46:	4a24      	ldr	r2, [pc, #144]	; (800aad8 <chk_lock+0xb4>)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	011b      	lsls	r3, r3, #4
 800aa4c:	4413      	add	r3, r2
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d116      	bne.n	800aa86 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aa58:	4a1f      	ldr	r2, [pc, #124]	; (800aad8 <chk_lock+0xb4>)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	011b      	lsls	r3, r3, #4
 800aa5e:	4413      	add	r3, r2
 800aa60:	3304      	adds	r3, #4
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d10c      	bne.n	800aa86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aa6c:	4a1a      	ldr	r2, [pc, #104]	; (800aad8 <chk_lock+0xb4>)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	011b      	lsls	r3, r3, #4
 800aa72:	4413      	add	r3, r2
 800aa74:	3308      	adds	r3, #8
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d102      	bne.n	800aa86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aa80:	e007      	b.n	800aa92 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800aa82:	2301      	movs	r3, #1
 800aa84:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	60fb      	str	r3, [r7, #12]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d9d2      	bls.n	800aa38 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d109      	bne.n	800aaac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d102      	bne.n	800aaa4 <chk_lock+0x80>
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d101      	bne.n	800aaa8 <chk_lock+0x84>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	e010      	b.n	800aaca <chk_lock+0xa6>
 800aaa8:	2312      	movs	r3, #18
 800aaaa:	e00e      	b.n	800aaca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d108      	bne.n	800aac4 <chk_lock+0xa0>
 800aab2:	4a09      	ldr	r2, [pc, #36]	; (800aad8 <chk_lock+0xb4>)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	011b      	lsls	r3, r3, #4
 800aab8:	4413      	add	r3, r2
 800aaba:	330c      	adds	r3, #12
 800aabc:	881b      	ldrh	r3, [r3, #0]
 800aabe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aac2:	d101      	bne.n	800aac8 <chk_lock+0xa4>
 800aac4:	2310      	movs	r3, #16
 800aac6:	e000      	b.n	800aaca <chk_lock+0xa6>
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop
 800aad8:	2000077c 	.word	0x2000077c

0800aadc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aae2:	2300      	movs	r3, #0
 800aae4:	607b      	str	r3, [r7, #4]
 800aae6:	e002      	b.n	800aaee <enq_lock+0x12>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3301      	adds	r3, #1
 800aaec:	607b      	str	r3, [r7, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d806      	bhi.n	800ab02 <enq_lock+0x26>
 800aaf4:	4a09      	ldr	r2, [pc, #36]	; (800ab1c <enq_lock+0x40>)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	011b      	lsls	r3, r3, #4
 800aafa:	4413      	add	r3, r2
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1f2      	bne.n	800aae8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2b02      	cmp	r3, #2
 800ab06:	bf14      	ite	ne
 800ab08:	2301      	movne	r3, #1
 800ab0a:	2300      	moveq	r3, #0
 800ab0c:	b2db      	uxtb	r3, r3
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	370c      	adds	r7, #12
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	2000077c 	.word	0x2000077c

0800ab20 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	60fb      	str	r3, [r7, #12]
 800ab2e:	e01f      	b.n	800ab70 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ab30:	4a41      	ldr	r2, [pc, #260]	; (800ac38 <inc_lock+0x118>)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	011b      	lsls	r3, r3, #4
 800ab36:	4413      	add	r3, r2
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d113      	bne.n	800ab6a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ab42:	4a3d      	ldr	r2, [pc, #244]	; (800ac38 <inc_lock+0x118>)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	011b      	lsls	r3, r3, #4
 800ab48:	4413      	add	r3, r2
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d109      	bne.n	800ab6a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ab56:	4a38      	ldr	r2, [pc, #224]	; (800ac38 <inc_lock+0x118>)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	011b      	lsls	r3, r3, #4
 800ab5c:	4413      	add	r3, r2
 800ab5e:	3308      	adds	r3, #8
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d006      	beq.n	800ab78 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	60fb      	str	r3, [r7, #12]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d9dc      	bls.n	800ab30 <inc_lock+0x10>
 800ab76:	e000      	b.n	800ab7a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ab78:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2b02      	cmp	r3, #2
 800ab7e:	d132      	bne.n	800abe6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ab80:	2300      	movs	r3, #0
 800ab82:	60fb      	str	r3, [r7, #12]
 800ab84:	e002      	b.n	800ab8c <inc_lock+0x6c>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	60fb      	str	r3, [r7, #12]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d806      	bhi.n	800aba0 <inc_lock+0x80>
 800ab92:	4a29      	ldr	r2, [pc, #164]	; (800ac38 <inc_lock+0x118>)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	011b      	lsls	r3, r3, #4
 800ab98:	4413      	add	r3, r2
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1f2      	bne.n	800ab86 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2b02      	cmp	r3, #2
 800aba4:	d101      	bne.n	800abaa <inc_lock+0x8a>
 800aba6:	2300      	movs	r3, #0
 800aba8:	e040      	b.n	800ac2c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	4922      	ldr	r1, [pc, #136]	; (800ac38 <inc_lock+0x118>)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	011b      	lsls	r3, r3, #4
 800abb4:	440b      	add	r3, r1
 800abb6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	689a      	ldr	r2, [r3, #8]
 800abbc:	491e      	ldr	r1, [pc, #120]	; (800ac38 <inc_lock+0x118>)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	011b      	lsls	r3, r3, #4
 800abc2:	440b      	add	r3, r1
 800abc4:	3304      	adds	r3, #4
 800abc6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	695a      	ldr	r2, [r3, #20]
 800abcc:	491a      	ldr	r1, [pc, #104]	; (800ac38 <inc_lock+0x118>)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	011b      	lsls	r3, r3, #4
 800abd2:	440b      	add	r3, r1
 800abd4:	3308      	adds	r3, #8
 800abd6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800abd8:	4a17      	ldr	r2, [pc, #92]	; (800ac38 <inc_lock+0x118>)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	011b      	lsls	r3, r3, #4
 800abde:	4413      	add	r3, r2
 800abe0:	330c      	adds	r3, #12
 800abe2:	2200      	movs	r2, #0
 800abe4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d009      	beq.n	800ac00 <inc_lock+0xe0>
 800abec:	4a12      	ldr	r2, [pc, #72]	; (800ac38 <inc_lock+0x118>)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	011b      	lsls	r3, r3, #4
 800abf2:	4413      	add	r3, r2
 800abf4:	330c      	adds	r3, #12
 800abf6:	881b      	ldrh	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <inc_lock+0xe0>
 800abfc:	2300      	movs	r3, #0
 800abfe:	e015      	b.n	800ac2c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d108      	bne.n	800ac18 <inc_lock+0xf8>
 800ac06:	4a0c      	ldr	r2, [pc, #48]	; (800ac38 <inc_lock+0x118>)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	011b      	lsls	r3, r3, #4
 800ac0c:	4413      	add	r3, r2
 800ac0e:	330c      	adds	r3, #12
 800ac10:	881b      	ldrh	r3, [r3, #0]
 800ac12:	3301      	adds	r3, #1
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	e001      	b.n	800ac1c <inc_lock+0xfc>
 800ac18:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac1c:	4906      	ldr	r1, [pc, #24]	; (800ac38 <inc_lock+0x118>)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	011b      	lsls	r3, r3, #4
 800ac22:	440b      	add	r3, r1
 800ac24:	330c      	adds	r3, #12
 800ac26:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	3301      	adds	r3, #1
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr
 800ac38:	2000077c 	.word	0x2000077c

0800ac3c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	3b01      	subs	r3, #1
 800ac48:	607b      	str	r3, [r7, #4]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d825      	bhi.n	800ac9c <dec_lock+0x60>
		n = Files[i].ctr;
 800ac50:	4a17      	ldr	r2, [pc, #92]	; (800acb0 <dec_lock+0x74>)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	011b      	lsls	r3, r3, #4
 800ac56:	4413      	add	r3, r2
 800ac58:	330c      	adds	r3, #12
 800ac5a:	881b      	ldrh	r3, [r3, #0]
 800ac5c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ac5e:	89fb      	ldrh	r3, [r7, #14]
 800ac60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac64:	d101      	bne.n	800ac6a <dec_lock+0x2e>
 800ac66:	2300      	movs	r3, #0
 800ac68:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ac6a:	89fb      	ldrh	r3, [r7, #14]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d002      	beq.n	800ac76 <dec_lock+0x3a>
 800ac70:	89fb      	ldrh	r3, [r7, #14]
 800ac72:	3b01      	subs	r3, #1
 800ac74:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ac76:	4a0e      	ldr	r2, [pc, #56]	; (800acb0 <dec_lock+0x74>)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	011b      	lsls	r3, r3, #4
 800ac7c:	4413      	add	r3, r2
 800ac7e:	330c      	adds	r3, #12
 800ac80:	89fa      	ldrh	r2, [r7, #14]
 800ac82:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ac84:	89fb      	ldrh	r3, [r7, #14]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d105      	bne.n	800ac96 <dec_lock+0x5a>
 800ac8a:	4a09      	ldr	r2, [pc, #36]	; (800acb0 <dec_lock+0x74>)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	011b      	lsls	r3, r3, #4
 800ac90:	4413      	add	r3, r2
 800ac92:	2200      	movs	r2, #0
 800ac94:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ac96:	2300      	movs	r3, #0
 800ac98:	737b      	strb	r3, [r7, #13]
 800ac9a:	e001      	b.n	800aca0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ac9c:	2302      	movs	r3, #2
 800ac9e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800aca0:	7b7b      	ldrb	r3, [r7, #13]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3714      	adds	r7, #20
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	2000077c 	.word	0x2000077c

0800acb4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800acbc:	2300      	movs	r3, #0
 800acbe:	60fb      	str	r3, [r7, #12]
 800acc0:	e010      	b.n	800ace4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800acc2:	4a0d      	ldr	r2, [pc, #52]	; (800acf8 <clear_lock+0x44>)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	011b      	lsls	r3, r3, #4
 800acc8:	4413      	add	r3, r2
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d105      	bne.n	800acde <clear_lock+0x2a>
 800acd2:	4a09      	ldr	r2, [pc, #36]	; (800acf8 <clear_lock+0x44>)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	011b      	lsls	r3, r3, #4
 800acd8:	4413      	add	r3, r2
 800acda:	2200      	movs	r2, #0
 800acdc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	3301      	adds	r3, #1
 800ace2:	60fb      	str	r3, [r7, #12]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d9eb      	bls.n	800acc2 <clear_lock+0xe>
	}
}
 800acea:	bf00      	nop
 800acec:	3714      	adds	r7, #20
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	2000077c 	.word	0x2000077c

0800acfc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ad04:	2300      	movs	r3, #0
 800ad06:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	78db      	ldrb	r3, [r3, #3]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d034      	beq.n	800ad7a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad14:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	7858      	ldrb	r0, [r3, #1]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ad20:	2301      	movs	r3, #1
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	f7ff fd40 	bl	800a7a8 <disk_write>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d002      	beq.n	800ad34 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	73fb      	strb	r3, [r7, #15]
 800ad32:	e022      	b.n	800ad7a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3e:	697a      	ldr	r2, [r7, #20]
 800ad40:	1ad2      	subs	r2, r2, r3
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	69db      	ldr	r3, [r3, #28]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d217      	bcs.n	800ad7a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	789b      	ldrb	r3, [r3, #2]
 800ad4e:	613b      	str	r3, [r7, #16]
 800ad50:	e010      	b.n	800ad74 <sync_window+0x78>
					wsect += fs->fsize;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	69db      	ldr	r3, [r3, #28]
 800ad56:	697a      	ldr	r2, [r7, #20]
 800ad58:	4413      	add	r3, r2
 800ad5a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	7858      	ldrb	r0, [r3, #1]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ad66:	2301      	movs	r3, #1
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	f7ff fd1d 	bl	800a7a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	3b01      	subs	r3, #1
 800ad72:	613b      	str	r3, [r7, #16]
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d8eb      	bhi.n	800ad52 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ad7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3718      	adds	r7, #24
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d01b      	beq.n	800add4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7ff ffad 	bl	800acfc <sync_window>
 800ada2:	4603      	mov	r3, r0
 800ada4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ada6:	7bfb      	ldrb	r3, [r7, #15]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d113      	bne.n	800add4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	7858      	ldrb	r0, [r3, #1]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800adb6:	2301      	movs	r3, #1
 800adb8:	683a      	ldr	r2, [r7, #0]
 800adba:	f7ff fcd5 	bl	800a768 <disk_read>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d004      	beq.n	800adce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800adc4:	f04f 33ff 	mov.w	r3, #4294967295
 800adc8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800adca:	2301      	movs	r3, #1
 800adcc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	683a      	ldr	r2, [r7, #0]
 800add2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800add4:	7bfb      	ldrb	r3, [r7, #15]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
	...

0800ade0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7ff ff87 	bl	800acfc <sync_window>
 800adee:	4603      	mov	r3, r0
 800adf0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800adf2:	7bfb      	ldrb	r3, [r7, #15]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d159      	bne.n	800aeac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	2b03      	cmp	r3, #3
 800adfe:	d149      	bne.n	800ae94 <sync_fs+0xb4>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	791b      	ldrb	r3, [r3, #4]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d145      	bne.n	800ae94 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	899b      	ldrh	r3, [r3, #12]
 800ae12:	461a      	mov	r2, r3
 800ae14:	2100      	movs	r1, #0
 800ae16:	f7ff fda8 	bl	800a96a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	3334      	adds	r3, #52	; 0x34
 800ae1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae22:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7ff fd37 	bl	800a89a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	3334      	adds	r3, #52	; 0x34
 800ae30:	4921      	ldr	r1, [pc, #132]	; (800aeb8 <sync_fs+0xd8>)
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7ff fd4c 	bl	800a8d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	3334      	adds	r3, #52	; 0x34
 800ae3c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ae40:	491e      	ldr	r1, [pc, #120]	; (800aebc <sync_fs+0xdc>)
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7ff fd44 	bl	800a8d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	3334      	adds	r3, #52	; 0x34
 800ae4c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	695b      	ldr	r3, [r3, #20]
 800ae54:	4619      	mov	r1, r3
 800ae56:	4610      	mov	r0, r2
 800ae58:	f7ff fd3a 	bl	800a8d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3334      	adds	r3, #52	; 0x34
 800ae60:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	691b      	ldr	r3, [r3, #16]
 800ae68:	4619      	mov	r1, r3
 800ae6a:	4610      	mov	r0, r2
 800ae6c:	f7ff fd30 	bl	800a8d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a1b      	ldr	r3, [r3, #32]
 800ae74:	1c5a      	adds	r2, r3, #1
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	7858      	ldrb	r0, [r3, #1]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae88:	2301      	movs	r3, #1
 800ae8a:	f7ff fc8d 	bl	800a7a8 <disk_write>
			fs->fsi_flag = 0;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	785b      	ldrb	r3, [r3, #1]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7ff fca3 	bl	800a7e8 <disk_ioctl>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <sync_fs+0xcc>
 800aea8:	2301      	movs	r3, #1
 800aeaa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	41615252 	.word	0x41615252
 800aebc:	61417272 	.word	0x61417272

0800aec0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	3b02      	subs	r3, #2
 800aece:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	699b      	ldr	r3, [r3, #24]
 800aed4:	3b02      	subs	r3, #2
 800aed6:	683a      	ldr	r2, [r7, #0]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d301      	bcc.n	800aee0 <clust2sect+0x20>
 800aedc:	2300      	movs	r3, #0
 800aede:	e008      	b.n	800aef2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	895b      	ldrh	r3, [r3, #10]
 800aee4:	461a      	mov	r2, r3
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	fb03 f202 	mul.w	r2, r3, r2
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef0:	4413      	add	r3, r2
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	370c      	adds	r7, #12
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b086      	sub	sp, #24
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	2b01      	cmp	r3, #1
 800af12:	d904      	bls.n	800af1e <get_fat+0x20>
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	699b      	ldr	r3, [r3, #24]
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d302      	bcc.n	800af24 <get_fat+0x26>
		val = 1;	/* Internal error */
 800af1e:	2301      	movs	r3, #1
 800af20:	617b      	str	r3, [r7, #20]
 800af22:	e0b7      	b.n	800b094 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800af24:	f04f 33ff 	mov.w	r3, #4294967295
 800af28:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d05a      	beq.n	800afe8 <get_fat+0xea>
 800af32:	2b03      	cmp	r3, #3
 800af34:	d07d      	beq.n	800b032 <get_fat+0x134>
 800af36:	2b01      	cmp	r3, #1
 800af38:	f040 80a2 	bne.w	800b080 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	60fb      	str	r3, [r7, #12]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	085b      	lsrs	r3, r3, #1
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	4413      	add	r3, r2
 800af48:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	899b      	ldrh	r3, [r3, #12]
 800af52:	4619      	mov	r1, r3
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	fbb3 f3f1 	udiv	r3, r3, r1
 800af5a:	4413      	add	r3, r2
 800af5c:	4619      	mov	r1, r3
 800af5e:	6938      	ldr	r0, [r7, #16]
 800af60:	f7ff ff10 	bl	800ad84 <move_window>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	f040 808d 	bne.w	800b086 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	1c5a      	adds	r2, r3, #1
 800af70:	60fa      	str	r2, [r7, #12]
 800af72:	693a      	ldr	r2, [r7, #16]
 800af74:	8992      	ldrh	r2, [r2, #12]
 800af76:	fbb3 f1f2 	udiv	r1, r3, r2
 800af7a:	fb02 f201 	mul.w	r2, r2, r1
 800af7e:	1a9b      	subs	r3, r3, r2
 800af80:	693a      	ldr	r2, [r7, #16]
 800af82:	4413      	add	r3, r2
 800af84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af88:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	899b      	ldrh	r3, [r3, #12]
 800af92:	4619      	mov	r1, r3
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	fbb3 f3f1 	udiv	r3, r3, r1
 800af9a:	4413      	add	r3, r2
 800af9c:	4619      	mov	r1, r3
 800af9e:	6938      	ldr	r0, [r7, #16]
 800afa0:	f7ff fef0 	bl	800ad84 <move_window>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d16f      	bne.n	800b08a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	899b      	ldrh	r3, [r3, #12]
 800afae:	461a      	mov	r2, r3
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	fbb3 f1f2 	udiv	r1, r3, r2
 800afb6:	fb02 f201 	mul.w	r2, r2, r1
 800afba:	1a9b      	subs	r3, r3, r2
 800afbc:	693a      	ldr	r2, [r7, #16]
 800afbe:	4413      	add	r3, r2
 800afc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800afc4:	021b      	lsls	r3, r3, #8
 800afc6:	461a      	mov	r2, r3
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	4313      	orrs	r3, r2
 800afcc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	f003 0301 	and.w	r3, r3, #1
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d002      	beq.n	800afde <get_fat+0xe0>
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	091b      	lsrs	r3, r3, #4
 800afdc:	e002      	b.n	800afe4 <get_fat+0xe6>
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afe4:	617b      	str	r3, [r7, #20]
			break;
 800afe6:	e055      	b.n	800b094 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	899b      	ldrh	r3, [r3, #12]
 800aff0:	085b      	lsrs	r3, r3, #1
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	4619      	mov	r1, r3
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	fbb3 f3f1 	udiv	r3, r3, r1
 800affc:	4413      	add	r3, r2
 800affe:	4619      	mov	r1, r3
 800b000:	6938      	ldr	r0, [r7, #16]
 800b002:	f7ff febf 	bl	800ad84 <move_window>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d140      	bne.n	800b08e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	005b      	lsls	r3, r3, #1
 800b016:	693a      	ldr	r2, [r7, #16]
 800b018:	8992      	ldrh	r2, [r2, #12]
 800b01a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b01e:	fb02 f200 	mul.w	r2, r2, r0
 800b022:	1a9b      	subs	r3, r3, r2
 800b024:	440b      	add	r3, r1
 800b026:	4618      	mov	r0, r3
 800b028:	f7ff fbfc 	bl	800a824 <ld_word>
 800b02c:	4603      	mov	r3, r0
 800b02e:	617b      	str	r3, [r7, #20]
			break;
 800b030:	e030      	b.n	800b094 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	899b      	ldrh	r3, [r3, #12]
 800b03a:	089b      	lsrs	r3, r3, #2
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	4619      	mov	r1, r3
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	fbb3 f3f1 	udiv	r3, r3, r1
 800b046:	4413      	add	r3, r2
 800b048:	4619      	mov	r1, r3
 800b04a:	6938      	ldr	r0, [r7, #16]
 800b04c:	f7ff fe9a 	bl	800ad84 <move_window>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d11d      	bne.n	800b092 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	693a      	ldr	r2, [r7, #16]
 800b062:	8992      	ldrh	r2, [r2, #12]
 800b064:	fbb3 f0f2 	udiv	r0, r3, r2
 800b068:	fb02 f200 	mul.w	r2, r2, r0
 800b06c:	1a9b      	subs	r3, r3, r2
 800b06e:	440b      	add	r3, r1
 800b070:	4618      	mov	r0, r3
 800b072:	f7ff fbef 	bl	800a854 <ld_dword>
 800b076:	4603      	mov	r3, r0
 800b078:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b07c:	617b      	str	r3, [r7, #20]
			break;
 800b07e:	e009      	b.n	800b094 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b080:	2301      	movs	r3, #1
 800b082:	617b      	str	r3, [r7, #20]
 800b084:	e006      	b.n	800b094 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b086:	bf00      	nop
 800b088:	e004      	b.n	800b094 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b08a:	bf00      	nop
 800b08c:	e002      	b.n	800b094 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b08e:	bf00      	nop
 800b090:	e000      	b.n	800b094 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b092:	bf00      	nop
		}
	}

	return val;
 800b094:	697b      	ldr	r3, [r7, #20]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3718      	adds	r7, #24
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b09e:	b590      	push	{r4, r7, lr}
 800b0a0:	b089      	sub	sp, #36	; 0x24
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	60f8      	str	r0, [r7, #12]
 800b0a6:	60b9      	str	r1, [r7, #8]
 800b0a8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b0aa:	2302      	movs	r3, #2
 800b0ac:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	f240 8106 	bls.w	800b2c2 <put_fat+0x224>
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	68ba      	ldr	r2, [r7, #8]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	f080 8100 	bcs.w	800b2c2 <put_fat+0x224>
		switch (fs->fs_type) {
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	f000 8088 	beq.w	800b1dc <put_fat+0x13e>
 800b0cc:	2b03      	cmp	r3, #3
 800b0ce:	f000 80b0 	beq.w	800b232 <put_fat+0x194>
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	f040 80f5 	bne.w	800b2c2 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	61bb      	str	r3, [r7, #24]
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	085b      	lsrs	r3, r3, #1
 800b0e0:	69ba      	ldr	r2, [r7, #24]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	899b      	ldrh	r3, [r3, #12]
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0f6:	4413      	add	r3, r2
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f7ff fe42 	bl	800ad84 <move_window>
 800b100:	4603      	mov	r3, r0
 800b102:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b104:	7ffb      	ldrb	r3, [r7, #31]
 800b106:	2b00      	cmp	r3, #0
 800b108:	f040 80d4 	bne.w	800b2b4 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	1c5a      	adds	r2, r3, #1
 800b116:	61ba      	str	r2, [r7, #24]
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	8992      	ldrh	r2, [r2, #12]
 800b11c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b120:	fb02 f200 	mul.w	r2, r2, r0
 800b124:	1a9b      	subs	r3, r3, r2
 800b126:	440b      	add	r3, r1
 800b128:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	f003 0301 	and.w	r3, r3, #1
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00d      	beq.n	800b150 <put_fat+0xb2>
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	b25b      	sxtb	r3, r3
 800b13a:	f003 030f 	and.w	r3, r3, #15
 800b13e:	b25a      	sxtb	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	b2db      	uxtb	r3, r3
 800b144:	011b      	lsls	r3, r3, #4
 800b146:	b25b      	sxtb	r3, r3
 800b148:	4313      	orrs	r3, r2
 800b14a:	b25b      	sxtb	r3, r3
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	e001      	b.n	800b154 <put_fat+0xb6>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	b2db      	uxtb	r3, r3
 800b154:	697a      	ldr	r2, [r7, #20]
 800b156:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2201      	movs	r2, #1
 800b15c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	899b      	ldrh	r3, [r3, #12]
 800b166:	4619      	mov	r1, r3
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b16e:	4413      	add	r3, r2
 800b170:	4619      	mov	r1, r3
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	f7ff fe06 	bl	800ad84 <move_window>
 800b178:	4603      	mov	r3, r0
 800b17a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b17c:	7ffb      	ldrb	r3, [r7, #31]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	f040 809a 	bne.w	800b2b8 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	899b      	ldrh	r3, [r3, #12]
 800b18e:	461a      	mov	r2, r3
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	fbb3 f0f2 	udiv	r0, r3, r2
 800b196:	fb02 f200 	mul.w	r2, r2, r0
 800b19a:	1a9b      	subs	r3, r3, r2
 800b19c:	440b      	add	r3, r1
 800b19e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <put_fat+0x114>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	091b      	lsrs	r3, r3, #4
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	e00e      	b.n	800b1d0 <put_fat+0x132>
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	b25b      	sxtb	r3, r3
 800b1b8:	f023 030f 	bic.w	r3, r3, #15
 800b1bc:	b25a      	sxtb	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	0a1b      	lsrs	r3, r3, #8
 800b1c2:	b25b      	sxtb	r3, r3
 800b1c4:	f003 030f 	and.w	r3, r3, #15
 800b1c8:	b25b      	sxtb	r3, r3
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	b25b      	sxtb	r3, r3
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	697a      	ldr	r2, [r7, #20]
 800b1d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	70da      	strb	r2, [r3, #3]
			break;
 800b1da:	e072      	b.n	800b2c2 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	899b      	ldrh	r3, [r3, #12]
 800b1e4:	085b      	lsrs	r3, r3, #1
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1f0:	4413      	add	r3, r2
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f7ff fdc5 	bl	800ad84 <move_window>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b1fe:	7ffb      	ldrb	r3, [r7, #31]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d15b      	bne.n	800b2bc <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	005b      	lsls	r3, r3, #1
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	8992      	ldrh	r2, [r2, #12]
 800b212:	fbb3 f0f2 	udiv	r0, r3, r2
 800b216:	fb02 f200 	mul.w	r2, r2, r0
 800b21a:	1a9b      	subs	r3, r3, r2
 800b21c:	440b      	add	r3, r1
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	b292      	uxth	r2, r2
 800b222:	4611      	mov	r1, r2
 800b224:	4618      	mov	r0, r3
 800b226:	f7ff fb38 	bl	800a89a <st_word>
			fs->wflag = 1;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2201      	movs	r2, #1
 800b22e:	70da      	strb	r2, [r3, #3]
			break;
 800b230:	e047      	b.n	800b2c2 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	899b      	ldrh	r3, [r3, #12]
 800b23a:	089b      	lsrs	r3, r3, #2
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	4619      	mov	r1, r3
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	fbb3 f3f1 	udiv	r3, r3, r1
 800b246:	4413      	add	r3, r2
 800b248:	4619      	mov	r1, r3
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f7ff fd9a 	bl	800ad84 <move_window>
 800b250:	4603      	mov	r3, r0
 800b252:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b254:	7ffb      	ldrb	r3, [r7, #31]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d132      	bne.n	800b2c0 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	8992      	ldrh	r2, [r2, #12]
 800b26e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b272:	fb02 f200 	mul.w	r2, r2, r0
 800b276:	1a9b      	subs	r3, r3, r2
 800b278:	440b      	add	r3, r1
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7ff faea 	bl	800a854 <ld_dword>
 800b280:	4603      	mov	r3, r0
 800b282:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b286:	4323      	orrs	r3, r4
 800b288:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	8992      	ldrh	r2, [r2, #12]
 800b298:	fbb3 f0f2 	udiv	r0, r3, r2
 800b29c:	fb02 f200 	mul.w	r2, r2, r0
 800b2a0:	1a9b      	subs	r3, r3, r2
 800b2a2:	440b      	add	r3, r1
 800b2a4:	6879      	ldr	r1, [r7, #4]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7ff fb12 	bl	800a8d0 <st_dword>
			fs->wflag = 1;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	70da      	strb	r2, [r3, #3]
			break;
 800b2b2:	e006      	b.n	800b2c2 <put_fat+0x224>
			if (res != FR_OK) break;
 800b2b4:	bf00      	nop
 800b2b6:	e004      	b.n	800b2c2 <put_fat+0x224>
			if (res != FR_OK) break;
 800b2b8:	bf00      	nop
 800b2ba:	e002      	b.n	800b2c2 <put_fat+0x224>
			if (res != FR_OK) break;
 800b2bc:	bf00      	nop
 800b2be:	e000      	b.n	800b2c2 <put_fat+0x224>
			if (res != FR_OK) break;
 800b2c0:	bf00      	nop
		}
	}
	return res;
 800b2c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3724      	adds	r7, #36	; 0x24
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd90      	pop	{r4, r7, pc}

0800b2cc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b088      	sub	sp, #32
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d904      	bls.n	800b2f2 <remove_chain+0x26>
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	68ba      	ldr	r2, [r7, #8]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d301      	bcc.n	800b2f6 <remove_chain+0x2a>
 800b2f2:	2302      	movs	r3, #2
 800b2f4:	e04b      	b.n	800b38e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00c      	beq.n	800b316 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b300:	6879      	ldr	r1, [r7, #4]
 800b302:	69b8      	ldr	r0, [r7, #24]
 800b304:	f7ff fecb 	bl	800b09e <put_fat>
 800b308:	4603      	mov	r3, r0
 800b30a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b30c:	7ffb      	ldrb	r3, [r7, #31]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d001      	beq.n	800b316 <remove_chain+0x4a>
 800b312:	7ffb      	ldrb	r3, [r7, #31]
 800b314:	e03b      	b.n	800b38e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b316:	68b9      	ldr	r1, [r7, #8]
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f7ff fdf0 	bl	800aefe <get_fat>
 800b31e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d031      	beq.n	800b38a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d101      	bne.n	800b330 <remove_chain+0x64>
 800b32c:	2302      	movs	r3, #2
 800b32e:	e02e      	b.n	800b38e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b336:	d101      	bne.n	800b33c <remove_chain+0x70>
 800b338:	2301      	movs	r3, #1
 800b33a:	e028      	b.n	800b38e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b33c:	2200      	movs	r2, #0
 800b33e:	68b9      	ldr	r1, [r7, #8]
 800b340:	69b8      	ldr	r0, [r7, #24]
 800b342:	f7ff feac 	bl	800b09e <put_fat>
 800b346:	4603      	mov	r3, r0
 800b348:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b34a:	7ffb      	ldrb	r3, [r7, #31]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d001      	beq.n	800b354 <remove_chain+0x88>
 800b350:	7ffb      	ldrb	r3, [r7, #31]
 800b352:	e01c      	b.n	800b38e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	695a      	ldr	r2, [r3, #20]
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	699b      	ldr	r3, [r3, #24]
 800b35c:	3b02      	subs	r3, #2
 800b35e:	429a      	cmp	r2, r3
 800b360:	d20b      	bcs.n	800b37a <remove_chain+0xae>
			fs->free_clst++;
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	695b      	ldr	r3, [r3, #20]
 800b366:	1c5a      	adds	r2, r3, #1
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	791b      	ldrb	r3, [r3, #4]
 800b370:	f043 0301 	orr.w	r3, r3, #1
 800b374:	b2da      	uxtb	r2, r3
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	699b      	ldr	r3, [r3, #24]
 800b382:	68ba      	ldr	r2, [r7, #8]
 800b384:	429a      	cmp	r2, r3
 800b386:	d3c6      	bcc.n	800b316 <remove_chain+0x4a>
 800b388:	e000      	b.n	800b38c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b38a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3720      	adds	r7, #32
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b088      	sub	sp, #32
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d10d      	bne.n	800b3c8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d004      	beq.n	800b3c2 <create_chain+0x2c>
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	699b      	ldr	r3, [r3, #24]
 800b3bc:	69ba      	ldr	r2, [r7, #24]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d31b      	bcc.n	800b3fa <create_chain+0x64>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	61bb      	str	r3, [r7, #24]
 800b3c6:	e018      	b.n	800b3fa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f7ff fd97 	bl	800aefe <get_fat>
 800b3d0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d801      	bhi.n	800b3dc <create_chain+0x46>
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e070      	b.n	800b4be <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e2:	d101      	bne.n	800b3e8 <create_chain+0x52>
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	e06a      	b.n	800b4be <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	699b      	ldr	r3, [r3, #24]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d201      	bcs.n	800b3f6 <create_chain+0x60>
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	e063      	b.n	800b4be <create_chain+0x128>
		scl = clst;
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	3301      	adds	r3, #1
 800b402:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	69fa      	ldr	r2, [r7, #28]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d307      	bcc.n	800b41e <create_chain+0x88>
				ncl = 2;
 800b40e:	2302      	movs	r3, #2
 800b410:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b412:	69fa      	ldr	r2, [r7, #28]
 800b414:	69bb      	ldr	r3, [r7, #24]
 800b416:	429a      	cmp	r2, r3
 800b418:	d901      	bls.n	800b41e <create_chain+0x88>
 800b41a:	2300      	movs	r3, #0
 800b41c:	e04f      	b.n	800b4be <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b41e:	69f9      	ldr	r1, [r7, #28]
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f7ff fd6c 	bl	800aefe <get_fat>
 800b426:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00e      	beq.n	800b44c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2b01      	cmp	r3, #1
 800b432:	d003      	beq.n	800b43c <create_chain+0xa6>
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43a:	d101      	bne.n	800b440 <create_chain+0xaa>
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	e03e      	b.n	800b4be <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b440:	69fa      	ldr	r2, [r7, #28]
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	429a      	cmp	r2, r3
 800b446:	d1da      	bne.n	800b3fe <create_chain+0x68>
 800b448:	2300      	movs	r3, #0
 800b44a:	e038      	b.n	800b4be <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b44c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b44e:	f04f 32ff 	mov.w	r2, #4294967295
 800b452:	69f9      	ldr	r1, [r7, #28]
 800b454:	6938      	ldr	r0, [r7, #16]
 800b456:	f7ff fe22 	bl	800b09e <put_fat>
 800b45a:	4603      	mov	r3, r0
 800b45c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b45e:	7dfb      	ldrb	r3, [r7, #23]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d109      	bne.n	800b478 <create_chain+0xe2>
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d006      	beq.n	800b478 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b46a:	69fa      	ldr	r2, [r7, #28]
 800b46c:	6839      	ldr	r1, [r7, #0]
 800b46e:	6938      	ldr	r0, [r7, #16]
 800b470:	f7ff fe15 	bl	800b09e <put_fat>
 800b474:	4603      	mov	r3, r0
 800b476:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b478:	7dfb      	ldrb	r3, [r7, #23]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d116      	bne.n	800b4ac <create_chain+0x116>
		fs->last_clst = ncl;
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	69fa      	ldr	r2, [r7, #28]
 800b482:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	695a      	ldr	r2, [r3, #20]
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	699b      	ldr	r3, [r3, #24]
 800b48c:	3b02      	subs	r3, #2
 800b48e:	429a      	cmp	r2, r3
 800b490:	d804      	bhi.n	800b49c <create_chain+0x106>
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	695b      	ldr	r3, [r3, #20]
 800b496:	1e5a      	subs	r2, r3, #1
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	791b      	ldrb	r3, [r3, #4]
 800b4a0:	f043 0301 	orr.w	r3, r3, #1
 800b4a4:	b2da      	uxtb	r2, r3
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	711a      	strb	r2, [r3, #4]
 800b4aa:	e007      	b.n	800b4bc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b4ac:	7dfb      	ldrb	r3, [r7, #23]
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d102      	bne.n	800b4b8 <create_chain+0x122>
 800b4b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4b6:	e000      	b.n	800b4ba <create_chain+0x124>
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b4bc:	69fb      	ldr	r3, [r7, #28]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3720      	adds	r7, #32
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b4c6:	b480      	push	{r7}
 800b4c8:	b087      	sub	sp, #28
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4da:	3304      	adds	r3, #4
 800b4dc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	899b      	ldrh	r3, [r3, #12]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4ea:	68fa      	ldr	r2, [r7, #12]
 800b4ec:	8952      	ldrh	r2, [r2, #10]
 800b4ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4f2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	1d1a      	adds	r2, r3, #4
 800b4f8:	613a      	str	r2, [r7, #16]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d101      	bne.n	800b508 <clmt_clust+0x42>
 800b504:	2300      	movs	r3, #0
 800b506:	e010      	b.n	800b52a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b508:	697a      	ldr	r2, [r7, #20]
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d307      	bcc.n	800b520 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b510:	697a      	ldr	r2, [r7, #20]
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	1ad3      	subs	r3, r2, r3
 800b516:	617b      	str	r3, [r7, #20]
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	3304      	adds	r3, #4
 800b51c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b51e:	e7e9      	b.n	800b4f4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b520:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	4413      	add	r3, r2
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	371c      	adds	r7, #28
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr

0800b536 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b086      	sub	sp, #24
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
 800b53e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b54c:	d204      	bcs.n	800b558 <dir_sdi+0x22>
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	f003 031f 	and.w	r3, r3, #31
 800b554:	2b00      	cmp	r3, #0
 800b556:	d001      	beq.n	800b55c <dir_sdi+0x26>
		return FR_INT_ERR;
 800b558:	2302      	movs	r3, #2
 800b55a:	e071      	b.n	800b640 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d106      	bne.n	800b57c <dir_sdi+0x46>
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	2b02      	cmp	r3, #2
 800b574:	d902      	bls.n	800b57c <dir_sdi+0x46>
		clst = fs->dirbase;
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b57a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d10c      	bne.n	800b59c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	095b      	lsrs	r3, r3, #5
 800b586:	693a      	ldr	r2, [r7, #16]
 800b588:	8912      	ldrh	r2, [r2, #8]
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d301      	bcc.n	800b592 <dir_sdi+0x5c>
 800b58e:	2302      	movs	r3, #2
 800b590:	e056      	b.n	800b640 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	61da      	str	r2, [r3, #28]
 800b59a:	e02d      	b.n	800b5f8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	895b      	ldrh	r3, [r3, #10]
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	899b      	ldrh	r3, [r3, #12]
 800b5a6:	fb03 f302 	mul.w	r3, r3, r2
 800b5aa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b5ac:	e019      	b.n	800b5e2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6979      	ldr	r1, [r7, #20]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7ff fca3 	bl	800aefe <get_fat>
 800b5b8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c0:	d101      	bne.n	800b5c6 <dir_sdi+0x90>
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e03c      	b.n	800b640 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d904      	bls.n	800b5d6 <dir_sdi+0xa0>
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	699b      	ldr	r3, [r3, #24]
 800b5d0:	697a      	ldr	r2, [r7, #20]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d301      	bcc.n	800b5da <dir_sdi+0xa4>
 800b5d6:	2302      	movs	r3, #2
 800b5d8:	e032      	b.n	800b640 <dir_sdi+0x10a>
			ofs -= csz;
 800b5da:	683a      	ldr	r2, [r7, #0]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	1ad3      	subs	r3, r2, r3
 800b5e0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b5e2:	683a      	ldr	r2, [r7, #0]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d2e1      	bcs.n	800b5ae <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b5ea:	6979      	ldr	r1, [r7, #20]
 800b5ec:	6938      	ldr	r0, [r7, #16]
 800b5ee:	f7ff fc67 	bl	800aec0 <clust2sect>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	697a      	ldr	r2, [r7, #20]
 800b5fc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	69db      	ldr	r3, [r3, #28]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <dir_sdi+0xd4>
 800b606:	2302      	movs	r3, #2
 800b608:	e01a      	b.n	800b640 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	69da      	ldr	r2, [r3, #28]
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	899b      	ldrh	r3, [r3, #12]
 800b612:	4619      	mov	r1, r3
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	fbb3 f3f1 	udiv	r3, r3, r1
 800b61a:	441a      	add	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	899b      	ldrh	r3, [r3, #12]
 800b62a:	461a      	mov	r2, r3
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b632:	fb02 f200 	mul.w	r2, r2, r0
 800b636:	1a9b      	subs	r3, r3, r2
 800b638:	18ca      	adds	r2, r1, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3718      	adds	r7, #24
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	695b      	ldr	r3, [r3, #20]
 800b65c:	3320      	adds	r3, #32
 800b65e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	69db      	ldr	r3, [r3, #28]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d003      	beq.n	800b670 <dir_next+0x28>
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b66e:	d301      	bcc.n	800b674 <dir_next+0x2c>
 800b670:	2304      	movs	r3, #4
 800b672:	e0bb      	b.n	800b7ec <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	899b      	ldrh	r3, [r3, #12]
 800b678:	461a      	mov	r2, r3
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b680:	fb02 f201 	mul.w	r2, r2, r1
 800b684:	1a9b      	subs	r3, r3, r2
 800b686:	2b00      	cmp	r3, #0
 800b688:	f040 809d 	bne.w	800b7c6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	69db      	ldr	r3, [r3, #28]
 800b690:	1c5a      	adds	r2, r3, #1
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	699b      	ldr	r3, [r3, #24]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10b      	bne.n	800b6b6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	095b      	lsrs	r3, r3, #5
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	8912      	ldrh	r2, [r2, #8]
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	f0c0 808d 	bcc.w	800b7c6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	61da      	str	r2, [r3, #28]
 800b6b2:	2304      	movs	r3, #4
 800b6b4:	e09a      	b.n	800b7ec <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	899b      	ldrh	r3, [r3, #12]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	8952      	ldrh	r2, [r2, #10]
 800b6c6:	3a01      	subs	r2, #1
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d17b      	bne.n	800b7c6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	699b      	ldr	r3, [r3, #24]
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	f7ff fc11 	bl	800aefe <get_fat>
 800b6dc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d801      	bhi.n	800b6e8 <dir_next+0xa0>
 800b6e4:	2302      	movs	r3, #2
 800b6e6:	e081      	b.n	800b7ec <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ee:	d101      	bne.n	800b6f4 <dir_next+0xac>
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e07b      	b.n	800b7ec <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d359      	bcc.n	800b7b2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d104      	bne.n	800b70e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	61da      	str	r2, [r3, #28]
 800b70a:	2304      	movs	r3, #4
 800b70c:	e06e      	b.n	800b7ec <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	699b      	ldr	r3, [r3, #24]
 800b714:	4619      	mov	r1, r3
 800b716:	4610      	mov	r0, r2
 800b718:	f7ff fe3d 	bl	800b396 <create_chain>
 800b71c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d101      	bne.n	800b728 <dir_next+0xe0>
 800b724:	2307      	movs	r3, #7
 800b726:	e061      	b.n	800b7ec <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d101      	bne.n	800b732 <dir_next+0xea>
 800b72e:	2302      	movs	r3, #2
 800b730:	e05c      	b.n	800b7ec <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b738:	d101      	bne.n	800b73e <dir_next+0xf6>
 800b73a:	2301      	movs	r3, #1
 800b73c:	e056      	b.n	800b7ec <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f7ff fadc 	bl	800acfc <sync_window>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d001      	beq.n	800b74e <dir_next+0x106>
 800b74a:	2301      	movs	r3, #1
 800b74c:	e04e      	b.n	800b7ec <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	899b      	ldrh	r3, [r3, #12]
 800b758:	461a      	mov	r2, r3
 800b75a:	2100      	movs	r1, #0
 800b75c:	f7ff f905 	bl	800a96a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b760:	2300      	movs	r3, #0
 800b762:	613b      	str	r3, [r7, #16]
 800b764:	6979      	ldr	r1, [r7, #20]
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f7ff fbaa 	bl	800aec0 <clust2sect>
 800b76c:	4602      	mov	r2, r0
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	631a      	str	r2, [r3, #48]	; 0x30
 800b772:	e012      	b.n	800b79a <dir_next+0x152>
						fs->wflag = 1;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2201      	movs	r2, #1
 800b778:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f7ff fabe 	bl	800acfc <sync_window>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d001      	beq.n	800b78a <dir_next+0x142>
 800b786:	2301      	movs	r3, #1
 800b788:	e030      	b.n	800b7ec <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	3301      	adds	r3, #1
 800b78e:	613b      	str	r3, [r7, #16]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b794:	1c5a      	adds	r2, r3, #1
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	631a      	str	r2, [r3, #48]	; 0x30
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	895b      	ldrh	r3, [r3, #10]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d3e6      	bcc.n	800b774 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	1ad2      	subs	r2, r2, r3
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	697a      	ldr	r2, [r7, #20]
 800b7b6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b7b8:	6979      	ldr	r1, [r7, #20]
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f7ff fb80 	bl	800aec0 <clust2sect>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68ba      	ldr	r2, [r7, #8]
 800b7ca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	899b      	ldrh	r3, [r3, #12]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	fbb3 f0f2 	udiv	r0, r3, r2
 800b7de:	fb02 f200 	mul.w	r2, r2, r0
 800b7e2:	1a9b      	subs	r3, r3, r2
 800b7e4:	18ca      	adds	r2, r1, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3718      	adds	r7, #24
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b086      	sub	sp, #24
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b804:	2100      	movs	r1, #0
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f7ff fe95 	bl	800b536 <dir_sdi>
 800b80c:	4603      	mov	r3, r0
 800b80e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b810:	7dfb      	ldrb	r3, [r7, #23]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d12b      	bne.n	800b86e <dir_alloc+0x7a>
		n = 0;
 800b816:	2300      	movs	r3, #0
 800b818:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	69db      	ldr	r3, [r3, #28]
 800b81e:	4619      	mov	r1, r3
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f7ff faaf 	bl	800ad84 <move_window>
 800b826:	4603      	mov	r3, r0
 800b828:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b82a:	7dfb      	ldrb	r3, [r7, #23]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d11d      	bne.n	800b86c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6a1b      	ldr	r3, [r3, #32]
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	2be5      	cmp	r3, #229	; 0xe5
 800b838:	d004      	beq.n	800b844 <dir_alloc+0x50>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a1b      	ldr	r3, [r3, #32]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d107      	bne.n	800b854 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	3301      	adds	r3, #1
 800b848:	613b      	str	r3, [r7, #16]
 800b84a:	693a      	ldr	r2, [r7, #16]
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d102      	bne.n	800b858 <dir_alloc+0x64>
 800b852:	e00c      	b.n	800b86e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b854:	2300      	movs	r3, #0
 800b856:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b858:	2101      	movs	r1, #1
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f7ff fef4 	bl	800b648 <dir_next>
 800b860:	4603      	mov	r3, r0
 800b862:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b864:	7dfb      	ldrb	r3, [r7, #23]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d0d7      	beq.n	800b81a <dir_alloc+0x26>
 800b86a:	e000      	b.n	800b86e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b86c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b86e:	7dfb      	ldrb	r3, [r7, #23]
 800b870:	2b04      	cmp	r3, #4
 800b872:	d101      	bne.n	800b878 <dir_alloc+0x84>
 800b874:	2307      	movs	r3, #7
 800b876:	75fb      	strb	r3, [r7, #23]
	return res;
 800b878:	7dfb      	ldrb	r3, [r7, #23]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3718      	adds	r7, #24
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b084      	sub	sp, #16
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
 800b88a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	331a      	adds	r3, #26
 800b890:	4618      	mov	r0, r3
 800b892:	f7fe ffc7 	bl	800a824 <ld_word>
 800b896:	4603      	mov	r3, r0
 800b898:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	2b03      	cmp	r3, #3
 800b8a0:	d109      	bne.n	800b8b6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	3314      	adds	r3, #20
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fe ffbc 	bl	800a824 <ld_word>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	041b      	lsls	r3, r3, #16
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	331a      	adds	r3, #26
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	b292      	uxth	r2, r2
 800b8d4:	4611      	mov	r1, r2
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fe ffdf 	bl	800a89a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	2b03      	cmp	r3, #3
 800b8e2:	d109      	bne.n	800b8f8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	f103 0214 	add.w	r2, r3, #20
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	0c1b      	lsrs	r3, r3, #16
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	4610      	mov	r0, r2
 800b8f4:	f7fe ffd1 	bl	800a89a <st_word>
	}
}
 800b8f8:	bf00      	nop
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b086      	sub	sp, #24
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b90e:	2100      	movs	r1, #0
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f7ff fe10 	bl	800b536 <dir_sdi>
 800b916:	4603      	mov	r3, r0
 800b918:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b91a:	7dfb      	ldrb	r3, [r7, #23]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d001      	beq.n	800b924 <dir_find+0x24>
 800b920:	7dfb      	ldrb	r3, [r7, #23]
 800b922:	e03e      	b.n	800b9a2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	69db      	ldr	r3, [r3, #28]
 800b928:	4619      	mov	r1, r3
 800b92a:	6938      	ldr	r0, [r7, #16]
 800b92c:	f7ff fa2a 	bl	800ad84 <move_window>
 800b930:	4603      	mov	r3, r0
 800b932:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b934:	7dfb      	ldrb	r3, [r7, #23]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d12f      	bne.n	800b99a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a1b      	ldr	r3, [r3, #32]
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b942:	7bfb      	ldrb	r3, [r7, #15]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d102      	bne.n	800b94e <dir_find+0x4e>
 800b948:	2304      	movs	r3, #4
 800b94a:	75fb      	strb	r3, [r7, #23]
 800b94c:	e028      	b.n	800b9a0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6a1b      	ldr	r3, [r3, #32]
 800b952:	330b      	adds	r3, #11
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b95a:	b2da      	uxtb	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6a1b      	ldr	r3, [r3, #32]
 800b964:	330b      	adds	r3, #11
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	f003 0308 	and.w	r3, r3, #8
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10a      	bne.n	800b986 <dir_find+0x86>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a18      	ldr	r0, [r3, #32]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	3324      	adds	r3, #36	; 0x24
 800b978:	220b      	movs	r2, #11
 800b97a:	4619      	mov	r1, r3
 800b97c:	f7ff f80f 	bl	800a99e <mem_cmp>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00b      	beq.n	800b99e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b986:	2100      	movs	r1, #0
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f7ff fe5d 	bl	800b648 <dir_next>
 800b98e:	4603      	mov	r3, r0
 800b990:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b992:	7dfb      	ldrb	r3, [r7, #23]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d0c5      	beq.n	800b924 <dir_find+0x24>
 800b998:	e002      	b.n	800b9a0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b99a:	bf00      	nop
 800b99c:	e000      	b.n	800b9a0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b99e:	bf00      	nop

	return res;
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3718      	adds	r7, #24
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b084      	sub	sp, #16
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b9b8:	2101      	movs	r1, #1
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f7ff ff1a 	bl	800b7f4 <dir_alloc>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b9c4:	7bfb      	ldrb	r3, [r7, #15]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d11c      	bne.n	800ba04 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	69db      	ldr	r3, [r3, #28]
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	68b8      	ldr	r0, [r7, #8]
 800b9d2:	f7ff f9d7 	bl	800ad84 <move_window>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d111      	bne.n	800ba04 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6a1b      	ldr	r3, [r3, #32]
 800b9e4:	2220      	movs	r2, #32
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7fe ffbe 	bl	800a96a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a18      	ldr	r0, [r3, #32]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	3324      	adds	r3, #36	; 0x24
 800b9f6:	220b      	movs	r2, #11
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	f7fe ff95 	bl	800a928 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	2201      	movs	r2, #1
 800ba02:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ba04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
	...

0800ba10 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b088      	sub	sp, #32
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	60fb      	str	r3, [r7, #12]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	3324      	adds	r3, #36	; 0x24
 800ba24:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ba26:	220b      	movs	r2, #11
 800ba28:	2120      	movs	r1, #32
 800ba2a:	68b8      	ldr	r0, [r7, #8]
 800ba2c:	f7fe ff9d 	bl	800a96a <mem_set>
	si = i = 0; ni = 8;
 800ba30:	2300      	movs	r3, #0
 800ba32:	613b      	str	r3, [r7, #16]
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	617b      	str	r3, [r7, #20]
 800ba38:	2308      	movs	r3, #8
 800ba3a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	1c5a      	adds	r2, r3, #1
 800ba40:	617a      	str	r2, [r7, #20]
 800ba42:	68fa      	ldr	r2, [r7, #12]
 800ba44:	4413      	add	r3, r2
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ba4a:	7ffb      	ldrb	r3, [r7, #31]
 800ba4c:	2b20      	cmp	r3, #32
 800ba4e:	d94e      	bls.n	800baee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ba50:	7ffb      	ldrb	r3, [r7, #31]
 800ba52:	2b2f      	cmp	r3, #47	; 0x2f
 800ba54:	d006      	beq.n	800ba64 <create_name+0x54>
 800ba56:	7ffb      	ldrb	r3, [r7, #31]
 800ba58:	2b5c      	cmp	r3, #92	; 0x5c
 800ba5a:	d110      	bne.n	800ba7e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ba5c:	e002      	b.n	800ba64 <create_name+0x54>
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	3301      	adds	r3, #1
 800ba62:	617b      	str	r3, [r7, #20]
 800ba64:	68fa      	ldr	r2, [r7, #12]
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	4413      	add	r3, r2
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	2b2f      	cmp	r3, #47	; 0x2f
 800ba6e:	d0f6      	beq.n	800ba5e <create_name+0x4e>
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	4413      	add	r3, r2
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	2b5c      	cmp	r3, #92	; 0x5c
 800ba7a:	d0f0      	beq.n	800ba5e <create_name+0x4e>
			break;
 800ba7c:	e038      	b.n	800baf0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ba7e:	7ffb      	ldrb	r3, [r7, #31]
 800ba80:	2b2e      	cmp	r3, #46	; 0x2e
 800ba82:	d003      	beq.n	800ba8c <create_name+0x7c>
 800ba84:	693a      	ldr	r2, [r7, #16]
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d30c      	bcc.n	800baa6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	2b0b      	cmp	r3, #11
 800ba90:	d002      	beq.n	800ba98 <create_name+0x88>
 800ba92:	7ffb      	ldrb	r3, [r7, #31]
 800ba94:	2b2e      	cmp	r3, #46	; 0x2e
 800ba96:	d001      	beq.n	800ba9c <create_name+0x8c>
 800ba98:	2306      	movs	r3, #6
 800ba9a:	e044      	b.n	800bb26 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ba9c:	2308      	movs	r3, #8
 800ba9e:	613b      	str	r3, [r7, #16]
 800baa0:	230b      	movs	r3, #11
 800baa2:	61bb      	str	r3, [r7, #24]
			continue;
 800baa4:	e022      	b.n	800baec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800baa6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	da04      	bge.n	800bab8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800baae:	7ffb      	ldrb	r3, [r7, #31]
 800bab0:	3b80      	subs	r3, #128	; 0x80
 800bab2:	4a1f      	ldr	r2, [pc, #124]	; (800bb30 <create_name+0x120>)
 800bab4:	5cd3      	ldrb	r3, [r2, r3]
 800bab6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bab8:	7ffb      	ldrb	r3, [r7, #31]
 800baba:	4619      	mov	r1, r3
 800babc:	481d      	ldr	r0, [pc, #116]	; (800bb34 <create_name+0x124>)
 800babe:	f7fe ff95 	bl	800a9ec <chk_chr>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d001      	beq.n	800bacc <create_name+0xbc>
 800bac8:	2306      	movs	r3, #6
 800baca:	e02c      	b.n	800bb26 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bacc:	7ffb      	ldrb	r3, [r7, #31]
 800bace:	2b60      	cmp	r3, #96	; 0x60
 800bad0:	d905      	bls.n	800bade <create_name+0xce>
 800bad2:	7ffb      	ldrb	r3, [r7, #31]
 800bad4:	2b7a      	cmp	r3, #122	; 0x7a
 800bad6:	d802      	bhi.n	800bade <create_name+0xce>
 800bad8:	7ffb      	ldrb	r3, [r7, #31]
 800bada:	3b20      	subs	r3, #32
 800badc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	1c5a      	adds	r2, r3, #1
 800bae2:	613a      	str	r2, [r7, #16]
 800bae4:	68ba      	ldr	r2, [r7, #8]
 800bae6:	4413      	add	r3, r2
 800bae8:	7ffa      	ldrb	r2, [r7, #31]
 800baea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800baec:	e7a6      	b.n	800ba3c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800baee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800baf0:	68fa      	ldr	r2, [r7, #12]
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	441a      	add	r2, r3
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d101      	bne.n	800bb04 <create_name+0xf4>
 800bb00:	2306      	movs	r3, #6
 800bb02:	e010      	b.n	800bb26 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	2be5      	cmp	r3, #229	; 0xe5
 800bb0a:	d102      	bne.n	800bb12 <create_name+0x102>
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	2205      	movs	r2, #5
 800bb10:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bb12:	7ffb      	ldrb	r3, [r7, #31]
 800bb14:	2b20      	cmp	r3, #32
 800bb16:	d801      	bhi.n	800bb1c <create_name+0x10c>
 800bb18:	2204      	movs	r2, #4
 800bb1a:	e000      	b.n	800bb1e <create_name+0x10e>
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	330b      	adds	r3, #11
 800bb22:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bb24:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3720      	adds	r7, #32
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	080130c4 	.word	0x080130c4
 800bb34:	08012f04 	.word	0x08012f04

0800bb38 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bb4c:	e002      	b.n	800bb54 <follow_path+0x1c>
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	3301      	adds	r3, #1
 800bb52:	603b      	str	r3, [r7, #0]
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	2b2f      	cmp	r3, #47	; 0x2f
 800bb5a:	d0f8      	beq.n	800bb4e <follow_path+0x16>
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	2b5c      	cmp	r3, #92	; 0x5c
 800bb62:	d0f4      	beq.n	800bb4e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	2200      	movs	r2, #0
 800bb68:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	2b1f      	cmp	r3, #31
 800bb70:	d80a      	bhi.n	800bb88 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2280      	movs	r2, #128	; 0x80
 800bb76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f7ff fcda 	bl	800b536 <dir_sdi>
 800bb82:	4603      	mov	r3, r0
 800bb84:	75fb      	strb	r3, [r7, #23]
 800bb86:	e048      	b.n	800bc1a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bb88:	463b      	mov	r3, r7
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f7ff ff3f 	bl	800ba10 <create_name>
 800bb92:	4603      	mov	r3, r0
 800bb94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb96:	7dfb      	ldrb	r3, [r7, #23]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d139      	bne.n	800bc10 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f7ff feaf 	bl	800b900 <dir_find>
 800bba2:	4603      	mov	r3, r0
 800bba4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bbac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bbae:	7dfb      	ldrb	r3, [r7, #23]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00a      	beq.n	800bbca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bbb4:	7dfb      	ldrb	r3, [r7, #23]
 800bbb6:	2b04      	cmp	r3, #4
 800bbb8:	d12c      	bne.n	800bc14 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bbba:	7afb      	ldrb	r3, [r7, #11]
 800bbbc:	f003 0304 	and.w	r3, r3, #4
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d127      	bne.n	800bc14 <follow_path+0xdc>
 800bbc4:	2305      	movs	r3, #5
 800bbc6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bbc8:	e024      	b.n	800bc14 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bbca:	7afb      	ldrb	r3, [r7, #11]
 800bbcc:	f003 0304 	and.w	r3, r3, #4
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d121      	bne.n	800bc18 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	799b      	ldrb	r3, [r3, #6]
 800bbd8:	f003 0310 	and.w	r3, r3, #16
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d102      	bne.n	800bbe6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bbe0:	2305      	movs	r3, #5
 800bbe2:	75fb      	strb	r3, [r7, #23]
 800bbe4:	e019      	b.n	800bc1a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	695b      	ldr	r3, [r3, #20]
 800bbf0:	68fa      	ldr	r2, [r7, #12]
 800bbf2:	8992      	ldrh	r2, [r2, #12]
 800bbf4:	fbb3 f0f2 	udiv	r0, r3, r2
 800bbf8:	fb02 f200 	mul.w	r2, r2, r0
 800bbfc:	1a9b      	subs	r3, r3, r2
 800bbfe:	440b      	add	r3, r1
 800bc00:	4619      	mov	r1, r3
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f7ff fe3d 	bl	800b882 <ld_clust>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bc0e:	e7bb      	b.n	800bb88 <follow_path+0x50>
			if (res != FR_OK) break;
 800bc10:	bf00      	nop
 800bc12:	e002      	b.n	800bc1a <follow_path+0xe2>
				break;
 800bc14:	bf00      	nop
 800bc16:	e000      	b.n	800bc1a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bc18:	bf00      	nop
			}
		}
	}

	return res;
 800bc1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3718      	adds	r7, #24
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b087      	sub	sp, #28
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bc2c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc30:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d031      	beq.n	800bc9e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	617b      	str	r3, [r7, #20]
 800bc40:	e002      	b.n	800bc48 <get_ldnumber+0x24>
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	3301      	adds	r3, #1
 800bc46:	617b      	str	r3, [r7, #20]
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	2b20      	cmp	r3, #32
 800bc4e:	d903      	bls.n	800bc58 <get_ldnumber+0x34>
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	2b3a      	cmp	r3, #58	; 0x3a
 800bc56:	d1f4      	bne.n	800bc42 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	2b3a      	cmp	r3, #58	; 0x3a
 800bc5e:	d11c      	bne.n	800bc9a <get_ldnumber+0x76>
			tp = *path;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	1c5a      	adds	r2, r3, #1
 800bc6a:	60fa      	str	r2, [r7, #12]
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	3b30      	subs	r3, #48	; 0x30
 800bc70:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	2b09      	cmp	r3, #9
 800bc76:	d80e      	bhi.n	800bc96 <get_ldnumber+0x72>
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d10a      	bne.n	800bc96 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d107      	bne.n	800bc96 <get_ldnumber+0x72>
					vol = (int)i;
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	617b      	str	r3, [r7, #20]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	697a      	ldr	r2, [r7, #20]
 800bc94:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	e002      	b.n	800bca0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bc9e:	693b      	ldr	r3, [r7, #16]
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	371c      	adds	r7, #28
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	70da      	strb	r2, [r3, #3]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bcc4:	6839      	ldr	r1, [r7, #0]
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f7ff f85c 	bl	800ad84 <move_window>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d001      	beq.n	800bcd6 <check_fs+0x2a>
 800bcd2:	2304      	movs	r3, #4
 800bcd4:	e038      	b.n	800bd48 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	3334      	adds	r3, #52	; 0x34
 800bcda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fe fda0 	bl	800a824 <ld_word>
 800bce4:	4603      	mov	r3, r0
 800bce6:	461a      	mov	r2, r3
 800bce8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d001      	beq.n	800bcf4 <check_fs+0x48>
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	e029      	b.n	800bd48 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bcfa:	2be9      	cmp	r3, #233	; 0xe9
 800bcfc:	d009      	beq.n	800bd12 <check_fs+0x66>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd04:	2beb      	cmp	r3, #235	; 0xeb
 800bd06:	d11e      	bne.n	800bd46 <check_fs+0x9a>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800bd0e:	2b90      	cmp	r3, #144	; 0x90
 800bd10:	d119      	bne.n	800bd46 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	3334      	adds	r3, #52	; 0x34
 800bd16:	3336      	adds	r3, #54	; 0x36
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7fe fd9b 	bl	800a854 <ld_dword>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bd24:	4a0a      	ldr	r2, [pc, #40]	; (800bd50 <check_fs+0xa4>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d101      	bne.n	800bd2e <check_fs+0x82>
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	e00c      	b.n	800bd48 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	3334      	adds	r3, #52	; 0x34
 800bd32:	3352      	adds	r3, #82	; 0x52
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7fe fd8d 	bl	800a854 <ld_dword>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	4b05      	ldr	r3, [pc, #20]	; (800bd54 <check_fs+0xa8>)
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d101      	bne.n	800bd46 <check_fs+0x9a>
 800bd42:	2300      	movs	r3, #0
 800bd44:	e000      	b.n	800bd48 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bd46:	2302      	movs	r3, #2
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3708      	adds	r7, #8
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	00544146 	.word	0x00544146
 800bd54:	33544146 	.word	0x33544146

0800bd58 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b096      	sub	sp, #88	; 0x58
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	4613      	mov	r3, r2
 800bd64:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f7ff ff59 	bl	800bc24 <get_ldnumber>
 800bd72:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bd74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	da01      	bge.n	800bd7e <find_volume+0x26>
 800bd7a:	230b      	movs	r3, #11
 800bd7c:	e265      	b.n	800c24a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bd7e:	4ab0      	ldr	r2, [pc, #704]	; (800c040 <find_volume+0x2e8>)
 800bd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd86:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d101      	bne.n	800bd92 <find_volume+0x3a>
 800bd8e:	230c      	movs	r3, #12
 800bd90:	e25b      	b.n	800c24a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd96:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bd98:	79fb      	ldrb	r3, [r7, #7]
 800bd9a:	f023 0301 	bic.w	r3, r3, #1
 800bd9e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d01a      	beq.n	800bdde <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdaa:	785b      	ldrb	r3, [r3, #1]
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7fe fc9b 	bl	800a6e8 <disk_status>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bdb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bdbc:	f003 0301 	and.w	r3, r3, #1
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10c      	bne.n	800bdde <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bdc4:	79fb      	ldrb	r3, [r7, #7]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d007      	beq.n	800bdda <find_volume+0x82>
 800bdca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bdce:	f003 0304 	and.w	r3, r3, #4
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d001      	beq.n	800bdda <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bdd6:	230a      	movs	r3, #10
 800bdd8:	e237      	b.n	800c24a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800bdda:	2300      	movs	r3, #0
 800bddc:	e235      	b.n	800c24a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde0:	2200      	movs	r2, #0
 800bde2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bde4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde6:	b2da      	uxtb	r2, r3
 800bde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdee:	785b      	ldrb	r3, [r3, #1]
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7fe fc93 	bl	800a71c <disk_initialize>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bdfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be00:	f003 0301 	and.w	r3, r3, #1
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800be08:	2303      	movs	r3, #3
 800be0a:	e21e      	b.n	800c24a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800be0c:	79fb      	ldrb	r3, [r7, #7]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d007      	beq.n	800be22 <find_volume+0xca>
 800be12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800be16:	f003 0304 	and.w	r3, r3, #4
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d001      	beq.n	800be22 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800be1e:	230a      	movs	r3, #10
 800be20:	e213      	b.n	800c24a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800be22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be24:	7858      	ldrb	r0, [r3, #1]
 800be26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be28:	330c      	adds	r3, #12
 800be2a:	461a      	mov	r2, r3
 800be2c:	2102      	movs	r1, #2
 800be2e:	f7fe fcdb 	bl	800a7e8 <disk_ioctl>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d001      	beq.n	800be3c <find_volume+0xe4>
 800be38:	2301      	movs	r3, #1
 800be3a:	e206      	b.n	800c24a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800be3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3e:	899b      	ldrh	r3, [r3, #12]
 800be40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be44:	d80d      	bhi.n	800be62 <find_volume+0x10a>
 800be46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be48:	899b      	ldrh	r3, [r3, #12]
 800be4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be4e:	d308      	bcc.n	800be62 <find_volume+0x10a>
 800be50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be52:	899b      	ldrh	r3, [r3, #12]
 800be54:	461a      	mov	r2, r3
 800be56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be58:	899b      	ldrh	r3, [r3, #12]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	4013      	ands	r3, r2
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d001      	beq.n	800be66 <find_volume+0x10e>
 800be62:	2301      	movs	r3, #1
 800be64:	e1f1      	b.n	800c24a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800be66:	2300      	movs	r3, #0
 800be68:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800be6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be6e:	f7ff ff1d 	bl	800bcac <check_fs>
 800be72:	4603      	mov	r3, r0
 800be74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800be78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be7c:	2b02      	cmp	r3, #2
 800be7e:	d14b      	bne.n	800bf18 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800be80:	2300      	movs	r3, #0
 800be82:	643b      	str	r3, [r7, #64]	; 0x40
 800be84:	e01f      	b.n	800bec6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800be86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be88:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800be8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be8e:	011b      	lsls	r3, r3, #4
 800be90:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800be94:	4413      	add	r3, r2
 800be96:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800be98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9a:	3304      	adds	r3, #4
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d006      	beq.n	800beb0 <find_volume+0x158>
 800bea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea4:	3308      	adds	r3, #8
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fe fcd4 	bl	800a854 <ld_dword>
 800beac:	4602      	mov	r2, r0
 800beae:	e000      	b.n	800beb2 <find_volume+0x15a>
 800beb0:	2200      	movs	r2, #0
 800beb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800beba:	440b      	add	r3, r1
 800bebc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bec2:	3301      	adds	r3, #1
 800bec4:	643b      	str	r3, [r7, #64]	; 0x40
 800bec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bec8:	2b03      	cmp	r3, #3
 800beca:	d9dc      	bls.n	800be86 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800becc:	2300      	movs	r3, #0
 800bece:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d002      	beq.n	800bedc <find_volume+0x184>
 800bed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bed8:	3b01      	subs	r3, #1
 800beda:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bedc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bee4:	4413      	add	r3, r2
 800bee6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800beea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800beec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d005      	beq.n	800befe <find_volume+0x1a6>
 800bef2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bef4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bef6:	f7ff fed9 	bl	800bcac <check_fs>
 800befa:	4603      	mov	r3, r0
 800befc:	e000      	b.n	800bf00 <find_volume+0x1a8>
 800befe:	2303      	movs	r3, #3
 800bf00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bf04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d905      	bls.n	800bf18 <find_volume+0x1c0>
 800bf0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf0e:	3301      	adds	r3, #1
 800bf10:	643b      	str	r3, [r7, #64]	; 0x40
 800bf12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf14:	2b03      	cmp	r3, #3
 800bf16:	d9e1      	bls.n	800bedc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bf18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf1c:	2b04      	cmp	r3, #4
 800bf1e:	d101      	bne.n	800bf24 <find_volume+0x1cc>
 800bf20:	2301      	movs	r3, #1
 800bf22:	e192      	b.n	800c24a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bf24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d901      	bls.n	800bf30 <find_volume+0x1d8>
 800bf2c:	230d      	movs	r3, #13
 800bf2e:	e18c      	b.n	800c24a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf32:	3334      	adds	r3, #52	; 0x34
 800bf34:	330b      	adds	r3, #11
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7fe fc74 	bl	800a824 <ld_word>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	461a      	mov	r2, r3
 800bf40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf42:	899b      	ldrh	r3, [r3, #12]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d001      	beq.n	800bf4c <find_volume+0x1f4>
 800bf48:	230d      	movs	r3, #13
 800bf4a:	e17e      	b.n	800c24a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4e:	3334      	adds	r3, #52	; 0x34
 800bf50:	3316      	adds	r3, #22
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7fe fc66 	bl	800a824 <ld_word>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bf5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d106      	bne.n	800bf70 <find_volume+0x218>
 800bf62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf64:	3334      	adds	r3, #52	; 0x34
 800bf66:	3324      	adds	r3, #36	; 0x24
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7fe fc73 	bl	800a854 <ld_dword>
 800bf6e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf74:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf78:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800bf7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf82:	789b      	ldrb	r3, [r3, #2]
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d005      	beq.n	800bf94 <find_volume+0x23c>
 800bf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8a:	789b      	ldrb	r3, [r3, #2]
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	d001      	beq.n	800bf94 <find_volume+0x23c>
 800bf90:	230d      	movs	r3, #13
 800bf92:	e15a      	b.n	800c24a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf96:	789b      	ldrb	r3, [r3, #2]
 800bf98:	461a      	mov	r2, r3
 800bf9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf9c:	fb02 f303 	mul.w	r3, r2, r3
 800bfa0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfa8:	b29a      	uxth	r2, r3
 800bfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb0:	895b      	ldrh	r3, [r3, #10]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d008      	beq.n	800bfc8 <find_volume+0x270>
 800bfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb8:	895b      	ldrh	r3, [r3, #10]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbe:	895b      	ldrh	r3, [r3, #10]
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	4013      	ands	r3, r2
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d001      	beq.n	800bfcc <find_volume+0x274>
 800bfc8:	230d      	movs	r3, #13
 800bfca:	e13e      	b.n	800c24a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfce:	3334      	adds	r3, #52	; 0x34
 800bfd0:	3311      	adds	r3, #17
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fe fc26 	bl	800a824 <ld_word>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	461a      	mov	r2, r3
 800bfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfde:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe2:	891b      	ldrh	r3, [r3, #8]
 800bfe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfe6:	8992      	ldrh	r2, [r2, #12]
 800bfe8:	0952      	lsrs	r2, r2, #5
 800bfea:	b292      	uxth	r2, r2
 800bfec:	fbb3 f1f2 	udiv	r1, r3, r2
 800bff0:	fb02 f201 	mul.w	r2, r2, r1
 800bff4:	1a9b      	subs	r3, r3, r2
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d001      	beq.n	800c000 <find_volume+0x2a8>
 800bffc:	230d      	movs	r3, #13
 800bffe:	e124      	b.n	800c24a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c002:	3334      	adds	r3, #52	; 0x34
 800c004:	3313      	adds	r3, #19
 800c006:	4618      	mov	r0, r3
 800c008:	f7fe fc0c 	bl	800a824 <ld_word>
 800c00c:	4603      	mov	r3, r0
 800c00e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c012:	2b00      	cmp	r3, #0
 800c014:	d106      	bne.n	800c024 <find_volume+0x2cc>
 800c016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c018:	3334      	adds	r3, #52	; 0x34
 800c01a:	3320      	adds	r3, #32
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7fe fc19 	bl	800a854 <ld_dword>
 800c022:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c026:	3334      	adds	r3, #52	; 0x34
 800c028:	330e      	adds	r3, #14
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fe fbfa 	bl	800a824 <ld_word>
 800c030:	4603      	mov	r3, r0
 800c032:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c034:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c036:	2b00      	cmp	r3, #0
 800c038:	d104      	bne.n	800c044 <find_volume+0x2ec>
 800c03a:	230d      	movs	r3, #13
 800c03c:	e105      	b.n	800c24a <find_volume+0x4f2>
 800c03e:	bf00      	nop
 800c040:	20000774 	.word	0x20000774

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c044:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c048:	4413      	add	r3, r2
 800c04a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c04c:	8911      	ldrh	r1, [r2, #8]
 800c04e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c050:	8992      	ldrh	r2, [r2, #12]
 800c052:	0952      	lsrs	r2, r2, #5
 800c054:	b292      	uxth	r2, r2
 800c056:	fbb1 f2f2 	udiv	r2, r1, r2
 800c05a:	b292      	uxth	r2, r2
 800c05c:	4413      	add	r3, r2
 800c05e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c064:	429a      	cmp	r2, r3
 800c066:	d201      	bcs.n	800c06c <find_volume+0x314>
 800c068:	230d      	movs	r3, #13
 800c06a:	e0ee      	b.n	800c24a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c06c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c074:	8952      	ldrh	r2, [r2, #10]
 800c076:	fbb3 f3f2 	udiv	r3, r3, r2
 800c07a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d101      	bne.n	800c086 <find_volume+0x32e>
 800c082:	230d      	movs	r3, #13
 800c084:	e0e1      	b.n	800c24a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800c086:	2303      	movs	r3, #3
 800c088:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c092:	4293      	cmp	r3, r2
 800c094:	d802      	bhi.n	800c09c <find_volume+0x344>
 800c096:	2302      	movs	r3, #2
 800c098:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d802      	bhi.n	800c0ac <find_volume+0x354>
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ae:	1c9a      	adds	r2, r3, #2
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c0b8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c0ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c0bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0be:	441a      	add	r2, r3
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c0c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c8:	441a      	add	r2, r3
 800c0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0cc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c0ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c0d2:	2b03      	cmp	r3, #3
 800c0d4:	d11e      	bne.n	800c114 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d8:	3334      	adds	r3, #52	; 0x34
 800c0da:	332a      	adds	r3, #42	; 0x2a
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7fe fba1 	bl	800a824 <ld_word>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d001      	beq.n	800c0ec <find_volume+0x394>
 800c0e8:	230d      	movs	r3, #13
 800c0ea:	e0ae      	b.n	800c24a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ee:	891b      	ldrh	r3, [r3, #8]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d001      	beq.n	800c0f8 <find_volume+0x3a0>
 800c0f4:	230d      	movs	r3, #13
 800c0f6:	e0a8      	b.n	800c24a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fa:	3334      	adds	r3, #52	; 0x34
 800c0fc:	332c      	adds	r3, #44	; 0x2c
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fe fba8 	bl	800a854 <ld_dword>
 800c104:	4602      	mov	r2, r0
 800c106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c108:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10c:	699b      	ldr	r3, [r3, #24]
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	647b      	str	r3, [r7, #68]	; 0x44
 800c112:	e01f      	b.n	800c154 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c116:	891b      	ldrh	r3, [r3, #8]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d101      	bne.n	800c120 <find_volume+0x3c8>
 800c11c:	230d      	movs	r3, #13
 800c11e:	e094      	b.n	800c24a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c126:	441a      	add	r2, r3
 800c128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c12c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c130:	2b02      	cmp	r3, #2
 800c132:	d103      	bne.n	800c13c <find_volume+0x3e4>
 800c134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c136:	699b      	ldr	r3, [r3, #24]
 800c138:	005b      	lsls	r3, r3, #1
 800c13a:	e00a      	b.n	800c152 <find_volume+0x3fa>
 800c13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13e:	699a      	ldr	r2, [r3, #24]
 800c140:	4613      	mov	r3, r2
 800c142:	005b      	lsls	r3, r3, #1
 800c144:	4413      	add	r3, r2
 800c146:	085a      	lsrs	r2, r3, #1
 800c148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14a:	699b      	ldr	r3, [r3, #24]
 800c14c:	f003 0301 	and.w	r3, r3, #1
 800c150:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c152:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c156:	69da      	ldr	r2, [r3, #28]
 800c158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15a:	899b      	ldrh	r3, [r3, #12]
 800c15c:	4619      	mov	r1, r3
 800c15e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c160:	440b      	add	r3, r1
 800c162:	3b01      	subs	r3, #1
 800c164:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c166:	8989      	ldrh	r1, [r1, #12]
 800c168:	fbb3 f3f1 	udiv	r3, r3, r1
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d201      	bcs.n	800c174 <find_volume+0x41c>
 800c170:	230d      	movs	r3, #13
 800c172:	e06a      	b.n	800c24a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c176:	f04f 32ff 	mov.w	r2, #4294967295
 800c17a:	615a      	str	r2, [r3, #20]
 800c17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17e:	695a      	ldr	r2, [r3, #20]
 800c180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c182:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c186:	2280      	movs	r2, #128	; 0x80
 800c188:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c18a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c18e:	2b03      	cmp	r3, #3
 800c190:	d149      	bne.n	800c226 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c194:	3334      	adds	r3, #52	; 0x34
 800c196:	3330      	adds	r3, #48	; 0x30
 800c198:	4618      	mov	r0, r3
 800c19a:	f7fe fb43 	bl	800a824 <ld_word>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d140      	bne.n	800c226 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c1a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c1ac:	f7fe fdea 	bl	800ad84 <move_window>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d137      	bne.n	800c226 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800c1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1be:	3334      	adds	r3, #52	; 0x34
 800c1c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fe fb2d 	bl	800a824 <ld_word>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d127      	bne.n	800c226 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d8:	3334      	adds	r3, #52	; 0x34
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7fe fb3a 	bl	800a854 <ld_dword>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	4b1c      	ldr	r3, [pc, #112]	; (800c254 <find_volume+0x4fc>)
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d11e      	bne.n	800c226 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ea:	3334      	adds	r3, #52	; 0x34
 800c1ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7fe fb2f 	bl	800a854 <ld_dword>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	4b17      	ldr	r3, [pc, #92]	; (800c258 <find_volume+0x500>)
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d113      	bne.n	800c226 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c200:	3334      	adds	r3, #52	; 0x34
 800c202:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c206:	4618      	mov	r0, r3
 800c208:	f7fe fb24 	bl	800a854 <ld_dword>
 800c20c:	4602      	mov	r2, r0
 800c20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c210:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c214:	3334      	adds	r3, #52	; 0x34
 800c216:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7fe fb1a 	bl	800a854 <ld_dword>
 800c220:	4602      	mov	r2, r0
 800c222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c224:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c228:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c22c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c22e:	4b0b      	ldr	r3, [pc, #44]	; (800c25c <find_volume+0x504>)
 800c230:	881b      	ldrh	r3, [r3, #0]
 800c232:	3301      	adds	r3, #1
 800c234:	b29a      	uxth	r2, r3
 800c236:	4b09      	ldr	r3, [pc, #36]	; (800c25c <find_volume+0x504>)
 800c238:	801a      	strh	r2, [r3, #0]
 800c23a:	4b08      	ldr	r3, [pc, #32]	; (800c25c <find_volume+0x504>)
 800c23c:	881a      	ldrh	r2, [r3, #0]
 800c23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c240:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c242:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c244:	f7fe fd36 	bl	800acb4 <clear_lock>
#endif
	return FR_OK;
 800c248:	2300      	movs	r3, #0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3758      	adds	r7, #88	; 0x58
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	41615252 	.word	0x41615252
 800c258:	61417272 	.word	0x61417272
 800c25c:	20000778 	.word	0x20000778

0800c260 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c26a:	2309      	movs	r3, #9
 800c26c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d01c      	beq.n	800c2ae <validate+0x4e>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d018      	beq.n	800c2ae <validate+0x4e>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d013      	beq.n	800c2ae <validate+0x4e>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	889a      	ldrh	r2, [r3, #4]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	88db      	ldrh	r3, [r3, #6]
 800c290:	429a      	cmp	r2, r3
 800c292:	d10c      	bne.n	800c2ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	785b      	ldrb	r3, [r3, #1]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fe fa24 	bl	800a6e8 <disk_status>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	f003 0301 	and.w	r3, r3, #1
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d101      	bne.n	800c2ae <validate+0x4e>
			res = FR_OK;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c2ae:	7bfb      	ldrb	r3, [r7, #15]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d102      	bne.n	800c2ba <validate+0x5a>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	e000      	b.n	800c2bc <validate+0x5c>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	683a      	ldr	r2, [r7, #0]
 800c2be:	6013      	str	r3, [r2, #0]
	return res;
 800c2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
	...

0800c2cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b088      	sub	sp, #32
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c2de:	f107 0310 	add.w	r3, r7, #16
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7ff fc9e 	bl	800bc24 <get_ldnumber>
 800c2e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	da01      	bge.n	800c2f4 <f_mount+0x28>
 800c2f0:	230b      	movs	r3, #11
 800c2f2:	e02b      	b.n	800c34c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c2f4:	4a17      	ldr	r2, [pc, #92]	; (800c354 <f_mount+0x88>)
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d005      	beq.n	800c310 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c304:	69b8      	ldr	r0, [r7, #24]
 800c306:	f7fe fcd5 	bl	800acb4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	2200      	movs	r2, #0
 800c30e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d002      	beq.n	800c31c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2200      	movs	r2, #0
 800c31a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	490d      	ldr	r1, [pc, #52]	; (800c354 <f_mount+0x88>)
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d002      	beq.n	800c332 <f_mount+0x66>
 800c32c:	79fb      	ldrb	r3, [r7, #7]
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d001      	beq.n	800c336 <f_mount+0x6a>
 800c332:	2300      	movs	r3, #0
 800c334:	e00a      	b.n	800c34c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c336:	f107 010c 	add.w	r1, r7, #12
 800c33a:	f107 0308 	add.w	r3, r7, #8
 800c33e:	2200      	movs	r2, #0
 800c340:	4618      	mov	r0, r3
 800c342:	f7ff fd09 	bl	800bd58 <find_volume>
 800c346:	4603      	mov	r3, r0
 800c348:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3720      	adds	r7, #32
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}
 800c354:	20000774 	.word	0x20000774

0800c358 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b098      	sub	sp, #96	; 0x60
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	4613      	mov	r3, r2
 800c364:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d101      	bne.n	800c370 <f_open+0x18>
 800c36c:	2309      	movs	r3, #9
 800c36e:	e1bb      	b.n	800c6e8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c370:	79fb      	ldrb	r3, [r7, #7]
 800c372:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c376:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c378:	79fa      	ldrb	r2, [r7, #7]
 800c37a:	f107 0110 	add.w	r1, r7, #16
 800c37e:	f107 0308 	add.w	r3, r7, #8
 800c382:	4618      	mov	r0, r3
 800c384:	f7ff fce8 	bl	800bd58 <find_volume>
 800c388:	4603      	mov	r3, r0
 800c38a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c38e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c392:	2b00      	cmp	r3, #0
 800c394:	f040 819f 	bne.w	800c6d6 <f_open+0x37e>
		dj.obj.fs = fs;
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	f107 0314 	add.w	r3, r7, #20
 800c3a2:	4611      	mov	r1, r2
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7ff fbc7 	bl	800bb38 <follow_path>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c3b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d11a      	bne.n	800c3ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c3b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c3bc:	b25b      	sxtb	r3, r3
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	da03      	bge.n	800c3ca <f_open+0x72>
				res = FR_INVALID_NAME;
 800c3c2:	2306      	movs	r3, #6
 800c3c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c3c8:	e011      	b.n	800c3ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c3ca:	79fb      	ldrb	r3, [r7, #7]
 800c3cc:	f023 0301 	bic.w	r3, r3, #1
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	bf14      	ite	ne
 800c3d4:	2301      	movne	r3, #1
 800c3d6:	2300      	moveq	r3, #0
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	461a      	mov	r2, r3
 800c3dc:	f107 0314 	add.w	r3, r7, #20
 800c3e0:	4611      	mov	r1, r2
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7fe fb1e 	bl	800aa24 <chk_lock>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c3ee:	79fb      	ldrb	r3, [r7, #7]
 800c3f0:	f003 031c 	and.w	r3, r3, #28
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d07f      	beq.n	800c4f8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c3f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d017      	beq.n	800c430 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c400:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c404:	2b04      	cmp	r3, #4
 800c406:	d10e      	bne.n	800c426 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c408:	f7fe fb68 	bl	800aadc <enq_lock>
 800c40c:	4603      	mov	r3, r0
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d006      	beq.n	800c420 <f_open+0xc8>
 800c412:	f107 0314 	add.w	r3, r7, #20
 800c416:	4618      	mov	r0, r3
 800c418:	f7ff fac7 	bl	800b9aa <dir_register>
 800c41c:	4603      	mov	r3, r0
 800c41e:	e000      	b.n	800c422 <f_open+0xca>
 800c420:	2312      	movs	r3, #18
 800c422:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c426:	79fb      	ldrb	r3, [r7, #7]
 800c428:	f043 0308 	orr.w	r3, r3, #8
 800c42c:	71fb      	strb	r3, [r7, #7]
 800c42e:	e010      	b.n	800c452 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c430:	7ebb      	ldrb	r3, [r7, #26]
 800c432:	f003 0311 	and.w	r3, r3, #17
 800c436:	2b00      	cmp	r3, #0
 800c438:	d003      	beq.n	800c442 <f_open+0xea>
					res = FR_DENIED;
 800c43a:	2307      	movs	r3, #7
 800c43c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c440:	e007      	b.n	800c452 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c442:	79fb      	ldrb	r3, [r7, #7]
 800c444:	f003 0304 	and.w	r3, r3, #4
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <f_open+0xfa>
 800c44c:	2308      	movs	r3, #8
 800c44e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c452:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c456:	2b00      	cmp	r3, #0
 800c458:	d168      	bne.n	800c52c <f_open+0x1d4>
 800c45a:	79fb      	ldrb	r3, [r7, #7]
 800c45c:	f003 0308 	and.w	r3, r3, #8
 800c460:	2b00      	cmp	r3, #0
 800c462:	d063      	beq.n	800c52c <f_open+0x1d4>
				dw = GET_FATTIME();
 800c464:	f000 fdf2 	bl	800d04c <get_fattime>
 800c468:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c46c:	330e      	adds	r3, #14
 800c46e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c470:	4618      	mov	r0, r3
 800c472:	f7fe fa2d 	bl	800a8d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c478:	3316      	adds	r3, #22
 800c47a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7fe fa27 	bl	800a8d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c484:	330b      	adds	r3, #11
 800c486:	2220      	movs	r2, #32
 800c488:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c48e:	4611      	mov	r1, r2
 800c490:	4618      	mov	r0, r3
 800c492:	f7ff f9f6 	bl	800b882 <ld_clust>
 800c496:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c49c:	2200      	movs	r2, #0
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7ff fa0e 	bl	800b8c0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a6:	331c      	adds	r3, #28
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fe fa10 	bl	800a8d0 <st_dword>
					fs->wflag = 1;
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c4b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d037      	beq.n	800c52c <f_open+0x1d4>
						dw = fs->winsect;
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4c0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c4c2:	f107 0314 	add.w	r3, r7, #20
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7fe fefe 	bl	800b2cc <remove_chain>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c4d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d126      	bne.n	800c52c <f_open+0x1d4>
							res = move_window(fs, dw);
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7fe fc4e 	bl	800ad84 <move_window>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4f2:	3a01      	subs	r2, #1
 800c4f4:	611a      	str	r2, [r3, #16]
 800c4f6:	e019      	b.n	800c52c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c4f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d115      	bne.n	800c52c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c500:	7ebb      	ldrb	r3, [r7, #26]
 800c502:	f003 0310 	and.w	r3, r3, #16
 800c506:	2b00      	cmp	r3, #0
 800c508:	d003      	beq.n	800c512 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c50a:	2304      	movs	r3, #4
 800c50c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c510:	e00c      	b.n	800c52c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c512:	79fb      	ldrb	r3, [r7, #7]
 800c514:	f003 0302 	and.w	r3, r3, #2
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d007      	beq.n	800c52c <f_open+0x1d4>
 800c51c:	7ebb      	ldrb	r3, [r7, #26]
 800c51e:	f003 0301 	and.w	r3, r3, #1
 800c522:	2b00      	cmp	r3, #0
 800c524:	d002      	beq.n	800c52c <f_open+0x1d4>
						res = FR_DENIED;
 800c526:	2307      	movs	r3, #7
 800c528:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c52c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c530:	2b00      	cmp	r3, #0
 800c532:	d128      	bne.n	800c586 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c534:	79fb      	ldrb	r3, [r7, #7]
 800c536:	f003 0308 	and.w	r3, r3, #8
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d003      	beq.n	800c546 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c53e:	79fb      	ldrb	r3, [r7, #7]
 800c540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c544:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c54e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c554:	79fb      	ldrb	r3, [r7, #7]
 800c556:	f023 0301 	bic.w	r3, r3, #1
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	bf14      	ite	ne
 800c55e:	2301      	movne	r3, #1
 800c560:	2300      	moveq	r3, #0
 800c562:	b2db      	uxtb	r3, r3
 800c564:	461a      	mov	r2, r3
 800c566:	f107 0314 	add.w	r3, r7, #20
 800c56a:	4611      	mov	r1, r2
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7fe fad7 	bl	800ab20 <inc_lock>
 800c572:	4602      	mov	r2, r0
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	691b      	ldr	r3, [r3, #16]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d102      	bne.n	800c586 <f_open+0x22e>
 800c580:	2302      	movs	r3, #2
 800c582:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	f040 80a3 	bne.w	800c6d6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c594:	4611      	mov	r1, r2
 800c596:	4618      	mov	r0, r3
 800c598:	f7ff f973 	bl	800b882 <ld_clust>
 800c59c:	4602      	mov	r2, r0
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c5a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a4:	331c      	adds	r3, #28
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fe f954 	bl	800a854 <ld_dword>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c5b8:	693a      	ldr	r2, [r7, #16]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	88da      	ldrh	r2, [r3, #6]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	79fa      	ldrb	r2, [r7, #7]
 800c5ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	3330      	adds	r3, #48	; 0x30
 800c5e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f7fe f9be 	bl	800a96a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c5ee:	79fb      	ldrb	r3, [r7, #7]
 800c5f0:	f003 0320 	and.w	r3, r3, #32
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d06e      	beq.n	800c6d6 <f_open+0x37e>
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d06a      	beq.n	800c6d6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	68da      	ldr	r2, [r3, #12]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	895b      	ldrh	r3, [r3, #10]
 800c60c:	461a      	mov	r2, r3
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	899b      	ldrh	r3, [r3, #12]
 800c612:	fb03 f302 	mul.w	r3, r3, r2
 800c616:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	657b      	str	r3, [r7, #84]	; 0x54
 800c624:	e016      	b.n	800c654 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7fe fc67 	bl	800aefe <get_fat>
 800c630:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c634:	2b01      	cmp	r3, #1
 800c636:	d802      	bhi.n	800c63e <f_open+0x2e6>
 800c638:	2302      	movs	r3, #2
 800c63a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c63e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c644:	d102      	bne.n	800c64c <f_open+0x2f4>
 800c646:	2301      	movs	r3, #1
 800c648:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c64c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c64e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	657b      	str	r3, [r7, #84]	; 0x54
 800c654:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d103      	bne.n	800c664 <f_open+0x30c>
 800c65c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c65e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c660:	429a      	cmp	r2, r3
 800c662:	d8e0      	bhi.n	800c626 <f_open+0x2ce>
				}
				fp->clust = clst;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c668:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c66a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d131      	bne.n	800c6d6 <f_open+0x37e>
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	899b      	ldrh	r3, [r3, #12]
 800c676:	461a      	mov	r2, r3
 800c678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c67a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c67e:	fb02 f201 	mul.w	r2, r2, r1
 800c682:	1a9b      	subs	r3, r3, r2
 800c684:	2b00      	cmp	r3, #0
 800c686:	d026      	beq.n	800c6d6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7fe fc17 	bl	800aec0 <clust2sect>
 800c692:	6478      	str	r0, [r7, #68]	; 0x44
 800c694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c696:	2b00      	cmp	r3, #0
 800c698:	d103      	bne.n	800c6a2 <f_open+0x34a>
						res = FR_INT_ERR;
 800c69a:	2302      	movs	r3, #2
 800c69c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c6a0:	e019      	b.n	800c6d6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	899b      	ldrh	r3, [r3, #12]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800c6ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6b0:	441a      	add	r2, r3
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	7858      	ldrb	r0, [r3, #1]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	6a1a      	ldr	r2, [r3, #32]
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	f7fe f84f 	bl	800a768 <disk_read>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d002      	beq.n	800c6d6 <f_open+0x37e>
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c6d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d002      	beq.n	800c6e4 <f_open+0x38c>
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c6e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3760      	adds	r7, #96	; 0x60
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b08c      	sub	sp, #48	; 0x30
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	60b9      	str	r1, [r7, #8]
 800c6fa:	607a      	str	r2, [r7, #4]
 800c6fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	2200      	movs	r2, #0
 800c706:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f107 0210 	add.w	r2, r7, #16
 800c70e:	4611      	mov	r1, r2
 800c710:	4618      	mov	r0, r3
 800c712:	f7ff fda5 	bl	800c260 <validate>
 800c716:	4603      	mov	r3, r0
 800c718:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c71c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c720:	2b00      	cmp	r3, #0
 800c722:	d107      	bne.n	800c734 <f_write+0x44>
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	7d5b      	ldrb	r3, [r3, #21]
 800c728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c72c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c730:	2b00      	cmp	r3, #0
 800c732:	d002      	beq.n	800c73a <f_write+0x4a>
 800c734:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c738:	e16a      	b.n	800ca10 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	7d1b      	ldrb	r3, [r3, #20]
 800c73e:	f003 0302 	and.w	r3, r3, #2
 800c742:	2b00      	cmp	r3, #0
 800c744:	d101      	bne.n	800c74a <f_write+0x5a>
 800c746:	2307      	movs	r3, #7
 800c748:	e162      	b.n	800ca10 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	699a      	ldr	r2, [r3, #24]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	441a      	add	r2, r3
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	699b      	ldr	r3, [r3, #24]
 800c756:	429a      	cmp	r2, r3
 800c758:	f080 814c 	bcs.w	800c9f4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	699b      	ldr	r3, [r3, #24]
 800c760:	43db      	mvns	r3, r3
 800c762:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c764:	e146      	b.n	800c9f4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	699b      	ldr	r3, [r3, #24]
 800c76a:	693a      	ldr	r2, [r7, #16]
 800c76c:	8992      	ldrh	r2, [r2, #12]
 800c76e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c772:	fb02 f201 	mul.w	r2, r2, r1
 800c776:	1a9b      	subs	r3, r3, r2
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f040 80f1 	bne.w	800c960 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	699b      	ldr	r3, [r3, #24]
 800c782:	693a      	ldr	r2, [r7, #16]
 800c784:	8992      	ldrh	r2, [r2, #12]
 800c786:	fbb3 f3f2 	udiv	r3, r3, r2
 800c78a:	693a      	ldr	r2, [r7, #16]
 800c78c:	8952      	ldrh	r2, [r2, #10]
 800c78e:	3a01      	subs	r2, #1
 800c790:	4013      	ands	r3, r2
 800c792:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c794:	69bb      	ldr	r3, [r7, #24]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d143      	bne.n	800c822 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	699b      	ldr	r3, [r3, #24]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10c      	bne.n	800c7bc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d11a      	bne.n	800c7e4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2100      	movs	r1, #0
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fe fdef 	bl	800b396 <create_chain>
 800c7b8:	62b8      	str	r0, [r7, #40]	; 0x28
 800c7ba:	e013      	b.n	800c7e4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d007      	beq.n	800c7d4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	699b      	ldr	r3, [r3, #24]
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	f7fe fe7b 	bl	800b4c6 <clmt_clust>
 800c7d0:	62b8      	str	r0, [r7, #40]	; 0x28
 800c7d2:	e007      	b.n	800c7e4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c7d4:	68fa      	ldr	r2, [r7, #12]
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	69db      	ldr	r3, [r3, #28]
 800c7da:	4619      	mov	r1, r3
 800c7dc:	4610      	mov	r0, r2
 800c7de:	f7fe fdda 	bl	800b396 <create_chain>
 800c7e2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	f000 8109 	beq.w	800c9fe <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d104      	bne.n	800c7fc <f_write+0x10c>
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2202      	movs	r2, #2
 800c7f6:	755a      	strb	r2, [r3, #21]
 800c7f8:	2302      	movs	r3, #2
 800c7fa:	e109      	b.n	800ca10 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c802:	d104      	bne.n	800c80e <f_write+0x11e>
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2201      	movs	r2, #1
 800c808:	755a      	strb	r2, [r3, #21]
 800c80a:	2301      	movs	r3, #1
 800c80c:	e100      	b.n	800ca10 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c812:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	689b      	ldr	r3, [r3, #8]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d102      	bne.n	800c822 <f_write+0x132>
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c820:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	7d1b      	ldrb	r3, [r3, #20]
 800c826:	b25b      	sxtb	r3, r3
 800c828:	2b00      	cmp	r3, #0
 800c82a:	da18      	bge.n	800c85e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	7858      	ldrb	r0, [r3, #1]
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	6a1a      	ldr	r2, [r3, #32]
 800c83a:	2301      	movs	r3, #1
 800c83c:	f7fd ffb4 	bl	800a7a8 <disk_write>
 800c840:	4603      	mov	r3, r0
 800c842:	2b00      	cmp	r3, #0
 800c844:	d004      	beq.n	800c850 <f_write+0x160>
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2201      	movs	r2, #1
 800c84a:	755a      	strb	r2, [r3, #21]
 800c84c:	2301      	movs	r3, #1
 800c84e:	e0df      	b.n	800ca10 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	7d1b      	ldrb	r3, [r3, #20]
 800c854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c85e:	693a      	ldr	r2, [r7, #16]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	69db      	ldr	r3, [r3, #28]
 800c864:	4619      	mov	r1, r3
 800c866:	4610      	mov	r0, r2
 800c868:	f7fe fb2a 	bl	800aec0 <clust2sect>
 800c86c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d104      	bne.n	800c87e <f_write+0x18e>
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2202      	movs	r2, #2
 800c878:	755a      	strb	r2, [r3, #21]
 800c87a:	2302      	movs	r3, #2
 800c87c:	e0c8      	b.n	800ca10 <f_write+0x320>
			sect += csect;
 800c87e:	697a      	ldr	r2, [r7, #20]
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	4413      	add	r3, r2
 800c884:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	899b      	ldrh	r3, [r3, #12]
 800c88a:	461a      	mov	r2, r3
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c892:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c894:	6a3b      	ldr	r3, [r7, #32]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d043      	beq.n	800c922 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c89a:	69ba      	ldr	r2, [r7, #24]
 800c89c:	6a3b      	ldr	r3, [r7, #32]
 800c89e:	4413      	add	r3, r2
 800c8a0:	693a      	ldr	r2, [r7, #16]
 800c8a2:	8952      	ldrh	r2, [r2, #10]
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d905      	bls.n	800c8b4 <f_write+0x1c4>
					cc = fs->csize - csect;
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	895b      	ldrh	r3, [r3, #10]
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	7858      	ldrb	r0, [r3, #1]
 800c8b8:	6a3b      	ldr	r3, [r7, #32]
 800c8ba:	697a      	ldr	r2, [r7, #20]
 800c8bc:	69f9      	ldr	r1, [r7, #28]
 800c8be:	f7fd ff73 	bl	800a7a8 <disk_write>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d004      	beq.n	800c8d2 <f_write+0x1e2>
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	755a      	strb	r2, [r3, #21]
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e09e      	b.n	800ca10 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6a1a      	ldr	r2, [r3, #32]
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	1ad3      	subs	r3, r2, r3
 800c8da:	6a3a      	ldr	r2, [r7, #32]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d918      	bls.n	800c912 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6a1a      	ldr	r2, [r3, #32]
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	1ad3      	subs	r3, r2, r3
 800c8ee:	693a      	ldr	r2, [r7, #16]
 800c8f0:	8992      	ldrh	r2, [r2, #12]
 800c8f2:	fb02 f303 	mul.w	r3, r2, r3
 800c8f6:	69fa      	ldr	r2, [r7, #28]
 800c8f8:	18d1      	adds	r1, r2, r3
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	899b      	ldrh	r3, [r3, #12]
 800c8fe:	461a      	mov	r2, r3
 800c900:	f7fe f812 	bl	800a928 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	7d1b      	ldrb	r3, [r3, #20]
 800c908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c90c:	b2da      	uxtb	r2, r3
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	899b      	ldrh	r3, [r3, #12]
 800c916:	461a      	mov	r2, r3
 800c918:	6a3b      	ldr	r3, [r7, #32]
 800c91a:	fb02 f303 	mul.w	r3, r2, r3
 800c91e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c920:	e04b      	b.n	800c9ba <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	6a1b      	ldr	r3, [r3, #32]
 800c926:	697a      	ldr	r2, [r7, #20]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d016      	beq.n	800c95a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	699a      	ldr	r2, [r3, #24]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c934:	429a      	cmp	r2, r3
 800c936:	d210      	bcs.n	800c95a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	7858      	ldrb	r0, [r3, #1]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c942:	2301      	movs	r3, #1
 800c944:	697a      	ldr	r2, [r7, #20]
 800c946:	f7fd ff0f 	bl	800a768 <disk_read>
 800c94a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d004      	beq.n	800c95a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2201      	movs	r2, #1
 800c954:	755a      	strb	r2, [r3, #21]
 800c956:	2301      	movs	r3, #1
 800c958:	e05a      	b.n	800ca10 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	697a      	ldr	r2, [r7, #20]
 800c95e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	899b      	ldrh	r3, [r3, #12]
 800c964:	4618      	mov	r0, r3
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	699b      	ldr	r3, [r3, #24]
 800c96a:	693a      	ldr	r2, [r7, #16]
 800c96c:	8992      	ldrh	r2, [r2, #12]
 800c96e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c972:	fb02 f201 	mul.w	r2, r2, r1
 800c976:	1a9b      	subs	r3, r3, r2
 800c978:	1ac3      	subs	r3, r0, r3
 800c97a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c97c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	429a      	cmp	r2, r3
 800c982:	d901      	bls.n	800c988 <f_write+0x298>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	699b      	ldr	r3, [r3, #24]
 800c992:	693a      	ldr	r2, [r7, #16]
 800c994:	8992      	ldrh	r2, [r2, #12]
 800c996:	fbb3 f0f2 	udiv	r0, r3, r2
 800c99a:	fb02 f200 	mul.w	r2, r2, r0
 800c99e:	1a9b      	subs	r3, r3, r2
 800c9a0:	440b      	add	r3, r1
 800c9a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9a4:	69f9      	ldr	r1, [r7, #28]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7fd ffbe 	bl	800a928 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	7d1b      	ldrb	r3, [r3, #20]
 800c9b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c9b4:	b2da      	uxtb	r2, r3
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c9ba:	69fa      	ldr	r2, [r7, #28]
 800c9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9be:	4413      	add	r3, r2
 800c9c0:	61fb      	str	r3, [r7, #28]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	699a      	ldr	r2, [r3, #24]
 800c9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c8:	441a      	add	r2, r3
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	619a      	str	r2, [r3, #24]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	68da      	ldr	r2, [r3, #12]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	699b      	ldr	r3, [r3, #24]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	bf38      	it	cc
 800c9da:	461a      	movcc	r2, r3
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	60da      	str	r2, [r3, #12]
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	441a      	add	r2, r3
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	601a      	str	r2, [r3, #0]
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f0:	1ad3      	subs	r3, r2, r3
 800c9f2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f47f aeb5 	bne.w	800c766 <f_write+0x76>
 800c9fc:	e000      	b.n	800ca00 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c9fe:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	7d1b      	ldrb	r3, [r3, #20]
 800ca04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca08:	b2da      	uxtb	r2, r3
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ca0e:	2300      	movs	r3, #0
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3730      	adds	r7, #48	; 0x30
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b086      	sub	sp, #24
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f107 0208 	add.w	r2, r7, #8
 800ca26:	4611      	mov	r1, r2
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7ff fc19 	bl	800c260 <validate>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ca32:	7dfb      	ldrb	r3, [r7, #23]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d168      	bne.n	800cb0a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	7d1b      	ldrb	r3, [r3, #20]
 800ca3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d062      	beq.n	800cb0a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	7d1b      	ldrb	r3, [r3, #20]
 800ca48:	b25b      	sxtb	r3, r3
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	da15      	bge.n	800ca7a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	7858      	ldrb	r0, [r3, #1]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6a1a      	ldr	r2, [r3, #32]
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	f7fd fea3 	bl	800a7a8 <disk_write>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d001      	beq.n	800ca6c <f_sync+0x54>
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e04f      	b.n	800cb0c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	7d1b      	ldrb	r3, [r3, #20]
 800ca70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ca7a:	f000 fae7 	bl	800d04c <get_fattime>
 800ca7e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ca80:	68ba      	ldr	r2, [r7, #8]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca86:	4619      	mov	r1, r3
 800ca88:	4610      	mov	r0, r2
 800ca8a:	f7fe f97b 	bl	800ad84 <move_window>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ca92:	7dfb      	ldrb	r3, [r7, #23]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d138      	bne.n	800cb0a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca9c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	330b      	adds	r3, #11
 800caa2:	781a      	ldrb	r2, [r3, #0]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	330b      	adds	r3, #11
 800caa8:	f042 0220 	orr.w	r2, r2, #32
 800caac:	b2d2      	uxtb	r2, r2
 800caae:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6818      	ldr	r0, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	461a      	mov	r2, r3
 800caba:	68f9      	ldr	r1, [r7, #12]
 800cabc:	f7fe ff00 	bl	800b8c0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f103 021c 	add.w	r2, r3, #28
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	68db      	ldr	r3, [r3, #12]
 800caca:	4619      	mov	r1, r3
 800cacc:	4610      	mov	r0, r2
 800cace:	f7fd feff 	bl	800a8d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	3316      	adds	r3, #22
 800cad6:	6939      	ldr	r1, [r7, #16]
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fd fef9 	bl	800a8d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	3312      	adds	r3, #18
 800cae2:	2100      	movs	r1, #0
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fd fed8 	bl	800a89a <st_word>
					fs->wflag = 1;
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	2201      	movs	r2, #1
 800caee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fe f974 	bl	800ade0 <sync_fs>
 800caf8:	4603      	mov	r3, r0
 800cafa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	7d1b      	ldrb	r3, [r3, #20]
 800cb00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb04:	b2da      	uxtb	r2, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cb0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3718      	adds	r7, #24
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f7ff ff7b 	bl	800ca18 <f_sync>
 800cb22:	4603      	mov	r3, r0
 800cb24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cb26:	7bfb      	ldrb	r3, [r7, #15]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d118      	bne.n	800cb5e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f107 0208 	add.w	r2, r7, #8
 800cb32:	4611      	mov	r1, r2
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7ff fb93 	bl	800c260 <validate>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cb3e:	7bfb      	ldrb	r3, [r7, #15]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d10c      	bne.n	800cb5e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	691b      	ldr	r3, [r3, #16]
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7fe f877 	bl	800ac3c <dec_lock>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cb52:	7bfb      	ldrb	r3, [r7, #15]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d102      	bne.n	800cb5e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cb5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b096      	sub	sp, #88	; 0x58
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800cb70:	f107 0108 	add.w	r1, r7, #8
 800cb74:	1d3b      	adds	r3, r7, #4
 800cb76:	2202      	movs	r2, #2
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7ff f8ed 	bl	800bd58 <find_volume>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800cb88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	f040 80f2 	bne.w	800cd76 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	f107 030c 	add.w	r3, r7, #12
 800cb98:	4611      	mov	r1, r2
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7fe ffcc 	bl	800bb38 <follow_path>
 800cba0:	4603      	mov	r3, r0
 800cba2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800cba6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d102      	bne.n	800cbb4 <f_mkdir+0x4c>
 800cbae:	2308      	movs	r3, #8
 800cbb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800cbb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbb8:	2b04      	cmp	r3, #4
 800cbba:	f040 80dc 	bne.w	800cd76 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800cbbe:	f107 030c 	add.w	r3, r7, #12
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fe fbe6 	bl	800b396 <create_chain>
 800cbca:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	895b      	ldrh	r3, [r3, #10]
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	899b      	ldrh	r3, [r3, #12]
 800cbd6:	fb03 f302 	mul.w	r3, r3, r2
 800cbda:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800cbe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d102      	bne.n	800cbee <f_mkdir+0x86>
 800cbe8:	2307      	movs	r3, #7
 800cbea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800cbee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d102      	bne.n	800cbfa <f_mkdir+0x92>
 800cbf4:	2302      	movs	r3, #2
 800cbf6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cbfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc00:	d102      	bne.n	800cc08 <f_mkdir+0xa0>
 800cc02:	2301      	movs	r3, #1
 800cc04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800cc08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d106      	bne.n	800cc1e <f_mkdir+0xb6>
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fe f872 	bl	800acfc <sync_window>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800cc1e:	f000 fa15 	bl	800d04c <get_fattime>
 800cc22:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800cc24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d16c      	bne.n	800cd06 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7fe f945 	bl	800aec0 <clust2sect>
 800cc36:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	3334      	adds	r3, #52	; 0x34
 800cc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	899b      	ldrh	r3, [r3, #12]
 800cc42:	461a      	mov	r2, r3
 800cc44:	2100      	movs	r1, #0
 800cc46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cc48:	f7fd fe8f 	bl	800a96a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800cc4c:	220b      	movs	r2, #11
 800cc4e:	2120      	movs	r1, #32
 800cc50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cc52:	f7fd fe8a 	bl	800a96a <mem_set>
					dir[DIR_Name] = '.';
 800cc56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc58:	222e      	movs	r2, #46	; 0x2e
 800cc5a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800cc5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc5e:	330b      	adds	r3, #11
 800cc60:	2210      	movs	r2, #16
 800cc62:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800cc64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc66:	3316      	adds	r3, #22
 800cc68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fd fe30 	bl	800a8d0 <st_dword>
					st_clust(fs, dir, dcl);
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7fe fe22 	bl	800b8c0 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800cc7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc7e:	3320      	adds	r3, #32
 800cc80:	2220      	movs	r2, #32
 800cc82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7fd fe4f 	bl	800a928 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800cc8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc8c:	3321      	adds	r3, #33	; 0x21
 800cc8e:	222e      	movs	r2, #46	; 0x2e
 800cc90:	701a      	strb	r2, [r3, #0]
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	2b03      	cmp	r3, #3
 800cc9c:	d106      	bne.n	800ccac <f_mkdir+0x144>
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d101      	bne.n	800ccac <f_mkdir+0x144>
 800cca8:	2300      	movs	r3, #0
 800ccaa:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800ccac:	68b8      	ldr	r0, [r7, #8]
 800ccae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccb0:	3320      	adds	r3, #32
 800ccb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	f7fe fe03 	bl	800b8c0 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	895b      	ldrh	r3, [r3, #10]
 800ccbe:	653b      	str	r3, [r7, #80]	; 0x50
 800ccc0:	e01c      	b.n	800ccfc <f_mkdir+0x194>
					fs->winsect = dsc++;
 800ccc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccc4:	1c5a      	adds	r2, r3, #1
 800ccc6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	6313      	str	r3, [r2, #48]	; 0x30
					fs->wflag = 1;
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7fe f811 	bl	800acfc <sync_window>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800cce0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d10d      	bne.n	800cd04 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	899b      	ldrh	r3, [r3, #12]
 800ccec:	461a      	mov	r2, r3
 800ccee:	2100      	movs	r1, #0
 800ccf0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ccf2:	f7fd fe3a 	bl	800a96a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ccf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	653b      	str	r3, [r7, #80]	; 0x50
 800ccfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1df      	bne.n	800ccc2 <f_mkdir+0x15a>
 800cd02:	e000      	b.n	800cd06 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800cd04:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800cd06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d107      	bne.n	800cd1e <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800cd0e:	f107 030c 	add.w	r3, r7, #12
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fe fe49 	bl	800b9aa <dir_register>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800cd1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d120      	bne.n	800cd68 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800cd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd28:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800cd2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd2c:	3316      	adds	r3, #22
 800cd2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7fd fdcd 	bl	800a8d0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7fe fdbf 	bl	800b8c0 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800cd42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd44:	330b      	adds	r3, #11
 800cd46:	2210      	movs	r2, #16
 800cd48:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800cd50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d10e      	bne.n	800cd76 <f_mkdir+0x20e>
					res = sync_fs(fs);
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7fe f840 	bl	800ade0 <sync_fs>
 800cd60:	4603      	mov	r3, r0
 800cd62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800cd66:	e006      	b.n	800cd76 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800cd68:	f107 030c 	add.w	r3, r7, #12
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fe faab 	bl	800b2cc <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800cd76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3758      	adds	r7, #88	; 0x58
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
	...

0800cd84 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b087      	sub	sp, #28
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cd92:	2301      	movs	r3, #1
 800cd94:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cd96:	2300      	movs	r3, #0
 800cd98:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cd9a:	4b1f      	ldr	r3, [pc, #124]	; (800ce18 <FATFS_LinkDriverEx+0x94>)
 800cd9c:	7a5b      	ldrb	r3, [r3, #9]
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d131      	bne.n	800ce08 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cda4:	4b1c      	ldr	r3, [pc, #112]	; (800ce18 <FATFS_LinkDriverEx+0x94>)
 800cda6:	7a5b      	ldrb	r3, [r3, #9]
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	461a      	mov	r2, r3
 800cdac:	4b1a      	ldr	r3, [pc, #104]	; (800ce18 <FATFS_LinkDriverEx+0x94>)
 800cdae:	2100      	movs	r1, #0
 800cdb0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cdb2:	4b19      	ldr	r3, [pc, #100]	; (800ce18 <FATFS_LinkDriverEx+0x94>)
 800cdb4:	7a5b      	ldrb	r3, [r3, #9]
 800cdb6:	b2db      	uxtb	r3, r3
 800cdb8:	4a17      	ldr	r2, [pc, #92]	; (800ce18 <FATFS_LinkDriverEx+0x94>)
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	4413      	add	r3, r2
 800cdbe:	68fa      	ldr	r2, [r7, #12]
 800cdc0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cdc2:	4b15      	ldr	r3, [pc, #84]	; (800ce18 <FATFS_LinkDriverEx+0x94>)
 800cdc4:	7a5b      	ldrb	r3, [r3, #9]
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	461a      	mov	r2, r3
 800cdca:	4b13      	ldr	r3, [pc, #76]	; (800ce18 <FATFS_LinkDriverEx+0x94>)
 800cdcc:	4413      	add	r3, r2
 800cdce:	79fa      	ldrb	r2, [r7, #7]
 800cdd0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cdd2:	4b11      	ldr	r3, [pc, #68]	; (800ce18 <FATFS_LinkDriverEx+0x94>)
 800cdd4:	7a5b      	ldrb	r3, [r3, #9]
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	1c5a      	adds	r2, r3, #1
 800cdda:	b2d1      	uxtb	r1, r2
 800cddc:	4a0e      	ldr	r2, [pc, #56]	; (800ce18 <FATFS_LinkDriverEx+0x94>)
 800cdde:	7251      	strb	r1, [r2, #9]
 800cde0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cde2:	7dbb      	ldrb	r3, [r7, #22]
 800cde4:	3330      	adds	r3, #48	; 0x30
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	3301      	adds	r3, #1
 800cdf0:	223a      	movs	r2, #58	; 0x3a
 800cdf2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	3302      	adds	r3, #2
 800cdf8:	222f      	movs	r2, #47	; 0x2f
 800cdfa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	3303      	adds	r3, #3
 800ce00:	2200      	movs	r2, #0
 800ce02:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ce04:	2300      	movs	r3, #0
 800ce06:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ce08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	371c      	adds	r7, #28
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	2000079c 	.word	0x2000079c

0800ce1c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ce26:	2200      	movs	r2, #0
 800ce28:	6839      	ldr	r1, [r7, #0]
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f7ff ffaa 	bl	800cd84 <FATFS_LinkDriverEx>
 800ce30:	4603      	mov	r3, r0
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
	...

0800ce3c <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b085      	sub	sp, #20
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	460b      	mov	r3, r1
 800ce46:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800ce50:	4b15      	ldr	r3, [pc, #84]	; (800cea8 <FATFS_UnLinkDriverEx+0x6c>)
 800ce52:	7a5b      	ldrb	r3, [r3, #9]
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d01e      	beq.n	800ce98 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	3b30      	subs	r3, #48	; 0x30
 800ce60:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800ce62:	7bbb      	ldrb	r3, [r7, #14]
 800ce64:	4a10      	ldr	r2, [pc, #64]	; (800cea8 <FATFS_UnLinkDriverEx+0x6c>)
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	4413      	add	r3, r2
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d013      	beq.n	800ce98 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800ce70:	7bbb      	ldrb	r3, [r7, #14]
 800ce72:	4a0d      	ldr	r2, [pc, #52]	; (800cea8 <FATFS_UnLinkDriverEx+0x6c>)
 800ce74:	009b      	lsls	r3, r3, #2
 800ce76:	4413      	add	r3, r2
 800ce78:	2200      	movs	r2, #0
 800ce7a:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800ce7c:	7bbb      	ldrb	r3, [r7, #14]
 800ce7e:	4a0a      	ldr	r2, [pc, #40]	; (800cea8 <FATFS_UnLinkDriverEx+0x6c>)
 800ce80:	4413      	add	r3, r2
 800ce82:	2200      	movs	r2, #0
 800ce84:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800ce86:	4b08      	ldr	r3, [pc, #32]	; (800cea8 <FATFS_UnLinkDriverEx+0x6c>)
 800ce88:	7a5b      	ldrb	r3, [r3, #9]
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	3b01      	subs	r3, #1
 800ce8e:	b2da      	uxtb	r2, r3
 800ce90:	4b05      	ldr	r3, [pc, #20]	; (800cea8 <FATFS_UnLinkDriverEx+0x6c>)
 800ce92:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800ce94:	2300      	movs	r3, #0
 800ce96:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ce98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3714      	adds	r7, #20
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr
 800cea6:	bf00      	nop
 800cea8:	2000079c 	.word	0x2000079c

0800ceac <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800ceb4:	2100      	movs	r1, #0
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f7ff ffc0 	bl	800ce3c <FATFS_UnLinkDriverEx>
 800cebc:	4603      	mov	r3, r0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3708      	adds	r7, #8
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
	...

0800cec8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cece:	2300      	movs	r3, #0
 800ced0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ced2:	f000 f896 	bl	800d002 <BSP_SD_IsDetected>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d001      	beq.n	800cee0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800cedc:	2301      	movs	r3, #1
 800cede:	e012      	b.n	800cf06 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800cee0:	480b      	ldr	r0, [pc, #44]	; (800cf10 <BSP_SD_Init+0x48>)
 800cee2:	f7f7 fdc9 	bl	8004a78 <HAL_SD_Init>
 800cee6:	4603      	mov	r3, r0
 800cee8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ceea:	79fb      	ldrb	r3, [r7, #7]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d109      	bne.n	800cf04 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800cef0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cef4:	4806      	ldr	r0, [pc, #24]	; (800cf10 <BSP_SD_Init+0x48>)
 800cef6:	f7f8 fba4 	bl	8005642 <HAL_SD_ConfigWideBusOperation>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d001      	beq.n	800cf04 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cf00:	2301      	movs	r3, #1
 800cf02:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cf04:	79fb      	ldrb	r3, [r7, #7]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3708      	adds	r7, #8
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	20004e94 	.word	0x20004e94

0800cf14 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b086      	sub	sp, #24
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	60b9      	str	r1, [r7, #8]
 800cf1e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cf20:	2300      	movs	r3, #0
 800cf22:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	68ba      	ldr	r2, [r7, #8]
 800cf28:	68f9      	ldr	r1, [r7, #12]
 800cf2a:	4806      	ldr	r0, [pc, #24]	; (800cf44 <BSP_SD_ReadBlocks_DMA+0x30>)
 800cf2c:	f7f7 fe2c 	bl	8004b88 <HAL_SD_ReadBlocks_DMA>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d001      	beq.n	800cf3a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cf36:	2301      	movs	r3, #1
 800cf38:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800cf3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3718      	adds	r7, #24
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	20004e94 	.word	0x20004e94

0800cf48 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b086      	sub	sp, #24
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cf54:	2300      	movs	r3, #0
 800cf56:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	68ba      	ldr	r2, [r7, #8]
 800cf5c:	68f9      	ldr	r1, [r7, #12]
 800cf5e:	4806      	ldr	r0, [pc, #24]	; (800cf78 <BSP_SD_WriteBlocks_DMA+0x30>)
 800cf60:	f7f7 fede 	bl	8004d20 <HAL_SD_WriteBlocks_DMA>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d001      	beq.n	800cf6e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800cf6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3718      	adds	r7, #24
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	20004e94 	.word	0x20004e94

0800cf7c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cf80:	4805      	ldr	r0, [pc, #20]	; (800cf98 <BSP_SD_GetCardState+0x1c>)
 800cf82:	f7f8 fbda 	bl	800573a <HAL_SD_GetCardState>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b04      	cmp	r3, #4
 800cf8a:	bf14      	ite	ne
 800cf8c:	2301      	movne	r3, #1
 800cf8e:	2300      	moveq	r3, #0
 800cf90:	b2db      	uxtb	r3, r3
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	20004e94 	.word	0x20004e94

0800cf9c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800cfa4:	6879      	ldr	r1, [r7, #4]
 800cfa6:	4803      	ldr	r0, [pc, #12]	; (800cfb4 <BSP_SD_GetCardInfo+0x18>)
 800cfa8:	f7f8 fb1f 	bl	80055ea <HAL_SD_GetCardInfo>
}
 800cfac:	bf00      	nop
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	20004e94 	.word	0x20004e94

0800cfb8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800cfc0:	f000 f818 	bl	800cff4 <BSP_SD_AbortCallback>
}
 800cfc4:	bf00      	nop
 800cfc6:	3708      	adds	r7, #8
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800cfd4:	f001 f8da 	bl	800e18c <BSP_SD_WriteCpltCallback>
}
 800cfd8:	bf00      	nop
 800cfda:	3708      	adds	r7, #8
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b082      	sub	sp, #8
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cfe8:	f001 f8dc 	bl	800e1a4 <BSP_SD_ReadCpltCallback>
}
 800cfec:	bf00      	nop
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800cff4:	b480      	push	{r7}
 800cff6:	af00      	add	r7, sp, #0

}
 800cff8:	bf00      	nop
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr

0800d002 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b082      	sub	sp, #8
 800d006:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d008:	2301      	movs	r3, #1
 800d00a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800d00c:	f000 f826 	bl	800d05c <BSP_PlatformIsDetected>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d101      	bne.n	800d01a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d016:	2300      	movs	r3, #0
 800d018:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d01a:	79fb      	ldrb	r3, [r7, #7]
 800d01c:	b2db      	uxtb	r3, r3
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3708      	adds	r7, #8
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
	...

0800d028 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d02c:	4904      	ldr	r1, [pc, #16]	; (800d040 <MX_FATFS_Init+0x18>)
 800d02e:	4805      	ldr	r0, [pc, #20]	; (800d044 <MX_FATFS_Init+0x1c>)
 800d030:	f7ff fef4 	bl	800ce1c <FATFS_LinkDriver>
 800d034:	4603      	mov	r3, r0
 800d036:	461a      	mov	r2, r3
 800d038:	4b03      	ldr	r3, [pc, #12]	; (800d048 <MX_FATFS_Init+0x20>)
 800d03a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800d03c:	bf00      	nop
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	20002c38 	.word	0x20002c38
 800d044:	08013144 	.word	0x08013144
 800d048:	20002c34 	.word	0x20002c34

0800d04c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d04c:	b480      	push	{r7}
 800d04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d050:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800d052:	4618      	mov	r0, r3
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr

0800d05c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d062:	2301      	movs	r3, #1
 800d064:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d066:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d06a:	4806      	ldr	r0, [pc, #24]	; (800d084 <BSP_PlatformIsDetected+0x28>)
 800d06c:	f7f5 fa02 	bl	8002474 <HAL_GPIO_ReadPin>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d001      	beq.n	800d07a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d076:	2300      	movs	r3, #0
 800d078:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800d07a:	79fb      	ldrb	r3, [r7, #7]
}  
 800d07c:	4618      	mov	r0, r3
 800d07e:	3708      	adds	r7, #8
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	40020000 	.word	0x40020000

0800d088 <print>:
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 800d090:	2201      	movs	r2, #1
 800d092:	2140      	movs	r1, #64	; 0x40
 800d094:	480c      	ldr	r0, [pc, #48]	; (800d0c8 <print+0x40>)
 800d096:	f7f5 fa05 	bl	80024a4 <HAL_GPIO_WritePin>
	while (CDC_Transmit_FS((uint8_t*) str, strlen(str)) == USBD_BUSY);
 800d09a:	bf00      	nop
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f7f3 f897 	bl	80001d0 <strlen>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f001 fcf9 	bl	800eaa0 <CDC_Transmit_FS>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d0f3      	beq.n	800d09c <print+0x14>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	2140      	movs	r1, #64	; 0x40
 800d0b8:	4803      	ldr	r0, [pc, #12]	; (800d0c8 <print+0x40>)
 800d0ba:	f7f5 f9f3 	bl	80024a4 <HAL_GPIO_WritePin>
};
 800d0be:	bf00      	nop
 800d0c0:	3708      	adds	r7, #8
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	40020800 	.word	0x40020800

0800d0cc <println>:
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	2140      	movs	r1, #64	; 0x40
 800d0d8:	4820      	ldr	r0, [pc, #128]	; (800d15c <println+0x90>)
 800d0da:	f7f5 f9e3 	bl	80024a4 <HAL_GPIO_WritePin>
	printLen = strlen(str);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f7f3 f876 	bl	80001d0 <strlen>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	4b1e      	ldr	r3, [pc, #120]	; (800d160 <println+0x94>)
 800d0e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < printLen; i++)
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	73fb      	strb	r3, [r7, #15]
 800d0ee:	e009      	b.n	800d104 <println+0x38>
		printBuffer[i] = str[i];
 800d0f0:	7bfb      	ldrb	r3, [r7, #15]
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	441a      	add	r2, r3
 800d0f6:	7bfb      	ldrb	r3, [r7, #15]
 800d0f8:	7811      	ldrb	r1, [r2, #0]
 800d0fa:	4a1a      	ldr	r2, [pc, #104]	; (800d164 <println+0x98>)
 800d0fc:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 800d0fe:	7bfb      	ldrb	r3, [r7, #15]
 800d100:	3301      	adds	r3, #1
 800d102:	73fb      	strb	r3, [r7, #15]
 800d104:	7bfa      	ldrb	r2, [r7, #15]
 800d106:	4b16      	ldr	r3, [pc, #88]	; (800d160 <println+0x94>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d3f0      	bcc.n	800d0f0 <println+0x24>
	printBuffer[printLen] = '\n';
 800d10e:	4b14      	ldr	r3, [pc, #80]	; (800d160 <println+0x94>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4a14      	ldr	r2, [pc, #80]	; (800d164 <println+0x98>)
 800d114:	210a      	movs	r1, #10
 800d116:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 800d118:	4b11      	ldr	r3, [pc, #68]	; (800d160 <println+0x94>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	3301      	adds	r3, #1
 800d11e:	4a11      	ldr	r2, [pc, #68]	; (800d164 <println+0x98>)
 800d120:	210d      	movs	r1, #13
 800d122:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 800d124:	4b0e      	ldr	r3, [pc, #56]	; (800d160 <println+0x94>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	3302      	adds	r3, #2
 800d12a:	4a0e      	ldr	r2, [pc, #56]	; (800d164 <println+0x98>)
 800d12c:	2100      	movs	r1, #0
 800d12e:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 800d130:	bf00      	nop
 800d132:	4b0b      	ldr	r3, [pc, #44]	; (800d160 <println+0x94>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	b29b      	uxth	r3, r3
 800d138:	3303      	adds	r3, #3
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	4619      	mov	r1, r3
 800d13e:	4809      	ldr	r0, [pc, #36]	; (800d164 <println+0x98>)
 800d140:	f001 fcae 	bl	800eaa0 <CDC_Transmit_FS>
 800d144:	4603      	mov	r3, r0
 800d146:	2b01      	cmp	r3, #1
 800d148:	d0f3      	beq.n	800d132 <println+0x66>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800d14a:	2200      	movs	r2, #0
 800d14c:	2140      	movs	r1, #64	; 0x40
 800d14e:	4803      	ldr	r0, [pc, #12]	; (800d15c <println+0x90>)
 800d150:	f7f5 f9a8 	bl	80024a4 <HAL_GPIO_WritePin>
};
 800d154:	bf00      	nop
 800d156:	3710      	adds	r7, #16
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	40020800 	.word	0x40020800
 800d160:	200007a8 	.word	0x200007a8
 800d164:	200007ac 	.word	0x200007ac

0800d168 <print_int>:
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 800d170:	2201      	movs	r2, #1
 800d172:	2140      	movs	r1, #64	; 0x40
 800d174:	480f      	ldr	r0, [pc, #60]	; (800d1b4 <print_int+0x4c>)
 800d176:	f7f5 f995 	bl	80024a4 <HAL_GPIO_WritePin>
	printLen = sprintf(printBuffer, "%d", number);
 800d17a:	687a      	ldr	r2, [r7, #4]
 800d17c:	490e      	ldr	r1, [pc, #56]	; (800d1b8 <print_int+0x50>)
 800d17e:	480f      	ldr	r0, [pc, #60]	; (800d1bc <print_int+0x54>)
 800d180:	f003 f836 	bl	80101f0 <siprintf>
 800d184:	4603      	mov	r3, r0
 800d186:	461a      	mov	r2, r3
 800d188:	4b0d      	ldr	r3, [pc, #52]	; (800d1c0 <print_int+0x58>)
 800d18a:	601a      	str	r2, [r3, #0]
	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY);
 800d18c:	bf00      	nop
 800d18e:	4b0c      	ldr	r3, [pc, #48]	; (800d1c0 <print_int+0x58>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	b29b      	uxth	r3, r3
 800d194:	4619      	mov	r1, r3
 800d196:	4809      	ldr	r0, [pc, #36]	; (800d1bc <print_int+0x54>)
 800d198:	f001 fc82 	bl	800eaa0 <CDC_Transmit_FS>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d0f5      	beq.n	800d18e <print_int+0x26>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	2140      	movs	r1, #64	; 0x40
 800d1a6:	4803      	ldr	r0, [pc, #12]	; (800d1b4 <print_int+0x4c>)
 800d1a8:	f7f5 f97c 	bl	80024a4 <HAL_GPIO_WritePin>
}
 800d1ac:	bf00      	nop
 800d1ae:	3708      	adds	r7, #8
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}
 800d1b4:	40020800 	.word	0x40020800
 800d1b8:	08012f48 	.word	0x08012f48
 800d1bc:	200007ac 	.word	0x200007ac
 800d1c0:	200007a8 	.word	0x200007a8

0800d1c4 <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 800d1c4:	b480      	push	{r7}
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ce:	4a04      	ldr	r2, [pc, #16]	; (800d1e0 <millis+0x1c>)
 800d1d0:	fba2 2303 	umull	r2, r3, r2, r3
 800d1d4:	099b      	lsrs	r3, r3, #6
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr
 800d1e0:	10624dd3 	.word	0x10624dd3

0800d1e4 <getTime>:
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b08c      	sub	sp, #48	; 0x30
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 800d1ec:	f107 031c 	add.w	r3, r7, #28
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	601a      	str	r2, [r3, #0]
 800d1f4:	605a      	str	r2, [r3, #4]
 800d1f6:	609a      	str	r2, [r3, #8]
 800d1f8:	60da      	str	r2, [r3, #12]
 800d1fa:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 800d200:	f107 030c 	add.w	r3, r7, #12
 800d204:	2200      	movs	r2, #0
 800d206:	601a      	str	r2, [r3, #0]
 800d208:	605a      	str	r2, [r3, #4]
 800d20a:	811a      	strh	r2, [r3, #8]
	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 800d20c:	f000 fda0 	bl	800dd50 <Get_RTC_Instance>
 800d210:	f107 031c 	add.w	r3, r7, #28
 800d214:	2200      	movs	r2, #0
 800d216:	4619      	mov	r1, r3
 800d218:	f7f7 fa4a 	bl	80046b0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 800d21c:	f000 fd98 	bl	800dd50 <Get_RTC_Instance>
 800d220:	f107 0318 	add.w	r3, r7, #24
 800d224:	2200      	movs	r2, #0
 800d226:	4619      	mov	r1, r3
 800d228:	f7f7 fb47 	bl	80048ba <HAL_RTC_GetDate>
	toReturn.year = rtc_date.Year;
 800d22c:	7efb      	ldrb	r3, [r7, #27]
 800d22e:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month;// - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 800d230:	7e7b      	ldrb	r3, [r7, #25]
 800d232:	737b      	strb	r3, [r7, #13]
	toReturn.dayM = rtc_date.Date;
 800d234:	7ebb      	ldrb	r3, [r7, #26]
 800d236:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 800d238:	7e3b      	ldrb	r3, [r7, #24]
 800d23a:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 800d23c:	7f3b      	ldrb	r3, [r7, #28]
 800d23e:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 800d240:	7f7b      	ldrb	r3, [r7, #29]
 800d242:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 800d244:	7fbb      	ldrb	r3, [r7, #30]
 800d246:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 800d248:	f7ff ffbc 	bl	800d1c4 <millis>
 800d24c:	4602      	mov	r2, r0
 800d24e:	4b0c      	ldr	r3, [pc, #48]	; (800d280 <getTime+0x9c>)
 800d250:	fba3 1302 	umull	r1, r3, r3, r2
 800d254:	099b      	lsrs	r3, r3, #6
 800d256:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d25a:	fb01 f303 	mul.w	r3, r1, r3
 800d25e:	1ad3      	subs	r3, r2, r3
 800d260:	b29b      	uxth	r3, r3
 800d262:	82bb      	strh	r3, [r7, #20]
	return toReturn;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	461a      	mov	r2, r3
 800d268:	f107 030c 	add.w	r3, r7, #12
 800d26c:	cb03      	ldmia	r3!, {r0, r1}
 800d26e:	6010      	str	r0, [r2, #0]
 800d270:	6051      	str	r1, [r2, #4]
 800d272:	881b      	ldrh	r3, [r3, #0]
 800d274:	8113      	strh	r3, [r2, #8]
}
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	3730      	adds	r7, #48	; 0x30
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	10624dd3 	.word	0x10624dd3

0800d284 <sdTest_begin>:
#include "sd.h"

bool sdActive;

static bool sdTest_begin(void)
{
 800d284:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d286:	b091      	sub	sp, #68	; 0x44
 800d288:	af06      	add	r7, sp, #24

	if (SD_init() == FR_OK)
 800d28a:	f7f3 ff5d 	bl	8001148 <SD_init>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	d171      	bne.n	800d378 <sdTest_begin+0xf4>
	{
		println("[SD] Detected");
 800d294:	4840      	ldr	r0, [pc, #256]	; (800d398 <sdTest_begin+0x114>)
 800d296:	f7ff ff19 	bl	800d0cc <println>
		print("[SD] Creating test file...");
 800d29a:	4840      	ldr	r0, [pc, #256]	; (800d39c <sdTest_begin+0x118>)
 800d29c:	f7ff fef4 	bl	800d088 <print>
		if (SD_newFile("/TEST.TXT") == FR_OK)
 800d2a0:	483f      	ldr	r0, [pc, #252]	; (800d3a0 <sdTest_begin+0x11c>)
 800d2a2:	f7f3 ff99 	bl	80011d8 <SD_newFile>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d161      	bne.n	800d370 <sdTest_begin+0xec>
		{
			println("successful.");
 800d2ac:	483d      	ldr	r0, [pc, #244]	; (800d3a4 <sdTest_begin+0x120>)
 800d2ae:	f7ff ff0d 	bl	800d0cc <println>
			bool status = true;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status |= (SD_writeToFile("/TEST.TXT", "Created on: ") == FR_OK);
 800d2b8:	493b      	ldr	r1, [pc, #236]	; (800d3a8 <sdTest_begin+0x124>)
 800d2ba:	4839      	ldr	r0, [pc, #228]	; (800d3a0 <sdTest_begin+0x11c>)
 800d2bc:	f7f3 ffce 	bl	800125c <SD_writeToFile>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	bf0c      	ite	eq
 800d2c6:	2301      	moveq	r3, #1
 800d2c8:	2300      	movne	r3, #0
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	bf14      	ite	ne
 800d2d8:	2301      	movne	r3, #1
 800d2da:	2300      	moveq	r3, #0
 800d2dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			DateTime fileCreated = getTime();
 800d2e0:	f107 031c 	add.w	r3, r7, #28
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7ff ff7d 	bl	800d1e4 <getTime>
			char dateStr[26] = {0};
 800d2ea:	463b      	mov	r3, r7
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	601a      	str	r2, [r3, #0]
 800d2f0:	605a      	str	r2, [r3, #4]
 800d2f2:	609a      	str	r2, [r3, #8]
 800d2f4:	60da      	str	r2, [r3, #12]
 800d2f6:	611a      	str	r2, [r3, #16]
 800d2f8:	615a      	str	r2, [r3, #20]
 800d2fa:	831a      	strh	r2, [r3, #24]
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 800d2fc:	7fbb      	ldrb	r3, [r7, #30]
 800d2fe:	461e      	mov	r6, r3
 800d300:	7f7b      	ldrb	r3, [r7, #29]
 800d302:	469c      	mov	ip, r3
 800d304:	7f3b      	ldrb	r3, [r7, #28]
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 800d306:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d30a:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800d30e:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 800d312:	4604      	mov	r4, r0
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 800d314:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 800d316:	4605      	mov	r5, r0
 800d318:	4638      	mov	r0, r7
 800d31a:	9504      	str	r5, [sp, #16]
 800d31c:	9403      	str	r4, [sp, #12]
 800d31e:	9102      	str	r1, [sp, #8]
 800d320:	9201      	str	r2, [sp, #4]
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	4663      	mov	r3, ip
 800d326:	4632      	mov	r2, r6
 800d328:	4920      	ldr	r1, [pc, #128]	; (800d3ac <sdTest_begin+0x128>)
 800d32a:	f002 ff61 	bl	80101f0 <siprintf>

			status |= (SD_writeToFile("/TEST.TXT", dateStr) == FR_OK);
 800d32e:	463b      	mov	r3, r7
 800d330:	4619      	mov	r1, r3
 800d332:	481b      	ldr	r0, [pc, #108]	; (800d3a0 <sdTest_begin+0x11c>)
 800d334:	f7f3 ff92 	bl	800125c <SD_writeToFile>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	bf0c      	ite	eq
 800d33e:	2301      	moveq	r3, #1
 800d340:	2300      	movne	r3, #0
 800d342:	b2db      	uxtb	r3, r3
 800d344:	461a      	mov	r2, r3
 800d346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d34a:	4313      	orrs	r3, r2
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	bf14      	ite	ne
 800d350:	2301      	movne	r3, #1
 800d352:	2300      	moveq	r3, #0
 800d354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if (status) println("[SD] Content writing successful!");
 800d358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d003      	beq.n	800d368 <sdTest_begin+0xe4>
 800d360:	4813      	ldr	r0, [pc, #76]	; (800d3b0 <sdTest_begin+0x12c>)
 800d362:	f7ff feb3 	bl	800d0cc <println>
 800d366:	e00f      	b.n	800d388 <sdTest_begin+0x104>
			else println("[SD] Content writing unsuccessful!");
 800d368:	4812      	ldr	r0, [pc, #72]	; (800d3b4 <sdTest_begin+0x130>)
 800d36a:	f7ff feaf 	bl	800d0cc <println>
 800d36e:	e00b      	b.n	800d388 <sdTest_begin+0x104>
		}
		else println("unsuccessful :(");
 800d370:	4811      	ldr	r0, [pc, #68]	; (800d3b8 <sdTest_begin+0x134>)
 800d372:	f7ff feab 	bl	800d0cc <println>
 800d376:	e007      	b.n	800d388 <sdTest_begin+0x104>
	}
	else
	{
		println("[SD] Init fail!");
 800d378:	4810      	ldr	r0, [pc, #64]	; (800d3bc <sdTest_begin+0x138>)
 800d37a:	f7ff fea7 	bl	800d0cc <println>
		sdActive = false;
 800d37e:	4b10      	ldr	r3, [pc, #64]	; (800d3c0 <sdTest_begin+0x13c>)
 800d380:	2200      	movs	r2, #0
 800d382:	701a      	strb	r2, [r3, #0]
		return false;
 800d384:	2300      	movs	r3, #0
 800d386:	e003      	b.n	800d390 <sdTest_begin+0x10c>
	}

	sdActive = true;
 800d388:	4b0d      	ldr	r3, [pc, #52]	; (800d3c0 <sdTest_begin+0x13c>)
 800d38a:	2201      	movs	r2, #1
 800d38c:	701a      	strb	r2, [r3, #0]
	return true;
 800d38e:	2301      	movs	r3, #1
}
 800d390:	4618      	mov	r0, r3
 800d392:	372c      	adds	r7, #44	; 0x2c
 800d394:	46bd      	mov	sp, r7
 800d396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d398:	08012f4c 	.word	0x08012f4c
 800d39c:	08012f5c 	.word	0x08012f5c
 800d3a0:	08012f78 	.word	0x08012f78
 800d3a4:	08012f84 	.word	0x08012f84
 800d3a8:	08012f90 	.word	0x08012f90
 800d3ac:	08012fa0 	.word	0x08012fa0
 800d3b0:	08012fb8 	.word	0x08012fb8
 800d3b4:	08012fdc 	.word	0x08012fdc
 800d3b8:	08013000 	.word	0x08013000
 800d3bc:	08013010 	.word	0x08013010
 800d3c0:	20002c2c 	.word	0x20002c2c

0800d3c4 <sdTest_loop>:

static void sdTest_loop(void)
{
 800d3c4:	b5b0      	push	{r4, r5, r7, lr}
 800d3c6:	b08a      	sub	sp, #40	; 0x28
 800d3c8:	af00      	add	r7, sp, #0
	char log_path[] = "/HAM/HAMOOD.TXT";
 800d3ca:	4b1b      	ldr	r3, [pc, #108]	; (800d438 <sdTest_loop+0x74>)
 800d3cc:	f107 0418 	add.w	r4, r7, #24
 800d3d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d3d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char buf[20];

	sprintf((char*)buf, "hamood hadibi!!!!\r\n");
 800d3d6:	4b19      	ldr	r3, [pc, #100]	; (800d43c <sdTest_loop+0x78>)
 800d3d8:	1d3c      	adds	r4, r7, #4
 800d3da:	461d      	mov	r5, r3
 800d3dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3e0:	682b      	ldr	r3, [r5, #0]
 800d3e2:	6023      	str	r3, [r4, #0]


	print("Init:"); print_int(SD_init()); println("");
 800d3e4:	4816      	ldr	r0, [pc, #88]	; (800d440 <sdTest_loop+0x7c>)
 800d3e6:	f7ff fe4f 	bl	800d088 <print>
 800d3ea:	f7f3 fead 	bl	8001148 <SD_init>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7ff feb9 	bl	800d168 <print_int>
 800d3f6:	4813      	ldr	r0, [pc, #76]	; (800d444 <sdTest_loop+0x80>)
 800d3f8:	f7ff fe68 	bl	800d0cc <println>
	f_mkdir("/HAM");
 800d3fc:	4812      	ldr	r0, [pc, #72]	; (800d448 <sdTest_loop+0x84>)
 800d3fe:	f7ff fbb3 	bl	800cb68 <f_mkdir>
	print("Write: "); print_int(SD_writeToFile(log_path, buf)); println("");
 800d402:	4812      	ldr	r0, [pc, #72]	; (800d44c <sdTest_loop+0x88>)
 800d404:	f7ff fe40 	bl	800d088 <print>
 800d408:	1d3a      	adds	r2, r7, #4
 800d40a:	f107 0318 	add.w	r3, r7, #24
 800d40e:	4611      	mov	r1, r2
 800d410:	4618      	mov	r0, r3
 800d412:	f7f3 ff23 	bl	800125c <SD_writeToFile>
 800d416:	4603      	mov	r3, r0
 800d418:	4618      	mov	r0, r3
 800d41a:	f7ff fea5 	bl	800d168 <print_int>
 800d41e:	4809      	ldr	r0, [pc, #36]	; (800d444 <sdTest_loop+0x80>)
 800d420:	f7ff fe54 	bl	800d0cc <println>
	SD_deinit();
 800d424:	f7f3 fecc 	bl	80011c0 <SD_deinit>

    HAL_Delay(1000);
 800d428:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d42c:	f7f4 f9bc 	bl	80017a8 <HAL_Delay>
}
 800d430:	bf00      	nop
 800d432:	3728      	adds	r7, #40	; 0x28
 800d434:	46bd      	mov	sp, r7
 800d436:	bdb0      	pop	{r4, r5, r7, pc}
 800d438:	08013050 	.word	0x08013050
 800d43c:	08013020 	.word	0x08013020
 800d440:	08013034 	.word	0x08013034
 800d444:	0801303c 	.word	0x0801303c
 800d448:	08013040 	.word	0x08013040
 800d44c:	08013048 	.word	0x08013048

0800d450 <setup>:

#include "Peripherials/sdTest.c"
#include "logger.h"

static void setup(void)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	af00      	add	r7, sp, #0
	// wait for USR button press
	while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET);
 800d454:	bf00      	nop
 800d456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d45a:	4811      	ldr	r0, [pc, #68]	; (800d4a0 <setup+0x50>)
 800d45c:	f7f5 f80a 	bl	8002474 <HAL_GPIO_ReadPin>
 800d460:	4603      	mov	r3, r0
 800d462:	2b01      	cmp	r3, #1
 800d464:	d0f7      	beq.n	800d456 <setup+0x6>
	// begin the program
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 800d466:	2201      	movs	r2, #1
 800d468:	2140      	movs	r1, #64	; 0x40
 800d46a:	480e      	ldr	r0, [pc, #56]	; (800d4a4 <setup+0x54>)
 800d46c:	f7f5 f81a 	bl	80024a4 <HAL_GPIO_WritePin>
	println("Hello world!!");	HAL_Delay(500);
 800d470:	480d      	ldr	r0, [pc, #52]	; (800d4a8 <setup+0x58>)
 800d472:	f7ff fe2b 	bl	800d0cc <println>
 800d476:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d47a:	f7f4 f995 	bl	80017a8 <HAL_Delay>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800d47e:	2200      	movs	r2, #0
 800d480:	2140      	movs	r1, #64	; 0x40
 800d482:	4808      	ldr	r0, [pc, #32]	; (800d4a4 <setup+0x54>)
 800d484:	f7f5 f80e 	bl	80024a4 <HAL_GPIO_WritePin>

	if (sdTest_begin()) println("SD success!!!!");
 800d488:	f7ff fefc 	bl	800d284 <sdTest_begin>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d002      	beq.n	800d498 <setup+0x48>
 800d492:	4806      	ldr	r0, [pc, #24]	; (800d4ac <setup+0x5c>)
 800d494:	f7ff fe1a 	bl	800d0cc <println>
	log_new();
 800d498:	f7f4 f824 	bl	80014e4 <log_new>
}
 800d49c:	bf00      	nop
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	40020000 	.word	0x40020000
 800d4a4:	40020800 	.word	0x40020800
 800d4a8:	08013060 	.word	0x08013060
 800d4ac:	08013070 	.word	0x08013070

0800d4b0 <loop>:

static void loop(void)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	af00      	add	r7, sp, #0
	sdTest_loop();
 800d4b4:	f7ff ff86 	bl	800d3c4 <sdTest_loop>
}
 800d4b8:	bf00      	nop
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d4c0:	f7f4 f900 	bl	80016c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d4c4:	f000 f862 	bl	800d58c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d4c8:	f000 fb64 	bl	800db94 <MX_GPIO_Init>
  MX_DMA_Init();
 800d4cc:	f000 fb3a 	bl	800db44 <MX_DMA_Init>
  MX_I2C1_Init();
 800d4d0:	f000 f8de 	bl	800d690 <MX_I2C1_Init>
  MX_RTC_Init();
 800d4d4:	f000 f90a 	bl	800d6ec <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800d4d8:	f000 f962 	bl	800d7a0 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800d4dc:	f000 f980 	bl	800d7e0 <MX_SPI1_Init>
  MX_TIM2_Init();
 800d4e0:	f000 f9b4 	bl	800d84c <MX_TIM2_Init>
  MX_TIM3_Init();
 800d4e4:	f000 fa00 	bl	800d8e8 <MX_TIM3_Init>
  MX_TIM5_Init();
 800d4e8:	f000 fa80 	bl	800d9ec <MX_TIM5_Init>
  MX_USART3_UART_Init();
 800d4ec:	f000 fb00 	bl	800daf0 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800d4f0:	f7ff fd9a 	bl	800d028 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800d4f4:	f001 f9de 	bl	800e8b4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	// Start millisecond timer
	HAL_TIM_Base_Start(&htim2);
 800d4f8:	4820      	ldr	r0, [pc, #128]	; (800d57c <main+0xc0>)
 800d4fa:	f7f8 fe2b 	bl	8006154 <HAL_TIM_Base_Start>

	// Setup pins
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 800d4fe:	2200      	movs	r2, #0
 800d500:	2180      	movs	r1, #128	; 0x80
 800d502:	481f      	ldr	r0, [pc, #124]	; (800d580 <main+0xc4>)
 800d504:	f7f4 ffce 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800d508:	2200      	movs	r2, #0
 800d50a:	2140      	movs	r1, #64	; 0x40
 800d50c:	481c      	ldr	r0, [pc, #112]	; (800d580 <main+0xc4>)
 800d50e:	f7f4 ffc9 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 800d512:	2200      	movs	r2, #0
 800d514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d518:	481a      	ldr	r0, [pc, #104]	; (800d584 <main+0xc8>)
 800d51a:	f7f4 ffc3 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 800d51e:	2200      	movs	r2, #0
 800d520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d524:	4817      	ldr	r0, [pc, #92]	; (800d584 <main+0xc8>)
 800d526:	f7f4 ffbd 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 800d52a:	2200      	movs	r2, #0
 800d52c:	2101      	movs	r1, #1
 800d52e:	4816      	ldr	r0, [pc, #88]	; (800d588 <main+0xcc>)
 800d530:	f7f4 ffb8 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 800d534:	2200      	movs	r2, #0
 800d536:	2104      	movs	r1, #4
 800d538:	4813      	ldr	r0, [pc, #76]	; (800d588 <main+0xcc>)
 800d53a:	f7f4 ffb3 	bl	80024a4 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, GPIO_PIN_RESET);
 800d53e:	2200      	movs	r2, #0
 800d540:	2101      	movs	r1, #1
 800d542:	480f      	ldr	r0, [pc, #60]	; (800d580 <main+0xc4>)
 800d544:	f7f4 ffae 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, GPIO_PIN_RESET);
 800d548:	2200      	movs	r2, #0
 800d54a:	2104      	movs	r1, #4
 800d54c:	480c      	ldr	r0, [pc, #48]	; (800d580 <main+0xc4>)
 800d54e:	f7f4 ffa9 	bl	80024a4 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P3_GPIO_Port, P3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P4_GPIO_Port, P4_Pin, GPIO_PIN_RESET);
 800d552:	2200      	movs	r2, #0
 800d554:	2102      	movs	r1, #2
 800d556:	480a      	ldr	r0, [pc, #40]	; (800d580 <main+0xc4>)
 800d558:	f7f4 ffa4 	bl	80024a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P5_GPIO_Port, P5_Pin, GPIO_PIN_SET);
 800d55c:	2201      	movs	r2, #1
 800d55e:	2108      	movs	r1, #8
 800d560:	4807      	ldr	r0, [pc, #28]	; (800d580 <main+0xc4>)
 800d562:	f7f4 ff9f 	bl	80024a4 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P6_GPIO_Port, P6_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 800d566:	2200      	movs	r2, #0
 800d568:	2110      	movs	r1, #16
 800d56a:	4807      	ldr	r0, [pc, #28]	; (800d588 <main+0xcc>)
 800d56c:	f7f4 ff9a 	bl	80024a4 <HAL_GPIO_WritePin>

	// Execute code
	setup();
 800d570:	f7ff ff6e 	bl	800d450 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Execute code
	  	loop();
 800d574:	f7ff ff9c 	bl	800d4b0 <loop>
 800d578:	e7fc      	b.n	800d574 <main+0xb8>
 800d57a:	bf00      	nop
 800d57c:	20004f70 	.word	0x20004f70
 800d580:	40020800 	.word	0x40020800
 800d584:	40020400 	.word	0x40020400
 800d588:	40020000 	.word	0x40020000

0800d58c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b098      	sub	sp, #96	; 0x60
 800d590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d592:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d596:	2230      	movs	r2, #48	; 0x30
 800d598:	2100      	movs	r1, #0
 800d59a:	4618      	mov	r0, r3
 800d59c:	f001 ff23 	bl	800f3e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d5a0:	f107 031c 	add.w	r3, r7, #28
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	601a      	str	r2, [r3, #0]
 800d5a8:	605a      	str	r2, [r3, #4]
 800d5aa:	609a      	str	r2, [r3, #8]
 800d5ac:	60da      	str	r2, [r3, #12]
 800d5ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d5b0:	f107 030c 	add.w	r3, r7, #12
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	601a      	str	r2, [r3, #0]
 800d5b8:	605a      	str	r2, [r3, #4]
 800d5ba:	609a      	str	r2, [r3, #8]
 800d5bc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d5be:	2300      	movs	r3, #0
 800d5c0:	60bb      	str	r3, [r7, #8]
 800d5c2:	4b31      	ldr	r3, [pc, #196]	; (800d688 <SystemClock_Config+0xfc>)
 800d5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5c6:	4a30      	ldr	r2, [pc, #192]	; (800d688 <SystemClock_Config+0xfc>)
 800d5c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5cc:	6413      	str	r3, [r2, #64]	; 0x40
 800d5ce:	4b2e      	ldr	r3, [pc, #184]	; (800d688 <SystemClock_Config+0xfc>)
 800d5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5d6:	60bb      	str	r3, [r7, #8]
 800d5d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d5da:	2300      	movs	r3, #0
 800d5dc:	607b      	str	r3, [r7, #4]
 800d5de:	4b2b      	ldr	r3, [pc, #172]	; (800d68c <SystemClock_Config+0x100>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4a2a      	ldr	r2, [pc, #168]	; (800d68c <SystemClock_Config+0x100>)
 800d5e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d5e8:	6013      	str	r3, [r2, #0]
 800d5ea:	4b28      	ldr	r3, [pc, #160]	; (800d68c <SystemClock_Config+0x100>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5f2:	607b      	str	r3, [r7, #4]
 800d5f4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800d5f6:	2309      	movs	r3, #9
 800d5f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d5fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d5fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800d600:	2301      	movs	r3, #1
 800d602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d604:	2302      	movs	r3, #2
 800d606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d608:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d60c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800d60e:	2306      	movs	r3, #6
 800d610:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800d612:	23a8      	movs	r3, #168	; 0xa8
 800d614:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d616:	2302      	movs	r3, #2
 800d618:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800d61a:	2307      	movs	r3, #7
 800d61c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d61e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d622:	4618      	mov	r0, r3
 800d624:	f7f6 fa0a 	bl	8003a3c <HAL_RCC_OscConfig>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d001      	beq.n	800d632 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800d62e:	f000 fb99 	bl	800dd64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d632:	230f      	movs	r3, #15
 800d634:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d636:	2302      	movs	r3, #2
 800d638:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d63a:	2300      	movs	r3, #0
 800d63c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d63e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d642:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d648:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d64a:	f107 031c 	add.w	r3, r7, #28
 800d64e:	2105      	movs	r1, #5
 800d650:	4618      	mov	r0, r3
 800d652:	f7f6 fc35 	bl	8003ec0 <HAL_RCC_ClockConfig>
 800d656:	4603      	mov	r3, r0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d001      	beq.n	800d660 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800d65c:	f000 fb82 	bl	800dd64 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800d660:	2302      	movs	r3, #2
 800d662:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800d664:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d668:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d66a:	f107 030c 	add.w	r3, r7, #12
 800d66e:	4618      	mov	r0, r3
 800d670:	f7f6 fdee 	bl	8004250 <HAL_RCCEx_PeriphCLKConfig>
 800d674:	4603      	mov	r3, r0
 800d676:	2b00      	cmp	r3, #0
 800d678:	d001      	beq.n	800d67e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800d67a:	f000 fb73 	bl	800dd64 <Error_Handler>
  }
}
 800d67e:	bf00      	nop
 800d680:	3760      	adds	r7, #96	; 0x60
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	40023800 	.word	0x40023800
 800d68c:	40007000 	.word	0x40007000

0800d690 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800d694:	4b12      	ldr	r3, [pc, #72]	; (800d6e0 <MX_I2C1_Init+0x50>)
 800d696:	4a13      	ldr	r2, [pc, #76]	; (800d6e4 <MX_I2C1_Init+0x54>)
 800d698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800d69a:	4b11      	ldr	r3, [pc, #68]	; (800d6e0 <MX_I2C1_Init+0x50>)
 800d69c:	4a12      	ldr	r2, [pc, #72]	; (800d6e8 <MX_I2C1_Init+0x58>)
 800d69e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d6a0:	4b0f      	ldr	r3, [pc, #60]	; (800d6e0 <MX_I2C1_Init+0x50>)
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800d6a6:	4b0e      	ldr	r3, [pc, #56]	; (800d6e0 <MX_I2C1_Init+0x50>)
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d6ac:	4b0c      	ldr	r3, [pc, #48]	; (800d6e0 <MX_I2C1_Init+0x50>)
 800d6ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d6b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d6b4:	4b0a      	ldr	r3, [pc, #40]	; (800d6e0 <MX_I2C1_Init+0x50>)
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800d6ba:	4b09      	ldr	r3, [pc, #36]	; (800d6e0 <MX_I2C1_Init+0x50>)
 800d6bc:	2200      	movs	r2, #0
 800d6be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d6c0:	4b07      	ldr	r3, [pc, #28]	; (800d6e0 <MX_I2C1_Init+0x50>)
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d6c6:	4b06      	ldr	r3, [pc, #24]	; (800d6e0 <MX_I2C1_Init+0x50>)
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d6cc:	4804      	ldr	r0, [pc, #16]	; (800d6e0 <MX_I2C1_Init+0x50>)
 800d6ce:	f7f4 ff03 	bl	80024d8 <HAL_I2C_Init>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d001      	beq.n	800d6dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800d6d8:	f000 fb44 	bl	800dd64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800d6dc:	bf00      	nop
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	20004d40 	.word	0x20004d40
 800d6e4:	40005400 	.word	0x40005400
 800d6e8:	00061a80 	.word	0x00061a80

0800d6ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b086      	sub	sp, #24
 800d6f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800d6f2:	1d3b      	adds	r3, r7, #4
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	601a      	str	r2, [r3, #0]
 800d6f8:	605a      	str	r2, [r3, #4]
 800d6fa:	609a      	str	r2, [r3, #8]
 800d6fc:	60da      	str	r2, [r3, #12]
 800d6fe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800d700:	2300      	movs	r3, #0
 800d702:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800d704:	4b24      	ldr	r3, [pc, #144]	; (800d798 <MX_RTC_Init+0xac>)
 800d706:	4a25      	ldr	r2, [pc, #148]	; (800d79c <MX_RTC_Init+0xb0>)
 800d708:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800d70a:	4b23      	ldr	r3, [pc, #140]	; (800d798 <MX_RTC_Init+0xac>)
 800d70c:	2200      	movs	r2, #0
 800d70e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800d710:	4b21      	ldr	r3, [pc, #132]	; (800d798 <MX_RTC_Init+0xac>)
 800d712:	227f      	movs	r2, #127	; 0x7f
 800d714:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800d716:	4b20      	ldr	r3, [pc, #128]	; (800d798 <MX_RTC_Init+0xac>)
 800d718:	22ff      	movs	r2, #255	; 0xff
 800d71a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d71c:	4b1e      	ldr	r3, [pc, #120]	; (800d798 <MX_RTC_Init+0xac>)
 800d71e:	2200      	movs	r2, #0
 800d720:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d722:	4b1d      	ldr	r3, [pc, #116]	; (800d798 <MX_RTC_Init+0xac>)
 800d724:	2200      	movs	r2, #0
 800d726:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d728:	4b1b      	ldr	r3, [pc, #108]	; (800d798 <MX_RTC_Init+0xac>)
 800d72a:	2200      	movs	r2, #0
 800d72c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800d72e:	481a      	ldr	r0, [pc, #104]	; (800d798 <MX_RTC_Init+0xac>)
 800d730:	f7f6 fe70 	bl	8004414 <HAL_RTC_Init>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d001      	beq.n	800d73e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800d73a:	f000 fb13 	bl	800dd64 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 22;
 800d73e:	2316      	movs	r3, #22
 800d740:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 18;
 800d742:	2312      	movs	r3, #18
 800d744:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800d746:	2300      	movs	r3, #0
 800d748:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d74a:	2300      	movs	r3, #0
 800d74c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800d74e:	2300      	movs	r3, #0
 800d750:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800d752:	1d3b      	adds	r3, r7, #4
 800d754:	2200      	movs	r2, #0
 800d756:	4619      	mov	r1, r3
 800d758:	480f      	ldr	r0, [pc, #60]	; (800d798 <MX_RTC_Init+0xac>)
 800d75a:	f7f6 feec 	bl	8004536 <HAL_RTC_SetTime>
 800d75e:	4603      	mov	r3, r0
 800d760:	2b00      	cmp	r3, #0
 800d762:	d001      	beq.n	800d768 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800d764:	f000 fafe 	bl	800dd64 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800d768:	2302      	movs	r3, #2
 800d76a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 800d76c:	2302      	movs	r3, #2
 800d76e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 25;
 800d770:	2319      	movs	r3, #25
 800d772:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 800d774:	2314      	movs	r3, #20
 800d776:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800d778:	463b      	mov	r3, r7
 800d77a:	2200      	movs	r2, #0
 800d77c:	4619      	mov	r1, r3
 800d77e:	4806      	ldr	r0, [pc, #24]	; (800d798 <MX_RTC_Init+0xac>)
 800d780:	f7f6 fff4 	bl	800476c <HAL_RTC_SetDate>
 800d784:	4603      	mov	r3, r0
 800d786:	2b00      	cmp	r3, #0
 800d788:	d001      	beq.n	800d78e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800d78a:	f000 faeb 	bl	800dd64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800d78e:	bf00      	nop
 800d790:	3718      	adds	r7, #24
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	20004e14 	.word	0x20004e14
 800d79c:	40002800 	.word	0x40002800

0800d7a0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800d7a4:	4b0c      	ldr	r3, [pc, #48]	; (800d7d8 <MX_SDIO_SD_Init+0x38>)
 800d7a6:	4a0d      	ldr	r2, [pc, #52]	; (800d7dc <MX_SDIO_SD_Init+0x3c>)
 800d7a8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800d7aa:	4b0b      	ldr	r3, [pc, #44]	; (800d7d8 <MX_SDIO_SD_Init+0x38>)
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800d7b0:	4b09      	ldr	r3, [pc, #36]	; (800d7d8 <MX_SDIO_SD_Init+0x38>)
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d7b6:	4b08      	ldr	r3, [pc, #32]	; (800d7d8 <MX_SDIO_SD_Init+0x38>)
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800d7bc:	4b06      	ldr	r3, [pc, #24]	; (800d7d8 <MX_SDIO_SD_Init+0x38>)
 800d7be:	2200      	movs	r2, #0
 800d7c0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d7c2:	4b05      	ldr	r3, [pc, #20]	; (800d7d8 <MX_SDIO_SD_Init+0x38>)
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800d7c8:	4b03      	ldr	r3, [pc, #12]	; (800d7d8 <MX_SDIO_SD_Init+0x38>)
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800d7ce:	bf00      	nop
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr
 800d7d8:	20004e94 	.word	0x20004e94
 800d7dc:	40012c00 	.word	0x40012c00

0800d7e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800d7e4:	4b17      	ldr	r3, [pc, #92]	; (800d844 <MX_SPI1_Init+0x64>)
 800d7e6:	4a18      	ldr	r2, [pc, #96]	; (800d848 <MX_SPI1_Init+0x68>)
 800d7e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d7ea:	4b16      	ldr	r3, [pc, #88]	; (800d844 <MX_SPI1_Init+0x64>)
 800d7ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d7f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d7f2:	4b14      	ldr	r3, [pc, #80]	; (800d844 <MX_SPI1_Init+0x64>)
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d7f8:	4b12      	ldr	r3, [pc, #72]	; (800d844 <MX_SPI1_Init+0x64>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d7fe:	4b11      	ldr	r3, [pc, #68]	; (800d844 <MX_SPI1_Init+0x64>)
 800d800:	2200      	movs	r2, #0
 800d802:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d804:	4b0f      	ldr	r3, [pc, #60]	; (800d844 <MX_SPI1_Init+0x64>)
 800d806:	2200      	movs	r2, #0
 800d808:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d80a:	4b0e      	ldr	r3, [pc, #56]	; (800d844 <MX_SPI1_Init+0x64>)
 800d80c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d810:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800d812:	4b0c      	ldr	r3, [pc, #48]	; (800d844 <MX_SPI1_Init+0x64>)
 800d814:	2218      	movs	r2, #24
 800d816:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d818:	4b0a      	ldr	r3, [pc, #40]	; (800d844 <MX_SPI1_Init+0x64>)
 800d81a:	2200      	movs	r2, #0
 800d81c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d81e:	4b09      	ldr	r3, [pc, #36]	; (800d844 <MX_SPI1_Init+0x64>)
 800d820:	2200      	movs	r2, #0
 800d822:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d824:	4b07      	ldr	r3, [pc, #28]	; (800d844 <MX_SPI1_Init+0x64>)
 800d826:	2200      	movs	r2, #0
 800d828:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800d82a:	4b06      	ldr	r3, [pc, #24]	; (800d844 <MX_SPI1_Init+0x64>)
 800d82c:	220a      	movs	r2, #10
 800d82e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d830:	4804      	ldr	r0, [pc, #16]	; (800d844 <MX_SPI1_Init+0x64>)
 800d832:	f7f8 fc00 	bl	8006036 <HAL_SPI_Init>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d001      	beq.n	800d840 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800d83c:	f000 fa92 	bl	800dd64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800d840:	bf00      	nop
 800d842:	bd80      	pop	{r7, pc}
 800d844:	20004f18 	.word	0x20004f18
 800d848:	40013000 	.word	0x40013000

0800d84c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b086      	sub	sp, #24
 800d850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d852:	f107 0308 	add.w	r3, r7, #8
 800d856:	2200      	movs	r2, #0
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	605a      	str	r2, [r3, #4]
 800d85c:	609a      	str	r2, [r3, #8]
 800d85e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d860:	463b      	mov	r3, r7
 800d862:	2200      	movs	r2, #0
 800d864:	601a      	str	r2, [r3, #0]
 800d866:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d868:	4b1d      	ldr	r3, [pc, #116]	; (800d8e0 <MX_TIM2_Init+0x94>)
 800d86a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d86e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800d870:	4b1b      	ldr	r3, [pc, #108]	; (800d8e0 <MX_TIM2_Init+0x94>)
 800d872:	2253      	movs	r2, #83	; 0x53
 800d874:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d876:	4b1a      	ldr	r3, [pc, #104]	; (800d8e0 <MX_TIM2_Init+0x94>)
 800d878:	2200      	movs	r2, #0
 800d87a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 800d87c:	4b18      	ldr	r3, [pc, #96]	; (800d8e0 <MX_TIM2_Init+0x94>)
 800d87e:	4a19      	ldr	r2, [pc, #100]	; (800d8e4 <MX_TIM2_Init+0x98>)
 800d880:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d882:	4b17      	ldr	r3, [pc, #92]	; (800d8e0 <MX_TIM2_Init+0x94>)
 800d884:	2200      	movs	r2, #0
 800d886:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d888:	4b15      	ldr	r3, [pc, #84]	; (800d8e0 <MX_TIM2_Init+0x94>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d88e:	4814      	ldr	r0, [pc, #80]	; (800d8e0 <MX_TIM2_Init+0x94>)
 800d890:	f7f8 fc35 	bl	80060fe <HAL_TIM_Base_Init>
 800d894:	4603      	mov	r3, r0
 800d896:	2b00      	cmp	r3, #0
 800d898:	d001      	beq.n	800d89e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800d89a:	f000 fa63 	bl	800dd64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d89e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d8a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800d8a4:	f107 0308 	add.w	r3, r7, #8
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	480d      	ldr	r0, [pc, #52]	; (800d8e0 <MX_TIM2_Init+0x94>)
 800d8ac:	f7f8 fd72 	bl	8006394 <HAL_TIM_ConfigClockSource>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d001      	beq.n	800d8ba <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800d8b6:	f000 fa55 	bl	800dd64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d8c2:	463b      	mov	r3, r7
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	4806      	ldr	r0, [pc, #24]	; (800d8e0 <MX_TIM2_Init+0x94>)
 800d8c8:	f7f9 f906 	bl	8006ad8 <HAL_TIMEx_MasterConfigSynchronization>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d001      	beq.n	800d8d6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800d8d2:	f000 fa47 	bl	800dd64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800d8d6:	bf00      	nop
 800d8d8:	3718      	adds	r7, #24
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	20004f70 	.word	0x20004f70
 800d8e4:	fa56ea00 	.word	0xfa56ea00

0800d8e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b08e      	sub	sp, #56	; 0x38
 800d8ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d8ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	601a      	str	r2, [r3, #0]
 800d8f6:	605a      	str	r2, [r3, #4]
 800d8f8:	609a      	str	r2, [r3, #8]
 800d8fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d8fc:	f107 0320 	add.w	r3, r7, #32
 800d900:	2200      	movs	r2, #0
 800d902:	601a      	str	r2, [r3, #0]
 800d904:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d906:	1d3b      	adds	r3, r7, #4
 800d908:	2200      	movs	r2, #0
 800d90a:	601a      	str	r2, [r3, #0]
 800d90c:	605a      	str	r2, [r3, #4]
 800d90e:	609a      	str	r2, [r3, #8]
 800d910:	60da      	str	r2, [r3, #12]
 800d912:	611a      	str	r2, [r3, #16]
 800d914:	615a      	str	r2, [r3, #20]
 800d916:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d918:	4b32      	ldr	r3, [pc, #200]	; (800d9e4 <MX_TIM3_Init+0xfc>)
 800d91a:	4a33      	ldr	r2, [pc, #204]	; (800d9e8 <MX_TIM3_Init+0x100>)
 800d91c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 800d91e:	4b31      	ldr	r3, [pc, #196]	; (800d9e4 <MX_TIM3_Init+0xfc>)
 800d920:	22a7      	movs	r2, #167	; 0xa7
 800d922:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d924:	4b2f      	ldr	r3, [pc, #188]	; (800d9e4 <MX_TIM3_Init+0xfc>)
 800d926:	2200      	movs	r2, #0
 800d928:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800d92a:	4b2e      	ldr	r3, [pc, #184]	; (800d9e4 <MX_TIM3_Init+0xfc>)
 800d92c:	f242 7210 	movw	r2, #10000	; 0x2710
 800d930:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d932:	4b2c      	ldr	r3, [pc, #176]	; (800d9e4 <MX_TIM3_Init+0xfc>)
 800d934:	2200      	movs	r2, #0
 800d936:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d938:	4b2a      	ldr	r3, [pc, #168]	; (800d9e4 <MX_TIM3_Init+0xfc>)
 800d93a:	2200      	movs	r2, #0
 800d93c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800d93e:	4829      	ldr	r0, [pc, #164]	; (800d9e4 <MX_TIM3_Init+0xfc>)
 800d940:	f7f8 fbdd 	bl	80060fe <HAL_TIM_Base_Init>
 800d944:	4603      	mov	r3, r0
 800d946:	2b00      	cmp	r3, #0
 800d948:	d001      	beq.n	800d94e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800d94a:	f000 fa0b 	bl	800dd64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d94e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d952:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800d954:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d958:	4619      	mov	r1, r3
 800d95a:	4822      	ldr	r0, [pc, #136]	; (800d9e4 <MX_TIM3_Init+0xfc>)
 800d95c:	f7f8 fd1a 	bl	8006394 <HAL_TIM_ConfigClockSource>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d001      	beq.n	800d96a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800d966:	f000 f9fd 	bl	800dd64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800d96a:	481e      	ldr	r0, [pc, #120]	; (800d9e4 <MX_TIM3_Init+0xfc>)
 800d96c:	f7f8 fc16 	bl	800619c <HAL_TIM_PWM_Init>
 800d970:	4603      	mov	r3, r0
 800d972:	2b00      	cmp	r3, #0
 800d974:	d001      	beq.n	800d97a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800d976:	f000 f9f5 	bl	800dd64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d97a:	2300      	movs	r3, #0
 800d97c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d97e:	2300      	movs	r3, #0
 800d980:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d982:	f107 0320 	add.w	r3, r7, #32
 800d986:	4619      	mov	r1, r3
 800d988:	4816      	ldr	r0, [pc, #88]	; (800d9e4 <MX_TIM3_Init+0xfc>)
 800d98a:	f7f9 f8a5 	bl	8006ad8 <HAL_TIMEx_MasterConfigSynchronization>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d001      	beq.n	800d998 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800d994:	f000 f9e6 	bl	800dd64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d998:	2360      	movs	r3, #96	; 0x60
 800d99a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800d99c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d9a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d9aa:	1d3b      	adds	r3, r7, #4
 800d9ac:	2208      	movs	r2, #8
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	480c      	ldr	r0, [pc, #48]	; (800d9e4 <MX_TIM3_Init+0xfc>)
 800d9b2:	f7f8 fc29 	bl	8006208 <HAL_TIM_PWM_ConfigChannel>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d001      	beq.n	800d9c0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800d9bc:	f000 f9d2 	bl	800dd64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d9c0:	1d3b      	adds	r3, r7, #4
 800d9c2:	220c      	movs	r2, #12
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	4807      	ldr	r0, [pc, #28]	; (800d9e4 <MX_TIM3_Init+0xfc>)
 800d9c8:	f7f8 fc1e 	bl	8006208 <HAL_TIM_PWM_ConfigChannel>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d001      	beq.n	800d9d6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800d9d2:	f000 f9c7 	bl	800dd64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800d9d6:	4803      	ldr	r0, [pc, #12]	; (800d9e4 <MX_TIM3_Init+0xfc>)
 800d9d8:	f000 fe0a 	bl	800e5f0 <HAL_TIM_MspPostInit>

}
 800d9dc:	bf00      	nop
 800d9de:	3738      	adds	r7, #56	; 0x38
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	20004dd4 	.word	0x20004dd4
 800d9e8:	40000400 	.word	0x40000400

0800d9ec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b08e      	sub	sp, #56	; 0x38
 800d9f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d9f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	601a      	str	r2, [r3, #0]
 800d9fa:	605a      	str	r2, [r3, #4]
 800d9fc:	609a      	str	r2, [r3, #8]
 800d9fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800da00:	f107 0320 	add.w	r3, r7, #32
 800da04:	2200      	movs	r2, #0
 800da06:	601a      	str	r2, [r3, #0]
 800da08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800da0a:	1d3b      	adds	r3, r7, #4
 800da0c:	2200      	movs	r2, #0
 800da0e:	601a      	str	r2, [r3, #0]
 800da10:	605a      	str	r2, [r3, #4]
 800da12:	609a      	str	r2, [r3, #8]
 800da14:	60da      	str	r2, [r3, #12]
 800da16:	611a      	str	r2, [r3, #16]
 800da18:	615a      	str	r2, [r3, #20]
 800da1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800da1c:	4b32      	ldr	r3, [pc, #200]	; (800dae8 <MX_TIM5_Init+0xfc>)
 800da1e:	4a33      	ldr	r2, [pc, #204]	; (800daec <MX_TIM5_Init+0x100>)
 800da20:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800da22:	4b31      	ldr	r3, [pc, #196]	; (800dae8 <MX_TIM5_Init+0xfc>)
 800da24:	2200      	movs	r2, #0
 800da26:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800da28:	4b2f      	ldr	r3, [pc, #188]	; (800dae8 <MX_TIM5_Init+0xfc>)
 800da2a:	2240      	movs	r2, #64	; 0x40
 800da2c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 800da2e:	4b2e      	ldr	r3, [pc, #184]	; (800dae8 <MX_TIM5_Init+0xfc>)
 800da30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800da34:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800da36:	4b2c      	ldr	r3, [pc, #176]	; (800dae8 <MX_TIM5_Init+0xfc>)
 800da38:	2200      	movs	r2, #0
 800da3a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800da3c:	4b2a      	ldr	r3, [pc, #168]	; (800dae8 <MX_TIM5_Init+0xfc>)
 800da3e:	2200      	movs	r2, #0
 800da40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800da42:	4829      	ldr	r0, [pc, #164]	; (800dae8 <MX_TIM5_Init+0xfc>)
 800da44:	f7f8 fb5b 	bl	80060fe <HAL_TIM_Base_Init>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d001      	beq.n	800da52 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800da4e:	f000 f989 	bl	800dd64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800da52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800da58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800da5c:	4619      	mov	r1, r3
 800da5e:	4822      	ldr	r0, [pc, #136]	; (800dae8 <MX_TIM5_Init+0xfc>)
 800da60:	f7f8 fc98 	bl	8006394 <HAL_TIM_ConfigClockSource>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d001      	beq.n	800da6e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800da6a:	f000 f97b 	bl	800dd64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800da6e:	481e      	ldr	r0, [pc, #120]	; (800dae8 <MX_TIM5_Init+0xfc>)
 800da70:	f7f8 fb94 	bl	800619c <HAL_TIM_PWM_Init>
 800da74:	4603      	mov	r3, r0
 800da76:	2b00      	cmp	r3, #0
 800da78:	d001      	beq.n	800da7e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800da7a:	f000 f973 	bl	800dd64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800da7e:	2300      	movs	r3, #0
 800da80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800da82:	2300      	movs	r3, #0
 800da84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800da86:	f107 0320 	add.w	r3, r7, #32
 800da8a:	4619      	mov	r1, r3
 800da8c:	4816      	ldr	r0, [pc, #88]	; (800dae8 <MX_TIM5_Init+0xfc>)
 800da8e:	f7f9 f823 	bl	8006ad8 <HAL_TIMEx_MasterConfigSynchronization>
 800da92:	4603      	mov	r3, r0
 800da94:	2b00      	cmp	r3, #0
 800da96:	d001      	beq.n	800da9c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800da98:	f000 f964 	bl	800dd64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800da9c:	2370      	movs	r3, #112	; 0x70
 800da9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800daa0:	2300      	movs	r3, #0
 800daa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800daa4:	2300      	movs	r3, #0
 800daa6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800daa8:	2300      	movs	r3, #0
 800daaa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800daac:	1d3b      	adds	r3, r7, #4
 800daae:	2204      	movs	r2, #4
 800dab0:	4619      	mov	r1, r3
 800dab2:	480d      	ldr	r0, [pc, #52]	; (800dae8 <MX_TIM5_Init+0xfc>)
 800dab4:	f7f8 fba8 	bl	8006208 <HAL_TIM_PWM_ConfigChannel>
 800dab8:	4603      	mov	r3, r0
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d001      	beq.n	800dac2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800dabe:	f000 f951 	bl	800dd64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800dac2:	1d3b      	adds	r3, r7, #4
 800dac4:	220c      	movs	r2, #12
 800dac6:	4619      	mov	r1, r3
 800dac8:	4807      	ldr	r0, [pc, #28]	; (800dae8 <MX_TIM5_Init+0xfc>)
 800daca:	f7f8 fb9d 	bl	8006208 <HAL_TIM_PWM_ConfigChannel>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d001      	beq.n	800dad8 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 800dad4:	f000 f946 	bl	800dd64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800dad8:	4803      	ldr	r0, [pc, #12]	; (800dae8 <MX_TIM5_Init+0xfc>)
 800dada:	f000 fd89 	bl	800e5f0 <HAL_TIM_MspPostInit>

}
 800dade:	bf00      	nop
 800dae0:	3738      	adds	r7, #56	; 0x38
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	20004d94 	.word	0x20004d94
 800daec:	40000c00 	.word	0x40000c00

0800daf0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800daf4:	4b11      	ldr	r3, [pc, #68]	; (800db3c <MX_USART3_UART_Init+0x4c>)
 800daf6:	4a12      	ldr	r2, [pc, #72]	; (800db40 <MX_USART3_UART_Init+0x50>)
 800daf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800dafa:	4b10      	ldr	r3, [pc, #64]	; (800db3c <MX_USART3_UART_Init+0x4c>)
 800dafc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800db00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800db02:	4b0e      	ldr	r3, [pc, #56]	; (800db3c <MX_USART3_UART_Init+0x4c>)
 800db04:	2200      	movs	r2, #0
 800db06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800db08:	4b0c      	ldr	r3, [pc, #48]	; (800db3c <MX_USART3_UART_Init+0x4c>)
 800db0a:	2200      	movs	r2, #0
 800db0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800db0e:	4b0b      	ldr	r3, [pc, #44]	; (800db3c <MX_USART3_UART_Init+0x4c>)
 800db10:	2200      	movs	r2, #0
 800db12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800db14:	4b09      	ldr	r3, [pc, #36]	; (800db3c <MX_USART3_UART_Init+0x4c>)
 800db16:	220c      	movs	r2, #12
 800db18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800db1a:	4b08      	ldr	r3, [pc, #32]	; (800db3c <MX_USART3_UART_Init+0x4c>)
 800db1c:	2200      	movs	r2, #0
 800db1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800db20:	4b06      	ldr	r3, [pc, #24]	; (800db3c <MX_USART3_UART_Init+0x4c>)
 800db22:	2200      	movs	r2, #0
 800db24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800db26:	4805      	ldr	r0, [pc, #20]	; (800db3c <MX_USART3_UART_Init+0x4c>)
 800db28:	f7f9 f81b 	bl	8006b62 <HAL_UART_Init>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d001      	beq.n	800db36 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800db32:	f000 f917 	bl	800dd64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800db36:	bf00      	nop
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	20004d00 	.word	0x20004d00
 800db40:	40004800 	.word	0x40004800

0800db44 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800db4a:	2300      	movs	r3, #0
 800db4c:	607b      	str	r3, [r7, #4]
 800db4e:	4b10      	ldr	r3, [pc, #64]	; (800db90 <MX_DMA_Init+0x4c>)
 800db50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db52:	4a0f      	ldr	r2, [pc, #60]	; (800db90 <MX_DMA_Init+0x4c>)
 800db54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800db58:	6313      	str	r3, [r2, #48]	; 0x30
 800db5a:	4b0d      	ldr	r3, [pc, #52]	; (800db90 <MX_DMA_Init+0x4c>)
 800db5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db62:	607b      	str	r3, [r7, #4]
 800db64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800db66:	2200      	movs	r2, #0
 800db68:	2100      	movs	r1, #0
 800db6a:	203b      	movs	r0, #59	; 0x3b
 800db6c:	f7f3 ff19 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800db70:	203b      	movs	r0, #59	; 0x3b
 800db72:	f7f3 ff32 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800db76:	2200      	movs	r2, #0
 800db78:	2100      	movs	r1, #0
 800db7a:	2045      	movs	r0, #69	; 0x45
 800db7c:	f7f3 ff11 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800db80:	2045      	movs	r0, #69	; 0x45
 800db82:	f7f3 ff2a 	bl	80019da <HAL_NVIC_EnableIRQ>

}
 800db86:	bf00      	nop
 800db88:	3708      	adds	r7, #8
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	40023800 	.word	0x40023800

0800db94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b08a      	sub	sp, #40	; 0x28
 800db98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db9a:	f107 0314 	add.w	r3, r7, #20
 800db9e:	2200      	movs	r2, #0
 800dba0:	601a      	str	r2, [r3, #0]
 800dba2:	605a      	str	r2, [r3, #4]
 800dba4:	609a      	str	r2, [r3, #8]
 800dba6:	60da      	str	r2, [r3, #12]
 800dba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800dbaa:	2300      	movs	r3, #0
 800dbac:	613b      	str	r3, [r7, #16]
 800dbae:	4b63      	ldr	r3, [pc, #396]	; (800dd3c <MX_GPIO_Init+0x1a8>)
 800dbb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbb2:	4a62      	ldr	r2, [pc, #392]	; (800dd3c <MX_GPIO_Init+0x1a8>)
 800dbb4:	f043 0304 	orr.w	r3, r3, #4
 800dbb8:	6313      	str	r3, [r2, #48]	; 0x30
 800dbba:	4b60      	ldr	r3, [pc, #384]	; (800dd3c <MX_GPIO_Init+0x1a8>)
 800dbbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbbe:	f003 0304 	and.w	r3, r3, #4
 800dbc2:	613b      	str	r3, [r7, #16]
 800dbc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	60fb      	str	r3, [r7, #12]
 800dbca:	4b5c      	ldr	r3, [pc, #368]	; (800dd3c <MX_GPIO_Init+0x1a8>)
 800dbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbce:	4a5b      	ldr	r2, [pc, #364]	; (800dd3c <MX_GPIO_Init+0x1a8>)
 800dbd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbd4:	6313      	str	r3, [r2, #48]	; 0x30
 800dbd6:	4b59      	ldr	r3, [pc, #356]	; (800dd3c <MX_GPIO_Init+0x1a8>)
 800dbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbde:	60fb      	str	r3, [r7, #12]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	60bb      	str	r3, [r7, #8]
 800dbe6:	4b55      	ldr	r3, [pc, #340]	; (800dd3c <MX_GPIO_Init+0x1a8>)
 800dbe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbea:	4a54      	ldr	r2, [pc, #336]	; (800dd3c <MX_GPIO_Init+0x1a8>)
 800dbec:	f043 0301 	orr.w	r3, r3, #1
 800dbf0:	6313      	str	r3, [r2, #48]	; 0x30
 800dbf2:	4b52      	ldr	r3, [pc, #328]	; (800dd3c <MX_GPIO_Init+0x1a8>)
 800dbf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbf6:	f003 0301 	and.w	r3, r3, #1
 800dbfa:	60bb      	str	r3, [r7, #8]
 800dbfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800dbfe:	2300      	movs	r3, #0
 800dc00:	607b      	str	r3, [r7, #4]
 800dc02:	4b4e      	ldr	r3, [pc, #312]	; (800dd3c <MX_GPIO_Init+0x1a8>)
 800dc04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc06:	4a4d      	ldr	r2, [pc, #308]	; (800dd3c <MX_GPIO_Init+0x1a8>)
 800dc08:	f043 0302 	orr.w	r3, r3, #2
 800dc0c:	6313      	str	r3, [r2, #48]	; 0x30
 800dc0e:	4b4b      	ldr	r3, [pc, #300]	; (800dd3c <MX_GPIO_Init+0x1a8>)
 800dc10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc12:	f003 0302 	and.w	r3, r3, #2
 800dc16:	607b      	str	r3, [r7, #4]
 800dc18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	603b      	str	r3, [r7, #0]
 800dc1e:	4b47      	ldr	r3, [pc, #284]	; (800dd3c <MX_GPIO_Init+0x1a8>)
 800dc20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc22:	4a46      	ldr	r2, [pc, #280]	; (800dd3c <MX_GPIO_Init+0x1a8>)
 800dc24:	f043 0308 	orr.w	r3, r3, #8
 800dc28:	6313      	str	r3, [r2, #48]	; 0x30
 800dc2a:	4b44      	ldr	r3, [pc, #272]	; (800dd3c <MX_GPIO_Init+0x1a8>)
 800dc2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc2e:	f003 0308 	and.w	r3, r3, #8
 800dc32:	603b      	str	r3, [r7, #0]
 800dc34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 800dc36:	2200      	movs	r2, #0
 800dc38:	21ef      	movs	r1, #239	; 0xef
 800dc3a:	4841      	ldr	r0, [pc, #260]	; (800dd40 <MX_GPIO_Init+0x1ac>)
 800dc3c:	f7f4 fc32 	bl	80024a4 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 800dc40:	2200      	movs	r2, #0
 800dc42:	2115      	movs	r1, #21
 800dc44:	483f      	ldr	r0, [pc, #252]	; (800dd44 <MX_GPIO_Init+0x1b0>)
 800dc46:	f7f4 fc2d 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 800dc50:	483d      	ldr	r0, [pc, #244]	; (800dd48 <MX_GPIO_Init+0x1b4>)
 800dc52:	f7f4 fc27 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 800dc56:	23cf      	movs	r3, #207	; 0xcf
 800dc58:	617b      	str	r3, [r7, #20]
                          |LEDB_Pin|LEDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dc62:	2300      	movs	r3, #0
 800dc64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dc66:	f107 0314 	add.w	r3, r7, #20
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	4834      	ldr	r0, [pc, #208]	; (800dd40 <MX_GPIO_Init+0x1ac>)
 800dc6e:	f7f4 fa67 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin;
 800dc72:	2305      	movs	r3, #5
 800dc74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dc76:	2301      	movs	r3, #1
 800dc78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800dc7a:	2302      	movs	r3, #2
 800dc7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc82:	f107 0314 	add.w	r3, r7, #20
 800dc86:	4619      	mov	r1, r3
 800dc88:	482e      	ldr	r0, [pc, #184]	; (800dd44 <MX_GPIO_Init+0x1b0>)
 800dc8a:	f7f4 fa59 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 800dc8e:	2310      	movs	r3, #16
 800dc90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dc92:	2301      	movs	r3, #1
 800dc94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc96:	2300      	movs	r3, #0
 800dc98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 800dc9e:	f107 0314 	add.w	r3, r7, #20
 800dca2:	4619      	mov	r1, r3
 800dca4:	4827      	ldr	r0, [pc, #156]	; (800dd44 <MX_GPIO_Init+0x1b0>)
 800dca6:	f7f4 fa4b 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_DIO0_Pin LR_TIM_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin|LR_TIM_Pin;
 800dcaa:	23c0      	movs	r3, #192	; 0xc0
 800dcac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800dcae:	4b27      	ldr	r3, [pc, #156]	; (800dd4c <MX_GPIO_Init+0x1b8>)
 800dcb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dcb6:	f107 0314 	add.w	r3, r7, #20
 800dcba:	4619      	mov	r1, r3
 800dcbc:	4821      	ldr	r0, [pc, #132]	; (800dd44 <MX_GPIO_Init+0x1b0>)
 800dcbe:	f7f4 fa3f 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_RESET_Pin */
  GPIO_InitStruct.Pin = LR_RESET_Pin;
 800dcc2:	2320      	movs	r3, #32
 800dcc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800dcca:	2302      	movs	r3, #2
 800dccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_RESET_GPIO_Port, &GPIO_InitStruct);
 800dcd2:	f107 0314 	add.w	r3, r7, #20
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	4819      	ldr	r0, [pc, #100]	; (800dd40 <MX_GPIO_Init+0x1ac>)
 800dcda:	f7f4 fa31 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 800dcde:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800dce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dce4:	2301      	movs	r3, #1
 800dce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dce8:	2300      	movs	r3, #0
 800dcea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dcec:	2300      	movs	r3, #0
 800dcee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dcf0:	f107 0314 	add.w	r3, r7, #20
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	4814      	ldr	r0, [pc, #80]	; (800dd48 <MX_GPIO_Init+0x1b4>)
 800dcf8:	f7f4 fa22 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_SW_Pin BTN_USR_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin|BTN_USR_Pin;
 800dcfc:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800dd00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dd02:	2300      	movs	r3, #0
 800dd04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dd06:	2301      	movs	r3, #1
 800dd08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dd0a:	f107 0314 	add.w	r3, r7, #20
 800dd0e:	4619      	mov	r1, r3
 800dd10:	480c      	ldr	r0, [pc, #48]	; (800dd44 <MX_GPIO_Init+0x1b0>)
 800dd12:	f7f4 fa15 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 800dd16:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800dd20:	2302      	movs	r3, #2
 800dd22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dd24:	2300      	movs	r3, #0
 800dd26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 800dd28:	f107 0314 	add.w	r3, r7, #20
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	4806      	ldr	r0, [pc, #24]	; (800dd48 <MX_GPIO_Init+0x1b4>)
 800dd30:	f7f4 fa06 	bl	8002140 <HAL_GPIO_Init>

}
 800dd34:	bf00      	nop
 800dd36:	3728      	adds	r7, #40	; 0x28
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	40023800 	.word	0x40023800
 800dd40:	40020800 	.word	0x40020800
 800dd44:	40020000 	.word	0x40020000
 800dd48:	40020400 	.word	0x40020400
 800dd4c:	10110000 	.word	0x10110000

0800dd50 <Get_RTC_Instance>:
/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
SPI_HandleTypeDef* Get_SPI1_Instance(void) { return &hspi1; }
UART_HandleTypeDef* Get_UART3_Instance(void) { return &huart3; }
RTC_HandleTypeDef* Get_RTC_Instance(void) { return &hrtc; }
 800dd50:	b480      	push	{r7}
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	4b02      	ldr	r3, [pc, #8]	; (800dd60 <Get_RTC_Instance+0x10>)
 800dd56:	4618      	mov	r0, r3
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr
 800dd60:	20004e14 	.word	0x20004e14

0800dd64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800dd64:	b480      	push	{r7}
 800dd66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800dd68:	bf00      	nop
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr

0800dd72 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b084      	sub	sp, #16
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800dd7a:	f7f3 fd09 	bl	8001790 <HAL_GetTick>
 800dd7e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800dd80:	e006      	b.n	800dd90 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dd82:	f7ff f8fb 	bl	800cf7c <BSP_SD_GetCardState>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d101      	bne.n	800dd90 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	e009      	b.n	800dda4 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800dd90:	f7f3 fcfe 	bl	8001790 <HAL_GetTick>
 800dd94:	4602      	mov	r2, r0
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	1ad3      	subs	r3, r2, r3
 800dd9a:	687a      	ldr	r2, [r7, #4]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d8f0      	bhi.n	800dd82 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800dda0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3710      	adds	r7, #16
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ddb6:	4b0b      	ldr	r3, [pc, #44]	; (800dde4 <SD_CheckStatus+0x38>)
 800ddb8:	2201      	movs	r2, #1
 800ddba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ddbc:	f7ff f8de 	bl	800cf7c <BSP_SD_GetCardState>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d107      	bne.n	800ddd6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ddc6:	4b07      	ldr	r3, [pc, #28]	; (800dde4 <SD_CheckStatus+0x38>)
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	b2db      	uxtb	r3, r3
 800ddcc:	f023 0301 	bic.w	r3, r3, #1
 800ddd0:	b2da      	uxtb	r2, r3
 800ddd2:	4b04      	ldr	r3, [pc, #16]	; (800dde4 <SD_CheckStatus+0x38>)
 800ddd4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ddd6:	4b03      	ldr	r3, [pc, #12]	; (800dde4 <SD_CheckStatus+0x38>)
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	b2db      	uxtb	r3, r3
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	20000117 	.word	0x20000117

0800dde8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	4603      	mov	r3, r0
 800ddf0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ddf2:	f7ff f869 	bl	800cec8 <BSP_SD_Init>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d107      	bne.n	800de0c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ddfc:	79fb      	ldrb	r3, [r7, #7]
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7ff ffd4 	bl	800ddac <SD_CheckStatus>
 800de04:	4603      	mov	r3, r0
 800de06:	461a      	mov	r2, r3
 800de08:	4b04      	ldr	r3, [pc, #16]	; (800de1c <SD_initialize+0x34>)
 800de0a:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800de0c:	4b03      	ldr	r3, [pc, #12]	; (800de1c <SD_initialize+0x34>)
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	b2db      	uxtb	r3, r3
}
 800de12:	4618      	mov	r0, r3
 800de14:	3708      	adds	r7, #8
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	20000117 	.word	0x20000117

0800de20 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
 800de26:	4603      	mov	r3, r0
 800de28:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800de2a:	79fb      	ldrb	r3, [r7, #7]
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7ff ffbd 	bl	800ddac <SD_CheckStatus>
 800de32:	4603      	mov	r3, r0
}
 800de34:	4618      	mov	r0, r3
 800de36:	3708      	adds	r7, #8
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b088      	sub	sp, #32
 800de40:	af00      	add	r7, sp, #0
 800de42:	60b9      	str	r1, [r7, #8]
 800de44:	607a      	str	r2, [r7, #4]
 800de46:	603b      	str	r3, [r7, #0]
 800de48:	4603      	mov	r3, r0
 800de4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800de4c:	2301      	movs	r3, #1
 800de4e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800de50:	f247 5030 	movw	r0, #30000	; 0x7530
 800de54:	f7ff ff8d 	bl	800dd72 <SD_CheckStatusWithTimeout>
 800de58:	4603      	mov	r3, r0
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	da01      	bge.n	800de62 <SD_read+0x26>
  {
    return res;
 800de5e:	7ffb      	ldrb	r3, [r7, #31]
 800de60:	e08b      	b.n	800df7a <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	f003 0303 	and.w	r3, r3, #3
 800de68:	2b00      	cmp	r3, #0
 800de6a:	f040 8085 	bne.w	800df78 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800de6e:	683a      	ldr	r2, [r7, #0]
 800de70:	6879      	ldr	r1, [r7, #4]
 800de72:	68b8      	ldr	r0, [r7, #8]
 800de74:	f7ff f84e 	bl	800cf14 <BSP_SD_ReadBlocks_DMA>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d133      	bne.n	800dee6 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800de7e:	4b41      	ldr	r3, [pc, #260]	; (800df84 <SD_read+0x148>)
 800de80:	2200      	movs	r2, #0
 800de82:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800de84:	f7f3 fc84 	bl	8001790 <HAL_GetTick>
 800de88:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800de8a:	bf00      	nop
 800de8c:	4b3d      	ldr	r3, [pc, #244]	; (800df84 <SD_read+0x148>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d108      	bne.n	800dea6 <SD_read+0x6a>
 800de94:	f7f3 fc7c 	bl	8001790 <HAL_GetTick>
 800de98:	4602      	mov	r2, r0
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	1ad3      	subs	r3, r2, r3
 800de9e:	f247 522f 	movw	r2, #29999	; 0x752f
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d9f2      	bls.n	800de8c <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800dea6:	4b37      	ldr	r3, [pc, #220]	; (800df84 <SD_read+0x148>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d102      	bne.n	800deb4 <SD_read+0x78>
      {
        res = RES_ERROR;
 800deae:	2301      	movs	r3, #1
 800deb0:	77fb      	strb	r3, [r7, #31]
 800deb2:	e061      	b.n	800df78 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800deb4:	4b33      	ldr	r3, [pc, #204]	; (800df84 <SD_read+0x148>)
 800deb6:	2200      	movs	r2, #0
 800deb8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800deba:	f7f3 fc69 	bl	8001790 <HAL_GetTick>
 800debe:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dec0:	e007      	b.n	800ded2 <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dec2:	f7ff f85b 	bl	800cf7c <BSP_SD_GetCardState>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d102      	bne.n	800ded2 <SD_read+0x96>
          {
            res = RES_OK;
 800decc:	2300      	movs	r3, #0
 800dece:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800ded0:	e052      	b.n	800df78 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ded2:	f7f3 fc5d 	bl	8001790 <HAL_GetTick>
 800ded6:	4602      	mov	r2, r0
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	1ad3      	subs	r3, r2, r3
 800dedc:	f247 522f 	movw	r2, #29999	; 0x752f
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d9ee      	bls.n	800dec2 <SD_read+0x86>
 800dee4:	e048      	b.n	800df78 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800dee6:	2300      	movs	r3, #0
 800dee8:	61bb      	str	r3, [r7, #24]
 800deea:	e034      	b.n	800df56 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	1c5a      	adds	r2, r3, #1
 800def0:	607a      	str	r2, [r7, #4]
 800def2:	2201      	movs	r2, #1
 800def4:	4619      	mov	r1, r3
 800def6:	4824      	ldr	r0, [pc, #144]	; (800df88 <SD_read+0x14c>)
 800def8:	f7ff f80c 	bl	800cf14 <BSP_SD_ReadBlocks_DMA>
 800defc:	4603      	mov	r3, r0
 800defe:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800df00:	7fbb      	ldrb	r3, [r7, #30]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d12c      	bne.n	800df60 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800df06:	4b1f      	ldr	r3, [pc, #124]	; (800df84 <SD_read+0x148>)
 800df08:	2200      	movs	r2, #0
 800df0a:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800df0c:	f7f3 fc40 	bl	8001790 <HAL_GetTick>
 800df10:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800df12:	bf00      	nop
 800df14:	4b1b      	ldr	r3, [pc, #108]	; (800df84 <SD_read+0x148>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d108      	bne.n	800df2e <SD_read+0xf2>
 800df1c:	f7f3 fc38 	bl	8001790 <HAL_GetTick>
 800df20:	4602      	mov	r2, r0
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	1ad3      	subs	r3, r2, r3
 800df26:	f247 522f 	movw	r2, #29999	; 0x752f
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d9f2      	bls.n	800df14 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800df2e:	4b15      	ldr	r3, [pc, #84]	; (800df84 <SD_read+0x148>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d016      	beq.n	800df64 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	4a13      	ldr	r2, [pc, #76]	; (800df88 <SD_read+0x14c>)
 800df3a:	4618      	mov	r0, r3
 800df3c:	4611      	mov	r1, r2
 800df3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df42:	461a      	mov	r2, r3
 800df44:	f001 fa44 	bl	800f3d0 <memcpy>
          buff += BLOCKSIZE;
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800df4e:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800df50:	69bb      	ldr	r3, [r7, #24]
 800df52:	3301      	adds	r3, #1
 800df54:	61bb      	str	r3, [r7, #24]
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	683a      	ldr	r2, [r7, #0]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d8c6      	bhi.n	800deec <SD_read+0xb0>
 800df5e:	e002      	b.n	800df66 <SD_read+0x12a>
        }
        else
        {
          break;
 800df60:	bf00      	nop
 800df62:	e000      	b.n	800df66 <SD_read+0x12a>
            break;
 800df64:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800df66:	69bb      	ldr	r3, [r7, #24]
 800df68:	683a      	ldr	r2, [r7, #0]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d104      	bne.n	800df78 <SD_read+0x13c>
 800df6e:	7fbb      	ldrb	r3, [r7, #30]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d101      	bne.n	800df78 <SD_read+0x13c>
        res = RES_OK;
 800df74:	2300      	movs	r3, #0
 800df76:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800df78:	7ffb      	ldrb	r3, [r7, #31]
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3720      	adds	r7, #32
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop
 800df84:	20000bb0 	.word	0x20000bb0
 800df88:	200009ac 	.word	0x200009ac

0800df8c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b088      	sub	sp, #32
 800df90:	af00      	add	r7, sp, #0
 800df92:	60b9      	str	r1, [r7, #8]
 800df94:	607a      	str	r2, [r7, #4]
 800df96:	603b      	str	r3, [r7, #0]
 800df98:	4603      	mov	r3, r0
 800df9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800df9c:	2301      	movs	r3, #1
 800df9e:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800dfa0:	4b4c      	ldr	r3, [pc, #304]	; (800e0d4 <SD_write+0x148>)
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dfa6:	f247 5030 	movw	r0, #30000	; 0x7530
 800dfaa:	f7ff fee2 	bl	800dd72 <SD_CheckStatusWithTimeout>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	da01      	bge.n	800dfb8 <SD_write+0x2c>
  {
    return res;
 800dfb4:	7ffb      	ldrb	r3, [r7, #31]
 800dfb6:	e088      	b.n	800e0ca <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	f003 0303 	and.w	r3, r3, #3
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	f040 8082 	bne.w	800e0c8 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800dfc4:	683a      	ldr	r2, [r7, #0]
 800dfc6:	6879      	ldr	r1, [r7, #4]
 800dfc8:	68b8      	ldr	r0, [r7, #8]
 800dfca:	f7fe ffbd 	bl	800cf48 <BSP_SD_WriteBlocks_DMA>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d130      	bne.n	800e036 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800dfd4:	f7f3 fbdc 	bl	8001790 <HAL_GetTick>
 800dfd8:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dfda:	bf00      	nop
 800dfdc:	4b3d      	ldr	r3, [pc, #244]	; (800e0d4 <SD_write+0x148>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d108      	bne.n	800dff6 <SD_write+0x6a>
 800dfe4:	f7f3 fbd4 	bl	8001790 <HAL_GetTick>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	1ad3      	subs	r3, r2, r3
 800dfee:	f247 522f 	movw	r2, #29999	; 0x752f
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d9f2      	bls.n	800dfdc <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800dff6:	4b37      	ldr	r3, [pc, #220]	; (800e0d4 <SD_write+0x148>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d102      	bne.n	800e004 <SD_write+0x78>
      {
        res = RES_ERROR;
 800dffe:	2301      	movs	r3, #1
 800e000:	77fb      	strb	r3, [r7, #31]
 800e002:	e061      	b.n	800e0c8 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800e004:	4b33      	ldr	r3, [pc, #204]	; (800e0d4 <SD_write+0x148>)
 800e006:	2200      	movs	r2, #0
 800e008:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e00a:	f7f3 fbc1 	bl	8001790 <HAL_GetTick>
 800e00e:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e010:	e007      	b.n	800e022 <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e012:	f7fe ffb3 	bl	800cf7c <BSP_SD_GetCardState>
 800e016:	4603      	mov	r3, r0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d102      	bne.n	800e022 <SD_write+0x96>
          {
            res = RES_OK;
 800e01c:	2300      	movs	r3, #0
 800e01e:	77fb      	strb	r3, [r7, #31]
            break;
 800e020:	e052      	b.n	800e0c8 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e022:	f7f3 fbb5 	bl	8001790 <HAL_GetTick>
 800e026:	4602      	mov	r2, r0
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	1ad3      	subs	r3, r2, r3
 800e02c:	f247 522f 	movw	r2, #29999	; 0x752f
 800e030:	4293      	cmp	r3, r2
 800e032:	d9ee      	bls.n	800e012 <SD_write+0x86>
 800e034:	e048      	b.n	800e0c8 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800e036:	2300      	movs	r3, #0
 800e038:	61bb      	str	r3, [r7, #24]
 800e03a:	e034      	b.n	800e0a6 <SD_write+0x11a>
      {
        WriteStatus = 0;
 800e03c:	4b25      	ldr	r3, [pc, #148]	; (800e0d4 <SD_write+0x148>)
 800e03e:	2200      	movs	r2, #0
 800e040:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	1c5a      	adds	r2, r3, #1
 800e046:	607a      	str	r2, [r7, #4]
 800e048:	2201      	movs	r2, #1
 800e04a:	4619      	mov	r1, r3
 800e04c:	4822      	ldr	r0, [pc, #136]	; (800e0d8 <SD_write+0x14c>)
 800e04e:	f7fe ff7b 	bl	800cf48 <BSP_SD_WriteBlocks_DMA>
 800e052:	4603      	mov	r3, r0
 800e054:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800e056:	7fbb      	ldrb	r3, [r7, #30]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d129      	bne.n	800e0b0 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800e05c:	f7f3 fb98 	bl	8001790 <HAL_GetTick>
 800e060:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e062:	bf00      	nop
 800e064:	4b1b      	ldr	r3, [pc, #108]	; (800e0d4 <SD_write+0x148>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d108      	bne.n	800e07e <SD_write+0xf2>
 800e06c:	f7f3 fb90 	bl	8001790 <HAL_GetTick>
 800e070:	4602      	mov	r2, r0
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	1ad3      	subs	r3, r2, r3
 800e076:	f247 522f 	movw	r2, #29999	; 0x752f
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d9f2      	bls.n	800e064 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800e07e:	4b15      	ldr	r3, [pc, #84]	; (800e0d4 <SD_write+0x148>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d016      	beq.n	800e0b4 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	4a13      	ldr	r2, [pc, #76]	; (800e0d8 <SD_write+0x14c>)
 800e08a:	4618      	mov	r0, r3
 800e08c:	4611      	mov	r1, r2
 800e08e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e092:	461a      	mov	r2, r3
 800e094:	f001 f99c 	bl	800f3d0 <memcpy>
          buff += BLOCKSIZE;
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e09e:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800e0a0:	69bb      	ldr	r3, [r7, #24]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	61bb      	str	r3, [r7, #24]
 800e0a6:	69bb      	ldr	r3, [r7, #24]
 800e0a8:	683a      	ldr	r2, [r7, #0]
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d8c6      	bhi.n	800e03c <SD_write+0xb0>
 800e0ae:	e002      	b.n	800e0b6 <SD_write+0x12a>
        }
        else
        {
          break;
 800e0b0:	bf00      	nop
 800e0b2:	e000      	b.n	800e0b6 <SD_write+0x12a>
            break;
 800e0b4:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800e0b6:	69bb      	ldr	r3, [r7, #24]
 800e0b8:	683a      	ldr	r2, [r7, #0]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d104      	bne.n	800e0c8 <SD_write+0x13c>
 800e0be:	7fbb      	ldrb	r3, [r7, #30]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d101      	bne.n	800e0c8 <SD_write+0x13c>
        res = RES_OK;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800e0c8:	7ffb      	ldrb	r3, [r7, #31]
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3720      	adds	r7, #32
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	20000bac 	.word	0x20000bac
 800e0d8:	200009ac 	.word	0x200009ac

0800e0dc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b08c      	sub	sp, #48	; 0x30
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	603a      	str	r2, [r7, #0]
 800e0e6:	71fb      	strb	r3, [r7, #7]
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e0f2:	4b25      	ldr	r3, [pc, #148]	; (800e188 <SD_ioctl+0xac>)
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	b2db      	uxtb	r3, r3
 800e0f8:	f003 0301 	and.w	r3, r3, #1
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d001      	beq.n	800e104 <SD_ioctl+0x28>
 800e100:	2303      	movs	r3, #3
 800e102:	e03c      	b.n	800e17e <SD_ioctl+0xa2>

  switch (cmd)
 800e104:	79bb      	ldrb	r3, [r7, #6]
 800e106:	2b03      	cmp	r3, #3
 800e108:	d834      	bhi.n	800e174 <SD_ioctl+0x98>
 800e10a:	a201      	add	r2, pc, #4	; (adr r2, 800e110 <SD_ioctl+0x34>)
 800e10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e110:	0800e121 	.word	0x0800e121
 800e114:	0800e129 	.word	0x0800e129
 800e118:	0800e141 	.word	0x0800e141
 800e11c:	0800e15b 	.word	0x0800e15b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e120:	2300      	movs	r3, #0
 800e122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e126:	e028      	b.n	800e17a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e128:	f107 030c 	add.w	r3, r7, #12
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fe ff35 	bl	800cf9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e138:	2300      	movs	r3, #0
 800e13a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e13e:	e01c      	b.n	800e17a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e140:	f107 030c 	add.w	r3, r7, #12
 800e144:	4618      	mov	r0, r3
 800e146:	f7fe ff29 	bl	800cf9c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14c:	b29a      	uxth	r2, r3
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e152:	2300      	movs	r3, #0
 800e154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e158:	e00f      	b.n	800e17a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e15a:	f107 030c 	add.w	r3, r7, #12
 800e15e:	4618      	mov	r0, r3
 800e160:	f7fe ff1c 	bl	800cf9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e166:	0a5a      	lsrs	r2, r3, #9
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e16c:	2300      	movs	r3, #0
 800e16e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e172:	e002      	b.n	800e17a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e174:	2304      	movs	r3, #4
 800e176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e17a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3730      	adds	r7, #48	; 0x30
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	20000117 	.word	0x20000117

0800e18c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e18c:	b480      	push	{r7}
 800e18e:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 800e190:	4b03      	ldr	r3, [pc, #12]	; (800e1a0 <BSP_SD_WriteCpltCallback+0x14>)
 800e192:	2201      	movs	r2, #1
 800e194:	601a      	str	r2, [r3, #0]
}
 800e196:	bf00      	nop
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr
 800e1a0:	20000bac 	.word	0x20000bac

0800e1a4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e1a8:	4b03      	ldr	r3, [pc, #12]	; (800e1b8 <BSP_SD_ReadCpltCallback+0x14>)
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	601a      	str	r2, [r3, #0]
}
 800e1ae:	bf00      	nop
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr
 800e1b8:	20000bb0 	.word	0x20000bb0

0800e1bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b083      	sub	sp, #12
 800e1c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	607b      	str	r3, [r7, #4]
 800e1c6:	4b10      	ldr	r3, [pc, #64]	; (800e208 <HAL_MspInit+0x4c>)
 800e1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1ca:	4a0f      	ldr	r2, [pc, #60]	; (800e208 <HAL_MspInit+0x4c>)
 800e1cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e1d0:	6453      	str	r3, [r2, #68]	; 0x44
 800e1d2:	4b0d      	ldr	r3, [pc, #52]	; (800e208 <HAL_MspInit+0x4c>)
 800e1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e1da:	607b      	str	r3, [r7, #4]
 800e1dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e1de:	2300      	movs	r3, #0
 800e1e0:	603b      	str	r3, [r7, #0]
 800e1e2:	4b09      	ldr	r3, [pc, #36]	; (800e208 <HAL_MspInit+0x4c>)
 800e1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1e6:	4a08      	ldr	r2, [pc, #32]	; (800e208 <HAL_MspInit+0x4c>)
 800e1e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e1ec:	6413      	str	r3, [r2, #64]	; 0x40
 800e1ee:	4b06      	ldr	r3, [pc, #24]	; (800e208 <HAL_MspInit+0x4c>)
 800e1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1f6:	603b      	str	r3, [r7, #0]
 800e1f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e1fa:	bf00      	nop
 800e1fc:	370c      	adds	r7, #12
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr
 800e206:	bf00      	nop
 800e208:	40023800 	.word	0x40023800

0800e20c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b08a      	sub	sp, #40	; 0x28
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e214:	f107 0314 	add.w	r3, r7, #20
 800e218:	2200      	movs	r2, #0
 800e21a:	601a      	str	r2, [r3, #0]
 800e21c:	605a      	str	r2, [r3, #4]
 800e21e:	609a      	str	r2, [r3, #8]
 800e220:	60da      	str	r2, [r3, #12]
 800e222:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4a19      	ldr	r2, [pc, #100]	; (800e290 <HAL_I2C_MspInit+0x84>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d12b      	bne.n	800e286 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e22e:	2300      	movs	r3, #0
 800e230:	613b      	str	r3, [r7, #16]
 800e232:	4b18      	ldr	r3, [pc, #96]	; (800e294 <HAL_I2C_MspInit+0x88>)
 800e234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e236:	4a17      	ldr	r2, [pc, #92]	; (800e294 <HAL_I2C_MspInit+0x88>)
 800e238:	f043 0302 	orr.w	r3, r3, #2
 800e23c:	6313      	str	r3, [r2, #48]	; 0x30
 800e23e:	4b15      	ldr	r3, [pc, #84]	; (800e294 <HAL_I2C_MspInit+0x88>)
 800e240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e242:	f003 0302 	and.w	r3, r3, #2
 800e246:	613b      	str	r3, [r7, #16]
 800e248:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800e24a:	23c0      	movs	r3, #192	; 0xc0
 800e24c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e24e:	2312      	movs	r3, #18
 800e250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e252:	2301      	movs	r3, #1
 800e254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e256:	2303      	movs	r3, #3
 800e258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e25a:	2304      	movs	r3, #4
 800e25c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e25e:	f107 0314 	add.w	r3, r7, #20
 800e262:	4619      	mov	r1, r3
 800e264:	480c      	ldr	r0, [pc, #48]	; (800e298 <HAL_I2C_MspInit+0x8c>)
 800e266:	f7f3 ff6b 	bl	8002140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e26a:	2300      	movs	r3, #0
 800e26c:	60fb      	str	r3, [r7, #12]
 800e26e:	4b09      	ldr	r3, [pc, #36]	; (800e294 <HAL_I2C_MspInit+0x88>)
 800e270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e272:	4a08      	ldr	r2, [pc, #32]	; (800e294 <HAL_I2C_MspInit+0x88>)
 800e274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e278:	6413      	str	r3, [r2, #64]	; 0x40
 800e27a:	4b06      	ldr	r3, [pc, #24]	; (800e294 <HAL_I2C_MspInit+0x88>)
 800e27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e27e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e282:	60fb      	str	r3, [r7, #12]
 800e284:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800e286:	bf00      	nop
 800e288:	3728      	adds	r7, #40	; 0x28
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	40005400 	.word	0x40005400
 800e294:	40023800 	.word	0x40023800
 800e298:	40020400 	.word	0x40020400

0800e29c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b083      	sub	sp, #12
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4a05      	ldr	r2, [pc, #20]	; (800e2c0 <HAL_RTC_MspInit+0x24>)
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d102      	bne.n	800e2b4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e2ae:	4b05      	ldr	r3, [pc, #20]	; (800e2c4 <HAL_RTC_MspInit+0x28>)
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800e2b4:	bf00      	nop
 800e2b6:	370c      	adds	r7, #12
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2be:	4770      	bx	lr
 800e2c0:	40002800 	.word	0x40002800
 800e2c4:	42470e3c 	.word	0x42470e3c

0800e2c8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b08a      	sub	sp, #40	; 0x28
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e2d0:	f107 0314 	add.w	r3, r7, #20
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	601a      	str	r2, [r3, #0]
 800e2d8:	605a      	str	r2, [r3, #4]
 800e2da:	609a      	str	r2, [r3, #8]
 800e2dc:	60da      	str	r2, [r3, #12]
 800e2de:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4a70      	ldr	r2, [pc, #448]	; (800e4a8 <HAL_SD_MspInit+0x1e0>)
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	f040 80da 	bne.w	800e4a0 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	613b      	str	r3, [r7, #16]
 800e2f0:	4b6e      	ldr	r3, [pc, #440]	; (800e4ac <HAL_SD_MspInit+0x1e4>)
 800e2f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2f4:	4a6d      	ldr	r2, [pc, #436]	; (800e4ac <HAL_SD_MspInit+0x1e4>)
 800e2f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e2fa:	6453      	str	r3, [r2, #68]	; 0x44
 800e2fc:	4b6b      	ldr	r3, [pc, #428]	; (800e4ac <HAL_SD_MspInit+0x1e4>)
 800e2fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e304:	613b      	str	r3, [r7, #16]
 800e306:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e308:	2300      	movs	r3, #0
 800e30a:	60fb      	str	r3, [r7, #12]
 800e30c:	4b67      	ldr	r3, [pc, #412]	; (800e4ac <HAL_SD_MspInit+0x1e4>)
 800e30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e310:	4a66      	ldr	r2, [pc, #408]	; (800e4ac <HAL_SD_MspInit+0x1e4>)
 800e312:	f043 0304 	orr.w	r3, r3, #4
 800e316:	6313      	str	r3, [r2, #48]	; 0x30
 800e318:	4b64      	ldr	r3, [pc, #400]	; (800e4ac <HAL_SD_MspInit+0x1e4>)
 800e31a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e31c:	f003 0304 	and.w	r3, r3, #4
 800e320:	60fb      	str	r3, [r7, #12]
 800e322:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e324:	2300      	movs	r3, #0
 800e326:	60bb      	str	r3, [r7, #8]
 800e328:	4b60      	ldr	r3, [pc, #384]	; (800e4ac <HAL_SD_MspInit+0x1e4>)
 800e32a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e32c:	4a5f      	ldr	r2, [pc, #380]	; (800e4ac <HAL_SD_MspInit+0x1e4>)
 800e32e:	f043 0308 	orr.w	r3, r3, #8
 800e332:	6313      	str	r3, [r2, #48]	; 0x30
 800e334:	4b5d      	ldr	r3, [pc, #372]	; (800e4ac <HAL_SD_MspInit+0x1e4>)
 800e336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e338:	f003 0308 	and.w	r3, r3, #8
 800e33c:	60bb      	str	r3, [r7, #8]
 800e33e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800e340:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800e344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e346:	2302      	movs	r3, #2
 800e348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e34a:	2301      	movs	r3, #1
 800e34c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e34e:	2303      	movs	r3, #3
 800e350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800e352:	230c      	movs	r3, #12
 800e354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e356:	f107 0314 	add.w	r3, r7, #20
 800e35a:	4619      	mov	r1, r3
 800e35c:	4854      	ldr	r0, [pc, #336]	; (800e4b0 <HAL_SD_MspInit+0x1e8>)
 800e35e:	f7f3 feef 	bl	8002140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e362:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e368:	2302      	movs	r3, #2
 800e36a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e36c:	2300      	movs	r3, #0
 800e36e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e370:	2303      	movs	r3, #3
 800e372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800e374:	230c      	movs	r3, #12
 800e376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e378:	f107 0314 	add.w	r3, r7, #20
 800e37c:	4619      	mov	r1, r3
 800e37e:	484c      	ldr	r0, [pc, #304]	; (800e4b0 <HAL_SD_MspInit+0x1e8>)
 800e380:	f7f3 fede 	bl	8002140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e384:	2304      	movs	r3, #4
 800e386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e388:	2302      	movs	r3, #2
 800e38a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e38c:	2301      	movs	r3, #1
 800e38e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e390:	2303      	movs	r3, #3
 800e392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800e394:	230c      	movs	r3, #12
 800e396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e398:	f107 0314 	add.w	r3, r7, #20
 800e39c:	4619      	mov	r1, r3
 800e39e:	4845      	ldr	r0, [pc, #276]	; (800e4b4 <HAL_SD_MspInit+0x1ec>)
 800e3a0:	f7f3 fece 	bl	8002140 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800e3a4:	4b44      	ldr	r3, [pc, #272]	; (800e4b8 <HAL_SD_MspInit+0x1f0>)
 800e3a6:	4a45      	ldr	r2, [pc, #276]	; (800e4bc <HAL_SD_MspInit+0x1f4>)
 800e3a8:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800e3aa:	4b43      	ldr	r3, [pc, #268]	; (800e4b8 <HAL_SD_MspInit+0x1f0>)
 800e3ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e3b0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e3b2:	4b41      	ldr	r3, [pc, #260]	; (800e4b8 <HAL_SD_MspInit+0x1f0>)
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e3b8:	4b3f      	ldr	r3, [pc, #252]	; (800e4b8 <HAL_SD_MspInit+0x1f0>)
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e3be:	4b3e      	ldr	r3, [pc, #248]	; (800e4b8 <HAL_SD_MspInit+0x1f0>)
 800e3c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e3c4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e3c6:	4b3c      	ldr	r3, [pc, #240]	; (800e4b8 <HAL_SD_MspInit+0x1f0>)
 800e3c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e3cc:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e3ce:	4b3a      	ldr	r3, [pc, #232]	; (800e4b8 <HAL_SD_MspInit+0x1f0>)
 800e3d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e3d4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800e3d6:	4b38      	ldr	r3, [pc, #224]	; (800e4b8 <HAL_SD_MspInit+0x1f0>)
 800e3d8:	2220      	movs	r2, #32
 800e3da:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e3dc:	4b36      	ldr	r3, [pc, #216]	; (800e4b8 <HAL_SD_MspInit+0x1f0>)
 800e3de:	2200      	movs	r2, #0
 800e3e0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800e3e2:	4b35      	ldr	r3, [pc, #212]	; (800e4b8 <HAL_SD_MspInit+0x1f0>)
 800e3e4:	2204      	movs	r2, #4
 800e3e6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800e3e8:	4b33      	ldr	r3, [pc, #204]	; (800e4b8 <HAL_SD_MspInit+0x1f0>)
 800e3ea:	2203      	movs	r2, #3
 800e3ec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800e3ee:	4b32      	ldr	r3, [pc, #200]	; (800e4b8 <HAL_SD_MspInit+0x1f0>)
 800e3f0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800e3f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800e3f6:	4b30      	ldr	r3, [pc, #192]	; (800e4b8 <HAL_SD_MspInit+0x1f0>)
 800e3f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e3fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800e3fe:	482e      	ldr	r0, [pc, #184]	; (800e4b8 <HAL_SD_MspInit+0x1f0>)
 800e400:	f7f3 fb06 	bl	8001a10 <HAL_DMA_Init>
 800e404:	4603      	mov	r3, r0
 800e406:	2b00      	cmp	r3, #0
 800e408:	d001      	beq.n	800e40e <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 800e40a:	f7ff fcab 	bl	800dd64 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	4a29      	ldr	r2, [pc, #164]	; (800e4b8 <HAL_SD_MspInit+0x1f0>)
 800e412:	63da      	str	r2, [r3, #60]	; 0x3c
 800e414:	4a28      	ldr	r2, [pc, #160]	; (800e4b8 <HAL_SD_MspInit+0x1f0>)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800e41a:	4b29      	ldr	r3, [pc, #164]	; (800e4c0 <HAL_SD_MspInit+0x1f8>)
 800e41c:	4a29      	ldr	r2, [pc, #164]	; (800e4c4 <HAL_SD_MspInit+0x1fc>)
 800e41e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800e420:	4b27      	ldr	r3, [pc, #156]	; (800e4c0 <HAL_SD_MspInit+0x1f8>)
 800e422:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e426:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e428:	4b25      	ldr	r3, [pc, #148]	; (800e4c0 <HAL_SD_MspInit+0x1f8>)
 800e42a:	2240      	movs	r2, #64	; 0x40
 800e42c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e42e:	4b24      	ldr	r3, [pc, #144]	; (800e4c0 <HAL_SD_MspInit+0x1f8>)
 800e430:	2200      	movs	r2, #0
 800e432:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e434:	4b22      	ldr	r3, [pc, #136]	; (800e4c0 <HAL_SD_MspInit+0x1f8>)
 800e436:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e43a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e43c:	4b20      	ldr	r3, [pc, #128]	; (800e4c0 <HAL_SD_MspInit+0x1f8>)
 800e43e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e442:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e444:	4b1e      	ldr	r3, [pc, #120]	; (800e4c0 <HAL_SD_MspInit+0x1f8>)
 800e446:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e44a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800e44c:	4b1c      	ldr	r3, [pc, #112]	; (800e4c0 <HAL_SD_MspInit+0x1f8>)
 800e44e:	2220      	movs	r2, #32
 800e450:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e452:	4b1b      	ldr	r3, [pc, #108]	; (800e4c0 <HAL_SD_MspInit+0x1f8>)
 800e454:	2200      	movs	r2, #0
 800e456:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800e458:	4b19      	ldr	r3, [pc, #100]	; (800e4c0 <HAL_SD_MspInit+0x1f8>)
 800e45a:	2204      	movs	r2, #4
 800e45c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800e45e:	4b18      	ldr	r3, [pc, #96]	; (800e4c0 <HAL_SD_MspInit+0x1f8>)
 800e460:	2203      	movs	r2, #3
 800e462:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800e464:	4b16      	ldr	r3, [pc, #88]	; (800e4c0 <HAL_SD_MspInit+0x1f8>)
 800e466:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800e46a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800e46c:	4b14      	ldr	r3, [pc, #80]	; (800e4c0 <HAL_SD_MspInit+0x1f8>)
 800e46e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e472:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800e474:	4812      	ldr	r0, [pc, #72]	; (800e4c0 <HAL_SD_MspInit+0x1f8>)
 800e476:	f7f3 facb 	bl	8001a10 <HAL_DMA_Init>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800e480:	f7ff fc70 	bl	800dd64 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	4a0e      	ldr	r2, [pc, #56]	; (800e4c0 <HAL_SD_MspInit+0x1f8>)
 800e488:	641a      	str	r2, [r3, #64]	; 0x40
 800e48a:	4a0d      	ldr	r2, [pc, #52]	; (800e4c0 <HAL_SD_MspInit+0x1f8>)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800e490:	2200      	movs	r2, #0
 800e492:	2100      	movs	r1, #0
 800e494:	2031      	movs	r0, #49	; 0x31
 800e496:	f7f3 fa84 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800e49a:	2031      	movs	r0, #49	; 0x31
 800e49c:	f7f3 fa9d 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800e4a0:	bf00      	nop
 800e4a2:	3728      	adds	r7, #40	; 0x28
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}
 800e4a8:	40012c00 	.word	0x40012c00
 800e4ac:	40023800 	.word	0x40023800
 800e4b0:	40020800 	.word	0x40020800
 800e4b4:	40020c00 	.word	0x40020c00
 800e4b8:	20004ca0 	.word	0x20004ca0
 800e4bc:	40026458 	.word	0x40026458
 800e4c0:	20004e34 	.word	0x20004e34
 800e4c4:	400264a0 	.word	0x400264a0

0800e4c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b08a      	sub	sp, #40	; 0x28
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e4d0:	f107 0314 	add.w	r3, r7, #20
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	601a      	str	r2, [r3, #0]
 800e4d8:	605a      	str	r2, [r3, #4]
 800e4da:	609a      	str	r2, [r3, #8]
 800e4dc:	60da      	str	r2, [r3, #12]
 800e4de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4a19      	ldr	r2, [pc, #100]	; (800e54c <HAL_SPI_MspInit+0x84>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d12b      	bne.n	800e542 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	613b      	str	r3, [r7, #16]
 800e4ee:	4b18      	ldr	r3, [pc, #96]	; (800e550 <HAL_SPI_MspInit+0x88>)
 800e4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4f2:	4a17      	ldr	r2, [pc, #92]	; (800e550 <HAL_SPI_MspInit+0x88>)
 800e4f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e4f8:	6453      	str	r3, [r2, #68]	; 0x44
 800e4fa:	4b15      	ldr	r3, [pc, #84]	; (800e550 <HAL_SPI_MspInit+0x88>)
 800e4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e502:	613b      	str	r3, [r7, #16]
 800e504:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e506:	2300      	movs	r3, #0
 800e508:	60fb      	str	r3, [r7, #12]
 800e50a:	4b11      	ldr	r3, [pc, #68]	; (800e550 <HAL_SPI_MspInit+0x88>)
 800e50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e50e:	4a10      	ldr	r2, [pc, #64]	; (800e550 <HAL_SPI_MspInit+0x88>)
 800e510:	f043 0302 	orr.w	r3, r3, #2
 800e514:	6313      	str	r3, [r2, #48]	; 0x30
 800e516:	4b0e      	ldr	r3, [pc, #56]	; (800e550 <HAL_SPI_MspInit+0x88>)
 800e518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e51a:	f003 0302 	and.w	r3, r3, #2
 800e51e:	60fb      	str	r3, [r7, #12]
 800e520:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 800e522:	2338      	movs	r3, #56	; 0x38
 800e524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e526:	2302      	movs	r3, #2
 800e528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e52a:	2300      	movs	r3, #0
 800e52c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e52e:	2303      	movs	r3, #3
 800e530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e532:	2305      	movs	r3, #5
 800e534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e536:	f107 0314 	add.w	r3, r7, #20
 800e53a:	4619      	mov	r1, r3
 800e53c:	4805      	ldr	r0, [pc, #20]	; (800e554 <HAL_SPI_MspInit+0x8c>)
 800e53e:	f7f3 fdff 	bl	8002140 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800e542:	bf00      	nop
 800e544:	3728      	adds	r7, #40	; 0x28
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	40013000 	.word	0x40013000
 800e550:	40023800 	.word	0x40023800
 800e554:	40020400 	.word	0x40020400

0800e558 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e558:	b480      	push	{r7}
 800e55a:	b087      	sub	sp, #28
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e568:	d10e      	bne.n	800e588 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e56a:	2300      	movs	r3, #0
 800e56c:	617b      	str	r3, [r7, #20]
 800e56e:	4b1d      	ldr	r3, [pc, #116]	; (800e5e4 <HAL_TIM_Base_MspInit+0x8c>)
 800e570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e572:	4a1c      	ldr	r2, [pc, #112]	; (800e5e4 <HAL_TIM_Base_MspInit+0x8c>)
 800e574:	f043 0301 	orr.w	r3, r3, #1
 800e578:	6413      	str	r3, [r2, #64]	; 0x40
 800e57a:	4b1a      	ldr	r3, [pc, #104]	; (800e5e4 <HAL_TIM_Base_MspInit+0x8c>)
 800e57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e57e:	f003 0301 	and.w	r3, r3, #1
 800e582:	617b      	str	r3, [r7, #20]
 800e584:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800e586:	e026      	b.n	800e5d6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4a16      	ldr	r2, [pc, #88]	; (800e5e8 <HAL_TIM_Base_MspInit+0x90>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d10e      	bne.n	800e5b0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e592:	2300      	movs	r3, #0
 800e594:	613b      	str	r3, [r7, #16]
 800e596:	4b13      	ldr	r3, [pc, #76]	; (800e5e4 <HAL_TIM_Base_MspInit+0x8c>)
 800e598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e59a:	4a12      	ldr	r2, [pc, #72]	; (800e5e4 <HAL_TIM_Base_MspInit+0x8c>)
 800e59c:	f043 0302 	orr.w	r3, r3, #2
 800e5a0:	6413      	str	r3, [r2, #64]	; 0x40
 800e5a2:	4b10      	ldr	r3, [pc, #64]	; (800e5e4 <HAL_TIM_Base_MspInit+0x8c>)
 800e5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5a6:	f003 0302 	and.w	r3, r3, #2
 800e5aa:	613b      	str	r3, [r7, #16]
 800e5ac:	693b      	ldr	r3, [r7, #16]
}
 800e5ae:	e012      	b.n	800e5d6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4a0d      	ldr	r2, [pc, #52]	; (800e5ec <HAL_TIM_Base_MspInit+0x94>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d10d      	bne.n	800e5d6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	60fb      	str	r3, [r7, #12]
 800e5be:	4b09      	ldr	r3, [pc, #36]	; (800e5e4 <HAL_TIM_Base_MspInit+0x8c>)
 800e5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5c2:	4a08      	ldr	r2, [pc, #32]	; (800e5e4 <HAL_TIM_Base_MspInit+0x8c>)
 800e5c4:	f043 0308 	orr.w	r3, r3, #8
 800e5c8:	6413      	str	r3, [r2, #64]	; 0x40
 800e5ca:	4b06      	ldr	r3, [pc, #24]	; (800e5e4 <HAL_TIM_Base_MspInit+0x8c>)
 800e5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ce:	f003 0308 	and.w	r3, r3, #8
 800e5d2:	60fb      	str	r3, [r7, #12]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
}
 800e5d6:	bf00      	nop
 800e5d8:	371c      	adds	r7, #28
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e0:	4770      	bx	lr
 800e5e2:	bf00      	nop
 800e5e4:	40023800 	.word	0x40023800
 800e5e8:	40000400 	.word	0x40000400
 800e5ec:	40000c00 	.word	0x40000c00

0800e5f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b08a      	sub	sp, #40	; 0x28
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5f8:	f107 0314 	add.w	r3, r7, #20
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	601a      	str	r2, [r3, #0]
 800e600:	605a      	str	r2, [r3, #4]
 800e602:	609a      	str	r2, [r3, #8]
 800e604:	60da      	str	r2, [r3, #12]
 800e606:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4a24      	ldr	r2, [pc, #144]	; (800e6a0 <HAL_TIM_MspPostInit+0xb0>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d11e      	bne.n	800e650 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e612:	2300      	movs	r3, #0
 800e614:	613b      	str	r3, [r7, #16]
 800e616:	4b23      	ldr	r3, [pc, #140]	; (800e6a4 <HAL_TIM_MspPostInit+0xb4>)
 800e618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e61a:	4a22      	ldr	r2, [pc, #136]	; (800e6a4 <HAL_TIM_MspPostInit+0xb4>)
 800e61c:	f043 0302 	orr.w	r3, r3, #2
 800e620:	6313      	str	r3, [r2, #48]	; 0x30
 800e622:	4b20      	ldr	r3, [pc, #128]	; (800e6a4 <HAL_TIM_MspPostInit+0xb4>)
 800e624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e626:	f003 0302 	and.w	r3, r3, #2
 800e62a:	613b      	str	r3, [r7, #16]
 800e62c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = P6_Pin|P7B1_Pin;
 800e62e:	2303      	movs	r3, #3
 800e630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e632:	2302      	movs	r3, #2
 800e634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e636:	2300      	movs	r3, #0
 800e638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e63a:	2300      	movs	r3, #0
 800e63c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e63e:	2302      	movs	r3, #2
 800e640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e642:	f107 0314 	add.w	r3, r7, #20
 800e646:	4619      	mov	r1, r3
 800e648:	4817      	ldr	r0, [pc, #92]	; (800e6a8 <HAL_TIM_MspPostInit+0xb8>)
 800e64a:	f7f3 fd79 	bl	8002140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800e64e:	e022      	b.n	800e696 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4a15      	ldr	r2, [pc, #84]	; (800e6ac <HAL_TIM_MspPostInit+0xbc>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d11d      	bne.n	800e696 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e65a:	2300      	movs	r3, #0
 800e65c:	60fb      	str	r3, [r7, #12]
 800e65e:	4b11      	ldr	r3, [pc, #68]	; (800e6a4 <HAL_TIM_MspPostInit+0xb4>)
 800e660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e662:	4a10      	ldr	r2, [pc, #64]	; (800e6a4 <HAL_TIM_MspPostInit+0xb4>)
 800e664:	f043 0301 	orr.w	r3, r3, #1
 800e668:	6313      	str	r3, [r2, #48]	; 0x30
 800e66a:	4b0e      	ldr	r3, [pc, #56]	; (800e6a4 <HAL_TIM_MspPostInit+0xb4>)
 800e66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e66e:	f003 0301 	and.w	r3, r3, #1
 800e672:	60fb      	str	r3, [r7, #12]
 800e674:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 800e676:	230a      	movs	r3, #10
 800e678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e67a:	2302      	movs	r3, #2
 800e67c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e67e:	2300      	movs	r3, #0
 800e680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e682:	2300      	movs	r3, #0
 800e684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800e686:	2302      	movs	r3, #2
 800e688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e68a:	f107 0314 	add.w	r3, r7, #20
 800e68e:	4619      	mov	r1, r3
 800e690:	4807      	ldr	r0, [pc, #28]	; (800e6b0 <HAL_TIM_MspPostInit+0xc0>)
 800e692:	f7f3 fd55 	bl	8002140 <HAL_GPIO_Init>
}
 800e696:	bf00      	nop
 800e698:	3728      	adds	r7, #40	; 0x28
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	40000400 	.word	0x40000400
 800e6a4:	40023800 	.word	0x40023800
 800e6a8:	40020400 	.word	0x40020400
 800e6ac:	40000c00 	.word	0x40000c00
 800e6b0:	40020000 	.word	0x40020000

0800e6b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b08a      	sub	sp, #40	; 0x28
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e6bc:	f107 0314 	add.w	r3, r7, #20
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	601a      	str	r2, [r3, #0]
 800e6c4:	605a      	str	r2, [r3, #4]
 800e6c6:	609a      	str	r2, [r3, #8]
 800e6c8:	60da      	str	r2, [r3, #12]
 800e6ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a19      	ldr	r2, [pc, #100]	; (800e738 <HAL_UART_MspInit+0x84>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d12c      	bne.n	800e730 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	613b      	str	r3, [r7, #16]
 800e6da:	4b18      	ldr	r3, [pc, #96]	; (800e73c <HAL_UART_MspInit+0x88>)
 800e6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6de:	4a17      	ldr	r2, [pc, #92]	; (800e73c <HAL_UART_MspInit+0x88>)
 800e6e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e6e4:	6413      	str	r3, [r2, #64]	; 0x40
 800e6e6:	4b15      	ldr	r3, [pc, #84]	; (800e73c <HAL_UART_MspInit+0x88>)
 800e6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e6ee:	613b      	str	r3, [r7, #16]
 800e6f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	60fb      	str	r3, [r7, #12]
 800e6f6:	4b11      	ldr	r3, [pc, #68]	; (800e73c <HAL_UART_MspInit+0x88>)
 800e6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6fa:	4a10      	ldr	r2, [pc, #64]	; (800e73c <HAL_UART_MspInit+0x88>)
 800e6fc:	f043 0302 	orr.w	r3, r3, #2
 800e700:	6313      	str	r3, [r2, #48]	; 0x30
 800e702:	4b0e      	ldr	r3, [pc, #56]	; (800e73c <HAL_UART_MspInit+0x88>)
 800e704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e706:	f003 0302 	and.w	r3, r3, #2
 800e70a:	60fb      	str	r3, [r7, #12]
 800e70c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 800e70e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800e712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e714:	2302      	movs	r3, #2
 800e716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e718:	2301      	movs	r3, #1
 800e71a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e71c:	2303      	movs	r3, #3
 800e71e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800e720:	2307      	movs	r3, #7
 800e722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e724:	f107 0314 	add.w	r3, r7, #20
 800e728:	4619      	mov	r1, r3
 800e72a:	4805      	ldr	r0, [pc, #20]	; (800e740 <HAL_UART_MspInit+0x8c>)
 800e72c:	f7f3 fd08 	bl	8002140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800e730:	bf00      	nop
 800e732:	3728      	adds	r7, #40	; 0x28
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	40004800 	.word	0x40004800
 800e73c:	40023800 	.word	0x40023800
 800e740:	40020400 	.word	0x40020400

0800e744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e744:	b480      	push	{r7}
 800e746:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800e748:	bf00      	nop
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr

0800e752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e752:	b480      	push	{r7}
 800e754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e756:	e7fe      	b.n	800e756 <HardFault_Handler+0x4>

0800e758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e758:	b480      	push	{r7}
 800e75a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e75c:	e7fe      	b.n	800e75c <MemManage_Handler+0x4>

0800e75e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e75e:	b480      	push	{r7}
 800e760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e762:	e7fe      	b.n	800e762 <BusFault_Handler+0x4>

0800e764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e764:	b480      	push	{r7}
 800e766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e768:	e7fe      	b.n	800e768 <UsageFault_Handler+0x4>

0800e76a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e76a:	b480      	push	{r7}
 800e76c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e76e:	bf00      	nop
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr

0800e778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e778:	b480      	push	{r7}
 800e77a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e77c:	bf00      	nop
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr

0800e786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e786:	b480      	push	{r7}
 800e788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e78a:	bf00      	nop
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr

0800e794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e798:	f7f2 ffe6 	bl	8001768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e79c:	bf00      	nop
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800e7a4:	4802      	ldr	r0, [pc, #8]	; (800e7b0 <SDIO_IRQHandler+0x10>)
 800e7a6:	f7f6 fb87 	bl	8004eb8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800e7aa:	bf00      	nop
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	20004e94 	.word	0x20004e94

0800e7b4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800e7b8:	4802      	ldr	r0, [pc, #8]	; (800e7c4 <DMA2_Stream3_IRQHandler+0x10>)
 800e7ba:	f7f3 fa59 	bl	8001c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800e7be:	bf00      	nop
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	20004ca0 	.word	0x20004ca0

0800e7c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800e7cc:	4802      	ldr	r0, [pc, #8]	; (800e7d8 <OTG_FS_IRQHandler+0x10>)
 800e7ce:	f7f4 f8fb 	bl	80029c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800e7d2:	bf00      	nop
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	2000624c 	.word	0x2000624c

0800e7dc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800e7e0:	4802      	ldr	r0, [pc, #8]	; (800e7ec <DMA2_Stream6_IRQHandler+0x10>)
 800e7e2:	f7f3 fa45 	bl	8001c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800e7e6:	bf00      	nop
 800e7e8:	bd80      	pop	{r7, pc}
 800e7ea:	bf00      	nop
 800e7ec:	20004e34 	.word	0x20004e34

0800e7f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800e7f8:	4b11      	ldr	r3, [pc, #68]	; (800e840 <_sbrk+0x50>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d102      	bne.n	800e806 <_sbrk+0x16>
		heap_end = &end;
 800e800:	4b0f      	ldr	r3, [pc, #60]	; (800e840 <_sbrk+0x50>)
 800e802:	4a10      	ldr	r2, [pc, #64]	; (800e844 <_sbrk+0x54>)
 800e804:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800e806:	4b0e      	ldr	r3, [pc, #56]	; (800e840 <_sbrk+0x50>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800e80c:	4b0c      	ldr	r3, [pc, #48]	; (800e840 <_sbrk+0x50>)
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	4413      	add	r3, r2
 800e814:	466a      	mov	r2, sp
 800e816:	4293      	cmp	r3, r2
 800e818:	d907      	bls.n	800e82a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800e81a:	f000 fd9f 	bl	800f35c <__errno>
 800e81e:	4602      	mov	r2, r0
 800e820:	230c      	movs	r3, #12
 800e822:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800e824:	f04f 33ff 	mov.w	r3, #4294967295
 800e828:	e006      	b.n	800e838 <_sbrk+0x48>
	}

	heap_end += incr;
 800e82a:	4b05      	ldr	r3, [pc, #20]	; (800e840 <_sbrk+0x50>)
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	4413      	add	r3, r2
 800e832:	4a03      	ldr	r2, [pc, #12]	; (800e840 <_sbrk+0x50>)
 800e834:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800e836:	68fb      	ldr	r3, [r7, #12]
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3710      	adds	r7, #16
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}
 800e840:	20000bb4 	.word	0x20000bb4
 800e844:	20006858 	.word	0x20006858

0800e848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e848:	b480      	push	{r7}
 800e84a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e84c:	4b16      	ldr	r3, [pc, #88]	; (800e8a8 <SystemInit+0x60>)
 800e84e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e852:	4a15      	ldr	r2, [pc, #84]	; (800e8a8 <SystemInit+0x60>)
 800e854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e85c:	4b13      	ldr	r3, [pc, #76]	; (800e8ac <SystemInit+0x64>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4a12      	ldr	r2, [pc, #72]	; (800e8ac <SystemInit+0x64>)
 800e862:	f043 0301 	orr.w	r3, r3, #1
 800e866:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800e868:	4b10      	ldr	r3, [pc, #64]	; (800e8ac <SystemInit+0x64>)
 800e86a:	2200      	movs	r2, #0
 800e86c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e86e:	4b0f      	ldr	r3, [pc, #60]	; (800e8ac <SystemInit+0x64>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	4a0e      	ldr	r2, [pc, #56]	; (800e8ac <SystemInit+0x64>)
 800e874:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800e878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e87c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800e87e:	4b0b      	ldr	r3, [pc, #44]	; (800e8ac <SystemInit+0x64>)
 800e880:	4a0b      	ldr	r2, [pc, #44]	; (800e8b0 <SystemInit+0x68>)
 800e882:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e884:	4b09      	ldr	r3, [pc, #36]	; (800e8ac <SystemInit+0x64>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a08      	ldr	r2, [pc, #32]	; (800e8ac <SystemInit+0x64>)
 800e88a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e88e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e890:	4b06      	ldr	r3, [pc, #24]	; (800e8ac <SystemInit+0x64>)
 800e892:	2200      	movs	r2, #0
 800e894:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800e896:	4b04      	ldr	r3, [pc, #16]	; (800e8a8 <SystemInit+0x60>)
 800e898:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e89c:	609a      	str	r2, [r3, #8]
#endif
}
 800e89e:	bf00      	nop
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr
 800e8a8:	e000ed00 	.word	0xe000ed00
 800e8ac:	40023800 	.word	0x40023800
 800e8b0:	24003010 	.word	0x24003010

0800e8b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	4912      	ldr	r1, [pc, #72]	; (800e904 <MX_USB_DEVICE_Init+0x50>)
 800e8bc:	4812      	ldr	r0, [pc, #72]	; (800e908 <MX_USB_DEVICE_Init+0x54>)
 800e8be:	f7fa feb9 	bl	8009634 <USBD_Init>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d001      	beq.n	800e8cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e8c8:	f7ff fa4c 	bl	800dd64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e8cc:	490f      	ldr	r1, [pc, #60]	; (800e90c <MX_USB_DEVICE_Init+0x58>)
 800e8ce:	480e      	ldr	r0, [pc, #56]	; (800e908 <MX_USB_DEVICE_Init+0x54>)
 800e8d0:	f7fa fedb 	bl	800968a <USBD_RegisterClass>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d001      	beq.n	800e8de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e8da:	f7ff fa43 	bl	800dd64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e8de:	490c      	ldr	r1, [pc, #48]	; (800e910 <MX_USB_DEVICE_Init+0x5c>)
 800e8e0:	4809      	ldr	r0, [pc, #36]	; (800e908 <MX_USB_DEVICE_Init+0x54>)
 800e8e2:	f7fa fe09 	bl	80094f8 <USBD_CDC_RegisterInterface>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d001      	beq.n	800e8f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e8ec:	f7ff fa3a 	bl	800dd64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e8f0:	4805      	ldr	r0, [pc, #20]	; (800e908 <MX_USB_DEVICE_Init+0x54>)
 800e8f2:	f7fa fee4 	bl	80096be <USBD_Start>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d001      	beq.n	800e900 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e8fc:	f7ff fa32 	bl	800dd64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e900:	bf00      	nop
 800e902:	bd80      	pop	{r7, pc}
 800e904:	2000012c 	.word	0x2000012c
 800e908:	20004fb0 	.word	0x20004fb0
 800e90c:	20000014 	.word	0x20000014
 800e910:	2000011c 	.word	0x2000011c

0800e914 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e918:	2200      	movs	r2, #0
 800e91a:	4905      	ldr	r1, [pc, #20]	; (800e930 <CDC_Init_FS+0x1c>)
 800e91c:	4805      	ldr	r0, [pc, #20]	; (800e934 <CDC_Init_FS+0x20>)
 800e91e:	f7fa fe02 	bl	8009526 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e922:	4905      	ldr	r1, [pc, #20]	; (800e938 <CDC_Init_FS+0x24>)
 800e924:	4803      	ldr	r0, [pc, #12]	; (800e934 <CDC_Init_FS+0x20>)
 800e926:	f7fa fe18 	bl	800955a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e92a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	20005a4c 	.word	0x20005a4c
 800e934:	20004fb0 	.word	0x20004fb0
 800e938:	2000524c 	.word	0x2000524c

0800e93c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e93c:	b480      	push	{r7}
 800e93e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e940:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e942:	4618      	mov	r0, r3
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr

0800e94c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b085      	sub	sp, #20
 800e950:	af00      	add	r7, sp, #0
 800e952:	4603      	mov	r3, r0
 800e954:	6039      	str	r1, [r7, #0]
 800e956:	71fb      	strb	r3, [r7, #7]
 800e958:	4613      	mov	r3, r2
 800e95a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800e95c:	f107 0308 	add.w	r3, r7, #8
 800e960:	2200      	movs	r2, #0
 800e962:	601a      	str	r2, [r3, #0]
 800e964:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800e968:	79fb      	ldrb	r3, [r7, #7]
 800e96a:	2b23      	cmp	r3, #35	; 0x23
 800e96c:	d87c      	bhi.n	800ea68 <CDC_Control_FS+0x11c>
 800e96e:	a201      	add	r2, pc, #4	; (adr r2, 800e974 <CDC_Control_FS+0x28>)
 800e970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e974:	0800ea69 	.word	0x0800ea69
 800e978:	0800ea69 	.word	0x0800ea69
 800e97c:	0800ea69 	.word	0x0800ea69
 800e980:	0800ea69 	.word	0x0800ea69
 800e984:	0800ea69 	.word	0x0800ea69
 800e988:	0800ea69 	.word	0x0800ea69
 800e98c:	0800ea69 	.word	0x0800ea69
 800e990:	0800ea69 	.word	0x0800ea69
 800e994:	0800ea69 	.word	0x0800ea69
 800e998:	0800ea69 	.word	0x0800ea69
 800e99c:	0800ea69 	.word	0x0800ea69
 800e9a0:	0800ea69 	.word	0x0800ea69
 800e9a4:	0800ea69 	.word	0x0800ea69
 800e9a8:	0800ea69 	.word	0x0800ea69
 800e9ac:	0800ea69 	.word	0x0800ea69
 800e9b0:	0800ea69 	.word	0x0800ea69
 800e9b4:	0800ea69 	.word	0x0800ea69
 800e9b8:	0800ea69 	.word	0x0800ea69
 800e9bc:	0800ea69 	.word	0x0800ea69
 800e9c0:	0800ea69 	.word	0x0800ea69
 800e9c4:	0800ea69 	.word	0x0800ea69
 800e9c8:	0800ea69 	.word	0x0800ea69
 800e9cc:	0800ea69 	.word	0x0800ea69
 800e9d0:	0800ea69 	.word	0x0800ea69
 800e9d4:	0800ea69 	.word	0x0800ea69
 800e9d8:	0800ea69 	.word	0x0800ea69
 800e9dc:	0800ea69 	.word	0x0800ea69
 800e9e0:	0800ea69 	.word	0x0800ea69
 800e9e4:	0800ea69 	.word	0x0800ea69
 800e9e8:	0800ea69 	.word	0x0800ea69
 800e9ec:	0800ea69 	.word	0x0800ea69
 800e9f0:	0800ea69 	.word	0x0800ea69
 800e9f4:	0800ea05 	.word	0x0800ea05
 800e9f8:	0800ea31 	.word	0x0800ea31
 800e9fc:	0800ea69 	.word	0x0800ea69
 800ea00:	0800ea69 	.word	0x0800ea69
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	tempbuf[0] = pbuf[0];
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	723b      	strb	r3, [r7, #8]
        	tempbuf[1] = pbuf[1];
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	785b      	ldrb	r3, [r3, #1]
 800ea0e:	727b      	strb	r3, [r7, #9]
        	tempbuf[2] = pbuf[2];
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	789b      	ldrb	r3, [r3, #2]
 800ea14:	72bb      	strb	r3, [r7, #10]
        	tempbuf[3] = pbuf[3];
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	78db      	ldrb	r3, [r3, #3]
 800ea1a:	72fb      	strb	r3, [r7, #11]
        	tempbuf[4] = pbuf[4];
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	791b      	ldrb	r3, [r3, #4]
 800ea20:	733b      	strb	r3, [r7, #12]
        	tempbuf[5] = pbuf[5];
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	795b      	ldrb	r3, [r3, #5]
 800ea26:	737b      	strb	r3, [r7, #13]
        	tempbuf[6] = pbuf[6];
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	799b      	ldrb	r3, [r3, #6]
 800ea2c:	73bb      	strb	r3, [r7, #14]
        	break;
 800ea2e:	e01c      	b.n	800ea6a <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
        	pbuf[0] = tempbuf[0];
 800ea30:	7a3a      	ldrb	r2, [r7, #8]
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	701a      	strb	r2, [r3, #0]
        	pbuf[1] = tempbuf[1];
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	3301      	adds	r3, #1
 800ea3a:	7a7a      	ldrb	r2, [r7, #9]
 800ea3c:	701a      	strb	r2, [r3, #0]
        	pbuf[2] = tempbuf[2];
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	3302      	adds	r3, #2
 800ea42:	7aba      	ldrb	r2, [r7, #10]
 800ea44:	701a      	strb	r2, [r3, #0]
        	pbuf[3] = tempbuf[3];
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	3303      	adds	r3, #3
 800ea4a:	7afa      	ldrb	r2, [r7, #11]
 800ea4c:	701a      	strb	r2, [r3, #0]
        	pbuf[4] = tempbuf[4];
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	3304      	adds	r3, #4
 800ea52:	7b3a      	ldrb	r2, [r7, #12]
 800ea54:	701a      	strb	r2, [r3, #0]
        	pbuf[5] = tempbuf[5];
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	3305      	adds	r3, #5
 800ea5a:	7b7a      	ldrb	r2, [r7, #13]
 800ea5c:	701a      	strb	r2, [r3, #0]
        	pbuf[6] = tempbuf[6];
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	3306      	adds	r3, #6
 800ea62:	7bba      	ldrb	r2, [r7, #14]
 800ea64:	701a      	strb	r2, [r3, #0]
        	break;
 800ea66:	e000      	b.n	800ea6a <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ea68:	bf00      	nop
  }

  return (USBD_OK);
 800ea6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3714      	adds	r7, #20
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ea82:	6879      	ldr	r1, [r7, #4]
 800ea84:	4805      	ldr	r0, [pc, #20]	; (800ea9c <CDC_Receive_FS+0x24>)
 800ea86:	f7fa fd68 	bl	800955a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ea8a:	4804      	ldr	r0, [pc, #16]	; (800ea9c <CDC_Receive_FS+0x24>)
 800ea8c:	f7fa fda8 	bl	80095e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ea90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3708      	adds	r7, #8
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	20004fb0 	.word	0x20004fb0

0800eaa0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800eaac:	2300      	movs	r3, #0
 800eaae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800eab0:	4b0d      	ldr	r3, [pc, #52]	; (800eae8 <CDC_Transmit_FS+0x48>)
 800eab2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800eab6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d001      	beq.n	800eac6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800eac2:	2301      	movs	r3, #1
 800eac4:	e00b      	b.n	800eade <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800eac6:	887b      	ldrh	r3, [r7, #2]
 800eac8:	461a      	mov	r2, r3
 800eaca:	6879      	ldr	r1, [r7, #4]
 800eacc:	4806      	ldr	r0, [pc, #24]	; (800eae8 <CDC_Transmit_FS+0x48>)
 800eace:	f7fa fd2a 	bl	8009526 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ead2:	4805      	ldr	r0, [pc, #20]	; (800eae8 <CDC_Transmit_FS+0x48>)
 800ead4:	f7fa fd55 	bl	8009582 <USBD_CDC_TransmitPacket>
 800ead8:	4603      	mov	r3, r0
 800eada:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3710      	adds	r7, #16
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
 800eae6:	bf00      	nop
 800eae8:	20004fb0 	.word	0x20004fb0

0800eaec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b08a      	sub	sp, #40	; 0x28
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eaf4:	f107 0314 	add.w	r3, r7, #20
 800eaf8:	2200      	movs	r2, #0
 800eafa:	601a      	str	r2, [r3, #0]
 800eafc:	605a      	str	r2, [r3, #4]
 800eafe:	609a      	str	r2, [r3, #8]
 800eb00:	60da      	str	r2, [r3, #12]
 800eb02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eb0c:	d13a      	bne.n	800eb84 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb0e:	2300      	movs	r3, #0
 800eb10:	613b      	str	r3, [r7, #16]
 800eb12:	4b1e      	ldr	r3, [pc, #120]	; (800eb8c <HAL_PCD_MspInit+0xa0>)
 800eb14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb16:	4a1d      	ldr	r2, [pc, #116]	; (800eb8c <HAL_PCD_MspInit+0xa0>)
 800eb18:	f043 0301 	orr.w	r3, r3, #1
 800eb1c:	6313      	str	r3, [r2, #48]	; 0x30
 800eb1e:	4b1b      	ldr	r3, [pc, #108]	; (800eb8c <HAL_PCD_MspInit+0xa0>)
 800eb20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb22:	f003 0301 	and.w	r3, r3, #1
 800eb26:	613b      	str	r3, [r7, #16]
 800eb28:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800eb2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800eb2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb30:	2302      	movs	r3, #2
 800eb32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb34:	2300      	movs	r3, #0
 800eb36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb38:	2303      	movs	r3, #3
 800eb3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800eb3c:	230a      	movs	r3, #10
 800eb3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb40:	f107 0314 	add.w	r3, r7, #20
 800eb44:	4619      	mov	r1, r3
 800eb46:	4812      	ldr	r0, [pc, #72]	; (800eb90 <HAL_PCD_MspInit+0xa4>)
 800eb48:	f7f3 fafa 	bl	8002140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eb4c:	4b0f      	ldr	r3, [pc, #60]	; (800eb8c <HAL_PCD_MspInit+0xa0>)
 800eb4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb50:	4a0e      	ldr	r2, [pc, #56]	; (800eb8c <HAL_PCD_MspInit+0xa0>)
 800eb52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb56:	6353      	str	r3, [r2, #52]	; 0x34
 800eb58:	2300      	movs	r3, #0
 800eb5a:	60fb      	str	r3, [r7, #12]
 800eb5c:	4b0b      	ldr	r3, [pc, #44]	; (800eb8c <HAL_PCD_MspInit+0xa0>)
 800eb5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb60:	4a0a      	ldr	r2, [pc, #40]	; (800eb8c <HAL_PCD_MspInit+0xa0>)
 800eb62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800eb66:	6453      	str	r3, [r2, #68]	; 0x44
 800eb68:	4b08      	ldr	r3, [pc, #32]	; (800eb8c <HAL_PCD_MspInit+0xa0>)
 800eb6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eb70:	60fb      	str	r3, [r7, #12]
 800eb72:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800eb74:	2200      	movs	r2, #0
 800eb76:	2100      	movs	r1, #0
 800eb78:	2043      	movs	r0, #67	; 0x43
 800eb7a:	f7f2 ff12 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eb7e:	2043      	movs	r0, #67	; 0x43
 800eb80:	f7f2 ff2b 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eb84:	bf00      	nop
 800eb86:	3728      	adds	r7, #40	; 0x28
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	40023800 	.word	0x40023800
 800eb90:	40020000 	.word	0x40020000

0800eb94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800eba8:	4619      	mov	r1, r3
 800ebaa:	4610      	mov	r0, r2
 800ebac:	f7fa fdd0 	bl	8009750 <USBD_LL_SetupStage>
}
 800ebb0:	bf00      	nop
 800ebb2:	3708      	adds	r7, #8
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b082      	sub	sp, #8
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ebca:	78fa      	ldrb	r2, [r7, #3]
 800ebcc:	6879      	ldr	r1, [r7, #4]
 800ebce:	4613      	mov	r3, r2
 800ebd0:	00db      	lsls	r3, r3, #3
 800ebd2:	1a9b      	subs	r3, r3, r2
 800ebd4:	009b      	lsls	r3, r3, #2
 800ebd6:	440b      	add	r3, r1
 800ebd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	78fb      	ldrb	r3, [r7, #3]
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	f7fa fe00 	bl	80097e6 <USBD_LL_DataOutStage>
}
 800ebe6:	bf00      	nop
 800ebe8:	3708      	adds	r7, #8
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}

0800ebee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b082      	sub	sp, #8
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
 800ebf6:	460b      	mov	r3, r1
 800ebf8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ec00:	78fa      	ldrb	r2, [r7, #3]
 800ec02:	6879      	ldr	r1, [r7, #4]
 800ec04:	4613      	mov	r3, r2
 800ec06:	00db      	lsls	r3, r3, #3
 800ec08:	1a9b      	subs	r3, r3, r2
 800ec0a:	009b      	lsls	r3, r3, #2
 800ec0c:	440b      	add	r3, r1
 800ec0e:	3348      	adds	r3, #72	; 0x48
 800ec10:	681a      	ldr	r2, [r3, #0]
 800ec12:	78fb      	ldrb	r3, [r7, #3]
 800ec14:	4619      	mov	r1, r3
 800ec16:	f7fa fe57 	bl	80098c8 <USBD_LL_DataInStage>
}
 800ec1a:	bf00      	nop
 800ec1c:	3708      	adds	r7, #8
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}

0800ec22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec22:	b580      	push	{r7, lr}
 800ec24:	b082      	sub	sp, #8
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7fa ff65 	bl	8009b00 <USBD_LL_SOF>
}
 800ec36:	bf00      	nop
 800ec38:	3708      	adds	r7, #8
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b084      	sub	sp, #16
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ec46:	2301      	movs	r3, #1
 800ec48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	68db      	ldr	r3, [r3, #12]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d102      	bne.n	800ec58 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ec52:	2300      	movs	r3, #0
 800ec54:	73fb      	strb	r3, [r7, #15]
 800ec56:	e008      	b.n	800ec6a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d102      	bne.n	800ec66 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ec60:	2301      	movs	r3, #1
 800ec62:	73fb      	strb	r3, [r7, #15]
 800ec64:	e001      	b.n	800ec6a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ec66:	f7ff f87d 	bl	800dd64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ec70:	7bfa      	ldrb	r2, [r7, #15]
 800ec72:	4611      	mov	r1, r2
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7fa ff0d 	bl	8009a94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7fa fec6 	bl	8009a12 <USBD_LL_Reset>
}
 800ec86:	bf00      	nop
 800ec88:	3710      	adds	r7, #16
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
	...

0800ec90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7fa ff08 	bl	8009ab4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	6812      	ldr	r2, [r2, #0]
 800ecb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ecb6:	f043 0301 	orr.w	r3, r3, #1
 800ecba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6a1b      	ldr	r3, [r3, #32]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d005      	beq.n	800ecd0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ecc4:	4b04      	ldr	r3, [pc, #16]	; (800ecd8 <HAL_PCD_SuspendCallback+0x48>)
 800ecc6:	691b      	ldr	r3, [r3, #16]
 800ecc8:	4a03      	ldr	r2, [pc, #12]	; (800ecd8 <HAL_PCD_SuspendCallback+0x48>)
 800ecca:	f043 0306 	orr.w	r3, r3, #6
 800ecce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ecd0:	bf00      	nop
 800ecd2:	3708      	adds	r7, #8
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	e000ed00 	.word	0xe000ed00

0800ecdc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b082      	sub	sp, #8
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fa fef7 	bl	8009ade <USBD_LL_Resume>
}
 800ecf0:	bf00      	nop
 800ecf2:	3708      	adds	r7, #8
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	460b      	mov	r3, r1
 800ed02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed0a:	78fa      	ldrb	r2, [r7, #3]
 800ed0c:	4611      	mov	r1, r2
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f7fa ff1d 	bl	8009b4e <USBD_LL_IsoOUTIncomplete>
}
 800ed14:	bf00      	nop
 800ed16:	3708      	adds	r7, #8
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	460b      	mov	r3, r1
 800ed26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed2e:	78fa      	ldrb	r2, [r7, #3]
 800ed30:	4611      	mov	r1, r2
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7fa fefe 	bl	8009b34 <USBD_LL_IsoINIncomplete>
}
 800ed38:	bf00      	nop
 800ed3a:	3708      	adds	r7, #8
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b082      	sub	sp, #8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7fa ff0a 	bl	8009b68 <USBD_LL_DevConnected>
}
 800ed54:	bf00      	nop
 800ed56:	3708      	adds	r7, #8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b082      	sub	sp, #8
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7fa ff07 	bl	8009b7e <USBD_LL_DevDisconnected>
}
 800ed70:	bf00      	nop
 800ed72:	3708      	adds	r7, #8
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}

0800ed78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b082      	sub	sp, #8
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d13c      	bne.n	800ee02 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ed88:	4a20      	ldr	r2, [pc, #128]	; (800ee0c <USBD_LL_Init+0x94>)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	4a1e      	ldr	r2, [pc, #120]	; (800ee0c <USBD_LL_Init+0x94>)
 800ed94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ed98:	4b1c      	ldr	r3, [pc, #112]	; (800ee0c <USBD_LL_Init+0x94>)
 800ed9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ed9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800eda0:	4b1a      	ldr	r3, [pc, #104]	; (800ee0c <USBD_LL_Init+0x94>)
 800eda2:	2204      	movs	r2, #4
 800eda4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eda6:	4b19      	ldr	r3, [pc, #100]	; (800ee0c <USBD_LL_Init+0x94>)
 800eda8:	2202      	movs	r2, #2
 800edaa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800edac:	4b17      	ldr	r3, [pc, #92]	; (800ee0c <USBD_LL_Init+0x94>)
 800edae:	2200      	movs	r2, #0
 800edb0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800edb2:	4b16      	ldr	r3, [pc, #88]	; (800ee0c <USBD_LL_Init+0x94>)
 800edb4:	2202      	movs	r2, #2
 800edb6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800edb8:	4b14      	ldr	r3, [pc, #80]	; (800ee0c <USBD_LL_Init+0x94>)
 800edba:	2200      	movs	r2, #0
 800edbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800edbe:	4b13      	ldr	r3, [pc, #76]	; (800ee0c <USBD_LL_Init+0x94>)
 800edc0:	2200      	movs	r2, #0
 800edc2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800edc4:	4b11      	ldr	r3, [pc, #68]	; (800ee0c <USBD_LL_Init+0x94>)
 800edc6:	2200      	movs	r2, #0
 800edc8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800edca:	4b10      	ldr	r3, [pc, #64]	; (800ee0c <USBD_LL_Init+0x94>)
 800edcc:	2200      	movs	r2, #0
 800edce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800edd0:	4b0e      	ldr	r3, [pc, #56]	; (800ee0c <USBD_LL_Init+0x94>)
 800edd2:	2200      	movs	r2, #0
 800edd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800edd6:	480d      	ldr	r0, [pc, #52]	; (800ee0c <USBD_LL_Init+0x94>)
 800edd8:	f7f3 fca6 	bl	8002728 <HAL_PCD_Init>
 800eddc:	4603      	mov	r3, r0
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d001      	beq.n	800ede6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ede2:	f7fe ffbf 	bl	800dd64 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ede6:	2180      	movs	r1, #128	; 0x80
 800ede8:	4808      	ldr	r0, [pc, #32]	; (800ee0c <USBD_LL_Init+0x94>)
 800edea:	f7f4 fe0a 	bl	8003a02 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800edee:	2240      	movs	r2, #64	; 0x40
 800edf0:	2100      	movs	r1, #0
 800edf2:	4806      	ldr	r0, [pc, #24]	; (800ee0c <USBD_LL_Init+0x94>)
 800edf4:	f7f4 fdbe 	bl	8003974 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800edf8:	2280      	movs	r2, #128	; 0x80
 800edfa:	2101      	movs	r1, #1
 800edfc:	4803      	ldr	r0, [pc, #12]	; (800ee0c <USBD_LL_Init+0x94>)
 800edfe:	f7f4 fdb9 	bl	8003974 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ee02:	2300      	movs	r3, #0
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3708      	adds	r7, #8
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}
 800ee0c:	2000624c 	.word	0x2000624c

0800ee10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7f3 fd9b 	bl	8002962 <HAL_PCD_Start>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800ee30:	7bfb      	ldrb	r3, [r7, #15]
 800ee32:	4618      	mov	r0, r3
 800ee34:	f000 f92e 	bl	800f094 <USBD_Get_USB_Status>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ee3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3710      	adds	r7, #16
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}

0800ee46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ee46:	b580      	push	{r7, lr}
 800ee48:	b084      	sub	sp, #16
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	6078      	str	r0, [r7, #4]
 800ee4e:	4608      	mov	r0, r1
 800ee50:	4611      	mov	r1, r2
 800ee52:	461a      	mov	r2, r3
 800ee54:	4603      	mov	r3, r0
 800ee56:	70fb      	strb	r3, [r7, #3]
 800ee58:	460b      	mov	r3, r1
 800ee5a:	70bb      	strb	r3, [r7, #2]
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee60:	2300      	movs	r3, #0
 800ee62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee64:	2300      	movs	r3, #0
 800ee66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800ee6e:	78bb      	ldrb	r3, [r7, #2]
 800ee70:	883a      	ldrh	r2, [r7, #0]
 800ee72:	78f9      	ldrb	r1, [r7, #3]
 800ee74:	f7f4 f970 	bl	8003158 <HAL_PCD_EP_Open>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee7c:	7bfb      	ldrb	r3, [r7, #15]
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f000 f908 	bl	800f094 <USBD_Get_USB_Status>
 800ee84:	4603      	mov	r3, r0
 800ee86:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ee88:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3710      	adds	r7, #16
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}

0800ee92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee92:	b580      	push	{r7, lr}
 800ee94:	b084      	sub	sp, #16
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
 800ee9a:	460b      	mov	r3, r1
 800ee9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eea2:	2300      	movs	r3, #0
 800eea4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800eeac:	78fa      	ldrb	r2, [r7, #3]
 800eeae:	4611      	mov	r1, r2
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7f4 f9b9 	bl	8003228 <HAL_PCD_EP_Close>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800eeba:	7bfb      	ldrb	r3, [r7, #15]
 800eebc:	4618      	mov	r0, r3
 800eebe:	f000 f8e9 	bl	800f094 <USBD_Get_USB_Status>
 800eec2:	4603      	mov	r3, r0
 800eec4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800eec6:	7bbb      	ldrb	r3, [r7, #14]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3710      	adds	r7, #16
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	460b      	mov	r3, r1
 800eeda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eedc:	2300      	movs	r3, #0
 800eede:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eee0:	2300      	movs	r3, #0
 800eee2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800eeea:	78fa      	ldrb	r2, [r7, #3]
 800eeec:	4611      	mov	r1, r2
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7f4 fa91 	bl	8003416 <HAL_PCD_EP_SetStall>
 800eef4:	4603      	mov	r3, r0
 800eef6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eef8:	7bfb      	ldrb	r3, [r7, #15]
 800eefa:	4618      	mov	r0, r3
 800eefc:	f000 f8ca 	bl	800f094 <USBD_Get_USB_Status>
 800ef00:	4603      	mov	r3, r0
 800ef02:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800ef04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3710      	adds	r7, #16
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}

0800ef0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b084      	sub	sp, #16
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
 800ef16:	460b      	mov	r3, r1
 800ef18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ef28:	78fa      	ldrb	r2, [r7, #3]
 800ef2a:	4611      	mov	r1, r2
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f7f4 fad6 	bl	80034de <HAL_PCD_EP_ClrStall>
 800ef32:	4603      	mov	r3, r0
 800ef34:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800ef36:	7bfb      	ldrb	r3, [r7, #15]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f000 f8ab 	bl	800f094 <USBD_Get_USB_Status>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800ef42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3710      	adds	r7, #16
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b085      	sub	sp, #20
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	460b      	mov	r3, r1
 800ef56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ef5e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800ef60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	da0b      	bge.n	800ef80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800ef68:	78fb      	ldrb	r3, [r7, #3]
 800ef6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef6e:	68f9      	ldr	r1, [r7, #12]
 800ef70:	4613      	mov	r3, r2
 800ef72:	00db      	lsls	r3, r3, #3
 800ef74:	1a9b      	subs	r3, r3, r2
 800ef76:	009b      	lsls	r3, r3, #2
 800ef78:	440b      	add	r3, r1
 800ef7a:	333e      	adds	r3, #62	; 0x3e
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	e00b      	b.n	800ef98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800ef80:	78fb      	ldrb	r3, [r7, #3]
 800ef82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef86:	68f9      	ldr	r1, [r7, #12]
 800ef88:	4613      	mov	r3, r2
 800ef8a:	00db      	lsls	r3, r3, #3
 800ef8c:	1a9b      	subs	r3, r3, r2
 800ef8e:	009b      	lsls	r3, r3, #2
 800ef90:	440b      	add	r3, r1
 800ef92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ef96:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3714      	adds	r7, #20
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa2:	4770      	bx	lr

0800efa4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	460b      	mov	r3, r1
 800efae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efb0:	2300      	movs	r3, #0
 800efb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efb4:	2300      	movs	r3, #0
 800efb6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800efbe:	78fa      	ldrb	r2, [r7, #3]
 800efc0:	4611      	mov	r1, r2
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7f4 f8a3 	bl	800310e <HAL_PCD_SetAddress>
 800efc8:	4603      	mov	r3, r0
 800efca:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800efcc:	7bfb      	ldrb	r3, [r7, #15]
 800efce:	4618      	mov	r0, r3
 800efd0:	f000 f860 	bl	800f094 <USBD_Get_USB_Status>
 800efd4:	4603      	mov	r3, r0
 800efd6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800efd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3710      	adds	r7, #16
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}

0800efe2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800efe2:	b580      	push	{r7, lr}
 800efe4:	b086      	sub	sp, #24
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	60f8      	str	r0, [r7, #12]
 800efea:	607a      	str	r2, [r7, #4]
 800efec:	461a      	mov	r2, r3
 800efee:	460b      	mov	r3, r1
 800eff0:	72fb      	strb	r3, [r7, #11]
 800eff2:	4613      	mov	r3, r2
 800eff4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eff6:	2300      	movs	r3, #0
 800eff8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800effa:	2300      	movs	r3, #0
 800effc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800f004:	893b      	ldrh	r3, [r7, #8]
 800f006:	7af9      	ldrb	r1, [r7, #11]
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	f7f4 f9ba 	bl	8003382 <HAL_PCD_EP_Transmit>
 800f00e:	4603      	mov	r3, r0
 800f010:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800f012:	7dfb      	ldrb	r3, [r7, #23]
 800f014:	4618      	mov	r0, r3
 800f016:	f000 f83d 	bl	800f094 <USBD_Get_USB_Status>
 800f01a:	4603      	mov	r3, r0
 800f01c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800f01e:	7dbb      	ldrb	r3, [r7, #22]
}
 800f020:	4618      	mov	r0, r3
 800f022:	3718      	adds	r7, #24
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b086      	sub	sp, #24
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	60f8      	str	r0, [r7, #12]
 800f030:	607a      	str	r2, [r7, #4]
 800f032:	461a      	mov	r2, r3
 800f034:	460b      	mov	r3, r1
 800f036:	72fb      	strb	r3, [r7, #11]
 800f038:	4613      	mov	r3, r2
 800f03a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f03c:	2300      	movs	r3, #0
 800f03e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f040:	2300      	movs	r3, #0
 800f042:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800f04a:	893b      	ldrh	r3, [r7, #8]
 800f04c:	7af9      	ldrb	r1, [r7, #11]
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	f7f4 f934 	bl	80032bc <HAL_PCD_EP_Receive>
 800f054:	4603      	mov	r3, r0
 800f056:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800f058:	7dfb      	ldrb	r3, [r7, #23]
 800f05a:	4618      	mov	r0, r3
 800f05c:	f000 f81a 	bl	800f094 <USBD_Get_USB_Status>
 800f060:	4603      	mov	r3, r0
 800f062:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800f064:	7dbb      	ldrb	r3, [r7, #22]
}
 800f066:	4618      	mov	r0, r3
 800f068:	3718      	adds	r7, #24
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}

0800f06e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f06e:	b580      	push	{r7, lr}
 800f070:	b082      	sub	sp, #8
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]
 800f076:	460b      	mov	r3, r1
 800f078:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f080:	78fa      	ldrb	r2, [r7, #3]
 800f082:	4611      	mov	r1, r2
 800f084:	4618      	mov	r0, r3
 800f086:	f7f4 f964 	bl	8003352 <HAL_PCD_EP_GetRxCount>
 800f08a:	4603      	mov	r3, r0
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3708      	adds	r7, #8
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f094:	b480      	push	{r7}
 800f096:	b085      	sub	sp, #20
 800f098:	af00      	add	r7, sp, #0
 800f09a:	4603      	mov	r3, r0
 800f09c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f0a2:	79fb      	ldrb	r3, [r7, #7]
 800f0a4:	2b03      	cmp	r3, #3
 800f0a6:	d817      	bhi.n	800f0d8 <USBD_Get_USB_Status+0x44>
 800f0a8:	a201      	add	r2, pc, #4	; (adr r2, 800f0b0 <USBD_Get_USB_Status+0x1c>)
 800f0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ae:	bf00      	nop
 800f0b0:	0800f0c1 	.word	0x0800f0c1
 800f0b4:	0800f0c7 	.word	0x0800f0c7
 800f0b8:	0800f0cd 	.word	0x0800f0cd
 800f0bc:	0800f0d3 	.word	0x0800f0d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	73fb      	strb	r3, [r7, #15]
    break;
 800f0c4:	e00b      	b.n	800f0de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f0c6:	2302      	movs	r3, #2
 800f0c8:	73fb      	strb	r3, [r7, #15]
    break;
 800f0ca:	e008      	b.n	800f0de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f0d0:	e005      	b.n	800f0de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f0d2:	2302      	movs	r3, #2
 800f0d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f0d6:	e002      	b.n	800f0de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f0d8:	2302      	movs	r3, #2
 800f0da:	73fb      	strb	r3, [r7, #15]
    break;
 800f0dc:	bf00      	nop
  }
  return usb_status;
 800f0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3714      	adds	r7, #20
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ea:	4770      	bx	lr

0800f0ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b083      	sub	sp, #12
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	6039      	str	r1, [r7, #0]
 800f0f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	2212      	movs	r2, #18
 800f0fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f0fe:	4b03      	ldr	r3, [pc, #12]	; (800f10c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f100:	4618      	mov	r0, r3
 800f102:	370c      	adds	r7, #12
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr
 800f10c:	20000148 	.word	0x20000148

0800f110 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f110:	b480      	push	{r7}
 800f112:	b083      	sub	sp, #12
 800f114:	af00      	add	r7, sp, #0
 800f116:	4603      	mov	r3, r0
 800f118:	6039      	str	r1, [r7, #0]
 800f11a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	2204      	movs	r2, #4
 800f120:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f122:	4b03      	ldr	r3, [pc, #12]	; (800f130 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f124:	4618      	mov	r0, r3
 800f126:	370c      	adds	r7, #12
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr
 800f130:	2000015c 	.word	0x2000015c

0800f134 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	4603      	mov	r3, r0
 800f13c:	6039      	str	r1, [r7, #0]
 800f13e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f140:	79fb      	ldrb	r3, [r7, #7]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d105      	bne.n	800f152 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f146:	683a      	ldr	r2, [r7, #0]
 800f148:	4907      	ldr	r1, [pc, #28]	; (800f168 <USBD_FS_ProductStrDescriptor+0x34>)
 800f14a:	4808      	ldr	r0, [pc, #32]	; (800f16c <USBD_FS_ProductStrDescriptor+0x38>)
 800f14c:	f7fb f9ee 	bl	800a52c <USBD_GetString>
 800f150:	e004      	b.n	800f15c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f152:	683a      	ldr	r2, [r7, #0]
 800f154:	4904      	ldr	r1, [pc, #16]	; (800f168 <USBD_FS_ProductStrDescriptor+0x34>)
 800f156:	4805      	ldr	r0, [pc, #20]	; (800f16c <USBD_FS_ProductStrDescriptor+0x38>)
 800f158:	f7fb f9e8 	bl	800a52c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f15c:	4b02      	ldr	r3, [pc, #8]	; (800f168 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3708      	adds	r7, #8
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}
 800f166:	bf00      	nop
 800f168:	20006654 	.word	0x20006654
 800f16c:	08013080 	.word	0x08013080

0800f170 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	4603      	mov	r3, r0
 800f178:	6039      	str	r1, [r7, #0]
 800f17a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f17c:	683a      	ldr	r2, [r7, #0]
 800f17e:	4904      	ldr	r1, [pc, #16]	; (800f190 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f180:	4804      	ldr	r0, [pc, #16]	; (800f194 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f182:	f7fb f9d3 	bl	800a52c <USBD_GetString>
  return USBD_StrDesc;
 800f186:	4b02      	ldr	r3, [pc, #8]	; (800f190 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3708      	adds	r7, #8
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}
 800f190:	20006654 	.word	0x20006654
 800f194:	0801308c 	.word	0x0801308c

0800f198 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	4603      	mov	r3, r0
 800f1a0:	6039      	str	r1, [r7, #0]
 800f1a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	221a      	movs	r2, #26
 800f1a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f1aa:	f000 f843 	bl	800f234 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800f1ae:	4b02      	ldr	r3, [pc, #8]	; (800f1b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3708      	adds	r7, #8
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}
 800f1b8:	20000160 	.word	0x20000160

0800f1bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b082      	sub	sp, #8
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	6039      	str	r1, [r7, #0]
 800f1c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f1c8:	79fb      	ldrb	r3, [r7, #7]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d105      	bne.n	800f1da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f1ce:	683a      	ldr	r2, [r7, #0]
 800f1d0:	4907      	ldr	r1, [pc, #28]	; (800f1f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f1d2:	4808      	ldr	r0, [pc, #32]	; (800f1f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f1d4:	f7fb f9aa 	bl	800a52c <USBD_GetString>
 800f1d8:	e004      	b.n	800f1e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f1da:	683a      	ldr	r2, [r7, #0]
 800f1dc:	4904      	ldr	r1, [pc, #16]	; (800f1f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f1de:	4805      	ldr	r0, [pc, #20]	; (800f1f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f1e0:	f7fb f9a4 	bl	800a52c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f1e4:	4b02      	ldr	r3, [pc, #8]	; (800f1f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3708      	adds	r7, #8
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	20006654 	.word	0x20006654
 800f1f4:	080130a0 	.word	0x080130a0

0800f1f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	4603      	mov	r3, r0
 800f200:	6039      	str	r1, [r7, #0]
 800f202:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f204:	79fb      	ldrb	r3, [r7, #7]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d105      	bne.n	800f216 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f20a:	683a      	ldr	r2, [r7, #0]
 800f20c:	4907      	ldr	r1, [pc, #28]	; (800f22c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f20e:	4808      	ldr	r0, [pc, #32]	; (800f230 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f210:	f7fb f98c 	bl	800a52c <USBD_GetString>
 800f214:	e004      	b.n	800f220 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f216:	683a      	ldr	r2, [r7, #0]
 800f218:	4904      	ldr	r1, [pc, #16]	; (800f22c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f21a:	4805      	ldr	r0, [pc, #20]	; (800f230 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f21c:	f7fb f986 	bl	800a52c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f220:	4b02      	ldr	r3, [pc, #8]	; (800f22c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f222:	4618      	mov	r0, r3
 800f224:	3708      	adds	r7, #8
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	20006654 	.word	0x20006654
 800f230:	080130ac 	.word	0x080130ac

0800f234 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f23a:	4b0f      	ldr	r3, [pc, #60]	; (800f278 <Get_SerialNum+0x44>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f240:	4b0e      	ldr	r3, [pc, #56]	; (800f27c <Get_SerialNum+0x48>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f246:	4b0e      	ldr	r3, [pc, #56]	; (800f280 <Get_SerialNum+0x4c>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f24c:	68fa      	ldr	r2, [r7, #12]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	4413      	add	r3, r2
 800f252:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d009      	beq.n	800f26e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f25a:	2208      	movs	r2, #8
 800f25c:	4909      	ldr	r1, [pc, #36]	; (800f284 <Get_SerialNum+0x50>)
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f000 f814 	bl	800f28c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f264:	2204      	movs	r2, #4
 800f266:	4908      	ldr	r1, [pc, #32]	; (800f288 <Get_SerialNum+0x54>)
 800f268:	68b8      	ldr	r0, [r7, #8]
 800f26a:	f000 f80f 	bl	800f28c <IntToUnicode>
  }
}
 800f26e:	bf00      	nop
 800f270:	3710      	adds	r7, #16
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	1fff7a10 	.word	0x1fff7a10
 800f27c:	1fff7a14 	.word	0x1fff7a14
 800f280:	1fff7a18 	.word	0x1fff7a18
 800f284:	20000162 	.word	0x20000162
 800f288:	20000172 	.word	0x20000172

0800f28c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b087      	sub	sp, #28
 800f290:	af00      	add	r7, sp, #0
 800f292:	60f8      	str	r0, [r7, #12]
 800f294:	60b9      	str	r1, [r7, #8]
 800f296:	4613      	mov	r3, r2
 800f298:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f29a:	2300      	movs	r3, #0
 800f29c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f29e:	2300      	movs	r3, #0
 800f2a0:	75fb      	strb	r3, [r7, #23]
 800f2a2:	e027      	b.n	800f2f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	0f1b      	lsrs	r3, r3, #28
 800f2a8:	2b09      	cmp	r3, #9
 800f2aa:	d80b      	bhi.n	800f2c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	0f1b      	lsrs	r3, r3, #28
 800f2b0:	b2da      	uxtb	r2, r3
 800f2b2:	7dfb      	ldrb	r3, [r7, #23]
 800f2b4:	005b      	lsls	r3, r3, #1
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	440b      	add	r3, r1
 800f2bc:	3230      	adds	r2, #48	; 0x30
 800f2be:	b2d2      	uxtb	r2, r2
 800f2c0:	701a      	strb	r2, [r3, #0]
 800f2c2:	e00a      	b.n	800f2da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	0f1b      	lsrs	r3, r3, #28
 800f2c8:	b2da      	uxtb	r2, r3
 800f2ca:	7dfb      	ldrb	r3, [r7, #23]
 800f2cc:	005b      	lsls	r3, r3, #1
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	440b      	add	r3, r1
 800f2d4:	3237      	adds	r2, #55	; 0x37
 800f2d6:	b2d2      	uxtb	r2, r2
 800f2d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	011b      	lsls	r3, r3, #4
 800f2de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f2e0:	7dfb      	ldrb	r3, [r7, #23]
 800f2e2:	005b      	lsls	r3, r3, #1
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	68ba      	ldr	r2, [r7, #8]
 800f2e8:	4413      	add	r3, r2
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f2ee:	7dfb      	ldrb	r3, [r7, #23]
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	75fb      	strb	r3, [r7, #23]
 800f2f4:	7dfa      	ldrb	r2, [r7, #23]
 800f2f6:	79fb      	ldrb	r3, [r7, #7]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d3d3      	bcc.n	800f2a4 <IntToUnicode+0x18>
  }
}
 800f2fc:	bf00      	nop
 800f2fe:	371c      	adds	r7, #28
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800f308:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f340 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f30c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f30e:	e003      	b.n	800f318 <LoopCopyDataInit>

0800f310 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f310:	4b0c      	ldr	r3, [pc, #48]	; (800f344 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f312:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f314:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f316:	3104      	adds	r1, #4

0800f318 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f318:	480b      	ldr	r0, [pc, #44]	; (800f348 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f31a:	4b0c      	ldr	r3, [pc, #48]	; (800f34c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f31c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f31e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f320:	d3f6      	bcc.n	800f310 <CopyDataInit>
  ldr  r2, =_sbss
 800f322:	4a0b      	ldr	r2, [pc, #44]	; (800f350 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f324:	e002      	b.n	800f32c <LoopFillZerobss>

0800f326 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f326:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f328:	f842 3b04 	str.w	r3, [r2], #4

0800f32c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f32c:	4b09      	ldr	r3, [pc, #36]	; (800f354 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f32e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f330:	d3f9      	bcc.n	800f326 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f332:	f7ff fa89 	bl	800e848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f336:	f000 f817 	bl	800f368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f33a:	f7fe f8bf 	bl	800d4bc <main>
  bx  lr    
 800f33e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800f340:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800f344:	08013438 	.word	0x08013438
  ldr  r0, =_sdata
 800f348:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f34c:	2000034c 	.word	0x2000034c
  ldr  r2, =_sbss
 800f350:	2000034c 	.word	0x2000034c
  ldr  r3, = _ebss
 800f354:	20006858 	.word	0x20006858

0800f358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f358:	e7fe      	b.n	800f358 <ADC_IRQHandler>
	...

0800f35c <__errno>:
 800f35c:	4b01      	ldr	r3, [pc, #4]	; (800f364 <__errno+0x8>)
 800f35e:	6818      	ldr	r0, [r3, #0]
 800f360:	4770      	bx	lr
 800f362:	bf00      	nop
 800f364:	2000017c 	.word	0x2000017c

0800f368 <__libc_init_array>:
 800f368:	b570      	push	{r4, r5, r6, lr}
 800f36a:	4e0d      	ldr	r6, [pc, #52]	; (800f3a0 <__libc_init_array+0x38>)
 800f36c:	4c0d      	ldr	r4, [pc, #52]	; (800f3a4 <__libc_init_array+0x3c>)
 800f36e:	1ba4      	subs	r4, r4, r6
 800f370:	10a4      	asrs	r4, r4, #2
 800f372:	2500      	movs	r5, #0
 800f374:	42a5      	cmp	r5, r4
 800f376:	d109      	bne.n	800f38c <__libc_init_array+0x24>
 800f378:	4e0b      	ldr	r6, [pc, #44]	; (800f3a8 <__libc_init_array+0x40>)
 800f37a:	4c0c      	ldr	r4, [pc, #48]	; (800f3ac <__libc_init_array+0x44>)
 800f37c:	f003 fd62 	bl	8012e44 <_init>
 800f380:	1ba4      	subs	r4, r4, r6
 800f382:	10a4      	asrs	r4, r4, #2
 800f384:	2500      	movs	r5, #0
 800f386:	42a5      	cmp	r5, r4
 800f388:	d105      	bne.n	800f396 <__libc_init_array+0x2e>
 800f38a:	bd70      	pop	{r4, r5, r6, pc}
 800f38c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f390:	4798      	blx	r3
 800f392:	3501      	adds	r5, #1
 800f394:	e7ee      	b.n	800f374 <__libc_init_array+0xc>
 800f396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f39a:	4798      	blx	r3
 800f39c:	3501      	adds	r5, #1
 800f39e:	e7f2      	b.n	800f386 <__libc_init_array+0x1e>
 800f3a0:	08013430 	.word	0x08013430
 800f3a4:	08013430 	.word	0x08013430
 800f3a8:	08013430 	.word	0x08013430
 800f3ac:	08013434 	.word	0x08013434

0800f3b0 <malloc>:
 800f3b0:	4b02      	ldr	r3, [pc, #8]	; (800f3bc <malloc+0xc>)
 800f3b2:	4601      	mov	r1, r0
 800f3b4:	6818      	ldr	r0, [r3, #0]
 800f3b6:	f000 b86d 	b.w	800f494 <_malloc_r>
 800f3ba:	bf00      	nop
 800f3bc:	2000017c 	.word	0x2000017c

0800f3c0 <free>:
 800f3c0:	4b02      	ldr	r3, [pc, #8]	; (800f3cc <free+0xc>)
 800f3c2:	4601      	mov	r1, r0
 800f3c4:	6818      	ldr	r0, [r3, #0]
 800f3c6:	f000 b817 	b.w	800f3f8 <_free_r>
 800f3ca:	bf00      	nop
 800f3cc:	2000017c 	.word	0x2000017c

0800f3d0 <memcpy>:
 800f3d0:	b510      	push	{r4, lr}
 800f3d2:	1e43      	subs	r3, r0, #1
 800f3d4:	440a      	add	r2, r1
 800f3d6:	4291      	cmp	r1, r2
 800f3d8:	d100      	bne.n	800f3dc <memcpy+0xc>
 800f3da:	bd10      	pop	{r4, pc}
 800f3dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3e4:	e7f7      	b.n	800f3d6 <memcpy+0x6>

0800f3e6 <memset>:
 800f3e6:	4402      	add	r2, r0
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d100      	bne.n	800f3f0 <memset+0xa>
 800f3ee:	4770      	bx	lr
 800f3f0:	f803 1b01 	strb.w	r1, [r3], #1
 800f3f4:	e7f9      	b.n	800f3ea <memset+0x4>
	...

0800f3f8 <_free_r>:
 800f3f8:	b538      	push	{r3, r4, r5, lr}
 800f3fa:	4605      	mov	r5, r0
 800f3fc:	2900      	cmp	r1, #0
 800f3fe:	d045      	beq.n	800f48c <_free_r+0x94>
 800f400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f404:	1f0c      	subs	r4, r1, #4
 800f406:	2b00      	cmp	r3, #0
 800f408:	bfb8      	it	lt
 800f40a:	18e4      	addlt	r4, r4, r3
 800f40c:	f002 ff64 	bl	80122d8 <__malloc_lock>
 800f410:	4a1f      	ldr	r2, [pc, #124]	; (800f490 <_free_r+0x98>)
 800f412:	6813      	ldr	r3, [r2, #0]
 800f414:	4610      	mov	r0, r2
 800f416:	b933      	cbnz	r3, 800f426 <_free_r+0x2e>
 800f418:	6063      	str	r3, [r4, #4]
 800f41a:	6014      	str	r4, [r2, #0]
 800f41c:	4628      	mov	r0, r5
 800f41e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f422:	f002 bf5a 	b.w	80122da <__malloc_unlock>
 800f426:	42a3      	cmp	r3, r4
 800f428:	d90c      	bls.n	800f444 <_free_r+0x4c>
 800f42a:	6821      	ldr	r1, [r4, #0]
 800f42c:	1862      	adds	r2, r4, r1
 800f42e:	4293      	cmp	r3, r2
 800f430:	bf04      	itt	eq
 800f432:	681a      	ldreq	r2, [r3, #0]
 800f434:	685b      	ldreq	r3, [r3, #4]
 800f436:	6063      	str	r3, [r4, #4]
 800f438:	bf04      	itt	eq
 800f43a:	1852      	addeq	r2, r2, r1
 800f43c:	6022      	streq	r2, [r4, #0]
 800f43e:	6004      	str	r4, [r0, #0]
 800f440:	e7ec      	b.n	800f41c <_free_r+0x24>
 800f442:	4613      	mov	r3, r2
 800f444:	685a      	ldr	r2, [r3, #4]
 800f446:	b10a      	cbz	r2, 800f44c <_free_r+0x54>
 800f448:	42a2      	cmp	r2, r4
 800f44a:	d9fa      	bls.n	800f442 <_free_r+0x4a>
 800f44c:	6819      	ldr	r1, [r3, #0]
 800f44e:	1858      	adds	r0, r3, r1
 800f450:	42a0      	cmp	r0, r4
 800f452:	d10b      	bne.n	800f46c <_free_r+0x74>
 800f454:	6820      	ldr	r0, [r4, #0]
 800f456:	4401      	add	r1, r0
 800f458:	1858      	adds	r0, r3, r1
 800f45a:	4282      	cmp	r2, r0
 800f45c:	6019      	str	r1, [r3, #0]
 800f45e:	d1dd      	bne.n	800f41c <_free_r+0x24>
 800f460:	6810      	ldr	r0, [r2, #0]
 800f462:	6852      	ldr	r2, [r2, #4]
 800f464:	605a      	str	r2, [r3, #4]
 800f466:	4401      	add	r1, r0
 800f468:	6019      	str	r1, [r3, #0]
 800f46a:	e7d7      	b.n	800f41c <_free_r+0x24>
 800f46c:	d902      	bls.n	800f474 <_free_r+0x7c>
 800f46e:	230c      	movs	r3, #12
 800f470:	602b      	str	r3, [r5, #0]
 800f472:	e7d3      	b.n	800f41c <_free_r+0x24>
 800f474:	6820      	ldr	r0, [r4, #0]
 800f476:	1821      	adds	r1, r4, r0
 800f478:	428a      	cmp	r2, r1
 800f47a:	bf04      	itt	eq
 800f47c:	6811      	ldreq	r1, [r2, #0]
 800f47e:	6852      	ldreq	r2, [r2, #4]
 800f480:	6062      	str	r2, [r4, #4]
 800f482:	bf04      	itt	eq
 800f484:	1809      	addeq	r1, r1, r0
 800f486:	6021      	streq	r1, [r4, #0]
 800f488:	605c      	str	r4, [r3, #4]
 800f48a:	e7c7      	b.n	800f41c <_free_r+0x24>
 800f48c:	bd38      	pop	{r3, r4, r5, pc}
 800f48e:	bf00      	nop
 800f490:	20000bb8 	.word	0x20000bb8

0800f494 <_malloc_r>:
 800f494:	b570      	push	{r4, r5, r6, lr}
 800f496:	1ccd      	adds	r5, r1, #3
 800f498:	f025 0503 	bic.w	r5, r5, #3
 800f49c:	3508      	adds	r5, #8
 800f49e:	2d0c      	cmp	r5, #12
 800f4a0:	bf38      	it	cc
 800f4a2:	250c      	movcc	r5, #12
 800f4a4:	2d00      	cmp	r5, #0
 800f4a6:	4606      	mov	r6, r0
 800f4a8:	db01      	blt.n	800f4ae <_malloc_r+0x1a>
 800f4aa:	42a9      	cmp	r1, r5
 800f4ac:	d903      	bls.n	800f4b6 <_malloc_r+0x22>
 800f4ae:	230c      	movs	r3, #12
 800f4b0:	6033      	str	r3, [r6, #0]
 800f4b2:	2000      	movs	r0, #0
 800f4b4:	bd70      	pop	{r4, r5, r6, pc}
 800f4b6:	f002 ff0f 	bl	80122d8 <__malloc_lock>
 800f4ba:	4a21      	ldr	r2, [pc, #132]	; (800f540 <_malloc_r+0xac>)
 800f4bc:	6814      	ldr	r4, [r2, #0]
 800f4be:	4621      	mov	r1, r4
 800f4c0:	b991      	cbnz	r1, 800f4e8 <_malloc_r+0x54>
 800f4c2:	4c20      	ldr	r4, [pc, #128]	; (800f544 <_malloc_r+0xb0>)
 800f4c4:	6823      	ldr	r3, [r4, #0]
 800f4c6:	b91b      	cbnz	r3, 800f4d0 <_malloc_r+0x3c>
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	f000 fe7b 	bl	80101c4 <_sbrk_r>
 800f4ce:	6020      	str	r0, [r4, #0]
 800f4d0:	4629      	mov	r1, r5
 800f4d2:	4630      	mov	r0, r6
 800f4d4:	f000 fe76 	bl	80101c4 <_sbrk_r>
 800f4d8:	1c43      	adds	r3, r0, #1
 800f4da:	d124      	bne.n	800f526 <_malloc_r+0x92>
 800f4dc:	230c      	movs	r3, #12
 800f4de:	6033      	str	r3, [r6, #0]
 800f4e0:	4630      	mov	r0, r6
 800f4e2:	f002 fefa 	bl	80122da <__malloc_unlock>
 800f4e6:	e7e4      	b.n	800f4b2 <_malloc_r+0x1e>
 800f4e8:	680b      	ldr	r3, [r1, #0]
 800f4ea:	1b5b      	subs	r3, r3, r5
 800f4ec:	d418      	bmi.n	800f520 <_malloc_r+0x8c>
 800f4ee:	2b0b      	cmp	r3, #11
 800f4f0:	d90f      	bls.n	800f512 <_malloc_r+0x7e>
 800f4f2:	600b      	str	r3, [r1, #0]
 800f4f4:	50cd      	str	r5, [r1, r3]
 800f4f6:	18cc      	adds	r4, r1, r3
 800f4f8:	4630      	mov	r0, r6
 800f4fa:	f002 feee 	bl	80122da <__malloc_unlock>
 800f4fe:	f104 000b 	add.w	r0, r4, #11
 800f502:	1d23      	adds	r3, r4, #4
 800f504:	f020 0007 	bic.w	r0, r0, #7
 800f508:	1ac3      	subs	r3, r0, r3
 800f50a:	d0d3      	beq.n	800f4b4 <_malloc_r+0x20>
 800f50c:	425a      	negs	r2, r3
 800f50e:	50e2      	str	r2, [r4, r3]
 800f510:	e7d0      	b.n	800f4b4 <_malloc_r+0x20>
 800f512:	428c      	cmp	r4, r1
 800f514:	684b      	ldr	r3, [r1, #4]
 800f516:	bf16      	itet	ne
 800f518:	6063      	strne	r3, [r4, #4]
 800f51a:	6013      	streq	r3, [r2, #0]
 800f51c:	460c      	movne	r4, r1
 800f51e:	e7eb      	b.n	800f4f8 <_malloc_r+0x64>
 800f520:	460c      	mov	r4, r1
 800f522:	6849      	ldr	r1, [r1, #4]
 800f524:	e7cc      	b.n	800f4c0 <_malloc_r+0x2c>
 800f526:	1cc4      	adds	r4, r0, #3
 800f528:	f024 0403 	bic.w	r4, r4, #3
 800f52c:	42a0      	cmp	r0, r4
 800f52e:	d005      	beq.n	800f53c <_malloc_r+0xa8>
 800f530:	1a21      	subs	r1, r4, r0
 800f532:	4630      	mov	r0, r6
 800f534:	f000 fe46 	bl	80101c4 <_sbrk_r>
 800f538:	3001      	adds	r0, #1
 800f53a:	d0cf      	beq.n	800f4dc <_malloc_r+0x48>
 800f53c:	6025      	str	r5, [r4, #0]
 800f53e:	e7db      	b.n	800f4f8 <_malloc_r+0x64>
 800f540:	20000bb8 	.word	0x20000bb8
 800f544:	20000bbc 	.word	0x20000bbc

0800f548 <__cvt>:
 800f548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f54c:	ec55 4b10 	vmov	r4, r5, d0
 800f550:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f552:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f556:	2d00      	cmp	r5, #0
 800f558:	460e      	mov	r6, r1
 800f55a:	4691      	mov	r9, r2
 800f55c:	4619      	mov	r1, r3
 800f55e:	bfb8      	it	lt
 800f560:	4622      	movlt	r2, r4
 800f562:	462b      	mov	r3, r5
 800f564:	f027 0720 	bic.w	r7, r7, #32
 800f568:	bfbb      	ittet	lt
 800f56a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f56e:	461d      	movlt	r5, r3
 800f570:	2300      	movge	r3, #0
 800f572:	232d      	movlt	r3, #45	; 0x2d
 800f574:	bfb8      	it	lt
 800f576:	4614      	movlt	r4, r2
 800f578:	2f46      	cmp	r7, #70	; 0x46
 800f57a:	700b      	strb	r3, [r1, #0]
 800f57c:	d004      	beq.n	800f588 <__cvt+0x40>
 800f57e:	2f45      	cmp	r7, #69	; 0x45
 800f580:	d100      	bne.n	800f584 <__cvt+0x3c>
 800f582:	3601      	adds	r6, #1
 800f584:	2102      	movs	r1, #2
 800f586:	e000      	b.n	800f58a <__cvt+0x42>
 800f588:	2103      	movs	r1, #3
 800f58a:	ab03      	add	r3, sp, #12
 800f58c:	9301      	str	r3, [sp, #4]
 800f58e:	ab02      	add	r3, sp, #8
 800f590:	9300      	str	r3, [sp, #0]
 800f592:	4632      	mov	r2, r6
 800f594:	4653      	mov	r3, sl
 800f596:	ec45 4b10 	vmov	d0, r4, r5
 800f59a:	f001 fd99 	bl	80110d0 <_dtoa_r>
 800f59e:	2f47      	cmp	r7, #71	; 0x47
 800f5a0:	4680      	mov	r8, r0
 800f5a2:	d102      	bne.n	800f5aa <__cvt+0x62>
 800f5a4:	f019 0f01 	tst.w	r9, #1
 800f5a8:	d026      	beq.n	800f5f8 <__cvt+0xb0>
 800f5aa:	2f46      	cmp	r7, #70	; 0x46
 800f5ac:	eb08 0906 	add.w	r9, r8, r6
 800f5b0:	d111      	bne.n	800f5d6 <__cvt+0x8e>
 800f5b2:	f898 3000 	ldrb.w	r3, [r8]
 800f5b6:	2b30      	cmp	r3, #48	; 0x30
 800f5b8:	d10a      	bne.n	800f5d0 <__cvt+0x88>
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	2300      	movs	r3, #0
 800f5be:	4620      	mov	r0, r4
 800f5c0:	4629      	mov	r1, r5
 800f5c2:	f7f1 fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5c6:	b918      	cbnz	r0, 800f5d0 <__cvt+0x88>
 800f5c8:	f1c6 0601 	rsb	r6, r6, #1
 800f5cc:	f8ca 6000 	str.w	r6, [sl]
 800f5d0:	f8da 3000 	ldr.w	r3, [sl]
 800f5d4:	4499      	add	r9, r3
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	2300      	movs	r3, #0
 800f5da:	4620      	mov	r0, r4
 800f5dc:	4629      	mov	r1, r5
 800f5de:	f7f1 fa73 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5e2:	b938      	cbnz	r0, 800f5f4 <__cvt+0xac>
 800f5e4:	2230      	movs	r2, #48	; 0x30
 800f5e6:	9b03      	ldr	r3, [sp, #12]
 800f5e8:	454b      	cmp	r3, r9
 800f5ea:	d205      	bcs.n	800f5f8 <__cvt+0xb0>
 800f5ec:	1c59      	adds	r1, r3, #1
 800f5ee:	9103      	str	r1, [sp, #12]
 800f5f0:	701a      	strb	r2, [r3, #0]
 800f5f2:	e7f8      	b.n	800f5e6 <__cvt+0x9e>
 800f5f4:	f8cd 900c 	str.w	r9, [sp, #12]
 800f5f8:	9b03      	ldr	r3, [sp, #12]
 800f5fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f5fc:	eba3 0308 	sub.w	r3, r3, r8
 800f600:	4640      	mov	r0, r8
 800f602:	6013      	str	r3, [r2, #0]
 800f604:	b004      	add	sp, #16
 800f606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f60a <__exponent>:
 800f60a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f60c:	2900      	cmp	r1, #0
 800f60e:	4604      	mov	r4, r0
 800f610:	bfba      	itte	lt
 800f612:	4249      	neglt	r1, r1
 800f614:	232d      	movlt	r3, #45	; 0x2d
 800f616:	232b      	movge	r3, #43	; 0x2b
 800f618:	2909      	cmp	r1, #9
 800f61a:	f804 2b02 	strb.w	r2, [r4], #2
 800f61e:	7043      	strb	r3, [r0, #1]
 800f620:	dd20      	ble.n	800f664 <__exponent+0x5a>
 800f622:	f10d 0307 	add.w	r3, sp, #7
 800f626:	461f      	mov	r7, r3
 800f628:	260a      	movs	r6, #10
 800f62a:	fb91 f5f6 	sdiv	r5, r1, r6
 800f62e:	fb06 1115 	mls	r1, r6, r5, r1
 800f632:	3130      	adds	r1, #48	; 0x30
 800f634:	2d09      	cmp	r5, #9
 800f636:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f63a:	f103 32ff 	add.w	r2, r3, #4294967295
 800f63e:	4629      	mov	r1, r5
 800f640:	dc09      	bgt.n	800f656 <__exponent+0x4c>
 800f642:	3130      	adds	r1, #48	; 0x30
 800f644:	3b02      	subs	r3, #2
 800f646:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f64a:	42bb      	cmp	r3, r7
 800f64c:	4622      	mov	r2, r4
 800f64e:	d304      	bcc.n	800f65a <__exponent+0x50>
 800f650:	1a10      	subs	r0, r2, r0
 800f652:	b003      	add	sp, #12
 800f654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f656:	4613      	mov	r3, r2
 800f658:	e7e7      	b.n	800f62a <__exponent+0x20>
 800f65a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f65e:	f804 2b01 	strb.w	r2, [r4], #1
 800f662:	e7f2      	b.n	800f64a <__exponent+0x40>
 800f664:	2330      	movs	r3, #48	; 0x30
 800f666:	4419      	add	r1, r3
 800f668:	7083      	strb	r3, [r0, #2]
 800f66a:	1d02      	adds	r2, r0, #4
 800f66c:	70c1      	strb	r1, [r0, #3]
 800f66e:	e7ef      	b.n	800f650 <__exponent+0x46>

0800f670 <_printf_float>:
 800f670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f674:	b08d      	sub	sp, #52	; 0x34
 800f676:	460c      	mov	r4, r1
 800f678:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f67c:	4616      	mov	r6, r2
 800f67e:	461f      	mov	r7, r3
 800f680:	4605      	mov	r5, r0
 800f682:	f002 fe09 	bl	8012298 <_localeconv_r>
 800f686:	6803      	ldr	r3, [r0, #0]
 800f688:	9304      	str	r3, [sp, #16]
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7f0 fda0 	bl	80001d0 <strlen>
 800f690:	2300      	movs	r3, #0
 800f692:	930a      	str	r3, [sp, #40]	; 0x28
 800f694:	f8d8 3000 	ldr.w	r3, [r8]
 800f698:	9005      	str	r0, [sp, #20]
 800f69a:	3307      	adds	r3, #7
 800f69c:	f023 0307 	bic.w	r3, r3, #7
 800f6a0:	f103 0208 	add.w	r2, r3, #8
 800f6a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f6a8:	f8d4 b000 	ldr.w	fp, [r4]
 800f6ac:	f8c8 2000 	str.w	r2, [r8]
 800f6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f6b8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f6bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f6c0:	9307      	str	r3, [sp, #28]
 800f6c2:	f8cd 8018 	str.w	r8, [sp, #24]
 800f6c6:	f04f 32ff 	mov.w	r2, #4294967295
 800f6ca:	4ba7      	ldr	r3, [pc, #668]	; (800f968 <_printf_float+0x2f8>)
 800f6cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6d0:	f7f1 fa2c 	bl	8000b2c <__aeabi_dcmpun>
 800f6d4:	bb70      	cbnz	r0, 800f734 <_printf_float+0xc4>
 800f6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f6da:	4ba3      	ldr	r3, [pc, #652]	; (800f968 <_printf_float+0x2f8>)
 800f6dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6e0:	f7f1 fa06 	bl	8000af0 <__aeabi_dcmple>
 800f6e4:	bb30      	cbnz	r0, 800f734 <_printf_float+0xc4>
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	4640      	mov	r0, r8
 800f6ec:	4649      	mov	r1, r9
 800f6ee:	f7f1 f9f5 	bl	8000adc <__aeabi_dcmplt>
 800f6f2:	b110      	cbz	r0, 800f6fa <_printf_float+0x8a>
 800f6f4:	232d      	movs	r3, #45	; 0x2d
 800f6f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6fa:	4a9c      	ldr	r2, [pc, #624]	; (800f96c <_printf_float+0x2fc>)
 800f6fc:	4b9c      	ldr	r3, [pc, #624]	; (800f970 <_printf_float+0x300>)
 800f6fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f702:	bf8c      	ite	hi
 800f704:	4690      	movhi	r8, r2
 800f706:	4698      	movls	r8, r3
 800f708:	2303      	movs	r3, #3
 800f70a:	f02b 0204 	bic.w	r2, fp, #4
 800f70e:	6123      	str	r3, [r4, #16]
 800f710:	6022      	str	r2, [r4, #0]
 800f712:	f04f 0900 	mov.w	r9, #0
 800f716:	9700      	str	r7, [sp, #0]
 800f718:	4633      	mov	r3, r6
 800f71a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f71c:	4621      	mov	r1, r4
 800f71e:	4628      	mov	r0, r5
 800f720:	f000 f9e6 	bl	800faf0 <_printf_common>
 800f724:	3001      	adds	r0, #1
 800f726:	f040 808d 	bne.w	800f844 <_printf_float+0x1d4>
 800f72a:	f04f 30ff 	mov.w	r0, #4294967295
 800f72e:	b00d      	add	sp, #52	; 0x34
 800f730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f734:	4642      	mov	r2, r8
 800f736:	464b      	mov	r3, r9
 800f738:	4640      	mov	r0, r8
 800f73a:	4649      	mov	r1, r9
 800f73c:	f7f1 f9f6 	bl	8000b2c <__aeabi_dcmpun>
 800f740:	b110      	cbz	r0, 800f748 <_printf_float+0xd8>
 800f742:	4a8c      	ldr	r2, [pc, #560]	; (800f974 <_printf_float+0x304>)
 800f744:	4b8c      	ldr	r3, [pc, #560]	; (800f978 <_printf_float+0x308>)
 800f746:	e7da      	b.n	800f6fe <_printf_float+0x8e>
 800f748:	6861      	ldr	r1, [r4, #4]
 800f74a:	1c4b      	adds	r3, r1, #1
 800f74c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800f750:	a80a      	add	r0, sp, #40	; 0x28
 800f752:	d13e      	bne.n	800f7d2 <_printf_float+0x162>
 800f754:	2306      	movs	r3, #6
 800f756:	6063      	str	r3, [r4, #4]
 800f758:	2300      	movs	r3, #0
 800f75a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f75e:	ab09      	add	r3, sp, #36	; 0x24
 800f760:	9300      	str	r3, [sp, #0]
 800f762:	ec49 8b10 	vmov	d0, r8, r9
 800f766:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f76a:	6022      	str	r2, [r4, #0]
 800f76c:	f8cd a004 	str.w	sl, [sp, #4]
 800f770:	6861      	ldr	r1, [r4, #4]
 800f772:	4628      	mov	r0, r5
 800f774:	f7ff fee8 	bl	800f548 <__cvt>
 800f778:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800f77c:	2b47      	cmp	r3, #71	; 0x47
 800f77e:	4680      	mov	r8, r0
 800f780:	d109      	bne.n	800f796 <_printf_float+0x126>
 800f782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f784:	1cd8      	adds	r0, r3, #3
 800f786:	db02      	blt.n	800f78e <_printf_float+0x11e>
 800f788:	6862      	ldr	r2, [r4, #4]
 800f78a:	4293      	cmp	r3, r2
 800f78c:	dd47      	ble.n	800f81e <_printf_float+0x1ae>
 800f78e:	f1aa 0a02 	sub.w	sl, sl, #2
 800f792:	fa5f fa8a 	uxtb.w	sl, sl
 800f796:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f79a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f79c:	d824      	bhi.n	800f7e8 <_printf_float+0x178>
 800f79e:	3901      	subs	r1, #1
 800f7a0:	4652      	mov	r2, sl
 800f7a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f7a6:	9109      	str	r1, [sp, #36]	; 0x24
 800f7a8:	f7ff ff2f 	bl	800f60a <__exponent>
 800f7ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7ae:	1813      	adds	r3, r2, r0
 800f7b0:	2a01      	cmp	r2, #1
 800f7b2:	4681      	mov	r9, r0
 800f7b4:	6123      	str	r3, [r4, #16]
 800f7b6:	dc02      	bgt.n	800f7be <_printf_float+0x14e>
 800f7b8:	6822      	ldr	r2, [r4, #0]
 800f7ba:	07d1      	lsls	r1, r2, #31
 800f7bc:	d501      	bpl.n	800f7c2 <_printf_float+0x152>
 800f7be:	3301      	adds	r3, #1
 800f7c0:	6123      	str	r3, [r4, #16]
 800f7c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d0a5      	beq.n	800f716 <_printf_float+0xa6>
 800f7ca:	232d      	movs	r3, #45	; 0x2d
 800f7cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7d0:	e7a1      	b.n	800f716 <_printf_float+0xa6>
 800f7d2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f7d6:	f000 8177 	beq.w	800fac8 <_printf_float+0x458>
 800f7da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f7de:	d1bb      	bne.n	800f758 <_printf_float+0xe8>
 800f7e0:	2900      	cmp	r1, #0
 800f7e2:	d1b9      	bne.n	800f758 <_printf_float+0xe8>
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	e7b6      	b.n	800f756 <_printf_float+0xe6>
 800f7e8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f7ec:	d119      	bne.n	800f822 <_printf_float+0x1b2>
 800f7ee:	2900      	cmp	r1, #0
 800f7f0:	6863      	ldr	r3, [r4, #4]
 800f7f2:	dd0c      	ble.n	800f80e <_printf_float+0x19e>
 800f7f4:	6121      	str	r1, [r4, #16]
 800f7f6:	b913      	cbnz	r3, 800f7fe <_printf_float+0x18e>
 800f7f8:	6822      	ldr	r2, [r4, #0]
 800f7fa:	07d2      	lsls	r2, r2, #31
 800f7fc:	d502      	bpl.n	800f804 <_printf_float+0x194>
 800f7fe:	3301      	adds	r3, #1
 800f800:	440b      	add	r3, r1
 800f802:	6123      	str	r3, [r4, #16]
 800f804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f806:	65a3      	str	r3, [r4, #88]	; 0x58
 800f808:	f04f 0900 	mov.w	r9, #0
 800f80c:	e7d9      	b.n	800f7c2 <_printf_float+0x152>
 800f80e:	b913      	cbnz	r3, 800f816 <_printf_float+0x1a6>
 800f810:	6822      	ldr	r2, [r4, #0]
 800f812:	07d0      	lsls	r0, r2, #31
 800f814:	d501      	bpl.n	800f81a <_printf_float+0x1aa>
 800f816:	3302      	adds	r3, #2
 800f818:	e7f3      	b.n	800f802 <_printf_float+0x192>
 800f81a:	2301      	movs	r3, #1
 800f81c:	e7f1      	b.n	800f802 <_printf_float+0x192>
 800f81e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f822:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f826:	4293      	cmp	r3, r2
 800f828:	db05      	blt.n	800f836 <_printf_float+0x1c6>
 800f82a:	6822      	ldr	r2, [r4, #0]
 800f82c:	6123      	str	r3, [r4, #16]
 800f82e:	07d1      	lsls	r1, r2, #31
 800f830:	d5e8      	bpl.n	800f804 <_printf_float+0x194>
 800f832:	3301      	adds	r3, #1
 800f834:	e7e5      	b.n	800f802 <_printf_float+0x192>
 800f836:	2b00      	cmp	r3, #0
 800f838:	bfd4      	ite	le
 800f83a:	f1c3 0302 	rsble	r3, r3, #2
 800f83e:	2301      	movgt	r3, #1
 800f840:	4413      	add	r3, r2
 800f842:	e7de      	b.n	800f802 <_printf_float+0x192>
 800f844:	6823      	ldr	r3, [r4, #0]
 800f846:	055a      	lsls	r2, r3, #21
 800f848:	d407      	bmi.n	800f85a <_printf_float+0x1ea>
 800f84a:	6923      	ldr	r3, [r4, #16]
 800f84c:	4642      	mov	r2, r8
 800f84e:	4631      	mov	r1, r6
 800f850:	4628      	mov	r0, r5
 800f852:	47b8      	blx	r7
 800f854:	3001      	adds	r0, #1
 800f856:	d12b      	bne.n	800f8b0 <_printf_float+0x240>
 800f858:	e767      	b.n	800f72a <_printf_float+0xba>
 800f85a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f85e:	f240 80dc 	bls.w	800fa1a <_printf_float+0x3aa>
 800f862:	2200      	movs	r2, #0
 800f864:	2300      	movs	r3, #0
 800f866:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f86a:	f7f1 f92d 	bl	8000ac8 <__aeabi_dcmpeq>
 800f86e:	2800      	cmp	r0, #0
 800f870:	d033      	beq.n	800f8da <_printf_float+0x26a>
 800f872:	2301      	movs	r3, #1
 800f874:	4a41      	ldr	r2, [pc, #260]	; (800f97c <_printf_float+0x30c>)
 800f876:	4631      	mov	r1, r6
 800f878:	4628      	mov	r0, r5
 800f87a:	47b8      	blx	r7
 800f87c:	3001      	adds	r0, #1
 800f87e:	f43f af54 	beq.w	800f72a <_printf_float+0xba>
 800f882:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f886:	429a      	cmp	r2, r3
 800f888:	db02      	blt.n	800f890 <_printf_float+0x220>
 800f88a:	6823      	ldr	r3, [r4, #0]
 800f88c:	07d8      	lsls	r0, r3, #31
 800f88e:	d50f      	bpl.n	800f8b0 <_printf_float+0x240>
 800f890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f894:	4631      	mov	r1, r6
 800f896:	4628      	mov	r0, r5
 800f898:	47b8      	blx	r7
 800f89a:	3001      	adds	r0, #1
 800f89c:	f43f af45 	beq.w	800f72a <_printf_float+0xba>
 800f8a0:	f04f 0800 	mov.w	r8, #0
 800f8a4:	f104 091a 	add.w	r9, r4, #26
 800f8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8aa:	3b01      	subs	r3, #1
 800f8ac:	4543      	cmp	r3, r8
 800f8ae:	dc09      	bgt.n	800f8c4 <_printf_float+0x254>
 800f8b0:	6823      	ldr	r3, [r4, #0]
 800f8b2:	079b      	lsls	r3, r3, #30
 800f8b4:	f100 8103 	bmi.w	800fabe <_printf_float+0x44e>
 800f8b8:	68e0      	ldr	r0, [r4, #12]
 800f8ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8bc:	4298      	cmp	r0, r3
 800f8be:	bfb8      	it	lt
 800f8c0:	4618      	movlt	r0, r3
 800f8c2:	e734      	b.n	800f72e <_printf_float+0xbe>
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	464a      	mov	r2, r9
 800f8c8:	4631      	mov	r1, r6
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	47b8      	blx	r7
 800f8ce:	3001      	adds	r0, #1
 800f8d0:	f43f af2b 	beq.w	800f72a <_printf_float+0xba>
 800f8d4:	f108 0801 	add.w	r8, r8, #1
 800f8d8:	e7e6      	b.n	800f8a8 <_printf_float+0x238>
 800f8da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	dc2b      	bgt.n	800f938 <_printf_float+0x2c8>
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	4a26      	ldr	r2, [pc, #152]	; (800f97c <_printf_float+0x30c>)
 800f8e4:	4631      	mov	r1, r6
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	47b8      	blx	r7
 800f8ea:	3001      	adds	r0, #1
 800f8ec:	f43f af1d 	beq.w	800f72a <_printf_float+0xba>
 800f8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8f2:	b923      	cbnz	r3, 800f8fe <_printf_float+0x28e>
 800f8f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8f6:	b913      	cbnz	r3, 800f8fe <_printf_float+0x28e>
 800f8f8:	6823      	ldr	r3, [r4, #0]
 800f8fa:	07d9      	lsls	r1, r3, #31
 800f8fc:	d5d8      	bpl.n	800f8b0 <_printf_float+0x240>
 800f8fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f902:	4631      	mov	r1, r6
 800f904:	4628      	mov	r0, r5
 800f906:	47b8      	blx	r7
 800f908:	3001      	adds	r0, #1
 800f90a:	f43f af0e 	beq.w	800f72a <_printf_float+0xba>
 800f90e:	f04f 0900 	mov.w	r9, #0
 800f912:	f104 0a1a 	add.w	sl, r4, #26
 800f916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f918:	425b      	negs	r3, r3
 800f91a:	454b      	cmp	r3, r9
 800f91c:	dc01      	bgt.n	800f922 <_printf_float+0x2b2>
 800f91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f920:	e794      	b.n	800f84c <_printf_float+0x1dc>
 800f922:	2301      	movs	r3, #1
 800f924:	4652      	mov	r2, sl
 800f926:	4631      	mov	r1, r6
 800f928:	4628      	mov	r0, r5
 800f92a:	47b8      	blx	r7
 800f92c:	3001      	adds	r0, #1
 800f92e:	f43f aefc 	beq.w	800f72a <_printf_float+0xba>
 800f932:	f109 0901 	add.w	r9, r9, #1
 800f936:	e7ee      	b.n	800f916 <_printf_float+0x2a6>
 800f938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f93a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f93c:	429a      	cmp	r2, r3
 800f93e:	bfa8      	it	ge
 800f940:	461a      	movge	r2, r3
 800f942:	2a00      	cmp	r2, #0
 800f944:	4691      	mov	r9, r2
 800f946:	dd07      	ble.n	800f958 <_printf_float+0x2e8>
 800f948:	4613      	mov	r3, r2
 800f94a:	4631      	mov	r1, r6
 800f94c:	4642      	mov	r2, r8
 800f94e:	4628      	mov	r0, r5
 800f950:	47b8      	blx	r7
 800f952:	3001      	adds	r0, #1
 800f954:	f43f aee9 	beq.w	800f72a <_printf_float+0xba>
 800f958:	f104 031a 	add.w	r3, r4, #26
 800f95c:	f04f 0b00 	mov.w	fp, #0
 800f960:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f964:	9306      	str	r3, [sp, #24]
 800f966:	e015      	b.n	800f994 <_printf_float+0x324>
 800f968:	7fefffff 	.word	0x7fefffff
 800f96c:	08013174 	.word	0x08013174
 800f970:	08013170 	.word	0x08013170
 800f974:	0801317c 	.word	0x0801317c
 800f978:	08013178 	.word	0x08013178
 800f97c:	08013180 	.word	0x08013180
 800f980:	2301      	movs	r3, #1
 800f982:	9a06      	ldr	r2, [sp, #24]
 800f984:	4631      	mov	r1, r6
 800f986:	4628      	mov	r0, r5
 800f988:	47b8      	blx	r7
 800f98a:	3001      	adds	r0, #1
 800f98c:	f43f aecd 	beq.w	800f72a <_printf_float+0xba>
 800f990:	f10b 0b01 	add.w	fp, fp, #1
 800f994:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f998:	ebaa 0309 	sub.w	r3, sl, r9
 800f99c:	455b      	cmp	r3, fp
 800f99e:	dcef      	bgt.n	800f980 <_printf_float+0x310>
 800f9a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	44d0      	add	r8, sl
 800f9a8:	db15      	blt.n	800f9d6 <_printf_float+0x366>
 800f9aa:	6823      	ldr	r3, [r4, #0]
 800f9ac:	07da      	lsls	r2, r3, #31
 800f9ae:	d412      	bmi.n	800f9d6 <_printf_float+0x366>
 800f9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f9b4:	eba3 020a 	sub.w	r2, r3, sl
 800f9b8:	eba3 0a01 	sub.w	sl, r3, r1
 800f9bc:	4592      	cmp	sl, r2
 800f9be:	bfa8      	it	ge
 800f9c0:	4692      	movge	sl, r2
 800f9c2:	f1ba 0f00 	cmp.w	sl, #0
 800f9c6:	dc0e      	bgt.n	800f9e6 <_printf_float+0x376>
 800f9c8:	f04f 0800 	mov.w	r8, #0
 800f9cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f9d0:	f104 091a 	add.w	r9, r4, #26
 800f9d4:	e019      	b.n	800fa0a <_printf_float+0x39a>
 800f9d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f9da:	4631      	mov	r1, r6
 800f9dc:	4628      	mov	r0, r5
 800f9de:	47b8      	blx	r7
 800f9e0:	3001      	adds	r0, #1
 800f9e2:	d1e5      	bne.n	800f9b0 <_printf_float+0x340>
 800f9e4:	e6a1      	b.n	800f72a <_printf_float+0xba>
 800f9e6:	4653      	mov	r3, sl
 800f9e8:	4642      	mov	r2, r8
 800f9ea:	4631      	mov	r1, r6
 800f9ec:	4628      	mov	r0, r5
 800f9ee:	47b8      	blx	r7
 800f9f0:	3001      	adds	r0, #1
 800f9f2:	d1e9      	bne.n	800f9c8 <_printf_float+0x358>
 800f9f4:	e699      	b.n	800f72a <_printf_float+0xba>
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	464a      	mov	r2, r9
 800f9fa:	4631      	mov	r1, r6
 800f9fc:	4628      	mov	r0, r5
 800f9fe:	47b8      	blx	r7
 800fa00:	3001      	adds	r0, #1
 800fa02:	f43f ae92 	beq.w	800f72a <_printf_float+0xba>
 800fa06:	f108 0801 	add.w	r8, r8, #1
 800fa0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fa0e:	1a9b      	subs	r3, r3, r2
 800fa10:	eba3 030a 	sub.w	r3, r3, sl
 800fa14:	4543      	cmp	r3, r8
 800fa16:	dcee      	bgt.n	800f9f6 <_printf_float+0x386>
 800fa18:	e74a      	b.n	800f8b0 <_printf_float+0x240>
 800fa1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa1c:	2a01      	cmp	r2, #1
 800fa1e:	dc01      	bgt.n	800fa24 <_printf_float+0x3b4>
 800fa20:	07db      	lsls	r3, r3, #31
 800fa22:	d53a      	bpl.n	800fa9a <_printf_float+0x42a>
 800fa24:	2301      	movs	r3, #1
 800fa26:	4642      	mov	r2, r8
 800fa28:	4631      	mov	r1, r6
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	47b8      	blx	r7
 800fa2e:	3001      	adds	r0, #1
 800fa30:	f43f ae7b 	beq.w	800f72a <_printf_float+0xba>
 800fa34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa38:	4631      	mov	r1, r6
 800fa3a:	4628      	mov	r0, r5
 800fa3c:	47b8      	blx	r7
 800fa3e:	3001      	adds	r0, #1
 800fa40:	f108 0801 	add.w	r8, r8, #1
 800fa44:	f43f ae71 	beq.w	800f72a <_printf_float+0xba>
 800fa48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	f103 3aff 	add.w	sl, r3, #4294967295
 800fa50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fa54:	2300      	movs	r3, #0
 800fa56:	f7f1 f837 	bl	8000ac8 <__aeabi_dcmpeq>
 800fa5a:	b9c8      	cbnz	r0, 800fa90 <_printf_float+0x420>
 800fa5c:	4653      	mov	r3, sl
 800fa5e:	4642      	mov	r2, r8
 800fa60:	4631      	mov	r1, r6
 800fa62:	4628      	mov	r0, r5
 800fa64:	47b8      	blx	r7
 800fa66:	3001      	adds	r0, #1
 800fa68:	d10e      	bne.n	800fa88 <_printf_float+0x418>
 800fa6a:	e65e      	b.n	800f72a <_printf_float+0xba>
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	4652      	mov	r2, sl
 800fa70:	4631      	mov	r1, r6
 800fa72:	4628      	mov	r0, r5
 800fa74:	47b8      	blx	r7
 800fa76:	3001      	adds	r0, #1
 800fa78:	f43f ae57 	beq.w	800f72a <_printf_float+0xba>
 800fa7c:	f108 0801 	add.w	r8, r8, #1
 800fa80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa82:	3b01      	subs	r3, #1
 800fa84:	4543      	cmp	r3, r8
 800fa86:	dcf1      	bgt.n	800fa6c <_printf_float+0x3fc>
 800fa88:	464b      	mov	r3, r9
 800fa8a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fa8e:	e6de      	b.n	800f84e <_printf_float+0x1de>
 800fa90:	f04f 0800 	mov.w	r8, #0
 800fa94:	f104 0a1a 	add.w	sl, r4, #26
 800fa98:	e7f2      	b.n	800fa80 <_printf_float+0x410>
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e7df      	b.n	800fa5e <_printf_float+0x3ee>
 800fa9e:	2301      	movs	r3, #1
 800faa0:	464a      	mov	r2, r9
 800faa2:	4631      	mov	r1, r6
 800faa4:	4628      	mov	r0, r5
 800faa6:	47b8      	blx	r7
 800faa8:	3001      	adds	r0, #1
 800faaa:	f43f ae3e 	beq.w	800f72a <_printf_float+0xba>
 800faae:	f108 0801 	add.w	r8, r8, #1
 800fab2:	68e3      	ldr	r3, [r4, #12]
 800fab4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fab6:	1a9b      	subs	r3, r3, r2
 800fab8:	4543      	cmp	r3, r8
 800faba:	dcf0      	bgt.n	800fa9e <_printf_float+0x42e>
 800fabc:	e6fc      	b.n	800f8b8 <_printf_float+0x248>
 800fabe:	f04f 0800 	mov.w	r8, #0
 800fac2:	f104 0919 	add.w	r9, r4, #25
 800fac6:	e7f4      	b.n	800fab2 <_printf_float+0x442>
 800fac8:	2900      	cmp	r1, #0
 800faca:	f43f ae8b 	beq.w	800f7e4 <_printf_float+0x174>
 800face:	2300      	movs	r3, #0
 800fad0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800fad4:	ab09      	add	r3, sp, #36	; 0x24
 800fad6:	9300      	str	r3, [sp, #0]
 800fad8:	ec49 8b10 	vmov	d0, r8, r9
 800fadc:	6022      	str	r2, [r4, #0]
 800fade:	f8cd a004 	str.w	sl, [sp, #4]
 800fae2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fae6:	4628      	mov	r0, r5
 800fae8:	f7ff fd2e 	bl	800f548 <__cvt>
 800faec:	4680      	mov	r8, r0
 800faee:	e648      	b.n	800f782 <_printf_float+0x112>

0800faf0 <_printf_common>:
 800faf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800faf4:	4691      	mov	r9, r2
 800faf6:	461f      	mov	r7, r3
 800faf8:	688a      	ldr	r2, [r1, #8]
 800fafa:	690b      	ldr	r3, [r1, #16]
 800fafc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb00:	4293      	cmp	r3, r2
 800fb02:	bfb8      	it	lt
 800fb04:	4613      	movlt	r3, r2
 800fb06:	f8c9 3000 	str.w	r3, [r9]
 800fb0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb0e:	4606      	mov	r6, r0
 800fb10:	460c      	mov	r4, r1
 800fb12:	b112      	cbz	r2, 800fb1a <_printf_common+0x2a>
 800fb14:	3301      	adds	r3, #1
 800fb16:	f8c9 3000 	str.w	r3, [r9]
 800fb1a:	6823      	ldr	r3, [r4, #0]
 800fb1c:	0699      	lsls	r1, r3, #26
 800fb1e:	bf42      	ittt	mi
 800fb20:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fb24:	3302      	addmi	r3, #2
 800fb26:	f8c9 3000 	strmi.w	r3, [r9]
 800fb2a:	6825      	ldr	r5, [r4, #0]
 800fb2c:	f015 0506 	ands.w	r5, r5, #6
 800fb30:	d107      	bne.n	800fb42 <_printf_common+0x52>
 800fb32:	f104 0a19 	add.w	sl, r4, #25
 800fb36:	68e3      	ldr	r3, [r4, #12]
 800fb38:	f8d9 2000 	ldr.w	r2, [r9]
 800fb3c:	1a9b      	subs	r3, r3, r2
 800fb3e:	42ab      	cmp	r3, r5
 800fb40:	dc28      	bgt.n	800fb94 <_printf_common+0xa4>
 800fb42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fb46:	6822      	ldr	r2, [r4, #0]
 800fb48:	3300      	adds	r3, #0
 800fb4a:	bf18      	it	ne
 800fb4c:	2301      	movne	r3, #1
 800fb4e:	0692      	lsls	r2, r2, #26
 800fb50:	d42d      	bmi.n	800fbae <_printf_common+0xbe>
 800fb52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb56:	4639      	mov	r1, r7
 800fb58:	4630      	mov	r0, r6
 800fb5a:	47c0      	blx	r8
 800fb5c:	3001      	adds	r0, #1
 800fb5e:	d020      	beq.n	800fba2 <_printf_common+0xb2>
 800fb60:	6823      	ldr	r3, [r4, #0]
 800fb62:	68e5      	ldr	r5, [r4, #12]
 800fb64:	f8d9 2000 	ldr.w	r2, [r9]
 800fb68:	f003 0306 	and.w	r3, r3, #6
 800fb6c:	2b04      	cmp	r3, #4
 800fb6e:	bf08      	it	eq
 800fb70:	1aad      	subeq	r5, r5, r2
 800fb72:	68a3      	ldr	r3, [r4, #8]
 800fb74:	6922      	ldr	r2, [r4, #16]
 800fb76:	bf0c      	ite	eq
 800fb78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb7c:	2500      	movne	r5, #0
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	bfc4      	itt	gt
 800fb82:	1a9b      	subgt	r3, r3, r2
 800fb84:	18ed      	addgt	r5, r5, r3
 800fb86:	f04f 0900 	mov.w	r9, #0
 800fb8a:	341a      	adds	r4, #26
 800fb8c:	454d      	cmp	r5, r9
 800fb8e:	d11a      	bne.n	800fbc6 <_printf_common+0xd6>
 800fb90:	2000      	movs	r0, #0
 800fb92:	e008      	b.n	800fba6 <_printf_common+0xb6>
 800fb94:	2301      	movs	r3, #1
 800fb96:	4652      	mov	r2, sl
 800fb98:	4639      	mov	r1, r7
 800fb9a:	4630      	mov	r0, r6
 800fb9c:	47c0      	blx	r8
 800fb9e:	3001      	adds	r0, #1
 800fba0:	d103      	bne.n	800fbaa <_printf_common+0xba>
 800fba2:	f04f 30ff 	mov.w	r0, #4294967295
 800fba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbaa:	3501      	adds	r5, #1
 800fbac:	e7c3      	b.n	800fb36 <_printf_common+0x46>
 800fbae:	18e1      	adds	r1, r4, r3
 800fbb0:	1c5a      	adds	r2, r3, #1
 800fbb2:	2030      	movs	r0, #48	; 0x30
 800fbb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fbb8:	4422      	add	r2, r4
 800fbba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fbbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fbc2:	3302      	adds	r3, #2
 800fbc4:	e7c5      	b.n	800fb52 <_printf_common+0x62>
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	4622      	mov	r2, r4
 800fbca:	4639      	mov	r1, r7
 800fbcc:	4630      	mov	r0, r6
 800fbce:	47c0      	blx	r8
 800fbd0:	3001      	adds	r0, #1
 800fbd2:	d0e6      	beq.n	800fba2 <_printf_common+0xb2>
 800fbd4:	f109 0901 	add.w	r9, r9, #1
 800fbd8:	e7d8      	b.n	800fb8c <_printf_common+0x9c>
	...

0800fbdc <_printf_i>:
 800fbdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbe0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800fbe4:	460c      	mov	r4, r1
 800fbe6:	7e09      	ldrb	r1, [r1, #24]
 800fbe8:	b085      	sub	sp, #20
 800fbea:	296e      	cmp	r1, #110	; 0x6e
 800fbec:	4617      	mov	r7, r2
 800fbee:	4606      	mov	r6, r0
 800fbf0:	4698      	mov	r8, r3
 800fbf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fbf4:	f000 80b3 	beq.w	800fd5e <_printf_i+0x182>
 800fbf8:	d822      	bhi.n	800fc40 <_printf_i+0x64>
 800fbfa:	2963      	cmp	r1, #99	; 0x63
 800fbfc:	d036      	beq.n	800fc6c <_printf_i+0x90>
 800fbfe:	d80a      	bhi.n	800fc16 <_printf_i+0x3a>
 800fc00:	2900      	cmp	r1, #0
 800fc02:	f000 80b9 	beq.w	800fd78 <_printf_i+0x19c>
 800fc06:	2958      	cmp	r1, #88	; 0x58
 800fc08:	f000 8083 	beq.w	800fd12 <_printf_i+0x136>
 800fc0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800fc14:	e032      	b.n	800fc7c <_printf_i+0xa0>
 800fc16:	2964      	cmp	r1, #100	; 0x64
 800fc18:	d001      	beq.n	800fc1e <_printf_i+0x42>
 800fc1a:	2969      	cmp	r1, #105	; 0x69
 800fc1c:	d1f6      	bne.n	800fc0c <_printf_i+0x30>
 800fc1e:	6820      	ldr	r0, [r4, #0]
 800fc20:	6813      	ldr	r3, [r2, #0]
 800fc22:	0605      	lsls	r5, r0, #24
 800fc24:	f103 0104 	add.w	r1, r3, #4
 800fc28:	d52a      	bpl.n	800fc80 <_printf_i+0xa4>
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	6011      	str	r1, [r2, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	da03      	bge.n	800fc3a <_printf_i+0x5e>
 800fc32:	222d      	movs	r2, #45	; 0x2d
 800fc34:	425b      	negs	r3, r3
 800fc36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800fc3a:	486f      	ldr	r0, [pc, #444]	; (800fdf8 <_printf_i+0x21c>)
 800fc3c:	220a      	movs	r2, #10
 800fc3e:	e039      	b.n	800fcb4 <_printf_i+0xd8>
 800fc40:	2973      	cmp	r1, #115	; 0x73
 800fc42:	f000 809d 	beq.w	800fd80 <_printf_i+0x1a4>
 800fc46:	d808      	bhi.n	800fc5a <_printf_i+0x7e>
 800fc48:	296f      	cmp	r1, #111	; 0x6f
 800fc4a:	d020      	beq.n	800fc8e <_printf_i+0xb2>
 800fc4c:	2970      	cmp	r1, #112	; 0x70
 800fc4e:	d1dd      	bne.n	800fc0c <_printf_i+0x30>
 800fc50:	6823      	ldr	r3, [r4, #0]
 800fc52:	f043 0320 	orr.w	r3, r3, #32
 800fc56:	6023      	str	r3, [r4, #0]
 800fc58:	e003      	b.n	800fc62 <_printf_i+0x86>
 800fc5a:	2975      	cmp	r1, #117	; 0x75
 800fc5c:	d017      	beq.n	800fc8e <_printf_i+0xb2>
 800fc5e:	2978      	cmp	r1, #120	; 0x78
 800fc60:	d1d4      	bne.n	800fc0c <_printf_i+0x30>
 800fc62:	2378      	movs	r3, #120	; 0x78
 800fc64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fc68:	4864      	ldr	r0, [pc, #400]	; (800fdfc <_printf_i+0x220>)
 800fc6a:	e055      	b.n	800fd18 <_printf_i+0x13c>
 800fc6c:	6813      	ldr	r3, [r2, #0]
 800fc6e:	1d19      	adds	r1, r3, #4
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	6011      	str	r1, [r2, #0]
 800fc74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	e08c      	b.n	800fd9a <_printf_i+0x1be>
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	6011      	str	r1, [r2, #0]
 800fc84:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fc88:	bf18      	it	ne
 800fc8a:	b21b      	sxthne	r3, r3
 800fc8c:	e7cf      	b.n	800fc2e <_printf_i+0x52>
 800fc8e:	6813      	ldr	r3, [r2, #0]
 800fc90:	6825      	ldr	r5, [r4, #0]
 800fc92:	1d18      	adds	r0, r3, #4
 800fc94:	6010      	str	r0, [r2, #0]
 800fc96:	0628      	lsls	r0, r5, #24
 800fc98:	d501      	bpl.n	800fc9e <_printf_i+0xc2>
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	e002      	b.n	800fca4 <_printf_i+0xc8>
 800fc9e:	0668      	lsls	r0, r5, #25
 800fca0:	d5fb      	bpl.n	800fc9a <_printf_i+0xbe>
 800fca2:	881b      	ldrh	r3, [r3, #0]
 800fca4:	4854      	ldr	r0, [pc, #336]	; (800fdf8 <_printf_i+0x21c>)
 800fca6:	296f      	cmp	r1, #111	; 0x6f
 800fca8:	bf14      	ite	ne
 800fcaa:	220a      	movne	r2, #10
 800fcac:	2208      	moveq	r2, #8
 800fcae:	2100      	movs	r1, #0
 800fcb0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fcb4:	6865      	ldr	r5, [r4, #4]
 800fcb6:	60a5      	str	r5, [r4, #8]
 800fcb8:	2d00      	cmp	r5, #0
 800fcba:	f2c0 8095 	blt.w	800fde8 <_printf_i+0x20c>
 800fcbe:	6821      	ldr	r1, [r4, #0]
 800fcc0:	f021 0104 	bic.w	r1, r1, #4
 800fcc4:	6021      	str	r1, [r4, #0]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d13d      	bne.n	800fd46 <_printf_i+0x16a>
 800fcca:	2d00      	cmp	r5, #0
 800fccc:	f040 808e 	bne.w	800fdec <_printf_i+0x210>
 800fcd0:	4665      	mov	r5, ip
 800fcd2:	2a08      	cmp	r2, #8
 800fcd4:	d10b      	bne.n	800fcee <_printf_i+0x112>
 800fcd6:	6823      	ldr	r3, [r4, #0]
 800fcd8:	07db      	lsls	r3, r3, #31
 800fcda:	d508      	bpl.n	800fcee <_printf_i+0x112>
 800fcdc:	6923      	ldr	r3, [r4, #16]
 800fcde:	6862      	ldr	r2, [r4, #4]
 800fce0:	429a      	cmp	r2, r3
 800fce2:	bfde      	ittt	le
 800fce4:	2330      	movle	r3, #48	; 0x30
 800fce6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fcea:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fcee:	ebac 0305 	sub.w	r3, ip, r5
 800fcf2:	6123      	str	r3, [r4, #16]
 800fcf4:	f8cd 8000 	str.w	r8, [sp]
 800fcf8:	463b      	mov	r3, r7
 800fcfa:	aa03      	add	r2, sp, #12
 800fcfc:	4621      	mov	r1, r4
 800fcfe:	4630      	mov	r0, r6
 800fd00:	f7ff fef6 	bl	800faf0 <_printf_common>
 800fd04:	3001      	adds	r0, #1
 800fd06:	d14d      	bne.n	800fda4 <_printf_i+0x1c8>
 800fd08:	f04f 30ff 	mov.w	r0, #4294967295
 800fd0c:	b005      	add	sp, #20
 800fd0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd12:	4839      	ldr	r0, [pc, #228]	; (800fdf8 <_printf_i+0x21c>)
 800fd14:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fd18:	6813      	ldr	r3, [r2, #0]
 800fd1a:	6821      	ldr	r1, [r4, #0]
 800fd1c:	1d1d      	adds	r5, r3, #4
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	6015      	str	r5, [r2, #0]
 800fd22:	060a      	lsls	r2, r1, #24
 800fd24:	d50b      	bpl.n	800fd3e <_printf_i+0x162>
 800fd26:	07ca      	lsls	r2, r1, #31
 800fd28:	bf44      	itt	mi
 800fd2a:	f041 0120 	orrmi.w	r1, r1, #32
 800fd2e:	6021      	strmi	r1, [r4, #0]
 800fd30:	b91b      	cbnz	r3, 800fd3a <_printf_i+0x15e>
 800fd32:	6822      	ldr	r2, [r4, #0]
 800fd34:	f022 0220 	bic.w	r2, r2, #32
 800fd38:	6022      	str	r2, [r4, #0]
 800fd3a:	2210      	movs	r2, #16
 800fd3c:	e7b7      	b.n	800fcae <_printf_i+0xd2>
 800fd3e:	064d      	lsls	r5, r1, #25
 800fd40:	bf48      	it	mi
 800fd42:	b29b      	uxthmi	r3, r3
 800fd44:	e7ef      	b.n	800fd26 <_printf_i+0x14a>
 800fd46:	4665      	mov	r5, ip
 800fd48:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd4c:	fb02 3311 	mls	r3, r2, r1, r3
 800fd50:	5cc3      	ldrb	r3, [r0, r3]
 800fd52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fd56:	460b      	mov	r3, r1
 800fd58:	2900      	cmp	r1, #0
 800fd5a:	d1f5      	bne.n	800fd48 <_printf_i+0x16c>
 800fd5c:	e7b9      	b.n	800fcd2 <_printf_i+0xf6>
 800fd5e:	6813      	ldr	r3, [r2, #0]
 800fd60:	6825      	ldr	r5, [r4, #0]
 800fd62:	6961      	ldr	r1, [r4, #20]
 800fd64:	1d18      	adds	r0, r3, #4
 800fd66:	6010      	str	r0, [r2, #0]
 800fd68:	0628      	lsls	r0, r5, #24
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	d501      	bpl.n	800fd72 <_printf_i+0x196>
 800fd6e:	6019      	str	r1, [r3, #0]
 800fd70:	e002      	b.n	800fd78 <_printf_i+0x19c>
 800fd72:	066a      	lsls	r2, r5, #25
 800fd74:	d5fb      	bpl.n	800fd6e <_printf_i+0x192>
 800fd76:	8019      	strh	r1, [r3, #0]
 800fd78:	2300      	movs	r3, #0
 800fd7a:	6123      	str	r3, [r4, #16]
 800fd7c:	4665      	mov	r5, ip
 800fd7e:	e7b9      	b.n	800fcf4 <_printf_i+0x118>
 800fd80:	6813      	ldr	r3, [r2, #0]
 800fd82:	1d19      	adds	r1, r3, #4
 800fd84:	6011      	str	r1, [r2, #0]
 800fd86:	681d      	ldr	r5, [r3, #0]
 800fd88:	6862      	ldr	r2, [r4, #4]
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	4628      	mov	r0, r5
 800fd8e:	f7f0 fa27 	bl	80001e0 <memchr>
 800fd92:	b108      	cbz	r0, 800fd98 <_printf_i+0x1bc>
 800fd94:	1b40      	subs	r0, r0, r5
 800fd96:	6060      	str	r0, [r4, #4]
 800fd98:	6863      	ldr	r3, [r4, #4]
 800fd9a:	6123      	str	r3, [r4, #16]
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fda2:	e7a7      	b.n	800fcf4 <_printf_i+0x118>
 800fda4:	6923      	ldr	r3, [r4, #16]
 800fda6:	462a      	mov	r2, r5
 800fda8:	4639      	mov	r1, r7
 800fdaa:	4630      	mov	r0, r6
 800fdac:	47c0      	blx	r8
 800fdae:	3001      	adds	r0, #1
 800fdb0:	d0aa      	beq.n	800fd08 <_printf_i+0x12c>
 800fdb2:	6823      	ldr	r3, [r4, #0]
 800fdb4:	079b      	lsls	r3, r3, #30
 800fdb6:	d413      	bmi.n	800fde0 <_printf_i+0x204>
 800fdb8:	68e0      	ldr	r0, [r4, #12]
 800fdba:	9b03      	ldr	r3, [sp, #12]
 800fdbc:	4298      	cmp	r0, r3
 800fdbe:	bfb8      	it	lt
 800fdc0:	4618      	movlt	r0, r3
 800fdc2:	e7a3      	b.n	800fd0c <_printf_i+0x130>
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	464a      	mov	r2, r9
 800fdc8:	4639      	mov	r1, r7
 800fdca:	4630      	mov	r0, r6
 800fdcc:	47c0      	blx	r8
 800fdce:	3001      	adds	r0, #1
 800fdd0:	d09a      	beq.n	800fd08 <_printf_i+0x12c>
 800fdd2:	3501      	adds	r5, #1
 800fdd4:	68e3      	ldr	r3, [r4, #12]
 800fdd6:	9a03      	ldr	r2, [sp, #12]
 800fdd8:	1a9b      	subs	r3, r3, r2
 800fdda:	42ab      	cmp	r3, r5
 800fddc:	dcf2      	bgt.n	800fdc4 <_printf_i+0x1e8>
 800fdde:	e7eb      	b.n	800fdb8 <_printf_i+0x1dc>
 800fde0:	2500      	movs	r5, #0
 800fde2:	f104 0919 	add.w	r9, r4, #25
 800fde6:	e7f5      	b.n	800fdd4 <_printf_i+0x1f8>
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d1ac      	bne.n	800fd46 <_printf_i+0x16a>
 800fdec:	7803      	ldrb	r3, [r0, #0]
 800fdee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fdf2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fdf6:	e76c      	b.n	800fcd2 <_printf_i+0xf6>
 800fdf8:	08013182 	.word	0x08013182
 800fdfc:	08013193 	.word	0x08013193

0800fe00 <_scanf_float>:
 800fe00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe04:	469a      	mov	sl, r3
 800fe06:	688b      	ldr	r3, [r1, #8]
 800fe08:	4616      	mov	r6, r2
 800fe0a:	1e5a      	subs	r2, r3, #1
 800fe0c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fe10:	b087      	sub	sp, #28
 800fe12:	bf83      	ittte	hi
 800fe14:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800fe18:	189b      	addhi	r3, r3, r2
 800fe1a:	9301      	strhi	r3, [sp, #4]
 800fe1c:	2300      	movls	r3, #0
 800fe1e:	bf86      	itte	hi
 800fe20:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fe24:	608b      	strhi	r3, [r1, #8]
 800fe26:	9301      	strls	r3, [sp, #4]
 800fe28:	680b      	ldr	r3, [r1, #0]
 800fe2a:	4688      	mov	r8, r1
 800fe2c:	f04f 0b00 	mov.w	fp, #0
 800fe30:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fe34:	f848 3b1c 	str.w	r3, [r8], #28
 800fe38:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800fe3c:	4607      	mov	r7, r0
 800fe3e:	460c      	mov	r4, r1
 800fe40:	4645      	mov	r5, r8
 800fe42:	465a      	mov	r2, fp
 800fe44:	46d9      	mov	r9, fp
 800fe46:	f8cd b008 	str.w	fp, [sp, #8]
 800fe4a:	68a1      	ldr	r1, [r4, #8]
 800fe4c:	b181      	cbz	r1, 800fe70 <_scanf_float+0x70>
 800fe4e:	6833      	ldr	r3, [r6, #0]
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	2b49      	cmp	r3, #73	; 0x49
 800fe54:	d071      	beq.n	800ff3a <_scanf_float+0x13a>
 800fe56:	d84d      	bhi.n	800fef4 <_scanf_float+0xf4>
 800fe58:	2b39      	cmp	r3, #57	; 0x39
 800fe5a:	d840      	bhi.n	800fede <_scanf_float+0xde>
 800fe5c:	2b31      	cmp	r3, #49	; 0x31
 800fe5e:	f080 8088 	bcs.w	800ff72 <_scanf_float+0x172>
 800fe62:	2b2d      	cmp	r3, #45	; 0x2d
 800fe64:	f000 8090 	beq.w	800ff88 <_scanf_float+0x188>
 800fe68:	d815      	bhi.n	800fe96 <_scanf_float+0x96>
 800fe6a:	2b2b      	cmp	r3, #43	; 0x2b
 800fe6c:	f000 808c 	beq.w	800ff88 <_scanf_float+0x188>
 800fe70:	f1b9 0f00 	cmp.w	r9, #0
 800fe74:	d003      	beq.n	800fe7e <_scanf_float+0x7e>
 800fe76:	6823      	ldr	r3, [r4, #0]
 800fe78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fe7c:	6023      	str	r3, [r4, #0]
 800fe7e:	3a01      	subs	r2, #1
 800fe80:	2a01      	cmp	r2, #1
 800fe82:	f200 80ea 	bhi.w	801005a <_scanf_float+0x25a>
 800fe86:	4545      	cmp	r5, r8
 800fe88:	f200 80dc 	bhi.w	8010044 <_scanf_float+0x244>
 800fe8c:	2601      	movs	r6, #1
 800fe8e:	4630      	mov	r0, r6
 800fe90:	b007      	add	sp, #28
 800fe92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe96:	2b2e      	cmp	r3, #46	; 0x2e
 800fe98:	f000 809f 	beq.w	800ffda <_scanf_float+0x1da>
 800fe9c:	2b30      	cmp	r3, #48	; 0x30
 800fe9e:	d1e7      	bne.n	800fe70 <_scanf_float+0x70>
 800fea0:	6820      	ldr	r0, [r4, #0]
 800fea2:	f410 7f80 	tst.w	r0, #256	; 0x100
 800fea6:	d064      	beq.n	800ff72 <_scanf_float+0x172>
 800fea8:	9b01      	ldr	r3, [sp, #4]
 800feaa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800feae:	6020      	str	r0, [r4, #0]
 800feb0:	f109 0901 	add.w	r9, r9, #1
 800feb4:	b11b      	cbz	r3, 800febe <_scanf_float+0xbe>
 800feb6:	3b01      	subs	r3, #1
 800feb8:	3101      	adds	r1, #1
 800feba:	9301      	str	r3, [sp, #4]
 800febc:	60a1      	str	r1, [r4, #8]
 800febe:	68a3      	ldr	r3, [r4, #8]
 800fec0:	3b01      	subs	r3, #1
 800fec2:	60a3      	str	r3, [r4, #8]
 800fec4:	6923      	ldr	r3, [r4, #16]
 800fec6:	3301      	adds	r3, #1
 800fec8:	6123      	str	r3, [r4, #16]
 800feca:	6873      	ldr	r3, [r6, #4]
 800fecc:	3b01      	subs	r3, #1
 800fece:	2b00      	cmp	r3, #0
 800fed0:	6073      	str	r3, [r6, #4]
 800fed2:	f340 80ac 	ble.w	801002e <_scanf_float+0x22e>
 800fed6:	6833      	ldr	r3, [r6, #0]
 800fed8:	3301      	adds	r3, #1
 800feda:	6033      	str	r3, [r6, #0]
 800fedc:	e7b5      	b.n	800fe4a <_scanf_float+0x4a>
 800fede:	2b45      	cmp	r3, #69	; 0x45
 800fee0:	f000 8085 	beq.w	800ffee <_scanf_float+0x1ee>
 800fee4:	2b46      	cmp	r3, #70	; 0x46
 800fee6:	d06a      	beq.n	800ffbe <_scanf_float+0x1be>
 800fee8:	2b41      	cmp	r3, #65	; 0x41
 800feea:	d1c1      	bne.n	800fe70 <_scanf_float+0x70>
 800feec:	2a01      	cmp	r2, #1
 800feee:	d1bf      	bne.n	800fe70 <_scanf_float+0x70>
 800fef0:	2202      	movs	r2, #2
 800fef2:	e046      	b.n	800ff82 <_scanf_float+0x182>
 800fef4:	2b65      	cmp	r3, #101	; 0x65
 800fef6:	d07a      	beq.n	800ffee <_scanf_float+0x1ee>
 800fef8:	d818      	bhi.n	800ff2c <_scanf_float+0x12c>
 800fefa:	2b54      	cmp	r3, #84	; 0x54
 800fefc:	d066      	beq.n	800ffcc <_scanf_float+0x1cc>
 800fefe:	d811      	bhi.n	800ff24 <_scanf_float+0x124>
 800ff00:	2b4e      	cmp	r3, #78	; 0x4e
 800ff02:	d1b5      	bne.n	800fe70 <_scanf_float+0x70>
 800ff04:	2a00      	cmp	r2, #0
 800ff06:	d146      	bne.n	800ff96 <_scanf_float+0x196>
 800ff08:	f1b9 0f00 	cmp.w	r9, #0
 800ff0c:	d145      	bne.n	800ff9a <_scanf_float+0x19a>
 800ff0e:	6821      	ldr	r1, [r4, #0]
 800ff10:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ff14:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ff18:	d13f      	bne.n	800ff9a <_scanf_float+0x19a>
 800ff1a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ff1e:	6021      	str	r1, [r4, #0]
 800ff20:	2201      	movs	r2, #1
 800ff22:	e02e      	b.n	800ff82 <_scanf_float+0x182>
 800ff24:	2b59      	cmp	r3, #89	; 0x59
 800ff26:	d01e      	beq.n	800ff66 <_scanf_float+0x166>
 800ff28:	2b61      	cmp	r3, #97	; 0x61
 800ff2a:	e7de      	b.n	800feea <_scanf_float+0xea>
 800ff2c:	2b6e      	cmp	r3, #110	; 0x6e
 800ff2e:	d0e9      	beq.n	800ff04 <_scanf_float+0x104>
 800ff30:	d815      	bhi.n	800ff5e <_scanf_float+0x15e>
 800ff32:	2b66      	cmp	r3, #102	; 0x66
 800ff34:	d043      	beq.n	800ffbe <_scanf_float+0x1be>
 800ff36:	2b69      	cmp	r3, #105	; 0x69
 800ff38:	d19a      	bne.n	800fe70 <_scanf_float+0x70>
 800ff3a:	f1bb 0f00 	cmp.w	fp, #0
 800ff3e:	d138      	bne.n	800ffb2 <_scanf_float+0x1b2>
 800ff40:	f1b9 0f00 	cmp.w	r9, #0
 800ff44:	d197      	bne.n	800fe76 <_scanf_float+0x76>
 800ff46:	6821      	ldr	r1, [r4, #0]
 800ff48:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ff4c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ff50:	d195      	bne.n	800fe7e <_scanf_float+0x7e>
 800ff52:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ff56:	6021      	str	r1, [r4, #0]
 800ff58:	f04f 0b01 	mov.w	fp, #1
 800ff5c:	e011      	b.n	800ff82 <_scanf_float+0x182>
 800ff5e:	2b74      	cmp	r3, #116	; 0x74
 800ff60:	d034      	beq.n	800ffcc <_scanf_float+0x1cc>
 800ff62:	2b79      	cmp	r3, #121	; 0x79
 800ff64:	d184      	bne.n	800fe70 <_scanf_float+0x70>
 800ff66:	f1bb 0f07 	cmp.w	fp, #7
 800ff6a:	d181      	bne.n	800fe70 <_scanf_float+0x70>
 800ff6c:	f04f 0b08 	mov.w	fp, #8
 800ff70:	e007      	b.n	800ff82 <_scanf_float+0x182>
 800ff72:	eb12 0f0b 	cmn.w	r2, fp
 800ff76:	f47f af7b 	bne.w	800fe70 <_scanf_float+0x70>
 800ff7a:	6821      	ldr	r1, [r4, #0]
 800ff7c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800ff80:	6021      	str	r1, [r4, #0]
 800ff82:	702b      	strb	r3, [r5, #0]
 800ff84:	3501      	adds	r5, #1
 800ff86:	e79a      	b.n	800febe <_scanf_float+0xbe>
 800ff88:	6821      	ldr	r1, [r4, #0]
 800ff8a:	0608      	lsls	r0, r1, #24
 800ff8c:	f57f af70 	bpl.w	800fe70 <_scanf_float+0x70>
 800ff90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ff94:	e7f4      	b.n	800ff80 <_scanf_float+0x180>
 800ff96:	2a02      	cmp	r2, #2
 800ff98:	d047      	beq.n	801002a <_scanf_float+0x22a>
 800ff9a:	f1bb 0f01 	cmp.w	fp, #1
 800ff9e:	d003      	beq.n	800ffa8 <_scanf_float+0x1a8>
 800ffa0:	f1bb 0f04 	cmp.w	fp, #4
 800ffa4:	f47f af64 	bne.w	800fe70 <_scanf_float+0x70>
 800ffa8:	f10b 0b01 	add.w	fp, fp, #1
 800ffac:	fa5f fb8b 	uxtb.w	fp, fp
 800ffb0:	e7e7      	b.n	800ff82 <_scanf_float+0x182>
 800ffb2:	f1bb 0f03 	cmp.w	fp, #3
 800ffb6:	d0f7      	beq.n	800ffa8 <_scanf_float+0x1a8>
 800ffb8:	f1bb 0f05 	cmp.w	fp, #5
 800ffbc:	e7f2      	b.n	800ffa4 <_scanf_float+0x1a4>
 800ffbe:	f1bb 0f02 	cmp.w	fp, #2
 800ffc2:	f47f af55 	bne.w	800fe70 <_scanf_float+0x70>
 800ffc6:	f04f 0b03 	mov.w	fp, #3
 800ffca:	e7da      	b.n	800ff82 <_scanf_float+0x182>
 800ffcc:	f1bb 0f06 	cmp.w	fp, #6
 800ffd0:	f47f af4e 	bne.w	800fe70 <_scanf_float+0x70>
 800ffd4:	f04f 0b07 	mov.w	fp, #7
 800ffd8:	e7d3      	b.n	800ff82 <_scanf_float+0x182>
 800ffda:	6821      	ldr	r1, [r4, #0]
 800ffdc:	0588      	lsls	r0, r1, #22
 800ffde:	f57f af47 	bpl.w	800fe70 <_scanf_float+0x70>
 800ffe2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ffe6:	6021      	str	r1, [r4, #0]
 800ffe8:	f8cd 9008 	str.w	r9, [sp, #8]
 800ffec:	e7c9      	b.n	800ff82 <_scanf_float+0x182>
 800ffee:	6821      	ldr	r1, [r4, #0]
 800fff0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800fff4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800fff8:	d006      	beq.n	8010008 <_scanf_float+0x208>
 800fffa:	0548      	lsls	r0, r1, #21
 800fffc:	f57f af38 	bpl.w	800fe70 <_scanf_float+0x70>
 8010000:	f1b9 0f00 	cmp.w	r9, #0
 8010004:	f43f af3b 	beq.w	800fe7e <_scanf_float+0x7e>
 8010008:	0588      	lsls	r0, r1, #22
 801000a:	bf58      	it	pl
 801000c:	9802      	ldrpl	r0, [sp, #8]
 801000e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010012:	bf58      	it	pl
 8010014:	eba9 0000 	subpl.w	r0, r9, r0
 8010018:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801001c:	bf58      	it	pl
 801001e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8010022:	6021      	str	r1, [r4, #0]
 8010024:	f04f 0900 	mov.w	r9, #0
 8010028:	e7ab      	b.n	800ff82 <_scanf_float+0x182>
 801002a:	2203      	movs	r2, #3
 801002c:	e7a9      	b.n	800ff82 <_scanf_float+0x182>
 801002e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010032:	9205      	str	r2, [sp, #20]
 8010034:	4631      	mov	r1, r6
 8010036:	4638      	mov	r0, r7
 8010038:	4798      	blx	r3
 801003a:	9a05      	ldr	r2, [sp, #20]
 801003c:	2800      	cmp	r0, #0
 801003e:	f43f af04 	beq.w	800fe4a <_scanf_float+0x4a>
 8010042:	e715      	b.n	800fe70 <_scanf_float+0x70>
 8010044:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010048:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801004c:	4632      	mov	r2, r6
 801004e:	4638      	mov	r0, r7
 8010050:	4798      	blx	r3
 8010052:	6923      	ldr	r3, [r4, #16]
 8010054:	3b01      	subs	r3, #1
 8010056:	6123      	str	r3, [r4, #16]
 8010058:	e715      	b.n	800fe86 <_scanf_float+0x86>
 801005a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801005e:	2b06      	cmp	r3, #6
 8010060:	d80a      	bhi.n	8010078 <_scanf_float+0x278>
 8010062:	f1bb 0f02 	cmp.w	fp, #2
 8010066:	d968      	bls.n	801013a <_scanf_float+0x33a>
 8010068:	f1ab 0b03 	sub.w	fp, fp, #3
 801006c:	fa5f fb8b 	uxtb.w	fp, fp
 8010070:	eba5 0b0b 	sub.w	fp, r5, fp
 8010074:	455d      	cmp	r5, fp
 8010076:	d14b      	bne.n	8010110 <_scanf_float+0x310>
 8010078:	6823      	ldr	r3, [r4, #0]
 801007a:	05da      	lsls	r2, r3, #23
 801007c:	d51f      	bpl.n	80100be <_scanf_float+0x2be>
 801007e:	055b      	lsls	r3, r3, #21
 8010080:	d468      	bmi.n	8010154 <_scanf_float+0x354>
 8010082:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010086:	6923      	ldr	r3, [r4, #16]
 8010088:	2965      	cmp	r1, #101	; 0x65
 801008a:	f103 33ff 	add.w	r3, r3, #4294967295
 801008e:	f105 3bff 	add.w	fp, r5, #4294967295
 8010092:	6123      	str	r3, [r4, #16]
 8010094:	d00d      	beq.n	80100b2 <_scanf_float+0x2b2>
 8010096:	2945      	cmp	r1, #69	; 0x45
 8010098:	d00b      	beq.n	80100b2 <_scanf_float+0x2b2>
 801009a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801009e:	4632      	mov	r2, r6
 80100a0:	4638      	mov	r0, r7
 80100a2:	4798      	blx	r3
 80100a4:	6923      	ldr	r3, [r4, #16]
 80100a6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80100aa:	3b01      	subs	r3, #1
 80100ac:	f1a5 0b02 	sub.w	fp, r5, #2
 80100b0:	6123      	str	r3, [r4, #16]
 80100b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80100b6:	4632      	mov	r2, r6
 80100b8:	4638      	mov	r0, r7
 80100ba:	4798      	blx	r3
 80100bc:	465d      	mov	r5, fp
 80100be:	6826      	ldr	r6, [r4, #0]
 80100c0:	f016 0610 	ands.w	r6, r6, #16
 80100c4:	d17a      	bne.n	80101bc <_scanf_float+0x3bc>
 80100c6:	702e      	strb	r6, [r5, #0]
 80100c8:	6823      	ldr	r3, [r4, #0]
 80100ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80100ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80100d2:	d142      	bne.n	801015a <_scanf_float+0x35a>
 80100d4:	9b02      	ldr	r3, [sp, #8]
 80100d6:	eba9 0303 	sub.w	r3, r9, r3
 80100da:	425a      	negs	r2, r3
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d149      	bne.n	8010174 <_scanf_float+0x374>
 80100e0:	2200      	movs	r2, #0
 80100e2:	4641      	mov	r1, r8
 80100e4:	4638      	mov	r0, r7
 80100e6:	f000 fec7 	bl	8010e78 <_strtod_r>
 80100ea:	6825      	ldr	r5, [r4, #0]
 80100ec:	f8da 3000 	ldr.w	r3, [sl]
 80100f0:	f015 0f02 	tst.w	r5, #2
 80100f4:	f103 0204 	add.w	r2, r3, #4
 80100f8:	ec59 8b10 	vmov	r8, r9, d0
 80100fc:	f8ca 2000 	str.w	r2, [sl]
 8010100:	d043      	beq.n	801018a <_scanf_float+0x38a>
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	e9c3 8900 	strd	r8, r9, [r3]
 8010108:	68e3      	ldr	r3, [r4, #12]
 801010a:	3301      	adds	r3, #1
 801010c:	60e3      	str	r3, [r4, #12]
 801010e:	e6be      	b.n	800fe8e <_scanf_float+0x8e>
 8010110:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010114:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010118:	4632      	mov	r2, r6
 801011a:	4638      	mov	r0, r7
 801011c:	4798      	blx	r3
 801011e:	6923      	ldr	r3, [r4, #16]
 8010120:	3b01      	subs	r3, #1
 8010122:	6123      	str	r3, [r4, #16]
 8010124:	e7a6      	b.n	8010074 <_scanf_float+0x274>
 8010126:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801012a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801012e:	4632      	mov	r2, r6
 8010130:	4638      	mov	r0, r7
 8010132:	4798      	blx	r3
 8010134:	6923      	ldr	r3, [r4, #16]
 8010136:	3b01      	subs	r3, #1
 8010138:	6123      	str	r3, [r4, #16]
 801013a:	4545      	cmp	r5, r8
 801013c:	d8f3      	bhi.n	8010126 <_scanf_float+0x326>
 801013e:	e6a5      	b.n	800fe8c <_scanf_float+0x8c>
 8010140:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010144:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010148:	4632      	mov	r2, r6
 801014a:	4638      	mov	r0, r7
 801014c:	4798      	blx	r3
 801014e:	6923      	ldr	r3, [r4, #16]
 8010150:	3b01      	subs	r3, #1
 8010152:	6123      	str	r3, [r4, #16]
 8010154:	4545      	cmp	r5, r8
 8010156:	d8f3      	bhi.n	8010140 <_scanf_float+0x340>
 8010158:	e698      	b.n	800fe8c <_scanf_float+0x8c>
 801015a:	9b03      	ldr	r3, [sp, #12]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d0bf      	beq.n	80100e0 <_scanf_float+0x2e0>
 8010160:	9904      	ldr	r1, [sp, #16]
 8010162:	230a      	movs	r3, #10
 8010164:	4632      	mov	r2, r6
 8010166:	3101      	adds	r1, #1
 8010168:	4638      	mov	r0, r7
 801016a:	f000 ff11 	bl	8010f90 <_strtol_r>
 801016e:	9b03      	ldr	r3, [sp, #12]
 8010170:	9d04      	ldr	r5, [sp, #16]
 8010172:	1ac2      	subs	r2, r0, r3
 8010174:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010178:	429d      	cmp	r5, r3
 801017a:	bf28      	it	cs
 801017c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8010180:	490f      	ldr	r1, [pc, #60]	; (80101c0 <_scanf_float+0x3c0>)
 8010182:	4628      	mov	r0, r5
 8010184:	f000 f834 	bl	80101f0 <siprintf>
 8010188:	e7aa      	b.n	80100e0 <_scanf_float+0x2e0>
 801018a:	f015 0504 	ands.w	r5, r5, #4
 801018e:	d1b8      	bne.n	8010102 <_scanf_float+0x302>
 8010190:	681f      	ldr	r7, [r3, #0]
 8010192:	ee10 2a10 	vmov	r2, s0
 8010196:	464b      	mov	r3, r9
 8010198:	ee10 0a10 	vmov	r0, s0
 801019c:	4649      	mov	r1, r9
 801019e:	f7f0 fcc5 	bl	8000b2c <__aeabi_dcmpun>
 80101a2:	b128      	cbz	r0, 80101b0 <_scanf_float+0x3b0>
 80101a4:	4628      	mov	r0, r5
 80101a6:	f000 f81d 	bl	80101e4 <nanf>
 80101aa:	ed87 0a00 	vstr	s0, [r7]
 80101ae:	e7ab      	b.n	8010108 <_scanf_float+0x308>
 80101b0:	4640      	mov	r0, r8
 80101b2:	4649      	mov	r1, r9
 80101b4:	f7f0 fd18 	bl	8000be8 <__aeabi_d2f>
 80101b8:	6038      	str	r0, [r7, #0]
 80101ba:	e7a5      	b.n	8010108 <_scanf_float+0x308>
 80101bc:	2600      	movs	r6, #0
 80101be:	e666      	b.n	800fe8e <_scanf_float+0x8e>
 80101c0:	080131a4 	.word	0x080131a4

080101c4 <_sbrk_r>:
 80101c4:	b538      	push	{r3, r4, r5, lr}
 80101c6:	4c06      	ldr	r4, [pc, #24]	; (80101e0 <_sbrk_r+0x1c>)
 80101c8:	2300      	movs	r3, #0
 80101ca:	4605      	mov	r5, r0
 80101cc:	4608      	mov	r0, r1
 80101ce:	6023      	str	r3, [r4, #0]
 80101d0:	f7fe fb0e 	bl	800e7f0 <_sbrk>
 80101d4:	1c43      	adds	r3, r0, #1
 80101d6:	d102      	bne.n	80101de <_sbrk_r+0x1a>
 80101d8:	6823      	ldr	r3, [r4, #0]
 80101da:	b103      	cbz	r3, 80101de <_sbrk_r+0x1a>
 80101dc:	602b      	str	r3, [r5, #0]
 80101de:	bd38      	pop	{r3, r4, r5, pc}
 80101e0:	20006854 	.word	0x20006854

080101e4 <nanf>:
 80101e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80101ec <nanf+0x8>
 80101e8:	4770      	bx	lr
 80101ea:	bf00      	nop
 80101ec:	7fc00000 	.word	0x7fc00000

080101f0 <siprintf>:
 80101f0:	b40e      	push	{r1, r2, r3}
 80101f2:	b500      	push	{lr}
 80101f4:	b09c      	sub	sp, #112	; 0x70
 80101f6:	ab1d      	add	r3, sp, #116	; 0x74
 80101f8:	9002      	str	r0, [sp, #8]
 80101fa:	9006      	str	r0, [sp, #24]
 80101fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010200:	4809      	ldr	r0, [pc, #36]	; (8010228 <siprintf+0x38>)
 8010202:	9107      	str	r1, [sp, #28]
 8010204:	9104      	str	r1, [sp, #16]
 8010206:	4909      	ldr	r1, [pc, #36]	; (801022c <siprintf+0x3c>)
 8010208:	f853 2b04 	ldr.w	r2, [r3], #4
 801020c:	9105      	str	r1, [sp, #20]
 801020e:	6800      	ldr	r0, [r0, #0]
 8010210:	9301      	str	r3, [sp, #4]
 8010212:	a902      	add	r1, sp, #8
 8010214:	f002 fcca 	bl	8012bac <_svfiprintf_r>
 8010218:	9b02      	ldr	r3, [sp, #8]
 801021a:	2200      	movs	r2, #0
 801021c:	701a      	strb	r2, [r3, #0]
 801021e:	b01c      	add	sp, #112	; 0x70
 8010220:	f85d eb04 	ldr.w	lr, [sp], #4
 8010224:	b003      	add	sp, #12
 8010226:	4770      	bx	lr
 8010228:	2000017c 	.word	0x2000017c
 801022c:	ffff0208 	.word	0xffff0208

08010230 <strncmp>:
 8010230:	b510      	push	{r4, lr}
 8010232:	b16a      	cbz	r2, 8010250 <strncmp+0x20>
 8010234:	3901      	subs	r1, #1
 8010236:	1884      	adds	r4, r0, r2
 8010238:	f810 3b01 	ldrb.w	r3, [r0], #1
 801023c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010240:	4293      	cmp	r3, r2
 8010242:	d103      	bne.n	801024c <strncmp+0x1c>
 8010244:	42a0      	cmp	r0, r4
 8010246:	d001      	beq.n	801024c <strncmp+0x1c>
 8010248:	2b00      	cmp	r3, #0
 801024a:	d1f5      	bne.n	8010238 <strncmp+0x8>
 801024c:	1a98      	subs	r0, r3, r2
 801024e:	bd10      	pop	{r4, pc}
 8010250:	4610      	mov	r0, r2
 8010252:	e7fc      	b.n	801024e <strncmp+0x1e>

08010254 <sulp>:
 8010254:	b570      	push	{r4, r5, r6, lr}
 8010256:	4604      	mov	r4, r0
 8010258:	460d      	mov	r5, r1
 801025a:	ec45 4b10 	vmov	d0, r4, r5
 801025e:	4616      	mov	r6, r2
 8010260:	f002 fb08 	bl	8012874 <__ulp>
 8010264:	ec51 0b10 	vmov	r0, r1, d0
 8010268:	b17e      	cbz	r6, 801028a <sulp+0x36>
 801026a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801026e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010272:	2b00      	cmp	r3, #0
 8010274:	dd09      	ble.n	801028a <sulp+0x36>
 8010276:	051b      	lsls	r3, r3, #20
 8010278:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801027c:	2400      	movs	r4, #0
 801027e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010282:	4622      	mov	r2, r4
 8010284:	462b      	mov	r3, r5
 8010286:	f7f0 f9b7 	bl	80005f8 <__aeabi_dmul>
 801028a:	bd70      	pop	{r4, r5, r6, pc}
 801028c:	0000      	movs	r0, r0
	...

08010290 <_strtod_l>:
 8010290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010294:	461f      	mov	r7, r3
 8010296:	b0a1      	sub	sp, #132	; 0x84
 8010298:	2300      	movs	r3, #0
 801029a:	4681      	mov	r9, r0
 801029c:	4638      	mov	r0, r7
 801029e:	460e      	mov	r6, r1
 80102a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80102a2:	931c      	str	r3, [sp, #112]	; 0x70
 80102a4:	f001 fff5 	bl	8012292 <__localeconv_l>
 80102a8:	4680      	mov	r8, r0
 80102aa:	6800      	ldr	r0, [r0, #0]
 80102ac:	f7ef ff90 	bl	80001d0 <strlen>
 80102b0:	f04f 0a00 	mov.w	sl, #0
 80102b4:	4604      	mov	r4, r0
 80102b6:	f04f 0b00 	mov.w	fp, #0
 80102ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80102bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80102be:	781a      	ldrb	r2, [r3, #0]
 80102c0:	2a0d      	cmp	r2, #13
 80102c2:	d832      	bhi.n	801032a <_strtod_l+0x9a>
 80102c4:	2a09      	cmp	r2, #9
 80102c6:	d236      	bcs.n	8010336 <_strtod_l+0xa6>
 80102c8:	2a00      	cmp	r2, #0
 80102ca:	d03e      	beq.n	801034a <_strtod_l+0xba>
 80102cc:	2300      	movs	r3, #0
 80102ce:	930d      	str	r3, [sp, #52]	; 0x34
 80102d0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80102d2:	782b      	ldrb	r3, [r5, #0]
 80102d4:	2b30      	cmp	r3, #48	; 0x30
 80102d6:	f040 80ac 	bne.w	8010432 <_strtod_l+0x1a2>
 80102da:	786b      	ldrb	r3, [r5, #1]
 80102dc:	2b58      	cmp	r3, #88	; 0x58
 80102de:	d001      	beq.n	80102e4 <_strtod_l+0x54>
 80102e0:	2b78      	cmp	r3, #120	; 0x78
 80102e2:	d167      	bne.n	80103b4 <_strtod_l+0x124>
 80102e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102e6:	9301      	str	r3, [sp, #4]
 80102e8:	ab1c      	add	r3, sp, #112	; 0x70
 80102ea:	9300      	str	r3, [sp, #0]
 80102ec:	9702      	str	r7, [sp, #8]
 80102ee:	ab1d      	add	r3, sp, #116	; 0x74
 80102f0:	4a88      	ldr	r2, [pc, #544]	; (8010514 <_strtod_l+0x284>)
 80102f2:	a91b      	add	r1, sp, #108	; 0x6c
 80102f4:	4648      	mov	r0, r9
 80102f6:	f001 fcf2 	bl	8011cde <__gethex>
 80102fa:	f010 0407 	ands.w	r4, r0, #7
 80102fe:	4606      	mov	r6, r0
 8010300:	d005      	beq.n	801030e <_strtod_l+0x7e>
 8010302:	2c06      	cmp	r4, #6
 8010304:	d12b      	bne.n	801035e <_strtod_l+0xce>
 8010306:	3501      	adds	r5, #1
 8010308:	2300      	movs	r3, #0
 801030a:	951b      	str	r5, [sp, #108]	; 0x6c
 801030c:	930d      	str	r3, [sp, #52]	; 0x34
 801030e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010310:	2b00      	cmp	r3, #0
 8010312:	f040 859a 	bne.w	8010e4a <_strtod_l+0xbba>
 8010316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010318:	b1e3      	cbz	r3, 8010354 <_strtod_l+0xc4>
 801031a:	4652      	mov	r2, sl
 801031c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010320:	ec43 2b10 	vmov	d0, r2, r3
 8010324:	b021      	add	sp, #132	; 0x84
 8010326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801032a:	2a2b      	cmp	r2, #43	; 0x2b
 801032c:	d015      	beq.n	801035a <_strtod_l+0xca>
 801032e:	2a2d      	cmp	r2, #45	; 0x2d
 8010330:	d004      	beq.n	801033c <_strtod_l+0xac>
 8010332:	2a20      	cmp	r2, #32
 8010334:	d1ca      	bne.n	80102cc <_strtod_l+0x3c>
 8010336:	3301      	adds	r3, #1
 8010338:	931b      	str	r3, [sp, #108]	; 0x6c
 801033a:	e7bf      	b.n	80102bc <_strtod_l+0x2c>
 801033c:	2201      	movs	r2, #1
 801033e:	920d      	str	r2, [sp, #52]	; 0x34
 8010340:	1c5a      	adds	r2, r3, #1
 8010342:	921b      	str	r2, [sp, #108]	; 0x6c
 8010344:	785b      	ldrb	r3, [r3, #1]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d1c2      	bne.n	80102d0 <_strtod_l+0x40>
 801034a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801034c:	961b      	str	r6, [sp, #108]	; 0x6c
 801034e:	2b00      	cmp	r3, #0
 8010350:	f040 8579 	bne.w	8010e46 <_strtod_l+0xbb6>
 8010354:	4652      	mov	r2, sl
 8010356:	465b      	mov	r3, fp
 8010358:	e7e2      	b.n	8010320 <_strtod_l+0x90>
 801035a:	2200      	movs	r2, #0
 801035c:	e7ef      	b.n	801033e <_strtod_l+0xae>
 801035e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010360:	b13a      	cbz	r2, 8010372 <_strtod_l+0xe2>
 8010362:	2135      	movs	r1, #53	; 0x35
 8010364:	a81e      	add	r0, sp, #120	; 0x78
 8010366:	f002 fb7d 	bl	8012a64 <__copybits>
 801036a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801036c:	4648      	mov	r0, r9
 801036e:	f001 ffe9 	bl	8012344 <_Bfree>
 8010372:	3c01      	subs	r4, #1
 8010374:	2c04      	cmp	r4, #4
 8010376:	d806      	bhi.n	8010386 <_strtod_l+0xf6>
 8010378:	e8df f004 	tbb	[pc, r4]
 801037c:	1714030a 	.word	0x1714030a
 8010380:	0a          	.byte	0x0a
 8010381:	00          	.byte	0x00
 8010382:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8010386:	0730      	lsls	r0, r6, #28
 8010388:	d5c1      	bpl.n	801030e <_strtod_l+0x7e>
 801038a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801038e:	e7be      	b.n	801030e <_strtod_l+0x7e>
 8010390:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8010394:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010396:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801039a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801039e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80103a2:	e7f0      	b.n	8010386 <_strtod_l+0xf6>
 80103a4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8010518 <_strtod_l+0x288>
 80103a8:	e7ed      	b.n	8010386 <_strtod_l+0xf6>
 80103aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80103ae:	f04f 3aff 	mov.w	sl, #4294967295
 80103b2:	e7e8      	b.n	8010386 <_strtod_l+0xf6>
 80103b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80103b6:	1c5a      	adds	r2, r3, #1
 80103b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80103ba:	785b      	ldrb	r3, [r3, #1]
 80103bc:	2b30      	cmp	r3, #48	; 0x30
 80103be:	d0f9      	beq.n	80103b4 <_strtod_l+0x124>
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d0a4      	beq.n	801030e <_strtod_l+0x7e>
 80103c4:	2301      	movs	r3, #1
 80103c6:	2500      	movs	r5, #0
 80103c8:	9306      	str	r3, [sp, #24]
 80103ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80103cc:	9308      	str	r3, [sp, #32]
 80103ce:	9507      	str	r5, [sp, #28]
 80103d0:	9505      	str	r5, [sp, #20]
 80103d2:	220a      	movs	r2, #10
 80103d4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80103d6:	7807      	ldrb	r7, [r0, #0]
 80103d8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80103dc:	b2d9      	uxtb	r1, r3
 80103de:	2909      	cmp	r1, #9
 80103e0:	d929      	bls.n	8010436 <_strtod_l+0x1a6>
 80103e2:	4622      	mov	r2, r4
 80103e4:	f8d8 1000 	ldr.w	r1, [r8]
 80103e8:	f7ff ff22 	bl	8010230 <strncmp>
 80103ec:	2800      	cmp	r0, #0
 80103ee:	d031      	beq.n	8010454 <_strtod_l+0x1c4>
 80103f0:	2000      	movs	r0, #0
 80103f2:	9c05      	ldr	r4, [sp, #20]
 80103f4:	9004      	str	r0, [sp, #16]
 80103f6:	463b      	mov	r3, r7
 80103f8:	4602      	mov	r2, r0
 80103fa:	2b65      	cmp	r3, #101	; 0x65
 80103fc:	d001      	beq.n	8010402 <_strtod_l+0x172>
 80103fe:	2b45      	cmp	r3, #69	; 0x45
 8010400:	d114      	bne.n	801042c <_strtod_l+0x19c>
 8010402:	b924      	cbnz	r4, 801040e <_strtod_l+0x17e>
 8010404:	b910      	cbnz	r0, 801040c <_strtod_l+0x17c>
 8010406:	9b06      	ldr	r3, [sp, #24]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d09e      	beq.n	801034a <_strtod_l+0xba>
 801040c:	2400      	movs	r4, #0
 801040e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8010410:	1c73      	adds	r3, r6, #1
 8010412:	931b      	str	r3, [sp, #108]	; 0x6c
 8010414:	7873      	ldrb	r3, [r6, #1]
 8010416:	2b2b      	cmp	r3, #43	; 0x2b
 8010418:	d078      	beq.n	801050c <_strtod_l+0x27c>
 801041a:	2b2d      	cmp	r3, #45	; 0x2d
 801041c:	d070      	beq.n	8010500 <_strtod_l+0x270>
 801041e:	f04f 0c00 	mov.w	ip, #0
 8010422:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8010426:	2f09      	cmp	r7, #9
 8010428:	d97c      	bls.n	8010524 <_strtod_l+0x294>
 801042a:	961b      	str	r6, [sp, #108]	; 0x6c
 801042c:	f04f 0e00 	mov.w	lr, #0
 8010430:	e09a      	b.n	8010568 <_strtod_l+0x2d8>
 8010432:	2300      	movs	r3, #0
 8010434:	e7c7      	b.n	80103c6 <_strtod_l+0x136>
 8010436:	9905      	ldr	r1, [sp, #20]
 8010438:	2908      	cmp	r1, #8
 801043a:	bfdd      	ittte	le
 801043c:	9907      	ldrle	r1, [sp, #28]
 801043e:	fb02 3301 	mlale	r3, r2, r1, r3
 8010442:	9307      	strle	r3, [sp, #28]
 8010444:	fb02 3505 	mlagt	r5, r2, r5, r3
 8010448:	9b05      	ldr	r3, [sp, #20]
 801044a:	3001      	adds	r0, #1
 801044c:	3301      	adds	r3, #1
 801044e:	9305      	str	r3, [sp, #20]
 8010450:	901b      	str	r0, [sp, #108]	; 0x6c
 8010452:	e7bf      	b.n	80103d4 <_strtod_l+0x144>
 8010454:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010456:	191a      	adds	r2, r3, r4
 8010458:	921b      	str	r2, [sp, #108]	; 0x6c
 801045a:	9a05      	ldr	r2, [sp, #20]
 801045c:	5d1b      	ldrb	r3, [r3, r4]
 801045e:	2a00      	cmp	r2, #0
 8010460:	d037      	beq.n	80104d2 <_strtod_l+0x242>
 8010462:	9c05      	ldr	r4, [sp, #20]
 8010464:	4602      	mov	r2, r0
 8010466:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801046a:	2909      	cmp	r1, #9
 801046c:	d913      	bls.n	8010496 <_strtod_l+0x206>
 801046e:	2101      	movs	r1, #1
 8010470:	9104      	str	r1, [sp, #16]
 8010472:	e7c2      	b.n	80103fa <_strtod_l+0x16a>
 8010474:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010476:	1c5a      	adds	r2, r3, #1
 8010478:	921b      	str	r2, [sp, #108]	; 0x6c
 801047a:	785b      	ldrb	r3, [r3, #1]
 801047c:	3001      	adds	r0, #1
 801047e:	2b30      	cmp	r3, #48	; 0x30
 8010480:	d0f8      	beq.n	8010474 <_strtod_l+0x1e4>
 8010482:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8010486:	2a08      	cmp	r2, #8
 8010488:	f200 84e4 	bhi.w	8010e54 <_strtod_l+0xbc4>
 801048c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801048e:	9208      	str	r2, [sp, #32]
 8010490:	4602      	mov	r2, r0
 8010492:	2000      	movs	r0, #0
 8010494:	4604      	mov	r4, r0
 8010496:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801049a:	f100 0101 	add.w	r1, r0, #1
 801049e:	d012      	beq.n	80104c6 <_strtod_l+0x236>
 80104a0:	440a      	add	r2, r1
 80104a2:	eb00 0c04 	add.w	ip, r0, r4
 80104a6:	4621      	mov	r1, r4
 80104a8:	270a      	movs	r7, #10
 80104aa:	458c      	cmp	ip, r1
 80104ac:	d113      	bne.n	80104d6 <_strtod_l+0x246>
 80104ae:	1821      	adds	r1, r4, r0
 80104b0:	2908      	cmp	r1, #8
 80104b2:	f104 0401 	add.w	r4, r4, #1
 80104b6:	4404      	add	r4, r0
 80104b8:	dc19      	bgt.n	80104ee <_strtod_l+0x25e>
 80104ba:	9b07      	ldr	r3, [sp, #28]
 80104bc:	210a      	movs	r1, #10
 80104be:	fb01 e303 	mla	r3, r1, r3, lr
 80104c2:	9307      	str	r3, [sp, #28]
 80104c4:	2100      	movs	r1, #0
 80104c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80104c8:	1c58      	adds	r0, r3, #1
 80104ca:	901b      	str	r0, [sp, #108]	; 0x6c
 80104cc:	785b      	ldrb	r3, [r3, #1]
 80104ce:	4608      	mov	r0, r1
 80104d0:	e7c9      	b.n	8010466 <_strtod_l+0x1d6>
 80104d2:	9805      	ldr	r0, [sp, #20]
 80104d4:	e7d3      	b.n	801047e <_strtod_l+0x1ee>
 80104d6:	2908      	cmp	r1, #8
 80104d8:	f101 0101 	add.w	r1, r1, #1
 80104dc:	dc03      	bgt.n	80104e6 <_strtod_l+0x256>
 80104de:	9b07      	ldr	r3, [sp, #28]
 80104e0:	437b      	muls	r3, r7
 80104e2:	9307      	str	r3, [sp, #28]
 80104e4:	e7e1      	b.n	80104aa <_strtod_l+0x21a>
 80104e6:	2910      	cmp	r1, #16
 80104e8:	bfd8      	it	le
 80104ea:	437d      	mulle	r5, r7
 80104ec:	e7dd      	b.n	80104aa <_strtod_l+0x21a>
 80104ee:	2c10      	cmp	r4, #16
 80104f0:	bfdc      	itt	le
 80104f2:	210a      	movle	r1, #10
 80104f4:	fb01 e505 	mlale	r5, r1, r5, lr
 80104f8:	e7e4      	b.n	80104c4 <_strtod_l+0x234>
 80104fa:	2301      	movs	r3, #1
 80104fc:	9304      	str	r3, [sp, #16]
 80104fe:	e781      	b.n	8010404 <_strtod_l+0x174>
 8010500:	f04f 0c01 	mov.w	ip, #1
 8010504:	1cb3      	adds	r3, r6, #2
 8010506:	931b      	str	r3, [sp, #108]	; 0x6c
 8010508:	78b3      	ldrb	r3, [r6, #2]
 801050a:	e78a      	b.n	8010422 <_strtod_l+0x192>
 801050c:	f04f 0c00 	mov.w	ip, #0
 8010510:	e7f8      	b.n	8010504 <_strtod_l+0x274>
 8010512:	bf00      	nop
 8010514:	080131ac 	.word	0x080131ac
 8010518:	7ff00000 	.word	0x7ff00000
 801051c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801051e:	1c5f      	adds	r7, r3, #1
 8010520:	971b      	str	r7, [sp, #108]	; 0x6c
 8010522:	785b      	ldrb	r3, [r3, #1]
 8010524:	2b30      	cmp	r3, #48	; 0x30
 8010526:	d0f9      	beq.n	801051c <_strtod_l+0x28c>
 8010528:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801052c:	2f08      	cmp	r7, #8
 801052e:	f63f af7d 	bhi.w	801042c <_strtod_l+0x19c>
 8010532:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8010536:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010538:	930a      	str	r3, [sp, #40]	; 0x28
 801053a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801053c:	1c5f      	adds	r7, r3, #1
 801053e:	971b      	str	r7, [sp, #108]	; 0x6c
 8010540:	785b      	ldrb	r3, [r3, #1]
 8010542:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8010546:	f1b8 0f09 	cmp.w	r8, #9
 801054a:	d937      	bls.n	80105bc <_strtod_l+0x32c>
 801054c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801054e:	1a7f      	subs	r7, r7, r1
 8010550:	2f08      	cmp	r7, #8
 8010552:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8010556:	dc37      	bgt.n	80105c8 <_strtod_l+0x338>
 8010558:	45be      	cmp	lr, r7
 801055a:	bfa8      	it	ge
 801055c:	46be      	movge	lr, r7
 801055e:	f1bc 0f00 	cmp.w	ip, #0
 8010562:	d001      	beq.n	8010568 <_strtod_l+0x2d8>
 8010564:	f1ce 0e00 	rsb	lr, lr, #0
 8010568:	2c00      	cmp	r4, #0
 801056a:	d151      	bne.n	8010610 <_strtod_l+0x380>
 801056c:	2800      	cmp	r0, #0
 801056e:	f47f aece 	bne.w	801030e <_strtod_l+0x7e>
 8010572:	9a06      	ldr	r2, [sp, #24]
 8010574:	2a00      	cmp	r2, #0
 8010576:	f47f aeca 	bne.w	801030e <_strtod_l+0x7e>
 801057a:	9a04      	ldr	r2, [sp, #16]
 801057c:	2a00      	cmp	r2, #0
 801057e:	f47f aee4 	bne.w	801034a <_strtod_l+0xba>
 8010582:	2b4e      	cmp	r3, #78	; 0x4e
 8010584:	d027      	beq.n	80105d6 <_strtod_l+0x346>
 8010586:	dc21      	bgt.n	80105cc <_strtod_l+0x33c>
 8010588:	2b49      	cmp	r3, #73	; 0x49
 801058a:	f47f aede 	bne.w	801034a <_strtod_l+0xba>
 801058e:	49a0      	ldr	r1, [pc, #640]	; (8010810 <_strtod_l+0x580>)
 8010590:	a81b      	add	r0, sp, #108	; 0x6c
 8010592:	f001 fdd7 	bl	8012144 <__match>
 8010596:	2800      	cmp	r0, #0
 8010598:	f43f aed7 	beq.w	801034a <_strtod_l+0xba>
 801059c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801059e:	499d      	ldr	r1, [pc, #628]	; (8010814 <_strtod_l+0x584>)
 80105a0:	3b01      	subs	r3, #1
 80105a2:	a81b      	add	r0, sp, #108	; 0x6c
 80105a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80105a6:	f001 fdcd 	bl	8012144 <__match>
 80105aa:	b910      	cbnz	r0, 80105b2 <_strtod_l+0x322>
 80105ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80105ae:	3301      	adds	r3, #1
 80105b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80105b2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8010828 <_strtod_l+0x598>
 80105b6:	f04f 0a00 	mov.w	sl, #0
 80105ba:	e6a8      	b.n	801030e <_strtod_l+0x7e>
 80105bc:	210a      	movs	r1, #10
 80105be:	fb01 3e0e 	mla	lr, r1, lr, r3
 80105c2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80105c6:	e7b8      	b.n	801053a <_strtod_l+0x2aa>
 80105c8:	46be      	mov	lr, r7
 80105ca:	e7c8      	b.n	801055e <_strtod_l+0x2ce>
 80105cc:	2b69      	cmp	r3, #105	; 0x69
 80105ce:	d0de      	beq.n	801058e <_strtod_l+0x2fe>
 80105d0:	2b6e      	cmp	r3, #110	; 0x6e
 80105d2:	f47f aeba 	bne.w	801034a <_strtod_l+0xba>
 80105d6:	4990      	ldr	r1, [pc, #576]	; (8010818 <_strtod_l+0x588>)
 80105d8:	a81b      	add	r0, sp, #108	; 0x6c
 80105da:	f001 fdb3 	bl	8012144 <__match>
 80105de:	2800      	cmp	r0, #0
 80105e0:	f43f aeb3 	beq.w	801034a <_strtod_l+0xba>
 80105e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	2b28      	cmp	r3, #40	; 0x28
 80105ea:	d10e      	bne.n	801060a <_strtod_l+0x37a>
 80105ec:	aa1e      	add	r2, sp, #120	; 0x78
 80105ee:	498b      	ldr	r1, [pc, #556]	; (801081c <_strtod_l+0x58c>)
 80105f0:	a81b      	add	r0, sp, #108	; 0x6c
 80105f2:	f001 fdbb 	bl	801216c <__hexnan>
 80105f6:	2805      	cmp	r0, #5
 80105f8:	d107      	bne.n	801060a <_strtod_l+0x37a>
 80105fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80105fc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8010600:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010604:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010608:	e681      	b.n	801030e <_strtod_l+0x7e>
 801060a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8010830 <_strtod_l+0x5a0>
 801060e:	e7d2      	b.n	80105b6 <_strtod_l+0x326>
 8010610:	ebae 0302 	sub.w	r3, lr, r2
 8010614:	9306      	str	r3, [sp, #24]
 8010616:	9b05      	ldr	r3, [sp, #20]
 8010618:	9807      	ldr	r0, [sp, #28]
 801061a:	2b00      	cmp	r3, #0
 801061c:	bf08      	it	eq
 801061e:	4623      	moveq	r3, r4
 8010620:	2c10      	cmp	r4, #16
 8010622:	9305      	str	r3, [sp, #20]
 8010624:	46a0      	mov	r8, r4
 8010626:	bfa8      	it	ge
 8010628:	f04f 0810 	movge.w	r8, #16
 801062c:	f7ef ff6a 	bl	8000504 <__aeabi_ui2d>
 8010630:	2c09      	cmp	r4, #9
 8010632:	4682      	mov	sl, r0
 8010634:	468b      	mov	fp, r1
 8010636:	dc13      	bgt.n	8010660 <_strtod_l+0x3d0>
 8010638:	9b06      	ldr	r3, [sp, #24]
 801063a:	2b00      	cmp	r3, #0
 801063c:	f43f ae67 	beq.w	801030e <_strtod_l+0x7e>
 8010640:	9b06      	ldr	r3, [sp, #24]
 8010642:	dd7a      	ble.n	801073a <_strtod_l+0x4aa>
 8010644:	2b16      	cmp	r3, #22
 8010646:	dc61      	bgt.n	801070c <_strtod_l+0x47c>
 8010648:	4a75      	ldr	r2, [pc, #468]	; (8010820 <_strtod_l+0x590>)
 801064a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801064e:	e9de 0100 	ldrd	r0, r1, [lr]
 8010652:	4652      	mov	r2, sl
 8010654:	465b      	mov	r3, fp
 8010656:	f7ef ffcf 	bl	80005f8 <__aeabi_dmul>
 801065a:	4682      	mov	sl, r0
 801065c:	468b      	mov	fp, r1
 801065e:	e656      	b.n	801030e <_strtod_l+0x7e>
 8010660:	4b6f      	ldr	r3, [pc, #444]	; (8010820 <_strtod_l+0x590>)
 8010662:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010666:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801066a:	f7ef ffc5 	bl	80005f8 <__aeabi_dmul>
 801066e:	4606      	mov	r6, r0
 8010670:	4628      	mov	r0, r5
 8010672:	460f      	mov	r7, r1
 8010674:	f7ef ff46 	bl	8000504 <__aeabi_ui2d>
 8010678:	4602      	mov	r2, r0
 801067a:	460b      	mov	r3, r1
 801067c:	4630      	mov	r0, r6
 801067e:	4639      	mov	r1, r7
 8010680:	f7ef fe04 	bl	800028c <__adddf3>
 8010684:	2c0f      	cmp	r4, #15
 8010686:	4682      	mov	sl, r0
 8010688:	468b      	mov	fp, r1
 801068a:	ddd5      	ble.n	8010638 <_strtod_l+0x3a8>
 801068c:	9b06      	ldr	r3, [sp, #24]
 801068e:	eba4 0808 	sub.w	r8, r4, r8
 8010692:	4498      	add	r8, r3
 8010694:	f1b8 0f00 	cmp.w	r8, #0
 8010698:	f340 8096 	ble.w	80107c8 <_strtod_l+0x538>
 801069c:	f018 030f 	ands.w	r3, r8, #15
 80106a0:	d00a      	beq.n	80106b8 <_strtod_l+0x428>
 80106a2:	495f      	ldr	r1, [pc, #380]	; (8010820 <_strtod_l+0x590>)
 80106a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80106a8:	4652      	mov	r2, sl
 80106aa:	465b      	mov	r3, fp
 80106ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106b0:	f7ef ffa2 	bl	80005f8 <__aeabi_dmul>
 80106b4:	4682      	mov	sl, r0
 80106b6:	468b      	mov	fp, r1
 80106b8:	f038 080f 	bics.w	r8, r8, #15
 80106bc:	d073      	beq.n	80107a6 <_strtod_l+0x516>
 80106be:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80106c2:	dd47      	ble.n	8010754 <_strtod_l+0x4c4>
 80106c4:	2400      	movs	r4, #0
 80106c6:	46a0      	mov	r8, r4
 80106c8:	9407      	str	r4, [sp, #28]
 80106ca:	9405      	str	r4, [sp, #20]
 80106cc:	2322      	movs	r3, #34	; 0x22
 80106ce:	f8df b158 	ldr.w	fp, [pc, #344]	; 8010828 <_strtod_l+0x598>
 80106d2:	f8c9 3000 	str.w	r3, [r9]
 80106d6:	f04f 0a00 	mov.w	sl, #0
 80106da:	9b07      	ldr	r3, [sp, #28]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	f43f ae16 	beq.w	801030e <_strtod_l+0x7e>
 80106e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80106e4:	4648      	mov	r0, r9
 80106e6:	f001 fe2d 	bl	8012344 <_Bfree>
 80106ea:	9905      	ldr	r1, [sp, #20]
 80106ec:	4648      	mov	r0, r9
 80106ee:	f001 fe29 	bl	8012344 <_Bfree>
 80106f2:	4641      	mov	r1, r8
 80106f4:	4648      	mov	r0, r9
 80106f6:	f001 fe25 	bl	8012344 <_Bfree>
 80106fa:	9907      	ldr	r1, [sp, #28]
 80106fc:	4648      	mov	r0, r9
 80106fe:	f001 fe21 	bl	8012344 <_Bfree>
 8010702:	4621      	mov	r1, r4
 8010704:	4648      	mov	r0, r9
 8010706:	f001 fe1d 	bl	8012344 <_Bfree>
 801070a:	e600      	b.n	801030e <_strtod_l+0x7e>
 801070c:	9a06      	ldr	r2, [sp, #24]
 801070e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8010712:	4293      	cmp	r3, r2
 8010714:	dbba      	blt.n	801068c <_strtod_l+0x3fc>
 8010716:	4d42      	ldr	r5, [pc, #264]	; (8010820 <_strtod_l+0x590>)
 8010718:	f1c4 040f 	rsb	r4, r4, #15
 801071c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8010720:	4652      	mov	r2, sl
 8010722:	465b      	mov	r3, fp
 8010724:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010728:	f7ef ff66 	bl	80005f8 <__aeabi_dmul>
 801072c:	9b06      	ldr	r3, [sp, #24]
 801072e:	1b1c      	subs	r4, r3, r4
 8010730:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8010734:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010738:	e78d      	b.n	8010656 <_strtod_l+0x3c6>
 801073a:	f113 0f16 	cmn.w	r3, #22
 801073e:	dba5      	blt.n	801068c <_strtod_l+0x3fc>
 8010740:	4a37      	ldr	r2, [pc, #220]	; (8010820 <_strtod_l+0x590>)
 8010742:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8010746:	e9d2 2300 	ldrd	r2, r3, [r2]
 801074a:	4650      	mov	r0, sl
 801074c:	4659      	mov	r1, fp
 801074e:	f7f0 f87d 	bl	800084c <__aeabi_ddiv>
 8010752:	e782      	b.n	801065a <_strtod_l+0x3ca>
 8010754:	2300      	movs	r3, #0
 8010756:	4e33      	ldr	r6, [pc, #204]	; (8010824 <_strtod_l+0x594>)
 8010758:	ea4f 1828 	mov.w	r8, r8, asr #4
 801075c:	4650      	mov	r0, sl
 801075e:	4659      	mov	r1, fp
 8010760:	461d      	mov	r5, r3
 8010762:	f1b8 0f01 	cmp.w	r8, #1
 8010766:	dc21      	bgt.n	80107ac <_strtod_l+0x51c>
 8010768:	b10b      	cbz	r3, 801076e <_strtod_l+0x4de>
 801076a:	4682      	mov	sl, r0
 801076c:	468b      	mov	fp, r1
 801076e:	4b2d      	ldr	r3, [pc, #180]	; (8010824 <_strtod_l+0x594>)
 8010770:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010774:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8010778:	4652      	mov	r2, sl
 801077a:	465b      	mov	r3, fp
 801077c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010780:	f7ef ff3a 	bl	80005f8 <__aeabi_dmul>
 8010784:	4b28      	ldr	r3, [pc, #160]	; (8010828 <_strtod_l+0x598>)
 8010786:	460a      	mov	r2, r1
 8010788:	400b      	ands	r3, r1
 801078a:	4928      	ldr	r1, [pc, #160]	; (801082c <_strtod_l+0x59c>)
 801078c:	428b      	cmp	r3, r1
 801078e:	4682      	mov	sl, r0
 8010790:	d898      	bhi.n	80106c4 <_strtod_l+0x434>
 8010792:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010796:	428b      	cmp	r3, r1
 8010798:	bf86      	itte	hi
 801079a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8010834 <_strtod_l+0x5a4>
 801079e:	f04f 3aff 	movhi.w	sl, #4294967295
 80107a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80107a6:	2300      	movs	r3, #0
 80107a8:	9304      	str	r3, [sp, #16]
 80107aa:	e077      	b.n	801089c <_strtod_l+0x60c>
 80107ac:	f018 0f01 	tst.w	r8, #1
 80107b0:	d006      	beq.n	80107c0 <_strtod_l+0x530>
 80107b2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80107b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ba:	f7ef ff1d 	bl	80005f8 <__aeabi_dmul>
 80107be:	2301      	movs	r3, #1
 80107c0:	3501      	adds	r5, #1
 80107c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80107c6:	e7cc      	b.n	8010762 <_strtod_l+0x4d2>
 80107c8:	d0ed      	beq.n	80107a6 <_strtod_l+0x516>
 80107ca:	f1c8 0800 	rsb	r8, r8, #0
 80107ce:	f018 020f 	ands.w	r2, r8, #15
 80107d2:	d00a      	beq.n	80107ea <_strtod_l+0x55a>
 80107d4:	4b12      	ldr	r3, [pc, #72]	; (8010820 <_strtod_l+0x590>)
 80107d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80107da:	4650      	mov	r0, sl
 80107dc:	4659      	mov	r1, fp
 80107de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e2:	f7f0 f833 	bl	800084c <__aeabi_ddiv>
 80107e6:	4682      	mov	sl, r0
 80107e8:	468b      	mov	fp, r1
 80107ea:	ea5f 1828 	movs.w	r8, r8, asr #4
 80107ee:	d0da      	beq.n	80107a6 <_strtod_l+0x516>
 80107f0:	f1b8 0f1f 	cmp.w	r8, #31
 80107f4:	dd20      	ble.n	8010838 <_strtod_l+0x5a8>
 80107f6:	2400      	movs	r4, #0
 80107f8:	46a0      	mov	r8, r4
 80107fa:	9407      	str	r4, [sp, #28]
 80107fc:	9405      	str	r4, [sp, #20]
 80107fe:	2322      	movs	r3, #34	; 0x22
 8010800:	f04f 0a00 	mov.w	sl, #0
 8010804:	f04f 0b00 	mov.w	fp, #0
 8010808:	f8c9 3000 	str.w	r3, [r9]
 801080c:	e765      	b.n	80106da <_strtod_l+0x44a>
 801080e:	bf00      	nop
 8010810:	08013175 	.word	0x08013175
 8010814:	08013203 	.word	0x08013203
 8010818:	0801317d 	.word	0x0801317d
 801081c:	080131c0 	.word	0x080131c0
 8010820:	08013240 	.word	0x08013240
 8010824:	08013218 	.word	0x08013218
 8010828:	7ff00000 	.word	0x7ff00000
 801082c:	7ca00000 	.word	0x7ca00000
 8010830:	fff80000 	.word	0xfff80000
 8010834:	7fefffff 	.word	0x7fefffff
 8010838:	f018 0310 	ands.w	r3, r8, #16
 801083c:	bf18      	it	ne
 801083e:	236a      	movne	r3, #106	; 0x6a
 8010840:	4da0      	ldr	r5, [pc, #640]	; (8010ac4 <_strtod_l+0x834>)
 8010842:	9304      	str	r3, [sp, #16]
 8010844:	4650      	mov	r0, sl
 8010846:	4659      	mov	r1, fp
 8010848:	2300      	movs	r3, #0
 801084a:	f1b8 0f00 	cmp.w	r8, #0
 801084e:	f300 810a 	bgt.w	8010a66 <_strtod_l+0x7d6>
 8010852:	b10b      	cbz	r3, 8010858 <_strtod_l+0x5c8>
 8010854:	4682      	mov	sl, r0
 8010856:	468b      	mov	fp, r1
 8010858:	9b04      	ldr	r3, [sp, #16]
 801085a:	b1bb      	cbz	r3, 801088c <_strtod_l+0x5fc>
 801085c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010860:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010864:	2b00      	cmp	r3, #0
 8010866:	4659      	mov	r1, fp
 8010868:	dd10      	ble.n	801088c <_strtod_l+0x5fc>
 801086a:	2b1f      	cmp	r3, #31
 801086c:	f340 8107 	ble.w	8010a7e <_strtod_l+0x7ee>
 8010870:	2b34      	cmp	r3, #52	; 0x34
 8010872:	bfde      	ittt	le
 8010874:	3b20      	suble	r3, #32
 8010876:	f04f 32ff 	movle.w	r2, #4294967295
 801087a:	fa02 f303 	lslle.w	r3, r2, r3
 801087e:	f04f 0a00 	mov.w	sl, #0
 8010882:	bfcc      	ite	gt
 8010884:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010888:	ea03 0b01 	andle.w	fp, r3, r1
 801088c:	2200      	movs	r2, #0
 801088e:	2300      	movs	r3, #0
 8010890:	4650      	mov	r0, sl
 8010892:	4659      	mov	r1, fp
 8010894:	f7f0 f918 	bl	8000ac8 <__aeabi_dcmpeq>
 8010898:	2800      	cmp	r0, #0
 801089a:	d1ac      	bne.n	80107f6 <_strtod_l+0x566>
 801089c:	9b07      	ldr	r3, [sp, #28]
 801089e:	9300      	str	r3, [sp, #0]
 80108a0:	9a05      	ldr	r2, [sp, #20]
 80108a2:	9908      	ldr	r1, [sp, #32]
 80108a4:	4623      	mov	r3, r4
 80108a6:	4648      	mov	r0, r9
 80108a8:	f001 fd9e 	bl	80123e8 <__s2b>
 80108ac:	9007      	str	r0, [sp, #28]
 80108ae:	2800      	cmp	r0, #0
 80108b0:	f43f af08 	beq.w	80106c4 <_strtod_l+0x434>
 80108b4:	9a06      	ldr	r2, [sp, #24]
 80108b6:	9b06      	ldr	r3, [sp, #24]
 80108b8:	2a00      	cmp	r2, #0
 80108ba:	f1c3 0300 	rsb	r3, r3, #0
 80108be:	bfa8      	it	ge
 80108c0:	2300      	movge	r3, #0
 80108c2:	930e      	str	r3, [sp, #56]	; 0x38
 80108c4:	2400      	movs	r4, #0
 80108c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80108ca:	9316      	str	r3, [sp, #88]	; 0x58
 80108cc:	46a0      	mov	r8, r4
 80108ce:	9b07      	ldr	r3, [sp, #28]
 80108d0:	4648      	mov	r0, r9
 80108d2:	6859      	ldr	r1, [r3, #4]
 80108d4:	f001 fd02 	bl	80122dc <_Balloc>
 80108d8:	9005      	str	r0, [sp, #20]
 80108da:	2800      	cmp	r0, #0
 80108dc:	f43f aef6 	beq.w	80106cc <_strtod_l+0x43c>
 80108e0:	9b07      	ldr	r3, [sp, #28]
 80108e2:	691a      	ldr	r2, [r3, #16]
 80108e4:	3202      	adds	r2, #2
 80108e6:	f103 010c 	add.w	r1, r3, #12
 80108ea:	0092      	lsls	r2, r2, #2
 80108ec:	300c      	adds	r0, #12
 80108ee:	f7fe fd6f 	bl	800f3d0 <memcpy>
 80108f2:	aa1e      	add	r2, sp, #120	; 0x78
 80108f4:	a91d      	add	r1, sp, #116	; 0x74
 80108f6:	ec4b ab10 	vmov	d0, sl, fp
 80108fa:	4648      	mov	r0, r9
 80108fc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010900:	f002 f82e 	bl	8012960 <__d2b>
 8010904:	901c      	str	r0, [sp, #112]	; 0x70
 8010906:	2800      	cmp	r0, #0
 8010908:	f43f aee0 	beq.w	80106cc <_strtod_l+0x43c>
 801090c:	2101      	movs	r1, #1
 801090e:	4648      	mov	r0, r9
 8010910:	f001 fdf6 	bl	8012500 <__i2b>
 8010914:	4680      	mov	r8, r0
 8010916:	2800      	cmp	r0, #0
 8010918:	f43f aed8 	beq.w	80106cc <_strtod_l+0x43c>
 801091c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801091e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010920:	2e00      	cmp	r6, #0
 8010922:	bfab      	itete	ge
 8010924:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8010926:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8010928:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801092a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801092c:	bfac      	ite	ge
 801092e:	18f7      	addge	r7, r6, r3
 8010930:	1b9d      	sublt	r5, r3, r6
 8010932:	9b04      	ldr	r3, [sp, #16]
 8010934:	1af6      	subs	r6, r6, r3
 8010936:	4416      	add	r6, r2
 8010938:	4b63      	ldr	r3, [pc, #396]	; (8010ac8 <_strtod_l+0x838>)
 801093a:	3e01      	subs	r6, #1
 801093c:	429e      	cmp	r6, r3
 801093e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010942:	f280 80af 	bge.w	8010aa4 <_strtod_l+0x814>
 8010946:	1b9b      	subs	r3, r3, r6
 8010948:	2b1f      	cmp	r3, #31
 801094a:	eba2 0203 	sub.w	r2, r2, r3
 801094e:	f04f 0101 	mov.w	r1, #1
 8010952:	f300 809b 	bgt.w	8010a8c <_strtod_l+0x7fc>
 8010956:	fa01 f303 	lsl.w	r3, r1, r3
 801095a:	930f      	str	r3, [sp, #60]	; 0x3c
 801095c:	2300      	movs	r3, #0
 801095e:	930a      	str	r3, [sp, #40]	; 0x28
 8010960:	18be      	adds	r6, r7, r2
 8010962:	9b04      	ldr	r3, [sp, #16]
 8010964:	42b7      	cmp	r7, r6
 8010966:	4415      	add	r5, r2
 8010968:	441d      	add	r5, r3
 801096a:	463b      	mov	r3, r7
 801096c:	bfa8      	it	ge
 801096e:	4633      	movge	r3, r6
 8010970:	42ab      	cmp	r3, r5
 8010972:	bfa8      	it	ge
 8010974:	462b      	movge	r3, r5
 8010976:	2b00      	cmp	r3, #0
 8010978:	bfc2      	ittt	gt
 801097a:	1af6      	subgt	r6, r6, r3
 801097c:	1aed      	subgt	r5, r5, r3
 801097e:	1aff      	subgt	r7, r7, r3
 8010980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010982:	b1bb      	cbz	r3, 80109b4 <_strtod_l+0x724>
 8010984:	4641      	mov	r1, r8
 8010986:	461a      	mov	r2, r3
 8010988:	4648      	mov	r0, r9
 801098a:	f001 fe59 	bl	8012640 <__pow5mult>
 801098e:	4680      	mov	r8, r0
 8010990:	2800      	cmp	r0, #0
 8010992:	f43f ae9b 	beq.w	80106cc <_strtod_l+0x43c>
 8010996:	4601      	mov	r1, r0
 8010998:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801099a:	4648      	mov	r0, r9
 801099c:	f001 fdb9 	bl	8012512 <__multiply>
 80109a0:	900c      	str	r0, [sp, #48]	; 0x30
 80109a2:	2800      	cmp	r0, #0
 80109a4:	f43f ae92 	beq.w	80106cc <_strtod_l+0x43c>
 80109a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80109aa:	4648      	mov	r0, r9
 80109ac:	f001 fcca 	bl	8012344 <_Bfree>
 80109b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109b2:	931c      	str	r3, [sp, #112]	; 0x70
 80109b4:	2e00      	cmp	r6, #0
 80109b6:	dc7a      	bgt.n	8010aae <_strtod_l+0x81e>
 80109b8:	9b06      	ldr	r3, [sp, #24]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	dd08      	ble.n	80109d0 <_strtod_l+0x740>
 80109be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80109c0:	9905      	ldr	r1, [sp, #20]
 80109c2:	4648      	mov	r0, r9
 80109c4:	f001 fe3c 	bl	8012640 <__pow5mult>
 80109c8:	9005      	str	r0, [sp, #20]
 80109ca:	2800      	cmp	r0, #0
 80109cc:	f43f ae7e 	beq.w	80106cc <_strtod_l+0x43c>
 80109d0:	2d00      	cmp	r5, #0
 80109d2:	dd08      	ble.n	80109e6 <_strtod_l+0x756>
 80109d4:	462a      	mov	r2, r5
 80109d6:	9905      	ldr	r1, [sp, #20]
 80109d8:	4648      	mov	r0, r9
 80109da:	f001 fe7f 	bl	80126dc <__lshift>
 80109de:	9005      	str	r0, [sp, #20]
 80109e0:	2800      	cmp	r0, #0
 80109e2:	f43f ae73 	beq.w	80106cc <_strtod_l+0x43c>
 80109e6:	2f00      	cmp	r7, #0
 80109e8:	dd08      	ble.n	80109fc <_strtod_l+0x76c>
 80109ea:	4641      	mov	r1, r8
 80109ec:	463a      	mov	r2, r7
 80109ee:	4648      	mov	r0, r9
 80109f0:	f001 fe74 	bl	80126dc <__lshift>
 80109f4:	4680      	mov	r8, r0
 80109f6:	2800      	cmp	r0, #0
 80109f8:	f43f ae68 	beq.w	80106cc <_strtod_l+0x43c>
 80109fc:	9a05      	ldr	r2, [sp, #20]
 80109fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010a00:	4648      	mov	r0, r9
 8010a02:	f001 fed9 	bl	80127b8 <__mdiff>
 8010a06:	4604      	mov	r4, r0
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	f43f ae5f 	beq.w	80106cc <_strtod_l+0x43c>
 8010a0e:	68c3      	ldr	r3, [r0, #12]
 8010a10:	930c      	str	r3, [sp, #48]	; 0x30
 8010a12:	2300      	movs	r3, #0
 8010a14:	60c3      	str	r3, [r0, #12]
 8010a16:	4641      	mov	r1, r8
 8010a18:	f001 feb4 	bl	8012784 <__mcmp>
 8010a1c:	2800      	cmp	r0, #0
 8010a1e:	da55      	bge.n	8010acc <_strtod_l+0x83c>
 8010a20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a22:	b9e3      	cbnz	r3, 8010a5e <_strtod_l+0x7ce>
 8010a24:	f1ba 0f00 	cmp.w	sl, #0
 8010a28:	d119      	bne.n	8010a5e <_strtod_l+0x7ce>
 8010a2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a2e:	b9b3      	cbnz	r3, 8010a5e <_strtod_l+0x7ce>
 8010a30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010a34:	0d1b      	lsrs	r3, r3, #20
 8010a36:	051b      	lsls	r3, r3, #20
 8010a38:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010a3c:	d90f      	bls.n	8010a5e <_strtod_l+0x7ce>
 8010a3e:	6963      	ldr	r3, [r4, #20]
 8010a40:	b913      	cbnz	r3, 8010a48 <_strtod_l+0x7b8>
 8010a42:	6923      	ldr	r3, [r4, #16]
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	dd0a      	ble.n	8010a5e <_strtod_l+0x7ce>
 8010a48:	4621      	mov	r1, r4
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	4648      	mov	r0, r9
 8010a4e:	f001 fe45 	bl	80126dc <__lshift>
 8010a52:	4641      	mov	r1, r8
 8010a54:	4604      	mov	r4, r0
 8010a56:	f001 fe95 	bl	8012784 <__mcmp>
 8010a5a:	2800      	cmp	r0, #0
 8010a5c:	dc67      	bgt.n	8010b2e <_strtod_l+0x89e>
 8010a5e:	9b04      	ldr	r3, [sp, #16]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d171      	bne.n	8010b48 <_strtod_l+0x8b8>
 8010a64:	e63d      	b.n	80106e2 <_strtod_l+0x452>
 8010a66:	f018 0f01 	tst.w	r8, #1
 8010a6a:	d004      	beq.n	8010a76 <_strtod_l+0x7e6>
 8010a6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010a70:	f7ef fdc2 	bl	80005f8 <__aeabi_dmul>
 8010a74:	2301      	movs	r3, #1
 8010a76:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010a7a:	3508      	adds	r5, #8
 8010a7c:	e6e5      	b.n	801084a <_strtod_l+0x5ba>
 8010a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8010a82:	fa02 f303 	lsl.w	r3, r2, r3
 8010a86:	ea03 0a0a 	and.w	sl, r3, sl
 8010a8a:	e6ff      	b.n	801088c <_strtod_l+0x5fc>
 8010a8c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010a90:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010a94:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010a98:	36e2      	adds	r6, #226	; 0xe2
 8010a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8010a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8010aa0:	910f      	str	r1, [sp, #60]	; 0x3c
 8010aa2:	e75d      	b.n	8010960 <_strtod_l+0x6d0>
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	930f      	str	r3, [sp, #60]	; 0x3c
 8010aac:	e758      	b.n	8010960 <_strtod_l+0x6d0>
 8010aae:	4632      	mov	r2, r6
 8010ab0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010ab2:	4648      	mov	r0, r9
 8010ab4:	f001 fe12 	bl	80126dc <__lshift>
 8010ab8:	901c      	str	r0, [sp, #112]	; 0x70
 8010aba:	2800      	cmp	r0, #0
 8010abc:	f47f af7c 	bne.w	80109b8 <_strtod_l+0x728>
 8010ac0:	e604      	b.n	80106cc <_strtod_l+0x43c>
 8010ac2:	bf00      	nop
 8010ac4:	080131d8 	.word	0x080131d8
 8010ac8:	fffffc02 	.word	0xfffffc02
 8010acc:	465d      	mov	r5, fp
 8010ace:	f040 8086 	bne.w	8010bde <_strtod_l+0x94e>
 8010ad2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ad4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ad8:	b32a      	cbz	r2, 8010b26 <_strtod_l+0x896>
 8010ada:	4aaf      	ldr	r2, [pc, #700]	; (8010d98 <_strtod_l+0xb08>)
 8010adc:	4293      	cmp	r3, r2
 8010ade:	d153      	bne.n	8010b88 <_strtod_l+0x8f8>
 8010ae0:	9b04      	ldr	r3, [sp, #16]
 8010ae2:	4650      	mov	r0, sl
 8010ae4:	b1d3      	cbz	r3, 8010b1c <_strtod_l+0x88c>
 8010ae6:	4aad      	ldr	r2, [pc, #692]	; (8010d9c <_strtod_l+0xb0c>)
 8010ae8:	402a      	ands	r2, r5
 8010aea:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8010aee:	f04f 31ff 	mov.w	r1, #4294967295
 8010af2:	d816      	bhi.n	8010b22 <_strtod_l+0x892>
 8010af4:	0d12      	lsrs	r2, r2, #20
 8010af6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010afa:	fa01 f303 	lsl.w	r3, r1, r3
 8010afe:	4298      	cmp	r0, r3
 8010b00:	d142      	bne.n	8010b88 <_strtod_l+0x8f8>
 8010b02:	4ba7      	ldr	r3, [pc, #668]	; (8010da0 <_strtod_l+0xb10>)
 8010b04:	429d      	cmp	r5, r3
 8010b06:	d102      	bne.n	8010b0e <_strtod_l+0x87e>
 8010b08:	3001      	adds	r0, #1
 8010b0a:	f43f addf 	beq.w	80106cc <_strtod_l+0x43c>
 8010b0e:	4ba3      	ldr	r3, [pc, #652]	; (8010d9c <_strtod_l+0xb0c>)
 8010b10:	402b      	ands	r3, r5
 8010b12:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010b16:	f04f 0a00 	mov.w	sl, #0
 8010b1a:	e7a0      	b.n	8010a5e <_strtod_l+0x7ce>
 8010b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8010b20:	e7ed      	b.n	8010afe <_strtod_l+0x86e>
 8010b22:	460b      	mov	r3, r1
 8010b24:	e7eb      	b.n	8010afe <_strtod_l+0x86e>
 8010b26:	bb7b      	cbnz	r3, 8010b88 <_strtod_l+0x8f8>
 8010b28:	f1ba 0f00 	cmp.w	sl, #0
 8010b2c:	d12c      	bne.n	8010b88 <_strtod_l+0x8f8>
 8010b2e:	9904      	ldr	r1, [sp, #16]
 8010b30:	4a9a      	ldr	r2, [pc, #616]	; (8010d9c <_strtod_l+0xb0c>)
 8010b32:	465b      	mov	r3, fp
 8010b34:	b1f1      	cbz	r1, 8010b74 <_strtod_l+0x8e4>
 8010b36:	ea02 010b 	and.w	r1, r2, fp
 8010b3a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010b3e:	dc19      	bgt.n	8010b74 <_strtod_l+0x8e4>
 8010b40:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010b44:	f77f ae5b 	ble.w	80107fe <_strtod_l+0x56e>
 8010b48:	4a96      	ldr	r2, [pc, #600]	; (8010da4 <_strtod_l+0xb14>)
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8010b50:	4650      	mov	r0, sl
 8010b52:	4659      	mov	r1, fp
 8010b54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010b58:	f7ef fd4e 	bl	80005f8 <__aeabi_dmul>
 8010b5c:	4682      	mov	sl, r0
 8010b5e:	468b      	mov	fp, r1
 8010b60:	2900      	cmp	r1, #0
 8010b62:	f47f adbe 	bne.w	80106e2 <_strtod_l+0x452>
 8010b66:	2800      	cmp	r0, #0
 8010b68:	f47f adbb 	bne.w	80106e2 <_strtod_l+0x452>
 8010b6c:	2322      	movs	r3, #34	; 0x22
 8010b6e:	f8c9 3000 	str.w	r3, [r9]
 8010b72:	e5b6      	b.n	80106e2 <_strtod_l+0x452>
 8010b74:	4013      	ands	r3, r2
 8010b76:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010b7a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010b7e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010b82:	f04f 3aff 	mov.w	sl, #4294967295
 8010b86:	e76a      	b.n	8010a5e <_strtod_l+0x7ce>
 8010b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b8a:	b193      	cbz	r3, 8010bb2 <_strtod_l+0x922>
 8010b8c:	422b      	tst	r3, r5
 8010b8e:	f43f af66 	beq.w	8010a5e <_strtod_l+0x7ce>
 8010b92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b94:	9a04      	ldr	r2, [sp, #16]
 8010b96:	4650      	mov	r0, sl
 8010b98:	4659      	mov	r1, fp
 8010b9a:	b173      	cbz	r3, 8010bba <_strtod_l+0x92a>
 8010b9c:	f7ff fb5a 	bl	8010254 <sulp>
 8010ba0:	4602      	mov	r2, r0
 8010ba2:	460b      	mov	r3, r1
 8010ba4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010ba8:	f7ef fb70 	bl	800028c <__adddf3>
 8010bac:	4682      	mov	sl, r0
 8010bae:	468b      	mov	fp, r1
 8010bb0:	e755      	b.n	8010a5e <_strtod_l+0x7ce>
 8010bb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010bb4:	ea13 0f0a 	tst.w	r3, sl
 8010bb8:	e7e9      	b.n	8010b8e <_strtod_l+0x8fe>
 8010bba:	f7ff fb4b 	bl	8010254 <sulp>
 8010bbe:	4602      	mov	r2, r0
 8010bc0:	460b      	mov	r3, r1
 8010bc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010bc6:	f7ef fb5f 	bl	8000288 <__aeabi_dsub>
 8010bca:	2200      	movs	r2, #0
 8010bcc:	2300      	movs	r3, #0
 8010bce:	4682      	mov	sl, r0
 8010bd0:	468b      	mov	fp, r1
 8010bd2:	f7ef ff79 	bl	8000ac8 <__aeabi_dcmpeq>
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	f47f ae11 	bne.w	80107fe <_strtod_l+0x56e>
 8010bdc:	e73f      	b.n	8010a5e <_strtod_l+0x7ce>
 8010bde:	4641      	mov	r1, r8
 8010be0:	4620      	mov	r0, r4
 8010be2:	f001 ff0c 	bl	80129fe <__ratio>
 8010be6:	ec57 6b10 	vmov	r6, r7, d0
 8010bea:	2200      	movs	r2, #0
 8010bec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010bf0:	ee10 0a10 	vmov	r0, s0
 8010bf4:	4639      	mov	r1, r7
 8010bf6:	f7ef ff7b 	bl	8000af0 <__aeabi_dcmple>
 8010bfa:	2800      	cmp	r0, #0
 8010bfc:	d077      	beq.n	8010cee <_strtod_l+0xa5e>
 8010bfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d04a      	beq.n	8010c9a <_strtod_l+0xa0a>
 8010c04:	4b68      	ldr	r3, [pc, #416]	; (8010da8 <_strtod_l+0xb18>)
 8010c06:	2200      	movs	r2, #0
 8010c08:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010c0c:	4f66      	ldr	r7, [pc, #408]	; (8010da8 <_strtod_l+0xb18>)
 8010c0e:	2600      	movs	r6, #0
 8010c10:	4b62      	ldr	r3, [pc, #392]	; (8010d9c <_strtod_l+0xb0c>)
 8010c12:	402b      	ands	r3, r5
 8010c14:	930f      	str	r3, [sp, #60]	; 0x3c
 8010c16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010c18:	4b64      	ldr	r3, [pc, #400]	; (8010dac <_strtod_l+0xb1c>)
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	f040 80ce 	bne.w	8010dbc <_strtod_l+0xb2c>
 8010c20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010c24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010c28:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8010c2c:	ec4b ab10 	vmov	d0, sl, fp
 8010c30:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8010c34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010c38:	f001 fe1c 	bl	8012874 <__ulp>
 8010c3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010c40:	ec53 2b10 	vmov	r2, r3, d0
 8010c44:	f7ef fcd8 	bl	80005f8 <__aeabi_dmul>
 8010c48:	4652      	mov	r2, sl
 8010c4a:	465b      	mov	r3, fp
 8010c4c:	f7ef fb1e 	bl	800028c <__adddf3>
 8010c50:	460b      	mov	r3, r1
 8010c52:	4952      	ldr	r1, [pc, #328]	; (8010d9c <_strtod_l+0xb0c>)
 8010c54:	4a56      	ldr	r2, [pc, #344]	; (8010db0 <_strtod_l+0xb20>)
 8010c56:	4019      	ands	r1, r3
 8010c58:	4291      	cmp	r1, r2
 8010c5a:	4682      	mov	sl, r0
 8010c5c:	d95b      	bls.n	8010d16 <_strtod_l+0xa86>
 8010c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c60:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010c64:	4293      	cmp	r3, r2
 8010c66:	d103      	bne.n	8010c70 <_strtod_l+0x9e0>
 8010c68:	9b08      	ldr	r3, [sp, #32]
 8010c6a:	3301      	adds	r3, #1
 8010c6c:	f43f ad2e 	beq.w	80106cc <_strtod_l+0x43c>
 8010c70:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8010da0 <_strtod_l+0xb10>
 8010c74:	f04f 3aff 	mov.w	sl, #4294967295
 8010c78:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010c7a:	4648      	mov	r0, r9
 8010c7c:	f001 fb62 	bl	8012344 <_Bfree>
 8010c80:	9905      	ldr	r1, [sp, #20]
 8010c82:	4648      	mov	r0, r9
 8010c84:	f001 fb5e 	bl	8012344 <_Bfree>
 8010c88:	4641      	mov	r1, r8
 8010c8a:	4648      	mov	r0, r9
 8010c8c:	f001 fb5a 	bl	8012344 <_Bfree>
 8010c90:	4621      	mov	r1, r4
 8010c92:	4648      	mov	r0, r9
 8010c94:	f001 fb56 	bl	8012344 <_Bfree>
 8010c98:	e619      	b.n	80108ce <_strtod_l+0x63e>
 8010c9a:	f1ba 0f00 	cmp.w	sl, #0
 8010c9e:	d11a      	bne.n	8010cd6 <_strtod_l+0xa46>
 8010ca0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ca4:	b9eb      	cbnz	r3, 8010ce2 <_strtod_l+0xa52>
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	4b3f      	ldr	r3, [pc, #252]	; (8010da8 <_strtod_l+0xb18>)
 8010caa:	4630      	mov	r0, r6
 8010cac:	4639      	mov	r1, r7
 8010cae:	f7ef ff15 	bl	8000adc <__aeabi_dcmplt>
 8010cb2:	b9c8      	cbnz	r0, 8010ce8 <_strtod_l+0xa58>
 8010cb4:	4630      	mov	r0, r6
 8010cb6:	4639      	mov	r1, r7
 8010cb8:	2200      	movs	r2, #0
 8010cba:	4b3e      	ldr	r3, [pc, #248]	; (8010db4 <_strtod_l+0xb24>)
 8010cbc:	f7ef fc9c 	bl	80005f8 <__aeabi_dmul>
 8010cc0:	4606      	mov	r6, r0
 8010cc2:	460f      	mov	r7, r1
 8010cc4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010cc8:	9618      	str	r6, [sp, #96]	; 0x60
 8010cca:	9319      	str	r3, [sp, #100]	; 0x64
 8010ccc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8010cd0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010cd4:	e79c      	b.n	8010c10 <_strtod_l+0x980>
 8010cd6:	f1ba 0f01 	cmp.w	sl, #1
 8010cda:	d102      	bne.n	8010ce2 <_strtod_l+0xa52>
 8010cdc:	2d00      	cmp	r5, #0
 8010cde:	f43f ad8e 	beq.w	80107fe <_strtod_l+0x56e>
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	4b34      	ldr	r3, [pc, #208]	; (8010db8 <_strtod_l+0xb28>)
 8010ce6:	e78f      	b.n	8010c08 <_strtod_l+0x978>
 8010ce8:	2600      	movs	r6, #0
 8010cea:	4f32      	ldr	r7, [pc, #200]	; (8010db4 <_strtod_l+0xb24>)
 8010cec:	e7ea      	b.n	8010cc4 <_strtod_l+0xa34>
 8010cee:	4b31      	ldr	r3, [pc, #196]	; (8010db4 <_strtod_l+0xb24>)
 8010cf0:	4630      	mov	r0, r6
 8010cf2:	4639      	mov	r1, r7
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	f7ef fc7f 	bl	80005f8 <__aeabi_dmul>
 8010cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010cfc:	4606      	mov	r6, r0
 8010cfe:	460f      	mov	r7, r1
 8010d00:	b933      	cbnz	r3, 8010d10 <_strtod_l+0xa80>
 8010d02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d06:	9010      	str	r0, [sp, #64]	; 0x40
 8010d08:	9311      	str	r3, [sp, #68]	; 0x44
 8010d0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010d0e:	e7df      	b.n	8010cd0 <_strtod_l+0xa40>
 8010d10:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8010d14:	e7f9      	b.n	8010d0a <_strtod_l+0xa7a>
 8010d16:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010d1a:	9b04      	ldr	r3, [sp, #16]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d1ab      	bne.n	8010c78 <_strtod_l+0x9e8>
 8010d20:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010d24:	0d1b      	lsrs	r3, r3, #20
 8010d26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010d28:	051b      	lsls	r3, r3, #20
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	465d      	mov	r5, fp
 8010d2e:	d1a3      	bne.n	8010c78 <_strtod_l+0x9e8>
 8010d30:	4639      	mov	r1, r7
 8010d32:	4630      	mov	r0, r6
 8010d34:	f7ef ff10 	bl	8000b58 <__aeabi_d2iz>
 8010d38:	f7ef fbf4 	bl	8000524 <__aeabi_i2d>
 8010d3c:	460b      	mov	r3, r1
 8010d3e:	4602      	mov	r2, r0
 8010d40:	4639      	mov	r1, r7
 8010d42:	4630      	mov	r0, r6
 8010d44:	f7ef faa0 	bl	8000288 <__aeabi_dsub>
 8010d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d4a:	4606      	mov	r6, r0
 8010d4c:	460f      	mov	r7, r1
 8010d4e:	b933      	cbnz	r3, 8010d5e <_strtod_l+0xace>
 8010d50:	f1ba 0f00 	cmp.w	sl, #0
 8010d54:	d103      	bne.n	8010d5e <_strtod_l+0xace>
 8010d56:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8010d5a:	2d00      	cmp	r5, #0
 8010d5c:	d06d      	beq.n	8010e3a <_strtod_l+0xbaa>
 8010d5e:	a30a      	add	r3, pc, #40	; (adr r3, 8010d88 <_strtod_l+0xaf8>)
 8010d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d64:	4630      	mov	r0, r6
 8010d66:	4639      	mov	r1, r7
 8010d68:	f7ef feb8 	bl	8000adc <__aeabi_dcmplt>
 8010d6c:	2800      	cmp	r0, #0
 8010d6e:	f47f acb8 	bne.w	80106e2 <_strtod_l+0x452>
 8010d72:	a307      	add	r3, pc, #28	; (adr r3, 8010d90 <_strtod_l+0xb00>)
 8010d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d78:	4630      	mov	r0, r6
 8010d7a:	4639      	mov	r1, r7
 8010d7c:	f7ef fecc 	bl	8000b18 <__aeabi_dcmpgt>
 8010d80:	2800      	cmp	r0, #0
 8010d82:	f43f af79 	beq.w	8010c78 <_strtod_l+0x9e8>
 8010d86:	e4ac      	b.n	80106e2 <_strtod_l+0x452>
 8010d88:	94a03595 	.word	0x94a03595
 8010d8c:	3fdfffff 	.word	0x3fdfffff
 8010d90:	35afe535 	.word	0x35afe535
 8010d94:	3fe00000 	.word	0x3fe00000
 8010d98:	000fffff 	.word	0x000fffff
 8010d9c:	7ff00000 	.word	0x7ff00000
 8010da0:	7fefffff 	.word	0x7fefffff
 8010da4:	39500000 	.word	0x39500000
 8010da8:	3ff00000 	.word	0x3ff00000
 8010dac:	7fe00000 	.word	0x7fe00000
 8010db0:	7c9fffff 	.word	0x7c9fffff
 8010db4:	3fe00000 	.word	0x3fe00000
 8010db8:	bff00000 	.word	0xbff00000
 8010dbc:	9b04      	ldr	r3, [sp, #16]
 8010dbe:	b333      	cbz	r3, 8010e0e <_strtod_l+0xb7e>
 8010dc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010dc2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010dc6:	d822      	bhi.n	8010e0e <_strtod_l+0xb7e>
 8010dc8:	a327      	add	r3, pc, #156	; (adr r3, 8010e68 <_strtod_l+0xbd8>)
 8010dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dce:	4630      	mov	r0, r6
 8010dd0:	4639      	mov	r1, r7
 8010dd2:	f7ef fe8d 	bl	8000af0 <__aeabi_dcmple>
 8010dd6:	b1a0      	cbz	r0, 8010e02 <_strtod_l+0xb72>
 8010dd8:	4639      	mov	r1, r7
 8010dda:	4630      	mov	r0, r6
 8010ddc:	f7ef fee4 	bl	8000ba8 <__aeabi_d2uiz>
 8010de0:	2800      	cmp	r0, #0
 8010de2:	bf08      	it	eq
 8010de4:	2001      	moveq	r0, #1
 8010de6:	f7ef fb8d 	bl	8000504 <__aeabi_ui2d>
 8010dea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010dec:	4606      	mov	r6, r0
 8010dee:	460f      	mov	r7, r1
 8010df0:	bb03      	cbnz	r3, 8010e34 <_strtod_l+0xba4>
 8010df2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010df6:	9012      	str	r0, [sp, #72]	; 0x48
 8010df8:	9313      	str	r3, [sp, #76]	; 0x4c
 8010dfa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8010dfe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010e06:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010e0a:	1a9b      	subs	r3, r3, r2
 8010e0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e0e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8010e12:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8010e16:	f001 fd2d 	bl	8012874 <__ulp>
 8010e1a:	4650      	mov	r0, sl
 8010e1c:	ec53 2b10 	vmov	r2, r3, d0
 8010e20:	4659      	mov	r1, fp
 8010e22:	f7ef fbe9 	bl	80005f8 <__aeabi_dmul>
 8010e26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010e2a:	f7ef fa2f 	bl	800028c <__adddf3>
 8010e2e:	4682      	mov	sl, r0
 8010e30:	468b      	mov	fp, r1
 8010e32:	e772      	b.n	8010d1a <_strtod_l+0xa8a>
 8010e34:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8010e38:	e7df      	b.n	8010dfa <_strtod_l+0xb6a>
 8010e3a:	a30d      	add	r3, pc, #52	; (adr r3, 8010e70 <_strtod_l+0xbe0>)
 8010e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e40:	f7ef fe4c 	bl	8000adc <__aeabi_dcmplt>
 8010e44:	e79c      	b.n	8010d80 <_strtod_l+0xaf0>
 8010e46:	2300      	movs	r3, #0
 8010e48:	930d      	str	r3, [sp, #52]	; 0x34
 8010e4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010e4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010e4e:	6013      	str	r3, [r2, #0]
 8010e50:	f7ff ba61 	b.w	8010316 <_strtod_l+0x86>
 8010e54:	2b65      	cmp	r3, #101	; 0x65
 8010e56:	f04f 0200 	mov.w	r2, #0
 8010e5a:	f43f ab4e 	beq.w	80104fa <_strtod_l+0x26a>
 8010e5e:	2101      	movs	r1, #1
 8010e60:	4614      	mov	r4, r2
 8010e62:	9104      	str	r1, [sp, #16]
 8010e64:	f7ff bacb 	b.w	80103fe <_strtod_l+0x16e>
 8010e68:	ffc00000 	.word	0xffc00000
 8010e6c:	41dfffff 	.word	0x41dfffff
 8010e70:	94a03595 	.word	0x94a03595
 8010e74:	3fcfffff 	.word	0x3fcfffff

08010e78 <_strtod_r>:
 8010e78:	4b05      	ldr	r3, [pc, #20]	; (8010e90 <_strtod_r+0x18>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	b410      	push	{r4}
 8010e7e:	6a1b      	ldr	r3, [r3, #32]
 8010e80:	4c04      	ldr	r4, [pc, #16]	; (8010e94 <_strtod_r+0x1c>)
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	bf08      	it	eq
 8010e86:	4623      	moveq	r3, r4
 8010e88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e8c:	f7ff ba00 	b.w	8010290 <_strtod_l>
 8010e90:	2000017c 	.word	0x2000017c
 8010e94:	200001e0 	.word	0x200001e0

08010e98 <_strtol_l.isra.0>:
 8010e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e9c:	4680      	mov	r8, r0
 8010e9e:	4689      	mov	r9, r1
 8010ea0:	4692      	mov	sl, r2
 8010ea2:	461e      	mov	r6, r3
 8010ea4:	460f      	mov	r7, r1
 8010ea6:	463d      	mov	r5, r7
 8010ea8:	9808      	ldr	r0, [sp, #32]
 8010eaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010eae:	f001 f9ed 	bl	801228c <__locale_ctype_ptr_l>
 8010eb2:	4420      	add	r0, r4
 8010eb4:	7843      	ldrb	r3, [r0, #1]
 8010eb6:	f013 0308 	ands.w	r3, r3, #8
 8010eba:	d132      	bne.n	8010f22 <_strtol_l.isra.0+0x8a>
 8010ebc:	2c2d      	cmp	r4, #45	; 0x2d
 8010ebe:	d132      	bne.n	8010f26 <_strtol_l.isra.0+0x8e>
 8010ec0:	787c      	ldrb	r4, [r7, #1]
 8010ec2:	1cbd      	adds	r5, r7, #2
 8010ec4:	2201      	movs	r2, #1
 8010ec6:	2e00      	cmp	r6, #0
 8010ec8:	d05d      	beq.n	8010f86 <_strtol_l.isra.0+0xee>
 8010eca:	2e10      	cmp	r6, #16
 8010ecc:	d109      	bne.n	8010ee2 <_strtol_l.isra.0+0x4a>
 8010ece:	2c30      	cmp	r4, #48	; 0x30
 8010ed0:	d107      	bne.n	8010ee2 <_strtol_l.isra.0+0x4a>
 8010ed2:	782b      	ldrb	r3, [r5, #0]
 8010ed4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010ed8:	2b58      	cmp	r3, #88	; 0x58
 8010eda:	d14f      	bne.n	8010f7c <_strtol_l.isra.0+0xe4>
 8010edc:	786c      	ldrb	r4, [r5, #1]
 8010ede:	2610      	movs	r6, #16
 8010ee0:	3502      	adds	r5, #2
 8010ee2:	2a00      	cmp	r2, #0
 8010ee4:	bf14      	ite	ne
 8010ee6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8010eea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8010eee:	2700      	movs	r7, #0
 8010ef0:	fbb1 fcf6 	udiv	ip, r1, r6
 8010ef4:	4638      	mov	r0, r7
 8010ef6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8010efa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8010efe:	2b09      	cmp	r3, #9
 8010f00:	d817      	bhi.n	8010f32 <_strtol_l.isra.0+0x9a>
 8010f02:	461c      	mov	r4, r3
 8010f04:	42a6      	cmp	r6, r4
 8010f06:	dd23      	ble.n	8010f50 <_strtol_l.isra.0+0xb8>
 8010f08:	1c7b      	adds	r3, r7, #1
 8010f0a:	d007      	beq.n	8010f1c <_strtol_l.isra.0+0x84>
 8010f0c:	4584      	cmp	ip, r0
 8010f0e:	d31c      	bcc.n	8010f4a <_strtol_l.isra.0+0xb2>
 8010f10:	d101      	bne.n	8010f16 <_strtol_l.isra.0+0x7e>
 8010f12:	45a6      	cmp	lr, r4
 8010f14:	db19      	blt.n	8010f4a <_strtol_l.isra.0+0xb2>
 8010f16:	fb00 4006 	mla	r0, r0, r6, r4
 8010f1a:	2701      	movs	r7, #1
 8010f1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f20:	e7eb      	b.n	8010efa <_strtol_l.isra.0+0x62>
 8010f22:	462f      	mov	r7, r5
 8010f24:	e7bf      	b.n	8010ea6 <_strtol_l.isra.0+0xe>
 8010f26:	2c2b      	cmp	r4, #43	; 0x2b
 8010f28:	bf04      	itt	eq
 8010f2a:	1cbd      	addeq	r5, r7, #2
 8010f2c:	787c      	ldrbeq	r4, [r7, #1]
 8010f2e:	461a      	mov	r2, r3
 8010f30:	e7c9      	b.n	8010ec6 <_strtol_l.isra.0+0x2e>
 8010f32:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8010f36:	2b19      	cmp	r3, #25
 8010f38:	d801      	bhi.n	8010f3e <_strtol_l.isra.0+0xa6>
 8010f3a:	3c37      	subs	r4, #55	; 0x37
 8010f3c:	e7e2      	b.n	8010f04 <_strtol_l.isra.0+0x6c>
 8010f3e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8010f42:	2b19      	cmp	r3, #25
 8010f44:	d804      	bhi.n	8010f50 <_strtol_l.isra.0+0xb8>
 8010f46:	3c57      	subs	r4, #87	; 0x57
 8010f48:	e7dc      	b.n	8010f04 <_strtol_l.isra.0+0x6c>
 8010f4a:	f04f 37ff 	mov.w	r7, #4294967295
 8010f4e:	e7e5      	b.n	8010f1c <_strtol_l.isra.0+0x84>
 8010f50:	1c7b      	adds	r3, r7, #1
 8010f52:	d108      	bne.n	8010f66 <_strtol_l.isra.0+0xce>
 8010f54:	2322      	movs	r3, #34	; 0x22
 8010f56:	f8c8 3000 	str.w	r3, [r8]
 8010f5a:	4608      	mov	r0, r1
 8010f5c:	f1ba 0f00 	cmp.w	sl, #0
 8010f60:	d107      	bne.n	8010f72 <_strtol_l.isra.0+0xda>
 8010f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f66:	b102      	cbz	r2, 8010f6a <_strtol_l.isra.0+0xd2>
 8010f68:	4240      	negs	r0, r0
 8010f6a:	f1ba 0f00 	cmp.w	sl, #0
 8010f6e:	d0f8      	beq.n	8010f62 <_strtol_l.isra.0+0xca>
 8010f70:	b10f      	cbz	r7, 8010f76 <_strtol_l.isra.0+0xde>
 8010f72:	f105 39ff 	add.w	r9, r5, #4294967295
 8010f76:	f8ca 9000 	str.w	r9, [sl]
 8010f7a:	e7f2      	b.n	8010f62 <_strtol_l.isra.0+0xca>
 8010f7c:	2430      	movs	r4, #48	; 0x30
 8010f7e:	2e00      	cmp	r6, #0
 8010f80:	d1af      	bne.n	8010ee2 <_strtol_l.isra.0+0x4a>
 8010f82:	2608      	movs	r6, #8
 8010f84:	e7ad      	b.n	8010ee2 <_strtol_l.isra.0+0x4a>
 8010f86:	2c30      	cmp	r4, #48	; 0x30
 8010f88:	d0a3      	beq.n	8010ed2 <_strtol_l.isra.0+0x3a>
 8010f8a:	260a      	movs	r6, #10
 8010f8c:	e7a9      	b.n	8010ee2 <_strtol_l.isra.0+0x4a>
	...

08010f90 <_strtol_r>:
 8010f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f92:	4c06      	ldr	r4, [pc, #24]	; (8010fac <_strtol_r+0x1c>)
 8010f94:	4d06      	ldr	r5, [pc, #24]	; (8010fb0 <_strtol_r+0x20>)
 8010f96:	6824      	ldr	r4, [r4, #0]
 8010f98:	6a24      	ldr	r4, [r4, #32]
 8010f9a:	2c00      	cmp	r4, #0
 8010f9c:	bf08      	it	eq
 8010f9e:	462c      	moveq	r4, r5
 8010fa0:	9400      	str	r4, [sp, #0]
 8010fa2:	f7ff ff79 	bl	8010e98 <_strtol_l.isra.0>
 8010fa6:	b003      	add	sp, #12
 8010fa8:	bd30      	pop	{r4, r5, pc}
 8010faa:	bf00      	nop
 8010fac:	2000017c 	.word	0x2000017c
 8010fb0:	200001e0 	.word	0x200001e0

08010fb4 <quorem>:
 8010fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb8:	6903      	ldr	r3, [r0, #16]
 8010fba:	690c      	ldr	r4, [r1, #16]
 8010fbc:	42a3      	cmp	r3, r4
 8010fbe:	4680      	mov	r8, r0
 8010fc0:	f2c0 8082 	blt.w	80110c8 <quorem+0x114>
 8010fc4:	3c01      	subs	r4, #1
 8010fc6:	f101 0714 	add.w	r7, r1, #20
 8010fca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8010fce:	f100 0614 	add.w	r6, r0, #20
 8010fd2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8010fd6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8010fda:	eb06 030c 	add.w	r3, r6, ip
 8010fde:	3501      	adds	r5, #1
 8010fe0:	eb07 090c 	add.w	r9, r7, ip
 8010fe4:	9301      	str	r3, [sp, #4]
 8010fe6:	fbb0 f5f5 	udiv	r5, r0, r5
 8010fea:	b395      	cbz	r5, 8011052 <quorem+0x9e>
 8010fec:	f04f 0a00 	mov.w	sl, #0
 8010ff0:	4638      	mov	r0, r7
 8010ff2:	46b6      	mov	lr, r6
 8010ff4:	46d3      	mov	fp, sl
 8010ff6:	f850 2b04 	ldr.w	r2, [r0], #4
 8010ffa:	b293      	uxth	r3, r2
 8010ffc:	fb05 a303 	mla	r3, r5, r3, sl
 8011000:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011004:	b29b      	uxth	r3, r3
 8011006:	ebab 0303 	sub.w	r3, fp, r3
 801100a:	0c12      	lsrs	r2, r2, #16
 801100c:	f8de b000 	ldr.w	fp, [lr]
 8011010:	fb05 a202 	mla	r2, r5, r2, sl
 8011014:	fa13 f38b 	uxtah	r3, r3, fp
 8011018:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801101c:	fa1f fb82 	uxth.w	fp, r2
 8011020:	f8de 2000 	ldr.w	r2, [lr]
 8011024:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011028:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801102c:	b29b      	uxth	r3, r3
 801102e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011032:	4581      	cmp	r9, r0
 8011034:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011038:	f84e 3b04 	str.w	r3, [lr], #4
 801103c:	d2db      	bcs.n	8010ff6 <quorem+0x42>
 801103e:	f856 300c 	ldr.w	r3, [r6, ip]
 8011042:	b933      	cbnz	r3, 8011052 <quorem+0x9e>
 8011044:	9b01      	ldr	r3, [sp, #4]
 8011046:	3b04      	subs	r3, #4
 8011048:	429e      	cmp	r6, r3
 801104a:	461a      	mov	r2, r3
 801104c:	d330      	bcc.n	80110b0 <quorem+0xfc>
 801104e:	f8c8 4010 	str.w	r4, [r8, #16]
 8011052:	4640      	mov	r0, r8
 8011054:	f001 fb96 	bl	8012784 <__mcmp>
 8011058:	2800      	cmp	r0, #0
 801105a:	db25      	blt.n	80110a8 <quorem+0xf4>
 801105c:	3501      	adds	r5, #1
 801105e:	4630      	mov	r0, r6
 8011060:	f04f 0c00 	mov.w	ip, #0
 8011064:	f857 2b04 	ldr.w	r2, [r7], #4
 8011068:	f8d0 e000 	ldr.w	lr, [r0]
 801106c:	b293      	uxth	r3, r2
 801106e:	ebac 0303 	sub.w	r3, ip, r3
 8011072:	0c12      	lsrs	r2, r2, #16
 8011074:	fa13 f38e 	uxtah	r3, r3, lr
 8011078:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801107c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011080:	b29b      	uxth	r3, r3
 8011082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011086:	45b9      	cmp	r9, r7
 8011088:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801108c:	f840 3b04 	str.w	r3, [r0], #4
 8011090:	d2e8      	bcs.n	8011064 <quorem+0xb0>
 8011092:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8011096:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801109a:	b92a      	cbnz	r2, 80110a8 <quorem+0xf4>
 801109c:	3b04      	subs	r3, #4
 801109e:	429e      	cmp	r6, r3
 80110a0:	461a      	mov	r2, r3
 80110a2:	d30b      	bcc.n	80110bc <quorem+0x108>
 80110a4:	f8c8 4010 	str.w	r4, [r8, #16]
 80110a8:	4628      	mov	r0, r5
 80110aa:	b003      	add	sp, #12
 80110ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110b0:	6812      	ldr	r2, [r2, #0]
 80110b2:	3b04      	subs	r3, #4
 80110b4:	2a00      	cmp	r2, #0
 80110b6:	d1ca      	bne.n	801104e <quorem+0x9a>
 80110b8:	3c01      	subs	r4, #1
 80110ba:	e7c5      	b.n	8011048 <quorem+0x94>
 80110bc:	6812      	ldr	r2, [r2, #0]
 80110be:	3b04      	subs	r3, #4
 80110c0:	2a00      	cmp	r2, #0
 80110c2:	d1ef      	bne.n	80110a4 <quorem+0xf0>
 80110c4:	3c01      	subs	r4, #1
 80110c6:	e7ea      	b.n	801109e <quorem+0xea>
 80110c8:	2000      	movs	r0, #0
 80110ca:	e7ee      	b.n	80110aa <quorem+0xf6>
 80110cc:	0000      	movs	r0, r0
	...

080110d0 <_dtoa_r>:
 80110d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d4:	ec57 6b10 	vmov	r6, r7, d0
 80110d8:	b097      	sub	sp, #92	; 0x5c
 80110da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80110dc:	9106      	str	r1, [sp, #24]
 80110de:	4604      	mov	r4, r0
 80110e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80110e2:	9312      	str	r3, [sp, #72]	; 0x48
 80110e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80110e8:	e9cd 6700 	strd	r6, r7, [sp]
 80110ec:	b93d      	cbnz	r5, 80110fe <_dtoa_r+0x2e>
 80110ee:	2010      	movs	r0, #16
 80110f0:	f7fe f95e 	bl	800f3b0 <malloc>
 80110f4:	6260      	str	r0, [r4, #36]	; 0x24
 80110f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80110fa:	6005      	str	r5, [r0, #0]
 80110fc:	60c5      	str	r5, [r0, #12]
 80110fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011100:	6819      	ldr	r1, [r3, #0]
 8011102:	b151      	cbz	r1, 801111a <_dtoa_r+0x4a>
 8011104:	685a      	ldr	r2, [r3, #4]
 8011106:	604a      	str	r2, [r1, #4]
 8011108:	2301      	movs	r3, #1
 801110a:	4093      	lsls	r3, r2
 801110c:	608b      	str	r3, [r1, #8]
 801110e:	4620      	mov	r0, r4
 8011110:	f001 f918 	bl	8012344 <_Bfree>
 8011114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011116:	2200      	movs	r2, #0
 8011118:	601a      	str	r2, [r3, #0]
 801111a:	1e3b      	subs	r3, r7, #0
 801111c:	bfbb      	ittet	lt
 801111e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011122:	9301      	strlt	r3, [sp, #4]
 8011124:	2300      	movge	r3, #0
 8011126:	2201      	movlt	r2, #1
 8011128:	bfac      	ite	ge
 801112a:	f8c8 3000 	strge.w	r3, [r8]
 801112e:	f8c8 2000 	strlt.w	r2, [r8]
 8011132:	4baf      	ldr	r3, [pc, #700]	; (80113f0 <_dtoa_r+0x320>)
 8011134:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011138:	ea33 0308 	bics.w	r3, r3, r8
 801113c:	d114      	bne.n	8011168 <_dtoa_r+0x98>
 801113e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011140:	f242 730f 	movw	r3, #9999	; 0x270f
 8011144:	6013      	str	r3, [r2, #0]
 8011146:	9b00      	ldr	r3, [sp, #0]
 8011148:	b923      	cbnz	r3, 8011154 <_dtoa_r+0x84>
 801114a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801114e:	2800      	cmp	r0, #0
 8011150:	f000 8542 	beq.w	8011bd8 <_dtoa_r+0xb08>
 8011154:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011156:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8011404 <_dtoa_r+0x334>
 801115a:	2b00      	cmp	r3, #0
 801115c:	f000 8544 	beq.w	8011be8 <_dtoa_r+0xb18>
 8011160:	f10b 0303 	add.w	r3, fp, #3
 8011164:	f000 bd3e 	b.w	8011be4 <_dtoa_r+0xb14>
 8011168:	e9dd 6700 	ldrd	r6, r7, [sp]
 801116c:	2200      	movs	r2, #0
 801116e:	2300      	movs	r3, #0
 8011170:	4630      	mov	r0, r6
 8011172:	4639      	mov	r1, r7
 8011174:	f7ef fca8 	bl	8000ac8 <__aeabi_dcmpeq>
 8011178:	4681      	mov	r9, r0
 801117a:	b168      	cbz	r0, 8011198 <_dtoa_r+0xc8>
 801117c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801117e:	2301      	movs	r3, #1
 8011180:	6013      	str	r3, [r2, #0]
 8011182:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011184:	2b00      	cmp	r3, #0
 8011186:	f000 8524 	beq.w	8011bd2 <_dtoa_r+0xb02>
 801118a:	4b9a      	ldr	r3, [pc, #616]	; (80113f4 <_dtoa_r+0x324>)
 801118c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801118e:	f103 3bff 	add.w	fp, r3, #4294967295
 8011192:	6013      	str	r3, [r2, #0]
 8011194:	f000 bd28 	b.w	8011be8 <_dtoa_r+0xb18>
 8011198:	aa14      	add	r2, sp, #80	; 0x50
 801119a:	a915      	add	r1, sp, #84	; 0x54
 801119c:	ec47 6b10 	vmov	d0, r6, r7
 80111a0:	4620      	mov	r0, r4
 80111a2:	f001 fbdd 	bl	8012960 <__d2b>
 80111a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80111aa:	9004      	str	r0, [sp, #16]
 80111ac:	2d00      	cmp	r5, #0
 80111ae:	d07c      	beq.n	80112aa <_dtoa_r+0x1da>
 80111b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80111b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80111b8:	46b2      	mov	sl, r6
 80111ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80111be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80111c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80111c6:	2200      	movs	r2, #0
 80111c8:	4b8b      	ldr	r3, [pc, #556]	; (80113f8 <_dtoa_r+0x328>)
 80111ca:	4650      	mov	r0, sl
 80111cc:	4659      	mov	r1, fp
 80111ce:	f7ef f85b 	bl	8000288 <__aeabi_dsub>
 80111d2:	a381      	add	r3, pc, #516	; (adr r3, 80113d8 <_dtoa_r+0x308>)
 80111d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111d8:	f7ef fa0e 	bl	80005f8 <__aeabi_dmul>
 80111dc:	a380      	add	r3, pc, #512	; (adr r3, 80113e0 <_dtoa_r+0x310>)
 80111de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e2:	f7ef f853 	bl	800028c <__adddf3>
 80111e6:	4606      	mov	r6, r0
 80111e8:	4628      	mov	r0, r5
 80111ea:	460f      	mov	r7, r1
 80111ec:	f7ef f99a 	bl	8000524 <__aeabi_i2d>
 80111f0:	a37d      	add	r3, pc, #500	; (adr r3, 80113e8 <_dtoa_r+0x318>)
 80111f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f6:	f7ef f9ff 	bl	80005f8 <__aeabi_dmul>
 80111fa:	4602      	mov	r2, r0
 80111fc:	460b      	mov	r3, r1
 80111fe:	4630      	mov	r0, r6
 8011200:	4639      	mov	r1, r7
 8011202:	f7ef f843 	bl	800028c <__adddf3>
 8011206:	4606      	mov	r6, r0
 8011208:	460f      	mov	r7, r1
 801120a:	f7ef fca5 	bl	8000b58 <__aeabi_d2iz>
 801120e:	2200      	movs	r2, #0
 8011210:	4682      	mov	sl, r0
 8011212:	2300      	movs	r3, #0
 8011214:	4630      	mov	r0, r6
 8011216:	4639      	mov	r1, r7
 8011218:	f7ef fc60 	bl	8000adc <__aeabi_dcmplt>
 801121c:	b148      	cbz	r0, 8011232 <_dtoa_r+0x162>
 801121e:	4650      	mov	r0, sl
 8011220:	f7ef f980 	bl	8000524 <__aeabi_i2d>
 8011224:	4632      	mov	r2, r6
 8011226:	463b      	mov	r3, r7
 8011228:	f7ef fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 801122c:	b908      	cbnz	r0, 8011232 <_dtoa_r+0x162>
 801122e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011232:	f1ba 0f16 	cmp.w	sl, #22
 8011236:	d859      	bhi.n	80112ec <_dtoa_r+0x21c>
 8011238:	4970      	ldr	r1, [pc, #448]	; (80113fc <_dtoa_r+0x32c>)
 801123a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801123e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011242:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011246:	f7ef fc67 	bl	8000b18 <__aeabi_dcmpgt>
 801124a:	2800      	cmp	r0, #0
 801124c:	d050      	beq.n	80112f0 <_dtoa_r+0x220>
 801124e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011252:	2300      	movs	r3, #0
 8011254:	930f      	str	r3, [sp, #60]	; 0x3c
 8011256:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011258:	1b5d      	subs	r5, r3, r5
 801125a:	f1b5 0801 	subs.w	r8, r5, #1
 801125e:	bf49      	itett	mi
 8011260:	f1c5 0301 	rsbmi	r3, r5, #1
 8011264:	2300      	movpl	r3, #0
 8011266:	9305      	strmi	r3, [sp, #20]
 8011268:	f04f 0800 	movmi.w	r8, #0
 801126c:	bf58      	it	pl
 801126e:	9305      	strpl	r3, [sp, #20]
 8011270:	f1ba 0f00 	cmp.w	sl, #0
 8011274:	db3e      	blt.n	80112f4 <_dtoa_r+0x224>
 8011276:	2300      	movs	r3, #0
 8011278:	44d0      	add	r8, sl
 801127a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801127e:	9307      	str	r3, [sp, #28]
 8011280:	9b06      	ldr	r3, [sp, #24]
 8011282:	2b09      	cmp	r3, #9
 8011284:	f200 8090 	bhi.w	80113a8 <_dtoa_r+0x2d8>
 8011288:	2b05      	cmp	r3, #5
 801128a:	bfc4      	itt	gt
 801128c:	3b04      	subgt	r3, #4
 801128e:	9306      	strgt	r3, [sp, #24]
 8011290:	9b06      	ldr	r3, [sp, #24]
 8011292:	f1a3 0302 	sub.w	r3, r3, #2
 8011296:	bfcc      	ite	gt
 8011298:	2500      	movgt	r5, #0
 801129a:	2501      	movle	r5, #1
 801129c:	2b03      	cmp	r3, #3
 801129e:	f200 808f 	bhi.w	80113c0 <_dtoa_r+0x2f0>
 80112a2:	e8df f003 	tbb	[pc, r3]
 80112a6:	7f7d      	.short	0x7f7d
 80112a8:	7131      	.short	0x7131
 80112aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80112ae:	441d      	add	r5, r3
 80112b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80112b4:	2820      	cmp	r0, #32
 80112b6:	dd13      	ble.n	80112e0 <_dtoa_r+0x210>
 80112b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80112bc:	9b00      	ldr	r3, [sp, #0]
 80112be:	fa08 f800 	lsl.w	r8, r8, r0
 80112c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80112c6:	fa23 f000 	lsr.w	r0, r3, r0
 80112ca:	ea48 0000 	orr.w	r0, r8, r0
 80112ce:	f7ef f919 	bl	8000504 <__aeabi_ui2d>
 80112d2:	2301      	movs	r3, #1
 80112d4:	4682      	mov	sl, r0
 80112d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80112da:	3d01      	subs	r5, #1
 80112dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80112de:	e772      	b.n	80111c6 <_dtoa_r+0xf6>
 80112e0:	9b00      	ldr	r3, [sp, #0]
 80112e2:	f1c0 0020 	rsb	r0, r0, #32
 80112e6:	fa03 f000 	lsl.w	r0, r3, r0
 80112ea:	e7f0      	b.n	80112ce <_dtoa_r+0x1fe>
 80112ec:	2301      	movs	r3, #1
 80112ee:	e7b1      	b.n	8011254 <_dtoa_r+0x184>
 80112f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80112f2:	e7b0      	b.n	8011256 <_dtoa_r+0x186>
 80112f4:	9b05      	ldr	r3, [sp, #20]
 80112f6:	eba3 030a 	sub.w	r3, r3, sl
 80112fa:	9305      	str	r3, [sp, #20]
 80112fc:	f1ca 0300 	rsb	r3, sl, #0
 8011300:	9307      	str	r3, [sp, #28]
 8011302:	2300      	movs	r3, #0
 8011304:	930e      	str	r3, [sp, #56]	; 0x38
 8011306:	e7bb      	b.n	8011280 <_dtoa_r+0x1b0>
 8011308:	2301      	movs	r3, #1
 801130a:	930a      	str	r3, [sp, #40]	; 0x28
 801130c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801130e:	2b00      	cmp	r3, #0
 8011310:	dd59      	ble.n	80113c6 <_dtoa_r+0x2f6>
 8011312:	9302      	str	r3, [sp, #8]
 8011314:	4699      	mov	r9, r3
 8011316:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011318:	2200      	movs	r2, #0
 801131a:	6072      	str	r2, [r6, #4]
 801131c:	2204      	movs	r2, #4
 801131e:	f102 0014 	add.w	r0, r2, #20
 8011322:	4298      	cmp	r0, r3
 8011324:	6871      	ldr	r1, [r6, #4]
 8011326:	d953      	bls.n	80113d0 <_dtoa_r+0x300>
 8011328:	4620      	mov	r0, r4
 801132a:	f000 ffd7 	bl	80122dc <_Balloc>
 801132e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011330:	6030      	str	r0, [r6, #0]
 8011332:	f1b9 0f0e 	cmp.w	r9, #14
 8011336:	f8d3 b000 	ldr.w	fp, [r3]
 801133a:	f200 80e6 	bhi.w	801150a <_dtoa_r+0x43a>
 801133e:	2d00      	cmp	r5, #0
 8011340:	f000 80e3 	beq.w	801150a <_dtoa_r+0x43a>
 8011344:	ed9d 7b00 	vldr	d7, [sp]
 8011348:	f1ba 0f00 	cmp.w	sl, #0
 801134c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8011350:	dd74      	ble.n	801143c <_dtoa_r+0x36c>
 8011352:	4a2a      	ldr	r2, [pc, #168]	; (80113fc <_dtoa_r+0x32c>)
 8011354:	f00a 030f 	and.w	r3, sl, #15
 8011358:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801135c:	ed93 7b00 	vldr	d7, [r3]
 8011360:	ea4f 162a 	mov.w	r6, sl, asr #4
 8011364:	06f0      	lsls	r0, r6, #27
 8011366:	ed8d 7b08 	vstr	d7, [sp, #32]
 801136a:	d565      	bpl.n	8011438 <_dtoa_r+0x368>
 801136c:	4b24      	ldr	r3, [pc, #144]	; (8011400 <_dtoa_r+0x330>)
 801136e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011372:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011376:	f7ef fa69 	bl	800084c <__aeabi_ddiv>
 801137a:	e9cd 0100 	strd	r0, r1, [sp]
 801137e:	f006 060f 	and.w	r6, r6, #15
 8011382:	2503      	movs	r5, #3
 8011384:	4f1e      	ldr	r7, [pc, #120]	; (8011400 <_dtoa_r+0x330>)
 8011386:	e04c      	b.n	8011422 <_dtoa_r+0x352>
 8011388:	2301      	movs	r3, #1
 801138a:	930a      	str	r3, [sp, #40]	; 0x28
 801138c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801138e:	4453      	add	r3, sl
 8011390:	f103 0901 	add.w	r9, r3, #1
 8011394:	9302      	str	r3, [sp, #8]
 8011396:	464b      	mov	r3, r9
 8011398:	2b01      	cmp	r3, #1
 801139a:	bfb8      	it	lt
 801139c:	2301      	movlt	r3, #1
 801139e:	e7ba      	b.n	8011316 <_dtoa_r+0x246>
 80113a0:	2300      	movs	r3, #0
 80113a2:	e7b2      	b.n	801130a <_dtoa_r+0x23a>
 80113a4:	2300      	movs	r3, #0
 80113a6:	e7f0      	b.n	801138a <_dtoa_r+0x2ba>
 80113a8:	2501      	movs	r5, #1
 80113aa:	2300      	movs	r3, #0
 80113ac:	9306      	str	r3, [sp, #24]
 80113ae:	950a      	str	r5, [sp, #40]	; 0x28
 80113b0:	f04f 33ff 	mov.w	r3, #4294967295
 80113b4:	9302      	str	r3, [sp, #8]
 80113b6:	4699      	mov	r9, r3
 80113b8:	2200      	movs	r2, #0
 80113ba:	2312      	movs	r3, #18
 80113bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80113be:	e7aa      	b.n	8011316 <_dtoa_r+0x246>
 80113c0:	2301      	movs	r3, #1
 80113c2:	930a      	str	r3, [sp, #40]	; 0x28
 80113c4:	e7f4      	b.n	80113b0 <_dtoa_r+0x2e0>
 80113c6:	2301      	movs	r3, #1
 80113c8:	9302      	str	r3, [sp, #8]
 80113ca:	4699      	mov	r9, r3
 80113cc:	461a      	mov	r2, r3
 80113ce:	e7f5      	b.n	80113bc <_dtoa_r+0x2ec>
 80113d0:	3101      	adds	r1, #1
 80113d2:	6071      	str	r1, [r6, #4]
 80113d4:	0052      	lsls	r2, r2, #1
 80113d6:	e7a2      	b.n	801131e <_dtoa_r+0x24e>
 80113d8:	636f4361 	.word	0x636f4361
 80113dc:	3fd287a7 	.word	0x3fd287a7
 80113e0:	8b60c8b3 	.word	0x8b60c8b3
 80113e4:	3fc68a28 	.word	0x3fc68a28
 80113e8:	509f79fb 	.word	0x509f79fb
 80113ec:	3fd34413 	.word	0x3fd34413
 80113f0:	7ff00000 	.word	0x7ff00000
 80113f4:	08013181 	.word	0x08013181
 80113f8:	3ff80000 	.word	0x3ff80000
 80113fc:	08013240 	.word	0x08013240
 8011400:	08013218 	.word	0x08013218
 8011404:	08013209 	.word	0x08013209
 8011408:	07f1      	lsls	r1, r6, #31
 801140a:	d508      	bpl.n	801141e <_dtoa_r+0x34e>
 801140c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011414:	f7ef f8f0 	bl	80005f8 <__aeabi_dmul>
 8011418:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801141c:	3501      	adds	r5, #1
 801141e:	1076      	asrs	r6, r6, #1
 8011420:	3708      	adds	r7, #8
 8011422:	2e00      	cmp	r6, #0
 8011424:	d1f0      	bne.n	8011408 <_dtoa_r+0x338>
 8011426:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801142a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801142e:	f7ef fa0d 	bl	800084c <__aeabi_ddiv>
 8011432:	e9cd 0100 	strd	r0, r1, [sp]
 8011436:	e01a      	b.n	801146e <_dtoa_r+0x39e>
 8011438:	2502      	movs	r5, #2
 801143a:	e7a3      	b.n	8011384 <_dtoa_r+0x2b4>
 801143c:	f000 80a0 	beq.w	8011580 <_dtoa_r+0x4b0>
 8011440:	f1ca 0600 	rsb	r6, sl, #0
 8011444:	4b9f      	ldr	r3, [pc, #636]	; (80116c4 <_dtoa_r+0x5f4>)
 8011446:	4fa0      	ldr	r7, [pc, #640]	; (80116c8 <_dtoa_r+0x5f8>)
 8011448:	f006 020f 	and.w	r2, r6, #15
 801144c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011454:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011458:	f7ef f8ce 	bl	80005f8 <__aeabi_dmul>
 801145c:	e9cd 0100 	strd	r0, r1, [sp]
 8011460:	1136      	asrs	r6, r6, #4
 8011462:	2300      	movs	r3, #0
 8011464:	2502      	movs	r5, #2
 8011466:	2e00      	cmp	r6, #0
 8011468:	d17f      	bne.n	801156a <_dtoa_r+0x49a>
 801146a:	2b00      	cmp	r3, #0
 801146c:	d1e1      	bne.n	8011432 <_dtoa_r+0x362>
 801146e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011470:	2b00      	cmp	r3, #0
 8011472:	f000 8087 	beq.w	8011584 <_dtoa_r+0x4b4>
 8011476:	e9dd 6700 	ldrd	r6, r7, [sp]
 801147a:	2200      	movs	r2, #0
 801147c:	4b93      	ldr	r3, [pc, #588]	; (80116cc <_dtoa_r+0x5fc>)
 801147e:	4630      	mov	r0, r6
 8011480:	4639      	mov	r1, r7
 8011482:	f7ef fb2b 	bl	8000adc <__aeabi_dcmplt>
 8011486:	2800      	cmp	r0, #0
 8011488:	d07c      	beq.n	8011584 <_dtoa_r+0x4b4>
 801148a:	f1b9 0f00 	cmp.w	r9, #0
 801148e:	d079      	beq.n	8011584 <_dtoa_r+0x4b4>
 8011490:	9b02      	ldr	r3, [sp, #8]
 8011492:	2b00      	cmp	r3, #0
 8011494:	dd35      	ble.n	8011502 <_dtoa_r+0x432>
 8011496:	f10a 33ff 	add.w	r3, sl, #4294967295
 801149a:	9308      	str	r3, [sp, #32]
 801149c:	4639      	mov	r1, r7
 801149e:	2200      	movs	r2, #0
 80114a0:	4b8b      	ldr	r3, [pc, #556]	; (80116d0 <_dtoa_r+0x600>)
 80114a2:	4630      	mov	r0, r6
 80114a4:	f7ef f8a8 	bl	80005f8 <__aeabi_dmul>
 80114a8:	e9cd 0100 	strd	r0, r1, [sp]
 80114ac:	9f02      	ldr	r7, [sp, #8]
 80114ae:	3501      	adds	r5, #1
 80114b0:	4628      	mov	r0, r5
 80114b2:	f7ef f837 	bl	8000524 <__aeabi_i2d>
 80114b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114ba:	f7ef f89d 	bl	80005f8 <__aeabi_dmul>
 80114be:	2200      	movs	r2, #0
 80114c0:	4b84      	ldr	r3, [pc, #528]	; (80116d4 <_dtoa_r+0x604>)
 80114c2:	f7ee fee3 	bl	800028c <__adddf3>
 80114c6:	4605      	mov	r5, r0
 80114c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80114cc:	2f00      	cmp	r7, #0
 80114ce:	d15d      	bne.n	801158c <_dtoa_r+0x4bc>
 80114d0:	2200      	movs	r2, #0
 80114d2:	4b81      	ldr	r3, [pc, #516]	; (80116d8 <_dtoa_r+0x608>)
 80114d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114d8:	f7ee fed6 	bl	8000288 <__aeabi_dsub>
 80114dc:	462a      	mov	r2, r5
 80114de:	4633      	mov	r3, r6
 80114e0:	e9cd 0100 	strd	r0, r1, [sp]
 80114e4:	f7ef fb18 	bl	8000b18 <__aeabi_dcmpgt>
 80114e8:	2800      	cmp	r0, #0
 80114ea:	f040 8288 	bne.w	80119fe <_dtoa_r+0x92e>
 80114ee:	462a      	mov	r2, r5
 80114f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80114f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114f8:	f7ef faf0 	bl	8000adc <__aeabi_dcmplt>
 80114fc:	2800      	cmp	r0, #0
 80114fe:	f040 827c 	bne.w	80119fa <_dtoa_r+0x92a>
 8011502:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011506:	e9cd 2300 	strd	r2, r3, [sp]
 801150a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801150c:	2b00      	cmp	r3, #0
 801150e:	f2c0 8150 	blt.w	80117b2 <_dtoa_r+0x6e2>
 8011512:	f1ba 0f0e 	cmp.w	sl, #14
 8011516:	f300 814c 	bgt.w	80117b2 <_dtoa_r+0x6e2>
 801151a:	4b6a      	ldr	r3, [pc, #424]	; (80116c4 <_dtoa_r+0x5f4>)
 801151c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011520:	ed93 7b00 	vldr	d7, [r3]
 8011524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011526:	2b00      	cmp	r3, #0
 8011528:	ed8d 7b02 	vstr	d7, [sp, #8]
 801152c:	f280 80d8 	bge.w	80116e0 <_dtoa_r+0x610>
 8011530:	f1b9 0f00 	cmp.w	r9, #0
 8011534:	f300 80d4 	bgt.w	80116e0 <_dtoa_r+0x610>
 8011538:	f040 825e 	bne.w	80119f8 <_dtoa_r+0x928>
 801153c:	2200      	movs	r2, #0
 801153e:	4b66      	ldr	r3, [pc, #408]	; (80116d8 <_dtoa_r+0x608>)
 8011540:	ec51 0b17 	vmov	r0, r1, d7
 8011544:	f7ef f858 	bl	80005f8 <__aeabi_dmul>
 8011548:	e9dd 2300 	ldrd	r2, r3, [sp]
 801154c:	f7ef fada 	bl	8000b04 <__aeabi_dcmpge>
 8011550:	464f      	mov	r7, r9
 8011552:	464e      	mov	r6, r9
 8011554:	2800      	cmp	r0, #0
 8011556:	f040 8234 	bne.w	80119c2 <_dtoa_r+0x8f2>
 801155a:	2331      	movs	r3, #49	; 0x31
 801155c:	f10b 0501 	add.w	r5, fp, #1
 8011560:	f88b 3000 	strb.w	r3, [fp]
 8011564:	f10a 0a01 	add.w	sl, sl, #1
 8011568:	e22f      	b.n	80119ca <_dtoa_r+0x8fa>
 801156a:	07f2      	lsls	r2, r6, #31
 801156c:	d505      	bpl.n	801157a <_dtoa_r+0x4aa>
 801156e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011572:	f7ef f841 	bl	80005f8 <__aeabi_dmul>
 8011576:	3501      	adds	r5, #1
 8011578:	2301      	movs	r3, #1
 801157a:	1076      	asrs	r6, r6, #1
 801157c:	3708      	adds	r7, #8
 801157e:	e772      	b.n	8011466 <_dtoa_r+0x396>
 8011580:	2502      	movs	r5, #2
 8011582:	e774      	b.n	801146e <_dtoa_r+0x39e>
 8011584:	f8cd a020 	str.w	sl, [sp, #32]
 8011588:	464f      	mov	r7, r9
 801158a:	e791      	b.n	80114b0 <_dtoa_r+0x3e0>
 801158c:	4b4d      	ldr	r3, [pc, #308]	; (80116c4 <_dtoa_r+0x5f4>)
 801158e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011592:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8011596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011598:	2b00      	cmp	r3, #0
 801159a:	d047      	beq.n	801162c <_dtoa_r+0x55c>
 801159c:	4602      	mov	r2, r0
 801159e:	460b      	mov	r3, r1
 80115a0:	2000      	movs	r0, #0
 80115a2:	494e      	ldr	r1, [pc, #312]	; (80116dc <_dtoa_r+0x60c>)
 80115a4:	f7ef f952 	bl	800084c <__aeabi_ddiv>
 80115a8:	462a      	mov	r2, r5
 80115aa:	4633      	mov	r3, r6
 80115ac:	f7ee fe6c 	bl	8000288 <__aeabi_dsub>
 80115b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80115b4:	465d      	mov	r5, fp
 80115b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115ba:	f7ef facd 	bl	8000b58 <__aeabi_d2iz>
 80115be:	4606      	mov	r6, r0
 80115c0:	f7ee ffb0 	bl	8000524 <__aeabi_i2d>
 80115c4:	4602      	mov	r2, r0
 80115c6:	460b      	mov	r3, r1
 80115c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115cc:	f7ee fe5c 	bl	8000288 <__aeabi_dsub>
 80115d0:	3630      	adds	r6, #48	; 0x30
 80115d2:	f805 6b01 	strb.w	r6, [r5], #1
 80115d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80115da:	e9cd 0100 	strd	r0, r1, [sp]
 80115de:	f7ef fa7d 	bl	8000adc <__aeabi_dcmplt>
 80115e2:	2800      	cmp	r0, #0
 80115e4:	d163      	bne.n	80116ae <_dtoa_r+0x5de>
 80115e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80115ea:	2000      	movs	r0, #0
 80115ec:	4937      	ldr	r1, [pc, #220]	; (80116cc <_dtoa_r+0x5fc>)
 80115ee:	f7ee fe4b 	bl	8000288 <__aeabi_dsub>
 80115f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80115f6:	f7ef fa71 	bl	8000adc <__aeabi_dcmplt>
 80115fa:	2800      	cmp	r0, #0
 80115fc:	f040 80b7 	bne.w	801176e <_dtoa_r+0x69e>
 8011600:	eba5 030b 	sub.w	r3, r5, fp
 8011604:	429f      	cmp	r7, r3
 8011606:	f77f af7c 	ble.w	8011502 <_dtoa_r+0x432>
 801160a:	2200      	movs	r2, #0
 801160c:	4b30      	ldr	r3, [pc, #192]	; (80116d0 <_dtoa_r+0x600>)
 801160e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011612:	f7ee fff1 	bl	80005f8 <__aeabi_dmul>
 8011616:	2200      	movs	r2, #0
 8011618:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801161c:	4b2c      	ldr	r3, [pc, #176]	; (80116d0 <_dtoa_r+0x600>)
 801161e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011622:	f7ee ffe9 	bl	80005f8 <__aeabi_dmul>
 8011626:	e9cd 0100 	strd	r0, r1, [sp]
 801162a:	e7c4      	b.n	80115b6 <_dtoa_r+0x4e6>
 801162c:	462a      	mov	r2, r5
 801162e:	4633      	mov	r3, r6
 8011630:	f7ee ffe2 	bl	80005f8 <__aeabi_dmul>
 8011634:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011638:	eb0b 0507 	add.w	r5, fp, r7
 801163c:	465e      	mov	r6, fp
 801163e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011642:	f7ef fa89 	bl	8000b58 <__aeabi_d2iz>
 8011646:	4607      	mov	r7, r0
 8011648:	f7ee ff6c 	bl	8000524 <__aeabi_i2d>
 801164c:	3730      	adds	r7, #48	; 0x30
 801164e:	4602      	mov	r2, r0
 8011650:	460b      	mov	r3, r1
 8011652:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011656:	f7ee fe17 	bl	8000288 <__aeabi_dsub>
 801165a:	f806 7b01 	strb.w	r7, [r6], #1
 801165e:	42ae      	cmp	r6, r5
 8011660:	e9cd 0100 	strd	r0, r1, [sp]
 8011664:	f04f 0200 	mov.w	r2, #0
 8011668:	d126      	bne.n	80116b8 <_dtoa_r+0x5e8>
 801166a:	4b1c      	ldr	r3, [pc, #112]	; (80116dc <_dtoa_r+0x60c>)
 801166c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011670:	f7ee fe0c 	bl	800028c <__adddf3>
 8011674:	4602      	mov	r2, r0
 8011676:	460b      	mov	r3, r1
 8011678:	e9dd 0100 	ldrd	r0, r1, [sp]
 801167c:	f7ef fa4c 	bl	8000b18 <__aeabi_dcmpgt>
 8011680:	2800      	cmp	r0, #0
 8011682:	d174      	bne.n	801176e <_dtoa_r+0x69e>
 8011684:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011688:	2000      	movs	r0, #0
 801168a:	4914      	ldr	r1, [pc, #80]	; (80116dc <_dtoa_r+0x60c>)
 801168c:	f7ee fdfc 	bl	8000288 <__aeabi_dsub>
 8011690:	4602      	mov	r2, r0
 8011692:	460b      	mov	r3, r1
 8011694:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011698:	f7ef fa20 	bl	8000adc <__aeabi_dcmplt>
 801169c:	2800      	cmp	r0, #0
 801169e:	f43f af30 	beq.w	8011502 <_dtoa_r+0x432>
 80116a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80116a6:	2b30      	cmp	r3, #48	; 0x30
 80116a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80116ac:	d002      	beq.n	80116b4 <_dtoa_r+0x5e4>
 80116ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80116b2:	e04a      	b.n	801174a <_dtoa_r+0x67a>
 80116b4:	4615      	mov	r5, r2
 80116b6:	e7f4      	b.n	80116a2 <_dtoa_r+0x5d2>
 80116b8:	4b05      	ldr	r3, [pc, #20]	; (80116d0 <_dtoa_r+0x600>)
 80116ba:	f7ee ff9d 	bl	80005f8 <__aeabi_dmul>
 80116be:	e9cd 0100 	strd	r0, r1, [sp]
 80116c2:	e7bc      	b.n	801163e <_dtoa_r+0x56e>
 80116c4:	08013240 	.word	0x08013240
 80116c8:	08013218 	.word	0x08013218
 80116cc:	3ff00000 	.word	0x3ff00000
 80116d0:	40240000 	.word	0x40240000
 80116d4:	401c0000 	.word	0x401c0000
 80116d8:	40140000 	.word	0x40140000
 80116dc:	3fe00000 	.word	0x3fe00000
 80116e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80116e4:	465d      	mov	r5, fp
 80116e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80116ea:	4630      	mov	r0, r6
 80116ec:	4639      	mov	r1, r7
 80116ee:	f7ef f8ad 	bl	800084c <__aeabi_ddiv>
 80116f2:	f7ef fa31 	bl	8000b58 <__aeabi_d2iz>
 80116f6:	4680      	mov	r8, r0
 80116f8:	f7ee ff14 	bl	8000524 <__aeabi_i2d>
 80116fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011700:	f7ee ff7a 	bl	80005f8 <__aeabi_dmul>
 8011704:	4602      	mov	r2, r0
 8011706:	460b      	mov	r3, r1
 8011708:	4630      	mov	r0, r6
 801170a:	4639      	mov	r1, r7
 801170c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8011710:	f7ee fdba 	bl	8000288 <__aeabi_dsub>
 8011714:	f805 6b01 	strb.w	r6, [r5], #1
 8011718:	eba5 060b 	sub.w	r6, r5, fp
 801171c:	45b1      	cmp	r9, r6
 801171e:	4602      	mov	r2, r0
 8011720:	460b      	mov	r3, r1
 8011722:	d139      	bne.n	8011798 <_dtoa_r+0x6c8>
 8011724:	f7ee fdb2 	bl	800028c <__adddf3>
 8011728:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801172c:	4606      	mov	r6, r0
 801172e:	460f      	mov	r7, r1
 8011730:	f7ef f9f2 	bl	8000b18 <__aeabi_dcmpgt>
 8011734:	b9c8      	cbnz	r0, 801176a <_dtoa_r+0x69a>
 8011736:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801173a:	4630      	mov	r0, r6
 801173c:	4639      	mov	r1, r7
 801173e:	f7ef f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 8011742:	b110      	cbz	r0, 801174a <_dtoa_r+0x67a>
 8011744:	f018 0f01 	tst.w	r8, #1
 8011748:	d10f      	bne.n	801176a <_dtoa_r+0x69a>
 801174a:	9904      	ldr	r1, [sp, #16]
 801174c:	4620      	mov	r0, r4
 801174e:	f000 fdf9 	bl	8012344 <_Bfree>
 8011752:	2300      	movs	r3, #0
 8011754:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011756:	702b      	strb	r3, [r5, #0]
 8011758:	f10a 0301 	add.w	r3, sl, #1
 801175c:	6013      	str	r3, [r2, #0]
 801175e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011760:	2b00      	cmp	r3, #0
 8011762:	f000 8241 	beq.w	8011be8 <_dtoa_r+0xb18>
 8011766:	601d      	str	r5, [r3, #0]
 8011768:	e23e      	b.n	8011be8 <_dtoa_r+0xb18>
 801176a:	f8cd a020 	str.w	sl, [sp, #32]
 801176e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011772:	2a39      	cmp	r2, #57	; 0x39
 8011774:	f105 33ff 	add.w	r3, r5, #4294967295
 8011778:	d108      	bne.n	801178c <_dtoa_r+0x6bc>
 801177a:	459b      	cmp	fp, r3
 801177c:	d10a      	bne.n	8011794 <_dtoa_r+0x6c4>
 801177e:	9b08      	ldr	r3, [sp, #32]
 8011780:	3301      	adds	r3, #1
 8011782:	9308      	str	r3, [sp, #32]
 8011784:	2330      	movs	r3, #48	; 0x30
 8011786:	f88b 3000 	strb.w	r3, [fp]
 801178a:	465b      	mov	r3, fp
 801178c:	781a      	ldrb	r2, [r3, #0]
 801178e:	3201      	adds	r2, #1
 8011790:	701a      	strb	r2, [r3, #0]
 8011792:	e78c      	b.n	80116ae <_dtoa_r+0x5de>
 8011794:	461d      	mov	r5, r3
 8011796:	e7ea      	b.n	801176e <_dtoa_r+0x69e>
 8011798:	2200      	movs	r2, #0
 801179a:	4b9b      	ldr	r3, [pc, #620]	; (8011a08 <_dtoa_r+0x938>)
 801179c:	f7ee ff2c 	bl	80005f8 <__aeabi_dmul>
 80117a0:	2200      	movs	r2, #0
 80117a2:	2300      	movs	r3, #0
 80117a4:	4606      	mov	r6, r0
 80117a6:	460f      	mov	r7, r1
 80117a8:	f7ef f98e 	bl	8000ac8 <__aeabi_dcmpeq>
 80117ac:	2800      	cmp	r0, #0
 80117ae:	d09a      	beq.n	80116e6 <_dtoa_r+0x616>
 80117b0:	e7cb      	b.n	801174a <_dtoa_r+0x67a>
 80117b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117b4:	2a00      	cmp	r2, #0
 80117b6:	f000 808b 	beq.w	80118d0 <_dtoa_r+0x800>
 80117ba:	9a06      	ldr	r2, [sp, #24]
 80117bc:	2a01      	cmp	r2, #1
 80117be:	dc6e      	bgt.n	801189e <_dtoa_r+0x7ce>
 80117c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80117c2:	2a00      	cmp	r2, #0
 80117c4:	d067      	beq.n	8011896 <_dtoa_r+0x7c6>
 80117c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80117ca:	9f07      	ldr	r7, [sp, #28]
 80117cc:	9d05      	ldr	r5, [sp, #20]
 80117ce:	9a05      	ldr	r2, [sp, #20]
 80117d0:	2101      	movs	r1, #1
 80117d2:	441a      	add	r2, r3
 80117d4:	4620      	mov	r0, r4
 80117d6:	9205      	str	r2, [sp, #20]
 80117d8:	4498      	add	r8, r3
 80117da:	f000 fe91 	bl	8012500 <__i2b>
 80117de:	4606      	mov	r6, r0
 80117e0:	2d00      	cmp	r5, #0
 80117e2:	dd0c      	ble.n	80117fe <_dtoa_r+0x72e>
 80117e4:	f1b8 0f00 	cmp.w	r8, #0
 80117e8:	dd09      	ble.n	80117fe <_dtoa_r+0x72e>
 80117ea:	4545      	cmp	r5, r8
 80117ec:	9a05      	ldr	r2, [sp, #20]
 80117ee:	462b      	mov	r3, r5
 80117f0:	bfa8      	it	ge
 80117f2:	4643      	movge	r3, r8
 80117f4:	1ad2      	subs	r2, r2, r3
 80117f6:	9205      	str	r2, [sp, #20]
 80117f8:	1aed      	subs	r5, r5, r3
 80117fa:	eba8 0803 	sub.w	r8, r8, r3
 80117fe:	9b07      	ldr	r3, [sp, #28]
 8011800:	b1eb      	cbz	r3, 801183e <_dtoa_r+0x76e>
 8011802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011804:	2b00      	cmp	r3, #0
 8011806:	d067      	beq.n	80118d8 <_dtoa_r+0x808>
 8011808:	b18f      	cbz	r7, 801182e <_dtoa_r+0x75e>
 801180a:	4631      	mov	r1, r6
 801180c:	463a      	mov	r2, r7
 801180e:	4620      	mov	r0, r4
 8011810:	f000 ff16 	bl	8012640 <__pow5mult>
 8011814:	9a04      	ldr	r2, [sp, #16]
 8011816:	4601      	mov	r1, r0
 8011818:	4606      	mov	r6, r0
 801181a:	4620      	mov	r0, r4
 801181c:	f000 fe79 	bl	8012512 <__multiply>
 8011820:	9904      	ldr	r1, [sp, #16]
 8011822:	9008      	str	r0, [sp, #32]
 8011824:	4620      	mov	r0, r4
 8011826:	f000 fd8d 	bl	8012344 <_Bfree>
 801182a:	9b08      	ldr	r3, [sp, #32]
 801182c:	9304      	str	r3, [sp, #16]
 801182e:	9b07      	ldr	r3, [sp, #28]
 8011830:	1bda      	subs	r2, r3, r7
 8011832:	d004      	beq.n	801183e <_dtoa_r+0x76e>
 8011834:	9904      	ldr	r1, [sp, #16]
 8011836:	4620      	mov	r0, r4
 8011838:	f000 ff02 	bl	8012640 <__pow5mult>
 801183c:	9004      	str	r0, [sp, #16]
 801183e:	2101      	movs	r1, #1
 8011840:	4620      	mov	r0, r4
 8011842:	f000 fe5d 	bl	8012500 <__i2b>
 8011846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011848:	4607      	mov	r7, r0
 801184a:	2b00      	cmp	r3, #0
 801184c:	f000 81d0 	beq.w	8011bf0 <_dtoa_r+0xb20>
 8011850:	461a      	mov	r2, r3
 8011852:	4601      	mov	r1, r0
 8011854:	4620      	mov	r0, r4
 8011856:	f000 fef3 	bl	8012640 <__pow5mult>
 801185a:	9b06      	ldr	r3, [sp, #24]
 801185c:	2b01      	cmp	r3, #1
 801185e:	4607      	mov	r7, r0
 8011860:	dc40      	bgt.n	80118e4 <_dtoa_r+0x814>
 8011862:	9b00      	ldr	r3, [sp, #0]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d139      	bne.n	80118dc <_dtoa_r+0x80c>
 8011868:	9b01      	ldr	r3, [sp, #4]
 801186a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801186e:	2b00      	cmp	r3, #0
 8011870:	d136      	bne.n	80118e0 <_dtoa_r+0x810>
 8011872:	9b01      	ldr	r3, [sp, #4]
 8011874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011878:	0d1b      	lsrs	r3, r3, #20
 801187a:	051b      	lsls	r3, r3, #20
 801187c:	b12b      	cbz	r3, 801188a <_dtoa_r+0x7ba>
 801187e:	9b05      	ldr	r3, [sp, #20]
 8011880:	3301      	adds	r3, #1
 8011882:	9305      	str	r3, [sp, #20]
 8011884:	f108 0801 	add.w	r8, r8, #1
 8011888:	2301      	movs	r3, #1
 801188a:	9307      	str	r3, [sp, #28]
 801188c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801188e:	2b00      	cmp	r3, #0
 8011890:	d12a      	bne.n	80118e8 <_dtoa_r+0x818>
 8011892:	2001      	movs	r0, #1
 8011894:	e030      	b.n	80118f8 <_dtoa_r+0x828>
 8011896:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011898:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801189c:	e795      	b.n	80117ca <_dtoa_r+0x6fa>
 801189e:	9b07      	ldr	r3, [sp, #28]
 80118a0:	f109 37ff 	add.w	r7, r9, #4294967295
 80118a4:	42bb      	cmp	r3, r7
 80118a6:	bfbf      	itttt	lt
 80118a8:	9b07      	ldrlt	r3, [sp, #28]
 80118aa:	9707      	strlt	r7, [sp, #28]
 80118ac:	1afa      	sublt	r2, r7, r3
 80118ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80118b0:	bfbb      	ittet	lt
 80118b2:	189b      	addlt	r3, r3, r2
 80118b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80118b6:	1bdf      	subge	r7, r3, r7
 80118b8:	2700      	movlt	r7, #0
 80118ba:	f1b9 0f00 	cmp.w	r9, #0
 80118be:	bfb5      	itete	lt
 80118c0:	9b05      	ldrlt	r3, [sp, #20]
 80118c2:	9d05      	ldrge	r5, [sp, #20]
 80118c4:	eba3 0509 	sublt.w	r5, r3, r9
 80118c8:	464b      	movge	r3, r9
 80118ca:	bfb8      	it	lt
 80118cc:	2300      	movlt	r3, #0
 80118ce:	e77e      	b.n	80117ce <_dtoa_r+0x6fe>
 80118d0:	9f07      	ldr	r7, [sp, #28]
 80118d2:	9d05      	ldr	r5, [sp, #20]
 80118d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80118d6:	e783      	b.n	80117e0 <_dtoa_r+0x710>
 80118d8:	9a07      	ldr	r2, [sp, #28]
 80118da:	e7ab      	b.n	8011834 <_dtoa_r+0x764>
 80118dc:	2300      	movs	r3, #0
 80118de:	e7d4      	b.n	801188a <_dtoa_r+0x7ba>
 80118e0:	9b00      	ldr	r3, [sp, #0]
 80118e2:	e7d2      	b.n	801188a <_dtoa_r+0x7ba>
 80118e4:	2300      	movs	r3, #0
 80118e6:	9307      	str	r3, [sp, #28]
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80118ee:	6918      	ldr	r0, [r3, #16]
 80118f0:	f000 fdb8 	bl	8012464 <__hi0bits>
 80118f4:	f1c0 0020 	rsb	r0, r0, #32
 80118f8:	4440      	add	r0, r8
 80118fa:	f010 001f 	ands.w	r0, r0, #31
 80118fe:	d047      	beq.n	8011990 <_dtoa_r+0x8c0>
 8011900:	f1c0 0320 	rsb	r3, r0, #32
 8011904:	2b04      	cmp	r3, #4
 8011906:	dd3b      	ble.n	8011980 <_dtoa_r+0x8b0>
 8011908:	9b05      	ldr	r3, [sp, #20]
 801190a:	f1c0 001c 	rsb	r0, r0, #28
 801190e:	4403      	add	r3, r0
 8011910:	9305      	str	r3, [sp, #20]
 8011912:	4405      	add	r5, r0
 8011914:	4480      	add	r8, r0
 8011916:	9b05      	ldr	r3, [sp, #20]
 8011918:	2b00      	cmp	r3, #0
 801191a:	dd05      	ble.n	8011928 <_dtoa_r+0x858>
 801191c:	461a      	mov	r2, r3
 801191e:	9904      	ldr	r1, [sp, #16]
 8011920:	4620      	mov	r0, r4
 8011922:	f000 fedb 	bl	80126dc <__lshift>
 8011926:	9004      	str	r0, [sp, #16]
 8011928:	f1b8 0f00 	cmp.w	r8, #0
 801192c:	dd05      	ble.n	801193a <_dtoa_r+0x86a>
 801192e:	4639      	mov	r1, r7
 8011930:	4642      	mov	r2, r8
 8011932:	4620      	mov	r0, r4
 8011934:	f000 fed2 	bl	80126dc <__lshift>
 8011938:	4607      	mov	r7, r0
 801193a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801193c:	b353      	cbz	r3, 8011994 <_dtoa_r+0x8c4>
 801193e:	4639      	mov	r1, r7
 8011940:	9804      	ldr	r0, [sp, #16]
 8011942:	f000 ff1f 	bl	8012784 <__mcmp>
 8011946:	2800      	cmp	r0, #0
 8011948:	da24      	bge.n	8011994 <_dtoa_r+0x8c4>
 801194a:	2300      	movs	r3, #0
 801194c:	220a      	movs	r2, #10
 801194e:	9904      	ldr	r1, [sp, #16]
 8011950:	4620      	mov	r0, r4
 8011952:	f000 fd0e 	bl	8012372 <__multadd>
 8011956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011958:	9004      	str	r0, [sp, #16]
 801195a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801195e:	2b00      	cmp	r3, #0
 8011960:	f000 814d 	beq.w	8011bfe <_dtoa_r+0xb2e>
 8011964:	2300      	movs	r3, #0
 8011966:	4631      	mov	r1, r6
 8011968:	220a      	movs	r2, #10
 801196a:	4620      	mov	r0, r4
 801196c:	f000 fd01 	bl	8012372 <__multadd>
 8011970:	9b02      	ldr	r3, [sp, #8]
 8011972:	2b00      	cmp	r3, #0
 8011974:	4606      	mov	r6, r0
 8011976:	dc4f      	bgt.n	8011a18 <_dtoa_r+0x948>
 8011978:	9b06      	ldr	r3, [sp, #24]
 801197a:	2b02      	cmp	r3, #2
 801197c:	dd4c      	ble.n	8011a18 <_dtoa_r+0x948>
 801197e:	e011      	b.n	80119a4 <_dtoa_r+0x8d4>
 8011980:	d0c9      	beq.n	8011916 <_dtoa_r+0x846>
 8011982:	9a05      	ldr	r2, [sp, #20]
 8011984:	331c      	adds	r3, #28
 8011986:	441a      	add	r2, r3
 8011988:	9205      	str	r2, [sp, #20]
 801198a:	441d      	add	r5, r3
 801198c:	4498      	add	r8, r3
 801198e:	e7c2      	b.n	8011916 <_dtoa_r+0x846>
 8011990:	4603      	mov	r3, r0
 8011992:	e7f6      	b.n	8011982 <_dtoa_r+0x8b2>
 8011994:	f1b9 0f00 	cmp.w	r9, #0
 8011998:	dc38      	bgt.n	8011a0c <_dtoa_r+0x93c>
 801199a:	9b06      	ldr	r3, [sp, #24]
 801199c:	2b02      	cmp	r3, #2
 801199e:	dd35      	ble.n	8011a0c <_dtoa_r+0x93c>
 80119a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80119a4:	9b02      	ldr	r3, [sp, #8]
 80119a6:	b963      	cbnz	r3, 80119c2 <_dtoa_r+0x8f2>
 80119a8:	4639      	mov	r1, r7
 80119aa:	2205      	movs	r2, #5
 80119ac:	4620      	mov	r0, r4
 80119ae:	f000 fce0 	bl	8012372 <__multadd>
 80119b2:	4601      	mov	r1, r0
 80119b4:	4607      	mov	r7, r0
 80119b6:	9804      	ldr	r0, [sp, #16]
 80119b8:	f000 fee4 	bl	8012784 <__mcmp>
 80119bc:	2800      	cmp	r0, #0
 80119be:	f73f adcc 	bgt.w	801155a <_dtoa_r+0x48a>
 80119c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119c4:	465d      	mov	r5, fp
 80119c6:	ea6f 0a03 	mvn.w	sl, r3
 80119ca:	f04f 0900 	mov.w	r9, #0
 80119ce:	4639      	mov	r1, r7
 80119d0:	4620      	mov	r0, r4
 80119d2:	f000 fcb7 	bl	8012344 <_Bfree>
 80119d6:	2e00      	cmp	r6, #0
 80119d8:	f43f aeb7 	beq.w	801174a <_dtoa_r+0x67a>
 80119dc:	f1b9 0f00 	cmp.w	r9, #0
 80119e0:	d005      	beq.n	80119ee <_dtoa_r+0x91e>
 80119e2:	45b1      	cmp	r9, r6
 80119e4:	d003      	beq.n	80119ee <_dtoa_r+0x91e>
 80119e6:	4649      	mov	r1, r9
 80119e8:	4620      	mov	r0, r4
 80119ea:	f000 fcab 	bl	8012344 <_Bfree>
 80119ee:	4631      	mov	r1, r6
 80119f0:	4620      	mov	r0, r4
 80119f2:	f000 fca7 	bl	8012344 <_Bfree>
 80119f6:	e6a8      	b.n	801174a <_dtoa_r+0x67a>
 80119f8:	2700      	movs	r7, #0
 80119fa:	463e      	mov	r6, r7
 80119fc:	e7e1      	b.n	80119c2 <_dtoa_r+0x8f2>
 80119fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011a02:	463e      	mov	r6, r7
 8011a04:	e5a9      	b.n	801155a <_dtoa_r+0x48a>
 8011a06:	bf00      	nop
 8011a08:	40240000 	.word	0x40240000
 8011a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a0e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	f000 80fa 	beq.w	8011c0c <_dtoa_r+0xb3c>
 8011a18:	2d00      	cmp	r5, #0
 8011a1a:	dd05      	ble.n	8011a28 <_dtoa_r+0x958>
 8011a1c:	4631      	mov	r1, r6
 8011a1e:	462a      	mov	r2, r5
 8011a20:	4620      	mov	r0, r4
 8011a22:	f000 fe5b 	bl	80126dc <__lshift>
 8011a26:	4606      	mov	r6, r0
 8011a28:	9b07      	ldr	r3, [sp, #28]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d04c      	beq.n	8011ac8 <_dtoa_r+0x9f8>
 8011a2e:	6871      	ldr	r1, [r6, #4]
 8011a30:	4620      	mov	r0, r4
 8011a32:	f000 fc53 	bl	80122dc <_Balloc>
 8011a36:	6932      	ldr	r2, [r6, #16]
 8011a38:	3202      	adds	r2, #2
 8011a3a:	4605      	mov	r5, r0
 8011a3c:	0092      	lsls	r2, r2, #2
 8011a3e:	f106 010c 	add.w	r1, r6, #12
 8011a42:	300c      	adds	r0, #12
 8011a44:	f7fd fcc4 	bl	800f3d0 <memcpy>
 8011a48:	2201      	movs	r2, #1
 8011a4a:	4629      	mov	r1, r5
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	f000 fe45 	bl	80126dc <__lshift>
 8011a52:	9b00      	ldr	r3, [sp, #0]
 8011a54:	f8cd b014 	str.w	fp, [sp, #20]
 8011a58:	f003 0301 	and.w	r3, r3, #1
 8011a5c:	46b1      	mov	r9, r6
 8011a5e:	9307      	str	r3, [sp, #28]
 8011a60:	4606      	mov	r6, r0
 8011a62:	4639      	mov	r1, r7
 8011a64:	9804      	ldr	r0, [sp, #16]
 8011a66:	f7ff faa5 	bl	8010fb4 <quorem>
 8011a6a:	4649      	mov	r1, r9
 8011a6c:	4605      	mov	r5, r0
 8011a6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011a72:	9804      	ldr	r0, [sp, #16]
 8011a74:	f000 fe86 	bl	8012784 <__mcmp>
 8011a78:	4632      	mov	r2, r6
 8011a7a:	9000      	str	r0, [sp, #0]
 8011a7c:	4639      	mov	r1, r7
 8011a7e:	4620      	mov	r0, r4
 8011a80:	f000 fe9a 	bl	80127b8 <__mdiff>
 8011a84:	68c3      	ldr	r3, [r0, #12]
 8011a86:	4602      	mov	r2, r0
 8011a88:	bb03      	cbnz	r3, 8011acc <_dtoa_r+0x9fc>
 8011a8a:	4601      	mov	r1, r0
 8011a8c:	9008      	str	r0, [sp, #32]
 8011a8e:	9804      	ldr	r0, [sp, #16]
 8011a90:	f000 fe78 	bl	8012784 <__mcmp>
 8011a94:	9a08      	ldr	r2, [sp, #32]
 8011a96:	4603      	mov	r3, r0
 8011a98:	4611      	mov	r1, r2
 8011a9a:	4620      	mov	r0, r4
 8011a9c:	9308      	str	r3, [sp, #32]
 8011a9e:	f000 fc51 	bl	8012344 <_Bfree>
 8011aa2:	9b08      	ldr	r3, [sp, #32]
 8011aa4:	b9a3      	cbnz	r3, 8011ad0 <_dtoa_r+0xa00>
 8011aa6:	9a06      	ldr	r2, [sp, #24]
 8011aa8:	b992      	cbnz	r2, 8011ad0 <_dtoa_r+0xa00>
 8011aaa:	9a07      	ldr	r2, [sp, #28]
 8011aac:	b982      	cbnz	r2, 8011ad0 <_dtoa_r+0xa00>
 8011aae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011ab2:	d029      	beq.n	8011b08 <_dtoa_r+0xa38>
 8011ab4:	9b00      	ldr	r3, [sp, #0]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	dd01      	ble.n	8011abe <_dtoa_r+0x9ee>
 8011aba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8011abe:	9b05      	ldr	r3, [sp, #20]
 8011ac0:	1c5d      	adds	r5, r3, #1
 8011ac2:	f883 8000 	strb.w	r8, [r3]
 8011ac6:	e782      	b.n	80119ce <_dtoa_r+0x8fe>
 8011ac8:	4630      	mov	r0, r6
 8011aca:	e7c2      	b.n	8011a52 <_dtoa_r+0x982>
 8011acc:	2301      	movs	r3, #1
 8011ace:	e7e3      	b.n	8011a98 <_dtoa_r+0x9c8>
 8011ad0:	9a00      	ldr	r2, [sp, #0]
 8011ad2:	2a00      	cmp	r2, #0
 8011ad4:	db04      	blt.n	8011ae0 <_dtoa_r+0xa10>
 8011ad6:	d125      	bne.n	8011b24 <_dtoa_r+0xa54>
 8011ad8:	9a06      	ldr	r2, [sp, #24]
 8011ada:	bb1a      	cbnz	r2, 8011b24 <_dtoa_r+0xa54>
 8011adc:	9a07      	ldr	r2, [sp, #28]
 8011ade:	bb0a      	cbnz	r2, 8011b24 <_dtoa_r+0xa54>
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	ddec      	ble.n	8011abe <_dtoa_r+0x9ee>
 8011ae4:	2201      	movs	r2, #1
 8011ae6:	9904      	ldr	r1, [sp, #16]
 8011ae8:	4620      	mov	r0, r4
 8011aea:	f000 fdf7 	bl	80126dc <__lshift>
 8011aee:	4639      	mov	r1, r7
 8011af0:	9004      	str	r0, [sp, #16]
 8011af2:	f000 fe47 	bl	8012784 <__mcmp>
 8011af6:	2800      	cmp	r0, #0
 8011af8:	dc03      	bgt.n	8011b02 <_dtoa_r+0xa32>
 8011afa:	d1e0      	bne.n	8011abe <_dtoa_r+0x9ee>
 8011afc:	f018 0f01 	tst.w	r8, #1
 8011b00:	d0dd      	beq.n	8011abe <_dtoa_r+0x9ee>
 8011b02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011b06:	d1d8      	bne.n	8011aba <_dtoa_r+0x9ea>
 8011b08:	9b05      	ldr	r3, [sp, #20]
 8011b0a:	9a05      	ldr	r2, [sp, #20]
 8011b0c:	1c5d      	adds	r5, r3, #1
 8011b0e:	2339      	movs	r3, #57	; 0x39
 8011b10:	7013      	strb	r3, [r2, #0]
 8011b12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011b16:	2b39      	cmp	r3, #57	; 0x39
 8011b18:	f105 32ff 	add.w	r2, r5, #4294967295
 8011b1c:	d04f      	beq.n	8011bbe <_dtoa_r+0xaee>
 8011b1e:	3301      	adds	r3, #1
 8011b20:	7013      	strb	r3, [r2, #0]
 8011b22:	e754      	b.n	80119ce <_dtoa_r+0x8fe>
 8011b24:	9a05      	ldr	r2, [sp, #20]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	f102 0501 	add.w	r5, r2, #1
 8011b2c:	dd06      	ble.n	8011b3c <_dtoa_r+0xa6c>
 8011b2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011b32:	d0e9      	beq.n	8011b08 <_dtoa_r+0xa38>
 8011b34:	f108 0801 	add.w	r8, r8, #1
 8011b38:	9b05      	ldr	r3, [sp, #20]
 8011b3a:	e7c2      	b.n	8011ac2 <_dtoa_r+0x9f2>
 8011b3c:	9a02      	ldr	r2, [sp, #8]
 8011b3e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8011b42:	eba5 030b 	sub.w	r3, r5, fp
 8011b46:	4293      	cmp	r3, r2
 8011b48:	d021      	beq.n	8011b8e <_dtoa_r+0xabe>
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	220a      	movs	r2, #10
 8011b4e:	9904      	ldr	r1, [sp, #16]
 8011b50:	4620      	mov	r0, r4
 8011b52:	f000 fc0e 	bl	8012372 <__multadd>
 8011b56:	45b1      	cmp	r9, r6
 8011b58:	9004      	str	r0, [sp, #16]
 8011b5a:	f04f 0300 	mov.w	r3, #0
 8011b5e:	f04f 020a 	mov.w	r2, #10
 8011b62:	4649      	mov	r1, r9
 8011b64:	4620      	mov	r0, r4
 8011b66:	d105      	bne.n	8011b74 <_dtoa_r+0xaa4>
 8011b68:	f000 fc03 	bl	8012372 <__multadd>
 8011b6c:	4681      	mov	r9, r0
 8011b6e:	4606      	mov	r6, r0
 8011b70:	9505      	str	r5, [sp, #20]
 8011b72:	e776      	b.n	8011a62 <_dtoa_r+0x992>
 8011b74:	f000 fbfd 	bl	8012372 <__multadd>
 8011b78:	4631      	mov	r1, r6
 8011b7a:	4681      	mov	r9, r0
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	220a      	movs	r2, #10
 8011b80:	4620      	mov	r0, r4
 8011b82:	f000 fbf6 	bl	8012372 <__multadd>
 8011b86:	4606      	mov	r6, r0
 8011b88:	e7f2      	b.n	8011b70 <_dtoa_r+0xaa0>
 8011b8a:	f04f 0900 	mov.w	r9, #0
 8011b8e:	2201      	movs	r2, #1
 8011b90:	9904      	ldr	r1, [sp, #16]
 8011b92:	4620      	mov	r0, r4
 8011b94:	f000 fda2 	bl	80126dc <__lshift>
 8011b98:	4639      	mov	r1, r7
 8011b9a:	9004      	str	r0, [sp, #16]
 8011b9c:	f000 fdf2 	bl	8012784 <__mcmp>
 8011ba0:	2800      	cmp	r0, #0
 8011ba2:	dcb6      	bgt.n	8011b12 <_dtoa_r+0xa42>
 8011ba4:	d102      	bne.n	8011bac <_dtoa_r+0xadc>
 8011ba6:	f018 0f01 	tst.w	r8, #1
 8011baa:	d1b2      	bne.n	8011b12 <_dtoa_r+0xa42>
 8011bac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011bb0:	2b30      	cmp	r3, #48	; 0x30
 8011bb2:	f105 32ff 	add.w	r2, r5, #4294967295
 8011bb6:	f47f af0a 	bne.w	80119ce <_dtoa_r+0x8fe>
 8011bba:	4615      	mov	r5, r2
 8011bbc:	e7f6      	b.n	8011bac <_dtoa_r+0xadc>
 8011bbe:	4593      	cmp	fp, r2
 8011bc0:	d105      	bne.n	8011bce <_dtoa_r+0xafe>
 8011bc2:	2331      	movs	r3, #49	; 0x31
 8011bc4:	f10a 0a01 	add.w	sl, sl, #1
 8011bc8:	f88b 3000 	strb.w	r3, [fp]
 8011bcc:	e6ff      	b.n	80119ce <_dtoa_r+0x8fe>
 8011bce:	4615      	mov	r5, r2
 8011bd0:	e79f      	b.n	8011b12 <_dtoa_r+0xa42>
 8011bd2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8011c38 <_dtoa_r+0xb68>
 8011bd6:	e007      	b.n	8011be8 <_dtoa_r+0xb18>
 8011bd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011bda:	f8df b060 	ldr.w	fp, [pc, #96]	; 8011c3c <_dtoa_r+0xb6c>
 8011bde:	b11b      	cbz	r3, 8011be8 <_dtoa_r+0xb18>
 8011be0:	f10b 0308 	add.w	r3, fp, #8
 8011be4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011be6:	6013      	str	r3, [r2, #0]
 8011be8:	4658      	mov	r0, fp
 8011bea:	b017      	add	sp, #92	; 0x5c
 8011bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bf0:	9b06      	ldr	r3, [sp, #24]
 8011bf2:	2b01      	cmp	r3, #1
 8011bf4:	f77f ae35 	ble.w	8011862 <_dtoa_r+0x792>
 8011bf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011bfa:	9307      	str	r3, [sp, #28]
 8011bfc:	e649      	b.n	8011892 <_dtoa_r+0x7c2>
 8011bfe:	9b02      	ldr	r3, [sp, #8]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	dc03      	bgt.n	8011c0c <_dtoa_r+0xb3c>
 8011c04:	9b06      	ldr	r3, [sp, #24]
 8011c06:	2b02      	cmp	r3, #2
 8011c08:	f73f aecc 	bgt.w	80119a4 <_dtoa_r+0x8d4>
 8011c0c:	465d      	mov	r5, fp
 8011c0e:	4639      	mov	r1, r7
 8011c10:	9804      	ldr	r0, [sp, #16]
 8011c12:	f7ff f9cf 	bl	8010fb4 <quorem>
 8011c16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011c1a:	f805 8b01 	strb.w	r8, [r5], #1
 8011c1e:	9a02      	ldr	r2, [sp, #8]
 8011c20:	eba5 030b 	sub.w	r3, r5, fp
 8011c24:	429a      	cmp	r2, r3
 8011c26:	ddb0      	ble.n	8011b8a <_dtoa_r+0xaba>
 8011c28:	2300      	movs	r3, #0
 8011c2a:	220a      	movs	r2, #10
 8011c2c:	9904      	ldr	r1, [sp, #16]
 8011c2e:	4620      	mov	r0, r4
 8011c30:	f000 fb9f 	bl	8012372 <__multadd>
 8011c34:	9004      	str	r0, [sp, #16]
 8011c36:	e7ea      	b.n	8011c0e <_dtoa_r+0xb3e>
 8011c38:	08013180 	.word	0x08013180
 8011c3c:	08013200 	.word	0x08013200

08011c40 <rshift>:
 8011c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c42:	6906      	ldr	r6, [r0, #16]
 8011c44:	114b      	asrs	r3, r1, #5
 8011c46:	429e      	cmp	r6, r3
 8011c48:	f100 0414 	add.w	r4, r0, #20
 8011c4c:	dd30      	ble.n	8011cb0 <rshift+0x70>
 8011c4e:	f011 011f 	ands.w	r1, r1, #31
 8011c52:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8011c56:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8011c5a:	d108      	bne.n	8011c6e <rshift+0x2e>
 8011c5c:	4621      	mov	r1, r4
 8011c5e:	42b2      	cmp	r2, r6
 8011c60:	460b      	mov	r3, r1
 8011c62:	d211      	bcs.n	8011c88 <rshift+0x48>
 8011c64:	f852 3b04 	ldr.w	r3, [r2], #4
 8011c68:	f841 3b04 	str.w	r3, [r1], #4
 8011c6c:	e7f7      	b.n	8011c5e <rshift+0x1e>
 8011c6e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8011c72:	f1c1 0c20 	rsb	ip, r1, #32
 8011c76:	40cd      	lsrs	r5, r1
 8011c78:	3204      	adds	r2, #4
 8011c7a:	4623      	mov	r3, r4
 8011c7c:	42b2      	cmp	r2, r6
 8011c7e:	4617      	mov	r7, r2
 8011c80:	d30c      	bcc.n	8011c9c <rshift+0x5c>
 8011c82:	601d      	str	r5, [r3, #0]
 8011c84:	b105      	cbz	r5, 8011c88 <rshift+0x48>
 8011c86:	3304      	adds	r3, #4
 8011c88:	1b1a      	subs	r2, r3, r4
 8011c8a:	42a3      	cmp	r3, r4
 8011c8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011c90:	bf08      	it	eq
 8011c92:	2300      	moveq	r3, #0
 8011c94:	6102      	str	r2, [r0, #16]
 8011c96:	bf08      	it	eq
 8011c98:	6143      	streq	r3, [r0, #20]
 8011c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c9c:	683f      	ldr	r7, [r7, #0]
 8011c9e:	fa07 f70c 	lsl.w	r7, r7, ip
 8011ca2:	433d      	orrs	r5, r7
 8011ca4:	f843 5b04 	str.w	r5, [r3], #4
 8011ca8:	f852 5b04 	ldr.w	r5, [r2], #4
 8011cac:	40cd      	lsrs	r5, r1
 8011cae:	e7e5      	b.n	8011c7c <rshift+0x3c>
 8011cb0:	4623      	mov	r3, r4
 8011cb2:	e7e9      	b.n	8011c88 <rshift+0x48>

08011cb4 <__hexdig_fun>:
 8011cb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011cb8:	2b09      	cmp	r3, #9
 8011cba:	d802      	bhi.n	8011cc2 <__hexdig_fun+0xe>
 8011cbc:	3820      	subs	r0, #32
 8011cbe:	b2c0      	uxtb	r0, r0
 8011cc0:	4770      	bx	lr
 8011cc2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011cc6:	2b05      	cmp	r3, #5
 8011cc8:	d801      	bhi.n	8011cce <__hexdig_fun+0x1a>
 8011cca:	3847      	subs	r0, #71	; 0x47
 8011ccc:	e7f7      	b.n	8011cbe <__hexdig_fun+0xa>
 8011cce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011cd2:	2b05      	cmp	r3, #5
 8011cd4:	d801      	bhi.n	8011cda <__hexdig_fun+0x26>
 8011cd6:	3827      	subs	r0, #39	; 0x27
 8011cd8:	e7f1      	b.n	8011cbe <__hexdig_fun+0xa>
 8011cda:	2000      	movs	r0, #0
 8011cdc:	4770      	bx	lr

08011cde <__gethex>:
 8011cde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ce2:	b08b      	sub	sp, #44	; 0x2c
 8011ce4:	468a      	mov	sl, r1
 8011ce6:	9002      	str	r0, [sp, #8]
 8011ce8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011cea:	9306      	str	r3, [sp, #24]
 8011cec:	4690      	mov	r8, r2
 8011cee:	f000 fad0 	bl	8012292 <__localeconv_l>
 8011cf2:	6803      	ldr	r3, [r0, #0]
 8011cf4:	9303      	str	r3, [sp, #12]
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f7ee fa6a 	bl	80001d0 <strlen>
 8011cfc:	9b03      	ldr	r3, [sp, #12]
 8011cfe:	9001      	str	r0, [sp, #4]
 8011d00:	4403      	add	r3, r0
 8011d02:	f04f 0b00 	mov.w	fp, #0
 8011d06:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011d0a:	9307      	str	r3, [sp, #28]
 8011d0c:	f8da 3000 	ldr.w	r3, [sl]
 8011d10:	3302      	adds	r3, #2
 8011d12:	461f      	mov	r7, r3
 8011d14:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011d18:	2830      	cmp	r0, #48	; 0x30
 8011d1a:	d06c      	beq.n	8011df6 <__gethex+0x118>
 8011d1c:	f7ff ffca 	bl	8011cb4 <__hexdig_fun>
 8011d20:	4604      	mov	r4, r0
 8011d22:	2800      	cmp	r0, #0
 8011d24:	d16a      	bne.n	8011dfc <__gethex+0x11e>
 8011d26:	9a01      	ldr	r2, [sp, #4]
 8011d28:	9903      	ldr	r1, [sp, #12]
 8011d2a:	4638      	mov	r0, r7
 8011d2c:	f7fe fa80 	bl	8010230 <strncmp>
 8011d30:	2800      	cmp	r0, #0
 8011d32:	d166      	bne.n	8011e02 <__gethex+0x124>
 8011d34:	9b01      	ldr	r3, [sp, #4]
 8011d36:	5cf8      	ldrb	r0, [r7, r3]
 8011d38:	18fe      	adds	r6, r7, r3
 8011d3a:	f7ff ffbb 	bl	8011cb4 <__hexdig_fun>
 8011d3e:	2800      	cmp	r0, #0
 8011d40:	d062      	beq.n	8011e08 <__gethex+0x12a>
 8011d42:	4633      	mov	r3, r6
 8011d44:	7818      	ldrb	r0, [r3, #0]
 8011d46:	2830      	cmp	r0, #48	; 0x30
 8011d48:	461f      	mov	r7, r3
 8011d4a:	f103 0301 	add.w	r3, r3, #1
 8011d4e:	d0f9      	beq.n	8011d44 <__gethex+0x66>
 8011d50:	f7ff ffb0 	bl	8011cb4 <__hexdig_fun>
 8011d54:	fab0 f580 	clz	r5, r0
 8011d58:	096d      	lsrs	r5, r5, #5
 8011d5a:	4634      	mov	r4, r6
 8011d5c:	f04f 0b01 	mov.w	fp, #1
 8011d60:	463a      	mov	r2, r7
 8011d62:	4616      	mov	r6, r2
 8011d64:	3201      	adds	r2, #1
 8011d66:	7830      	ldrb	r0, [r6, #0]
 8011d68:	f7ff ffa4 	bl	8011cb4 <__hexdig_fun>
 8011d6c:	2800      	cmp	r0, #0
 8011d6e:	d1f8      	bne.n	8011d62 <__gethex+0x84>
 8011d70:	9a01      	ldr	r2, [sp, #4]
 8011d72:	9903      	ldr	r1, [sp, #12]
 8011d74:	4630      	mov	r0, r6
 8011d76:	f7fe fa5b 	bl	8010230 <strncmp>
 8011d7a:	b950      	cbnz	r0, 8011d92 <__gethex+0xb4>
 8011d7c:	b954      	cbnz	r4, 8011d94 <__gethex+0xb6>
 8011d7e:	9b01      	ldr	r3, [sp, #4]
 8011d80:	18f4      	adds	r4, r6, r3
 8011d82:	4622      	mov	r2, r4
 8011d84:	4616      	mov	r6, r2
 8011d86:	3201      	adds	r2, #1
 8011d88:	7830      	ldrb	r0, [r6, #0]
 8011d8a:	f7ff ff93 	bl	8011cb4 <__hexdig_fun>
 8011d8e:	2800      	cmp	r0, #0
 8011d90:	d1f8      	bne.n	8011d84 <__gethex+0xa6>
 8011d92:	b10c      	cbz	r4, 8011d98 <__gethex+0xba>
 8011d94:	1ba4      	subs	r4, r4, r6
 8011d96:	00a4      	lsls	r4, r4, #2
 8011d98:	7833      	ldrb	r3, [r6, #0]
 8011d9a:	2b50      	cmp	r3, #80	; 0x50
 8011d9c:	d001      	beq.n	8011da2 <__gethex+0xc4>
 8011d9e:	2b70      	cmp	r3, #112	; 0x70
 8011da0:	d140      	bne.n	8011e24 <__gethex+0x146>
 8011da2:	7873      	ldrb	r3, [r6, #1]
 8011da4:	2b2b      	cmp	r3, #43	; 0x2b
 8011da6:	d031      	beq.n	8011e0c <__gethex+0x12e>
 8011da8:	2b2d      	cmp	r3, #45	; 0x2d
 8011daa:	d033      	beq.n	8011e14 <__gethex+0x136>
 8011dac:	1c71      	adds	r1, r6, #1
 8011dae:	f04f 0900 	mov.w	r9, #0
 8011db2:	7808      	ldrb	r0, [r1, #0]
 8011db4:	f7ff ff7e 	bl	8011cb4 <__hexdig_fun>
 8011db8:	1e43      	subs	r3, r0, #1
 8011dba:	b2db      	uxtb	r3, r3
 8011dbc:	2b18      	cmp	r3, #24
 8011dbe:	d831      	bhi.n	8011e24 <__gethex+0x146>
 8011dc0:	f1a0 0210 	sub.w	r2, r0, #16
 8011dc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011dc8:	f7ff ff74 	bl	8011cb4 <__hexdig_fun>
 8011dcc:	1e43      	subs	r3, r0, #1
 8011dce:	b2db      	uxtb	r3, r3
 8011dd0:	2b18      	cmp	r3, #24
 8011dd2:	d922      	bls.n	8011e1a <__gethex+0x13c>
 8011dd4:	f1b9 0f00 	cmp.w	r9, #0
 8011dd8:	d000      	beq.n	8011ddc <__gethex+0xfe>
 8011dda:	4252      	negs	r2, r2
 8011ddc:	4414      	add	r4, r2
 8011dde:	f8ca 1000 	str.w	r1, [sl]
 8011de2:	b30d      	cbz	r5, 8011e28 <__gethex+0x14a>
 8011de4:	f1bb 0f00 	cmp.w	fp, #0
 8011de8:	bf0c      	ite	eq
 8011dea:	2706      	moveq	r7, #6
 8011dec:	2700      	movne	r7, #0
 8011dee:	4638      	mov	r0, r7
 8011df0:	b00b      	add	sp, #44	; 0x2c
 8011df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011df6:	f10b 0b01 	add.w	fp, fp, #1
 8011dfa:	e78a      	b.n	8011d12 <__gethex+0x34>
 8011dfc:	2500      	movs	r5, #0
 8011dfe:	462c      	mov	r4, r5
 8011e00:	e7ae      	b.n	8011d60 <__gethex+0x82>
 8011e02:	463e      	mov	r6, r7
 8011e04:	2501      	movs	r5, #1
 8011e06:	e7c7      	b.n	8011d98 <__gethex+0xba>
 8011e08:	4604      	mov	r4, r0
 8011e0a:	e7fb      	b.n	8011e04 <__gethex+0x126>
 8011e0c:	f04f 0900 	mov.w	r9, #0
 8011e10:	1cb1      	adds	r1, r6, #2
 8011e12:	e7ce      	b.n	8011db2 <__gethex+0xd4>
 8011e14:	f04f 0901 	mov.w	r9, #1
 8011e18:	e7fa      	b.n	8011e10 <__gethex+0x132>
 8011e1a:	230a      	movs	r3, #10
 8011e1c:	fb03 0202 	mla	r2, r3, r2, r0
 8011e20:	3a10      	subs	r2, #16
 8011e22:	e7cf      	b.n	8011dc4 <__gethex+0xe6>
 8011e24:	4631      	mov	r1, r6
 8011e26:	e7da      	b.n	8011dde <__gethex+0x100>
 8011e28:	1bf3      	subs	r3, r6, r7
 8011e2a:	3b01      	subs	r3, #1
 8011e2c:	4629      	mov	r1, r5
 8011e2e:	2b07      	cmp	r3, #7
 8011e30:	dc49      	bgt.n	8011ec6 <__gethex+0x1e8>
 8011e32:	9802      	ldr	r0, [sp, #8]
 8011e34:	f000 fa52 	bl	80122dc <_Balloc>
 8011e38:	9b01      	ldr	r3, [sp, #4]
 8011e3a:	f100 0914 	add.w	r9, r0, #20
 8011e3e:	f04f 0b00 	mov.w	fp, #0
 8011e42:	f1c3 0301 	rsb	r3, r3, #1
 8011e46:	4605      	mov	r5, r0
 8011e48:	f8cd 9010 	str.w	r9, [sp, #16]
 8011e4c:	46da      	mov	sl, fp
 8011e4e:	9308      	str	r3, [sp, #32]
 8011e50:	42b7      	cmp	r7, r6
 8011e52:	d33b      	bcc.n	8011ecc <__gethex+0x1ee>
 8011e54:	9804      	ldr	r0, [sp, #16]
 8011e56:	f840 ab04 	str.w	sl, [r0], #4
 8011e5a:	eba0 0009 	sub.w	r0, r0, r9
 8011e5e:	1080      	asrs	r0, r0, #2
 8011e60:	6128      	str	r0, [r5, #16]
 8011e62:	0147      	lsls	r7, r0, #5
 8011e64:	4650      	mov	r0, sl
 8011e66:	f000 fafd 	bl	8012464 <__hi0bits>
 8011e6a:	f8d8 6000 	ldr.w	r6, [r8]
 8011e6e:	1a3f      	subs	r7, r7, r0
 8011e70:	42b7      	cmp	r7, r6
 8011e72:	dd64      	ble.n	8011f3e <__gethex+0x260>
 8011e74:	1bbf      	subs	r7, r7, r6
 8011e76:	4639      	mov	r1, r7
 8011e78:	4628      	mov	r0, r5
 8011e7a:	f000 fe0d 	bl	8012a98 <__any_on>
 8011e7e:	4682      	mov	sl, r0
 8011e80:	b178      	cbz	r0, 8011ea2 <__gethex+0x1c4>
 8011e82:	1e7b      	subs	r3, r7, #1
 8011e84:	1159      	asrs	r1, r3, #5
 8011e86:	f003 021f 	and.w	r2, r3, #31
 8011e8a:	f04f 0a01 	mov.w	sl, #1
 8011e8e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011e92:	fa0a f202 	lsl.w	r2, sl, r2
 8011e96:	420a      	tst	r2, r1
 8011e98:	d003      	beq.n	8011ea2 <__gethex+0x1c4>
 8011e9a:	4553      	cmp	r3, sl
 8011e9c:	dc46      	bgt.n	8011f2c <__gethex+0x24e>
 8011e9e:	f04f 0a02 	mov.w	sl, #2
 8011ea2:	4639      	mov	r1, r7
 8011ea4:	4628      	mov	r0, r5
 8011ea6:	f7ff fecb 	bl	8011c40 <rshift>
 8011eaa:	443c      	add	r4, r7
 8011eac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011eb0:	42a3      	cmp	r3, r4
 8011eb2:	da52      	bge.n	8011f5a <__gethex+0x27c>
 8011eb4:	4629      	mov	r1, r5
 8011eb6:	9802      	ldr	r0, [sp, #8]
 8011eb8:	f000 fa44 	bl	8012344 <_Bfree>
 8011ebc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	6013      	str	r3, [r2, #0]
 8011ec2:	27a3      	movs	r7, #163	; 0xa3
 8011ec4:	e793      	b.n	8011dee <__gethex+0x110>
 8011ec6:	3101      	adds	r1, #1
 8011ec8:	105b      	asrs	r3, r3, #1
 8011eca:	e7b0      	b.n	8011e2e <__gethex+0x150>
 8011ecc:	1e73      	subs	r3, r6, #1
 8011ece:	9305      	str	r3, [sp, #20]
 8011ed0:	9a07      	ldr	r2, [sp, #28]
 8011ed2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011ed6:	4293      	cmp	r3, r2
 8011ed8:	d018      	beq.n	8011f0c <__gethex+0x22e>
 8011eda:	f1bb 0f20 	cmp.w	fp, #32
 8011ede:	d107      	bne.n	8011ef0 <__gethex+0x212>
 8011ee0:	9b04      	ldr	r3, [sp, #16]
 8011ee2:	f8c3 a000 	str.w	sl, [r3]
 8011ee6:	3304      	adds	r3, #4
 8011ee8:	f04f 0a00 	mov.w	sl, #0
 8011eec:	9304      	str	r3, [sp, #16]
 8011eee:	46d3      	mov	fp, sl
 8011ef0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011ef4:	f7ff fede 	bl	8011cb4 <__hexdig_fun>
 8011ef8:	f000 000f 	and.w	r0, r0, #15
 8011efc:	fa00 f00b 	lsl.w	r0, r0, fp
 8011f00:	ea4a 0a00 	orr.w	sl, sl, r0
 8011f04:	f10b 0b04 	add.w	fp, fp, #4
 8011f08:	9b05      	ldr	r3, [sp, #20]
 8011f0a:	e00d      	b.n	8011f28 <__gethex+0x24a>
 8011f0c:	9b05      	ldr	r3, [sp, #20]
 8011f0e:	9a08      	ldr	r2, [sp, #32]
 8011f10:	4413      	add	r3, r2
 8011f12:	42bb      	cmp	r3, r7
 8011f14:	d3e1      	bcc.n	8011eda <__gethex+0x1fc>
 8011f16:	4618      	mov	r0, r3
 8011f18:	9a01      	ldr	r2, [sp, #4]
 8011f1a:	9903      	ldr	r1, [sp, #12]
 8011f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8011f1e:	f7fe f987 	bl	8010230 <strncmp>
 8011f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f24:	2800      	cmp	r0, #0
 8011f26:	d1d8      	bne.n	8011eda <__gethex+0x1fc>
 8011f28:	461e      	mov	r6, r3
 8011f2a:	e791      	b.n	8011e50 <__gethex+0x172>
 8011f2c:	1eb9      	subs	r1, r7, #2
 8011f2e:	4628      	mov	r0, r5
 8011f30:	f000 fdb2 	bl	8012a98 <__any_on>
 8011f34:	2800      	cmp	r0, #0
 8011f36:	d0b2      	beq.n	8011e9e <__gethex+0x1c0>
 8011f38:	f04f 0a03 	mov.w	sl, #3
 8011f3c:	e7b1      	b.n	8011ea2 <__gethex+0x1c4>
 8011f3e:	da09      	bge.n	8011f54 <__gethex+0x276>
 8011f40:	1bf7      	subs	r7, r6, r7
 8011f42:	4629      	mov	r1, r5
 8011f44:	463a      	mov	r2, r7
 8011f46:	9802      	ldr	r0, [sp, #8]
 8011f48:	f000 fbc8 	bl	80126dc <__lshift>
 8011f4c:	1be4      	subs	r4, r4, r7
 8011f4e:	4605      	mov	r5, r0
 8011f50:	f100 0914 	add.w	r9, r0, #20
 8011f54:	f04f 0a00 	mov.w	sl, #0
 8011f58:	e7a8      	b.n	8011eac <__gethex+0x1ce>
 8011f5a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011f5e:	42a0      	cmp	r0, r4
 8011f60:	dd6a      	ble.n	8012038 <__gethex+0x35a>
 8011f62:	1b04      	subs	r4, r0, r4
 8011f64:	42a6      	cmp	r6, r4
 8011f66:	dc2e      	bgt.n	8011fc6 <__gethex+0x2e8>
 8011f68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011f6c:	2b02      	cmp	r3, #2
 8011f6e:	d022      	beq.n	8011fb6 <__gethex+0x2d8>
 8011f70:	2b03      	cmp	r3, #3
 8011f72:	d024      	beq.n	8011fbe <__gethex+0x2e0>
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	d115      	bne.n	8011fa4 <__gethex+0x2c6>
 8011f78:	42a6      	cmp	r6, r4
 8011f7a:	d113      	bne.n	8011fa4 <__gethex+0x2c6>
 8011f7c:	2e01      	cmp	r6, #1
 8011f7e:	dc0b      	bgt.n	8011f98 <__gethex+0x2ba>
 8011f80:	9a06      	ldr	r2, [sp, #24]
 8011f82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011f86:	6013      	str	r3, [r2, #0]
 8011f88:	2301      	movs	r3, #1
 8011f8a:	612b      	str	r3, [r5, #16]
 8011f8c:	f8c9 3000 	str.w	r3, [r9]
 8011f90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f92:	2762      	movs	r7, #98	; 0x62
 8011f94:	601d      	str	r5, [r3, #0]
 8011f96:	e72a      	b.n	8011dee <__gethex+0x110>
 8011f98:	1e71      	subs	r1, r6, #1
 8011f9a:	4628      	mov	r0, r5
 8011f9c:	f000 fd7c 	bl	8012a98 <__any_on>
 8011fa0:	2800      	cmp	r0, #0
 8011fa2:	d1ed      	bne.n	8011f80 <__gethex+0x2a2>
 8011fa4:	4629      	mov	r1, r5
 8011fa6:	9802      	ldr	r0, [sp, #8]
 8011fa8:	f000 f9cc 	bl	8012344 <_Bfree>
 8011fac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011fae:	2300      	movs	r3, #0
 8011fb0:	6013      	str	r3, [r2, #0]
 8011fb2:	2750      	movs	r7, #80	; 0x50
 8011fb4:	e71b      	b.n	8011dee <__gethex+0x110>
 8011fb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d0e1      	beq.n	8011f80 <__gethex+0x2a2>
 8011fbc:	e7f2      	b.n	8011fa4 <__gethex+0x2c6>
 8011fbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d1dd      	bne.n	8011f80 <__gethex+0x2a2>
 8011fc4:	e7ee      	b.n	8011fa4 <__gethex+0x2c6>
 8011fc6:	1e67      	subs	r7, r4, #1
 8011fc8:	f1ba 0f00 	cmp.w	sl, #0
 8011fcc:	d131      	bne.n	8012032 <__gethex+0x354>
 8011fce:	b127      	cbz	r7, 8011fda <__gethex+0x2fc>
 8011fd0:	4639      	mov	r1, r7
 8011fd2:	4628      	mov	r0, r5
 8011fd4:	f000 fd60 	bl	8012a98 <__any_on>
 8011fd8:	4682      	mov	sl, r0
 8011fda:	117a      	asrs	r2, r7, #5
 8011fdc:	2301      	movs	r3, #1
 8011fde:	f007 071f 	and.w	r7, r7, #31
 8011fe2:	fa03 f707 	lsl.w	r7, r3, r7
 8011fe6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8011fea:	4621      	mov	r1, r4
 8011fec:	421f      	tst	r7, r3
 8011fee:	4628      	mov	r0, r5
 8011ff0:	bf18      	it	ne
 8011ff2:	f04a 0a02 	orrne.w	sl, sl, #2
 8011ff6:	1b36      	subs	r6, r6, r4
 8011ff8:	f7ff fe22 	bl	8011c40 <rshift>
 8011ffc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8012000:	2702      	movs	r7, #2
 8012002:	f1ba 0f00 	cmp.w	sl, #0
 8012006:	d048      	beq.n	801209a <__gethex+0x3bc>
 8012008:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801200c:	2b02      	cmp	r3, #2
 801200e:	d015      	beq.n	801203c <__gethex+0x35e>
 8012010:	2b03      	cmp	r3, #3
 8012012:	d017      	beq.n	8012044 <__gethex+0x366>
 8012014:	2b01      	cmp	r3, #1
 8012016:	d109      	bne.n	801202c <__gethex+0x34e>
 8012018:	f01a 0f02 	tst.w	sl, #2
 801201c:	d006      	beq.n	801202c <__gethex+0x34e>
 801201e:	f8d9 3000 	ldr.w	r3, [r9]
 8012022:	ea4a 0a03 	orr.w	sl, sl, r3
 8012026:	f01a 0f01 	tst.w	sl, #1
 801202a:	d10e      	bne.n	801204a <__gethex+0x36c>
 801202c:	f047 0710 	orr.w	r7, r7, #16
 8012030:	e033      	b.n	801209a <__gethex+0x3bc>
 8012032:	f04f 0a01 	mov.w	sl, #1
 8012036:	e7d0      	b.n	8011fda <__gethex+0x2fc>
 8012038:	2701      	movs	r7, #1
 801203a:	e7e2      	b.n	8012002 <__gethex+0x324>
 801203c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801203e:	f1c3 0301 	rsb	r3, r3, #1
 8012042:	9315      	str	r3, [sp, #84]	; 0x54
 8012044:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012046:	2b00      	cmp	r3, #0
 8012048:	d0f0      	beq.n	801202c <__gethex+0x34e>
 801204a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801204e:	f105 0314 	add.w	r3, r5, #20
 8012052:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8012056:	eb03 010a 	add.w	r1, r3, sl
 801205a:	f04f 0c00 	mov.w	ip, #0
 801205e:	4618      	mov	r0, r3
 8012060:	f853 2b04 	ldr.w	r2, [r3], #4
 8012064:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012068:	d01c      	beq.n	80120a4 <__gethex+0x3c6>
 801206a:	3201      	adds	r2, #1
 801206c:	6002      	str	r2, [r0, #0]
 801206e:	2f02      	cmp	r7, #2
 8012070:	f105 0314 	add.w	r3, r5, #20
 8012074:	d138      	bne.n	80120e8 <__gethex+0x40a>
 8012076:	f8d8 2000 	ldr.w	r2, [r8]
 801207a:	3a01      	subs	r2, #1
 801207c:	42b2      	cmp	r2, r6
 801207e:	d10a      	bne.n	8012096 <__gethex+0x3b8>
 8012080:	1171      	asrs	r1, r6, #5
 8012082:	2201      	movs	r2, #1
 8012084:	f006 061f 	and.w	r6, r6, #31
 8012088:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801208c:	fa02 f606 	lsl.w	r6, r2, r6
 8012090:	421e      	tst	r6, r3
 8012092:	bf18      	it	ne
 8012094:	4617      	movne	r7, r2
 8012096:	f047 0720 	orr.w	r7, r7, #32
 801209a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801209c:	601d      	str	r5, [r3, #0]
 801209e:	9b06      	ldr	r3, [sp, #24]
 80120a0:	601c      	str	r4, [r3, #0]
 80120a2:	e6a4      	b.n	8011dee <__gethex+0x110>
 80120a4:	4299      	cmp	r1, r3
 80120a6:	f843 cc04 	str.w	ip, [r3, #-4]
 80120aa:	d8d8      	bhi.n	801205e <__gethex+0x380>
 80120ac:	68ab      	ldr	r3, [r5, #8]
 80120ae:	4599      	cmp	r9, r3
 80120b0:	db12      	blt.n	80120d8 <__gethex+0x3fa>
 80120b2:	6869      	ldr	r1, [r5, #4]
 80120b4:	9802      	ldr	r0, [sp, #8]
 80120b6:	3101      	adds	r1, #1
 80120b8:	f000 f910 	bl	80122dc <_Balloc>
 80120bc:	692a      	ldr	r2, [r5, #16]
 80120be:	3202      	adds	r2, #2
 80120c0:	f105 010c 	add.w	r1, r5, #12
 80120c4:	4683      	mov	fp, r0
 80120c6:	0092      	lsls	r2, r2, #2
 80120c8:	300c      	adds	r0, #12
 80120ca:	f7fd f981 	bl	800f3d0 <memcpy>
 80120ce:	4629      	mov	r1, r5
 80120d0:	9802      	ldr	r0, [sp, #8]
 80120d2:	f000 f937 	bl	8012344 <_Bfree>
 80120d6:	465d      	mov	r5, fp
 80120d8:	692b      	ldr	r3, [r5, #16]
 80120da:	1c5a      	adds	r2, r3, #1
 80120dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80120e0:	612a      	str	r2, [r5, #16]
 80120e2:	2201      	movs	r2, #1
 80120e4:	615a      	str	r2, [r3, #20]
 80120e6:	e7c2      	b.n	801206e <__gethex+0x390>
 80120e8:	692a      	ldr	r2, [r5, #16]
 80120ea:	454a      	cmp	r2, r9
 80120ec:	dd0b      	ble.n	8012106 <__gethex+0x428>
 80120ee:	2101      	movs	r1, #1
 80120f0:	4628      	mov	r0, r5
 80120f2:	f7ff fda5 	bl	8011c40 <rshift>
 80120f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80120fa:	3401      	adds	r4, #1
 80120fc:	42a3      	cmp	r3, r4
 80120fe:	f6ff aed9 	blt.w	8011eb4 <__gethex+0x1d6>
 8012102:	2701      	movs	r7, #1
 8012104:	e7c7      	b.n	8012096 <__gethex+0x3b8>
 8012106:	f016 061f 	ands.w	r6, r6, #31
 801210a:	d0fa      	beq.n	8012102 <__gethex+0x424>
 801210c:	449a      	add	sl, r3
 801210e:	f1c6 0620 	rsb	r6, r6, #32
 8012112:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012116:	f000 f9a5 	bl	8012464 <__hi0bits>
 801211a:	42b0      	cmp	r0, r6
 801211c:	dbe7      	blt.n	80120ee <__gethex+0x410>
 801211e:	e7f0      	b.n	8012102 <__gethex+0x424>

08012120 <L_shift>:
 8012120:	f1c2 0208 	rsb	r2, r2, #8
 8012124:	0092      	lsls	r2, r2, #2
 8012126:	b570      	push	{r4, r5, r6, lr}
 8012128:	f1c2 0620 	rsb	r6, r2, #32
 801212c:	6843      	ldr	r3, [r0, #4]
 801212e:	6804      	ldr	r4, [r0, #0]
 8012130:	fa03 f506 	lsl.w	r5, r3, r6
 8012134:	432c      	orrs	r4, r5
 8012136:	40d3      	lsrs	r3, r2
 8012138:	6004      	str	r4, [r0, #0]
 801213a:	f840 3f04 	str.w	r3, [r0, #4]!
 801213e:	4288      	cmp	r0, r1
 8012140:	d3f4      	bcc.n	801212c <L_shift+0xc>
 8012142:	bd70      	pop	{r4, r5, r6, pc}

08012144 <__match>:
 8012144:	b530      	push	{r4, r5, lr}
 8012146:	6803      	ldr	r3, [r0, #0]
 8012148:	3301      	adds	r3, #1
 801214a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801214e:	b914      	cbnz	r4, 8012156 <__match+0x12>
 8012150:	6003      	str	r3, [r0, #0]
 8012152:	2001      	movs	r0, #1
 8012154:	bd30      	pop	{r4, r5, pc}
 8012156:	f813 2b01 	ldrb.w	r2, [r3], #1
 801215a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801215e:	2d19      	cmp	r5, #25
 8012160:	bf98      	it	ls
 8012162:	3220      	addls	r2, #32
 8012164:	42a2      	cmp	r2, r4
 8012166:	d0f0      	beq.n	801214a <__match+0x6>
 8012168:	2000      	movs	r0, #0
 801216a:	e7f3      	b.n	8012154 <__match+0x10>

0801216c <__hexnan>:
 801216c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012170:	680b      	ldr	r3, [r1, #0]
 8012172:	6801      	ldr	r1, [r0, #0]
 8012174:	115f      	asrs	r7, r3, #5
 8012176:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801217a:	f013 031f 	ands.w	r3, r3, #31
 801217e:	b087      	sub	sp, #28
 8012180:	bf18      	it	ne
 8012182:	3704      	addne	r7, #4
 8012184:	2500      	movs	r5, #0
 8012186:	1f3e      	subs	r6, r7, #4
 8012188:	4682      	mov	sl, r0
 801218a:	4690      	mov	r8, r2
 801218c:	9301      	str	r3, [sp, #4]
 801218e:	f847 5c04 	str.w	r5, [r7, #-4]
 8012192:	46b1      	mov	r9, r6
 8012194:	4634      	mov	r4, r6
 8012196:	9502      	str	r5, [sp, #8]
 8012198:	46ab      	mov	fp, r5
 801219a:	784a      	ldrb	r2, [r1, #1]
 801219c:	1c4b      	adds	r3, r1, #1
 801219e:	9303      	str	r3, [sp, #12]
 80121a0:	b342      	cbz	r2, 80121f4 <__hexnan+0x88>
 80121a2:	4610      	mov	r0, r2
 80121a4:	9105      	str	r1, [sp, #20]
 80121a6:	9204      	str	r2, [sp, #16]
 80121a8:	f7ff fd84 	bl	8011cb4 <__hexdig_fun>
 80121ac:	2800      	cmp	r0, #0
 80121ae:	d143      	bne.n	8012238 <__hexnan+0xcc>
 80121b0:	9a04      	ldr	r2, [sp, #16]
 80121b2:	9905      	ldr	r1, [sp, #20]
 80121b4:	2a20      	cmp	r2, #32
 80121b6:	d818      	bhi.n	80121ea <__hexnan+0x7e>
 80121b8:	9b02      	ldr	r3, [sp, #8]
 80121ba:	459b      	cmp	fp, r3
 80121bc:	dd13      	ble.n	80121e6 <__hexnan+0x7a>
 80121be:	454c      	cmp	r4, r9
 80121c0:	d206      	bcs.n	80121d0 <__hexnan+0x64>
 80121c2:	2d07      	cmp	r5, #7
 80121c4:	dc04      	bgt.n	80121d0 <__hexnan+0x64>
 80121c6:	462a      	mov	r2, r5
 80121c8:	4649      	mov	r1, r9
 80121ca:	4620      	mov	r0, r4
 80121cc:	f7ff ffa8 	bl	8012120 <L_shift>
 80121d0:	4544      	cmp	r4, r8
 80121d2:	d944      	bls.n	801225e <__hexnan+0xf2>
 80121d4:	2300      	movs	r3, #0
 80121d6:	f1a4 0904 	sub.w	r9, r4, #4
 80121da:	f844 3c04 	str.w	r3, [r4, #-4]
 80121de:	f8cd b008 	str.w	fp, [sp, #8]
 80121e2:	464c      	mov	r4, r9
 80121e4:	461d      	mov	r5, r3
 80121e6:	9903      	ldr	r1, [sp, #12]
 80121e8:	e7d7      	b.n	801219a <__hexnan+0x2e>
 80121ea:	2a29      	cmp	r2, #41	; 0x29
 80121ec:	d14a      	bne.n	8012284 <__hexnan+0x118>
 80121ee:	3102      	adds	r1, #2
 80121f0:	f8ca 1000 	str.w	r1, [sl]
 80121f4:	f1bb 0f00 	cmp.w	fp, #0
 80121f8:	d044      	beq.n	8012284 <__hexnan+0x118>
 80121fa:	454c      	cmp	r4, r9
 80121fc:	d206      	bcs.n	801220c <__hexnan+0xa0>
 80121fe:	2d07      	cmp	r5, #7
 8012200:	dc04      	bgt.n	801220c <__hexnan+0xa0>
 8012202:	462a      	mov	r2, r5
 8012204:	4649      	mov	r1, r9
 8012206:	4620      	mov	r0, r4
 8012208:	f7ff ff8a 	bl	8012120 <L_shift>
 801220c:	4544      	cmp	r4, r8
 801220e:	d928      	bls.n	8012262 <__hexnan+0xf6>
 8012210:	4643      	mov	r3, r8
 8012212:	f854 2b04 	ldr.w	r2, [r4], #4
 8012216:	f843 2b04 	str.w	r2, [r3], #4
 801221a:	42a6      	cmp	r6, r4
 801221c:	d2f9      	bcs.n	8012212 <__hexnan+0xa6>
 801221e:	2200      	movs	r2, #0
 8012220:	f843 2b04 	str.w	r2, [r3], #4
 8012224:	429e      	cmp	r6, r3
 8012226:	d2fb      	bcs.n	8012220 <__hexnan+0xb4>
 8012228:	6833      	ldr	r3, [r6, #0]
 801222a:	b91b      	cbnz	r3, 8012234 <__hexnan+0xc8>
 801222c:	4546      	cmp	r6, r8
 801222e:	d127      	bne.n	8012280 <__hexnan+0x114>
 8012230:	2301      	movs	r3, #1
 8012232:	6033      	str	r3, [r6, #0]
 8012234:	2005      	movs	r0, #5
 8012236:	e026      	b.n	8012286 <__hexnan+0x11a>
 8012238:	3501      	adds	r5, #1
 801223a:	2d08      	cmp	r5, #8
 801223c:	f10b 0b01 	add.w	fp, fp, #1
 8012240:	dd06      	ble.n	8012250 <__hexnan+0xe4>
 8012242:	4544      	cmp	r4, r8
 8012244:	d9cf      	bls.n	80121e6 <__hexnan+0x7a>
 8012246:	2300      	movs	r3, #0
 8012248:	f844 3c04 	str.w	r3, [r4, #-4]
 801224c:	2501      	movs	r5, #1
 801224e:	3c04      	subs	r4, #4
 8012250:	6822      	ldr	r2, [r4, #0]
 8012252:	f000 000f 	and.w	r0, r0, #15
 8012256:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801225a:	6020      	str	r0, [r4, #0]
 801225c:	e7c3      	b.n	80121e6 <__hexnan+0x7a>
 801225e:	2508      	movs	r5, #8
 8012260:	e7c1      	b.n	80121e6 <__hexnan+0x7a>
 8012262:	9b01      	ldr	r3, [sp, #4]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d0df      	beq.n	8012228 <__hexnan+0xbc>
 8012268:	f04f 32ff 	mov.w	r2, #4294967295
 801226c:	f1c3 0320 	rsb	r3, r3, #32
 8012270:	fa22 f303 	lsr.w	r3, r2, r3
 8012274:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8012278:	401a      	ands	r2, r3
 801227a:	f847 2c04 	str.w	r2, [r7, #-4]
 801227e:	e7d3      	b.n	8012228 <__hexnan+0xbc>
 8012280:	3e04      	subs	r6, #4
 8012282:	e7d1      	b.n	8012228 <__hexnan+0xbc>
 8012284:	2004      	movs	r0, #4
 8012286:	b007      	add	sp, #28
 8012288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801228c <__locale_ctype_ptr_l>:
 801228c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8012290:	4770      	bx	lr

08012292 <__localeconv_l>:
 8012292:	30f0      	adds	r0, #240	; 0xf0
 8012294:	4770      	bx	lr
	...

08012298 <_localeconv_r>:
 8012298:	4b04      	ldr	r3, [pc, #16]	; (80122ac <_localeconv_r+0x14>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	6a18      	ldr	r0, [r3, #32]
 801229e:	4b04      	ldr	r3, [pc, #16]	; (80122b0 <_localeconv_r+0x18>)
 80122a0:	2800      	cmp	r0, #0
 80122a2:	bf08      	it	eq
 80122a4:	4618      	moveq	r0, r3
 80122a6:	30f0      	adds	r0, #240	; 0xf0
 80122a8:	4770      	bx	lr
 80122aa:	bf00      	nop
 80122ac:	2000017c 	.word	0x2000017c
 80122b0:	200001e0 	.word	0x200001e0

080122b4 <__ascii_mbtowc>:
 80122b4:	b082      	sub	sp, #8
 80122b6:	b901      	cbnz	r1, 80122ba <__ascii_mbtowc+0x6>
 80122b8:	a901      	add	r1, sp, #4
 80122ba:	b142      	cbz	r2, 80122ce <__ascii_mbtowc+0x1a>
 80122bc:	b14b      	cbz	r3, 80122d2 <__ascii_mbtowc+0x1e>
 80122be:	7813      	ldrb	r3, [r2, #0]
 80122c0:	600b      	str	r3, [r1, #0]
 80122c2:	7812      	ldrb	r2, [r2, #0]
 80122c4:	1c10      	adds	r0, r2, #0
 80122c6:	bf18      	it	ne
 80122c8:	2001      	movne	r0, #1
 80122ca:	b002      	add	sp, #8
 80122cc:	4770      	bx	lr
 80122ce:	4610      	mov	r0, r2
 80122d0:	e7fb      	b.n	80122ca <__ascii_mbtowc+0x16>
 80122d2:	f06f 0001 	mvn.w	r0, #1
 80122d6:	e7f8      	b.n	80122ca <__ascii_mbtowc+0x16>

080122d8 <__malloc_lock>:
 80122d8:	4770      	bx	lr

080122da <__malloc_unlock>:
 80122da:	4770      	bx	lr

080122dc <_Balloc>:
 80122dc:	b570      	push	{r4, r5, r6, lr}
 80122de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80122e0:	4604      	mov	r4, r0
 80122e2:	460e      	mov	r6, r1
 80122e4:	b93d      	cbnz	r5, 80122f6 <_Balloc+0x1a>
 80122e6:	2010      	movs	r0, #16
 80122e8:	f7fd f862 	bl	800f3b0 <malloc>
 80122ec:	6260      	str	r0, [r4, #36]	; 0x24
 80122ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80122f2:	6005      	str	r5, [r0, #0]
 80122f4:	60c5      	str	r5, [r0, #12]
 80122f6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80122f8:	68eb      	ldr	r3, [r5, #12]
 80122fa:	b183      	cbz	r3, 801231e <_Balloc+0x42>
 80122fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122fe:	68db      	ldr	r3, [r3, #12]
 8012300:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012304:	b9b8      	cbnz	r0, 8012336 <_Balloc+0x5a>
 8012306:	2101      	movs	r1, #1
 8012308:	fa01 f506 	lsl.w	r5, r1, r6
 801230c:	1d6a      	adds	r2, r5, #5
 801230e:	0092      	lsls	r2, r2, #2
 8012310:	4620      	mov	r0, r4
 8012312:	f000 fbe2 	bl	8012ada <_calloc_r>
 8012316:	b160      	cbz	r0, 8012332 <_Balloc+0x56>
 8012318:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801231c:	e00e      	b.n	801233c <_Balloc+0x60>
 801231e:	2221      	movs	r2, #33	; 0x21
 8012320:	2104      	movs	r1, #4
 8012322:	4620      	mov	r0, r4
 8012324:	f000 fbd9 	bl	8012ada <_calloc_r>
 8012328:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801232a:	60e8      	str	r0, [r5, #12]
 801232c:	68db      	ldr	r3, [r3, #12]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d1e4      	bne.n	80122fc <_Balloc+0x20>
 8012332:	2000      	movs	r0, #0
 8012334:	bd70      	pop	{r4, r5, r6, pc}
 8012336:	6802      	ldr	r2, [r0, #0]
 8012338:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801233c:	2300      	movs	r3, #0
 801233e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012342:	e7f7      	b.n	8012334 <_Balloc+0x58>

08012344 <_Bfree>:
 8012344:	b570      	push	{r4, r5, r6, lr}
 8012346:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012348:	4606      	mov	r6, r0
 801234a:	460d      	mov	r5, r1
 801234c:	b93c      	cbnz	r4, 801235e <_Bfree+0x1a>
 801234e:	2010      	movs	r0, #16
 8012350:	f7fd f82e 	bl	800f3b0 <malloc>
 8012354:	6270      	str	r0, [r6, #36]	; 0x24
 8012356:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801235a:	6004      	str	r4, [r0, #0]
 801235c:	60c4      	str	r4, [r0, #12]
 801235e:	b13d      	cbz	r5, 8012370 <_Bfree+0x2c>
 8012360:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012362:	686a      	ldr	r2, [r5, #4]
 8012364:	68db      	ldr	r3, [r3, #12]
 8012366:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801236a:	6029      	str	r1, [r5, #0]
 801236c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8012370:	bd70      	pop	{r4, r5, r6, pc}

08012372 <__multadd>:
 8012372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012376:	690d      	ldr	r5, [r1, #16]
 8012378:	461f      	mov	r7, r3
 801237a:	4606      	mov	r6, r0
 801237c:	460c      	mov	r4, r1
 801237e:	f101 0c14 	add.w	ip, r1, #20
 8012382:	2300      	movs	r3, #0
 8012384:	f8dc 0000 	ldr.w	r0, [ip]
 8012388:	b281      	uxth	r1, r0
 801238a:	fb02 7101 	mla	r1, r2, r1, r7
 801238e:	0c0f      	lsrs	r7, r1, #16
 8012390:	0c00      	lsrs	r0, r0, #16
 8012392:	fb02 7000 	mla	r0, r2, r0, r7
 8012396:	b289      	uxth	r1, r1
 8012398:	3301      	adds	r3, #1
 801239a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801239e:	429d      	cmp	r5, r3
 80123a0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80123a4:	f84c 1b04 	str.w	r1, [ip], #4
 80123a8:	dcec      	bgt.n	8012384 <__multadd+0x12>
 80123aa:	b1d7      	cbz	r7, 80123e2 <__multadd+0x70>
 80123ac:	68a3      	ldr	r3, [r4, #8]
 80123ae:	42ab      	cmp	r3, r5
 80123b0:	dc12      	bgt.n	80123d8 <__multadd+0x66>
 80123b2:	6861      	ldr	r1, [r4, #4]
 80123b4:	4630      	mov	r0, r6
 80123b6:	3101      	adds	r1, #1
 80123b8:	f7ff ff90 	bl	80122dc <_Balloc>
 80123bc:	6922      	ldr	r2, [r4, #16]
 80123be:	3202      	adds	r2, #2
 80123c0:	f104 010c 	add.w	r1, r4, #12
 80123c4:	4680      	mov	r8, r0
 80123c6:	0092      	lsls	r2, r2, #2
 80123c8:	300c      	adds	r0, #12
 80123ca:	f7fd f801 	bl	800f3d0 <memcpy>
 80123ce:	4621      	mov	r1, r4
 80123d0:	4630      	mov	r0, r6
 80123d2:	f7ff ffb7 	bl	8012344 <_Bfree>
 80123d6:	4644      	mov	r4, r8
 80123d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80123dc:	3501      	adds	r5, #1
 80123de:	615f      	str	r7, [r3, #20]
 80123e0:	6125      	str	r5, [r4, #16]
 80123e2:	4620      	mov	r0, r4
 80123e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080123e8 <__s2b>:
 80123e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123ec:	460c      	mov	r4, r1
 80123ee:	4615      	mov	r5, r2
 80123f0:	461f      	mov	r7, r3
 80123f2:	2209      	movs	r2, #9
 80123f4:	3308      	adds	r3, #8
 80123f6:	4606      	mov	r6, r0
 80123f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80123fc:	2100      	movs	r1, #0
 80123fe:	2201      	movs	r2, #1
 8012400:	429a      	cmp	r2, r3
 8012402:	db20      	blt.n	8012446 <__s2b+0x5e>
 8012404:	4630      	mov	r0, r6
 8012406:	f7ff ff69 	bl	80122dc <_Balloc>
 801240a:	9b08      	ldr	r3, [sp, #32]
 801240c:	6143      	str	r3, [r0, #20]
 801240e:	2d09      	cmp	r5, #9
 8012410:	f04f 0301 	mov.w	r3, #1
 8012414:	6103      	str	r3, [r0, #16]
 8012416:	dd19      	ble.n	801244c <__s2b+0x64>
 8012418:	f104 0809 	add.w	r8, r4, #9
 801241c:	46c1      	mov	r9, r8
 801241e:	442c      	add	r4, r5
 8012420:	f819 3b01 	ldrb.w	r3, [r9], #1
 8012424:	4601      	mov	r1, r0
 8012426:	3b30      	subs	r3, #48	; 0x30
 8012428:	220a      	movs	r2, #10
 801242a:	4630      	mov	r0, r6
 801242c:	f7ff ffa1 	bl	8012372 <__multadd>
 8012430:	45a1      	cmp	r9, r4
 8012432:	d1f5      	bne.n	8012420 <__s2b+0x38>
 8012434:	eb08 0405 	add.w	r4, r8, r5
 8012438:	3c08      	subs	r4, #8
 801243a:	1b2d      	subs	r5, r5, r4
 801243c:	1963      	adds	r3, r4, r5
 801243e:	42bb      	cmp	r3, r7
 8012440:	db07      	blt.n	8012452 <__s2b+0x6a>
 8012442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012446:	0052      	lsls	r2, r2, #1
 8012448:	3101      	adds	r1, #1
 801244a:	e7d9      	b.n	8012400 <__s2b+0x18>
 801244c:	340a      	adds	r4, #10
 801244e:	2509      	movs	r5, #9
 8012450:	e7f3      	b.n	801243a <__s2b+0x52>
 8012452:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012456:	4601      	mov	r1, r0
 8012458:	3b30      	subs	r3, #48	; 0x30
 801245a:	220a      	movs	r2, #10
 801245c:	4630      	mov	r0, r6
 801245e:	f7ff ff88 	bl	8012372 <__multadd>
 8012462:	e7eb      	b.n	801243c <__s2b+0x54>

08012464 <__hi0bits>:
 8012464:	0c02      	lsrs	r2, r0, #16
 8012466:	0412      	lsls	r2, r2, #16
 8012468:	4603      	mov	r3, r0
 801246a:	b9b2      	cbnz	r2, 801249a <__hi0bits+0x36>
 801246c:	0403      	lsls	r3, r0, #16
 801246e:	2010      	movs	r0, #16
 8012470:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012474:	bf04      	itt	eq
 8012476:	021b      	lsleq	r3, r3, #8
 8012478:	3008      	addeq	r0, #8
 801247a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801247e:	bf04      	itt	eq
 8012480:	011b      	lsleq	r3, r3, #4
 8012482:	3004      	addeq	r0, #4
 8012484:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012488:	bf04      	itt	eq
 801248a:	009b      	lsleq	r3, r3, #2
 801248c:	3002      	addeq	r0, #2
 801248e:	2b00      	cmp	r3, #0
 8012490:	db06      	blt.n	80124a0 <__hi0bits+0x3c>
 8012492:	005b      	lsls	r3, r3, #1
 8012494:	d503      	bpl.n	801249e <__hi0bits+0x3a>
 8012496:	3001      	adds	r0, #1
 8012498:	4770      	bx	lr
 801249a:	2000      	movs	r0, #0
 801249c:	e7e8      	b.n	8012470 <__hi0bits+0xc>
 801249e:	2020      	movs	r0, #32
 80124a0:	4770      	bx	lr

080124a2 <__lo0bits>:
 80124a2:	6803      	ldr	r3, [r0, #0]
 80124a4:	f013 0207 	ands.w	r2, r3, #7
 80124a8:	4601      	mov	r1, r0
 80124aa:	d00b      	beq.n	80124c4 <__lo0bits+0x22>
 80124ac:	07da      	lsls	r2, r3, #31
 80124ae:	d423      	bmi.n	80124f8 <__lo0bits+0x56>
 80124b0:	0798      	lsls	r0, r3, #30
 80124b2:	bf49      	itett	mi
 80124b4:	085b      	lsrmi	r3, r3, #1
 80124b6:	089b      	lsrpl	r3, r3, #2
 80124b8:	2001      	movmi	r0, #1
 80124ba:	600b      	strmi	r3, [r1, #0]
 80124bc:	bf5c      	itt	pl
 80124be:	600b      	strpl	r3, [r1, #0]
 80124c0:	2002      	movpl	r0, #2
 80124c2:	4770      	bx	lr
 80124c4:	b298      	uxth	r0, r3
 80124c6:	b9a8      	cbnz	r0, 80124f4 <__lo0bits+0x52>
 80124c8:	0c1b      	lsrs	r3, r3, #16
 80124ca:	2010      	movs	r0, #16
 80124cc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80124d0:	bf04      	itt	eq
 80124d2:	0a1b      	lsreq	r3, r3, #8
 80124d4:	3008      	addeq	r0, #8
 80124d6:	071a      	lsls	r2, r3, #28
 80124d8:	bf04      	itt	eq
 80124da:	091b      	lsreq	r3, r3, #4
 80124dc:	3004      	addeq	r0, #4
 80124de:	079a      	lsls	r2, r3, #30
 80124e0:	bf04      	itt	eq
 80124e2:	089b      	lsreq	r3, r3, #2
 80124e4:	3002      	addeq	r0, #2
 80124e6:	07da      	lsls	r2, r3, #31
 80124e8:	d402      	bmi.n	80124f0 <__lo0bits+0x4e>
 80124ea:	085b      	lsrs	r3, r3, #1
 80124ec:	d006      	beq.n	80124fc <__lo0bits+0x5a>
 80124ee:	3001      	adds	r0, #1
 80124f0:	600b      	str	r3, [r1, #0]
 80124f2:	4770      	bx	lr
 80124f4:	4610      	mov	r0, r2
 80124f6:	e7e9      	b.n	80124cc <__lo0bits+0x2a>
 80124f8:	2000      	movs	r0, #0
 80124fa:	4770      	bx	lr
 80124fc:	2020      	movs	r0, #32
 80124fe:	4770      	bx	lr

08012500 <__i2b>:
 8012500:	b510      	push	{r4, lr}
 8012502:	460c      	mov	r4, r1
 8012504:	2101      	movs	r1, #1
 8012506:	f7ff fee9 	bl	80122dc <_Balloc>
 801250a:	2201      	movs	r2, #1
 801250c:	6144      	str	r4, [r0, #20]
 801250e:	6102      	str	r2, [r0, #16]
 8012510:	bd10      	pop	{r4, pc}

08012512 <__multiply>:
 8012512:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012516:	4614      	mov	r4, r2
 8012518:	690a      	ldr	r2, [r1, #16]
 801251a:	6923      	ldr	r3, [r4, #16]
 801251c:	429a      	cmp	r2, r3
 801251e:	bfb8      	it	lt
 8012520:	460b      	movlt	r3, r1
 8012522:	4688      	mov	r8, r1
 8012524:	bfbc      	itt	lt
 8012526:	46a0      	movlt	r8, r4
 8012528:	461c      	movlt	r4, r3
 801252a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801252e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012532:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012536:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801253a:	eb07 0609 	add.w	r6, r7, r9
 801253e:	42b3      	cmp	r3, r6
 8012540:	bfb8      	it	lt
 8012542:	3101      	addlt	r1, #1
 8012544:	f7ff feca 	bl	80122dc <_Balloc>
 8012548:	f100 0514 	add.w	r5, r0, #20
 801254c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8012550:	462b      	mov	r3, r5
 8012552:	2200      	movs	r2, #0
 8012554:	4573      	cmp	r3, lr
 8012556:	d316      	bcc.n	8012586 <__multiply+0x74>
 8012558:	f104 0214 	add.w	r2, r4, #20
 801255c:	f108 0114 	add.w	r1, r8, #20
 8012560:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8012564:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8012568:	9300      	str	r3, [sp, #0]
 801256a:	9b00      	ldr	r3, [sp, #0]
 801256c:	9201      	str	r2, [sp, #4]
 801256e:	4293      	cmp	r3, r2
 8012570:	d80c      	bhi.n	801258c <__multiply+0x7a>
 8012572:	2e00      	cmp	r6, #0
 8012574:	dd03      	ble.n	801257e <__multiply+0x6c>
 8012576:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801257a:	2b00      	cmp	r3, #0
 801257c:	d05d      	beq.n	801263a <__multiply+0x128>
 801257e:	6106      	str	r6, [r0, #16]
 8012580:	b003      	add	sp, #12
 8012582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012586:	f843 2b04 	str.w	r2, [r3], #4
 801258a:	e7e3      	b.n	8012554 <__multiply+0x42>
 801258c:	f8b2 b000 	ldrh.w	fp, [r2]
 8012590:	f1bb 0f00 	cmp.w	fp, #0
 8012594:	d023      	beq.n	80125de <__multiply+0xcc>
 8012596:	4689      	mov	r9, r1
 8012598:	46ac      	mov	ip, r5
 801259a:	f04f 0800 	mov.w	r8, #0
 801259e:	f859 4b04 	ldr.w	r4, [r9], #4
 80125a2:	f8dc a000 	ldr.w	sl, [ip]
 80125a6:	b2a3      	uxth	r3, r4
 80125a8:	fa1f fa8a 	uxth.w	sl, sl
 80125ac:	fb0b a303 	mla	r3, fp, r3, sl
 80125b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80125b4:	f8dc 4000 	ldr.w	r4, [ip]
 80125b8:	4443      	add	r3, r8
 80125ba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80125be:	fb0b 840a 	mla	r4, fp, sl, r8
 80125c2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80125c6:	46e2      	mov	sl, ip
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80125ce:	454f      	cmp	r7, r9
 80125d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80125d4:	f84a 3b04 	str.w	r3, [sl], #4
 80125d8:	d82b      	bhi.n	8012632 <__multiply+0x120>
 80125da:	f8cc 8004 	str.w	r8, [ip, #4]
 80125de:	9b01      	ldr	r3, [sp, #4]
 80125e0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80125e4:	3204      	adds	r2, #4
 80125e6:	f1ba 0f00 	cmp.w	sl, #0
 80125ea:	d020      	beq.n	801262e <__multiply+0x11c>
 80125ec:	682b      	ldr	r3, [r5, #0]
 80125ee:	4689      	mov	r9, r1
 80125f0:	46a8      	mov	r8, r5
 80125f2:	f04f 0b00 	mov.w	fp, #0
 80125f6:	f8b9 c000 	ldrh.w	ip, [r9]
 80125fa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80125fe:	fb0a 440c 	mla	r4, sl, ip, r4
 8012602:	445c      	add	r4, fp
 8012604:	46c4      	mov	ip, r8
 8012606:	b29b      	uxth	r3, r3
 8012608:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801260c:	f84c 3b04 	str.w	r3, [ip], #4
 8012610:	f859 3b04 	ldr.w	r3, [r9], #4
 8012614:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8012618:	0c1b      	lsrs	r3, r3, #16
 801261a:	fb0a b303 	mla	r3, sl, r3, fp
 801261e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8012622:	454f      	cmp	r7, r9
 8012624:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8012628:	d805      	bhi.n	8012636 <__multiply+0x124>
 801262a:	f8c8 3004 	str.w	r3, [r8, #4]
 801262e:	3504      	adds	r5, #4
 8012630:	e79b      	b.n	801256a <__multiply+0x58>
 8012632:	46d4      	mov	ip, sl
 8012634:	e7b3      	b.n	801259e <__multiply+0x8c>
 8012636:	46e0      	mov	r8, ip
 8012638:	e7dd      	b.n	80125f6 <__multiply+0xe4>
 801263a:	3e01      	subs	r6, #1
 801263c:	e799      	b.n	8012572 <__multiply+0x60>
	...

08012640 <__pow5mult>:
 8012640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012644:	4615      	mov	r5, r2
 8012646:	f012 0203 	ands.w	r2, r2, #3
 801264a:	4606      	mov	r6, r0
 801264c:	460f      	mov	r7, r1
 801264e:	d007      	beq.n	8012660 <__pow5mult+0x20>
 8012650:	3a01      	subs	r2, #1
 8012652:	4c21      	ldr	r4, [pc, #132]	; (80126d8 <__pow5mult+0x98>)
 8012654:	2300      	movs	r3, #0
 8012656:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801265a:	f7ff fe8a 	bl	8012372 <__multadd>
 801265e:	4607      	mov	r7, r0
 8012660:	10ad      	asrs	r5, r5, #2
 8012662:	d035      	beq.n	80126d0 <__pow5mult+0x90>
 8012664:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012666:	b93c      	cbnz	r4, 8012678 <__pow5mult+0x38>
 8012668:	2010      	movs	r0, #16
 801266a:	f7fc fea1 	bl	800f3b0 <malloc>
 801266e:	6270      	str	r0, [r6, #36]	; 0x24
 8012670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012674:	6004      	str	r4, [r0, #0]
 8012676:	60c4      	str	r4, [r0, #12]
 8012678:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801267c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012680:	b94c      	cbnz	r4, 8012696 <__pow5mult+0x56>
 8012682:	f240 2171 	movw	r1, #625	; 0x271
 8012686:	4630      	mov	r0, r6
 8012688:	f7ff ff3a 	bl	8012500 <__i2b>
 801268c:	2300      	movs	r3, #0
 801268e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012692:	4604      	mov	r4, r0
 8012694:	6003      	str	r3, [r0, #0]
 8012696:	f04f 0800 	mov.w	r8, #0
 801269a:	07eb      	lsls	r3, r5, #31
 801269c:	d50a      	bpl.n	80126b4 <__pow5mult+0x74>
 801269e:	4639      	mov	r1, r7
 80126a0:	4622      	mov	r2, r4
 80126a2:	4630      	mov	r0, r6
 80126a4:	f7ff ff35 	bl	8012512 <__multiply>
 80126a8:	4639      	mov	r1, r7
 80126aa:	4681      	mov	r9, r0
 80126ac:	4630      	mov	r0, r6
 80126ae:	f7ff fe49 	bl	8012344 <_Bfree>
 80126b2:	464f      	mov	r7, r9
 80126b4:	106d      	asrs	r5, r5, #1
 80126b6:	d00b      	beq.n	80126d0 <__pow5mult+0x90>
 80126b8:	6820      	ldr	r0, [r4, #0]
 80126ba:	b938      	cbnz	r0, 80126cc <__pow5mult+0x8c>
 80126bc:	4622      	mov	r2, r4
 80126be:	4621      	mov	r1, r4
 80126c0:	4630      	mov	r0, r6
 80126c2:	f7ff ff26 	bl	8012512 <__multiply>
 80126c6:	6020      	str	r0, [r4, #0]
 80126c8:	f8c0 8000 	str.w	r8, [r0]
 80126cc:	4604      	mov	r4, r0
 80126ce:	e7e4      	b.n	801269a <__pow5mult+0x5a>
 80126d0:	4638      	mov	r0, r7
 80126d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126d6:	bf00      	nop
 80126d8:	08013308 	.word	0x08013308

080126dc <__lshift>:
 80126dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126e0:	460c      	mov	r4, r1
 80126e2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80126e6:	6923      	ldr	r3, [r4, #16]
 80126e8:	6849      	ldr	r1, [r1, #4]
 80126ea:	eb0a 0903 	add.w	r9, sl, r3
 80126ee:	68a3      	ldr	r3, [r4, #8]
 80126f0:	4607      	mov	r7, r0
 80126f2:	4616      	mov	r6, r2
 80126f4:	f109 0501 	add.w	r5, r9, #1
 80126f8:	42ab      	cmp	r3, r5
 80126fa:	db32      	blt.n	8012762 <__lshift+0x86>
 80126fc:	4638      	mov	r0, r7
 80126fe:	f7ff fded 	bl	80122dc <_Balloc>
 8012702:	2300      	movs	r3, #0
 8012704:	4680      	mov	r8, r0
 8012706:	f100 0114 	add.w	r1, r0, #20
 801270a:	461a      	mov	r2, r3
 801270c:	4553      	cmp	r3, sl
 801270e:	db2b      	blt.n	8012768 <__lshift+0x8c>
 8012710:	6920      	ldr	r0, [r4, #16]
 8012712:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012716:	f104 0314 	add.w	r3, r4, #20
 801271a:	f016 021f 	ands.w	r2, r6, #31
 801271e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012722:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012726:	d025      	beq.n	8012774 <__lshift+0x98>
 8012728:	f1c2 0e20 	rsb	lr, r2, #32
 801272c:	2000      	movs	r0, #0
 801272e:	681e      	ldr	r6, [r3, #0]
 8012730:	468a      	mov	sl, r1
 8012732:	4096      	lsls	r6, r2
 8012734:	4330      	orrs	r0, r6
 8012736:	f84a 0b04 	str.w	r0, [sl], #4
 801273a:	f853 0b04 	ldr.w	r0, [r3], #4
 801273e:	459c      	cmp	ip, r3
 8012740:	fa20 f00e 	lsr.w	r0, r0, lr
 8012744:	d814      	bhi.n	8012770 <__lshift+0x94>
 8012746:	6048      	str	r0, [r1, #4]
 8012748:	b108      	cbz	r0, 801274e <__lshift+0x72>
 801274a:	f109 0502 	add.w	r5, r9, #2
 801274e:	3d01      	subs	r5, #1
 8012750:	4638      	mov	r0, r7
 8012752:	f8c8 5010 	str.w	r5, [r8, #16]
 8012756:	4621      	mov	r1, r4
 8012758:	f7ff fdf4 	bl	8012344 <_Bfree>
 801275c:	4640      	mov	r0, r8
 801275e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012762:	3101      	adds	r1, #1
 8012764:	005b      	lsls	r3, r3, #1
 8012766:	e7c7      	b.n	80126f8 <__lshift+0x1c>
 8012768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801276c:	3301      	adds	r3, #1
 801276e:	e7cd      	b.n	801270c <__lshift+0x30>
 8012770:	4651      	mov	r1, sl
 8012772:	e7dc      	b.n	801272e <__lshift+0x52>
 8012774:	3904      	subs	r1, #4
 8012776:	f853 2b04 	ldr.w	r2, [r3], #4
 801277a:	f841 2f04 	str.w	r2, [r1, #4]!
 801277e:	459c      	cmp	ip, r3
 8012780:	d8f9      	bhi.n	8012776 <__lshift+0x9a>
 8012782:	e7e4      	b.n	801274e <__lshift+0x72>

08012784 <__mcmp>:
 8012784:	6903      	ldr	r3, [r0, #16]
 8012786:	690a      	ldr	r2, [r1, #16]
 8012788:	1a9b      	subs	r3, r3, r2
 801278a:	b530      	push	{r4, r5, lr}
 801278c:	d10c      	bne.n	80127a8 <__mcmp+0x24>
 801278e:	0092      	lsls	r2, r2, #2
 8012790:	3014      	adds	r0, #20
 8012792:	3114      	adds	r1, #20
 8012794:	1884      	adds	r4, r0, r2
 8012796:	4411      	add	r1, r2
 8012798:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801279c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80127a0:	4295      	cmp	r5, r2
 80127a2:	d003      	beq.n	80127ac <__mcmp+0x28>
 80127a4:	d305      	bcc.n	80127b2 <__mcmp+0x2e>
 80127a6:	2301      	movs	r3, #1
 80127a8:	4618      	mov	r0, r3
 80127aa:	bd30      	pop	{r4, r5, pc}
 80127ac:	42a0      	cmp	r0, r4
 80127ae:	d3f3      	bcc.n	8012798 <__mcmp+0x14>
 80127b0:	e7fa      	b.n	80127a8 <__mcmp+0x24>
 80127b2:	f04f 33ff 	mov.w	r3, #4294967295
 80127b6:	e7f7      	b.n	80127a8 <__mcmp+0x24>

080127b8 <__mdiff>:
 80127b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127bc:	460d      	mov	r5, r1
 80127be:	4607      	mov	r7, r0
 80127c0:	4611      	mov	r1, r2
 80127c2:	4628      	mov	r0, r5
 80127c4:	4614      	mov	r4, r2
 80127c6:	f7ff ffdd 	bl	8012784 <__mcmp>
 80127ca:	1e06      	subs	r6, r0, #0
 80127cc:	d108      	bne.n	80127e0 <__mdiff+0x28>
 80127ce:	4631      	mov	r1, r6
 80127d0:	4638      	mov	r0, r7
 80127d2:	f7ff fd83 	bl	80122dc <_Balloc>
 80127d6:	2301      	movs	r3, #1
 80127d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80127dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127e0:	bfa4      	itt	ge
 80127e2:	4623      	movge	r3, r4
 80127e4:	462c      	movge	r4, r5
 80127e6:	4638      	mov	r0, r7
 80127e8:	6861      	ldr	r1, [r4, #4]
 80127ea:	bfa6      	itte	ge
 80127ec:	461d      	movge	r5, r3
 80127ee:	2600      	movge	r6, #0
 80127f0:	2601      	movlt	r6, #1
 80127f2:	f7ff fd73 	bl	80122dc <_Balloc>
 80127f6:	692b      	ldr	r3, [r5, #16]
 80127f8:	60c6      	str	r6, [r0, #12]
 80127fa:	6926      	ldr	r6, [r4, #16]
 80127fc:	f105 0914 	add.w	r9, r5, #20
 8012800:	f104 0214 	add.w	r2, r4, #20
 8012804:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8012808:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801280c:	f100 0514 	add.w	r5, r0, #20
 8012810:	f04f 0e00 	mov.w	lr, #0
 8012814:	f852 ab04 	ldr.w	sl, [r2], #4
 8012818:	f859 4b04 	ldr.w	r4, [r9], #4
 801281c:	fa1e f18a 	uxtah	r1, lr, sl
 8012820:	b2a3      	uxth	r3, r4
 8012822:	1ac9      	subs	r1, r1, r3
 8012824:	0c23      	lsrs	r3, r4, #16
 8012826:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801282a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801282e:	b289      	uxth	r1, r1
 8012830:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8012834:	45c8      	cmp	r8, r9
 8012836:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801283a:	4694      	mov	ip, r2
 801283c:	f845 3b04 	str.w	r3, [r5], #4
 8012840:	d8e8      	bhi.n	8012814 <__mdiff+0x5c>
 8012842:	45bc      	cmp	ip, r7
 8012844:	d304      	bcc.n	8012850 <__mdiff+0x98>
 8012846:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801284a:	b183      	cbz	r3, 801286e <__mdiff+0xb6>
 801284c:	6106      	str	r6, [r0, #16]
 801284e:	e7c5      	b.n	80127dc <__mdiff+0x24>
 8012850:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012854:	fa1e f381 	uxtah	r3, lr, r1
 8012858:	141a      	asrs	r2, r3, #16
 801285a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801285e:	b29b      	uxth	r3, r3
 8012860:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012864:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012868:	f845 3b04 	str.w	r3, [r5], #4
 801286c:	e7e9      	b.n	8012842 <__mdiff+0x8a>
 801286e:	3e01      	subs	r6, #1
 8012870:	e7e9      	b.n	8012846 <__mdiff+0x8e>
	...

08012874 <__ulp>:
 8012874:	4b12      	ldr	r3, [pc, #72]	; (80128c0 <__ulp+0x4c>)
 8012876:	ee10 2a90 	vmov	r2, s1
 801287a:	401a      	ands	r2, r3
 801287c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8012880:	2b00      	cmp	r3, #0
 8012882:	dd04      	ble.n	801288e <__ulp+0x1a>
 8012884:	2000      	movs	r0, #0
 8012886:	4619      	mov	r1, r3
 8012888:	ec41 0b10 	vmov	d0, r0, r1
 801288c:	4770      	bx	lr
 801288e:	425b      	negs	r3, r3
 8012890:	151b      	asrs	r3, r3, #20
 8012892:	2b13      	cmp	r3, #19
 8012894:	f04f 0000 	mov.w	r0, #0
 8012898:	f04f 0100 	mov.w	r1, #0
 801289c:	dc04      	bgt.n	80128a8 <__ulp+0x34>
 801289e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80128a2:	fa42 f103 	asr.w	r1, r2, r3
 80128a6:	e7ef      	b.n	8012888 <__ulp+0x14>
 80128a8:	3b14      	subs	r3, #20
 80128aa:	2b1e      	cmp	r3, #30
 80128ac:	f04f 0201 	mov.w	r2, #1
 80128b0:	bfda      	itte	le
 80128b2:	f1c3 031f 	rsble	r3, r3, #31
 80128b6:	fa02 f303 	lslle.w	r3, r2, r3
 80128ba:	4613      	movgt	r3, r2
 80128bc:	4618      	mov	r0, r3
 80128be:	e7e3      	b.n	8012888 <__ulp+0x14>
 80128c0:	7ff00000 	.word	0x7ff00000

080128c4 <__b2d>:
 80128c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128c6:	6905      	ldr	r5, [r0, #16]
 80128c8:	f100 0714 	add.w	r7, r0, #20
 80128cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80128d0:	1f2e      	subs	r6, r5, #4
 80128d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80128d6:	4620      	mov	r0, r4
 80128d8:	f7ff fdc4 	bl	8012464 <__hi0bits>
 80128dc:	f1c0 0320 	rsb	r3, r0, #32
 80128e0:	280a      	cmp	r0, #10
 80128e2:	600b      	str	r3, [r1, #0]
 80128e4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801295c <__b2d+0x98>
 80128e8:	dc14      	bgt.n	8012914 <__b2d+0x50>
 80128ea:	f1c0 0e0b 	rsb	lr, r0, #11
 80128ee:	fa24 f10e 	lsr.w	r1, r4, lr
 80128f2:	42b7      	cmp	r7, r6
 80128f4:	ea41 030c 	orr.w	r3, r1, ip
 80128f8:	bf34      	ite	cc
 80128fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80128fe:	2100      	movcs	r1, #0
 8012900:	3015      	adds	r0, #21
 8012902:	fa04 f000 	lsl.w	r0, r4, r0
 8012906:	fa21 f10e 	lsr.w	r1, r1, lr
 801290a:	ea40 0201 	orr.w	r2, r0, r1
 801290e:	ec43 2b10 	vmov	d0, r2, r3
 8012912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012914:	42b7      	cmp	r7, r6
 8012916:	bf3a      	itte	cc
 8012918:	f1a5 0608 	subcc.w	r6, r5, #8
 801291c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012920:	2100      	movcs	r1, #0
 8012922:	380b      	subs	r0, #11
 8012924:	d015      	beq.n	8012952 <__b2d+0x8e>
 8012926:	4084      	lsls	r4, r0
 8012928:	f1c0 0520 	rsb	r5, r0, #32
 801292c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8012930:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8012934:	42be      	cmp	r6, r7
 8012936:	fa21 fc05 	lsr.w	ip, r1, r5
 801293a:	ea44 030c 	orr.w	r3, r4, ip
 801293e:	bf8c      	ite	hi
 8012940:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012944:	2400      	movls	r4, #0
 8012946:	fa01 f000 	lsl.w	r0, r1, r0
 801294a:	40ec      	lsrs	r4, r5
 801294c:	ea40 0204 	orr.w	r2, r0, r4
 8012950:	e7dd      	b.n	801290e <__b2d+0x4a>
 8012952:	ea44 030c 	orr.w	r3, r4, ip
 8012956:	460a      	mov	r2, r1
 8012958:	e7d9      	b.n	801290e <__b2d+0x4a>
 801295a:	bf00      	nop
 801295c:	3ff00000 	.word	0x3ff00000

08012960 <__d2b>:
 8012960:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012964:	460e      	mov	r6, r1
 8012966:	2101      	movs	r1, #1
 8012968:	ec59 8b10 	vmov	r8, r9, d0
 801296c:	4615      	mov	r5, r2
 801296e:	f7ff fcb5 	bl	80122dc <_Balloc>
 8012972:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012976:	4607      	mov	r7, r0
 8012978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801297c:	bb34      	cbnz	r4, 80129cc <__d2b+0x6c>
 801297e:	9301      	str	r3, [sp, #4]
 8012980:	f1b8 0300 	subs.w	r3, r8, #0
 8012984:	d027      	beq.n	80129d6 <__d2b+0x76>
 8012986:	a802      	add	r0, sp, #8
 8012988:	f840 3d08 	str.w	r3, [r0, #-8]!
 801298c:	f7ff fd89 	bl	80124a2 <__lo0bits>
 8012990:	9900      	ldr	r1, [sp, #0]
 8012992:	b1f0      	cbz	r0, 80129d2 <__d2b+0x72>
 8012994:	9a01      	ldr	r2, [sp, #4]
 8012996:	f1c0 0320 	rsb	r3, r0, #32
 801299a:	fa02 f303 	lsl.w	r3, r2, r3
 801299e:	430b      	orrs	r3, r1
 80129a0:	40c2      	lsrs	r2, r0
 80129a2:	617b      	str	r3, [r7, #20]
 80129a4:	9201      	str	r2, [sp, #4]
 80129a6:	9b01      	ldr	r3, [sp, #4]
 80129a8:	61bb      	str	r3, [r7, #24]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	bf14      	ite	ne
 80129ae:	2102      	movne	r1, #2
 80129b0:	2101      	moveq	r1, #1
 80129b2:	6139      	str	r1, [r7, #16]
 80129b4:	b1c4      	cbz	r4, 80129e8 <__d2b+0x88>
 80129b6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80129ba:	4404      	add	r4, r0
 80129bc:	6034      	str	r4, [r6, #0]
 80129be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80129c2:	6028      	str	r0, [r5, #0]
 80129c4:	4638      	mov	r0, r7
 80129c6:	b003      	add	sp, #12
 80129c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80129d0:	e7d5      	b.n	801297e <__d2b+0x1e>
 80129d2:	6179      	str	r1, [r7, #20]
 80129d4:	e7e7      	b.n	80129a6 <__d2b+0x46>
 80129d6:	a801      	add	r0, sp, #4
 80129d8:	f7ff fd63 	bl	80124a2 <__lo0bits>
 80129dc:	9b01      	ldr	r3, [sp, #4]
 80129de:	617b      	str	r3, [r7, #20]
 80129e0:	2101      	movs	r1, #1
 80129e2:	6139      	str	r1, [r7, #16]
 80129e4:	3020      	adds	r0, #32
 80129e6:	e7e5      	b.n	80129b4 <__d2b+0x54>
 80129e8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80129ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80129f0:	6030      	str	r0, [r6, #0]
 80129f2:	6918      	ldr	r0, [r3, #16]
 80129f4:	f7ff fd36 	bl	8012464 <__hi0bits>
 80129f8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80129fc:	e7e1      	b.n	80129c2 <__d2b+0x62>

080129fe <__ratio>:
 80129fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a02:	4688      	mov	r8, r1
 8012a04:	4669      	mov	r1, sp
 8012a06:	4681      	mov	r9, r0
 8012a08:	f7ff ff5c 	bl	80128c4 <__b2d>
 8012a0c:	a901      	add	r1, sp, #4
 8012a0e:	4640      	mov	r0, r8
 8012a10:	ec57 6b10 	vmov	r6, r7, d0
 8012a14:	f7ff ff56 	bl	80128c4 <__b2d>
 8012a18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012a1c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012a20:	eba3 0c02 	sub.w	ip, r3, r2
 8012a24:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012a28:	1a9b      	subs	r3, r3, r2
 8012a2a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012a2e:	ec5b ab10 	vmov	sl, fp, d0
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	bfce      	itee	gt
 8012a36:	463a      	movgt	r2, r7
 8012a38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012a3c:	465a      	movle	r2, fp
 8012a3e:	4659      	mov	r1, fp
 8012a40:	463d      	mov	r5, r7
 8012a42:	bfd4      	ite	le
 8012a44:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8012a48:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8012a4c:	4630      	mov	r0, r6
 8012a4e:	ee10 2a10 	vmov	r2, s0
 8012a52:	460b      	mov	r3, r1
 8012a54:	4629      	mov	r1, r5
 8012a56:	f7ed fef9 	bl	800084c <__aeabi_ddiv>
 8012a5a:	ec41 0b10 	vmov	d0, r0, r1
 8012a5e:	b003      	add	sp, #12
 8012a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012a64 <__copybits>:
 8012a64:	3901      	subs	r1, #1
 8012a66:	b510      	push	{r4, lr}
 8012a68:	1149      	asrs	r1, r1, #5
 8012a6a:	6914      	ldr	r4, [r2, #16]
 8012a6c:	3101      	adds	r1, #1
 8012a6e:	f102 0314 	add.w	r3, r2, #20
 8012a72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012a76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012a7a:	42a3      	cmp	r3, r4
 8012a7c:	4602      	mov	r2, r0
 8012a7e:	d303      	bcc.n	8012a88 <__copybits+0x24>
 8012a80:	2300      	movs	r3, #0
 8012a82:	428a      	cmp	r2, r1
 8012a84:	d305      	bcc.n	8012a92 <__copybits+0x2e>
 8012a86:	bd10      	pop	{r4, pc}
 8012a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a8c:	f840 2b04 	str.w	r2, [r0], #4
 8012a90:	e7f3      	b.n	8012a7a <__copybits+0x16>
 8012a92:	f842 3b04 	str.w	r3, [r2], #4
 8012a96:	e7f4      	b.n	8012a82 <__copybits+0x1e>

08012a98 <__any_on>:
 8012a98:	f100 0214 	add.w	r2, r0, #20
 8012a9c:	6900      	ldr	r0, [r0, #16]
 8012a9e:	114b      	asrs	r3, r1, #5
 8012aa0:	4298      	cmp	r0, r3
 8012aa2:	b510      	push	{r4, lr}
 8012aa4:	db11      	blt.n	8012aca <__any_on+0x32>
 8012aa6:	dd0a      	ble.n	8012abe <__any_on+0x26>
 8012aa8:	f011 011f 	ands.w	r1, r1, #31
 8012aac:	d007      	beq.n	8012abe <__any_on+0x26>
 8012aae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012ab2:	fa24 f001 	lsr.w	r0, r4, r1
 8012ab6:	fa00 f101 	lsl.w	r1, r0, r1
 8012aba:	428c      	cmp	r4, r1
 8012abc:	d10b      	bne.n	8012ad6 <__any_on+0x3e>
 8012abe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012ac2:	4293      	cmp	r3, r2
 8012ac4:	d803      	bhi.n	8012ace <__any_on+0x36>
 8012ac6:	2000      	movs	r0, #0
 8012ac8:	bd10      	pop	{r4, pc}
 8012aca:	4603      	mov	r3, r0
 8012acc:	e7f7      	b.n	8012abe <__any_on+0x26>
 8012ace:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012ad2:	2900      	cmp	r1, #0
 8012ad4:	d0f5      	beq.n	8012ac2 <__any_on+0x2a>
 8012ad6:	2001      	movs	r0, #1
 8012ad8:	e7f6      	b.n	8012ac8 <__any_on+0x30>

08012ada <_calloc_r>:
 8012ada:	b538      	push	{r3, r4, r5, lr}
 8012adc:	fb02 f401 	mul.w	r4, r2, r1
 8012ae0:	4621      	mov	r1, r4
 8012ae2:	f7fc fcd7 	bl	800f494 <_malloc_r>
 8012ae6:	4605      	mov	r5, r0
 8012ae8:	b118      	cbz	r0, 8012af2 <_calloc_r+0x18>
 8012aea:	4622      	mov	r2, r4
 8012aec:	2100      	movs	r1, #0
 8012aee:	f7fc fc7a 	bl	800f3e6 <memset>
 8012af2:	4628      	mov	r0, r5
 8012af4:	bd38      	pop	{r3, r4, r5, pc}

08012af6 <__ssputs_r>:
 8012af6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012afa:	688e      	ldr	r6, [r1, #8]
 8012afc:	429e      	cmp	r6, r3
 8012afe:	4682      	mov	sl, r0
 8012b00:	460c      	mov	r4, r1
 8012b02:	4690      	mov	r8, r2
 8012b04:	4699      	mov	r9, r3
 8012b06:	d837      	bhi.n	8012b78 <__ssputs_r+0x82>
 8012b08:	898a      	ldrh	r2, [r1, #12]
 8012b0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012b0e:	d031      	beq.n	8012b74 <__ssputs_r+0x7e>
 8012b10:	6825      	ldr	r5, [r4, #0]
 8012b12:	6909      	ldr	r1, [r1, #16]
 8012b14:	1a6f      	subs	r7, r5, r1
 8012b16:	6965      	ldr	r5, [r4, #20]
 8012b18:	2302      	movs	r3, #2
 8012b1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b1e:	fb95 f5f3 	sdiv	r5, r5, r3
 8012b22:	f109 0301 	add.w	r3, r9, #1
 8012b26:	443b      	add	r3, r7
 8012b28:	429d      	cmp	r5, r3
 8012b2a:	bf38      	it	cc
 8012b2c:	461d      	movcc	r5, r3
 8012b2e:	0553      	lsls	r3, r2, #21
 8012b30:	d530      	bpl.n	8012b94 <__ssputs_r+0x9e>
 8012b32:	4629      	mov	r1, r5
 8012b34:	f7fc fcae 	bl	800f494 <_malloc_r>
 8012b38:	4606      	mov	r6, r0
 8012b3a:	b950      	cbnz	r0, 8012b52 <__ssputs_r+0x5c>
 8012b3c:	230c      	movs	r3, #12
 8012b3e:	f8ca 3000 	str.w	r3, [sl]
 8012b42:	89a3      	ldrh	r3, [r4, #12]
 8012b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b48:	81a3      	strh	r3, [r4, #12]
 8012b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8012b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b52:	463a      	mov	r2, r7
 8012b54:	6921      	ldr	r1, [r4, #16]
 8012b56:	f7fc fc3b 	bl	800f3d0 <memcpy>
 8012b5a:	89a3      	ldrh	r3, [r4, #12]
 8012b5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b64:	81a3      	strh	r3, [r4, #12]
 8012b66:	6126      	str	r6, [r4, #16]
 8012b68:	6165      	str	r5, [r4, #20]
 8012b6a:	443e      	add	r6, r7
 8012b6c:	1bed      	subs	r5, r5, r7
 8012b6e:	6026      	str	r6, [r4, #0]
 8012b70:	60a5      	str	r5, [r4, #8]
 8012b72:	464e      	mov	r6, r9
 8012b74:	454e      	cmp	r6, r9
 8012b76:	d900      	bls.n	8012b7a <__ssputs_r+0x84>
 8012b78:	464e      	mov	r6, r9
 8012b7a:	4632      	mov	r2, r6
 8012b7c:	4641      	mov	r1, r8
 8012b7e:	6820      	ldr	r0, [r4, #0]
 8012b80:	f000 f919 	bl	8012db6 <memmove>
 8012b84:	68a3      	ldr	r3, [r4, #8]
 8012b86:	1b9b      	subs	r3, r3, r6
 8012b88:	60a3      	str	r3, [r4, #8]
 8012b8a:	6823      	ldr	r3, [r4, #0]
 8012b8c:	441e      	add	r6, r3
 8012b8e:	6026      	str	r6, [r4, #0]
 8012b90:	2000      	movs	r0, #0
 8012b92:	e7dc      	b.n	8012b4e <__ssputs_r+0x58>
 8012b94:	462a      	mov	r2, r5
 8012b96:	f000 f927 	bl	8012de8 <_realloc_r>
 8012b9a:	4606      	mov	r6, r0
 8012b9c:	2800      	cmp	r0, #0
 8012b9e:	d1e2      	bne.n	8012b66 <__ssputs_r+0x70>
 8012ba0:	6921      	ldr	r1, [r4, #16]
 8012ba2:	4650      	mov	r0, sl
 8012ba4:	f7fc fc28 	bl	800f3f8 <_free_r>
 8012ba8:	e7c8      	b.n	8012b3c <__ssputs_r+0x46>
	...

08012bac <_svfiprintf_r>:
 8012bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bb0:	461d      	mov	r5, r3
 8012bb2:	898b      	ldrh	r3, [r1, #12]
 8012bb4:	061f      	lsls	r7, r3, #24
 8012bb6:	b09d      	sub	sp, #116	; 0x74
 8012bb8:	4680      	mov	r8, r0
 8012bba:	460c      	mov	r4, r1
 8012bbc:	4616      	mov	r6, r2
 8012bbe:	d50f      	bpl.n	8012be0 <_svfiprintf_r+0x34>
 8012bc0:	690b      	ldr	r3, [r1, #16]
 8012bc2:	b96b      	cbnz	r3, 8012be0 <_svfiprintf_r+0x34>
 8012bc4:	2140      	movs	r1, #64	; 0x40
 8012bc6:	f7fc fc65 	bl	800f494 <_malloc_r>
 8012bca:	6020      	str	r0, [r4, #0]
 8012bcc:	6120      	str	r0, [r4, #16]
 8012bce:	b928      	cbnz	r0, 8012bdc <_svfiprintf_r+0x30>
 8012bd0:	230c      	movs	r3, #12
 8012bd2:	f8c8 3000 	str.w	r3, [r8]
 8012bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8012bda:	e0c8      	b.n	8012d6e <_svfiprintf_r+0x1c2>
 8012bdc:	2340      	movs	r3, #64	; 0x40
 8012bde:	6163      	str	r3, [r4, #20]
 8012be0:	2300      	movs	r3, #0
 8012be2:	9309      	str	r3, [sp, #36]	; 0x24
 8012be4:	2320      	movs	r3, #32
 8012be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012bea:	2330      	movs	r3, #48	; 0x30
 8012bec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012bf0:	9503      	str	r5, [sp, #12]
 8012bf2:	f04f 0b01 	mov.w	fp, #1
 8012bf6:	4637      	mov	r7, r6
 8012bf8:	463d      	mov	r5, r7
 8012bfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012bfe:	b10b      	cbz	r3, 8012c04 <_svfiprintf_r+0x58>
 8012c00:	2b25      	cmp	r3, #37	; 0x25
 8012c02:	d13e      	bne.n	8012c82 <_svfiprintf_r+0xd6>
 8012c04:	ebb7 0a06 	subs.w	sl, r7, r6
 8012c08:	d00b      	beq.n	8012c22 <_svfiprintf_r+0x76>
 8012c0a:	4653      	mov	r3, sl
 8012c0c:	4632      	mov	r2, r6
 8012c0e:	4621      	mov	r1, r4
 8012c10:	4640      	mov	r0, r8
 8012c12:	f7ff ff70 	bl	8012af6 <__ssputs_r>
 8012c16:	3001      	adds	r0, #1
 8012c18:	f000 80a4 	beq.w	8012d64 <_svfiprintf_r+0x1b8>
 8012c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c1e:	4453      	add	r3, sl
 8012c20:	9309      	str	r3, [sp, #36]	; 0x24
 8012c22:	783b      	ldrb	r3, [r7, #0]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	f000 809d 	beq.w	8012d64 <_svfiprintf_r+0x1b8>
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8012c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c34:	9304      	str	r3, [sp, #16]
 8012c36:	9307      	str	r3, [sp, #28]
 8012c38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c3c:	931a      	str	r3, [sp, #104]	; 0x68
 8012c3e:	462f      	mov	r7, r5
 8012c40:	2205      	movs	r2, #5
 8012c42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012c46:	4850      	ldr	r0, [pc, #320]	; (8012d88 <_svfiprintf_r+0x1dc>)
 8012c48:	f7ed faca 	bl	80001e0 <memchr>
 8012c4c:	9b04      	ldr	r3, [sp, #16]
 8012c4e:	b9d0      	cbnz	r0, 8012c86 <_svfiprintf_r+0xda>
 8012c50:	06d9      	lsls	r1, r3, #27
 8012c52:	bf44      	itt	mi
 8012c54:	2220      	movmi	r2, #32
 8012c56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012c5a:	071a      	lsls	r2, r3, #28
 8012c5c:	bf44      	itt	mi
 8012c5e:	222b      	movmi	r2, #43	; 0x2b
 8012c60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012c64:	782a      	ldrb	r2, [r5, #0]
 8012c66:	2a2a      	cmp	r2, #42	; 0x2a
 8012c68:	d015      	beq.n	8012c96 <_svfiprintf_r+0xea>
 8012c6a:	9a07      	ldr	r2, [sp, #28]
 8012c6c:	462f      	mov	r7, r5
 8012c6e:	2000      	movs	r0, #0
 8012c70:	250a      	movs	r5, #10
 8012c72:	4639      	mov	r1, r7
 8012c74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c78:	3b30      	subs	r3, #48	; 0x30
 8012c7a:	2b09      	cmp	r3, #9
 8012c7c:	d94d      	bls.n	8012d1a <_svfiprintf_r+0x16e>
 8012c7e:	b1b8      	cbz	r0, 8012cb0 <_svfiprintf_r+0x104>
 8012c80:	e00f      	b.n	8012ca2 <_svfiprintf_r+0xf6>
 8012c82:	462f      	mov	r7, r5
 8012c84:	e7b8      	b.n	8012bf8 <_svfiprintf_r+0x4c>
 8012c86:	4a40      	ldr	r2, [pc, #256]	; (8012d88 <_svfiprintf_r+0x1dc>)
 8012c88:	1a80      	subs	r0, r0, r2
 8012c8a:	fa0b f000 	lsl.w	r0, fp, r0
 8012c8e:	4318      	orrs	r0, r3
 8012c90:	9004      	str	r0, [sp, #16]
 8012c92:	463d      	mov	r5, r7
 8012c94:	e7d3      	b.n	8012c3e <_svfiprintf_r+0x92>
 8012c96:	9a03      	ldr	r2, [sp, #12]
 8012c98:	1d11      	adds	r1, r2, #4
 8012c9a:	6812      	ldr	r2, [r2, #0]
 8012c9c:	9103      	str	r1, [sp, #12]
 8012c9e:	2a00      	cmp	r2, #0
 8012ca0:	db01      	blt.n	8012ca6 <_svfiprintf_r+0xfa>
 8012ca2:	9207      	str	r2, [sp, #28]
 8012ca4:	e004      	b.n	8012cb0 <_svfiprintf_r+0x104>
 8012ca6:	4252      	negs	r2, r2
 8012ca8:	f043 0302 	orr.w	r3, r3, #2
 8012cac:	9207      	str	r2, [sp, #28]
 8012cae:	9304      	str	r3, [sp, #16]
 8012cb0:	783b      	ldrb	r3, [r7, #0]
 8012cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8012cb4:	d10c      	bne.n	8012cd0 <_svfiprintf_r+0x124>
 8012cb6:	787b      	ldrb	r3, [r7, #1]
 8012cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8012cba:	d133      	bne.n	8012d24 <_svfiprintf_r+0x178>
 8012cbc:	9b03      	ldr	r3, [sp, #12]
 8012cbe:	1d1a      	adds	r2, r3, #4
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	9203      	str	r2, [sp, #12]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	bfb8      	it	lt
 8012cc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8012ccc:	3702      	adds	r7, #2
 8012cce:	9305      	str	r3, [sp, #20]
 8012cd0:	4d2e      	ldr	r5, [pc, #184]	; (8012d8c <_svfiprintf_r+0x1e0>)
 8012cd2:	7839      	ldrb	r1, [r7, #0]
 8012cd4:	2203      	movs	r2, #3
 8012cd6:	4628      	mov	r0, r5
 8012cd8:	f7ed fa82 	bl	80001e0 <memchr>
 8012cdc:	b138      	cbz	r0, 8012cee <_svfiprintf_r+0x142>
 8012cde:	2340      	movs	r3, #64	; 0x40
 8012ce0:	1b40      	subs	r0, r0, r5
 8012ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8012ce6:	9b04      	ldr	r3, [sp, #16]
 8012ce8:	4303      	orrs	r3, r0
 8012cea:	3701      	adds	r7, #1
 8012cec:	9304      	str	r3, [sp, #16]
 8012cee:	7839      	ldrb	r1, [r7, #0]
 8012cf0:	4827      	ldr	r0, [pc, #156]	; (8012d90 <_svfiprintf_r+0x1e4>)
 8012cf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012cf6:	2206      	movs	r2, #6
 8012cf8:	1c7e      	adds	r6, r7, #1
 8012cfa:	f7ed fa71 	bl	80001e0 <memchr>
 8012cfe:	2800      	cmp	r0, #0
 8012d00:	d038      	beq.n	8012d74 <_svfiprintf_r+0x1c8>
 8012d02:	4b24      	ldr	r3, [pc, #144]	; (8012d94 <_svfiprintf_r+0x1e8>)
 8012d04:	bb13      	cbnz	r3, 8012d4c <_svfiprintf_r+0x1a0>
 8012d06:	9b03      	ldr	r3, [sp, #12]
 8012d08:	3307      	adds	r3, #7
 8012d0a:	f023 0307 	bic.w	r3, r3, #7
 8012d0e:	3308      	adds	r3, #8
 8012d10:	9303      	str	r3, [sp, #12]
 8012d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d14:	444b      	add	r3, r9
 8012d16:	9309      	str	r3, [sp, #36]	; 0x24
 8012d18:	e76d      	b.n	8012bf6 <_svfiprintf_r+0x4a>
 8012d1a:	fb05 3202 	mla	r2, r5, r2, r3
 8012d1e:	2001      	movs	r0, #1
 8012d20:	460f      	mov	r7, r1
 8012d22:	e7a6      	b.n	8012c72 <_svfiprintf_r+0xc6>
 8012d24:	2300      	movs	r3, #0
 8012d26:	3701      	adds	r7, #1
 8012d28:	9305      	str	r3, [sp, #20]
 8012d2a:	4619      	mov	r1, r3
 8012d2c:	250a      	movs	r5, #10
 8012d2e:	4638      	mov	r0, r7
 8012d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d34:	3a30      	subs	r2, #48	; 0x30
 8012d36:	2a09      	cmp	r2, #9
 8012d38:	d903      	bls.n	8012d42 <_svfiprintf_r+0x196>
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d0c8      	beq.n	8012cd0 <_svfiprintf_r+0x124>
 8012d3e:	9105      	str	r1, [sp, #20]
 8012d40:	e7c6      	b.n	8012cd0 <_svfiprintf_r+0x124>
 8012d42:	fb05 2101 	mla	r1, r5, r1, r2
 8012d46:	2301      	movs	r3, #1
 8012d48:	4607      	mov	r7, r0
 8012d4a:	e7f0      	b.n	8012d2e <_svfiprintf_r+0x182>
 8012d4c:	ab03      	add	r3, sp, #12
 8012d4e:	9300      	str	r3, [sp, #0]
 8012d50:	4622      	mov	r2, r4
 8012d52:	4b11      	ldr	r3, [pc, #68]	; (8012d98 <_svfiprintf_r+0x1ec>)
 8012d54:	a904      	add	r1, sp, #16
 8012d56:	4640      	mov	r0, r8
 8012d58:	f7fc fc8a 	bl	800f670 <_printf_float>
 8012d5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012d60:	4681      	mov	r9, r0
 8012d62:	d1d6      	bne.n	8012d12 <_svfiprintf_r+0x166>
 8012d64:	89a3      	ldrh	r3, [r4, #12]
 8012d66:	065b      	lsls	r3, r3, #25
 8012d68:	f53f af35 	bmi.w	8012bd6 <_svfiprintf_r+0x2a>
 8012d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d6e:	b01d      	add	sp, #116	; 0x74
 8012d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d74:	ab03      	add	r3, sp, #12
 8012d76:	9300      	str	r3, [sp, #0]
 8012d78:	4622      	mov	r2, r4
 8012d7a:	4b07      	ldr	r3, [pc, #28]	; (8012d98 <_svfiprintf_r+0x1ec>)
 8012d7c:	a904      	add	r1, sp, #16
 8012d7e:	4640      	mov	r0, r8
 8012d80:	f7fc ff2c 	bl	800fbdc <_printf_i>
 8012d84:	e7ea      	b.n	8012d5c <_svfiprintf_r+0x1b0>
 8012d86:	bf00      	nop
 8012d88:	08013314 	.word	0x08013314
 8012d8c:	0801331a 	.word	0x0801331a
 8012d90:	0801331e 	.word	0x0801331e
 8012d94:	0800f671 	.word	0x0800f671
 8012d98:	08012af7 	.word	0x08012af7

08012d9c <__ascii_wctomb>:
 8012d9c:	b149      	cbz	r1, 8012db2 <__ascii_wctomb+0x16>
 8012d9e:	2aff      	cmp	r2, #255	; 0xff
 8012da0:	bf85      	ittet	hi
 8012da2:	238a      	movhi	r3, #138	; 0x8a
 8012da4:	6003      	strhi	r3, [r0, #0]
 8012da6:	700a      	strbls	r2, [r1, #0]
 8012da8:	f04f 30ff 	movhi.w	r0, #4294967295
 8012dac:	bf98      	it	ls
 8012dae:	2001      	movls	r0, #1
 8012db0:	4770      	bx	lr
 8012db2:	4608      	mov	r0, r1
 8012db4:	4770      	bx	lr

08012db6 <memmove>:
 8012db6:	4288      	cmp	r0, r1
 8012db8:	b510      	push	{r4, lr}
 8012dba:	eb01 0302 	add.w	r3, r1, r2
 8012dbe:	d807      	bhi.n	8012dd0 <memmove+0x1a>
 8012dc0:	1e42      	subs	r2, r0, #1
 8012dc2:	4299      	cmp	r1, r3
 8012dc4:	d00a      	beq.n	8012ddc <memmove+0x26>
 8012dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012dca:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012dce:	e7f8      	b.n	8012dc2 <memmove+0xc>
 8012dd0:	4283      	cmp	r3, r0
 8012dd2:	d9f5      	bls.n	8012dc0 <memmove+0xa>
 8012dd4:	1881      	adds	r1, r0, r2
 8012dd6:	1ad2      	subs	r2, r2, r3
 8012dd8:	42d3      	cmn	r3, r2
 8012dda:	d100      	bne.n	8012dde <memmove+0x28>
 8012ddc:	bd10      	pop	{r4, pc}
 8012dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012de2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012de6:	e7f7      	b.n	8012dd8 <memmove+0x22>

08012de8 <_realloc_r>:
 8012de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dea:	4607      	mov	r7, r0
 8012dec:	4614      	mov	r4, r2
 8012dee:	460e      	mov	r6, r1
 8012df0:	b921      	cbnz	r1, 8012dfc <_realloc_r+0x14>
 8012df2:	4611      	mov	r1, r2
 8012df4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012df8:	f7fc bb4c 	b.w	800f494 <_malloc_r>
 8012dfc:	b922      	cbnz	r2, 8012e08 <_realloc_r+0x20>
 8012dfe:	f7fc fafb 	bl	800f3f8 <_free_r>
 8012e02:	4625      	mov	r5, r4
 8012e04:	4628      	mov	r0, r5
 8012e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e08:	f000 f814 	bl	8012e34 <_malloc_usable_size_r>
 8012e0c:	42a0      	cmp	r0, r4
 8012e0e:	d20f      	bcs.n	8012e30 <_realloc_r+0x48>
 8012e10:	4621      	mov	r1, r4
 8012e12:	4638      	mov	r0, r7
 8012e14:	f7fc fb3e 	bl	800f494 <_malloc_r>
 8012e18:	4605      	mov	r5, r0
 8012e1a:	2800      	cmp	r0, #0
 8012e1c:	d0f2      	beq.n	8012e04 <_realloc_r+0x1c>
 8012e1e:	4631      	mov	r1, r6
 8012e20:	4622      	mov	r2, r4
 8012e22:	f7fc fad5 	bl	800f3d0 <memcpy>
 8012e26:	4631      	mov	r1, r6
 8012e28:	4638      	mov	r0, r7
 8012e2a:	f7fc fae5 	bl	800f3f8 <_free_r>
 8012e2e:	e7e9      	b.n	8012e04 <_realloc_r+0x1c>
 8012e30:	4635      	mov	r5, r6
 8012e32:	e7e7      	b.n	8012e04 <_realloc_r+0x1c>

08012e34 <_malloc_usable_size_r>:
 8012e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e38:	1f18      	subs	r0, r3, #4
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	bfbc      	itt	lt
 8012e3e:	580b      	ldrlt	r3, [r1, r0]
 8012e40:	18c0      	addlt	r0, r0, r3
 8012e42:	4770      	bx	lr

08012e44 <_init>:
 8012e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e46:	bf00      	nop
 8012e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e4a:	bc08      	pop	{r3}
 8012e4c:	469e      	mov	lr, r3
 8012e4e:	4770      	bx	lr

08012e50 <_fini>:
 8012e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e52:	bf00      	nop
 8012e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e56:	bc08      	pop	{r3}
 8012e58:	469e      	mov	lr, r3
 8012e5a:	4770      	bx	lr
