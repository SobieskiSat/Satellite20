
Satellite20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014d94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08014f28  08014f28  00024f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015420  08015420  00030394  2**0
                  CONTENTS
  4 .ARM          00000008  08015420  08015420  00025420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015428  08015428  00030394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015428  08015428  00025428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801542c  0801542c  0002542c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000394  20000000  08015430  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007b04  20000394  080157c4  00030394  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007e98  080157c4  00037e98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030394  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b6d4  00000000  00000000  000303c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005495  00000000  00000000  0005ba98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fb8  00000000  00000000  00060f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d70  00000000  00000000  00062ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028032  00000000  00000000  00064c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e076  00000000  00000000  0008cc8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6374  00000000  00000000  000aad00  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00181074  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009690  00000000  00000000  001810f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  0018a780  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000394 	.word	0x20000394
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014f0c 	.word	0x08014f0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000398 	.word	0x20000398
 80001cc:	08014f0c 	.word	0x08014f0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <micros>:

#include <stdbool.h>
#include "main.h"
#include "stm32f4xx_hal.h"

static inline uint32_t micros(void) { return (uint32_t)TIM2->CNT; }
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <println>:
		return true;
	}
	return false;
}
static inline bool println(const char* format, ...)
{
 8000f9c:	b40f      	push	{r0, r1, r2, r3}
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b084      	sub	sp, #16
 8000fa2:	af00      	add	r7, sp, #0
	if (usbPresent)
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <println+0xb4>)
 8000fa6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d147      	bne.n	800103e <println+0xa2>
	{
		writePin(LEDD, HIGH);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb4:	4827      	ldr	r0, [pc, #156]	; (8001054 <println+0xb8>)
 8000fb6:	f003 fb6b 	bl	8004690 <HAL_GPIO_WritePin>
		va_list argptr;
		va_start(argptr, format);
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	69b9      	ldr	r1, [r7, #24]
 8000fc4:	4824      	ldr	r0, [pc, #144]	; (8001058 <println+0xbc>)
 8000fc6:	f010 fabb 	bl	8011540 <vsiprintf>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <println+0xc0>)
 8000fd0:	601a      	str	r2, [r3, #0]
		va_end(argptr);

		printBuffer[printLen] = '\r';
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <println+0xc0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a20      	ldr	r2, [pc, #128]	; (8001058 <println+0xbc>)
 8000fd8:	210d      	movs	r1, #13
 8000fda:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <println+0xc0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <println+0xbc>)
 8000fe4:	210a      	movs	r1, #10
 8000fe6:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <println+0xc0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3302      	adds	r3, #2
 8000fee:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <println+0xbc>)
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <println+0xc0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3303      	adds	r3, #3
 8000ffa:	4a18      	ldr	r2, [pc, #96]	; (800105c <println+0xc0>)
 8000ffc:	6013      	str	r3, [r2, #0]

		uint32_t printStart = micros();
 8000ffe:	f7ff ffc3 	bl	8000f88 <micros>
 8001002:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <println+0xc0>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4613      	mov	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	3346      	adds	r3, #70	; 0x46
 8001012:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 8001014:	e001      	b.n	800101a <println+0x7e>
		{
			if (micros() - printStart > timeout && false)
 8001016:	f7ff ffb7 	bl	8000f88 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <println+0xc0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	b29b      	uxth	r3, r3
 8001020:	4619      	mov	r1, r3
 8001022:	480d      	ldr	r0, [pc, #52]	; (8001058 <println+0xbc>)
 8001024:	f00d ffec 	bl	800f000 <CDC_Transmit_FS>
 8001028:	4603      	mov	r3, r0
 800102a:	2b01      	cmp	r3, #1
 800102c:	d0f3      	beq.n	8001016 <println+0x7a>
			{
				writePin(LEDD, LOW);
				return false;
			}
		}
		writePin(LEDD, LOW);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001034:	4807      	ldr	r0, [pc, #28]	; (8001054 <println+0xb8>)
 8001036:	f003 fb2b 	bl	8004690 <HAL_GPIO_WritePin>
		return true;
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <println+0xa4>
	}
	return false;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800104a:	b004      	add	sp, #16
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	200009dc 	.word	0x200009dc
 8001054:	40020400 	.word	0x40020400
 8001058:	200003b4 	.word	0x200003b4
 800105c:	200003b0 	.word	0x200003b0

08001060 <MPU9250_writeByte>:
#include <math.h>
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_i2c.h"

static void MPU9250_writeByte(MPU9250* inst, uint8_t mem_addr, uint8_t data)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af04      	add	r7, sp, #16
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
 800106c:	4613      	mov	r3, r2
 800106e:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr, mem_addr, 1, &data, 1, 2);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	791b      	ldrb	r3, [r3, #4]
 8001078:	b299      	uxth	r1, r3
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	b29a      	uxth	r2, r3
 800107e:	2302      	movs	r3, #2
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	2301      	movs	r3, #1
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	1cbb      	adds	r3, r7, #2
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	f003 fc42 	bl	8004914 <HAL_I2C_Mem_Write>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <MPU9250_readByte>:
static char MPU9250_readByte(MPU9250* inst, uint8_t mem_addr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af04      	add	r7, sp, #16
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1]; // `data` will store the register data
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, 1, 2);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	791b      	ldrb	r3, [r3, #4]
 80010ac:	b299      	uxth	r1, r3
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	2302      	movs	r3, #2
 80010b4:	9302      	str	r3, [sp, #8]
 80010b6:	2301      	movs	r3, #1
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	f003 fd21 	bl	8004b08 <HAL_I2C_Mem_Read>
	return (char)data[0];
 80010c6:	7b3b      	ldrb	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <MPU9250_readBytes>:
static void MPU9250_readBytes(MPU9250* inst, uint8_t mem_addr, uint8_t count, uint8_t* dest)
{     
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b08f      	sub	sp, #60	; 0x3c
 80010d4:	af04      	add	r7, sp, #16
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	460b      	mov	r3, r1
 80010dc:	72fb      	strb	r3, [r7, #11]
 80010de:	4613      	mov	r3, r2
 80010e0:	72bb      	strb	r3, [r7, #10]
	uint8_t data[14];
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr, mem_addr, 1, data, count, 2);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	791b      	ldrb	r3, [r3, #4]
 80010ea:	b299      	uxth	r1, r3
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	b29c      	uxth	r4, r3
 80010f0:	7abb      	ldrb	r3, [r7, #10]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	2202      	movs	r2, #2
 80010f6:	9202      	str	r2, [sp, #8]
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	4622      	mov	r2, r4
 8001104:	f003 fd00 	bl	8004b08 <HAL_I2C_Mem_Read>

	int ii = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
 8001110:	e00b      	b.n	800112a <MPU9250_readBytes+0x5a>
	{
		dest[ii] = data[ii];
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	4413      	add	r3, r2
 8001118:	f107 0114 	add.w	r1, r7, #20
 800111c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800111e:	440a      	add	r2, r1
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	3301      	adds	r3, #1
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
 800112a:	7abb      	ldrb	r3, [r7, #10]
 800112c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112e:	429a      	cmp	r2, r3
 8001130:	dbef      	blt.n	8001112 <MPU9250_readBytes+0x42>
	}
}
 8001132:	bf00      	nop
 8001134:	372c      	adds	r7, #44	; 0x2c
 8001136:	46bd      	mov	sp, r7
 8001138:	bd90      	pop	{r4, r7, pc}

0800113a <AK8963_writeByte>:
static void AK8963_writeByte(MPU9250* inst, uint8_t mem_addr, uint8_t data)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af04      	add	r7, sp, #16
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	460b      	mov	r3, r1
 8001144:	70fb      	strb	r3, [r7, #3]
 8001146:	4613      	mov	r3, r2
 8001148:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, &data, 1, 2);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	795b      	ldrb	r3, [r3, #5]
 8001152:	b299      	uxth	r1, r3
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	b29a      	uxth	r2, r3
 8001158:	2302      	movs	r3, #2
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	2301      	movs	r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	1cbb      	adds	r3, r7, #2
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	f003 fbd5 	bl	8004914 <HAL_I2C_Mem_Write>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <AK8963_readByte>:
static char AK8963_readByte(MPU9250* inst, uint8_t mem_addr)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b088      	sub	sp, #32
 8001176:	af04      	add	r7, sp, #16
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1]; // `data` will store the register data
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, data, 1, 2);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	795b      	ldrb	r3, [r3, #5]
 8001186:	b299      	uxth	r1, r3
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	b29a      	uxth	r2, r3
 800118c:	2302      	movs	r3, #2
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2301      	movs	r3, #1
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	f003 fcb4 	bl	8004b08 <HAL_I2C_Mem_Read>
	return (char)data[0];
 80011a0:	7b3b      	ldrb	r3, [r7, #12]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <AK8963_readBytes>:
static void AK8963_readBytes(MPU9250* inst, uint8_t mem_addr, uint8_t count, uint8_t* dest)
{     
 80011aa:	b590      	push	{r4, r7, lr}
 80011ac:	b08f      	sub	sp, #60	; 0x3c
 80011ae:	af04      	add	r7, sp, #16
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	72fb      	strb	r3, [r7, #11]
 80011b8:	4613      	mov	r3, r2
 80011ba:	72bb      	strb	r3, [r7, #10]
	uint8_t data[14];
	HAL_I2C_Mem_Read(inst->i2c, inst->i2c_addr_ak, mem_addr, 1, data, count, 2);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	795b      	ldrb	r3, [r3, #5]
 80011c4:	b299      	uxth	r1, r3
 80011c6:	7afb      	ldrb	r3, [r7, #11]
 80011c8:	b29c      	uxth	r4, r3
 80011ca:	7abb      	ldrb	r3, [r7, #10]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2202      	movs	r2, #2
 80011d0:	9202      	str	r2, [sp, #8]
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	4622      	mov	r2, r4
 80011de:	f003 fc93 	bl	8004b08 <HAL_I2C_Mem_Read>

	int ii = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ea:	e00b      	b.n	8001204 <AK8963_readBytes+0x5a>
	{
		dest[ii] = data[ii];
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	f107 0114 	add.w	r1, r7, #20
 80011f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f8:	440a      	add	r2, r1
 80011fa:	7812      	ldrb	r2, [r2, #0]
 80011fc:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++) // maybe memcpy() [?]
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	3301      	adds	r3, #1
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
 8001204:	7abb      	ldrb	r3, [r7, #10]
 8001206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001208:	429a      	cmp	r2, r3
 800120a:	dbef      	blt.n	80011ec <AK8963_readBytes+0x42>
	}
}
 800120c:	bf00      	nop
 800120e:	372c      	adds	r7, #44	; 0x2c
 8001210:	46bd      	mov	sp, r7
 8001212:	bd90      	pop	{r4, r7, pc}

08001214 <MPU9250_getRes>:
 
void MPU9250_getRes(MPU9250* inst, MPU9250_config* config)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
	switch (config->Mscale)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	7b9b      	ldrb	r3, [r3, #14]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <MPU9250_getRes+0x18>
 8001226:	2b01      	cmp	r3, #1
 8001228:	d004      	beq.n	8001234 <MPU9250_getRes+0x20>
 800122a:	e007      	b.n	800123c <MPU9250_getRes+0x28>
	{
		case MPU9250_MFS_14BITS:	inst->mRes = 10.0*4912.0/8190.0;	break;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a28      	ldr	r2, [pc, #160]	; (80012d0 <MPU9250_getRes+0xbc>)
 8001230:	649a      	str	r2, [r3, #72]	; 0x48
 8001232:	e003      	b.n	800123c <MPU9250_getRes+0x28>
		case MPU9250_MFS_16BITS:	inst->mRes = 10.0*4912.0/32760.0;	break;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a27      	ldr	r2, [pc, #156]	; (80012d4 <MPU9250_getRes+0xc0>)
 8001238:	649a      	str	r2, [r3, #72]	; 0x48
 800123a:	bf00      	nop
	}
	switch (config->Gscale)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	7b5b      	ldrb	r3, [r3, #13]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d81b      	bhi.n	800127c <MPU9250_getRes+0x68>
 8001244:	a201      	add	r2, pc, #4	; (adr r2, 800124c <MPU9250_getRes+0x38>)
 8001246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124a:	bf00      	nop
 800124c:	0800125d 	.word	0x0800125d
 8001250:	08001265 	.word	0x08001265
 8001254:	0800126d 	.word	0x0800126d
 8001258:	08001275 	.word	0x08001275
	{
		case MPU9250_GFS_250DPS:	inst->gRes = 250.0/32768.0;			break;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a1e      	ldr	r2, [pc, #120]	; (80012d8 <MPU9250_getRes+0xc4>)
 8001260:	645a      	str	r2, [r3, #68]	; 0x44
 8001262:	e00b      	b.n	800127c <MPU9250_getRes+0x68>
		case MPU9250_GFS_500DPS:	inst->gRes = 500.0/32768.0;			break;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <MPU9250_getRes+0xc8>)
 8001268:	645a      	str	r2, [r3, #68]	; 0x44
 800126a:	e007      	b.n	800127c <MPU9250_getRes+0x68>
		case MPU9250_GFS_1000DPS:	inst->gRes = 1000.0/32768.0;		break;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <MPU9250_getRes+0xcc>)
 8001270:	645a      	str	r2, [r3, #68]	; 0x44
 8001272:	e003      	b.n	800127c <MPU9250_getRes+0x68>
		case MPU9250_GFS_2000DPS:	inst->gRes = 2000.0/32768.0;		break;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <MPU9250_getRes+0xd0>)
 8001278:	645a      	str	r2, [r3, #68]	; 0x44
 800127a:	bf00      	nop
	}
	switch (config->Ascale)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	7b1b      	ldrb	r3, [r3, #12]
 8001280:	2b03      	cmp	r3, #3
 8001282:	d81f      	bhi.n	80012c4 <MPU9250_getRes+0xb0>
 8001284:	a201      	add	r2, pc, #4	; (adr r2, 800128c <MPU9250_getRes+0x78>)
 8001286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128a:	bf00      	nop
 800128c:	0800129d 	.word	0x0800129d
 8001290:	080012a7 	.word	0x080012a7
 8001294:	080012b1 	.word	0x080012b1
 8001298:	080012bb 	.word	0x080012bb
	{
		case MPU9250_AFS_2G:		inst->aRes = 2.0/32768.0;			break;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80012a2:	641a      	str	r2, [r3, #64]	; 0x40
 80012a4:	e00e      	b.n	80012c4 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_4G:		inst->aRes = 4.0/32768.0;			break;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
 80012ae:	e009      	b.n	80012c4 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_8G:		inst->aRes = 8.0/32768.0;			break;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40
 80012b8:	e004      	b.n	80012c4 <MPU9250_getRes+0xb0>
		case MPU9250_AFS_16G:		inst->aRes = 16.0/32768.0;			break;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80012c0:	641a      	str	r2, [r3, #64]	; 0x40
 80012c2:	bf00      	nop
	}
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40bfebff 	.word	0x40bfebff
 80012d4:	3fbfebff 	.word	0x3fbfebff
 80012d8:	3bfa0000 	.word	0x3bfa0000
 80012dc:	3c7a0000 	.word	0x3c7a0000
 80012e0:	3cfa0000 	.word	0x3cfa0000
 80012e4:	3d7a0000 	.word	0x3d7a0000

080012e8 <MPU9250_readAccelData>:

void MPU9250_readAccelData(MPU9250* inst)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];
	MPU9250_readBytes(inst, MPU9250_ACCEL_XOUT_H, 6, &rawData[0]);
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	2206      	movs	r2, #6
 80012f6:	213b      	movs	r1, #59	; 0x3b
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff fee9 	bl	80010d0 <MPU9250_readBytes>
	// calculate actual g value
	inst->ax = (float)((int16_t)(((int16_t)rawData[0] << 8) | rawData[1]))*inst->aRes - inst->accelBias[0];	
 80012fe:	7a3b      	ldrb	r3, [r7, #8]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	b21a      	sxth	r2, r3
 8001304:	7a7b      	ldrb	r3, [r7, #9]
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21b      	sxth	r3, r3
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800131a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	edc3 7a07 	vstr	s15, [r3, #28]
	inst->ay = (float)((int16_t)(((int16_t)rawData[2] << 8) | rawData[3]))*inst->aRes - inst->accelBias[1];
 800132e:	7abb      	ldrb	r3, [r7, #10]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	b21a      	sxth	r2, r3
 8001334:	7afb      	ldrb	r3, [r7, #11]
 8001336:	b21b      	sxth	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b21b      	sxth	r3, r3
 800133c:	ee07 3a90 	vmov	s15, r3
 8001340:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800134a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	edc3 7a08 	vstr	s15, [r3, #32]
	inst->az = (float)((int16_t)(((int16_t)rawData[4] << 8) | rawData[5]))*inst->aRes - inst->accelBias[2];
 800135e:	7b3b      	ldrb	r3, [r7, #12]
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	b21a      	sxth	r2, r3
 8001364:	7b7b      	ldrb	r3, [r7, #13]
 8001366:	b21b      	sxth	r3, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	b21b      	sxth	r3, r3
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800137a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <MPU9250_readGyroData>:
void MPU9250_readGyroData(MPU9250* inst)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b084      	sub	sp, #16
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];
	MPU9250_readBytes(inst, MPU9250_GYRO_XOUT_H, 6, &rawData[0]);
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	2206      	movs	r2, #6
 80013a4:	2143      	movs	r1, #67	; 0x43
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fe92 	bl	80010d0 <MPU9250_readBytes>
	// calculate actual gyro value
	inst->gx = (float)((int16_t)(((int16_t)rawData[0] << 8) | rawData[1]))*inst->gRes;							
 80013ac:	7a3b      	ldrb	r3, [r7, #8]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	7a7b      	ldrb	r3, [r7, #9]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80013c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	inst->gy = (float)((int16_t)(((int16_t)rawData[2] << 8) | rawData[3]))*inst->gRes;
 80013d2:	7abb      	ldrb	r3, [r7, #10]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	7afb      	ldrb	r3, [r7, #11]
 80013da:	b21b      	sxth	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	b21b      	sxth	r3, r3
 80013e0:	ee07 3a90 	vmov	s15, r3
 80013e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80013ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	inst->gz = (float)((int16_t)(((int16_t)rawData[4] << 8) | rawData[5]))*inst->gRes;
 80013f8:	7b3b      	ldrb	r3, [r7, #12]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	7b7b      	ldrb	r3, [r7, #13]
 8001400:	b21b      	sxth	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b21b      	sxth	r3, r3
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <MPU9250_readMagData>:
void MPU9250_readMagData(MPU9250* inst)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b084      	sub	sp, #16
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
	uint8_t rawData[7];											// 7 because must read ST2 at end of data acquisition
	if(AK8963_readByte(inst, AK8963_ST1) & 0x01)				// wait for magnetometer data ready bit to be set
 800142e:	2102      	movs	r1, #2
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fe9e 	bl	8001172 <AK8963_readByte>
 8001436:	4603      	mov	r3, r0
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b00      	cmp	r3, #0
 800143e:	d064      	beq.n	800150a <MPU9250_readMagData+0xe4>
	{
		AK8963_readBytes(inst, AK8963_XOUT_L, 7, &rawData[0]);	// Read the six raw data and ST2 registers sequentially into data array
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	2207      	movs	r2, #7
 8001446:	2103      	movs	r1, #3
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff feae 	bl	80011aa <AK8963_readBytes>
		uint8_t c = rawData[6];									// End data read by reading ST2 register
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	73fb      	strb	r3, [r7, #15]
		if(!(c & 0x08))											// Check if magnetic sensor overflow set, if not then report data
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	2b00      	cmp	r3, #0
 800145a:	d156      	bne.n	800150a <MPU9250_readMagData+0xe4>
		{
			// calculate actual magnetometer value including factory calibration values
			inst->mx = (float)((int16_t)(((int16_t)rawData[1] << 8) | rawData[0]))*inst->mRes*inst->magCalibration[0] - inst->magBias[0];	
 800145c:	7a7b      	ldrb	r3, [r7, #9]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	7a3b      	ldrb	r3, [r7, #8]
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001478:	ee27 7a27 	vmul.f32	s14, s14, s15
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001482:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800148c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			inst->my = (float)((int16_t)(((int16_t)rawData[3] << 8) | rawData[2]))*inst->mRes*inst->magCalibration[1] - inst->magBias[1];
 8001496:	7afb      	ldrb	r3, [r7, #11]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	b21a      	sxth	r2, r3
 800149c:	7abb      	ldrb	r3, [r7, #10]
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80014b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80014bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80014c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			inst->mz = (float)((int16_t)(((int16_t)rawData[5] << 8) | rawData[4]))*inst->mRes*inst->magCalibration[2] - inst->magBias[2];
 80014d0:	7b7b      	ldrb	r3, [r7, #13]
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	7b3b      	ldrb	r3, [r7, #12]
 80014d8:	b21b      	sxth	r3, r3
 80014da:	4313      	orrs	r3, r2
 80014dc:	b21b      	sxth	r3, r3
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80014ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80014f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001500:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		}
	}
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <MPU9250_present>:
	// calculate chip temperature in Celcius degrees
	inst->temperature = ((float)((int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]))) / 333.87 + 21.0;
}

bool MPU9250_present(MPU9250* inst, uint8_t trials)	// arg = trials of getting WHO_AM_I response from MPU and AK
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	70fb      	strb	r3, [r7, #3]
	uint8_t attempts = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]
	do
	{
		//MPU9250_reset(inst);
		char who[2] = {0, 0};
 8001524:	2300      	movs	r3, #0
 8001526:	733b      	strb	r3, [r7, #12]
 8001528:	2300      	movs	r3, #0
 800152a:	737b      	strb	r3, [r7, #13]
		who[0] = MPU9250_readByte(inst, MPU9250_WHO_AM_I);
 800152c:	2175      	movs	r1, #117	; 0x75
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fdb2 	bl	8001098 <MPU9250_readByte>
 8001534:	4603      	mov	r3, r0
 8001536:	733b      	strb	r3, [r7, #12]
		who[1] = AK8963_readByte(inst, AK8963_WHO_AM_I);
 8001538:	2100      	movs	r1, #0
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fe19 	bl	8001172 <AK8963_readByte>
 8001540:	4603      	mov	r3, r0
 8001542:	737b      	strb	r3, [r7, #13]
		if (who[0] == 0x71)
 8001544:	7b3b      	ldrb	r3, [r7, #12]
 8001546:	2b71      	cmp	r3, #113	; 0x71
 8001548:	d104      	bne.n	8001554 <MPU9250_present+0x40>
		{
			println("Both present!");
 800154a:	480c      	ldr	r0, [pc, #48]	; (800157c <MPU9250_present+0x68>)
 800154c:	f7ff fd26 	bl	8000f9c <println>
			return true;
 8001550:	2301      	movs	r3, #1
 8001552:	e00e      	b.n	8001572 <MPU9250_present+0x5e>
		}
		else
		{
			attempts++;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	3301      	adds	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
			delay(1000);
 800155a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800155e:	f002 fa19 	bl	8003994 <HAL_Delay>
		}
	} while (attempts <= trials);
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	429a      	cmp	r2, r3
 8001568:	d9dc      	bls.n	8001524 <MPU9250_present+0x10>
	inst->active = false;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	721a      	strb	r2, [r3, #8]
	return false;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	08014f28 	.word	0x08014f28

08001580 <MPU9250_init>:

bool MPU9250_init(MPU9250* inst, MPU9250_config* config)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
	inst->active = false;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	721a      	strb	r2, [r3, #8]
	inst->alg_lastUpdate = 0;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (config->alg_rate > 0) inst->alg_delay = 1.0 / config->alg_rate;	// calculate delay in [s] from [Hz]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800159e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a6:	dd0a      	ble.n	80015be <MPU9250_init+0x3e>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80015ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
 80015bc:	e004      	b.n	80015c8 <MPU9250_init+0x48>
	else inst->alg_delay = 0;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	inst->euler_delay = 1000000.0 / config->euler_rate;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ffbb 	bl	8000548 <__aeabi_f2d>
 80015d2:	4603      	mov	r3, r0
 80015d4:	460c      	mov	r4, r1
 80015d6:	461a      	mov	r2, r3
 80015d8:	4623      	mov	r3, r4
 80015da:	a185      	add	r1, pc, #532	; (adr r1, 80017f0 <MPU9250_init+0x270>)
 80015dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015e0:	f7ff f934 	bl	800084c <__aeabi_ddiv>
 80015e4:	4603      	mov	r3, r0
 80015e6:	460c      	mov	r4, r1
 80015e8:	4618      	mov	r0, r3
 80015ea:	4621      	mov	r1, r4
 80015ec:	f7ff fadc 	bl	8000ba8 <__aeabi_d2uiz>
 80015f0:	4602      	mov	r2, r0
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	67da      	str	r2, [r3, #124]	; 0x7c
	int i;
	for (i = 0; i < 3; i++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	e021      	b.n	8001640 <MPU9250_init+0xc0>
	{
		inst->eulerOffsets[i] = config->eulerOffsets[i];
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3320      	adds	r3, #32
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	3304      	adds	r3, #4
 8001612:	601a      	str	r2, [r3, #0]
		inst->eInt[i] = 0.0f;
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	332a      	adds	r3, #42	; 0x2a
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	3304      	adds	r3, #4
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
		inst->q[i+1] = 0.0f;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3301      	adds	r3, #1
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	3326      	adds	r3, #38	; 0x26
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	3304      	adds	r3, #4
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3301      	adds	r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b02      	cmp	r3, #2
 8001644:	ddda      	ble.n	80015fc <MPU9250_init+0x7c>
	}
	inst->q[0] = 1.0f;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800164c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	if (MPU9250_present(inst, 5))
 8001650:	2105      	movs	r1, #5
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ff5e 	bl	8001514 <MPU9250_present>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d03c      	beq.n	80016d8 <MPU9250_init+0x158>
	{
		delay(100);
 800165e:	2064      	movs	r0, #100	; 0x64
 8001660:	f002 f998 	bl	8003994 <HAL_Delay>
		MPU9250_SelfTest(inst);					// Start by performing self test
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fc17 	bl	8001e98 <MPU9250_SelfTest>
		delay(1000);
 800166a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800166e:	f002 f991 	bl	8003994 <HAL_Delay>
		MPU9250_getRes(inst, config);			// Get sensor resolutions based on config, only need to do this once
 8001672:	6839      	ldr	r1, [r7, #0]
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff fdcd 	bl	8001214 <MPU9250_getRes>

		if (config->calibrate)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	7c1b      	ldrb	r3, [r3, #16]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <MPU9250_init+0x10a>
		{
			MPU9250_calibrate(inst);			// Calibrate gyro and accelerometers, load biases in bias registers	
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f9c8 	bl	8001a18 <MPU9250_calibrate>
 8001688:	e022      	b.n	80016d0 <MPU9250_init+0x150>
		}
		else
		{										// Or load biases from config
			for (i = 0; i < 3; i++)
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	e01c      	b.n	80016ca <MPU9250_init+0x14a>
			{
				inst->accelBias[i] = config->accelBias[i];
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	330a      	adds	r3, #10
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	3304      	adds	r3, #4
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3318      	adds	r3, #24
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	3304      	adds	r3, #4
 80016aa:	601a      	str	r2, [r3, #0]
				inst->gyroBias[i] = config->gyroBias[i];
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3308      	adds	r3, #8
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3316      	adds	r3, #22
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	601a      	str	r2, [r3, #0]
			for (i = 0; i < 3; i++)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3301      	adds	r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	dddf      	ble.n	8001690 <MPU9250_init+0x110>
			}
			// magBias?
		}
		delay(1000);
 80016d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016d4:	f002 f95e 	bl	8003994 <HAL_Delay>
	}
															// Initialize MPU9250 device
															// wake up device
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x00);		// Clear sleep mode bit (6), enable all sensors 
 80016d8:	2200      	movs	r2, #0
 80016da:	216b      	movs	r1, #107	; 0x6b
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fcbf 	bl	8001060 <MPU9250_writeByte>
	delay(100); 											// get PLL established on x-axis gyro; should check for PLL ready interrupt  
 80016e2:	2064      	movs	r0, #100	; 0x64
 80016e4:	f002 f956 	bl	8003994 <HAL_Delay>
															// get stable time source
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x01);  	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 80016e8:	2201      	movs	r2, #1
 80016ea:	216b      	movs	r1, #107	; 0x6b
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fcb7 	bl	8001060 <MPU9250_writeByte>
															// Configure Gyro and Accelerometer
															// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively
	delay(100);												// DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 80016f2:	2064      	movs	r0, #100	; 0x64
 80016f4:	f002 f94e 	bl	8003994 <HAL_Delay>
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x03);			// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
 80016f8:	2203      	movs	r2, #3
 80016fa:	211a      	movs	r1, #26
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fcaf 	bl	8001060 <MPU9250_writeByte>
	delay(100);												// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
 8001702:	2064      	movs	r0, #100	; 0x64
 8001704:	f002 f946 	bl	8003994 <HAL_Delay>
	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x04);		// Use a 200 Hz rate; the same rate set in CONFIG above
 8001708:	2204      	movs	r2, #4
 800170a:	2119      	movs	r1, #25
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fca7 	bl	8001060 <MPU9250_writeByte>

															// Set gyroscope full scale range
															// Range selects FS_SEL and AFS_SEL are 0 - 3
															// so 2-bit values are left-shifted into positions 4:3
	uint8_t c = MPU9250_readByte(inst, MPU9250_GYRO_CONFIG);// get current GYRO_CONFIG register value
 8001712:	211b      	movs	r1, #27
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fcbf 	bl	8001098 <MPU9250_readByte>
 800171a:	4603      	mov	r3, r0
 800171c:	72fb      	strb	r3, [r7, #11]
	// c = c & ~0xE0; 										// Clear self-test bits [7:5]
	c = c & ~0x03;											// Clear Fchoice bits [1:0]
 800171e:	7afb      	ldrb	r3, [r7, #11]
 8001720:	f023 0303 	bic.w	r3, r3, #3
 8001724:	72fb      	strb	r3, [r7, #11]
	c = c & ~0x18;											// Clear AFS bits [4:3]
 8001726:	7afb      	ldrb	r3, [r7, #11]
 8001728:	f023 0318 	bic.w	r3, r3, #24
 800172c:	72fb      	strb	r3, [r7, #11]
	c = c | config->Gscale << 3;							// Set full scale range for the gyro
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	7b5b      	ldrb	r3, [r3, #13]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	b25a      	sxtb	r2, r3
 8001736:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800173a:	4313      	orrs	r3, r2
 800173c:	b25b      	sxtb	r3, r3
 800173e:	72fb      	strb	r3, [r7, #11]
	// c =| 0x00; 											// Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, c);		// Write new GYRO_CONFIG value to register
 8001740:	7afb      	ldrb	r3, [r7, #11]
 8001742:	461a      	mov	r2, r3
 8001744:	211b      	movs	r1, #27
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fc8a 	bl	8001060 <MPU9250_writeByte>

															// Set accelerometer full-scale range configuration
	c = MPU9250_readByte(inst, MPU9250_ACCEL_CONFIG);		// get current ACCEL_CONFIG register value
 800174c:	211c      	movs	r1, #28
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fca2 	bl	8001098 <MPU9250_readByte>
 8001754:	4603      	mov	r3, r0
 8001756:	72fb      	strb	r3, [r7, #11]
	// c = c & ~0xE0;										// Clear self-test bits [7:5] 
	c = c & ~0x18;											// Clear AFS bits [4:3]
 8001758:	7afb      	ldrb	r3, [r7, #11]
 800175a:	f023 0318 	bic.w	r3, r3, #24
 800175e:	72fb      	strb	r3, [r7, #11]
	c = c | config->Ascale << 3;							// Set full scale range for the accelerometer
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	7b1b      	ldrb	r3, [r3, #12]
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	b25a      	sxtb	r2, r3
 8001768:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800176c:	4313      	orrs	r3, r2
 800176e:	b25b      	sxtb	r3, r3
 8001770:	72fb      	strb	r3, [r7, #11]
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, c);		// Write new ACCEL_CONFIG register value
 8001772:	7afb      	ldrb	r3, [r7, #11]
 8001774:	461a      	mov	r2, r3
 8001776:	211c      	movs	r1, #28
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fc71 	bl	8001060 <MPU9250_writeByte>

															// Set accelerometer sample rate configuration
															// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1
															// for accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = MPU9250_readByte(inst, MPU9250_ACCEL_CONFIG2); 		// get current ACCEL_CONFIG2 register value
 800177e:	211d      	movs	r1, #29
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fc89 	bl	8001098 <MPU9250_readByte>
 8001786:	4603      	mov	r3, r0
 8001788:	72fb      	strb	r3, [r7, #11]
	c = c & ~0x0F; 											// Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])  
 800178a:	7afb      	ldrb	r3, [r7, #11]
 800178c:	f023 030f 	bic.w	r3, r3, #15
 8001790:	72fb      	strb	r3, [r7, #11]
	c = c | 0x03;											// Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001792:	7afb      	ldrb	r3, [r7, #11]
 8001794:	f043 0303 	orr.w	r3, r3, #3
 8001798:	72fb      	strb	r3, [r7, #11]
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG2, c);		// Write new ACCEL_CONFIG2 register value
 800179a:	7afb      	ldrb	r3, [r7, #11]
 800179c:	461a      	mov	r2, r3
 800179e:	211d      	movs	r1, #29
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fc5d 	bl	8001060 <MPU9250_writeByte>

	// The accelerometer, gyro, and thermometer are set to 1 kHz sample rates, 
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

															// Configure Interrupts and Bypass Enable
	MPU9250_writeByte(inst, MPU9250_INT_PIN_CFG, 0x22);    	// Set interrupt pin active high, push-pull,
 80017a6:	2222      	movs	r2, #34	; 0x22
 80017a8:	2137      	movs	r1, #55	; 0x37
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff fc58 	bl	8001060 <MPU9250_writeByte>
															//and clear on read of INT_STATUS, enable I2C_BYPASS_EN
	MPU9250_writeByte(inst, MPU9250_INT_ENABLE, 0x01);		// Enable data ready (bit 0) interrupt
 80017b0:	2201      	movs	r2, #1
 80017b2:	2138      	movs	r1, #56	; 0x38
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff fc53 	bl	8001060 <MPU9250_writeByte>
	if (!config->calibrate && false)						// [SKIPPED] Do this step immidiately only if not calibrating
	{
		AK8963_init(inst, config);	 						// Get magnetometer calibration from AK8963 ROM
	}

	inst->mpu_active = true;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	719a      	strb	r2, [r3, #6]
	inst->active = inst->mpu_active && inst->ak_active;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	799b      	ldrb	r3, [r3, #6]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <MPU9250_init+0x254>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	79db      	ldrb	r3, [r3, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MPU9250_init+0x254>
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <MPU9250_init+0x256>
 80017d4:	2300      	movs	r3, #0
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	721a      	strb	r2, [r3, #8]
	return true;
 80017e0:	2301      	movs	r3, #1
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd90      	pop	{r4, r7, pc}
 80017ea:	bf00      	nop
 80017ec:	f3af 8000 	nop.w
 80017f0:	00000000 	.word	0x00000000
 80017f4:	412e8480 	.word	0x412e8480

080017f8 <AK8963_init>:
bool AK8963_init(MPU9250* inst, MPU9250_config* config)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
	delay(1000);
 8001802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001806:	f002 f8c5 	bl	8003994 <HAL_Delay>
															// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  									// x/y/z gyro calibration data stored here
	AK8963_writeByte(inst, AK8963_CNTL, 0x00);				// Power down magnetometer
 800180a:	2200      	movs	r2, #0
 800180c:	210a      	movs	r1, #10
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fc93 	bl	800113a <AK8963_writeByte>
	delay(10);
 8001814:	200a      	movs	r0, #10
 8001816:	f002 f8bd 	bl	8003994 <HAL_Delay>
	AK8963_writeByte(inst, AK8963_CNTL, 0x0F);				// Enter Fuse ROM access mode
 800181a:	220f      	movs	r2, #15
 800181c:	210a      	movs	r1, #10
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fc8b 	bl	800113a <AK8963_writeByte>
	delay(10);
 8001824:	200a      	movs	r0, #10
 8001826:	f002 f8b5 	bl	8003994 <HAL_Delay>
	AK8963_readBytes(inst, AK8963_ASAX, 3, &rawData[0]);	// Read the x,y,z-axis calibration values
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	2203      	movs	r2, #3
 8001830:	2110      	movs	r1, #16
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fcb9 	bl	80011aa <AK8963_readBytes>
	inst->magCalibration[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return axis sensitivity adjustment values
 8001838:	7a3b      	ldrb	r3, [r7, #8]
 800183a:	3b80      	subs	r3, #128	; 0x80
 800183c:	ee07 3a90 	vmov	s15, r3
 8001840:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001844:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001940 <AK8963_init+0x148>
 8001848:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800184c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001850:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	inst->magCalibration[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 800185a:	7a7b      	ldrb	r3, [r7, #9]
 800185c:	3b80      	subs	r3, #128	; 0x80
 800185e:	ee07 3a90 	vmov	s15, r3
 8001862:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001866:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001940 <AK8963_init+0x148>
 800186a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800186e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001872:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	inst->magCalibration[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 800187c:	7abb      	ldrb	r3, [r7, #10]
 800187e:	3b80      	subs	r3, #128	; 0x80
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001888:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001940 <AK8963_init+0x148>
 800188c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001890:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001894:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	AK8963_writeByte(inst, AK8963_CNTL, 0x00);				// Power down magnetometer
 800189e:	2200      	movs	r2, #0
 80018a0:	210a      	movs	r1, #10
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fc49 	bl	800113a <AK8963_writeByte>
	delay(10);
 80018a8:	200a      	movs	r0, #10
 80018aa:	f002 f873 	bl	8003994 <HAL_Delay>
															// Configure the magnetometer for continuous read and highest resolution
															// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
															// and enable continuous mode data acquisition Mmode (bits [3:0]),
															// 0010 for 8 Hz and 0110 for 100 Hz sample rates
	AK8963_writeByte(inst, AK8963_CNTL, config->Mscale << 4 | config->Mmode); // Set magnetometer data resolution and sample ODR
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	7b9b      	ldrb	r3, [r3, #14]
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	b25a      	sxtb	r2, r3
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	7bdb      	ldrb	r3, [r3, #15]
 80018ba:	b25b      	sxtb	r3, r3
 80018bc:	4313      	orrs	r3, r2
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	461a      	mov	r2, r3
 80018c4:	210a      	movs	r1, #10
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fc37 	bl	800113a <AK8963_writeByte>
	delay(10);
 80018cc:	200a      	movs	r0, #10
 80018ce:	f002 f861 	bl	8003994 <HAL_Delay>

	if (config->calibrate)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	7c1b      	ldrb	r3, [r3, #16]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <AK8963_init+0xea>
	{
		AK8963_calibrate(inst);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fe06 	bl	80024ec <AK8963_calibrate>
 80018e0:	e016      	b.n	8001910 <AK8963_init+0x118>
	}
	else
	{
		int i;
		for (i = 0; i < 3; i++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e010      	b.n	800190a <AK8963_init+0x112>
		{
			inst->magBias[i] = config->magBias[i];
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3304      	adds	r3, #4
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	3304      	adds	r3, #4
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	3312      	adds	r3, #18
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3304      	adds	r3, #4
 8001902:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 3; i++)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3301      	adds	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b02      	cmp	r3, #2
 800190e:	ddeb      	ble.n	80018e8 <AK8963_init+0xf0>
		}
	}
	
	inst->ak_active = true;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	71da      	strb	r2, [r3, #7]
	inst->active = inst->mpu_active && inst->ak_active;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	799b      	ldrb	r3, [r3, #6]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <AK8963_init+0x132>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	79db      	ldrb	r3, [r3, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <AK8963_init+0x132>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <AK8963_init+0x134>
 800192a:	2300      	movs	r3, #0
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	b2da      	uxtb	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	721a      	strb	r2, [r3, #8]
	return true;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	43800000 	.word	0x43800000

08001944 <MPU9250_update>:

bool MPU9250_update(MPU9250* inst)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	if (MPU9250_readByte(inst, MPU9250_INT_STATUS) & 0x01)	// check if data is ready
 800194c:	213a      	movs	r1, #58	; 0x3a
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fba2 	bl	8001098 <MPU9250_readByte>
 8001954:	4603      	mov	r3, r0
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	d008      	beq.n	8001970 <MPU9250_update+0x2c>
	{
		MPU9250_readAccelData(inst);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fcc2 	bl	80012e8 <MPU9250_readAccelData>
		MPU9250_readGyroData(inst);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff fd16 	bl	8001396 <MPU9250_readGyroData>
		MPU9250_readMagData(inst);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff fd5b 	bl	8001426 <MPU9250_readMagData>
	}

	inst->alg_deltat = ((micros() - inst->alg_lastUpdate)/1000000.0f);// set integration time by time elapsed since last filter update
 8001970:	f7ff fb0a 	bl	8000f88 <micros>
 8001974:	4602      	mov	r2, r0
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	ee07 3a90 	vmov	s15, r3
 8001982:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001986:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80019f4 <MPU9250_update+0xb0>
 800198a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	if (inst->alg_deltat >= inst->alg_delay)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80019a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a8:	db1e      	blt.n	80019e8 <MPU9250_update+0xa4>
	{
		//inst->lastAlgUpdate = micros();	// [!!!] check position of this line vs performance
		MadgwickQuaternionUpdate(inst);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f001 f828 	bl	8002a00 <MadgwickQuaternionUpdate>
		inst->alg_lastUpdate = micros();
 80019b0:	f7ff faea 	bl	8000f88 <micros>
 80019b4:	4602      	mov	r2, r0
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

		if (micros() - inst->euler_lastUpdate >= inst->euler_delay)	// ! euler_delay is multiplied to be in [us]
 80019bc:	f7ff fae4 	bl	8000f88 <micros>
 80019c0:	4602      	mov	r2, r0
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019c8:	1ad2      	subs	r2, r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d30a      	bcc.n	80019e8 <MPU9250_update+0xa4>
		{
			MPU9250_updateEuler(inst);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 fe9c 	bl	8002710 <MPU9250_updateEuler>
			inst->euler_lastUpdate = micros();
 80019d8:	f7ff fad6 	bl	8000f88 <micros>
 80019dc:	4602      	mov	r2, r0
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			return true;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <MPU9250_update+0xa6>
		}
	}
	return false;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	49742400 	.word	0x49742400

080019f8 <MPU9250_reset>:

void MPU9250_reset(MPU9250* inst)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001a00:	2280      	movs	r2, #128	; 0x80
 8001a02:	216b      	movs	r1, #107	; 0x6b
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff fb2b 	bl	8001060 <MPU9250_writeByte>
	delay(100);
 8001a0a:	2064      	movs	r0, #100	; 0x64
 8001a0c:	f001 ffc2 	bl	8003994 <HAL_Delay>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <MPU9250_calibrate>:

void MPU9250_calibrate(MPU9250* inst)					// Function which accumulates gyro and accelerometer data after device initialization.
{														// It calculates the average of the at-rest readings and
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b094      	sub	sp, #80	; 0x50
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	uint16_t i, packet_count, fifo_count;				// then loads the resulting offsets into accelerometer and gyro bias registers.
	int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8001a20:	2300      	movs	r3, #0
 8001a22:	637b      	str	r3, [r7, #52]	; 0x34
 8001a24:	2300      	movs	r3, #0
 8001a26:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a28:	2300      	movs	r3, #0
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a34:	2300      	movs	r3, #0
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t data[12]; 									// data array to hold accelerometer and gyro x, y, z, data

	MPU9250_reset(inst);								// clear gyro and accelerometer bias registers
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff ffdd 	bl	80019f8 <MPU9250_reset>

	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x01);  // Get stable time source
 8001a3e:	2201      	movs	r2, #1
 8001a40:	216b      	movs	r1, #107	; 0x6b
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fb0c 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_2, 0x00);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8001a48:	2200      	movs	r2, #0
 8001a4a:	216c      	movs	r1, #108	; 0x6c
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fb07 	bl	8001060 <MPU9250_writeByte>
	delay(200);
 8001a52:	20c8      	movs	r0, #200	; 0xc8
 8001a54:	f001 ff9e 	bl	8003994 <HAL_Delay>
														// Configure device for bias calculation
	MPU9250_writeByte(inst, MPU9250_INT_ENABLE, 0x00);  // Disable all interrupts
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2138      	movs	r1, #56	; 0x38
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff faff 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x00);     // Disable FIFO
 8001a62:	2200      	movs	r2, #0
 8001a64:	2123      	movs	r1, #35	; 0x23
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fafa 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_PWR_MGMT_1, 0x00);  // Turn on internal clock source
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	216b      	movs	r1, #107	; 0x6b
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff faf5 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_I2C_MST_CTRL, 0x00);// Disable I2C master
 8001a76:	2200      	movs	r2, #0
 8001a78:	2124      	movs	r1, #36	; 0x24
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff faf0 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x00);   // Disable FIFO and I2C master modes
 8001a80:	2200      	movs	r2, #0
 8001a82:	216a      	movs	r1, #106	; 0x6a
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff faeb 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x0C);   // Reset FIFO and DMP
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	216a      	movs	r1, #106	; 0x6a
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff fae6 	bl	8001060 <MPU9250_writeByte>
	delay(15);
 8001a94:	200f      	movs	r0, #15
 8001a96:	f001 ff7d 	bl	8003994 <HAL_Delay>
														// Configure MPU9250 gyro and accelerometer for bias calculation
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	211a      	movs	r1, #26
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff fade 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2119      	movs	r1, #25
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff fad9 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0x00); // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001aae:	2200      	movs	r2, #0
 8001ab0:	211b      	movs	r1, #27
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fad4 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0x00);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8001ab8:	2200      	movs	r2, #0
 8001aba:	211c      	movs	r1, #28
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff facf 	bl	8001060 <MPU9250_writeByte>

	uint16_t  gyrosensitivity  = 131;					// = 131 LSB/degrees/sec
 8001ac2:	2383      	movs	r3, #131	; 0x83
 8001ac4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t  accelsensitivity = 16384;					// = 16384 LSB/g
 8001ac8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001acc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

														// Configure FIFO to capture accelerometer and gyro data for bias calculation
	MPU9250_writeByte(inst, MPU9250_USER_CTRL, 0x40);   // Enable FIFO  
 8001ad0:	2240      	movs	r2, #64	; 0x40
 8001ad2:	216a      	movs	r1, #106	; 0x6a
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff fac3 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8001ada:	2278      	movs	r2, #120	; 0x78
 8001adc:	2123      	movs	r1, #35	; 0x23
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fabe 	bl	8001060 <MPU9250_writeByte>
	delay(40);											// accumulate 40 samples in 80 milliseconds = 480 bytes
 8001ae4:	2028      	movs	r0, #40	; 0x28
 8001ae6:	f001 ff55 	bl	8003994 <HAL_Delay>

														// At end of sample accumulation, turn off FIFO sensor read
	MPU9250_writeByte(inst, MPU9250_FIFO_EN, 0x00);		// Disable gyro and accelerometer sensors for FIFO
 8001aea:	2200      	movs	r2, #0
 8001aec:	2123      	movs	r1, #35	; 0x23
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fab6 	bl	8001060 <MPU9250_writeByte>
	MPU9250_readBytes(inst, MPU9250_FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	2202      	movs	r2, #2
 8001afa:	2172      	movs	r1, #114	; 0x72
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff fae7 	bl	80010d0 <MPU9250_readBytes>
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8001b02:	7f3b      	ldrb	r3, [r7, #28]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	7f7b      	ldrb	r3, [r7, #29]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	b21b      	sxth	r3, r3
 8001b10:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	packet_count = fifo_count/12;						// How many sets of full gyro and accelerometer data for averaging
 8001b14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001b18:	4add      	ldr	r2, [pc, #884]	; (8001e90 <MPU9250_calibrate+0x478>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	08db      	lsrs	r3, r3, #3
 8001b20:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	for (i = 0; i < packet_count; i++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001b2a:	e03d      	b.n	8001ba8 <MPU9250_calibrate+0x190>
	{
		MPU9250_readBytes(inst, MPU9250_FIFO_R_W, 12, &data[0]);		// read data for averaging
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	220c      	movs	r2, #12
 8001b32:	2174      	movs	r1, #116	; 0x74
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff facb 	bl	80010d0 <MPU9250_readBytes>
		accel_bias[0] += (int32_t)(((int16_t)data[0] << 8) | data[1]);	// Form signed 16-bit integer for each sample in FIFO
 8001b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b3c:	7f3b      	ldrb	r3, [r7, #28]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	7f79      	ldrb	r1, [r7, #29]
 8001b42:	430b      	orrs	r3, r1
 8001b44:	4413      	add	r3, r2
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
		accel_bias[1] += (int32_t)(((int16_t)data[2] << 8) | data[3]);	// Sum individual biases
 8001b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b4a:	7fbb      	ldrb	r3, [r7, #30]
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	7ff9      	ldrb	r1, [r7, #31]
 8001b50:	430b      	orrs	r3, r1
 8001b52:	4413      	add	r3, r2
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
		accel_bias[2] += (int32_t)(((int16_t)data[4] << 8) | data[5]);
 8001b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8001b62:	430b      	orrs	r3, r1
 8001b64:	4413      	add	r3, r2
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
		gyro_bias[0]  += (int32_t)(((int16_t)data[6] << 8) | data[7]);
 8001b68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001b74:	430b      	orrs	r3, r1
 8001b76:	4413      	add	r3, r2
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
		gyro_bias[1]  += (int32_t)(((int16_t)data[8] << 8) | data[9]);
 8001b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001b86:	430b      	orrs	r3, r1
 8001b88:	4413      	add	r3, r2
 8001b8a:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[2]  += (int32_t)(((int16_t)data[10] << 8) | data[11]);
 8001b8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b92:	021b      	lsls	r3, r3, #8
 8001b94:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (i = 0; i < packet_count; i++)
 8001b9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001ba8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001bac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d3bb      	bcc.n	8001b2c <MPU9250_calibrate+0x114>
	}

	for (i = 0; i < 3; i++)								// Normalize sums to get average count biases
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001bba:	e089      	b.n	8001cd0 <MPU9250_calibrate+0x2b8>
	{
		accel_bias[i] /= (int32_t) packet_count;
 8001bbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8001bcc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001bd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001bd4:	fb91 f2f2 	sdiv	r2, r1, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001bde:	440b      	add	r3, r1
 8001be0:	f843 2c28 	str.w	r2, [r3, #-40]
		gyro_bias[i]  /= (int32_t) packet_count;
 8001be4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001bee:	4413      	add	r3, r2
 8001bf0:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 8001bf4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001bf8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001bfc:	fb91 f2f2 	sdiv	r2, r1, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001c06:	440b      	add	r3, r1
 8001c08:	f843 2c1c 	str.w	r2, [r3, #-28]

		if (i == abs(MPU9250_VERTICAL_AXIS))			// Remove gravity from the z-axis accelerometer bias calculation
 8001c0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d10d      	bne.n	8001c30 <MPU9250_calibrate+0x218>
		{
			//accel_bias[abs(MPU9250_VERTICAL_AXIS)] += (int32_t)(accelsensitivity * sgn(MPU9250_VERTICAL_AXIS)); // !!! not sure about sign!
																					// [!!!] \/ \/ scarry, no sgn()!
			accel_bias[abs(MPU9250_VERTICAL_AXIS)] -= (int32_t)(accelsensitivity * (accel_bias[abs(MPU9250_VERTICAL_AXIS)] / abs(accel_bias[abs(MPU9250_VERTICAL_AXIS)])));
 8001c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c1e:	2900      	cmp	r1, #0
 8001c20:	bfb8      	it	lt
 8001c22:	4249      	neglt	r1, r1
 8001c24:	fb90 f1f1 	sdiv	r1, r0, r1
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	633b      	str	r3, [r7, #48]	; 0x30
			if(accel_bias[2] > 0L)	accel_bias[2] -= (int32_t) accelsensitivity;
			else 					accel_bias[2] += (int32_t) accelsensitivity;
			*/
		}
		//[!!!] this part isn't needed unless [commented STEP1]	// Construct the gyro biases for push to the hardware gyro bias registers,
		data[2*i] =  ((-gyro_bias[i]/4) >> 8) & 0xFF;	// which are reset to zero upon device startup.
 8001c30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001c40:	425b      	negs	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	da00      	bge.n	8001c48 <MPU9250_calibrate+0x230>
 8001c46:	3303      	adds	r3, #3
 8001c48:	109b      	asrs	r3, r3, #2
 8001c4a:	121a      	asrs	r2, r3, #8
 8001c4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001c58:	440b      	add	r3, r1
 8001c5a:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] = (-gyro_bias[i]/4)		  & 0xFF;	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001c5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001c68:	4413      	add	r3, r2
 8001c6a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001c6e:	425b      	negs	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	da00      	bge.n	8001c76 <MPU9250_calibrate+0x25e>
 8001c74:	3303      	adds	r3, #3
 8001c76:	109b      	asrs	r3, r3, #2
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	3301      	adds	r3, #1
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001c88:	440b      	add	r3, r1
 8001c8a:	f803 2c34 	strb.w	r2, [r3, #-52]
		//[!!!] goto [commented STEP1]					// Biases are additive, so change sign on calculated average gyro biases
		inst->gyroBias[i] = (float)gyro_bias[i]/(float)gyrosensitivity;	// Construct gyro bias in deg/s for later manual subtraction
 8001c8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001c98:	4413      	add	r3, r2
 8001c9a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ca6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	3316      	adds	r3, #22
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)								// Normalize sums to get average count biases
 8001cc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001cd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	f67f af71 	bls.w	8001bbc <MPU9250_calibrate+0x1a4>
	// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0};							// A place to hold the factory accelerometer trim biases
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
	MPU9250_readBytes(inst, MPU9250_XA_OFFSET_H, 2, &data[0]);		// Read factory accelerometer trim values
 8001ce6:	f107 031c 	add.w	r3, r7, #28
 8001cea:	2202      	movs	r2, #2
 8001cec:	2177      	movs	r1, #119	; 0x77
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff f9ee 	bl	80010d0 <MPU9250_readBytes>
	accel_bias_reg[0] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8001cf4:	7f3b      	ldrb	r3, [r7, #28]
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	7f7b      	ldrb	r3, [r7, #29]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
	MPU9250_readBytes(inst, MPU9250_YA_OFFSET_H, 2, &data[0]);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	2202      	movs	r2, #2
 8001d08:	217a      	movs	r1, #122	; 0x7a
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff f9e0 	bl	80010d0 <MPU9250_readBytes>
	accel_bias_reg[1] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8001d10:	7f3b      	ldrb	r3, [r7, #28]
 8001d12:	021b      	lsls	r3, r3, #8
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	7f7b      	ldrb	r3, [r7, #29]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]
	MPU9250_readBytes(inst, MPU9250_ZA_OFFSET_H, 2, &data[0]);
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	2202      	movs	r2, #2
 8001d24:	217d      	movs	r1, #125	; 0x7d
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff f9d2 	bl	80010d0 <MPU9250_readBytes>
	accel_bias_reg[2] = (int16_t)((int16_t)data[0] << 8) | data[1];
 8001d2c:	7f3b      	ldrb	r3, [r7, #28]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	7f7b      	ldrb	r3, [r7, #29]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]

	uint32_t mask = 1uL;						// Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t mask_bit[3] = {0, 0, 0};			// Define array to hold mask bit for each accelerometer bias axis
 8001d3e:	2300      	movs	r3, #0
 8001d40:	733b      	strb	r3, [r7, #12]
 8001d42:	2300      	movs	r3, #0
 8001d44:	737b      	strb	r3, [r7, #13]
 8001d46:	2300      	movs	r3, #0
 8001d48:	73bb      	strb	r3, [r7, #14]
	for(i = 0; i < 3; i++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001d50:	e094      	b.n	8001e7c <MPU9250_calibrate+0x464>
	{											// If temperature compensation bit is set, record that fact in mask_bit
		if(accel_bias_reg[i] & mask) mask_bit[i] = 0x01;
 8001d52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8001d62:	461a      	mov	r2, r3
 8001d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <MPU9250_calibrate+0x364>
 8001d6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d70:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001d74:	4413      	add	r3, r2
 8001d76:	2201      	movs	r2, #1
 8001d78:	f803 2c44 	strb.w	r2, [r3, #-68]
												// Construct total accelerometer bias
		accel_bias_reg[i] -= (accel_bias[i]/8);	// Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8001d7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001d86:	4413      	add	r3, r2
 8001d88:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8001d8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001d96:	440b      	add	r3, r1
 8001d98:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	da00      	bge.n	8001da2 <MPU9250_calibrate+0x38a>
 8001da0:	3307      	adds	r3, #7
 8001da2:	10db      	asrs	r3, r3, #3
 8001da4:	425b      	negs	r3, r3
 8001da6:	4619      	mov	r1, r3
 8001da8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001dac:	440a      	add	r2, r1
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001db4:	440b      	add	r3, r1
 8001db6:	f843 2c40 	str.w	r2, [r3, #-64]

		//[!!!] this part isn't needed unless [commented STEP2]
		data[2*i]   = (accel_bias_reg[i] >> 8) & 0xFF;
 8001dba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8001dca:	121a      	asrs	r2, r3, #8
 8001dcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001dd8:	440b      	add	r3, r1
 8001dda:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] =  accel_bias_reg[i]	   & 0xFF;
 8001dde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001de8:	4413      	add	r3, r2
 8001dea:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8001dee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	3301      	adds	r3, #1
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001dfc:	440b      	add	r3, r1
 8001dfe:	f803 2c34 	strb.w	r2, [r3, #-52]
		data[2*i+1] = data[2*i+1] | mask_bit[i];// Preserve temperature compensation bit when writing back to accelerometer bias registers
 8001e02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001e0e:	4413      	add	r3, r2
 8001e10:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 8001e14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e18:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 8001e22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	3301      	adds	r3, #1
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001e32:	440b      	add	r3, r1
 8001e34:	f803 2c34 	strb.w	r2, [r3, #-52]
		//[!!!] goto [commented STEP2]
												// Output scaled accelerometer biases for manual subtraction in the main program
		inst->accelBias[i] = (float)accel_bias[i]/(float)accelsensitivity;
 8001e38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001e42:	4413      	add	r3, r2
 8001e44:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e54:	ee07 3a90 	vmov	s15, r3
 8001e58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	3318      	adds	r3, #24
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0; i < 3; i++)
 8001e72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e76:	3301      	adds	r3, #1
 8001e78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001e7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	f67f af66 	bls.w	8001d52 <MPU9250_calibrate+0x33a>
	MPU9250_writeByte(inst, MPU9250_YA_OFFSET_H, data[2]);
	MPU9250_writeByte(inst, MPU9250_YA_OFFSET_L, data[3]);
	MPU9250_writeByte(inst, MPU9250_ZA_OFFSET_H, data[4]);
	MPU9250_writeByte(inst, MPU9250_ZA_OFFSET_L, data[5]);
	*/
}
 8001e86:	bf00      	nop
 8001e88:	3750      	adds	r7, #80	; 0x50
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	aaaaaaab 	.word	0xaaaaaaab
 8001e94:	00000000 	.word	0x00000000

08001e98 <MPU9250_SelfTest>:

bool MPU9250_SelfTest(MPU9250* inst)						// Accelerometer and gyroscope self test; check calibration wrt factory settings
{															// percent deviation from factory trim values should be within +/- 14% to pass
 8001e98:	b5b0      	push	{r4, r5, r7, lr}
 8001e9a:	b0a2      	sub	sp, #136	; 0x88
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	uint8_t selfTest[6];
	float gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8001ea0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	float results[6];

	inst->aRes = 1;											// Prepare instance to SelfTest
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
	inst->gRes = 1;											//Configuration values (must?) not affect readings
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ee4:	645a      	str	r2, [r3, #68]	; 0x44
	int i = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	for (i = 0; i < 3; i++)
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ef2:	e017      	b.n	8001f24 <MPU9250_SelfTest+0x8c>
	{
		inst->accelBias[i] = 0.0f;
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001efa:	3318      	adds	r3, #24
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	3304      	adds	r3, #4
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
		inst->gyroBias[i] = 0.0f;
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f0e:	3316      	adds	r3, #22
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8001f1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	dde3      	ble.n	8001ef4 <MPU9250_SelfTest+0x5c>
	}

	MPU9250_writeByte(inst, MPU9250_SMPLRT_DIV, 0x00);		// Set gyro sample rate to 1 kHz
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2119      	movs	r1, #25
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff f895 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_CONFIG, 0x02);			// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8001f36:	2202      	movs	r2, #2
 8001f38:	211a      	movs	r1, #26
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff f890 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, FS<<3);	// Set full scale range for the gyro to 250 dps
 8001f40:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	211b      	movs	r1, #27
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff f887 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8001f52:	2202      	movs	r2, #2
 8001f54:	211d      	movs	r1, #29
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff f882 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, FS<<3);	// Set full scale range for the accelerometer to 2 g
 8001f5c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	211c      	movs	r1, #28
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff f879 	bl	8001060 <MPU9250_writeByte>

	for(i = 0; i < 200; i++)								// Get average current values of gyro and acclerometer
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f74:	e040      	b.n	8001ff8 <MPU9250_SelfTest+0x160>
	{
		MPU9250_readAccelData(inst);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff f9b6 	bl	80012e8 <MPU9250_readAccelData>
		aAvg[0] += inst->ax;
 8001f7c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		aAvg[1] += inst->ay;
 8001f8e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	edd3 7a08 	vldr	s15, [r3, #32]
 8001f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		aAvg[2] += inst->az;
 8001fa0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fae:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		MPU9250_readGyroData(inst);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff f9ef 	bl	8001396 <MPU9250_readGyroData>
		gAvg[0] += inst->gx;
 8001fb8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		gAvg[1] += inst->gy;
 8001fca:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		gAvg[2] += inst->gz;
 8001fdc:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fea:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	for(i = 0; i < 200; i++)								// Get average current values of gyro and acclerometer
 8001fee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ffc:	2bc7      	cmp	r3, #199	; 0xc7
 8001ffe:	ddba      	ble.n	8001f76 <MPU9250_SelfTest+0xde>
	}

	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average current readings
 8002000:	2300      	movs	r3, #0
 8002002:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002006:	e054      	b.n	80020b2 <MPU9250_SelfTest+0x21a>
	{
		aAvg[i] /= 200.0;
 8002008:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002012:	4413      	add	r3, r2
 8002014:	3b34      	subs	r3, #52	; 0x34
 8002016:	ed93 7a00 	vldr	s14, [r3]
 800201a:	eddf 6ab7 	vldr	s13, [pc, #732]	; 80022f8 <MPU9250_SelfTest+0x460>
 800201e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002022:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800202c:	4413      	add	r3, r2
 800202e:	3b34      	subs	r3, #52	; 0x34
 8002030:	edc3 7a00 	vstr	s15, [r3]
		gAvg[i] /= 200.0;
 8002034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800203e:	4413      	add	r3, r2
 8002040:	3b28      	subs	r3, #40	; 0x28
 8002042:	ed93 7a00 	vldr	s14, [r3]
 8002046:	eddf 6aac 	vldr	s13, [pc, #688]	; 80022f8 <MPU9250_SelfTest+0x460>
 800204a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800204e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002058:	4413      	add	r3, r2
 800205a:	3b28      	subs	r3, #40	; 0x28
 800205c:	edc3 7a00 	vstr	s15, [r3]
		println("aAvg: %f", aAvg[i]);
 8002060:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800206a:	4413      	add	r3, r2
 800206c:	3b34      	subs	r3, #52	; 0x34
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fa69 	bl	8000548 <__aeabi_f2d>
 8002076:	4603      	mov	r3, r0
 8002078:	460c      	mov	r4, r1
 800207a:	461a      	mov	r2, r3
 800207c:	4623      	mov	r3, r4
 800207e:	489f      	ldr	r0, [pc, #636]	; (80022fc <MPU9250_SelfTest+0x464>)
 8002080:	f7fe ff8c 	bl	8000f9c <println>
		println("gAvg: %f", gAvg[i]);
 8002084:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800208e:	4413      	add	r3, r2
 8002090:	3b28      	subs	r3, #40	; 0x28
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fa57 	bl	8000548 <__aeabi_f2d>
 800209a:	4603      	mov	r3, r0
 800209c:	460c      	mov	r4, r1
 800209e:	461a      	mov	r2, r3
 80020a0:	4623      	mov	r3, r4
 80020a2:	4897      	ldr	r0, [pc, #604]	; (8002300 <MPU9250_SelfTest+0x468>)
 80020a4:	f7fe ff7a 	bl	8000f9c <println>
	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average current readings
 80020a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020ac:	3301      	adds	r3, #1
 80020ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80020b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	dda6      	ble.n	8002008 <MPU9250_SelfTest+0x170>
	}
															// Configure the accelerometer for self-test
	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0xE0);	// Enable self test on all three axes and set accelerometer range to +/- 2 g
 80020ba:	22e0      	movs	r2, #224	; 0xe0
 80020bc:	211c      	movs	r1, #28
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7fe ffce 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0xE0); 	// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80020c4:	22e0      	movs	r2, #224	; 0xe0
 80020c6:	211b      	movs	r1, #27
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7fe ffc9 	bl	8001060 <MPU9250_writeByte>
	delay(25); 												// Delay a while to let the device stabilize
 80020ce:	2019      	movs	r0, #25
 80020d0:	f001 fc60 	bl	8003994 <HAL_Delay>

	for(i = 0; i < 200; i++)								// Get average self-test values of gyro and acclerometer
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80020da:	e040      	b.n	800215e <MPU9250_SelfTest+0x2c6>
	{
		MPU9250_readAccelData(inst);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff f903 	bl	80012e8 <MPU9250_readAccelData>
		aSTAvg[0] += inst->ax;
 80020e2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	edd3 7a07 	vldr	s15, [r3, #28]
 80020ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		aSTAvg[1] += inst->ay;
 80020f4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80020fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002102:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		aSTAvg[2] += inst->az;
 8002106:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002114:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		MPU9250_readGyroData(inst);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff f93c 	bl	8001396 <MPU9250_readGyroData>
		aSTAvg[0] += inst->gx;
 800211e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		aSTAvg[1] += inst->gy;
 8002130:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800213a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		aSTAvg[2] += inst->gz;
 8002142:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800214c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002150:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	for(i = 0; i < 200; i++)								// Get average self-test values of gyro and acclerometer
 8002154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002158:	3301      	adds	r3, #1
 800215a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800215e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002162:	2bc7      	cmp	r3, #199	; 0xc7
 8002164:	ddba      	ble.n	80020dc <MPU9250_SelfTest+0x244>
	}

	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average self-test readings
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800216c:	e030      	b.n	80021d0 <MPU9250_SelfTest+0x338>
	{
		aSTAvg[i] /= 200;
 800216e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002178:	4413      	add	r3, r2
 800217a:	3b40      	subs	r3, #64	; 0x40
 800217c:	ed93 7a00 	vldr	s14, [r3]
 8002180:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80022f8 <MPU9250_SelfTest+0x460>
 8002184:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002188:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002192:	4413      	add	r3, r2
 8002194:	3b40      	subs	r3, #64	; 0x40
 8002196:	edc3 7a00 	vstr	s15, [r3]
		gSTAvg[i] /= 200;
 800219a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021a4:	4413      	add	r3, r2
 80021a6:	3b4c      	subs	r3, #76	; 0x4c
 80021a8:	ed93 7a00 	vldr	s14, [r3]
 80021ac:	eddf 6a52 	vldr	s13, [pc, #328]	; 80022f8 <MPU9250_SelfTest+0x460>
 80021b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021be:	4413      	add	r3, r2
 80021c0:	3b4c      	subs	r3, #76	; 0x4c
 80021c2:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)									// Get average of 200 values and store as average self-test readings
 80021c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021ca:	3301      	adds	r3, #1
 80021cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	ddca      	ble.n	800216e <MPU9250_SelfTest+0x2d6>
	}

	MPU9250_writeByte(inst, MPU9250_ACCEL_CONFIG, 0x00);	// Configure the gyro and accelerometer for normal operation
 80021d8:	2200      	movs	r2, #0
 80021da:	211c      	movs	r1, #28
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7fe ff3f 	bl	8001060 <MPU9250_writeByte>
	MPU9250_writeByte(inst, MPU9250_GYRO_CONFIG, 0x00);
 80021e2:	2200      	movs	r2, #0
 80021e4:	211b      	movs	r1, #27
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7fe ff3a 	bl	8001060 <MPU9250_writeByte>
	delay(25); 												// Delay a while to let the device stabilize
 80021ec:	2019      	movs	r0, #25
 80021ee:	f001 fbd1 	bl	8003994 <HAL_Delay>

	selfTest[0] = MPU9250_readByte(inst, MPU9250_SELF_TEST_X_ACCEL);	// Retrieve accelerometer and gyro 
 80021f2:	210d      	movs	r1, #13
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7fe ff4f 	bl	8001098 <MPU9250_readByte>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	selfTest[1] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Y_ACCEL);	// factory Self-Test Code from USR_Reg
 8002200:	210e      	movs	r1, #14
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe ff48 	bl	8001098 <MPU9250_readByte>
 8002208:	4603      	mov	r3, r0
 800220a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	selfTest[2] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Z_ACCEL);	// (self-test results)
 800220e:	210f      	movs	r1, #15
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7fe ff41 	bl	8001098 <MPU9250_readByte>
 8002216:	4603      	mov	r3, r0
 8002218:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	selfTest[3] = MPU9250_readByte(inst, MPU9250_SELF_TEST_X_GYRO);
 800221c:	2100      	movs	r1, #0
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe ff3a 	bl	8001098 <MPU9250_readByte>
 8002224:	4603      	mov	r3, r0
 8002226:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	selfTest[4] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Y_GYRO);
 800222a:	2101      	movs	r1, #1
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7fe ff33 	bl	8001098 <MPU9250_readByte>
 8002232:	4603      	mov	r3, r0
 8002234:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	selfTest[5] = MPU9250_readByte(inst, MPU9250_SELF_TEST_Z_GYRO);
 8002238:	2102      	movs	r1, #2
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7fe ff2c 	bl	8001098 <MPU9250_readByte>
 8002240:	4603      	mov	r3, r0
 8002242:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

	for (int i = 0; i < 6; i++)															// Retrieve factory self-test value
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800224c:	e048      	b.n	80022e0 <MPU9250_SelfTest+0x448>
	{																					// from self-test code reads
		factoryTrim[i] = (float)(2620/1<<FS)*(pow(1.01, ((float)selfTest[i] - 1.0)));	// (FT[axis] factory trim calculation)
 800224e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8002252:	f640 223c 	movw	r2, #2620	; 0xa3c
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	ee07 3a90 	vmov	s15, r3
 800225e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002262:	ee17 0a90 	vmov	r0, s15
 8002266:	f7fe f96f 	bl	8000548 <__aeabi_f2d>
 800226a:	4604      	mov	r4, r0
 800226c:	460d      	mov	r5, r1
 800226e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002272:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002276:	4413      	add	r3, r2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002282:	ee17 0a90 	vmov	r0, s15
 8002286:	f7fe f95f 	bl	8000548 <__aeabi_f2d>
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <MPU9250_SelfTest+0x46c>)
 8002290:	f7fd fffa 	bl	8000288 <__aeabi_dsub>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	ec43 2b17 	vmov	d7, r2, r3
 800229c:	eeb0 1a47 	vmov.f32	s2, s14
 80022a0:	eef0 1a67 	vmov.f32	s3, s15
 80022a4:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80022f0 <MPU9250_SelfTest+0x458>
 80022a8:	f011 f8f6 	bl	8013498 <pow>
 80022ac:	ec53 2b10 	vmov	r2, r3, d0
 80022b0:	4620      	mov	r0, r4
 80022b2:	4629      	mov	r1, r5
 80022b4:	f7fe f9a0 	bl	80005f8 <__aeabi_dmul>
 80022b8:	4603      	mov	r3, r0
 80022ba:	460c      	mov	r4, r1
 80022bc:	4618      	mov	r0, r3
 80022be:	4621      	mov	r1, r4
 80022c0:	f7fe fc92 	bl	8000be8 <__aeabi_d2f>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80022d0:	440b      	add	r3, r1
 80022d2:	3b64      	subs	r3, #100	; 0x64
 80022d4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 6; i++)															// Retrieve factory self-test value
 80022d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022da:	3301      	adds	r3, #1
 80022dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	ddb2      	ble.n	800224e <MPU9250_SelfTest+0x3b6>
	}

	for (int i = 0; i < 3; i++)								// Report results as a ratio of (STR - FT)/FT
 80022e8:	2300      	movs	r3, #0
 80022ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022ec:	e09f      	b.n	800242e <MPU9250_SelfTest+0x596>
 80022ee:	bf00      	nop
 80022f0:	c28f5c29 	.word	0xc28f5c29
 80022f4:	3ff028f5 	.word	0x3ff028f5
 80022f8:	43480000 	.word	0x43480000
 80022fc:	08014f38 	.word	0x08014f38
 8002300:	08014f44 	.word	0x08014f44
 8002304:	3ff00000 	.word	0x3ff00000
	{														// the change from Factory Trim of the Self-Test Response
		results[i]   = 	100.0*(aSTAvg[i] - aAvg[i])/factoryTrim[i]   - 100.0;
 8002308:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002310:	4413      	add	r3, r2
 8002312:	3b40      	subs	r3, #64	; 0x40
 8002314:	ed93 7a00 	vldr	s14, [r3]
 8002318:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002320:	4413      	add	r3, r2
 8002322:	3b34      	subs	r3, #52	; 0x34
 8002324:	edd3 7a00 	vldr	s15, [r3]
 8002328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800232c:	ee17 0a90 	vmov	r0, s15
 8002330:	f7fe f90a 	bl	8000548 <__aeabi_f2d>
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	4b69      	ldr	r3, [pc, #420]	; (80024e0 <MPU9250_SelfTest+0x648>)
 800233a:	f7fe f95d 	bl	80005f8 <__aeabi_dmul>
 800233e:	4603      	mov	r3, r0
 8002340:	460c      	mov	r4, r1
 8002342:	4625      	mov	r5, r4
 8002344:	461c      	mov	r4, r3
 8002346:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800234e:	4413      	add	r3, r2
 8002350:	3b64      	subs	r3, #100	; 0x64
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f8f7 	bl	8000548 <__aeabi_f2d>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4620      	mov	r0, r4
 8002360:	4629      	mov	r1, r5
 8002362:	f7fe fa73 	bl	800084c <__aeabi_ddiv>
 8002366:	4603      	mov	r3, r0
 8002368:	460c      	mov	r4, r1
 800236a:	4618      	mov	r0, r3
 800236c:	4621      	mov	r1, r4
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	4b5b      	ldr	r3, [pc, #364]	; (80024e0 <MPU9250_SelfTest+0x648>)
 8002374:	f7fd ff88 	bl	8000288 <__aeabi_dsub>
 8002378:	4603      	mov	r3, r0
 800237a:	460c      	mov	r4, r1
 800237c:	4618      	mov	r0, r3
 800237e:	4621      	mov	r1, r4
 8002380:	f7fe fc32 	bl	8000be8 <__aeabi_d2f>
 8002384:	4602      	mov	r2, r0
 8002386:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800238e:	440b      	add	r3, r1
 8002390:	3b7c      	subs	r3, #124	; 0x7c
 8002392:	601a      	str	r2, [r3, #0]
		results[i+3] =	100.0*(gSTAvg[i] - gAvg[i])/factoryTrim[i+3] - 100.0;
 8002394:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800239c:	4413      	add	r3, r2
 800239e:	3b4c      	subs	r3, #76	; 0x4c
 80023a0:	ed93 7a00 	vldr	s14, [r3]
 80023a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023ac:	4413      	add	r3, r2
 80023ae:	3b28      	subs	r3, #40	; 0x28
 80023b0:	edd3 7a00 	vldr	s15, [r3]
 80023b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b8:	ee17 0a90 	vmov	r0, s15
 80023bc:	f7fe f8c4 	bl	8000548 <__aeabi_f2d>
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	4b46      	ldr	r3, [pc, #280]	; (80024e0 <MPU9250_SelfTest+0x648>)
 80023c6:	f7fe f917 	bl	80005f8 <__aeabi_dmul>
 80023ca:	4603      	mov	r3, r0
 80023cc:	460c      	mov	r4, r1
 80023ce:	4625      	mov	r5, r4
 80023d0:	461c      	mov	r4, r3
 80023d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023d4:	3303      	adds	r3, #3
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023dc:	4413      	add	r3, r2
 80023de:	3b64      	subs	r3, #100	; 0x64
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe f8b0 	bl	8000548 <__aeabi_f2d>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4620      	mov	r0, r4
 80023ee:	4629      	mov	r1, r5
 80023f0:	f7fe fa2c 	bl	800084c <__aeabi_ddiv>
 80023f4:	4603      	mov	r3, r0
 80023f6:	460c      	mov	r4, r1
 80023f8:	4618      	mov	r0, r3
 80023fa:	4621      	mov	r1, r4
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	4b37      	ldr	r3, [pc, #220]	; (80024e0 <MPU9250_SelfTest+0x648>)
 8002402:	f7fd ff41 	bl	8000288 <__aeabi_dsub>
 8002406:	4603      	mov	r3, r0
 8002408:	460c      	mov	r4, r1
 800240a:	4619      	mov	r1, r3
 800240c:	4622      	mov	r2, r4
 800240e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002410:	1cdc      	adds	r4, r3, #3
 8002412:	4608      	mov	r0, r1
 8002414:	4611      	mov	r1, r2
 8002416:	f7fe fbe7 	bl	8000be8 <__aeabi_d2f>
 800241a:	4602      	mov	r2, r0
 800241c:	00a3      	lsls	r3, r4, #2
 800241e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002422:	440b      	add	r3, r1
 8002424:	3b7c      	subs	r3, #124	; 0x7c
 8002426:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++)								// Report results as a ratio of (STR - FT)/FT
 8002428:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800242a:	3301      	adds	r3, #1
 800242c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800242e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002430:	2b02      	cmp	r3, #2
 8002432:	f77f af69 	ble.w	8002308 <MPU9250_SelfTest+0x470>
	}														// To get percent, must multiply by 100

	#if MPU9250_DEBUG
		println("[MPU9250] Self test results:");
 8002436:	482b      	ldr	r0, [pc, #172]	; (80024e4 <MPU9250_SelfTest+0x64c>)
 8002438:	f7fe fdb0 	bl	8000f9c <println>
	#endif
	bool passed = true;
 800243c:	2301      	movs	r3, #1
 800243e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	for (int i = 0; i < 6; i++)								// Check if results obey +/-14% bound
 8002442:	2300      	movs	r3, #0
 8002444:	677b      	str	r3, [r7, #116]	; 0x74
 8002446:	e042      	b.n	80024ce <MPU9250_SelfTest+0x636>
	{
		passed &= (results[i] > -14.0) & (results[i] < 14.0);
 8002448:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800244c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800244e:	0092      	lsls	r2, r2, #2
 8002450:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002454:	440a      	add	r2, r1
 8002456:	3a7c      	subs	r2, #124	; 0x7c
 8002458:	edd2 7a00 	vldr	s15, [r2]
 800245c:	eeba 7a0c 	vmov.f32	s14, #172	; 0xc1600000 -14.0
 8002460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	bfcc      	ite	gt
 800246a:	2201      	movgt	r2, #1
 800246c:	2200      	movle	r2, #0
 800246e:	b2d1      	uxtb	r1, r2
 8002470:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002472:	0092      	lsls	r2, r2, #2
 8002474:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002478:	4402      	add	r2, r0
 800247a:	3a7c      	subs	r2, #124	; 0x7c
 800247c:	edd2 7a00 	vldr	s15, [r2]
 8002480:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8002484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248c:	bf4c      	ite	mi
 800248e:	2201      	movmi	r2, #1
 8002490:	2200      	movpl	r2, #0
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	400a      	ands	r2, r1
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	bf14      	ite	ne
 800249e:	2301      	movne	r3, #1
 80024a0:	2300      	moveq	r3, #0
 80024a2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		#if MPU9250_DEBUG
			println("%f", results[i]);
 80024a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024ae:	4413      	add	r3, r2
 80024b0:	3b7c      	subs	r3, #124	; 0x7c
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe f847 	bl	8000548 <__aeabi_f2d>
 80024ba:	4603      	mov	r3, r0
 80024bc:	460c      	mov	r4, r1
 80024be:	461a      	mov	r2, r3
 80024c0:	4623      	mov	r3, r4
 80024c2:	4809      	ldr	r0, [pc, #36]	; (80024e8 <MPU9250_SelfTest+0x650>)
 80024c4:	f7fe fd6a 	bl	8000f9c <println>
	for (int i = 0; i < 6; i++)								// Check if results obey +/-14% bound
 80024c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ca:	3301      	adds	r3, #1
 80024cc:	677b      	str	r3, [r7, #116]	; 0x74
 80024ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	ddb9      	ble.n	8002448 <MPU9250_SelfTest+0x5b0>
		#endif
	}
	return passed;
 80024d4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3788      	adds	r7, #136	; 0x88
 80024dc:	46bd      	mov	sp, r7
 80024de:	bdb0      	pop	{r4, r5, r7, pc}
 80024e0:	40590000 	.word	0x40590000
 80024e4:	08014f50 	.word	0x08014f50
 80024e8:	08014f70 	.word	0x08014f70

080024ec <AK8963_calibrate>:

void AK8963_calibrate(MPU9250* inst)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08e      	sub	sp, #56	; 0x38
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	uint16_t i = 0, j = 0, sample_count = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80024f8:	2300      	movs	r3, #0
 80024fa:	86bb      	strh	r3, [r7, #52]	; 0x34
 80024fc:	2300      	movs	r3, #0
 80024fe:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8002500:	4a80      	ldr	r2, [pc, #512]	; (8002704 <AK8963_calibrate+0x218>)
 8002502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002506:	e892 0003 	ldmia.w	r2, {r0, r1}
 800250a:	6018      	str	r0, [r3, #0]
 800250c:	3304      	adds	r3, #4
 800250e:	8019      	strh	r1, [r3, #0]
 8002510:	4a7d      	ldr	r2, [pc, #500]	; (8002708 <AK8963_calibrate+0x21c>)
 8002512:	f107 031c 	add.w	r3, r7, #28
 8002516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800251a:	6018      	str	r0, [r3, #0]
 800251c:	3304      	adds	r3, #4
 800251e:	8019      	strh	r1, [r3, #0]
 8002520:	2300      	movs	r3, #0
 8002522:	82bb      	strh	r3, [r7, #20]
 8002524:	2300      	movs	r3, #0
 8002526:	82fb      	strh	r3, [r7, #22]
 8002528:	2300      	movs	r3, #0
 800252a:	833b      	strh	r3, [r7, #24]

	float temp_mRes = inst->mRes;				// Temporarily store set calibation values
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
	float temp_magCalibration[3] = {inst->magCalibration[0], inst->magCalibration[1], inst->magCalibration[2]};
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002542:	613b      	str	r3, [r7, #16]
	inst->mRes = 1;								// Calibration values (must?) not affect readings
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800254a:	649a      	str	r2, [r3, #72]	; 0x48
	for (i = 0; i < 3; i++)
 800254c:	2300      	movs	r3, #0
 800254e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002550:	e013      	b.n	800257a <AK8963_calibrate+0x8e>
	{
		inst->magBias[i] = 0.0f;
 8002552:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	3312      	adds	r3, #18
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	3304      	adds	r3, #4
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
		inst->magCalibration[i] = 1.0f;
 8002564:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	331c      	adds	r3, #28
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002572:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8002574:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002576:	3301      	adds	r3, #1
 8002578:	86fb      	strh	r3, [r7, #54]	; 0x36
 800257a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800257c:	2b02      	cmp	r3, #2
 800257e:	d9e8      	bls.n	8002552 <AK8963_calibrate+0x66>
	}

	delay(4000);								// [!!!] <- WHAT??, must change that
 8002580:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002584:	f001 fa06 	bl	8003994 <HAL_Delay>

	sample_count = 64;
 8002588:	2340      	movs	r3, #64	; 0x40
 800258a:	867b      	strh	r3, [r7, #50]	; 0x32
	for(i = 0; i < sample_count; i++)
 800258c:	2300      	movs	r3, #0
 800258e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002590:	e06a      	b.n	8002668 <AK8963_calibrate+0x17c>
	{
		MPU9250_readMagData(inst);				// Read the mag data
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe ff47 	bl	8001426 <MPU9250_readMagData>
		mag_temp[0] = (int16_t)inst->mx;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800259e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025a2:	ee17 3a90 	vmov	r3, s15
 80025a6:	b21b      	sxth	r3, r3
 80025a8:	82bb      	strh	r3, [r7, #20]
		mag_temp[1] = (int16_t)inst->my;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80025b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025b4:	ee17 3a90 	vmov	r3, s15
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	82fb      	strh	r3, [r7, #22]
		mag_temp[2] = (int16_t)inst->mz;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80025c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025c6:	ee17 3a90 	vmov	r3, s15
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	833b      	strh	r3, [r7, #24]
		for (j = 0; j < 3; j++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80025d2:	e040      	b.n	8002656 <AK8963_calibrate+0x16a>
		{
			if(mag_temp[j] > mag_max[j]) mag_max[j] = mag_temp[j];
 80025d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025dc:	4413      	add	r3, r2
 80025de:	f933 2c24 	ldrsh.w	r2, [r3, #-36]
 80025e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025ea:	440b      	add	r3, r1
 80025ec:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	dd0e      	ble.n	8002612 <AK8963_calibrate+0x126>
 80025f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80025f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025fe:	440b      	add	r3, r1
 8002600:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 8002604:	0053      	lsls	r3, r2, #1
 8002606:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800260a:	4413      	add	r3, r2
 800260c:	460a      	mov	r2, r1
 800260e:	f823 2c14 	strh.w	r2, [r3, #-20]
			if(mag_temp[j] < mag_min[j]) mag_min[j] = mag_temp[j];
 8002612:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800261a:	4413      	add	r3, r2
 800261c:	f933 2c24 	ldrsh.w	r2, [r3, #-36]
 8002620:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002628:	440b      	add	r3, r1
 800262a:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 800262e:	429a      	cmp	r2, r3
 8002630:	da0e      	bge.n	8002650 <AK8963_calibrate+0x164>
 8002632:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002634:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800263c:	440b      	add	r3, r1
 800263e:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 8002642:	0053      	lsls	r3, r2, #1
 8002644:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002648:	4413      	add	r3, r2
 800264a:	460a      	mov	r2, r1
 800264c:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for (j = 0; j < 3; j++)
 8002650:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002652:	3301      	adds	r3, #1
 8002654:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002656:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002658:	2b02      	cmp	r3, #2
 800265a:	d9bb      	bls.n	80025d4 <AK8963_calibrate+0xe8>
		}
		delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms [!!!] <- this to change also
 800265c:	2087      	movs	r0, #135	; 0x87
 800265e:	f001 f999 	bl	8003994 <HAL_Delay>
	for(i = 0; i < sample_count; i++)
 8002662:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002664:	3301      	adds	r3, #1
 8002666:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002668:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800266a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800266c:	429a      	cmp	r2, r3
 800266e:	d390      	bcc.n	8002592 <AK8963_calibrate+0xa6>
	}

	inst->mRes = temp_mRes;						// Retrieve stored calibation values
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002674:	649a      	str	r2, [r3, #72]	; 0x48

	for (i = 0; i < 3; i++)						// get average axis mag bias in counts
 8002676:	2300      	movs	r3, #0
 8002678:	86fb      	strh	r3, [r7, #54]	; 0x36
 800267a:	e03c      	b.n	80026f6 <AK8963_calibrate+0x20a>
	{											// save mag biases in G for main program
		inst->magCalibration[i] = temp_magCalibration[i]; // Retrieve stored calibration values
 800267c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800267e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002680:	0092      	lsls	r2, r2, #2
 8002682:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002686:	440a      	add	r2, r1
 8002688:	3a30      	subs	r2, #48	; 0x30
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	331c      	adds	r3, #28
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	601a      	str	r2, [r3, #0]
		inst->magBias[i] = (float)((mag_max[i] + mag_min[i])/2) * inst->mRes * inst->magCalibration[i];
 8002696:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800269e:	4413      	add	r3, r2
 80026a0:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80026a4:	461a      	mov	r2, r3
 80026a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80026ae:	440b      	add	r3, r1
 80026b0:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80026b4:	4413      	add	r3, r2
 80026b6:	0fda      	lsrs	r2, r3, #31
 80026b8:	4413      	add	r3, r2
 80026ba:	105b      	asrs	r3, r3, #1
 80026bc:	ee07 3a90 	vmov	s15, r3
 80026c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80026ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	331c      	adds	r3, #28
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	edd3 7a00 	vldr	s15, [r3]
 80026dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	3312      	adds	r3, #18
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	3304      	adds	r3, #4
 80026ec:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < 3; i++)						// get average axis mag bias in counts
 80026f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026f2:	3301      	adds	r3, #1
 80026f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80026f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d9bf      	bls.n	800267c <AK8963_calibrate+0x190>
	}
}
 80026fc:	bf00      	nop
 80026fe:	3738      	adds	r7, #56	; 0x38
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	08014f74 	.word	0x08014f74
 8002708:	08014f7c 	.word	0x08014f7c
 800270c:	00000000 	.word	0x00000000

08002710 <MPU9250_updateEuler>:

// #################### Algotithms ####################


void MPU9250_updateEuler(MPU9250* inst)		// Convert quaternions to Euler angles
{
 8002710:	b5b0      	push	{r4, r5, r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
	inst->yaw   = atan2(2.0f * (inst->q[1] * inst->q[2] + inst->q[0] * inst->q[3]),
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8002724:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8002734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002740:	ee17 0a90 	vmov	r0, s15
 8002744:	f7fd ff00 	bl	8000548 <__aeabi_f2d>
 8002748:	4604      	mov	r4, r0
 800274a:	460d      	mov	r5, r1
						inst->q[0] * inst->q[0] + inst->q[1] * inst->q[1] - inst->q[2] * inst->q[2] - inst->q[3] * inst->q[3]);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8002758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800276c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	edd3 6a29 	vldr	s13, [r3, #164]	; 0xa4
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800277c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002780:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	edd3 6a2a 	vldr	s13, [r3, #168]	; 0xa8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8002790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002794:	ee77 7a67 	vsub.f32	s15, s14, s15
	inst->yaw   = atan2(2.0f * (inst->q[1] * inst->q[2] + inst->q[0] * inst->q[3]),
 8002798:	ee17 0a90 	vmov	r0, s15
 800279c:	f7fd fed4 	bl	8000548 <__aeabi_f2d>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	ec43 2b11 	vmov	d1, r2, r3
 80027a8:	ec45 4b10 	vmov	d0, r4, r5
 80027ac:	f010 fe72 	bl	8013494 <atan2>
 80027b0:	ec54 3b10 	vmov	r3, r4, d0
 80027b4:	4618      	mov	r0, r3
 80027b6:	4621      	mov	r1, r4
 80027b8:	f7fe fa16 	bl	8000be8 <__aeabi_d2f>
 80027bc:	4602      	mov	r2, r0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	60da      	str	r2, [r3, #12]
	inst->pitch = -asin(2.0f * (inst->q[1] * inst->q[3] - inst->q[0] * inst->q[2]));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 80027ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 80027de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80027ea:	ee17 0a90 	vmov	r0, s15
 80027ee:	f7fd feab 	bl	8000548 <__aeabi_f2d>
 80027f2:	4603      	mov	r3, r0
 80027f4:	460c      	mov	r4, r1
 80027f6:	ec44 3b10 	vmov	d0, r3, r4
 80027fa:	f010 fdf3 	bl	80133e4 <asin>
 80027fe:	ec54 3b10 	vmov	r3, r4, d0
 8002802:	4618      	mov	r0, r3
 8002804:	4621      	mov	r1, r4
 8002806:	f7fe f9ef 	bl	8000be8 <__aeabi_d2f>
 800280a:	4603      	mov	r3, r0
 800280c:	ee07 3a90 	vmov	s15, r3
 8002810:	eef1 7a67 	vneg.f32	s15, s15
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->roll  = atan2(2.0f * (inst->q[0] * inst->q[1] + inst->q[2] * inst->q[3]),
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002826:	ee27 7a27 	vmul.f32	s14, s14, s15
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	edd3 6a29 	vldr	s13, [r3, #164]	; 0xa4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8002836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800283a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002842:	ee17 0a90 	vmov	r0, s15
 8002846:	f7fd fe7f 	bl	8000548 <__aeabi_f2d>
 800284a:	4604      	mov	r4, r0
 800284c:	460d      	mov	r5, r1
						inst->q[0] * inst->q[0] - inst->q[1] * inst->q[1] - inst->q[2] * inst->q[2] + inst->q[3] * inst->q[3]);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800285a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800286a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800286e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	edd3 6a29 	vldr	s13, [r3, #164]	; 0xa4
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 800287e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002882:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	edd3 6a2a 	vldr	s13, [r3, #168]	; 0xa8
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8002892:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002896:	ee77 7a27 	vadd.f32	s15, s14, s15
	inst->roll  = atan2(2.0f * (inst->q[0] * inst->q[1] + inst->q[2] * inst->q[3]),
 800289a:	ee17 0a90 	vmov	r0, s15
 800289e:	f7fd fe53 	bl	8000548 <__aeabi_f2d>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	ec43 2b11 	vmov	d1, r2, r3
 80028aa:	ec45 4b10 	vmov	d0, r4, r5
 80028ae:	f010 fdf1 	bl	8013494 <atan2>
 80028b2:	ec54 3b10 	vmov	r3, r4, d0
 80028b6:	4618      	mov	r0, r3
 80028b8:	4621      	mov	r1, r4
 80028ba:	f7fe f995 	bl	8000be8 <__aeabi_d2f>
 80028be:	4602      	mov	r2, r0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	615a      	str	r2, [r3, #20]
	inst->yaw	*= 180.0f / M_PI;			// Convert to degrees
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fd fe3d 	bl	8000548 <__aeabi_f2d>
 80028ce:	a349      	add	r3, pc, #292	; (adr r3, 80029f4 <MPU9250_updateEuler+0x2e4>)
 80028d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d4:	f7fd fe90 	bl	80005f8 <__aeabi_dmul>
 80028d8:	4603      	mov	r3, r0
 80028da:	460c      	mov	r4, r1
 80028dc:	4618      	mov	r0, r3
 80028de:	4621      	mov	r1, r4
 80028e0:	f7fe f982 	bl	8000be8 <__aeabi_d2f>
 80028e4:	4602      	mov	r2, r0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	60da      	str	r2, [r3, #12]
	inst->pitch *= 180.0f / M_PI;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd fe2a 	bl	8000548 <__aeabi_f2d>
 80028f4:	a33f      	add	r3, pc, #252	; (adr r3, 80029f4 <MPU9250_updateEuler+0x2e4>)
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	f7fd fe7d 	bl	80005f8 <__aeabi_dmul>
 80028fe:	4603      	mov	r3, r0
 8002900:	460c      	mov	r4, r1
 8002902:	4618      	mov	r0, r3
 8002904:	4621      	mov	r1, r4
 8002906:	f7fe f96f 	bl	8000be8 <__aeabi_d2f>
 800290a:	4602      	mov	r2, r0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	611a      	str	r2, [r3, #16]
	inst->roll  *= 180.0f / M_PI;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	4618      	mov	r0, r3
 8002916:	f7fd fe17 	bl	8000548 <__aeabi_f2d>
 800291a:	a336      	add	r3, pc, #216	; (adr r3, 80029f4 <MPU9250_updateEuler+0x2e4>)
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	f7fd fe6a 	bl	80005f8 <__aeabi_dmul>
 8002924:	4603      	mov	r3, r0
 8002926:	460c      	mov	r4, r1
 8002928:	4618      	mov	r0, r3
 800292a:	4621      	mov	r1, r4
 800292c:	f7fe f95c 	bl	8000be8 <__aeabi_d2f>
 8002930:	4602      	mov	r2, r0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	615a      	str	r2, [r3, #20]
	inst->yaw 	+= inst->eulerOffsets[0];	// Add offsets
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	ed93 7a03 	vldr	s14, [r3, #12]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	edc3 7a03 	vstr	s15, [r3, #12]
	inst->pitch	+= inst->eulerOffsets[1];
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	edc3 7a04 	vstr	s15, [r3, #16]
	inst->roll 	+= inst->eulerOffsets[2];
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	ed93 7a05 	vldr	s14, [r3, #20]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800296e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	edc3 7a05 	vstr	s15, [r3, #20]
	if(inst->yaw < 0)	inst->yaw	+= 360.0f;	// Fix overflow
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	edd3 7a03 	vldr	s15, [r3, #12]
 800297e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002986:	d509      	bpl.n	800299c <MPU9250_updateEuler+0x28c>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	edd3 7a03 	vldr	s15, [r3, #12]
 800298e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80029f0 <MPU9250_updateEuler+0x2e0>
 8002992:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	edc3 7a03 	vstr	s15, [r3, #12]
	if(inst->pitch < 0)	inst->pitch	+= 360.0f;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	edd3 7a04 	vldr	s15, [r3, #16]
 80029a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029aa:	d509      	bpl.n	80029c0 <MPU9250_updateEuler+0x2b0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80029b2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80029f0 <MPU9250_updateEuler+0x2e0>
 80029b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	edc3 7a04 	vstr	s15, [r3, #16]
	if(inst->roll < 0)	inst->roll	+= 360.0f;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80029c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ce:	d400      	bmi.n	80029d2 <MPU9250_updateEuler+0x2c2>
	roll  *= 180.0f / PI;
	lin_ax = ax + a31;
	lin_ay = ay + a32;
	lin_az = az - a33;
	*/
}
 80029d0:	e009      	b.n	80029e6 <MPU9250_updateEuler+0x2d6>
	if(inst->roll < 0)	inst->roll	+= 360.0f;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80029d8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80029f0 <MPU9250_updateEuler+0x2e0>
 80029dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bdb0      	pop	{r4, r5, r7, pc}
 80029ee:	bf00      	nop
 80029f0:	43b40000 	.word	0x43b40000
 80029f4:	1a63c1f8 	.word	0x1a63c1f8
 80029f8:	404ca5dc 	.word	0x404ca5dc
 80029fc:	00000000 	.word	0x00000000

08002a00 <MadgwickQuaternionUpdate>:

void MadgwickQuaternionUpdate(MPU9250* inst)
{
 8002a00:	b5b0      	push	{r4, r5, r7, lr}
 8002a02:	b0b2      	sub	sp, #200	; 0xc8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	// Transform matrix for proper axis
	float ax = inst->ax, 			 ay = -(inst->ay), 				az = -(inst->az);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a16:	eef1 7a67 	vneg.f32	s15, s15
 8002a1a:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a24:	eef1 7a67 	vneg.f32	s15, s15
 8002a28:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	float gx = inst->gx*M_PI/180.0f, gy = -(inst->gy)*M_PI/180.0f, 	gz = -(inst->gz)*M_PI/180.0f;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fd89 	bl	8000548 <__aeabi_f2d>
 8002a36:	a3b0      	add	r3, pc, #704	; (adr r3, 8002cf8 <MadgwickQuaternionUpdate+0x2f8>)
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	f7fd fddc 	bl	80005f8 <__aeabi_dmul>
 8002a40:	4603      	mov	r3, r0
 8002a42:	460c      	mov	r4, r1
 8002a44:	4618      	mov	r0, r3
 8002a46:	4621      	mov	r1, r4
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	4bac      	ldr	r3, [pc, #688]	; (8002d00 <MadgwickQuaternionUpdate+0x300>)
 8002a4e:	f7fd fefd 	bl	800084c <__aeabi_ddiv>
 8002a52:	4603      	mov	r3, r0
 8002a54:	460c      	mov	r4, r1
 8002a56:	4618      	mov	r0, r3
 8002a58:	4621      	mov	r1, r4
 8002a5a:	f7fe f8c5 	bl	8000be8 <__aeabi_d2f>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002a6a:	eef1 7a67 	vneg.f32	s15, s15
 8002a6e:	ee17 3a90 	vmov	r3, s15
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd fd68 	bl	8000548 <__aeabi_f2d>
 8002a78:	a39f      	add	r3, pc, #636	; (adr r3, 8002cf8 <MadgwickQuaternionUpdate+0x2f8>)
 8002a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7e:	f7fd fdbb 	bl	80005f8 <__aeabi_dmul>
 8002a82:	4603      	mov	r3, r0
 8002a84:	460c      	mov	r4, r1
 8002a86:	4618      	mov	r0, r3
 8002a88:	4621      	mov	r1, r4
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	4b9c      	ldr	r3, [pc, #624]	; (8002d00 <MadgwickQuaternionUpdate+0x300>)
 8002a90:	f7fd fedc 	bl	800084c <__aeabi_ddiv>
 8002a94:	4603      	mov	r3, r0
 8002a96:	460c      	mov	r4, r1
 8002a98:	4618      	mov	r0, r3
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	f7fe f8a4 	bl	8000be8 <__aeabi_d2f>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002aac:	eef1 7a67 	vneg.f32	s15, s15
 8002ab0:	ee17 3a90 	vmov	r3, s15
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fd47 	bl	8000548 <__aeabi_f2d>
 8002aba:	a38f      	add	r3, pc, #572	; (adr r3, 8002cf8 <MadgwickQuaternionUpdate+0x2f8>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f7fd fd9a 	bl	80005f8 <__aeabi_dmul>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	460c      	mov	r4, r1
 8002ac8:	4618      	mov	r0, r3
 8002aca:	4621      	mov	r1, r4
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	4b8b      	ldr	r3, [pc, #556]	; (8002d00 <MadgwickQuaternionUpdate+0x300>)
 8002ad2:	f7fd febb 	bl	800084c <__aeabi_ddiv>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	460c      	mov	r4, r1
 8002ada:	4618      	mov	r0, r3
 8002adc:	4621      	mov	r1, r4
 8002ade:	f7fe f883 	bl	8000be8 <__aeabi_d2f>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float mx = inst->my, 			 my = -(inst->mx),				mz = inst->mz;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002af6:	eef1 7a67 	vneg.f32	s15, s15
 8002afa:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	float q1 = inst->q[0], q2 = inst->q[1], q3 = inst->q[2], q4 = inst->q[3];   // short name local variable for readability
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002b16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float _2q1my;
	float _2q1mz;
	float _2q2mx;
	float _4bx;
	float _4bz;
	float _2q1 = 2.0f * q1;
 8002b2e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002b32:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b36:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	float _2q2 = 2.0f * q2;
 8002b3a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002b3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b42:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float _2q3 = 2.0f * q3;
 8002b46:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002b4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b4e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float _2q4 = 2.0f * q4;
 8002b52:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002b56:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b5a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float _2q1q3 = 2.0f * q1 * q3;
 8002b5e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002b62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b66:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b6e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float _2q3q4 = 2.0f * q3 * q4;
 8002b72:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002b76:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b7a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b82:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float q1q1 = q1 * q1;
 8002b86:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8002b8a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b92:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	float q1q2 = q1 * q2;
 8002b96:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8002b9a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float q1q3 = q1 * q3;
 8002ba6:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8002baa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float q1q4 = q1 * q4;
 8002bb6:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8002bba:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float q2q2 = q2 * q2;
 8002bc6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002bca:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q2q3 = q2 * q3;
 8002bd6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002bda:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q2q4 = q2 * q4;
 8002be6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002bea:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q3q3 = q3 * q3;
 8002bf6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002bfa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c02:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q3q4 = q3 * q4;
 8002c06:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002c0a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c12:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q4q4 = q4 * q4;
 8002c16:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002c1a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c22:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Normalise accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
 8002c26:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002c2a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002c2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c32:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8002c36:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002c3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c42:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8002c46:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c52:	eeb0 0a67 	vmov.f32	s0, s15
 8002c56:	f010 fd8f 	bl	8013778 <sqrtf>
 8002c5a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	if (norm == 0.0f) return; // handle NaN
 8002c5e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002c62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6a:	f000 8614 	beq.w	8003896 <MadgwickQuaternionUpdate+0xe96>
	norm = 1.0f/norm;
 8002c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c72:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c7a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	ax *= norm;
 8002c7e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8002c82:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c8a:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	ay *= norm;
 8002c8e:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8002c92:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c9a:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	az *= norm;
 8002c9e:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8002ca2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002caa:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc

	// Normalise magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
 8002cae:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002cb2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002cb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cba:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8002cbe:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002cc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cca:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8002cce:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cda:	eeb0 0a67 	vmov.f32	s0, s15
 8002cde:	f010 fd4b 	bl	8013778 <sqrtf>
 8002ce2:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	if (norm == 0.0f) return; // handle NaN
 8002ce6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002cea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf2:	f000 85d2 	beq.w	800389a <MadgwickQuaternionUpdate+0xe9a>
 8002cf6:	e005      	b.n	8002d04 <MadgwickQuaternionUpdate+0x304>
 8002cf8:	54442d18 	.word	0x54442d18
 8002cfc:	400921fb 	.word	0x400921fb
 8002d00:	40668000 	.word	0x40668000
	norm = 1.0f/norm;
 8002d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d08:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d10:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	mx *= norm;
 8002d14:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002d18:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d20:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	my *= norm;
 8002d24:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002d28:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d30:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	mz *= norm;
 8002d34:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002d38:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d40:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

	// Reference direction of Earth's magnetic field
	_2q1mx = 2.0f * q1 * mx;
 8002d44:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002d48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d4c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d54:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_2q1my = 2.0f * q1 * my;
 8002d58:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002d5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d60:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d68:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	_2q1mz = 2.0f * q1 * mz;
 8002d6c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002d70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d74:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d7c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	_2q2mx = 2.0f * q2 * mx;
 8002d80:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002d84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d88:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d90:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8002d94:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002d98:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002da0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002da4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002da8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002db0:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002db4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002db8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dc0:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8002dc4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002dc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dd0:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8002dd4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002dd8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ddc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002de4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002de8:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8002dec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002df0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002df4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002df8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e00:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8002e04:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002e08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e10:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8002e14:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e20:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8002e24:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002e28:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002e2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e30:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8002e34:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e40:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002e44:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e50:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002e54:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002e58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e60:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8002e64:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002e68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e70:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8002e74:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e80:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8002e84:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002e88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e8c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e98:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8002e9c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	_2bx = sqrtf(hx * hx + hy * hy);
 8002eac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002eb0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002eb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eb8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002ebc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ecc:	f010 fc54 	bl	8013778 <sqrtf>
 8002ed0:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8002ed4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002ed8:	eeb1 7a67 	vneg.f32	s14, s15
 8002edc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002ee0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ee4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002ee8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002eec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ef0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ef4:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8002ef8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f04:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002f08:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002f0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f14:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8002f18:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f24:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8002f28:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002f2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f30:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f3c:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8002f40:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f4c:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8002f50:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	_4bx = 2.0f * _2bx;
 8002f60:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f68:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	_4bz = 2.0f * _2bz;
 8002f6c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002f70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f74:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Gradient decent algorithm corrective step
	s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8002f78:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002f7c:	eeb1 7a67 	vneg.f32	s14, s15
 8002f80:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002f84:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002f88:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002f8c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002f90:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002f94:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f9c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002fa0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002fa4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002fa8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002fac:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002fb0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002fb4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002fb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fc0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002fc4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002fc8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fcc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002fd0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002fd4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002fd8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002fdc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002fe0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002fe4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002fe8:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8002fec:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002ff0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002ff4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002ff8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002ffc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003000:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003004:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800300c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003010:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003014:	eef1 6a67 	vneg.f32	s13, s15
 8003018:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800301c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003020:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8003024:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003028:	ee66 7a27 	vmul.f32	s15, s12, s15
 800302c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003030:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8003034:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003038:	ee36 6a67 	vsub.f32	s12, s12, s15
 800303c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003040:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003044:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8003048:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800304c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003050:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003054:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003058:	ee36 6a27 	vadd.f32	s12, s12, s15
 800305c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003060:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800306c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8003070:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003074:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003078:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800307c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003080:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003084:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003088:	ee26 6a27 	vmul.f32	s12, s12, s15
 800308c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8003090:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003094:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003098:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800309c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80030a0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80030a4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80030a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80030ac:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80030b0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80030b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80030c0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80030c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80030c8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80030cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030d0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80030d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030d8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80030dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030e0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80030e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80030e8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80030ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80030f0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80030f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80030f8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80030fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003100:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003104:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003108:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800310c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003110:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003114:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003118:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800311c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003120:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003124:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003128:	ee36 6a67 	vsub.f32	s12, s12, s15
 800312c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8003130:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003138:	ee37 7a67 	vsub.f32	s14, s14, s15
 800313c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003140:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003144:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003148:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800314c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003150:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003154:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003158:	ee36 6a67 	vsub.f32	s12, s12, s15
 800315c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003160:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003164:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8003168:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800316c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003170:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003174:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003178:	ee36 6a27 	vadd.f32	s12, s12, s15
 800317c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003180:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003188:	ee37 7a27 	vadd.f32	s14, s14, s15
 800318c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8003190:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003194:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003198:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 800319c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80031a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80031a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80031a8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80031ac:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80031b0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80031b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80031b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80031bc:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80031c0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80031c4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80031c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80031cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80031d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80031d4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80031d8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80031dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031e4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80031e8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80031ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031f0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80031f4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80031f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80031fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003200:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8003204:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003208:	ee36 6a27 	vadd.f32	s12, s12, s15
 800320c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003210:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003214:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8003218:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800321c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003220:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003224:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003228:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800322c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003230:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003234:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003238:	ee76 7a67 	vsub.f32	s15, s12, s15
 800323c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003244:	edc7 7a08 	vstr	s15, [r7, #32]
	s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8003248:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800324c:	eeb1 7a67 	vneg.f32	s14, s15
 8003250:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003254:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003258:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800325c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003260:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003264:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800326c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003270:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003274:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003278:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800327c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8003280:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003284:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800328c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003290:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003294:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8003298:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800329c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80032a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032a4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80032a8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80032ac:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80032b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032b4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80032b8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80032bc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80032c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80032cc:	eef1 6a67 	vneg.f32	s13, s15
 80032d0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80032d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032d8:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80032dc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80032e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80032e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80032e8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80032ec:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80032f0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80032f4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80032f8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80032fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003300:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003304:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8003308:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800330c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003310:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003314:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003318:	ee36 6a27 	vadd.f32	s12, s12, s15
 800331c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003320:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003328:	ee37 7a27 	vadd.f32	s14, s14, s15
 800332c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8003330:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003334:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003338:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 800333c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003340:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003344:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003348:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800334c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003350:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003354:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003358:	ee26 6a27 	vmul.f32	s12, s12, s15
 800335c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8003360:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003364:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003368:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800336c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003370:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003374:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003378:	ee76 7a67 	vsub.f32	s15, s12, s15
 800337c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003380:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003384:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8003388:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800338c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003390:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8003394:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003398:	ee66 7a27 	vmul.f32	s15, s12, s15
 800339c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80033a0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80033a4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80033a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80033ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80033b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033b4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80033b8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80033bc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80033c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80033c4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80033c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80033cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80033d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80033d4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80033d8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80033dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e4:	edc7 7a07 	vstr	s15, [r7, #28]
	s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80033e8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80033ec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80033f0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80033f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033f8:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80033fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003400:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003404:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003408:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800340c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003410:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003414:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003418:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800341c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003420:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003424:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003428:	ee37 7a27 	vadd.f32	s14, s14, s15
 800342c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003430:	eef1 6a67 	vneg.f32	s13, s15
 8003434:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003438:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800343c:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8003440:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003444:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003448:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800344c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003450:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003454:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003458:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800345c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003460:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003464:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003468:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800346c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003470:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003474:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003478:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800347c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003480:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003484:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003488:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800348c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003490:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003494:	eef1 6a67 	vneg.f32	s13, s15
 8003498:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800349c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034a0:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80034a4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80034a8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80034ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80034b0:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80034b4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80034b8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80034bc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80034c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034c4:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80034c8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80034cc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80034d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80034d4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80034d8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80034dc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80034e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80034e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034ec:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80034f0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80034f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034f8:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80034fc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003500:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003504:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003508:	ee26 6a27 	vmul.f32	s12, s12, s15
 800350c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8003510:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003514:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003518:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800351c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003520:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003524:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003528:	ee36 6a27 	vadd.f32	s12, s12, s15
 800352c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003530:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800353c:	edc7 7a06 	vstr	s15, [r7, #24]
	norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 8003540:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003544:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003548:	ee27 7a27 	vmul.f32	s14, s14, s15
 800354c:	edd7 6a08 	vldr	s13, [r7, #32]
 8003550:	edd7 7a08 	vldr	s15, [r7, #32]
 8003554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800355c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003560:	edd7 7a07 	vldr	s15, [r7, #28]
 8003564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003568:	ee37 7a27 	vadd.f32	s14, s14, s15
 800356c:	edd7 6a06 	vldr	s13, [r7, #24]
 8003570:	edd7 7a06 	vldr	s15, [r7, #24]
 8003574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800357c:	eeb0 0a67 	vmov.f32	s0, s15
 8003580:	f010 f8fa 	bl	8013778 <sqrtf>
 8003584:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	norm = 1.0f/norm;
 8003588:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800358c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003594:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	s1 *= norm;
 8003598:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800359c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80035a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	s2 *= norm;
 80035a8:	ed97 7a08 	vldr	s14, [r7, #32]
 80035ac:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80035b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b4:	edc7 7a08 	vstr	s15, [r7, #32]
	s3 *= norm;
 80035b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80035bc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80035c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c4:	edc7 7a07 	vstr	s15, [r7, #28]
	s4 *= norm;
 80035c8:	ed97 7a06 	vldr	s14, [r7, #24]
 80035cc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80035d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d4:	edc7 7a06 	vstr	s15, [r7, #24]

	// Compute rate of change of quaternion
	qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - MPU9250_ALG_BETA * s1;
 80035d8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80035dc:	eeb1 7a67 	vneg.f32	s14, s15
 80035e0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80035e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035e8:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80035ec:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80035f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035f8:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80035fc:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003608:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800360c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003610:	ee17 0a90 	vmov	r0, s15
 8003614:	f7fc ff98 	bl	8000548 <__aeabi_f2d>
 8003618:	4604      	mov	r4, r0
 800361a:	460d      	mov	r5, r1
 800361c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800361e:	f7fc ff93 	bl	8000548 <__aeabi_f2d>
 8003622:	a3a1      	add	r3, pc, #644	; (adr r3, 80038a8 <MadgwickQuaternionUpdate+0xea8>)
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	f7fc ffe6 	bl	80005f8 <__aeabi_dmul>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4620      	mov	r0, r4
 8003632:	4629      	mov	r1, r5
 8003634:	f7fc fe28 	bl	8000288 <__aeabi_dsub>
 8003638:	4603      	mov	r3, r0
 800363a:	460c      	mov	r4, r1
 800363c:	4618      	mov	r0, r3
 800363e:	4621      	mov	r1, r4
 8003640:	f7fd fad2 	bl	8000be8 <__aeabi_d2f>
 8003644:	4603      	mov	r3, r0
 8003646:	617b      	str	r3, [r7, #20]
	qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - MPU9250_ALG_BETA * s2;
 8003648:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800364c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003654:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8003658:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800365c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003660:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003664:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8003668:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800366c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003670:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003674:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800367c:	ee17 0a90 	vmov	r0, s15
 8003680:	f7fc ff62 	bl	8000548 <__aeabi_f2d>
 8003684:	4604      	mov	r4, r0
 8003686:	460d      	mov	r5, r1
 8003688:	6a38      	ldr	r0, [r7, #32]
 800368a:	f7fc ff5d 	bl	8000548 <__aeabi_f2d>
 800368e:	a386      	add	r3, pc, #536	; (adr r3, 80038a8 <MadgwickQuaternionUpdate+0xea8>)
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f7fc ffb0 	bl	80005f8 <__aeabi_dmul>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4620      	mov	r0, r4
 800369e:	4629      	mov	r1, r5
 80036a0:	f7fc fdf2 	bl	8000288 <__aeabi_dsub>
 80036a4:	4603      	mov	r3, r0
 80036a6:	460c      	mov	r4, r1
 80036a8:	4618      	mov	r0, r3
 80036aa:	4621      	mov	r1, r4
 80036ac:	f7fd fa9c 	bl	8000be8 <__aeabi_d2f>
 80036b0:	4603      	mov	r3, r0
 80036b2:	613b      	str	r3, [r7, #16]
	qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - MPU9250_ALG_BETA * s3;
 80036b4:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80036b8:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80036bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036c0:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 80036c4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80036c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036d0:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80036d4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80036d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80036e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036e8:	ee17 0a90 	vmov	r0, s15
 80036ec:	f7fc ff2c 	bl	8000548 <__aeabi_f2d>
 80036f0:	4604      	mov	r4, r0
 80036f2:	460d      	mov	r5, r1
 80036f4:	69f8      	ldr	r0, [r7, #28]
 80036f6:	f7fc ff27 	bl	8000548 <__aeabi_f2d>
 80036fa:	a36b      	add	r3, pc, #428	; (adr r3, 80038a8 <MadgwickQuaternionUpdate+0xea8>)
 80036fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003700:	f7fc ff7a 	bl	80005f8 <__aeabi_dmul>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4620      	mov	r0, r4
 800370a:	4629      	mov	r1, r5
 800370c:	f7fc fdbc 	bl	8000288 <__aeabi_dsub>
 8003710:	4603      	mov	r3, r0
 8003712:	460c      	mov	r4, r1
 8003714:	4618      	mov	r0, r3
 8003716:	4621      	mov	r1, r4
 8003718:	f7fd fa66 	bl	8000be8 <__aeabi_d2f>
 800371c:	4603      	mov	r3, r0
 800371e:	60fb      	str	r3, [r7, #12]
	qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - MPU9250_ALG_BETA * s4;
 8003720:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8003724:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800372c:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8003730:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003738:	ee37 7a27 	vadd.f32	s14, s14, s15
 800373c:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8003740:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800374c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003754:	ee17 0a90 	vmov	r0, s15
 8003758:	f7fc fef6 	bl	8000548 <__aeabi_f2d>
 800375c:	4604      	mov	r4, r0
 800375e:	460d      	mov	r5, r1
 8003760:	69b8      	ldr	r0, [r7, #24]
 8003762:	f7fc fef1 	bl	8000548 <__aeabi_f2d>
 8003766:	a350      	add	r3, pc, #320	; (adr r3, 80038a8 <MadgwickQuaternionUpdate+0xea8>)
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f7fc ff44 	bl	80005f8 <__aeabi_dmul>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4620      	mov	r0, r4
 8003776:	4629      	mov	r1, r5
 8003778:	f7fc fd86 	bl	8000288 <__aeabi_dsub>
 800377c:	4603      	mov	r3, r0
 800377e:	460c      	mov	r4, r1
 8003780:	4618      	mov	r0, r3
 8003782:	4621      	mov	r1, r4
 8003784:	f7fd fa30 	bl	8000be8 <__aeabi_d2f>
 8003788:	4603      	mov	r3, r0
 800378a:	60bb      	str	r3, [r7, #8]

	// Integrate to yield quaternion
	q1 += qDot1 * inst->alg_deltat;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8003792:	edd7 7a05 	vldr	s15, [r7, #20]
 8003796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379a:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800379e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037a2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	q2 += qDot2 * inst->alg_deltat;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80037ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80037b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b4:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80037b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037bc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	q3 += qDot3 * inst->alg_deltat;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80037c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80037ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ce:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80037d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	q4 += qDot4 * inst->alg_deltat;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80037e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80037e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80037ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037f0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 80037f4:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80037f8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80037fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003800:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8003804:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800380c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003810:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8003814:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800381c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003820:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8003824:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800382c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003830:	eeb0 0a67 	vmov.f32	s0, s15
 8003834:	f00f ffa0 	bl	8013778 <sqrtf>
 8003838:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	norm = 1.0f/norm;
 800383c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003840:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003848:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	inst->q[0] = q1 * norm;
 800384c:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8003850:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	inst->q[1] = q2 * norm;
 800385e:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8003862:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	inst->q[2] = q3 * norm;
 8003870:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003874:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	inst->q[3] = q4 * norm;
 8003882:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003886:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800388a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
 8003894:	e002      	b.n	800389c <MadgwickQuaternionUpdate+0xe9c>
	if (norm == 0.0f) return; // handle NaN
 8003896:	bf00      	nop
 8003898:	e000      	b.n	800389c <MadgwickQuaternionUpdate+0xe9c>
	if (norm == 0.0f) return; // handle NaN
 800389a:	bf00      	nop

}
 800389c:	37c8      	adds	r7, #200	; 0xc8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bdb0      	pop	{r4, r5, r7, pc}
 80038a2:	bf00      	nop
 80038a4:	f3af 8000 	nop.w
 80038a8:	89f0ed0f 	.word	0x89f0ed0f
 80038ac:	3fed0552 	.word	0x3fed0552

080038b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038b4:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <HAL_Init+0x40>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0d      	ldr	r2, [pc, #52]	; (80038f0 <HAL_Init+0x40>)
 80038ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_Init+0x40>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a0a      	ldr	r2, [pc, #40]	; (80038f0 <HAL_Init+0x40>)
 80038c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <HAL_Init+0x40>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <HAL_Init+0x40>)
 80038d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038d8:	2003      	movs	r0, #3
 80038da:	f000 f94d 	bl	8003b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038de:	2000      	movs	r0, #0
 80038e0:	f000 f808 	bl	80038f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038e4:	f00a ff08 	bl	800e6f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40023c00 	.word	0x40023c00

080038f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038fc:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_InitTick+0x54>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_InitTick+0x58>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	4619      	mov	r1, r3
 8003906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800390a:	fbb3 f3f1 	udiv	r3, r3, r1
 800390e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f965 	bl	8003be2 <HAL_SYSTICK_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e00e      	b.n	8003940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b0f      	cmp	r3, #15
 8003926:	d80a      	bhi.n	800393e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003928:	2200      	movs	r2, #0
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	f04f 30ff 	mov.w	r0, #4294967295
 8003930:	f000 f92d 	bl	8003b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003934:	4a06      	ldr	r2, [pc, #24]	; (8003950 <HAL_InitTick+0x5c>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
}
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	2000015c 	.word	0x2000015c
 800394c:	20000004 	.word	0x20000004
 8003950:	20000000 	.word	0x20000000

08003954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_IncTick+0x20>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_IncTick+0x24>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4413      	add	r3, r2
 8003964:	4a04      	ldr	r2, [pc, #16]	; (8003978 <HAL_IncTick+0x24>)
 8003966:	6013      	str	r3, [r2, #0]
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000004 	.word	0x20000004
 8003978:	2000450c 	.word	0x2000450c

0800397c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return uwTick;
 8003980:	4b03      	ldr	r3, [pc, #12]	; (8003990 <HAL_GetTick+0x14>)
 8003982:	681b      	ldr	r3, [r3, #0]
}
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	2000450c 	.word	0x2000450c

08003994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800399c:	f7ff ffee 	bl	800397c <HAL_GetTick>
 80039a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d005      	beq.n	80039ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_Delay+0x40>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039ba:	bf00      	nop
 80039bc:	f7ff ffde 	bl	800397c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d8f7      	bhi.n	80039bc <HAL_Delay+0x28>
  {
  }
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000004 	.word	0x20000004

080039d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <__NVIC_SetPriorityGrouping+0x44>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039f4:	4013      	ands	r3, r2
 80039f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a0a:	4a04      	ldr	r2, [pc, #16]	; (8003a1c <__NVIC_SetPriorityGrouping+0x44>)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	60d3      	str	r3, [r2, #12]
}
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	e000ed00 	.word	0xe000ed00

08003a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a24:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <__NVIC_GetPriorityGrouping+0x18>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	0a1b      	lsrs	r3, r3, #8
 8003a2a:	f003 0307 	and.w	r3, r3, #7
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	db0b      	blt.n	8003a66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	f003 021f 	and.w	r2, r3, #31
 8003a54:	4907      	ldr	r1, [pc, #28]	; (8003a74 <__NVIC_EnableIRQ+0x38>)
 8003a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	2001      	movs	r0, #1
 8003a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	e000e100 	.word	0xe000e100

08003a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	6039      	str	r1, [r7, #0]
 8003a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	db0a      	blt.n	8003aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	490c      	ldr	r1, [pc, #48]	; (8003ac4 <__NVIC_SetPriority+0x4c>)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	0112      	lsls	r2, r2, #4
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aa0:	e00a      	b.n	8003ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	4908      	ldr	r1, [pc, #32]	; (8003ac8 <__NVIC_SetPriority+0x50>)
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	3b04      	subs	r3, #4
 8003ab0:	0112      	lsls	r2, r2, #4
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	761a      	strb	r2, [r3, #24]
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	e000e100 	.word	0xe000e100
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b089      	sub	sp, #36	; 0x24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f1c3 0307 	rsb	r3, r3, #7
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	bf28      	it	cs
 8003aea:	2304      	movcs	r3, #4
 8003aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3304      	adds	r3, #4
 8003af2:	2b06      	cmp	r3, #6
 8003af4:	d902      	bls.n	8003afc <NVIC_EncodePriority+0x30>
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3b03      	subs	r3, #3
 8003afa:	e000      	b.n	8003afe <NVIC_EncodePriority+0x32>
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b00:	f04f 32ff 	mov.w	r2, #4294967295
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	401a      	ands	r2, r3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b14:	f04f 31ff 	mov.w	r1, #4294967295
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1e:	43d9      	mvns	r1, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b24:	4313      	orrs	r3, r2
         );
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3724      	adds	r7, #36	; 0x24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b44:	d301      	bcc.n	8003b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b46:	2301      	movs	r3, #1
 8003b48:	e00f      	b.n	8003b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <SysTick_Config+0x40>)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b52:	210f      	movs	r1, #15
 8003b54:	f04f 30ff 	mov.w	r0, #4294967295
 8003b58:	f7ff ff8e 	bl	8003a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <SysTick_Config+0x40>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b62:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <SysTick_Config+0x40>)
 8003b64:	2207      	movs	r2, #7
 8003b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	e000e010 	.word	0xe000e010

08003b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff ff29 	bl	80039d8 <__NVIC_SetPriorityGrouping>
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b086      	sub	sp, #24
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	4603      	mov	r3, r0
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ba0:	f7ff ff3e 	bl	8003a20 <__NVIC_GetPriorityGrouping>
 8003ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	6978      	ldr	r0, [r7, #20]
 8003bac:	f7ff ff8e 	bl	8003acc <NVIC_EncodePriority>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff ff5d 	bl	8003a78 <__NVIC_SetPriority>
}
 8003bbe:	bf00      	nop
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	4603      	mov	r3, r0
 8003bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff ff31 	bl	8003a3c <__NVIC_EnableIRQ>
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff ffa2 	bl	8003b34 <SysTick_Config>
 8003bf0:	4603      	mov	r3, r0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c08:	f7ff feb8 	bl	800397c <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e099      	b.n	8003d4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c38:	e00f      	b.n	8003c5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c3a:	f7ff fe9f 	bl	800397c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b05      	cmp	r3, #5
 8003c46:	d908      	bls.n	8003c5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2203      	movs	r2, #3
 8003c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e078      	b.n	8003d4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e8      	bne.n	8003c3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4b38      	ldr	r3, [pc, #224]	; (8003d54 <HAL_DMA_Init+0x158>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d107      	bne.n	8003cc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f023 0307 	bic.w	r3, r3, #7
 8003cda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d117      	bne.n	8003d1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00e      	beq.n	8003d1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 fa99 	bl	8004238 <DMA_CheckFifoParam>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2240      	movs	r2, #64	; 0x40
 8003d10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e016      	b.n	8003d4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fa50 	bl	80041cc <DMA_CalcBaseAndBitshift>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d34:	223f      	movs	r2, #63	; 0x3f
 8003d36:	409a      	lsls	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	f010803f 	.word	0xf010803f

08003d58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_DMA_Start_IT+0x26>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e048      	b.n	8003e10 <HAL_DMA_Start_IT+0xb8>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d137      	bne.n	8003e02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2202      	movs	r2, #2
 8003d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f9e2 	bl	8004170 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	223f      	movs	r2, #63	; 0x3f
 8003db2:	409a      	lsls	r2, r3
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0216 	orr.w	r2, r2, #22
 8003dc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dd6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0208 	orr.w	r2, r2, #8
 8003dee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	e005      	b.n	8003e0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d004      	beq.n	8003e36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2280      	movs	r2, #128	; 0x80
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e00c      	b.n	8003e50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2205      	movs	r2, #5
 8003e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0201 	bic.w	r2, r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e68:	4b92      	ldr	r3, [pc, #584]	; (80040b4 <HAL_DMA_IRQHandler+0x258>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a92      	ldr	r2, [pc, #584]	; (80040b8 <HAL_DMA_IRQHandler+0x25c>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	0a9b      	lsrs	r3, r3, #10
 8003e74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e86:	2208      	movs	r2, #8
 8003e88:	409a      	lsls	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01a      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d013      	beq.n	8003ec8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0204 	bic.w	r2, r2, #4
 8003eae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec0:	f043 0201 	orr.w	r2, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ecc:	2201      	movs	r2, #1
 8003ece:	409a      	lsls	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d012      	beq.n	8003efe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eea:	2201      	movs	r2, #1
 8003eec:	409a      	lsls	r2, r3
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef6:	f043 0202 	orr.w	r2, r3, #2
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f02:	2204      	movs	r2, #4
 8003f04:	409a      	lsls	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d012      	beq.n	8003f34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00b      	beq.n	8003f34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f20:	2204      	movs	r2, #4
 8003f22:	409a      	lsls	r2, r3
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2c:	f043 0204 	orr.w	r2, r3, #4
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f38:	2210      	movs	r2, #16
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d043      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d03c      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f56:	2210      	movs	r2, #16
 8003f58:	409a      	lsls	r2, r3
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d018      	beq.n	8003f9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d108      	bne.n	8003f8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d024      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	4798      	blx	r3
 8003f8a:	e01f      	b.n	8003fcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01b      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	4798      	blx	r3
 8003f9c:	e016      	b.n	8003fcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d107      	bne.n	8003fbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0208 	bic.w	r2, r2, #8
 8003fba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 808e 	beq.w	80040fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 8086 	beq.w	80040fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	409a      	lsls	r2, r3
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b05      	cmp	r3, #5
 8004004:	d136      	bne.n	8004074 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0216 	bic.w	r2, r2, #22
 8004014:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004024:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <HAL_DMA_IRQHandler+0x1da>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0208 	bic.w	r2, r2, #8
 8004044:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404a:	223f      	movs	r2, #63	; 0x3f
 800404c:	409a      	lsls	r2, r3
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004066:	2b00      	cmp	r3, #0
 8004068:	d07d      	beq.n	8004166 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	4798      	blx	r3
        }
        return;
 8004072:	e078      	b.n	8004166 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01c      	beq.n	80040bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d108      	bne.n	80040a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004094:	2b00      	cmp	r3, #0
 8004096:	d030      	beq.n	80040fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	4798      	blx	r3
 80040a0:	e02b      	b.n	80040fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d027      	beq.n	80040fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	4798      	blx	r3
 80040b2:	e022      	b.n	80040fa <HAL_DMA_IRQHandler+0x29e>
 80040b4:	2000015c 	.word	0x2000015c
 80040b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10f      	bne.n	80040ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0210 	bic.w	r2, r2, #16
 80040d8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d032      	beq.n	8004168 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d022      	beq.n	8004154 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2205      	movs	r2, #5
 8004112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0201 	bic.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	3301      	adds	r3, #1
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	429a      	cmp	r2, r3
 8004130:	d307      	bcc.n	8004142 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f2      	bne.n	8004126 <HAL_DMA_IRQHandler+0x2ca>
 8004140:	e000      	b.n	8004144 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004142:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
 8004164:	e000      	b.n	8004168 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004166:	bf00      	nop
    }
  }
}
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop

08004170 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800418c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b40      	cmp	r3, #64	; 0x40
 800419c:	d108      	bne.n	80041b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041ae:	e007      	b.n	80041c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	60da      	str	r2, [r3, #12]
}
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	3b10      	subs	r3, #16
 80041dc:	4a14      	ldr	r2, [pc, #80]	; (8004230 <DMA_CalcBaseAndBitshift+0x64>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	091b      	lsrs	r3, r3, #4
 80041e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041e6:	4a13      	ldr	r2, [pc, #76]	; (8004234 <DMA_CalcBaseAndBitshift+0x68>)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d909      	bls.n	800420e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004202:	f023 0303 	bic.w	r3, r3, #3
 8004206:	1d1a      	adds	r2, r3, #4
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	659a      	str	r2, [r3, #88]	; 0x58
 800420c:	e007      	b.n	800421e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004216:	f023 0303 	bic.w	r3, r3, #3
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004222:	4618      	mov	r0, r3
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	aaaaaaab 	.word	0xaaaaaaab
 8004234:	080150a8 	.word	0x080150a8

08004238 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d11f      	bne.n	8004292 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d855      	bhi.n	8004304 <DMA_CheckFifoParam+0xcc>
 8004258:	a201      	add	r2, pc, #4	; (adr r2, 8004260 <DMA_CheckFifoParam+0x28>)
 800425a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425e:	bf00      	nop
 8004260:	08004271 	.word	0x08004271
 8004264:	08004283 	.word	0x08004283
 8004268:	08004271 	.word	0x08004271
 800426c:	08004305 	.word	0x08004305
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d045      	beq.n	8004308 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004280:	e042      	b.n	8004308 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800428a:	d13f      	bne.n	800430c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004290:	e03c      	b.n	800430c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800429a:	d121      	bne.n	80042e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d836      	bhi.n	8004310 <DMA_CheckFifoParam+0xd8>
 80042a2:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <DMA_CheckFifoParam+0x70>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042b9 	.word	0x080042b9
 80042ac:	080042bf 	.word	0x080042bf
 80042b0:	080042b9 	.word	0x080042b9
 80042b4:	080042d1 	.word	0x080042d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	73fb      	strb	r3, [r7, #15]
      break;
 80042bc:	e02f      	b.n	800431e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d024      	beq.n	8004314 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ce:	e021      	b.n	8004314 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042d8:	d11e      	bne.n	8004318 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042de:	e01b      	b.n	8004318 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d902      	bls.n	80042ec <DMA_CheckFifoParam+0xb4>
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d003      	beq.n	80042f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042ea:	e018      	b.n	800431e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]
      break;
 80042f0:	e015      	b.n	800431e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00e      	beq.n	800431c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	73fb      	strb	r3, [r7, #15]
      break;
 8004302:	e00b      	b.n	800431c <DMA_CheckFifoParam+0xe4>
      break;
 8004304:	bf00      	nop
 8004306:	e00a      	b.n	800431e <DMA_CheckFifoParam+0xe6>
      break;
 8004308:	bf00      	nop
 800430a:	e008      	b.n	800431e <DMA_CheckFifoParam+0xe6>
      break;
 800430c:	bf00      	nop
 800430e:	e006      	b.n	800431e <DMA_CheckFifoParam+0xe6>
      break;
 8004310:	bf00      	nop
 8004312:	e004      	b.n	800431e <DMA_CheckFifoParam+0xe6>
      break;
 8004314:	bf00      	nop
 8004316:	e002      	b.n	800431e <DMA_CheckFifoParam+0xe6>
      break;   
 8004318:	bf00      	nop
 800431a:	e000      	b.n	800431e <DMA_CheckFifoParam+0xe6>
      break;
 800431c:	bf00      	nop
    }
  } 
  
  return status; 
 800431e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800432c:	b480      	push	{r7}
 800432e:	b089      	sub	sp, #36	; 0x24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800433e:	2300      	movs	r3, #0
 8004340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	e16b      	b.n	8004620 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004348:	2201      	movs	r2, #1
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4013      	ands	r3, r2
 800435a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	429a      	cmp	r2, r3
 8004362:	f040 815a 	bne.w	800461a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d003      	beq.n	8004376 <HAL_GPIO_Init+0x4a>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b12      	cmp	r3, #18
 8004374:	d123      	bne.n	80043be <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	08da      	lsrs	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3208      	adds	r2, #8
 800437e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	220f      	movs	r2, #15
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43db      	mvns	r3, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4013      	ands	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	08da      	lsrs	r2, r3, #3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3208      	adds	r2, #8
 80043b8:	69b9      	ldr	r1, [r7, #24]
 80043ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	2203      	movs	r2, #3
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4013      	ands	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f003 0203 	and.w	r2, r3, #3
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d00b      	beq.n	8004412 <HAL_GPIO_Init+0xe6>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d007      	beq.n	8004412 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004406:	2b11      	cmp	r3, #17
 8004408:	d003      	beq.n	8004412 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b12      	cmp	r3, #18
 8004410:	d130      	bne.n	8004474 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	2203      	movs	r2, #3
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	43db      	mvns	r3, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4013      	ands	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4313      	orrs	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004448:	2201      	movs	r2, #1
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	43db      	mvns	r3, r3
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4013      	ands	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	f003 0201 	and.w	r2, r3, #1
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4313      	orrs	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	2203      	movs	r2, #3
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	43db      	mvns	r3, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80b4 	beq.w	800461a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	4b5f      	ldr	r3, [pc, #380]	; (8004634 <HAL_GPIO_Init+0x308>)
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	4a5e      	ldr	r2, [pc, #376]	; (8004634 <HAL_GPIO_Init+0x308>)
 80044bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044c0:	6453      	str	r3, [r2, #68]	; 0x44
 80044c2:	4b5c      	ldr	r3, [pc, #368]	; (8004634 <HAL_GPIO_Init+0x308>)
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044ce:	4a5a      	ldr	r2, [pc, #360]	; (8004638 <HAL_GPIO_Init+0x30c>)
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	089b      	lsrs	r3, r3, #2
 80044d4:	3302      	adds	r3, #2
 80044d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	220f      	movs	r2, #15
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43db      	mvns	r3, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4013      	ands	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a51      	ldr	r2, [pc, #324]	; (800463c <HAL_GPIO_Init+0x310>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d02b      	beq.n	8004552 <HAL_GPIO_Init+0x226>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a50      	ldr	r2, [pc, #320]	; (8004640 <HAL_GPIO_Init+0x314>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d025      	beq.n	800454e <HAL_GPIO_Init+0x222>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a4f      	ldr	r2, [pc, #316]	; (8004644 <HAL_GPIO_Init+0x318>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01f      	beq.n	800454a <HAL_GPIO_Init+0x21e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a4e      	ldr	r2, [pc, #312]	; (8004648 <HAL_GPIO_Init+0x31c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d019      	beq.n	8004546 <HAL_GPIO_Init+0x21a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a4d      	ldr	r2, [pc, #308]	; (800464c <HAL_GPIO_Init+0x320>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <HAL_GPIO_Init+0x216>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a4c      	ldr	r2, [pc, #304]	; (8004650 <HAL_GPIO_Init+0x324>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00d      	beq.n	800453e <HAL_GPIO_Init+0x212>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a4b      	ldr	r2, [pc, #300]	; (8004654 <HAL_GPIO_Init+0x328>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d007      	beq.n	800453a <HAL_GPIO_Init+0x20e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a4a      	ldr	r2, [pc, #296]	; (8004658 <HAL_GPIO_Init+0x32c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d101      	bne.n	8004536 <HAL_GPIO_Init+0x20a>
 8004532:	2307      	movs	r3, #7
 8004534:	e00e      	b.n	8004554 <HAL_GPIO_Init+0x228>
 8004536:	2308      	movs	r3, #8
 8004538:	e00c      	b.n	8004554 <HAL_GPIO_Init+0x228>
 800453a:	2306      	movs	r3, #6
 800453c:	e00a      	b.n	8004554 <HAL_GPIO_Init+0x228>
 800453e:	2305      	movs	r3, #5
 8004540:	e008      	b.n	8004554 <HAL_GPIO_Init+0x228>
 8004542:	2304      	movs	r3, #4
 8004544:	e006      	b.n	8004554 <HAL_GPIO_Init+0x228>
 8004546:	2303      	movs	r3, #3
 8004548:	e004      	b.n	8004554 <HAL_GPIO_Init+0x228>
 800454a:	2302      	movs	r3, #2
 800454c:	e002      	b.n	8004554 <HAL_GPIO_Init+0x228>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <HAL_GPIO_Init+0x228>
 8004552:	2300      	movs	r3, #0
 8004554:	69fa      	ldr	r2, [r7, #28]
 8004556:	f002 0203 	and.w	r2, r2, #3
 800455a:	0092      	lsls	r2, r2, #2
 800455c:	4093      	lsls	r3, r2
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	4313      	orrs	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004564:	4934      	ldr	r1, [pc, #208]	; (8004638 <HAL_GPIO_Init+0x30c>)
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	089b      	lsrs	r3, r3, #2
 800456a:	3302      	adds	r3, #2
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004572:	4b3a      	ldr	r3, [pc, #232]	; (800465c <HAL_GPIO_Init+0x330>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	43db      	mvns	r3, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4013      	ands	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004596:	4a31      	ldr	r2, [pc, #196]	; (800465c <HAL_GPIO_Init+0x330>)
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800459c:	4b2f      	ldr	r3, [pc, #188]	; (800465c <HAL_GPIO_Init+0x330>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4013      	ands	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045c0:	4a26      	ldr	r2, [pc, #152]	; (800465c <HAL_GPIO_Init+0x330>)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045c6:	4b25      	ldr	r3, [pc, #148]	; (800465c <HAL_GPIO_Init+0x330>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	43db      	mvns	r3, r3
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4013      	ands	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045ea:	4a1c      	ldr	r2, [pc, #112]	; (800465c <HAL_GPIO_Init+0x330>)
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045f0:	4b1a      	ldr	r3, [pc, #104]	; (800465c <HAL_GPIO_Init+0x330>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	43db      	mvns	r3, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4013      	ands	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004614:	4a11      	ldr	r2, [pc, #68]	; (800465c <HAL_GPIO_Init+0x330>)
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	3301      	adds	r3, #1
 800461e:	61fb      	str	r3, [r7, #28]
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	2b0f      	cmp	r3, #15
 8004624:	f67f ae90 	bls.w	8004348 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004628:	bf00      	nop
 800462a:	3724      	adds	r7, #36	; 0x24
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	40023800 	.word	0x40023800
 8004638:	40013800 	.word	0x40013800
 800463c:	40020000 	.word	0x40020000
 8004640:	40020400 	.word	0x40020400
 8004644:	40020800 	.word	0x40020800
 8004648:	40020c00 	.word	0x40020c00
 800464c:	40021000 	.word	0x40021000
 8004650:	40021400 	.word	0x40021400
 8004654:	40021800 	.word	0x40021800
 8004658:	40021c00 	.word	0x40021c00
 800465c:	40013c00 	.word	0x40013c00

08004660 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	887b      	ldrh	r3, [r7, #2]
 8004672:	4013      	ands	r3, r2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
 800467c:	e001      	b.n	8004682 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800467e:	2300      	movs	r3, #0
 8004680:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004682:	7bfb      	ldrb	r3, [r7, #15]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	807b      	strh	r3, [r7, #2]
 800469c:	4613      	mov	r3, r2
 800469e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046a0:	787b      	ldrb	r3, [r7, #1]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046a6:	887a      	ldrh	r2, [r7, #2]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046ac:	e003      	b.n	80046b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046ae:	887b      	ldrh	r3, [r7, #2]
 80046b0:	041a      	lsls	r2, r3, #16
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	619a      	str	r2, [r3, #24]
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
	...

080046c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e10f      	b.n	80048f6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f00a f82c 	bl	800e748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2224      	movs	r2, #36	; 0x24
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0201 	bic.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004708:	f002 fcc8 	bl	800709c <HAL_RCC_GetPCLK1Freq>
 800470c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4a7b      	ldr	r2, [pc, #492]	; (8004900 <HAL_I2C_Init+0x23c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d807      	bhi.n	8004728 <HAL_I2C_Init+0x64>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4a7a      	ldr	r2, [pc, #488]	; (8004904 <HAL_I2C_Init+0x240>)
 800471c:	4293      	cmp	r3, r2
 800471e:	bf94      	ite	ls
 8004720:	2301      	movls	r3, #1
 8004722:	2300      	movhi	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	e006      	b.n	8004736 <HAL_I2C_Init+0x72>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4a77      	ldr	r2, [pc, #476]	; (8004908 <HAL_I2C_Init+0x244>)
 800472c:	4293      	cmp	r3, r2
 800472e:	bf94      	ite	ls
 8004730:	2301      	movls	r3, #1
 8004732:	2300      	movhi	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e0db      	b.n	80048f6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a72      	ldr	r2, [pc, #456]	; (800490c <HAL_I2C_Init+0x248>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	0c9b      	lsrs	r3, r3, #18
 8004748:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	4a64      	ldr	r2, [pc, #400]	; (8004900 <HAL_I2C_Init+0x23c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d802      	bhi.n	8004778 <HAL_I2C_Init+0xb4>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	3301      	adds	r3, #1
 8004776:	e009      	b.n	800478c <HAL_I2C_Init+0xc8>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	4a63      	ldr	r2, [pc, #396]	; (8004910 <HAL_I2C_Init+0x24c>)
 8004784:	fba2 2303 	umull	r2, r3, r2, r3
 8004788:	099b      	lsrs	r3, r3, #6
 800478a:	3301      	adds	r3, #1
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	430b      	orrs	r3, r1
 8004792:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800479e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4956      	ldr	r1, [pc, #344]	; (8004900 <HAL_I2C_Init+0x23c>)
 80047a8:	428b      	cmp	r3, r1
 80047aa:	d80d      	bhi.n	80047c8 <HAL_I2C_Init+0x104>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	1e59      	subs	r1, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80047ba:	3301      	adds	r3, #1
 80047bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	bf38      	it	cc
 80047c4:	2304      	movcc	r3, #4
 80047c6:	e04f      	b.n	8004868 <HAL_I2C_Init+0x1a4>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d111      	bne.n	80047f4 <HAL_I2C_Init+0x130>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	1e58      	subs	r0, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6859      	ldr	r1, [r3, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	440b      	add	r3, r1
 80047de:	fbb0 f3f3 	udiv	r3, r0, r3
 80047e2:	3301      	adds	r3, #1
 80047e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	e012      	b.n	800481a <HAL_I2C_Init+0x156>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	1e58      	subs	r0, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6859      	ldr	r1, [r3, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	0099      	lsls	r1, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	fbb0 f3f3 	udiv	r3, r0, r3
 800480a:	3301      	adds	r3, #1
 800480c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004810:	2b00      	cmp	r3, #0
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_I2C_Init+0x15e>
 800481e:	2301      	movs	r3, #1
 8004820:	e022      	b.n	8004868 <HAL_I2C_Init+0x1a4>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10e      	bne.n	8004848 <HAL_I2C_Init+0x184>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1e58      	subs	r0, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6859      	ldr	r1, [r3, #4]
 8004832:	460b      	mov	r3, r1
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	440b      	add	r3, r1
 8004838:	fbb0 f3f3 	udiv	r3, r0, r3
 800483c:	3301      	adds	r3, #1
 800483e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004846:	e00f      	b.n	8004868 <HAL_I2C_Init+0x1a4>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	1e58      	subs	r0, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6859      	ldr	r1, [r3, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	0099      	lsls	r1, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	fbb0 f3f3 	udiv	r3, r0, r3
 800485e:	3301      	adds	r3, #1
 8004860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	6809      	ldr	r1, [r1, #0]
 800486c:	4313      	orrs	r3, r2
 800486e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004896:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6911      	ldr	r1, [r2, #16]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	68d2      	ldr	r2, [r2, #12]
 80048a2:	4311      	orrs	r1, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	430b      	orrs	r3, r1
 80048aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	000186a0 	.word	0x000186a0
 8004904:	001e847f 	.word	0x001e847f
 8004908:	003d08ff 	.word	0x003d08ff
 800490c:	431bde83 	.word	0x431bde83
 8004910:	10624dd3 	.word	0x10624dd3

08004914 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af02      	add	r7, sp, #8
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	4608      	mov	r0, r1
 800491e:	4611      	mov	r1, r2
 8004920:	461a      	mov	r2, r3
 8004922:	4603      	mov	r3, r0
 8004924:	817b      	strh	r3, [r7, #10]
 8004926:	460b      	mov	r3, r1
 8004928:	813b      	strh	r3, [r7, #8]
 800492a:	4613      	mov	r3, r2
 800492c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800492e:	f7ff f825 	bl	800397c <HAL_GetTick>
 8004932:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b20      	cmp	r3, #32
 800493e:	f040 80d9 	bne.w	8004af4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	2319      	movs	r3, #25
 8004948:	2201      	movs	r2, #1
 800494a:	496d      	ldr	r1, [pc, #436]	; (8004b00 <HAL_I2C_Mem_Write+0x1ec>)
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 fc5b 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004958:	2302      	movs	r3, #2
 800495a:	e0cc      	b.n	8004af6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_I2C_Mem_Write+0x56>
 8004966:	2302      	movs	r3, #2
 8004968:	e0c5      	b.n	8004af6 <HAL_I2C_Mem_Write+0x1e2>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b01      	cmp	r3, #1
 800497e:	d007      	beq.n	8004990 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800499e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2221      	movs	r2, #33	; 0x21
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2240      	movs	r2, #64	; 0x40
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a3a      	ldr	r2, [r7, #32]
 80049ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4a4d      	ldr	r2, [pc, #308]	; (8004b04 <HAL_I2C_Mem_Write+0x1f0>)
 80049d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049d2:	88f8      	ldrh	r0, [r7, #6]
 80049d4:	893a      	ldrh	r2, [r7, #8]
 80049d6:	8979      	ldrh	r1, [r7, #10]
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	4603      	mov	r3, r0
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 fab6 	bl	8004f54 <I2C_RequestMemoryWrite>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d052      	beq.n	8004a94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e081      	b.n	8004af6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fcdc 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00d      	beq.n	8004a1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d107      	bne.n	8004a1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e06b      	b.n	8004af6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	781a      	ldrb	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d11b      	bne.n	8004a94 <HAL_I2C_Mem_Write+0x180>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d017      	beq.n	8004a94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	781a      	ldrb	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1aa      	bne.n	80049f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 fcc8 	bl	8005436 <I2C_WaitOnBTFFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00d      	beq.n	8004ac8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d107      	bne.n	8004ac4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e016      	b.n	8004af6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	e000      	b.n	8004af6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004af4:	2302      	movs	r3, #2
  }
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	00100002 	.word	0x00100002
 8004b04:	ffff0000 	.word	0xffff0000

08004b08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08c      	sub	sp, #48	; 0x30
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	4608      	mov	r0, r1
 8004b12:	4611      	mov	r1, r2
 8004b14:	461a      	mov	r2, r3
 8004b16:	4603      	mov	r3, r0
 8004b18:	817b      	strh	r3, [r7, #10]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	813b      	strh	r3, [r7, #8]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b22:	f7fe ff2b 	bl	800397c <HAL_GetTick>
 8004b26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	f040 8208 	bne.w	8004f46 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	2319      	movs	r3, #25
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	497b      	ldr	r1, [pc, #492]	; (8004d2c <HAL_I2C_Mem_Read+0x224>)
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fb61 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e1fb      	b.n	8004f48 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <HAL_I2C_Mem_Read+0x56>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e1f4      	b.n	8004f48 <HAL_I2C_Mem_Read+0x440>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d007      	beq.n	8004b84 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2222      	movs	r2, #34	; 0x22
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2240      	movs	r2, #64	; 0x40
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4a5b      	ldr	r2, [pc, #364]	; (8004d30 <HAL_I2C_Mem_Read+0x228>)
 8004bc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bc6:	88f8      	ldrh	r0, [r7, #6]
 8004bc8:	893a      	ldrh	r2, [r7, #8]
 8004bca:	8979      	ldrh	r1, [r7, #10]
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	9301      	str	r3, [sp, #4]
 8004bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 fa46 	bl	8005068 <I2C_RequestMemoryRead>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e1b0      	b.n	8004f48 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d113      	bne.n	8004c16 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	623b      	str	r3, [r7, #32]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	623b      	str	r3, [r7, #32]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	623b      	str	r3, [r7, #32]
 8004c02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	e184      	b.n	8004f20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d11b      	bne.n	8004c56 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	61fb      	str	r3, [r7, #28]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	e164      	b.n	8004f20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d11b      	bne.n	8004c96 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61bb      	str	r3, [r7, #24]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	e144      	b.n	8004f20 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004cac:	e138      	b.n	8004f20 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	f200 80f1 	bhi.w	8004e9a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d123      	bne.n	8004d08 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fbf7 	bl	80054b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e139      	b.n	8004f48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d06:	e10b      	b.n	8004f20 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d14e      	bne.n	8004dae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	2200      	movs	r2, #0
 8004d18:	4906      	ldr	r1, [pc, #24]	; (8004d34 <HAL_I2C_Mem_Read+0x22c>)
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fa74 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d008      	beq.n	8004d38 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e10e      	b.n	8004f48 <HAL_I2C_Mem_Read+0x440>
 8004d2a:	bf00      	nop
 8004d2c:	00100002 	.word	0x00100002
 8004d30:	ffff0000 	.word	0xffff0000
 8004d34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dac:	e0b8      	b.n	8004f20 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	2200      	movs	r2, #0
 8004db6:	4966      	ldr	r1, [pc, #408]	; (8004f50 <HAL_I2C_Mem_Read+0x448>)
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 fa25 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0bf      	b.n	8004f48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	2200      	movs	r2, #0
 8004e12:	494f      	ldr	r1, [pc, #316]	; (8004f50 <HAL_I2C_Mem_Read+0x448>)
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f9f7 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e091      	b.n	8004f48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691a      	ldr	r2, [r3, #16]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e98:	e042      	b.n	8004f20 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fb0a 	bl	80054b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e04c      	b.n	8004f48 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d118      	bne.n	8004f20 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f47f aec2 	bne.w	8004cae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	e000      	b.n	8004f48 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f46:	2302      	movs	r3, #2
  }
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3728      	adds	r7, #40	; 0x28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	00010004 	.word	0x00010004

08004f54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	4608      	mov	r0, r1
 8004f5e:	4611      	mov	r1, r2
 8004f60:	461a      	mov	r2, r3
 8004f62:	4603      	mov	r3, r0
 8004f64:	817b      	strh	r3, [r7, #10]
 8004f66:	460b      	mov	r3, r1
 8004f68:	813b      	strh	r3, [r7, #8]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f93c 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e05f      	b.n	800505a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f9a:	897b      	ldrh	r3, [r7, #10]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fa8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	492d      	ldr	r1, [pc, #180]	; (8005064 <I2C_RequestMemoryWrite+0x110>)
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 f980 	bl	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e04c      	b.n	800505a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd8:	6a39      	ldr	r1, [r7, #32]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 f9ea 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00d      	beq.n	8005002 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d107      	bne.n	8004ffe <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ffc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e02b      	b.n	800505a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d105      	bne.n	8005014 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005008:	893b      	ldrh	r3, [r7, #8]
 800500a:	b2da      	uxtb	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	611a      	str	r2, [r3, #16]
 8005012:	e021      	b.n	8005058 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005014:	893b      	ldrh	r3, [r7, #8]
 8005016:	0a1b      	lsrs	r3, r3, #8
 8005018:	b29b      	uxth	r3, r3
 800501a:	b2da      	uxtb	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005024:	6a39      	ldr	r1, [r7, #32]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f9c4 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00d      	beq.n	800504e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	2b04      	cmp	r3, #4
 8005038:	d107      	bne.n	800504a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005048:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e005      	b.n	800505a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800504e:	893b      	ldrh	r3, [r7, #8]
 8005050:	b2da      	uxtb	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	00010002 	.word	0x00010002

08005068 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	4608      	mov	r0, r1
 8005072:	4611      	mov	r1, r2
 8005074:	461a      	mov	r2, r3
 8005076:	4603      	mov	r3, r0
 8005078:	817b      	strh	r3, [r7, #10]
 800507a:	460b      	mov	r3, r1
 800507c:	813b      	strh	r3, [r7, #8]
 800507e:	4613      	mov	r3, r2
 8005080:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005090:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f8aa 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e09e      	b.n	80051fc <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050be:	897b      	ldrh	r3, [r7, #10]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	6a3a      	ldr	r2, [r7, #32]
 80050d2:	494c      	ldr	r1, [pc, #304]	; (8005204 <I2C_RequestMemoryRead+0x19c>)
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 f8ee 	bl	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e08b      	b.n	80051fc <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fc:	6a39      	ldr	r1, [r7, #32]
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 f958 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00d      	beq.n	8005126 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	2b04      	cmp	r3, #4
 8005110:	d107      	bne.n	8005122 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005120:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e06a      	b.n	80051fc <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005126:	88fb      	ldrh	r3, [r7, #6]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d105      	bne.n	8005138 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800512c:	893b      	ldrh	r3, [r7, #8]
 800512e:	b2da      	uxtb	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	611a      	str	r2, [r3, #16]
 8005136:	e021      	b.n	800517c <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005138:	893b      	ldrh	r3, [r7, #8]
 800513a:	0a1b      	lsrs	r3, r3, #8
 800513c:	b29b      	uxth	r3, r3
 800513e:	b2da      	uxtb	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005148:	6a39      	ldr	r1, [r7, #32]
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 f932 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00d      	beq.n	8005172 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	2b04      	cmp	r3, #4
 800515c:	d107      	bne.n	800516e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800516c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e044      	b.n	80051fc <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005172:	893b      	ldrh	r3, [r7, #8]
 8005174:	b2da      	uxtb	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800517c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517e:	6a39      	ldr	r1, [r7, #32]
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f917 	bl	80053b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00d      	beq.n	80051a8 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005190:	2b04      	cmp	r3, #4
 8005192:	d107      	bne.n	80051a4 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e029      	b.n	80051fc <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	2200      	movs	r2, #0
 80051c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f81f 	bl	8005208 <I2C_WaitOnFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e013      	b.n	80051fc <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051d4:	897b      	ldrh	r3, [r7, #10]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f043 0301 	orr.w	r3, r3, #1
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	6a3a      	ldr	r2, [r7, #32]
 80051e8:	4906      	ldr	r1, [pc, #24]	; (8005204 <I2C_RequestMemoryRead+0x19c>)
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f863 	bl	80052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	00010002 	.word	0x00010002

08005208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005218:	e025      	b.n	8005266 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005220:	d021      	beq.n	8005266 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005222:	f7fe fbab 	bl	800397c <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d302      	bcc.n	8005238 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d116      	bne.n	8005266 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	f043 0220 	orr.w	r2, r3, #32
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e023      	b.n	80052ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	0c1b      	lsrs	r3, r3, #16
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b01      	cmp	r3, #1
 800526e:	d10d      	bne.n	800528c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	43da      	mvns	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4013      	ands	r3, r2
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	bf0c      	ite	eq
 8005282:	2301      	moveq	r3, #1
 8005284:	2300      	movne	r3, #0
 8005286:	b2db      	uxtb	r3, r3
 8005288:	461a      	mov	r2, r3
 800528a:	e00c      	b.n	80052a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	43da      	mvns	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4013      	ands	r3, r2
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	bf0c      	ite	eq
 800529e:	2301      	moveq	r3, #1
 80052a0:	2300      	movne	r3, #0
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	461a      	mov	r2, r3
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d0b6      	beq.n	800521a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052c4:	e051      	b.n	800536a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d4:	d123      	bne.n	800531e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	f043 0204 	orr.w	r2, r3, #4
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e046      	b.n	80053ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d021      	beq.n	800536a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005326:	f7fe fb29 	bl	800397c <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d302      	bcc.n	800533c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d116      	bne.n	800536a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f043 0220 	orr.w	r2, r3, #32
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e020      	b.n	80053ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	0c1b      	lsrs	r3, r3, #16
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	d10c      	bne.n	800538e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	43da      	mvns	r2, r3
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4013      	ands	r3, r2
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	bf14      	ite	ne
 8005386:	2301      	movne	r3, #1
 8005388:	2300      	moveq	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	e00b      	b.n	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	43da      	mvns	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4013      	ands	r3, r2
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	bf14      	ite	ne
 80053a0:	2301      	movne	r3, #1
 80053a2:	2300      	moveq	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d18d      	bne.n	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c0:	e02d      	b.n	800541e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 f8ce 	bl	8005564 <I2C_IsAcknowledgeFailed>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e02d      	b.n	800542e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d8:	d021      	beq.n	800541e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053da:	f7fe facf 	bl	800397c <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d302      	bcc.n	80053f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d116      	bne.n	800541e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	f043 0220 	orr.w	r2, r3, #32
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e007      	b.n	800542e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005428:	2b80      	cmp	r3, #128	; 0x80
 800542a:	d1ca      	bne.n	80053c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b084      	sub	sp, #16
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	60b9      	str	r1, [r7, #8]
 8005440:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005442:	e02d      	b.n	80054a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f88d 	bl	8005564 <I2C_IsAcknowledgeFailed>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e02d      	b.n	80054b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	d021      	beq.n	80054a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545c:	f7fe fa8e 	bl	800397c <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	429a      	cmp	r2, r3
 800546a:	d302      	bcc.n	8005472 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d116      	bne.n	80054a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	f043 0220 	orr.w	r2, r3, #32
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e007      	b.n	80054b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d1ca      	bne.n	8005444 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054c4:	e042      	b.n	800554c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d119      	bne.n	8005508 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0210 	mvn.w	r2, #16
 80054dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e029      	b.n	800555c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005508:	f7fe fa38 	bl	800397c <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	429a      	cmp	r2, r3
 8005516:	d302      	bcc.n	800551e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d116      	bne.n	800554c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005538:	f043 0220 	orr.w	r2, r3, #32
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e007      	b.n	800555c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005556:	2b40      	cmp	r3, #64	; 0x40
 8005558:	d1b5      	bne.n	80054c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800557a:	d11b      	bne.n	80055b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005584:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a0:	f043 0204 	orr.w	r2, r3, #4
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055c4:	b08f      	sub	sp, #60	; 0x3c
 80055c6:	af0a      	add	r7, sp, #40	; 0x28
 80055c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e10f      	b.n	80057f4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f009 fd2c 	bl	800f04c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2203      	movs	r2, #3
 80055f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005604:	2b00      	cmp	r3, #0
 8005606:	d102      	bne.n	800560e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f005 faa3 	bl	800ab5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	603b      	str	r3, [r7, #0]
 800561e:	687e      	ldr	r6, [r7, #4]
 8005620:	466d      	mov	r5, sp
 8005622:	f106 0410 	add.w	r4, r6, #16
 8005626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800562a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800562c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800562e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005632:	e885 0003 	stmia.w	r5, {r0, r1}
 8005636:	1d33      	adds	r3, r6, #4
 8005638:	cb0e      	ldmia	r3, {r1, r2, r3}
 800563a:	6838      	ldr	r0, [r7, #0]
 800563c:	f005 f97a 	bl	800a934 <USB_CoreInit>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d005      	beq.n	8005652 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2202      	movs	r2, #2
 800564a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e0d0      	b.n	80057f4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2100      	movs	r1, #0
 8005658:	4618      	mov	r0, r3
 800565a:	f005 fa91 	bl	800ab80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800565e:	2300      	movs	r3, #0
 8005660:	73fb      	strb	r3, [r7, #15]
 8005662:	e04a      	b.n	80056fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005664:	7bfa      	ldrb	r2, [r7, #15]
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	4613      	mov	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	333d      	adds	r3, #61	; 0x3d
 8005674:	2201      	movs	r2, #1
 8005676:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005678:	7bfa      	ldrb	r2, [r7, #15]
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	4613      	mov	r3, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	333c      	adds	r3, #60	; 0x3c
 8005688:	7bfa      	ldrb	r2, [r7, #15]
 800568a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800568c:	7bfa      	ldrb	r2, [r7, #15]
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	b298      	uxth	r0, r3
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	4613      	mov	r3, r2
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	1a9b      	subs	r3, r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	3342      	adds	r3, #66	; 0x42
 80056a0:	4602      	mov	r2, r0
 80056a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056a4:	7bfa      	ldrb	r2, [r7, #15]
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	333f      	adds	r3, #63	; 0x3f
 80056b4:	2200      	movs	r2, #0
 80056b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056b8:	7bfa      	ldrb	r2, [r7, #15]
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	3344      	adds	r3, #68	; 0x44
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056cc:	7bfa      	ldrb	r2, [r7, #15]
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	4613      	mov	r3, r2
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	1a9b      	subs	r3, r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	440b      	add	r3, r1
 80056da:	3348      	adds	r3, #72	; 0x48
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056e0:	7bfa      	ldrb	r2, [r7, #15]
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	3350      	adds	r3, #80	; 0x50
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	3301      	adds	r3, #1
 80056f8:	73fb      	strb	r3, [r7, #15]
 80056fa:	7bfa      	ldrb	r2, [r7, #15]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	d3af      	bcc.n	8005664 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005704:	2300      	movs	r3, #0
 8005706:	73fb      	strb	r3, [r7, #15]
 8005708:	e044      	b.n	8005794 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800570a:	7bfa      	ldrb	r2, [r7, #15]
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	4613      	mov	r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800571c:	2200      	movs	r2, #0
 800571e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005720:	7bfa      	ldrb	r2, [r7, #15]
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	440b      	add	r3, r1
 800572e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005732:	7bfa      	ldrb	r2, [r7, #15]
 8005734:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005736:	7bfa      	ldrb	r2, [r7, #15]
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005748:	2200      	movs	r2, #0
 800574a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800574c:	7bfa      	ldrb	r2, [r7, #15]
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005762:	7bfa      	ldrb	r2, [r7, #15]
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	4613      	mov	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	1a9b      	subs	r3, r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005778:	7bfa      	ldrb	r2, [r7, #15]
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	1a9b      	subs	r3, r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	3301      	adds	r3, #1
 8005792:	73fb      	strb	r3, [r7, #15]
 8005794:	7bfa      	ldrb	r2, [r7, #15]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	429a      	cmp	r2, r3
 800579c:	d3b5      	bcc.n	800570a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	603b      	str	r3, [r7, #0]
 80057a4:	687e      	ldr	r6, [r7, #4]
 80057a6:	466d      	mov	r5, sp
 80057a8:	f106 0410 	add.w	r4, r6, #16
 80057ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80057bc:	1d33      	adds	r3, r6, #4
 80057be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057c0:	6838      	ldr	r0, [r7, #0]
 80057c2:	f005 fa07 	bl	800abd4 <USB_DevInit>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e00d      	b.n	80057f4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f006 f9fc 	bl	800bbea <USB_DevDisconnect>

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_PCD_Start+0x1c>
 8005814:	2302      	movs	r3, #2
 8005816:	e020      	b.n	800585a <HAL_PCD_Start+0x5e>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005824:	2b01      	cmp	r3, #1
 8005826:	d109      	bne.n	800583c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800582c:	2b01      	cmp	r3, #1
 800582e:	d005      	beq.n	800583c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4618      	mov	r0, r3
 8005842:	f006 f9ba 	bl	800bbba <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f005 f976 	bl	800ab3c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005862:	b590      	push	{r4, r7, lr}
 8005864:	b08d      	sub	sp, #52	; 0x34
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f006 fa61 	bl	800bd40 <USB_GetMode>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	f040 838e 	bne.w	8005fa2 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f006 f9c5 	bl	800bc1a <USB_ReadInterrupts>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 8384 	beq.w	8005fa0 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4618      	mov	r0, r3
 800589e:	f006 f9bc 	bl	800bc1a <USB_ReadInterrupts>
 80058a2:	4603      	mov	r3, r0
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d107      	bne.n	80058bc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695a      	ldr	r2, [r3, #20]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f002 0202 	and.w	r2, r2, #2
 80058ba:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f006 f9aa 	bl	800bc1a <USB_ReadInterrupts>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058d0:	d17b      	bne.n	80059ca <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f006 f9b0 	bl	800bc40 <USB_ReadDevAllOutEpInterrupt>
 80058e0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80058e2:	e06f      	b.n	80059c4 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d064      	beq.n	80059b8 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	4611      	mov	r1, r2
 80058f8:	4618      	mov	r0, r3
 80058fa:	f006 f9d5 	bl	800bca8 <USB_ReadDevOutEPInterrupt>
 80058fe:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00c      	beq.n	8005924 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005916:	461a      	mov	r2, r3
 8005918:	2301      	movs	r3, #1
 800591a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800591c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fe0e 	bl	8006540 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00c      	beq.n	8005948 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800592e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 ff0d 	bl	8006750 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005942:	461a      	mov	r2, r3
 8005944:	2308      	movs	r3, #8
 8005946:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	2b00      	cmp	r3, #0
 8005950:	d008      	beq.n	8005964 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595e:	461a      	mov	r2, r3
 8005960:	2310      	movs	r3, #16
 8005962:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b00      	cmp	r3, #0
 800596c:	d015      	beq.n	800599a <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d108      	bne.n	8005988 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005980:	461a      	mov	r2, r3
 8005982:	2101      	movs	r1, #1
 8005984:	f006 fa20 	bl	800bdc8 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005994:	461a      	mov	r2, r3
 8005996:	2320      	movs	r3, #32
 8005998:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d009      	beq.n	80059b8 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b0:	461a      	mov	r2, r3
 80059b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059b6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	3301      	adds	r3, #1
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	085b      	lsrs	r3, r3, #1
 80059c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d18c      	bne.n	80058e4 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f006 f923 	bl	800bc1a <USB_ReadInterrupts>
 80059d4:	4603      	mov	r3, r0
 80059d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059de:	f040 80c4 	bne.w	8005b6a <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f006 f944 	bl	800bc74 <USB_ReadDevAllInEpInterrupt>
 80059ec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80059f2:	e0b6      	b.n	8005b62 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 80ab 	beq.w	8005b56 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	4611      	mov	r1, r2
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f006 f96a 	bl	800bce4 <USB_ReadDevInEPInterrupt>
 8005a10:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d05b      	beq.n	8005ad4 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	2201      	movs	r2, #1
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	43db      	mvns	r3, r3
 8005a36:	69f9      	ldr	r1, [r7, #28]
 8005a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	2301      	movs	r3, #1
 8005a50:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d11b      	bne.n	8005a92 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5e:	4613      	mov	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	3348      	adds	r3, #72	; 0x48
 8005a6a:	6819      	ldr	r1, [r3, #0]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a70:	4613      	mov	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4403      	add	r3, r0
 8005a7a:	3344      	adds	r3, #68	; 0x44
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4419      	add	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a84:	4613      	mov	r3, r2
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	1a9b      	subs	r3, r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4403      	add	r3, r0
 8005a8e:	3348      	adds	r3, #72	; 0x48
 8005a90:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	4619      	mov	r1, r3
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f009 fb58 	bl	800f14e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d116      	bne.n	8005ad4 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d113      	bne.n	8005ad4 <HAL_PCD_IRQHandler+0x272>
 8005aac:	6879      	ldr	r1, [r7, #4]
 8005aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	3350      	adds	r3, #80	; 0x50
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d108      	bne.n	8005ad4 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6818      	ldr	r0, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005acc:	461a      	mov	r2, r3
 8005ace:	2101      	movs	r1, #1
 8005ad0:	f006 f97a 	bl	800bdc8 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d008      	beq.n	8005af0 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aea:	461a      	mov	r2, r3
 8005aec:	2308      	movs	r3, #8
 8005aee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d008      	beq.n	8005b0c <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b06:	461a      	mov	r2, r3
 8005b08:	2310      	movs	r3, #16
 8005b0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d008      	beq.n	8005b28 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b22:	461a      	mov	r2, r3
 8005b24:	2340      	movs	r3, #64	; 0x40
 8005b26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d008      	beq.n	8005b44 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3e:	461a      	mov	r2, r3
 8005b40:	2302      	movs	r3, #2
 8005b42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005b4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fc67 	bl	8006424 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	3301      	adds	r3, #1
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5e:	085b      	lsrs	r3, r3, #1
 8005b60:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f47f af45 	bne.w	80059f4 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f006 f853 	bl	800bc1a <USB_ReadInterrupts>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b7e:	d122      	bne.n	8005bc6 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	69fa      	ldr	r2, [r7, #28]
 8005b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b8e:	f023 0301 	bic.w	r3, r3, #1
 8005b92:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d108      	bne.n	8005bb0 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fe89 	bl	80068c0 <HAL_PCDEx_LPM_Callback>
 8005bae:	e002      	b.n	8005bb6 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f009 fb43 	bl	800f23c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695a      	ldr	r2, [r3, #20]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f006 f825 	bl	800bc1a <USB_ReadInterrupts>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bda:	d112      	bne.n	8005c02 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d102      	bne.n	8005bf2 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f009 faff 	bl	800f1f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695a      	ldr	r2, [r3, #20]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005c00:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f006 f807 	bl	800bc1a <USB_ReadInterrupts>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c16:	f040 80a7 	bne.w	8005d68 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	69fa      	ldr	r2, [r7, #28]
 8005c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c28:	f023 0301 	bic.w	r3, r3, #1
 8005c2c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2110      	movs	r1, #16
 8005c34:	4618      	mov	r0, r3
 8005c36:	f005 f93f 	bl	800aeb8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c3e:	e036      	b.n	8005cae <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c52:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c80:	461a      	mov	r2, r3
 8005c82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c86:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c98:	0151      	lsls	r1, r2, #5
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	440a      	add	r2, r1
 8005c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ca6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005caa:	3301      	adds	r3, #1
 8005cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d3c3      	bcc.n	8005c40 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cc6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005cca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d016      	beq.n	8005d02 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cde:	69fa      	ldr	r2, [r7, #28]
 8005ce0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ce4:	f043 030b 	orr.w	r3, r3, #11
 8005ce8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cfa:	f043 030b 	orr.w	r3, r3, #11
 8005cfe:	6453      	str	r3, [r2, #68]	; 0x44
 8005d00:	e015      	b.n	8005d2e <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d14:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005d18:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	69fa      	ldr	r2, [r7, #28]
 8005d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d28:	f043 030b 	orr.w	r3, r3, #11
 8005d2c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d3c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d40:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d52:	461a      	mov	r2, r3
 8005d54:	f006 f838 	bl	800bdc8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695a      	ldr	r2, [r3, #20]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005d66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f005 ff54 	bl	800bc1a <USB_ReadInterrupts>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d7c:	d124      	bne.n	8005dc8 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f005 ffea 	bl	800bd5c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f005 f8f4 	bl	800af7a <USB_GetDevSpeed>
 8005d92:	4603      	mov	r3, r0
 8005d94:	461a      	mov	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681c      	ldr	r4, [r3, #0]
 8005d9e:	f001 f971 	bl	8007084 <HAL_RCC_GetHCLKFreq>
 8005da2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	461a      	mov	r2, r3
 8005dac:	4620      	mov	r0, r4
 8005dae:	f004 fe23 	bl	800a9f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f009 f9f3 	bl	800f19e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695a      	ldr	r2, [r3, #20]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f005 ff24 	bl	800bc1a <USB_ReadInterrupts>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b10      	cmp	r3, #16
 8005dda:	d161      	bne.n	8005ea0 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0210 	bic.w	r2, r2, #16
 8005dea:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f003 020f 	and.w	r2, r3, #15
 8005df8:	4613      	mov	r3, r2
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	1a9b      	subs	r3, r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	4413      	add	r3, r2
 8005e08:	3304      	adds	r3, #4
 8005e0a:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	0c5b      	lsrs	r3, r3, #17
 8005e10:	f003 030f 	and.w	r3, r3, #15
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d124      	bne.n	8005e62 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005e1e:	4013      	ands	r3, r2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d035      	beq.n	8005e90 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	091b      	lsrs	r3, r3, #4
 8005e2c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	6a38      	ldr	r0, [r7, #32]
 8005e38:	f005 fd9c 	bl	800b974 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	091b      	lsrs	r3, r3, #4
 8005e44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e48:	441a      	add	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	091b      	lsrs	r3, r3, #4
 8005e56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e5a:	441a      	add	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	619a      	str	r2, [r3, #24]
 8005e60:	e016      	b.n	8005e90 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	0c5b      	lsrs	r3, r3, #17
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	2b06      	cmp	r3, #6
 8005e6c:	d110      	bne.n	8005e90 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e74:	2208      	movs	r2, #8
 8005e76:	4619      	mov	r1, r3
 8005e78:	6a38      	ldr	r0, [r7, #32]
 8005e7a:	f005 fd7b 	bl	800b974 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	699a      	ldr	r2, [r3, #24]
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	091b      	lsrs	r3, r3, #4
 8005e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e8a:	441a      	add	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699a      	ldr	r2, [r3, #24]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0210 	orr.w	r2, r2, #16
 8005e9e:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f005 feb8 	bl	800bc1a <USB_ReadInterrupts>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f003 0308 	and.w	r3, r3, #8
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d10a      	bne.n	8005eca <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f009 f964 	bl	800f182 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695a      	ldr	r2, [r3, #20]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f002 0208 	and.w	r2, r2, #8
 8005ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f005 fea3 	bl	800bc1a <USB_ReadInterrupts>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ede:	d10f      	bne.n	8005f00 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f009 f9c6 	bl	800f27c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695a      	ldr	r2, [r3, #20]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005efe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f005 fe88 	bl	800bc1a <USB_ReadInterrupts>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f14:	d10f      	bne.n	8005f36 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f009 f999 	bl	800f258 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	695a      	ldr	r2, [r3, #20]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005f34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f005 fe6d 	bl	800bc1a <USB_ReadInterrupts>
 8005f40:	4603      	mov	r3, r0
 8005f42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4a:	d10a      	bne.n	8005f62 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f009 f9a7 	bl	800f2a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	695a      	ldr	r2, [r3, #20]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005f60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f005 fe57 	bl	800bc1a <USB_ReadInterrupts>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	f003 0304 	and.w	r3, r3, #4
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d115      	bne.n	8005fa2 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f009 f997 	bl	800f2bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6859      	ldr	r1, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	605a      	str	r2, [r3, #4]
 8005f9e:	e000      	b.n	8005fa2 <HAL_PCD_IRQHandler+0x740>
      return;
 8005fa0:	bf00      	nop
    }
  }
}
 8005fa2:	3734      	adds	r7, #52	; 0x34
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd90      	pop	{r4, r7, pc}

08005fa8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_PCD_SetAddress+0x1a>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e013      	b.n	8005fea <HAL_PCD_SetAddress+0x42>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	78fa      	ldrb	r2, [r7, #3]
 8005fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	78fa      	ldrb	r2, [r7, #3]
 8005fd8:	4611      	mov	r1, r2
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f005 fdc7 	bl	800bb6e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	4608      	mov	r0, r1
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	461a      	mov	r2, r3
 8006000:	4603      	mov	r3, r0
 8006002:	70fb      	strb	r3, [r7, #3]
 8006004:	460b      	mov	r3, r1
 8006006:	803b      	strh	r3, [r7, #0]
 8006008:	4613      	mov	r3, r2
 800600a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800600c:	2300      	movs	r3, #0
 800600e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006014:	2b00      	cmp	r3, #0
 8006016:	da0f      	bge.n	8006038 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	f003 020f 	and.w	r2, r3, #15
 800601e:	4613      	mov	r3, r2
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	3338      	adds	r3, #56	; 0x38
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	4413      	add	r3, r2
 800602c:	3304      	adds	r3, #4
 800602e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	705a      	strb	r2, [r3, #1]
 8006036:	e00f      	b.n	8006058 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	f003 020f 	and.w	r2, r3, #15
 800603e:	4613      	mov	r3, r2
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	1a9b      	subs	r3, r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	4413      	add	r3, r2
 800604e:	3304      	adds	r3, #4
 8006050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	f003 030f 	and.w	r3, r3, #15
 800605e:	b2da      	uxtb	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006064:	883a      	ldrh	r2, [r7, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	78ba      	ldrb	r2, [r7, #2]
 800606e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	785b      	ldrb	r3, [r3, #1]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d004      	beq.n	8006082 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	b29a      	uxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006082:	78bb      	ldrb	r3, [r7, #2]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d102      	bne.n	800608e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_PCD_EP_Open+0xaa>
 8006098:	2302      	movs	r3, #2
 800609a:	e00e      	b.n	80060ba <HAL_PCD_EP_Open+0xc8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68f9      	ldr	r1, [r7, #12]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f004 ff8a 	bl	800afc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80060b8:	7afb      	ldrb	r3, [r7, #11]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	460b      	mov	r3, r1
 80060cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	da0f      	bge.n	80060f6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	f003 020f 	and.w	r2, r3, #15
 80060dc:	4613      	mov	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	1a9b      	subs	r3, r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	3338      	adds	r3, #56	; 0x38
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	4413      	add	r3, r2
 80060ea:	3304      	adds	r3, #4
 80060ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2201      	movs	r2, #1
 80060f2:	705a      	strb	r2, [r3, #1]
 80060f4:	e00f      	b.n	8006116 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	f003 020f 	and.w	r2, r3, #15
 80060fc:	4613      	mov	r3, r2
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	1a9b      	subs	r3, r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	4413      	add	r3, r2
 800610c:	3304      	adds	r3, #4
 800610e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006116:	78fb      	ldrb	r3, [r7, #3]
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	b2da      	uxtb	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_PCD_EP_Close+0x6e>
 800612c:	2302      	movs	r3, #2
 800612e:	e00e      	b.n	800614e <HAL_PCD_EP_Close+0x8c>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68f9      	ldr	r1, [r7, #12]
 800613e:	4618      	mov	r0, r3
 8006140:	f004 ffc8 	bl	800b0d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b086      	sub	sp, #24
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	603b      	str	r3, [r7, #0]
 8006162:	460b      	mov	r3, r1
 8006164:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006166:	7afb      	ldrb	r3, [r7, #11]
 8006168:	f003 020f 	and.w	r2, r3, #15
 800616c:	4613      	mov	r3, r2
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	1a9b      	subs	r3, r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4413      	add	r3, r2
 800617c:	3304      	adds	r3, #4
 800617e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2200      	movs	r2, #0
 8006190:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2200      	movs	r2, #0
 8006196:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006198:	7afb      	ldrb	r3, [r7, #11]
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d102      	bne.n	80061b2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061b2:	7afb      	ldrb	r3, [r7, #11]
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d109      	bne.n	80061d0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	461a      	mov	r2, r3
 80061c8:	6979      	ldr	r1, [r7, #20]
 80061ca:	f005 fa4b 	bl	800b664 <USB_EP0StartXfer>
 80061ce:	e008      	b.n	80061e2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6818      	ldr	r0, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	461a      	mov	r2, r3
 80061dc:	6979      	ldr	r1, [r7, #20]
 80061de:	f004 fffd 	bl	800b1dc <USB_EPStartXfer>
  }

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80061f8:	78fb      	ldrb	r3, [r7, #3]
 80061fa:	f003 020f 	and.w	r2, r3, #15
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800620e:	681b      	ldr	r3, [r3, #0]
}
 8006210:	4618      	mov	r0, r3
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	607a      	str	r2, [r7, #4]
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	460b      	mov	r3, r1
 800622a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800622c:	7afb      	ldrb	r3, [r7, #11]
 800622e:	f003 020f 	and.w	r2, r3, #15
 8006232:	4613      	mov	r3, r2
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	1a9b      	subs	r3, r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	3338      	adds	r3, #56	; 0x38
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4413      	add	r3, r2
 8006240:	3304      	adds	r3, #4
 8006242:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2200      	movs	r2, #0
 8006254:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2201      	movs	r2, #1
 800625a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800625c:	7afb      	ldrb	r3, [r7, #11]
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	b2da      	uxtb	r2, r3
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d102      	bne.n	8006276 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006276:	7afb      	ldrb	r3, [r7, #11]
 8006278:	f003 030f 	and.w	r3, r3, #15
 800627c:	2b00      	cmp	r3, #0
 800627e:	d109      	bne.n	8006294 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6818      	ldr	r0, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	461a      	mov	r2, r3
 800628c:	6979      	ldr	r1, [r7, #20]
 800628e:	f005 f9e9 	bl	800b664 <USB_EP0StartXfer>
 8006292:	e008      	b.n	80062a6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6818      	ldr	r0, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	6979      	ldr	r1, [r7, #20]
 80062a2:	f004 ff9b 	bl	800b1dc <USB_EPStartXfer>
  }

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80062bc:	78fb      	ldrb	r3, [r7, #3]
 80062be:	f003 020f 	and.w	r2, r3, #15
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d901      	bls.n	80062ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e050      	b.n	8006370 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80062ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	da0f      	bge.n	80062f6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	f003 020f 	and.w	r2, r3, #15
 80062dc:	4613      	mov	r3, r2
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	3338      	adds	r3, #56	; 0x38
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	4413      	add	r3, r2
 80062ea:	3304      	adds	r3, #4
 80062ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	705a      	strb	r2, [r3, #1]
 80062f4:	e00d      	b.n	8006312 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062f6:	78fa      	ldrb	r2, [r7, #3]
 80062f8:	4613      	mov	r3, r2
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	4413      	add	r3, r2
 8006308:	3304      	adds	r3, #4
 800630a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2201      	movs	r2, #1
 8006316:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	b2da      	uxtb	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800632a:	2b01      	cmp	r3, #1
 800632c:	d101      	bne.n	8006332 <HAL_PCD_EP_SetStall+0x82>
 800632e:	2302      	movs	r3, #2
 8006330:	e01e      	b.n	8006370 <HAL_PCD_EP_SetStall+0xc0>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68f9      	ldr	r1, [r7, #12]
 8006340:	4618      	mov	r0, r3
 8006342:	f005 fb40 	bl	800b9c6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10a      	bne.n	8006366 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6818      	ldr	r0, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	b2d9      	uxtb	r1, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006360:	461a      	mov	r2, r3
 8006362:	f005 fd31 	bl	800bdc8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	f003 020f 	and.w	r2, r3, #15
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	429a      	cmp	r2, r3
 8006390:	d901      	bls.n	8006396 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e042      	b.n	800641c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006396:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800639a:	2b00      	cmp	r3, #0
 800639c:	da0f      	bge.n	80063be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	f003 020f 	and.w	r2, r3, #15
 80063a4:	4613      	mov	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	1a9b      	subs	r3, r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	3338      	adds	r3, #56	; 0x38
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	4413      	add	r3, r2
 80063b2:	3304      	adds	r3, #4
 80063b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	705a      	strb	r2, [r3, #1]
 80063bc:	e00f      	b.n	80063de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063be:	78fb      	ldrb	r3, [r7, #3]
 80063c0:	f003 020f 	and.w	r2, r3, #15
 80063c4:	4613      	mov	r3, r2
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	1a9b      	subs	r3, r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	4413      	add	r3, r2
 80063d4:	3304      	adds	r3, #4
 80063d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <HAL_PCD_EP_ClrStall+0x86>
 80063fa:	2302      	movs	r3, #2
 80063fc:	e00e      	b.n	800641c <HAL_PCD_EP_ClrStall+0xa4>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68f9      	ldr	r1, [r7, #12]
 800640c:	4618      	mov	r0, r3
 800640e:	f005 fb48 	bl	800baa2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08a      	sub	sp, #40	; 0x28
 8006428:	af02      	add	r7, sp, #8
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	4613      	mov	r3, r2
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	1a9b      	subs	r3, r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	3338      	adds	r3, #56	; 0x38
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	4413      	add	r3, r2
 8006448:	3304      	adds	r3, #4
 800644a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	699a      	ldr	r2, [r3, #24]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	429a      	cmp	r2, r3
 8006456:	d901      	bls.n	800645c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e06c      	b.n	8006536 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	695a      	ldr	r2, [r3, #20]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	69fa      	ldr	r2, [r7, #28]
 800646e:	429a      	cmp	r2, r3
 8006470:	d902      	bls.n	8006478 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	3303      	adds	r3, #3
 800647c:	089b      	lsrs	r3, r3, #2
 800647e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006480:	e02b      	b.n	80064da <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	695a      	ldr	r2, [r3, #20]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	69fa      	ldr	r2, [r7, #28]
 8006494:	429a      	cmp	r2, r3
 8006496:	d902      	bls.n	800649e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	3303      	adds	r3, #3
 80064a2:	089b      	lsrs	r3, r3, #2
 80064a4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	68d9      	ldr	r1, [r3, #12]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	4603      	mov	r3, r0
 80064bc:	6978      	ldr	r0, [r7, #20]
 80064be:	f005 fa24 	bl	800b90a <USB_WritePacket>

    ep->xfer_buff  += len;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	441a      	add	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	441a      	add	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d809      	bhi.n	8006504 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	699a      	ldr	r2, [r3, #24]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d203      	bcs.n	8006504 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1be      	bne.n	8006482 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	695a      	ldr	r2, [r3, #20]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	429a      	cmp	r2, r3
 800650e:	d811      	bhi.n	8006534 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	2201      	movs	r2, #1
 8006518:	fa02 f303 	lsl.w	r3, r2, r3
 800651c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	43db      	mvns	r3, r3
 800652a:	6939      	ldr	r1, [r7, #16]
 800652c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006530:	4013      	ands	r3, r2
 8006532:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3720      	adds	r7, #32
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	333c      	adds	r3, #60	; 0x3c
 8006558:	3304      	adds	r3, #4
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	2b01      	cmp	r3, #1
 8006574:	f040 80b3 	bne.w	80066de <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f003 0308 	and.w	r3, r3, #8
 800657e:	2b00      	cmp	r3, #0
 8006580:	d028      	beq.n	80065d4 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4a70      	ldr	r2, [pc, #448]	; (8006748 <PCD_EP_OutXfrComplete_int+0x208>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d90e      	bls.n	80065a8 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006590:	2b00      	cmp	r3, #0
 8006592:	d009      	beq.n	80065a8 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a0:	461a      	mov	r2, r3
 80065a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a6:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f008 fda3 	bl	800f0f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80065b8:	461a      	mov	r2, r3
 80065ba:	2101      	movs	r1, #1
 80065bc:	f005 fc04 	bl	800bdc8 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065cc:	461a      	mov	r2, r3
 80065ce:	2308      	movs	r3, #8
 80065d0:	6093      	str	r3, [r2, #8]
 80065d2:	e0b3      	b.n	800673c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ea:	461a      	mov	r2, r3
 80065ec:	2320      	movs	r3, #32
 80065ee:	6093      	str	r3, [r2, #8]
 80065f0:	e0a4      	b.n	800673c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f040 809f 	bne.w	800673c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4a51      	ldr	r2, [pc, #324]	; (8006748 <PCD_EP_OutXfrComplete_int+0x208>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d90f      	bls.n	8006626 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00a      	beq.n	8006626 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661c:	461a      	mov	r2, r3
 800661e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006622:	6093      	str	r3, [r2, #8]
 8006624:	e08a      	b.n	800673c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	4613      	mov	r3, r2
 800662c:	00db      	lsls	r3, r3, #3
 800662e:	1a9b      	subs	r3, r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	440b      	add	r3, r1
 8006634:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006638:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	0159      	lsls	r1, r3, #5
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	440b      	add	r3, r1
 8006642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800664c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	683a      	ldr	r2, [r7, #0]
 8006652:	4613      	mov	r3, r2
 8006654:	00db      	lsls	r3, r3, #3
 8006656:	1a9b      	subs	r3, r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4403      	add	r3, r0
 800665c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006660:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	4613      	mov	r3, r2
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	1a9b      	subs	r3, r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	440b      	add	r3, r1
 8006670:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006674:	6819      	ldr	r1, [r3, #0]
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	4613      	mov	r3, r2
 800667c:	00db      	lsls	r3, r3, #3
 800667e:	1a9b      	subs	r3, r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4403      	add	r3, r0
 8006684:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4419      	add	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	4613      	mov	r3, r2
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	1a9b      	subs	r3, r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4403      	add	r3, r0
 800669a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800669e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	4619      	mov	r1, r3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f008 fd36 	bl	800f118 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d144      	bne.n	800673c <PCD_EP_OutXfrComplete_int+0x1fc>
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	4613      	mov	r3, r2
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	1a9b      	subs	r3, r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	440b      	add	r3, r1
 80066c0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d138      	bne.n	800673c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6818      	ldr	r0, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066d4:	461a      	mov	r2, r3
 80066d6:	2101      	movs	r1, #1
 80066d8:	f005 fb76 	bl	800bdc8 <USB_EP0_OutStart>
 80066dc:	e02e      	b.n	800673c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	4a1a      	ldr	r2, [pc, #104]	; (800674c <PCD_EP_OutXfrComplete_int+0x20c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d124      	bne.n	8006730 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00a      	beq.n	8006706 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fc:	461a      	mov	r2, r3
 80066fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006702:	6093      	str	r3, [r2, #8]
 8006704:	e01a      	b.n	800673c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f003 0320 	and.w	r3, r3, #32
 800670c:	2b00      	cmp	r3, #0
 800670e:	d008      	beq.n	8006722 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671c:	461a      	mov	r2, r3
 800671e:	2320      	movs	r3, #32
 8006720:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f008 fcf5 	bl	800f118 <HAL_PCD_DataOutStageCallback>
 800672e:	e005      	b.n	800673c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f008 fcee 	bl	800f118 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	4f54300a 	.word	0x4f54300a
 800674c:	4f54310a 	.word	0x4f54310a

08006750 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	333c      	adds	r3, #60	; 0x3c
 8006768:	3304      	adds	r3, #4
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d113      	bne.n	80067ae <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4a1f      	ldr	r2, [pc, #124]	; (8006808 <PCD_EP_OutSetupPacket_int+0xb8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d922      	bls.n	80067d4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01d      	beq.n	80067d4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a4:	461a      	mov	r2, r3
 80067a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067aa:	6093      	str	r3, [r2, #8]
 80067ac:	e012      	b.n	80067d4 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4a16      	ldr	r2, [pc, #88]	; (800680c <PCD_EP_OutSetupPacket_int+0xbc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d10e      	bne.n	80067d4 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d009      	beq.n	80067d4 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067cc:	461a      	mov	r2, r3
 80067ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f008 fc8d 	bl	800f0f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4a0a      	ldr	r2, [pc, #40]	; (8006808 <PCD_EP_OutSetupPacket_int+0xb8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d90c      	bls.n	80067fc <PCD_EP_OutSetupPacket_int+0xac>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d108      	bne.n	80067fc <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80067f4:	461a      	mov	r2, r3
 80067f6:	2101      	movs	r1, #1
 80067f8:	f005 fae6 	bl	800bdc8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	4f54300a 	.word	0x4f54300a
 800680c:	4f54310a 	.word	0x4f54310a

08006810 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	70fb      	strb	r3, [r7, #3]
 800681c:	4613      	mov	r3, r2
 800681e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006828:	78fb      	ldrb	r3, [r7, #3]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d107      	bne.n	800683e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800682e:	883b      	ldrh	r3, [r7, #0]
 8006830:	0419      	lsls	r1, r3, #16
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	430a      	orrs	r2, r1
 800683a:	629a      	str	r2, [r3, #40]	; 0x28
 800683c:	e028      	b.n	8006890 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006844:	0c1b      	lsrs	r3, r3, #16
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	4413      	add	r3, r2
 800684a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800684c:	2300      	movs	r3, #0
 800684e:	73fb      	strb	r3, [r7, #15]
 8006850:	e00d      	b.n	800686e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	3340      	adds	r3, #64	; 0x40
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	0c1b      	lsrs	r3, r3, #16
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	4413      	add	r3, r2
 8006866:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	3301      	adds	r3, #1
 800686c:	73fb      	strb	r3, [r7, #15]
 800686e:	7bfa      	ldrb	r2, [r7, #15]
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	3b01      	subs	r3, #1
 8006874:	429a      	cmp	r2, r3
 8006876:	d3ec      	bcc.n	8006852 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006878:	883b      	ldrh	r3, [r7, #0]
 800687a:	0418      	lsls	r0, r3, #16
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6819      	ldr	r1, [r3, #0]
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	3b01      	subs	r3, #1
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	4302      	orrs	r2, r0
 8006888:	3340      	adds	r3, #64	; 0x40
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	440b      	add	r3, r1
 800688e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	887a      	ldrh	r2, [r7, #2]
 80068b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e22d      	b.n	8006d46 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d075      	beq.n	80069e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068f6:	4ba3      	ldr	r3, [pc, #652]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f003 030c 	and.w	r3, r3, #12
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d00c      	beq.n	800691c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006902:	4ba0      	ldr	r3, [pc, #640]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800690a:	2b08      	cmp	r3, #8
 800690c:	d112      	bne.n	8006934 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800690e:	4b9d      	ldr	r3, [pc, #628]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800691a:	d10b      	bne.n	8006934 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800691c:	4b99      	ldr	r3, [pc, #612]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d05b      	beq.n	80069e0 <HAL_RCC_OscConfig+0x108>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d157      	bne.n	80069e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e208      	b.n	8006d46 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800693c:	d106      	bne.n	800694c <HAL_RCC_OscConfig+0x74>
 800693e:	4b91      	ldr	r3, [pc, #580]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a90      	ldr	r2, [pc, #576]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	e01d      	b.n	8006988 <HAL_RCC_OscConfig+0xb0>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006954:	d10c      	bne.n	8006970 <HAL_RCC_OscConfig+0x98>
 8006956:	4b8b      	ldr	r3, [pc, #556]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a8a      	ldr	r2, [pc, #552]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 800695c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	4b88      	ldr	r3, [pc, #544]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a87      	ldr	r2, [pc, #540]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	e00b      	b.n	8006988 <HAL_RCC_OscConfig+0xb0>
 8006970:	4b84      	ldr	r3, [pc, #528]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a83      	ldr	r2, [pc, #524]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800697a:	6013      	str	r3, [r2, #0]
 800697c:	4b81      	ldr	r3, [pc, #516]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a80      	ldr	r2, [pc, #512]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d013      	beq.n	80069b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006990:	f7fc fff4 	bl	800397c <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006998:	f7fc fff0 	bl	800397c <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b64      	cmp	r3, #100	; 0x64
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e1cd      	b.n	8006d46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069aa:	4b76      	ldr	r3, [pc, #472]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0f0      	beq.n	8006998 <HAL_RCC_OscConfig+0xc0>
 80069b6:	e014      	b.n	80069e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b8:	f7fc ffe0 	bl	800397c <HAL_GetTick>
 80069bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069c0:	f7fc ffdc 	bl	800397c <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b64      	cmp	r3, #100	; 0x64
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e1b9      	b.n	8006d46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069d2:	4b6c      	ldr	r3, [pc, #432]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f0      	bne.n	80069c0 <HAL_RCC_OscConfig+0xe8>
 80069de:	e000      	b.n	80069e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d063      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069ee:	4b65      	ldr	r3, [pc, #404]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 030c 	and.w	r3, r3, #12
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00b      	beq.n	8006a12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069fa:	4b62      	ldr	r3, [pc, #392]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d11c      	bne.n	8006a40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a06:	4b5f      	ldr	r3, [pc, #380]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d116      	bne.n	8006a40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a12:	4b5c      	ldr	r3, [pc, #368]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <HAL_RCC_OscConfig+0x152>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d001      	beq.n	8006a2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e18d      	b.n	8006d46 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a2a:	4b56      	ldr	r3, [pc, #344]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	4952      	ldr	r1, [pc, #328]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a3e:	e03a      	b.n	8006ab6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d020      	beq.n	8006a8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a48:	4b4f      	ldr	r3, [pc, #316]	; (8006b88 <HAL_RCC_OscConfig+0x2b0>)
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4e:	f7fc ff95 	bl	800397c <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a56:	f7fc ff91 	bl	800397c <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e16e      	b.n	8006d46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a68:	4b46      	ldr	r3, [pc, #280]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0f0      	beq.n	8006a56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a74:	4b43      	ldr	r3, [pc, #268]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	4940      	ldr	r1, [pc, #256]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	600b      	str	r3, [r1, #0]
 8006a88:	e015      	b.n	8006ab6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a8a:	4b3f      	ldr	r3, [pc, #252]	; (8006b88 <HAL_RCC_OscConfig+0x2b0>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a90:	f7fc ff74 	bl	800397c <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a98:	f7fc ff70 	bl	800397c <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e14d      	b.n	8006d46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aaa:	4b36      	ldr	r3, [pc, #216]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1f0      	bne.n	8006a98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0308 	and.w	r3, r3, #8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d030      	beq.n	8006b24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d016      	beq.n	8006af8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aca:	4b30      	ldr	r3, [pc, #192]	; (8006b8c <HAL_RCC_OscConfig+0x2b4>)
 8006acc:	2201      	movs	r2, #1
 8006ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad0:	f7fc ff54 	bl	800397c <HAL_GetTick>
 8006ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ad8:	f7fc ff50 	bl	800397c <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e12d      	b.n	8006d46 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aea:	4b26      	ldr	r3, [pc, #152]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0f0      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x200>
 8006af6:	e015      	b.n	8006b24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006af8:	4b24      	ldr	r3, [pc, #144]	; (8006b8c <HAL_RCC_OscConfig+0x2b4>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006afe:	f7fc ff3d 	bl	800397c <HAL_GetTick>
 8006b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b06:	f7fc ff39 	bl	800397c <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e116      	b.n	8006d46 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b18:	4b1a      	ldr	r3, [pc, #104]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1f0      	bne.n	8006b06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 80a0 	beq.w	8006c72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b32:	2300      	movs	r3, #0
 8006b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b36:	4b13      	ldr	r3, [pc, #76]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10f      	bne.n	8006b62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b42:	2300      	movs	r3, #0
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	4b0f      	ldr	r3, [pc, #60]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	4a0e      	ldr	r2, [pc, #56]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b50:	6413      	str	r3, [r2, #64]	; 0x40
 8006b52:	4b0c      	ldr	r3, [pc, #48]	; (8006b84 <HAL_RCC_OscConfig+0x2ac>)
 8006b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b62:	4b0b      	ldr	r3, [pc, #44]	; (8006b90 <HAL_RCC_OscConfig+0x2b8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d121      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b6e:	4b08      	ldr	r3, [pc, #32]	; (8006b90 <HAL_RCC_OscConfig+0x2b8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a07      	ldr	r2, [pc, #28]	; (8006b90 <HAL_RCC_OscConfig+0x2b8>)
 8006b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b7a:	f7fc feff 	bl	800397c <HAL_GetTick>
 8006b7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b80:	e011      	b.n	8006ba6 <HAL_RCC_OscConfig+0x2ce>
 8006b82:	bf00      	nop
 8006b84:	40023800 	.word	0x40023800
 8006b88:	42470000 	.word	0x42470000
 8006b8c:	42470e80 	.word	0x42470e80
 8006b90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b94:	f7fc fef2 	bl	800397c <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e0cf      	b.n	8006d46 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba6:	4b6a      	ldr	r3, [pc, #424]	; (8006d50 <HAL_RCC_OscConfig+0x478>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d0f0      	beq.n	8006b94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d106      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x2f0>
 8006bba:	4b66      	ldr	r3, [pc, #408]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bbe:	4a65      	ldr	r2, [pc, #404]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006bc0:	f043 0301 	orr.w	r3, r3, #1
 8006bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8006bc6:	e01c      	b.n	8006c02 <HAL_RCC_OscConfig+0x32a>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	2b05      	cmp	r3, #5
 8006bce:	d10c      	bne.n	8006bea <HAL_RCC_OscConfig+0x312>
 8006bd0:	4b60      	ldr	r3, [pc, #384]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd4:	4a5f      	ldr	r2, [pc, #380]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006bd6:	f043 0304 	orr.w	r3, r3, #4
 8006bda:	6713      	str	r3, [r2, #112]	; 0x70
 8006bdc:	4b5d      	ldr	r3, [pc, #372]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be0:	4a5c      	ldr	r2, [pc, #368]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006be2:	f043 0301 	orr.w	r3, r3, #1
 8006be6:	6713      	str	r3, [r2, #112]	; 0x70
 8006be8:	e00b      	b.n	8006c02 <HAL_RCC_OscConfig+0x32a>
 8006bea:	4b5a      	ldr	r3, [pc, #360]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bee:	4a59      	ldr	r2, [pc, #356]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006bf0:	f023 0301 	bic.w	r3, r3, #1
 8006bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8006bf6:	4b57      	ldr	r3, [pc, #348]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfa:	4a56      	ldr	r2, [pc, #344]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006bfc:	f023 0304 	bic.w	r3, r3, #4
 8006c00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d015      	beq.n	8006c36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c0a:	f7fc feb7 	bl	800397c <HAL_GetTick>
 8006c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c10:	e00a      	b.n	8006c28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c12:	f7fc feb3 	bl	800397c <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e08e      	b.n	8006d46 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c28:	4b4a      	ldr	r3, [pc, #296]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0ee      	beq.n	8006c12 <HAL_RCC_OscConfig+0x33a>
 8006c34:	e014      	b.n	8006c60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c36:	f7fc fea1 	bl	800397c <HAL_GetTick>
 8006c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c3c:	e00a      	b.n	8006c54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c3e:	f7fc fe9d 	bl	800397c <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d901      	bls.n	8006c54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e078      	b.n	8006d46 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c54:	4b3f      	ldr	r3, [pc, #252]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1ee      	bne.n	8006c3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c60:	7dfb      	ldrb	r3, [r7, #23]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d105      	bne.n	8006c72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c66:	4b3b      	ldr	r3, [pc, #236]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	4a3a      	ldr	r2, [pc, #232]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d064      	beq.n	8006d44 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c7a:	4b36      	ldr	r3, [pc, #216]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f003 030c 	and.w	r3, r3, #12
 8006c82:	2b08      	cmp	r3, #8
 8006c84:	d05c      	beq.n	8006d40 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d141      	bne.n	8006d12 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c8e:	4b32      	ldr	r3, [pc, #200]	; (8006d58 <HAL_RCC_OscConfig+0x480>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c94:	f7fc fe72 	bl	800397c <HAL_GetTick>
 8006c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c9c:	f7fc fe6e 	bl	800397c <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e04b      	b.n	8006d46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cae:	4b29      	ldr	r3, [pc, #164]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1f0      	bne.n	8006c9c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69da      	ldr	r2, [r3, #28]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	019b      	lsls	r3, r3, #6
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd0:	085b      	lsrs	r3, r3, #1
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	041b      	lsls	r3, r3, #16
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cdc:	061b      	lsls	r3, r3, #24
 8006cde:	491d      	ldr	r1, [pc, #116]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ce4:	4b1c      	ldr	r3, [pc, #112]	; (8006d58 <HAL_RCC_OscConfig+0x480>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cea:	f7fc fe47 	bl	800397c <HAL_GetTick>
 8006cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cf0:	e008      	b.n	8006d04 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cf2:	f7fc fe43 	bl	800397c <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e020      	b.n	8006d46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d04:	4b13      	ldr	r3, [pc, #76]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0f0      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x41a>
 8006d10:	e018      	b.n	8006d44 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d12:	4b11      	ldr	r3, [pc, #68]	; (8006d58 <HAL_RCC_OscConfig+0x480>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d18:	f7fc fe30 	bl	800397c <HAL_GetTick>
 8006d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d1e:	e008      	b.n	8006d32 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d20:	f7fc fe2c 	bl	800397c <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e009      	b.n	8006d46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d32:	4b08      	ldr	r3, [pc, #32]	; (8006d54 <HAL_RCC_OscConfig+0x47c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1f0      	bne.n	8006d20 <HAL_RCC_OscConfig+0x448>
 8006d3e:	e001      	b.n	8006d44 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e000      	b.n	8006d46 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	40007000 	.word	0x40007000
 8006d54:	40023800 	.word	0x40023800
 8006d58:	42470060 	.word	0x42470060

08006d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e0ca      	b.n	8006f06 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d70:	4b67      	ldr	r3, [pc, #412]	; (8006f10 <HAL_RCC_ClockConfig+0x1b4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 030f 	and.w	r3, r3, #15
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d90c      	bls.n	8006d98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d7e:	4b64      	ldr	r3, [pc, #400]	; (8006f10 <HAL_RCC_ClockConfig+0x1b4>)
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d86:	4b62      	ldr	r3, [pc, #392]	; (8006f10 <HAL_RCC_ClockConfig+0x1b4>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d001      	beq.n	8006d98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e0b6      	b.n	8006f06 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d020      	beq.n	8006de6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006db0:	4b58      	ldr	r3, [pc, #352]	; (8006f14 <HAL_RCC_ClockConfig+0x1b8>)
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	4a57      	ldr	r2, [pc, #348]	; (8006f14 <HAL_RCC_ClockConfig+0x1b8>)
 8006db6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006dba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0308 	and.w	r3, r3, #8
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d005      	beq.n	8006dd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006dc8:	4b52      	ldr	r3, [pc, #328]	; (8006f14 <HAL_RCC_ClockConfig+0x1b8>)
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	4a51      	ldr	r2, [pc, #324]	; (8006f14 <HAL_RCC_ClockConfig+0x1b8>)
 8006dce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006dd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dd4:	4b4f      	ldr	r3, [pc, #316]	; (8006f14 <HAL_RCC_ClockConfig+0x1b8>)
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	494c      	ldr	r1, [pc, #304]	; (8006f14 <HAL_RCC_ClockConfig+0x1b8>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d044      	beq.n	8006e7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d107      	bne.n	8006e0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dfa:	4b46      	ldr	r3, [pc, #280]	; (8006f14 <HAL_RCC_ClockConfig+0x1b8>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d119      	bne.n	8006e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e07d      	b.n	8006f06 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d003      	beq.n	8006e1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d107      	bne.n	8006e2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e1a:	4b3e      	ldr	r3, [pc, #248]	; (8006f14 <HAL_RCC_ClockConfig+0x1b8>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d109      	bne.n	8006e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e06d      	b.n	8006f06 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e2a:	4b3a      	ldr	r3, [pc, #232]	; (8006f14 <HAL_RCC_ClockConfig+0x1b8>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e065      	b.n	8006f06 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e3a:	4b36      	ldr	r3, [pc, #216]	; (8006f14 <HAL_RCC_ClockConfig+0x1b8>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f023 0203 	bic.w	r2, r3, #3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	4933      	ldr	r1, [pc, #204]	; (8006f14 <HAL_RCC_ClockConfig+0x1b8>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e4c:	f7fc fd96 	bl	800397c <HAL_GetTick>
 8006e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e52:	e00a      	b.n	8006e6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e54:	f7fc fd92 	bl	800397c <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d901      	bls.n	8006e6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e04d      	b.n	8006f06 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e6a:	4b2a      	ldr	r3, [pc, #168]	; (8006f14 <HAL_RCC_ClockConfig+0x1b8>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f003 020c 	and.w	r2, r3, #12
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d1eb      	bne.n	8006e54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e7c:	4b24      	ldr	r3, [pc, #144]	; (8006f10 <HAL_RCC_ClockConfig+0x1b4>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 030f 	and.w	r3, r3, #15
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d20c      	bcs.n	8006ea4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e8a:	4b21      	ldr	r3, [pc, #132]	; (8006f10 <HAL_RCC_ClockConfig+0x1b4>)
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e92:	4b1f      	ldr	r3, [pc, #124]	; (8006f10 <HAL_RCC_ClockConfig+0x1b4>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d001      	beq.n	8006ea4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e030      	b.n	8006f06 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d008      	beq.n	8006ec2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006eb0:	4b18      	ldr	r3, [pc, #96]	; (8006f14 <HAL_RCC_ClockConfig+0x1b8>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	4915      	ldr	r1, [pc, #84]	; (8006f14 <HAL_RCC_ClockConfig+0x1b8>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0308 	and.w	r3, r3, #8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d009      	beq.n	8006ee2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ece:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <HAL_RCC_ClockConfig+0x1b8>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	490d      	ldr	r1, [pc, #52]	; (8006f14 <HAL_RCC_ClockConfig+0x1b8>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ee2:	f000 f81d 	bl	8006f20 <HAL_RCC_GetSysClockFreq>
 8006ee6:	4601      	mov	r1, r0
 8006ee8:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <HAL_RCC_ClockConfig+0x1b8>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	091b      	lsrs	r3, r3, #4
 8006eee:	f003 030f 	and.w	r3, r3, #15
 8006ef2:	4a09      	ldr	r2, [pc, #36]	; (8006f18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef4:	5cd3      	ldrb	r3, [r2, r3]
 8006ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8006efa:	4a08      	ldr	r2, [pc, #32]	; (8006f1c <HAL_RCC_ClockConfig+0x1c0>)
 8006efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8006efe:	2000      	movs	r0, #0
 8006f00:	f7fc fcf8 	bl	80038f4 <HAL_InitTick>

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	40023c00 	.word	0x40023c00
 8006f14:	40023800 	.word	0x40023800
 8006f18:	080150c4 	.word	0x080150c4
 8006f1c:	2000015c 	.word	0x2000015c

08006f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	607b      	str	r3, [r7, #4]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	2300      	movs	r3, #0
 8006f30:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f36:	4b50      	ldr	r3, [pc, #320]	; (8007078 <HAL_RCC_GetSysClockFreq+0x158>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f003 030c 	and.w	r3, r3, #12
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	d007      	beq.n	8006f52 <HAL_RCC_GetSysClockFreq+0x32>
 8006f42:	2b08      	cmp	r3, #8
 8006f44:	d008      	beq.n	8006f58 <HAL_RCC_GetSysClockFreq+0x38>
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f040 808d 	bne.w	8007066 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f4c:	4b4b      	ldr	r3, [pc, #300]	; (800707c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006f4e:	60bb      	str	r3, [r7, #8]
       break;
 8006f50:	e08c      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f52:	4b4b      	ldr	r3, [pc, #300]	; (8007080 <HAL_RCC_GetSysClockFreq+0x160>)
 8006f54:	60bb      	str	r3, [r7, #8]
      break;
 8006f56:	e089      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f58:	4b47      	ldr	r3, [pc, #284]	; (8007078 <HAL_RCC_GetSysClockFreq+0x158>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f62:	4b45      	ldr	r3, [pc, #276]	; (8007078 <HAL_RCC_GetSysClockFreq+0x158>)
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d023      	beq.n	8006fb6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f6e:	4b42      	ldr	r3, [pc, #264]	; (8007078 <HAL_RCC_GetSysClockFreq+0x158>)
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	099b      	lsrs	r3, r3, #6
 8006f74:	f04f 0400 	mov.w	r4, #0
 8006f78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f7c:	f04f 0200 	mov.w	r2, #0
 8006f80:	ea03 0501 	and.w	r5, r3, r1
 8006f84:	ea04 0602 	and.w	r6, r4, r2
 8006f88:	4a3d      	ldr	r2, [pc, #244]	; (8007080 <HAL_RCC_GetSysClockFreq+0x160>)
 8006f8a:	fb02 f106 	mul.w	r1, r2, r6
 8006f8e:	2200      	movs	r2, #0
 8006f90:	fb02 f205 	mul.w	r2, r2, r5
 8006f94:	440a      	add	r2, r1
 8006f96:	493a      	ldr	r1, [pc, #232]	; (8007080 <HAL_RCC_GetSysClockFreq+0x160>)
 8006f98:	fba5 0101 	umull	r0, r1, r5, r1
 8006f9c:	1853      	adds	r3, r2, r1
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f04f 0400 	mov.w	r4, #0
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	4623      	mov	r3, r4
 8006faa:	f7f9 fe6d 	bl	8000c88 <__aeabi_uldivmod>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	460c      	mov	r4, r1
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	e049      	b.n	800704a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fb6:	4b30      	ldr	r3, [pc, #192]	; (8007078 <HAL_RCC_GetSysClockFreq+0x158>)
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	099b      	lsrs	r3, r3, #6
 8006fbc:	f04f 0400 	mov.w	r4, #0
 8006fc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	ea03 0501 	and.w	r5, r3, r1
 8006fcc:	ea04 0602 	and.w	r6, r4, r2
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	4632      	mov	r2, r6
 8006fd4:	f04f 0300 	mov.w	r3, #0
 8006fd8:	f04f 0400 	mov.w	r4, #0
 8006fdc:	0154      	lsls	r4, r2, #5
 8006fde:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006fe2:	014b      	lsls	r3, r1, #5
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	1b49      	subs	r1, r1, r5
 8006fea:	eb62 0206 	sbc.w	r2, r2, r6
 8006fee:	f04f 0300 	mov.w	r3, #0
 8006ff2:	f04f 0400 	mov.w	r4, #0
 8006ff6:	0194      	lsls	r4, r2, #6
 8006ff8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006ffc:	018b      	lsls	r3, r1, #6
 8006ffe:	1a5b      	subs	r3, r3, r1
 8007000:	eb64 0402 	sbc.w	r4, r4, r2
 8007004:	f04f 0100 	mov.w	r1, #0
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	00e2      	lsls	r2, r4, #3
 800700e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007012:	00d9      	lsls	r1, r3, #3
 8007014:	460b      	mov	r3, r1
 8007016:	4614      	mov	r4, r2
 8007018:	195b      	adds	r3, r3, r5
 800701a:	eb44 0406 	adc.w	r4, r4, r6
 800701e:	f04f 0100 	mov.w	r1, #0
 8007022:	f04f 0200 	mov.w	r2, #0
 8007026:	02a2      	lsls	r2, r4, #10
 8007028:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800702c:	0299      	lsls	r1, r3, #10
 800702e:	460b      	mov	r3, r1
 8007030:	4614      	mov	r4, r2
 8007032:	4618      	mov	r0, r3
 8007034:	4621      	mov	r1, r4
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f04f 0400 	mov.w	r4, #0
 800703c:	461a      	mov	r2, r3
 800703e:	4623      	mov	r3, r4
 8007040:	f7f9 fe22 	bl	8000c88 <__aeabi_uldivmod>
 8007044:	4603      	mov	r3, r0
 8007046:	460c      	mov	r4, r1
 8007048:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800704a:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <HAL_RCC_GetSysClockFreq+0x158>)
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	0c1b      	lsrs	r3, r3, #16
 8007050:	f003 0303 	and.w	r3, r3, #3
 8007054:	3301      	adds	r3, #1
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007062:	60bb      	str	r3, [r7, #8]
      break;
 8007064:	e002      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007066:	4b05      	ldr	r3, [pc, #20]	; (800707c <HAL_RCC_GetSysClockFreq+0x15c>)
 8007068:	60bb      	str	r3, [r7, #8]
      break;
 800706a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800706c:	68bb      	ldr	r3, [r7, #8]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007076:	bf00      	nop
 8007078:	40023800 	.word	0x40023800
 800707c:	00f42400 	.word	0x00f42400
 8007080:	00b71b00 	.word	0x00b71b00

08007084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007088:	4b03      	ldr	r3, [pc, #12]	; (8007098 <HAL_RCC_GetHCLKFreq+0x14>)
 800708a:	681b      	ldr	r3, [r3, #0]
}
 800708c:	4618      	mov	r0, r3
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	2000015c 	.word	0x2000015c

0800709c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070a0:	f7ff fff0 	bl	8007084 <HAL_RCC_GetHCLKFreq>
 80070a4:	4601      	mov	r1, r0
 80070a6:	4b05      	ldr	r3, [pc, #20]	; (80070bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	0a9b      	lsrs	r3, r3, #10
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	4a03      	ldr	r2, [pc, #12]	; (80070c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070b2:	5cd3      	ldrb	r3, [r2, r3]
 80070b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	40023800 	.word	0x40023800
 80070c0:	080150d4 	.word	0x080150d4

080070c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070c8:	f7ff ffdc 	bl	8007084 <HAL_RCC_GetHCLKFreq>
 80070cc:	4601      	mov	r1, r0
 80070ce:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	0b5b      	lsrs	r3, r3, #13
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	4a03      	ldr	r2, [pc, #12]	; (80070e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070da:	5cd3      	ldrb	r3, [r2, r3]
 80070dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	40023800 	.word	0x40023800
 80070e8:	080150d4 	.word	0x080150d4

080070ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	d105      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007110:	2b00      	cmp	r3, #0
 8007112:	d035      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007114:	4b62      	ldr	r3, [pc, #392]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007116:	2200      	movs	r2, #0
 8007118:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800711a:	f7fc fc2f 	bl	800397c <HAL_GetTick>
 800711e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007120:	e008      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007122:	f7fc fc2b 	bl	800397c <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d901      	bls.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e0b0      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007134:	4b5b      	ldr	r3, [pc, #364]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1f0      	bne.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	019a      	lsls	r2, r3, #6
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	071b      	lsls	r3, r3, #28
 800714c:	4955      	ldr	r1, [pc, #340]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800714e:	4313      	orrs	r3, r2
 8007150:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007154:	4b52      	ldr	r3, [pc, #328]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007156:	2201      	movs	r2, #1
 8007158:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800715a:	f7fc fc0f 	bl	800397c <HAL_GetTick>
 800715e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007160:	e008      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007162:	f7fc fc0b 	bl	800397c <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d901      	bls.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e090      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007174:	4b4b      	ldr	r3, [pc, #300]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0f0      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 8083 	beq.w	8007294 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	4b44      	ldr	r3, [pc, #272]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	4a43      	ldr	r2, [pc, #268]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800719c:	6413      	str	r3, [r2, #64]	; 0x40
 800719e:	4b41      	ldr	r3, [pc, #260]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071aa:	4b3f      	ldr	r3, [pc, #252]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a3e      	ldr	r2, [pc, #248]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071b6:	f7fc fbe1 	bl	800397c <HAL_GetTick>
 80071ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071bc:	e008      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071be:	f7fc fbdd 	bl	800397c <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d901      	bls.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e062      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071d0:	4b35      	ldr	r3, [pc, #212]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0f0      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071dc:	4b31      	ldr	r3, [pc, #196]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d02f      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d028      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071fa:	4b2a      	ldr	r3, [pc, #168]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007202:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007204:	4b29      	ldr	r3, [pc, #164]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007206:	2201      	movs	r2, #1
 8007208:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800720a:	4b28      	ldr	r3, [pc, #160]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007210:	4a24      	ldr	r2, [pc, #144]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007216:	4b23      	ldr	r3, [pc, #140]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b01      	cmp	r3, #1
 8007220:	d114      	bne.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007222:	f7fc fbab 	bl	800397c <HAL_GetTick>
 8007226:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007228:	e00a      	b.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800722a:	f7fc fba7 	bl	800397c <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	f241 3288 	movw	r2, #5000	; 0x1388
 8007238:	4293      	cmp	r3, r2
 800723a:	d901      	bls.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e02a      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007240:	4b18      	ldr	r3, [pc, #96]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0ee      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007258:	d10d      	bne.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800725a:	4b12      	ldr	r3, [pc, #72]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800726a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800726e:	490d      	ldr	r1, [pc, #52]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007270:	4313      	orrs	r3, r2
 8007272:	608b      	str	r3, [r1, #8]
 8007274:	e005      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007276:	4b0b      	ldr	r3, [pc, #44]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	4a0a      	ldr	r2, [pc, #40]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800727c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007280:	6093      	str	r3, [r2, #8]
 8007282:	4b08      	ldr	r3, [pc, #32]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007284:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800728e:	4905      	ldr	r1, [pc, #20]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007290:	4313      	orrs	r3, r2
 8007292:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3718      	adds	r7, #24
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	42470068 	.word	0x42470068
 80072a4:	40023800 	.word	0x40023800
 80072a8:	40007000 	.word	0x40007000
 80072ac:	42470e40 	.word	0x42470e40

080072b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e083      	b.n	80073ca <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	7f5b      	ldrb	r3, [r3, #29]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d105      	bne.n	80072d8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f007 fa80 	bl	800e7d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	22ca      	movs	r2, #202	; 0xca
 80072e4:	625a      	str	r2, [r3, #36]	; 0x24
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2253      	movs	r2, #83	; 0x53
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f897 	bl	8007422 <RTC_EnterInitMode>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d008      	beq.n	800730c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	22ff      	movs	r2, #255	; 0xff
 8007300:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2204      	movs	r2, #4
 8007306:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e05e      	b.n	80073ca <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	6812      	ldr	r2, [r2, #0]
 8007316:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800731a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800731e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6899      	ldr	r1, [r3, #8]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	431a      	orrs	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	431a      	orrs	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	68d2      	ldr	r2, [r2, #12]
 8007346:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6919      	ldr	r1, [r3, #16]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	041a      	lsls	r2, r3, #16
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800736a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10e      	bne.n	8007398 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f829 	bl	80073d2 <HAL_RTC_WaitForSynchro>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d008      	beq.n	8007398 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	22ff      	movs	r2, #255	; 0xff
 800738c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2204      	movs	r2, #4
 8007392:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e018      	b.n	80073ca <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073a6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	699a      	ldr	r2, [r3, #24]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	22ff      	movs	r2, #255	; 0xff
 80073c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80073c8:	2300      	movs	r3, #0
  }
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80073ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073ee:	f7fc fac5 	bl	800397c <HAL_GetTick>
 80073f2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80073f4:	e009      	b.n	800740a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80073f6:	f7fc fac1 	bl	800397c <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007404:	d901      	bls.n	800740a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e007      	b.n	800741a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0ee      	beq.n	80073f6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007438:	2b00      	cmp	r3, #0
 800743a:	d119      	bne.n	8007470 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f04f 32ff 	mov.w	r2, #4294967295
 8007444:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007446:	f7fc fa99 	bl	800397c <HAL_GetTick>
 800744a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800744c:	e009      	b.n	8007462 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800744e:	f7fc fa95 	bl	800397c <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800745c:	d901      	bls.n	8007462 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e007      	b.n	8007472 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0ee      	beq.n	800744e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b082      	sub	sp, #8
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e01d      	b.n	80074c8 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b00      	cmp	r3, #0
 8007496:	d105      	bne.n	80074a4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f007 f9b0 	bl	800e804 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2203      	movs	r2, #3
 80074a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f80f 	bl	80074d0 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80074d0:	b5b0      	push	{r4, r5, r7, lr}
 80074d2:	b08e      	sub	sp, #56	; 0x38
 80074d4:	af04      	add	r7, sp, #16
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80074d8:	2300      	movs	r3, #0
 80074da:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80074e0:	2300      	movs	r3, #0
 80074e2:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80074e4:	2300      	movs	r3, #0
 80074e6:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80074e8:	2300      	movs	r3, #0
 80074ea:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80074ec:	2300      	movs	r3, #0
 80074ee:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80074f0:	2376      	movs	r3, #118	; 0x76
 80074f2:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681d      	ldr	r5, [r3, #0]
 80074f8:	466c      	mov	r4, sp
 80074fa:	f107 0318 	add.w	r3, r7, #24
 80074fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007502:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007506:	f107 030c 	add.w	r3, r7, #12
 800750a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800750c:	4628      	mov	r0, r5
 800750e:	f002 fcb1 	bl	8009e74 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8007512:	4b1c      	ldr	r3, [pc, #112]	; (8007584 <HAL_SD_InitCard+0xb4>)
 8007514:	2200      	movs	r2, #0
 8007516:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4618      	mov	r0, r3
 800751e:	f002 fcf2 	bl	8009f06 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007522:	4b18      	ldr	r3, [pc, #96]	; (8007584 <HAL_SD_InitCard+0xb4>)
 8007524:	2201      	movs	r2, #1
 8007526:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8007528:	2002      	movs	r0, #2
 800752a:	f7fc fa33 	bl	8003994 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fffe 	bl	8008530 <SD_PowerON>
 8007534:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00b      	beq.n	8007554 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	431a      	orrs	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e013      	b.n	800757c <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 ff22 	bl	800839e <SD_InitCard>
 800755a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00b      	beq.n	800757a <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	431a      	orrs	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e000      	b.n	800757c <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3728      	adds	r7, #40	; 0x28
 8007580:	46bd      	mov	sp, r7
 8007582:	bdb0      	pop	{r4, r5, r7, pc}
 8007584:	422580a0 	.word	0x422580a0

08007588 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08c      	sub	sp, #48	; 0x30
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007596:	2300      	movs	r3, #0
 8007598:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d107      	bne.n	80075b0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e0ad      	b.n	800770c <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	f040 80a6 	bne.w	800770a <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	441a      	add	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d907      	bls.n	80075e2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e094      	b.n	800770c <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2203      	movs	r2, #3
 80075e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2200      	movs	r2, #0
 80075f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	6812      	ldr	r2, [r2, #0]
 80075fc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8007600:	f043 0302 	orr.w	r3, r3, #2
 8007604:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760a:	4a42      	ldr	r2, [pc, #264]	; (8007714 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800760c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007612:	4a41      	ldr	r2, [pc, #260]	; (8007718 <HAL_SD_ReadBlocks_DMA+0x190>)
 8007614:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761a:	2200      	movs	r2, #0
 800761c:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3380      	adds	r3, #128	; 0x80
 8007628:	4619      	mov	r1, r3
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	025b      	lsls	r3, r3, #9
 8007630:	089b      	lsrs	r3, r3, #2
 8007632:	f7fc fb91 	bl	8003d58 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007636:	4b39      	ldr	r3, [pc, #228]	; (800771c <HAL_SD_ReadBlocks_DMA+0x194>)
 8007638:	2201      	movs	r2, #1
 800763a:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007640:	2b01      	cmp	r3, #1
 8007642:	d002      	beq.n	800764a <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	025b      	lsls	r3, r3, #9
 8007648:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800764a:	f04f 33ff 	mov.w	r3, #4294967295
 800764e:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	025b      	lsls	r3, r3, #9
 8007654:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007656:	2390      	movs	r3, #144	; 0x90
 8007658:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800765a:	2302      	movs	r3, #2
 800765c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800765e:	2300      	movs	r3, #0
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007662:	2301      	movs	r3, #1
 8007664:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f107 0214 	add.w	r2, r7, #20
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f002 fcb0 	bl	8009fd6 <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800767e:	4618      	mov	r0, r3
 8007680:	f002 fcd5 	bl	800a02e <SDMMC_CmdBlockLength>
 8007684:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007688:	2b00      	cmp	r3, #0
 800768a:	d010      	beq.n	80076ae <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007694:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800769a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769c:	431a      	orrs	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e02e      	b.n	800770c <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d90a      	bls.n	80076ca <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2282      	movs	r2, #130	; 0x82
 80076b8:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f002 fcfc 	bl	800a0be <SDMMC_CmdReadMultiBlock>
 80076c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80076c8:	e009      	b.n	80076de <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2281      	movs	r2, #129	; 0x81
 80076ce:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f002 fccd 	bl	800a076 <SDMMC_CmdReadSingleBlock>
 80076dc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80076de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d010      	beq.n	8007706 <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80076ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f4:	431a      	orrs	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e002      	b.n	800770c <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	e000      	b.n	800770c <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 800770a:	2302      	movs	r3, #2
  }
}
 800770c:	4618      	mov	r0, r3
 800770e:	3730      	adds	r7, #48	; 0x30
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	080081af 	.word	0x080081af
 8007718:	0800821d 	.word	0x0800821d
 800771c:	4225858c 	.word	0x4225858c

08007720 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08c      	sub	sp, #48	; 0x30
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800772e:	2300      	movs	r3, #0
 8007730:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d107      	bne.n	8007748 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e0ad      	b.n	80078a4 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b01      	cmp	r3, #1
 8007752:	f040 80a6 	bne.w	80078a2 <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	441a      	add	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007766:	429a      	cmp	r2, r3
 8007768:	d907      	bls.n	800777a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e094      	b.n	80078a4 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2203      	movs	r2, #3
 800777e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2200      	movs	r2, #0
 8007788:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	6812      	ldr	r2, [r2, #0]
 8007794:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8007798:	f043 0302 	orr.w	r3, r3, #2
 800779c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	4a42      	ldr	r2, [pc, #264]	; (80078ac <HAL_SD_WriteBlocks_DMA+0x18c>)
 80077a4:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	4a41      	ldr	r2, [pc, #260]	; (80078b0 <HAL_SD_WriteBlocks_DMA+0x190>)
 80077ac:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	2200      	movs	r2, #0
 80077b4:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d002      	beq.n	80077c4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	025b      	lsls	r3, r3, #9
 80077c2:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80077cc:	4618      	mov	r0, r3
 80077ce:	f002 fc2e 	bl	800a02e <SDMMC_CmdBlockLength>
 80077d2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80077d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d010      	beq.n	80077fc <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80077e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ea:	431a      	orrs	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e053      	b.n	80078a4 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d90a      	bls.n	8007818 <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	22a0      	movs	r2, #160	; 0xa0
 8007806:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6879      	ldr	r1, [r7, #4]
 800780e:	4618      	mov	r0, r3
 8007810:	f002 fc9d 	bl	800a14e <SDMMC_CmdWriteMultiBlock>
 8007814:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007816:	e009      	b.n	800782c <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2290      	movs	r2, #144	; 0x90
 800781c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	4618      	mov	r0, r3
 8007826:	f002 fc6e 	bl	800a106 <SDMMC_CmdWriteSingleBlock>
 800782a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800782c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782e:	2b00      	cmp	r3, #0
 8007830:	d010      	beq.n	8007854 <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800783a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	431a      	orrs	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e027      	b.n	80078a4 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007854:	4b17      	ldr	r3, [pc, #92]	; (80078b4 <HAL_SD_WriteBlocks_DMA+0x194>)
 8007856:	2201      	movs	r2, #1
 8007858:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800785e:	68b9      	ldr	r1, [r7, #8]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3380      	adds	r3, #128	; 0x80
 8007866:	461a      	mov	r2, r3
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	025b      	lsls	r3, r3, #9
 800786c:	089b      	lsrs	r3, r3, #2
 800786e:	f7fc fa73 	bl	8003d58 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007872:	f04f 33ff 	mov.w	r3, #4294967295
 8007876:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	025b      	lsls	r3, r3, #9
 800787c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800787e:	2390      	movs	r3, #144	; 0x90
 8007880:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007882:	2300      	movs	r3, #0
 8007884:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007886:	2300      	movs	r3, #0
 8007888:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800788a:	2301      	movs	r3, #1
 800788c:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f107 0214 	add.w	r2, r7, #20
 8007896:	4611      	mov	r1, r2
 8007898:	4618      	mov	r0, r3
 800789a:	f002 fb9c 	bl	8009fd6 <SDIO_ConfigData>
    
    return HAL_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	e000      	b.n	80078a4 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 80078a2:	2302      	movs	r3, #2
  }
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3730      	adds	r7, #48	; 0x30
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	08008185 	.word	0x08008185
 80078b0:	0800821d 	.word	0x0800821d
 80078b4:	4225858c 	.word	0x4225858c

080078b8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80078c0:	2300      	movs	r3, #0
 80078c2:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 808d 	beq.w	80079ee <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078dc:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	6812      	ldr	r2, [r2, #0]
 80078e8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80078ec:	f023 0302 	bic.w	r3, r3, #2
 80078f0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f6:	f003 0308 	and.w	r3, r3, #8
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d03a      	beq.n	8007974 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d105      	bne.n	8007916 <HAL_SD_IRQHandler+0x5e>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b00      	cmp	r3, #0
 8007914:	d011      	beq.n	800793a <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f002 fc3c 	bl	800a198 <SDMMC_CmdStopTransfer>
 8007920:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	431a      	orrs	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f925 	bl	8007b84 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	d105      	bne.n	8007964 <HAL_SD_IRQHandler+0xac>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795c:	f003 0302 	and.w	r3, r3, #2
 8007960:	2b00      	cmp	r3, #0
 8007962:	d003      	beq.n	800796c <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f005 fed9 	bl	800d71c <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 800796a:	e103      	b.n	8007b74 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f005 fecb 	bl	800d708 <HAL_SD_TxCpltCallback>
}
 8007972:	e0ff      	b.n	8007b74 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 80f9 	beq.w	8007b74 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	2b00      	cmp	r3, #0
 800798c:	d011      	beq.n	80079b2 <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4618      	mov	r0, r3
 8007994:	f002 fc00 	bl	800a198 <SDMMC_CmdStopTransfer>
 8007998:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d008      	beq.n	80079b2 <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	431a      	orrs	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f8e9 	bl	8007b84 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f040 80da 	bne.w	8007b74 <HAL_SD_IRQHandler+0x2bc>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c4:	f003 0302 	and.w	r3, r3, #2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f040 80d3 	bne.w	8007b74 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0208 	bic.w	r2, r2, #8
 80079dc:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f005 fe8e 	bl	800d708 <HAL_SD_TxCpltCallback>
}
 80079ec:	e0c2      	b.n	8007b74 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d008      	beq.n	8007a0e <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a04:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 ffef 	bl	80089ea <SD_Write_IT>
}
 8007a0c:	e0b2      	b.n	8007b74 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d008      	beq.n	8007a2e <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007a24:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 ffb7 	bl	800899a <SD_Read_IT>
}
 8007a2c:	e0a2      	b.n	8007b74 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a34:	f240 233a 	movw	r3, #570	; 0x23a
 8007a38:	4013      	ands	r3, r2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 809a 	beq.w	8007b74 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d005      	beq.n	8007a5a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a52:	f043 0202 	orr.w	r2, r3, #2
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a60:	f003 0308 	and.w	r3, r3, #8
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d005      	beq.n	8007a74 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6c:	f043 0208 	orr.w	r2, r3, #8
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7a:	f003 0320 	and.w	r3, r3, #32
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d005      	beq.n	8007a8e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a86:	f043 0220 	orr.w	r2, r3, #32
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a94:	f003 0310 	and.w	r3, r3, #16
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	f043 0210 	orr.w	r2, r3, #16
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d005      	beq.n	8007ac2 <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aba:	f043 0208 	orr.w	r2, r3, #8
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	6812      	ldr	r2, [r2, #0]
 8007ad6:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8007ada:	f023 0302 	bic.w	r3, r3, #2
 8007ade:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d036      	beq.n	8007b5a <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d011      	beq.n	8007b18 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af8:	4a20      	ldr	r2, [pc, #128]	; (8007b7c <HAL_SD_IRQHandler+0x2c4>)
 8007afa:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fc f989 	bl	8003e18 <HAL_DMA_Abort_IT>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d033      	beq.n	8007b74 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 fbc8 	bl	80082a6 <SD_DMATxAbort>
}
 8007b16:	e02d      	b.n	8007b74 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d011      	beq.n	8007b44 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b24:	4a16      	ldr	r2, [pc, #88]	; (8007b80 <HAL_SD_IRQHandler+0x2c8>)
 8007b26:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fc f973 	bl	8003e18 <HAL_DMA_Abort_IT>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d01d      	beq.n	8007b74 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 fbf0 	bl	8008322 <SD_DMARxAbort>
}
 8007b42:	e017      	b.n	8007b74 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f005 fdce 	bl	800d6f4 <HAL_SD_AbortCallback>
}
 8007b58:	e00c      	b.n	8007b74 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	f003 0308 	and.w	r3, r3, #8
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d006      	beq.n	8007b74 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f808 	bl	8007b84 <HAL_SD_ErrorCallback>
}
 8007b74:	bf00      	nop
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	080082a7 	.word	0x080082a7
 8007b80:	08008323 	.word	0x08008323

08007b84 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007baa:	0e1b      	lsrs	r3, r3, #24
 8007bac:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	099b      	lsrs	r3, r3, #6
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	f003 0303 	and.w	r3, r3, #3
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	089b      	lsrs	r3, r3, #2
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	f003 030f 	and.w	r3, r3, #15
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007be0:	0c1b      	lsrs	r3, r3, #16
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bf2:	0a1b      	lsrs	r3, r3, #8
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c14:	0e1b      	lsrs	r3, r3, #24
 8007c16:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	011b      	lsls	r3, r3, #4
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c28:	0c1b      	lsrs	r3, r3, #16
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	88db      	ldrh	r3, [r3, #6]
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	091b      	lsrs	r3, r3, #4
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	f003 030f 	and.w	r3, r3, #15
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	4313      	orrs	r3, r2
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	f003 030f 	and.w	r3, r3, #15
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c5a:	0a1b      	lsrs	r3, r3, #8
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	09db      	lsrs	r3, r3, #7
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	099b      	lsrs	r3, r3, #6
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	095b      	lsrs	r3, r3, #5
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	091b      	lsrs	r3, r3, #4
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f040 8087 	bne.w	8007dbe <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	029b      	lsls	r3, r3, #10
 8007cb4:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	691a      	ldr	r2, [r3, #16]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	431a      	orrs	r2, r3
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cd6:	0e1b      	lsrs	r3, r3, #24
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	691a      	ldr	r2, [r3, #16]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	099b      	lsrs	r3, r3, #6
 8007ce4:	f003 0303 	and.w	r3, r3, #3
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	08db      	lsrs	r3, r3, #3
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	f003 0307 	and.w	r3, r3, #7
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	f003 0307 	and.w	r3, r3, #7
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d10:	0c1b      	lsrs	r3, r3, #16
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	095b      	lsrs	r3, r3, #5
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	f003 0307 	and.w	r3, r3, #7
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	089b      	lsrs	r3, r3, #2
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	f003 0307 	and.w	r3, r3, #7
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	005b      	lsls	r3, r3, #1
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	f003 0306 	and.w	r3, r3, #6
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d4c:	0a1b      	lsrs	r3, r3, #8
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	7e1b      	ldrb	r3, [r3, #24]
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	09db      	lsrs	r3, r3, #7
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	4313      	orrs	r3, r2
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	1c5a      	adds	r2, r3, #1
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	7e1b      	ldrb	r3, [r3, #24]
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	3302      	adds	r3, #2
 8007d7e:	2201      	movs	r2, #1
 8007d80:	fa02 f303 	lsl.w	r3, r2, r3
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007d88:	fb02 f203 	mul.w	r2, r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	7a1b      	ldrb	r3, [r3, #8]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	461a      	mov	r2, r3
 8007d98:	2301      	movs	r3, #1
 8007d9a:	fa03 f202 	lsl.w	r2, r3, r2
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007daa:	0a52      	lsrs	r2, r2, #9
 8007dac:	fb02 f203 	mul.w	r2, r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dba:	661a      	str	r2, [r3, #96]	; 0x60
 8007dbc:	e04d      	b.n	8007e5a <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d138      	bne.n	8007e38 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	041b      	lsls	r3, r3, #16
 8007dd2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dde:	0e1b      	lsrs	r3, r3, #24
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	691a      	ldr	r2, [r3, #16]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	021b      	lsls	r3, r3, #8
 8007dec:	431a      	orrs	r2, r3
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007df6:	0c1b      	lsrs	r3, r3, #16
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	691a      	ldr	r2, [r3, #16]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	431a      	orrs	r2, r3
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e0c:	0a1b      	lsrs	r3, r3, #8
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	3301      	adds	r3, #1
 8007e18:	029a      	lsls	r2, r3, #10
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	655a      	str	r2, [r3, #84]	; 0x54
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e2c:	659a      	str	r2, [r3, #88]	; 0x58
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	661a      	str	r2, [r3, #96]	; 0x60
 8007e36:	e010      	b.n	8007e5a <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007e40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e0c1      	b.n	8007fde <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	099b      	lsrs	r3, r3, #6
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	7e9b      	ldrb	r3, [r3, #26]
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	09db      	lsrs	r3, r3, #7
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	4313      	orrs	r3, r2
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb0:	0e1b      	lsrs	r3, r3, #24
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	09db      	lsrs	r3, r3, #7
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	095b      	lsrs	r3, r3, #5
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	f003 0303 	and.w	r3, r3, #3
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	089b      	lsrs	r3, r3, #2
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	f003 030c 	and.w	r3, r3, #12
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efc:	0c1b      	lsrs	r3, r3, #16
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	7fdb      	ldrb	r3, [r3, #31]
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	099b      	lsrs	r3, r3, #6
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	4313      	orrs	r3, r2
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	095b      	lsrs	r3, r3, #5
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4a:	0a1b      	lsrs	r3, r3, #8
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	09db      	lsrs	r3, r3, #7
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	099b      	lsrs	r3, r3, #6
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	095b      	lsrs	r3, r3, #5
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	091b      	lsrs	r3, r3, #4
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	089b      	lsrs	r3, r3, #2
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	f003 0303 	and.w	r3, r3, #3
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	085b      	lsrs	r3, r3, #1
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b083      	sub	sp, #12
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008042:	b5b0      	push	{r4, r5, r7, lr}
 8008044:	b08e      	sub	sp, #56	; 0x38
 8008046:	af04      	add	r7, sp, #16
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800804c:	2300      	movs	r3, #0
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2203      	movs	r2, #3
 8008054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805c:	2b03      	cmp	r3, #3
 800805e:	d02e      	beq.n	80080be <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008066:	d106      	bne.n	8008076 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	639a      	str	r2, [r3, #56]	; 0x38
 8008074:	e029      	b.n	80080ca <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800807c:	d10a      	bne.n	8008094 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fb28 	bl	80086d4 <SD_WideBus_Enable>
 8008084:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	431a      	orrs	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	639a      	str	r2, [r3, #56]	; 0x38
 8008092:	e01a      	b.n	80080ca <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10a      	bne.n	80080b0 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fb67 	bl	800876e <SD_WideBus_Disable>
 80080a0:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	431a      	orrs	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	639a      	str	r2, [r3, #56]	; 0x38
 80080ae:	e00c      	b.n	80080ca <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	639a      	str	r2, [r3, #56]	; 0x38
 80080bc:	e005      	b.n	80080ca <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00a      	beq.n	80080e8 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80080da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e024      	b.n	8008132 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681d      	ldr	r5, [r3, #0]
 800810e:	466c      	mov	r4, sp
 8008110:	f107 0318 	add.w	r3, r7, #24
 8008114:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008118:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800811c:	f107 030c 	add.w	r3, r7, #12
 8008120:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008122:	4628      	mov	r0, r5
 8008124:	f001 fea6 	bl	8009e74 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3728      	adds	r7, #40	; 0x28
 8008136:	46bd      	mov	sp, r7
 8008138:	bdb0      	pop	{r4, r5, r7, pc}

0800813a <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b086      	sub	sp, #24
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8008142:	2304      	movs	r3, #4
 8008144:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008146:	2300      	movs	r3, #0
 8008148:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 800814a:	2300      	movs	r3, #0
 800814c:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800814e:	f107 030c 	add.w	r3, r7, #12
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fa93 	bl	8008680 <SD_SendStatus>
 800815a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d005      	beq.n	800816e <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	431a      	orrs	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	0a5b      	lsrs	r3, r3, #9
 8008172:	b2db      	uxtb	r3, r3
 8008174:	f003 030f 	and.w	r3, r3, #15
 8008178:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800817a:	7dfb      	ldrb	r3, [r7, #23]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008190:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081a0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80081a2:	bf00      	nop
 80081a4:	3714      	adds	r7, #20
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ba:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80081bc:	2300      	movs	r3, #0
 80081be:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c4:	2b82      	cmp	r3, #130	; 0x82
 80081c6:	d111      	bne.n	80081ec <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f001 ffe3 	bl	800a198 <SDMMC_CmdStopTransfer>
 80081d2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d008      	beq.n	80081ec <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	431a      	orrs	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f7ff fccc 	bl	8007b84 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 0208 	bic.w	r2, r2, #8
 80081fa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008204:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f005 fa84 	bl	800d71c <HAL_SD_RxCpltCallback>
#endif
}
 8008214:	bf00      	nop
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008228:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008230:	2b01      	cmp	r3, #1
 8008232:	d004      	beq.n	800823e <SD_DMAError+0x22>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823a:	2b01      	cmp	r3, #1
 800823c:	d12c      	bne.n	8008298 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008246:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008256:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f7ff ff68 	bl	800813a <HAL_SD_GetCardState>
 800826a:	4603      	mov	r3, r0
 800826c:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800826e:	7afb      	ldrb	r3, [r7, #11]
 8008270:	2b06      	cmp	r3, #6
 8008272:	d002      	beq.n	800827a <SD_DMAError+0x5e>
 8008274:	7afb      	ldrb	r3, [r7, #11]
 8008276:	2b05      	cmp	r3, #5
 8008278:	d10a      	bne.n	8008290 <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	f001 ff8a 	bl	800a198 <SDMMC_CmdStopTransfer>
 8008284:	4602      	mov	r2, r0
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828a:	431a      	orrs	r2, r3
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f7ff fc73 	bl	8007b84 <HAL_SD_ErrorCallback>
#endif
}
 800829e:	bf00      	nop
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d127      	bne.n	800831a <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f7ff ff35 	bl	800813a <HAL_SD_GetCardState>
 80082d0:	4603      	mov	r3, r0
 80082d2:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80082e2:	7afb      	ldrb	r3, [r7, #11]
 80082e4:	2b06      	cmp	r3, #6
 80082e6:	d002      	beq.n	80082ee <SD_DMATxAbort+0x48>
 80082e8:	7afb      	ldrb	r3, [r7, #11]
 80082ea:	2b05      	cmp	r3, #5
 80082ec:	d115      	bne.n	800831a <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f001 ff50 	bl	800a198 <SDMMC_CmdStopTransfer>
 80082f8:	4602      	mov	r2, r0
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fe:	431a      	orrs	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f005 f9f1 	bl	800d6f4 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8008312:	e002      	b.n	800831a <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f7ff fc35 	bl	8007b84 <HAL_SD_ErrorCallback>
}
 800831a:	bf00      	nop
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b084      	sub	sp, #16
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008342:	2b00      	cmp	r3, #0
 8008344:	d127      	bne.n	8008396 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f7ff fef7 	bl	800813a <HAL_SD_GetCardState>
 800834c:	4603      	mov	r3, r0
 800834e:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800835e:	7afb      	ldrb	r3, [r7, #11]
 8008360:	2b06      	cmp	r3, #6
 8008362:	d002      	beq.n	800836a <SD_DMARxAbort+0x48>
 8008364:	7afb      	ldrb	r3, [r7, #11]
 8008366:	2b05      	cmp	r3, #5
 8008368:	d115      	bne.n	8008396 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4618      	mov	r0, r3
 8008370:	f001 ff12 	bl	800a198 <SDMMC_CmdStopTransfer>
 8008374:	4602      	mov	r2, r0
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837a:	431a      	orrs	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f005 f9b3 	bl	800d6f4 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800838e:	e002      	b.n	8008396 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f7ff fbf7 	bl	8007b84 <HAL_SD_ErrorCallback>
}
 8008396:	bf00      	nop
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800839e:	b5b0      	push	{r4, r5, r7, lr}
 80083a0:	b094      	sub	sp, #80	; 0x50
 80083a2:	af04      	add	r7, sp, #16
 80083a4:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80083a6:	2300      	movs	r3, #0
 80083a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 80083aa:	2301      	movs	r3, #1
 80083ac:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f001 fdb5 	bl	8009f22 <SDIO_GetPowerState>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d102      	bne.n	80083c4 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80083be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80083c2:	e0b1      	b.n	8008528 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d02f      	beq.n	800842c <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 fffb 	bl	800a3cc <SDMMC_CmdSendCID>
 80083d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80083d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <SD_InitCard+0x44>
    {
      return errorstate;
 80083de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e0:	e0a2      	b.n	8008528 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2100      	movs	r1, #0
 80083e8:	4618      	mov	r0, r3
 80083ea:	f001 fddf 	bl	8009fac <SDIO_GetResponse>
 80083ee:	4602      	mov	r2, r0
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2104      	movs	r1, #4
 80083fa:	4618      	mov	r0, r3
 80083fc:	f001 fdd6 	bl	8009fac <SDIO_GetResponse>
 8008400:	4602      	mov	r2, r0
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2108      	movs	r1, #8
 800840c:	4618      	mov	r0, r3
 800840e:	f001 fdcd 	bl	8009fac <SDIO_GetResponse>
 8008412:	4602      	mov	r2, r0
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	210c      	movs	r1, #12
 800841e:	4618      	mov	r0, r3
 8008420:	f001 fdc4 	bl	8009fac <SDIO_GetResponse>
 8008424:	4602      	mov	r2, r0
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008430:	2b03      	cmp	r3, #3
 8008432:	d00d      	beq.n	8008450 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f107 020e 	add.w	r2, r7, #14
 800843c:	4611      	mov	r1, r2
 800843e:	4618      	mov	r0, r3
 8008440:	f002 f805 	bl	800a44e <SDMMC_CmdSetRelAdd>
 8008444:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <SD_InitCard+0xb2>
    {
      return errorstate;
 800844c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800844e:	e06b      	b.n	8008528 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008454:	2b03      	cmp	r3, #3
 8008456:	d036      	beq.n	80084c6 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008458:	89fb      	ldrh	r3, [r7, #14]
 800845a:	461a      	mov	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008468:	041b      	lsls	r3, r3, #16
 800846a:	4619      	mov	r1, r3
 800846c:	4610      	mov	r0, r2
 800846e:	f001 ffcd 	bl	800a40c <SDMMC_CmdSendCSD>
 8008472:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <SD_InitCard+0xe0>
    {
      return errorstate;
 800847a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800847c:	e054      	b.n	8008528 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2100      	movs	r1, #0
 8008484:	4618      	mov	r0, r3
 8008486:	f001 fd91 	bl	8009fac <SDIO_GetResponse>
 800848a:	4602      	mov	r2, r0
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2104      	movs	r1, #4
 8008496:	4618      	mov	r0, r3
 8008498:	f001 fd88 	bl	8009fac <SDIO_GetResponse>
 800849c:	4602      	mov	r2, r0
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2108      	movs	r1, #8
 80084a8:	4618      	mov	r0, r3
 80084aa:	f001 fd7f 	bl	8009fac <SDIO_GetResponse>
 80084ae:	4602      	mov	r2, r0
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	210c      	movs	r1, #12
 80084ba:	4618      	mov	r0, r3
 80084bc:	f001 fd76 	bl	8009fac <SDIO_GetResponse>
 80084c0:	4602      	mov	r2, r0
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2104      	movs	r1, #4
 80084cc:	4618      	mov	r0, r3
 80084ce:	f001 fd6d 	bl	8009fac <SDIO_GetResponse>
 80084d2:	4603      	mov	r3, r0
 80084d4:	0d1a      	lsrs	r2, r3, #20
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80084da:	f107 0310 	add.w	r3, r7, #16
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7ff fb59 	bl	8007b98 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6819      	ldr	r1, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ee:	041b      	lsls	r3, r3, #16
 80084f0:	f04f 0400 	mov.w	r4, #0
 80084f4:	461a      	mov	r2, r3
 80084f6:	4623      	mov	r3, r4
 80084f8:	4608      	mov	r0, r1
 80084fa:	f001 fe71 	bl	800a1e0 <SDMMC_CmdSelDesel>
 80084fe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <SD_InitCard+0x16c>
  {
    return errorstate;
 8008506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008508:	e00e      	b.n	8008528 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681d      	ldr	r5, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	466c      	mov	r4, sp
 8008512:	f103 0210 	add.w	r2, r3, #16
 8008516:	ca07      	ldmia	r2, {r0, r1, r2}
 8008518:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800851c:	3304      	adds	r3, #4
 800851e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008520:	4628      	mov	r0, r5
 8008522:	f001 fca7 	bl	8009e74 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3740      	adds	r7, #64	; 0x40
 800852c:	46bd      	mov	sp, r7
 800852e:	bdb0      	pop	{r4, r5, r7, pc}

08008530 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008538:	2300      	movs	r3, #0
 800853a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800853c:	2300      	movs	r3, #0
 800853e:	617b      	str	r3, [r7, #20]
 8008540:	2300      	movs	r3, #0
 8008542:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008544:	2300      	movs	r3, #0
 8008546:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4618      	mov	r0, r3
 800854e:	f001 fe6c 	bl	800a22a <SDMMC_CmdGoIdleState>
 8008552:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <SD_PowerON+0x2e>
  {
    return errorstate;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	e08c      	b.n	8008678 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4618      	mov	r0, r3
 8008564:	f001 fe81 	bl	800a26a <SDMMC_CmdOperCond>
 8008568:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d03d      	beq.n	80085ec <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8008576:	e032      	b.n	80085de <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	60ba      	str	r2, [r7, #8]
 800857e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008582:	4293      	cmp	r3, r2
 8008584:	d102      	bne.n	800858c <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008586:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800858a:	e075      	b.n	8008678 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2100      	movs	r1, #0
 8008592:	4618      	mov	r0, r3
 8008594:	f001 fe8a 	bl	800a2ac <SDMMC_CmdAppCommand>
 8008598:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085a4:	e068      	b.n	8008678 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2100      	movs	r1, #0
 80085ac:	4618      	mov	r0, r3
 80085ae:	f001 fea1 	bl	800a2f4 <SDMMC_CmdAppOperCommand>
 80085b2:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085be:	e05b      	b.n	8008678 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2100      	movs	r1, #0
 80085c6:	4618      	mov	r0, r3
 80085c8:	f001 fcf0 	bl	8009fac <SDIO_GetResponse>
 80085cc:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	0fdb      	lsrs	r3, r3, #31
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d101      	bne.n	80085da <SD_PowerON+0xaa>
 80085d6:	2301      	movs	r3, #1
 80085d8:	e000      	b.n	80085dc <SD_PowerON+0xac>
 80085da:	2300      	movs	r3, #0
 80085dc:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d0c9      	beq.n	8008578 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	645a      	str	r2, [r3, #68]	; 0x44
 80085ea:	e044      	b.n	8008676 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 80085f2:	e031      	b.n	8008658 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	1c5a      	adds	r2, r3, #1
 80085f8:	60ba      	str	r2, [r7, #8]
 80085fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085fe:	4293      	cmp	r3, r2
 8008600:	d102      	bne.n	8008608 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008602:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008606:	e037      	b.n	8008678 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2100      	movs	r1, #0
 800860e:	4618      	mov	r0, r3
 8008610:	f001 fe4c 	bl	800a2ac <SDMMC_CmdAppCommand>
 8008614:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <SD_PowerON+0xf0>
      {
        return errorstate;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	e02b      	b.n	8008678 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008628:	4618      	mov	r0, r3
 800862a:	f001 fe63 	bl	800a2f4 <SDMMC_CmdAppOperCommand>
 800862e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <SD_PowerON+0x10a>
      {
        return errorstate;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	e01e      	b.n	8008678 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2100      	movs	r1, #0
 8008640:	4618      	mov	r0, r3
 8008642:	f001 fcb3 	bl	8009fac <SDIO_GetResponse>
 8008646:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	0fdb      	lsrs	r3, r3, #31
 800864c:	2b01      	cmp	r3, #1
 800864e:	d101      	bne.n	8008654 <SD_PowerON+0x124>
 8008650:	2301      	movs	r3, #1
 8008652:	e000      	b.n	8008656 <SD_PowerON+0x126>
 8008654:	2300      	movs	r3, #0
 8008656:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d0ca      	beq.n	80085f4 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	645a      	str	r2, [r3, #68]	; 0x44
 800866e:	e002      	b.n	8008676 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800868a:	2300      	movs	r3, #0
 800868c:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d102      	bne.n	800869a <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8008694:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008698:	e018      	b.n	80086cc <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086a2:	041b      	lsls	r3, r3, #16
 80086a4:	4619      	mov	r1, r3
 80086a6:	4610      	mov	r0, r2
 80086a8:	f001 fef4 	bl	800a494 <SDMMC_CmdSendStatus>
 80086ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <SD_SendStatus+0x38>
  {
    return errorstate;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	e009      	b.n	80086cc <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2100      	movs	r1, #0
 80086be:	4618      	mov	r0, r3
 80086c0:	f001 fc74 	bl	8009fac <SDIO_GetResponse>
 80086c4:	4602      	mov	r2, r0
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80086dc:	2300      	movs	r3, #0
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	2300      	movs	r3, #0
 80086e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80086e4:	2300      	movs	r3, #0
 80086e6:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2100      	movs	r1, #0
 80086ee:	4618      	mov	r0, r3
 80086f0:	f001 fc5c 	bl	8009fac <SDIO_GetResponse>
 80086f4:	4603      	mov	r3, r0
 80086f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086fe:	d102      	bne.n	8008706 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008700:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008704:	e02f      	b.n	8008766 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008706:	f107 030c 	add.w	r3, r7, #12
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f87b 	bl	8008808 <SD_FindSCR>
 8008712:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	e023      	b.n	8008766 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d01c      	beq.n	8008762 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008730:	041b      	lsls	r3, r3, #16
 8008732:	4619      	mov	r1, r3
 8008734:	4610      	mov	r0, r2
 8008736:	f001 fdb9 	bl	800a2ac <SDMMC_CmdAppCommand>
 800873a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	e00f      	b.n	8008766 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2102      	movs	r1, #2
 800874c:	4618      	mov	r0, r3
 800874e:	f001 fdf6 	bl	800a33e <SDMMC_CmdBusWidth>
 8008752:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	e003      	b.n	8008766 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800875e:	2300      	movs	r3, #0
 8008760:	e001      	b.n	8008766 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008762:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008766:	4618      	mov	r0, r3
 8008768:	3718      	adds	r7, #24
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b086      	sub	sp, #24
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008776:	2300      	movs	r3, #0
 8008778:	60fb      	str	r3, [r7, #12]
 800877a:	2300      	movs	r3, #0
 800877c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800877e:	2300      	movs	r3, #0
 8008780:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2100      	movs	r1, #0
 8008788:	4618      	mov	r0, r3
 800878a:	f001 fc0f 	bl	8009fac <SDIO_GetResponse>
 800878e:	4603      	mov	r3, r0
 8008790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008794:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008798:	d102      	bne.n	80087a0 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800879a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800879e:	e02f      	b.n	8008800 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80087a0:	f107 030c 	add.w	r3, r7, #12
 80087a4:	4619      	mov	r1, r3
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f82e 	bl	8008808 <SD_FindSCR>
 80087ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	e023      	b.n	8008800 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d01c      	beq.n	80087fc <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ca:	041b      	lsls	r3, r3, #16
 80087cc:	4619      	mov	r1, r3
 80087ce:	4610      	mov	r0, r2
 80087d0:	f001 fd6c 	bl	800a2ac <SDMMC_CmdAppCommand>
 80087d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	e00f      	b.n	8008800 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2100      	movs	r1, #0
 80087e6:	4618      	mov	r0, r3
 80087e8:	f001 fda9 	bl	800a33e <SDMMC_CmdBusWidth>
 80087ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	e003      	b.n	8008800 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 80087f8:	2300      	movs	r3, #0
 80087fa:	e001      	b.n	8008800 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008800:	4618      	mov	r0, r3
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008808:	b590      	push	{r4, r7, lr}
 800880a:	b08f      	sub	sp, #60	; 0x3c
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008812:	2300      	movs	r3, #0
 8008814:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8008816:	f7fb f8b1 	bl	800397c <HAL_GetTick>
 800881a:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008820:	2300      	movs	r3, #0
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	2300      	movs	r3, #0
 8008826:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2108      	movs	r1, #8
 800882e:	4618      	mov	r0, r3
 8008830:	f001 fbfd 	bl	800a02e <SDMMC_CmdBlockLength>
 8008834:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <SD_FindSCR+0x38>
  {
    return errorstate;
 800883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883e:	e0a8      	b.n	8008992 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008848:	041b      	lsls	r3, r3, #16
 800884a:	4619      	mov	r1, r3
 800884c:	4610      	mov	r0, r2
 800884e:	f001 fd2d 	bl	800a2ac <SDMMC_CmdAppCommand>
 8008852:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <SD_FindSCR+0x56>
  {
    return errorstate;
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	e099      	b.n	8008992 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800885e:	f04f 33ff 	mov.w	r3, #4294967295
 8008862:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8008864:	2308      	movs	r3, #8
 8008866:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008868:	2330      	movs	r3, #48	; 0x30
 800886a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800886c:	2302      	movs	r3, #2
 800886e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008870:	2300      	movs	r3, #0
 8008872:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008874:	2301      	movs	r3, #1
 8008876:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f107 0214 	add.w	r2, r7, #20
 8008880:	4611      	mov	r1, r2
 8008882:	4618      	mov	r0, r3
 8008884:	f001 fba7 	bl	8009fd6 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4618      	mov	r0, r3
 800888e:	f001 fd7a 	bl	800a386 <SDMMC_CmdSendSCR>
 8008892:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	2b00      	cmp	r3, #0
 8008898:	d022      	beq.n	80088e0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	e079      	b.n	8008992 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00e      	beq.n	80088ca <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6819      	ldr	r1, [r3, #0]
 80088b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	f107 020c 	add.w	r2, r7, #12
 80088b8:	18d4      	adds	r4, r2, r3
 80088ba:	4608      	mov	r0, r1
 80088bc:	f001 fb05 	bl	8009eca <SDIO_ReadFIFO>
 80088c0:	4603      	mov	r3, r0
 80088c2:	6023      	str	r3, [r4, #0]
      index++;
 80088c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c6:	3301      	adds	r3, #1
 80088c8:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80088ca:	f7fb f857 	bl	800397c <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d8:	d102      	bne.n	80088e0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80088da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088de:	e058      	b.n	8008992 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088e6:	f240 432a 	movw	r3, #1066	; 0x42a
 80088ea:	4013      	ands	r3, r2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0d6      	beq.n	800889e <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f6:	f003 0308 	and.w	r3, r3, #8
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d005      	beq.n	800890a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2208      	movs	r2, #8
 8008904:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008906:	2308      	movs	r3, #8
 8008908:	e043      	b.n	8008992 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d005      	beq.n	8008924 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2202      	movs	r2, #2
 800891e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008920:	2302      	movs	r3, #2
 8008922:	e036      	b.n	8008992 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892a:	f003 0320 	and.w	r3, r3, #32
 800892e:	2b00      	cmp	r3, #0
 8008930:	d005      	beq.n	800893e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2220      	movs	r2, #32
 8008938:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800893a:	2320      	movs	r3, #32
 800893c:	e029      	b.n	8008992 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008946:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	061a      	lsls	r2, r3, #24
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	021b      	lsls	r3, r3, #8
 8008950:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008954:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	0a1b      	lsrs	r3, r3, #8
 800895a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800895e:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800896a:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800896c:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	061a      	lsls	r2, r3, #24
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	021b      	lsls	r3, r3, #8
 8008976:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800897a:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	0a1b      	lsrs	r3, r3, #8
 8008980:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8008984:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	0e1b      	lsrs	r3, r3, #24
 800898a:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	373c      	adds	r7, #60	; 0x3c
 8008996:	46bd      	mov	sp, r7
 8008998:	bd90      	pop	{r4, r7, pc}

0800899a <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800899a:	b590      	push	{r4, r7, lr}
 800899c:	b085      	sub	sp, #20
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089aa:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]
 80089b0:	e00d      	b.n	80089ce <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6819      	ldr	r1, [r3, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	18d4      	adds	r4, r2, r3
 80089be:	4608      	mov	r0, r1
 80089c0:	f001 fa83 	bl	8009eca <SDIO_ReadFIFO>
 80089c4:	4603      	mov	r3, r0
 80089c6:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	3301      	adds	r3, #1
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2b07      	cmp	r3, #7
 80089d2:	d9ee      	bls.n	80089b2 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d8:	f103 0220 	add.w	r2, r3, #32
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3714      	adds	r7, #20
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd90      	pop	{r4, r7, pc}

080089ea <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 80089fc:	2300      	movs	r3, #0
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	e00b      	b.n	8008a1a <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6818      	ldr	r0, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	4619      	mov	r1, r3
 8008a10:	f001 fa68 	bl	8009ee4 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	3301      	adds	r3, #1
 8008a18:	60fb      	str	r3, [r7, #12]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2b07      	cmp	r3, #7
 8008a1e:	d9f0      	bls.n	8008a02 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	f103 0220 	add.w	r2, r3, #32
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b082      	sub	sp, #8
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d101      	bne.n	8008a48 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e056      	b.n	8008af6 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d106      	bne.n	8008a68 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f005 ffce 	bl	800ea04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685a      	ldr	r2, [r3, #4]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	431a      	orrs	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	431a      	orrs	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008aa4:	431a      	orrs	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a1b      	ldr	r3, [r3, #32]
 8008ab0:	ea42 0103 	orr.w	r1, r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	430a      	orrs	r2, r1
 8008abe:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	0c1b      	lsrs	r3, r3, #16
 8008ac6:	f003 0104 	and.w	r1, r3, #4
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	69da      	ldr	r2, [r3, #28]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ae4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b082      	sub	sp, #8
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e01d      	b.n	8008b4c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d106      	bne.n	8008b2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f005 ffb5 	bl	800ea94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	f000 f9e1 	bl	8008f04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f003 0307 	and.w	r3, r3, #7
 8008b6e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b06      	cmp	r3, #6
 8008b74:	d007      	beq.n	8008b86 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f042 0201 	orr.w	r2, r2, #1
 8008b84:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d101      	bne.n	8008bae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e01d      	b.n	8008bea <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f815 	bl	8008bf2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4610      	mov	r0, r2
 8008bdc:	f000 f992 	bl	8008f04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b083      	sub	sp, #12
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008bfa:	bf00      	nop
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
	...

08008c08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d101      	bne.n	8008c22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008c1e:	2302      	movs	r3, #2
 8008c20:	e0b4      	b.n	8008d8c <HAL_TIM_PWM_ConfigChannel+0x184>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b0c      	cmp	r3, #12
 8008c36:	f200 809f 	bhi.w	8008d78 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008c3a:	a201      	add	r2, pc, #4	; (adr r2, 8008c40 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c40:	08008c75 	.word	0x08008c75
 8008c44:	08008d79 	.word	0x08008d79
 8008c48:	08008d79 	.word	0x08008d79
 8008c4c:	08008d79 	.word	0x08008d79
 8008c50:	08008cb5 	.word	0x08008cb5
 8008c54:	08008d79 	.word	0x08008d79
 8008c58:	08008d79 	.word	0x08008d79
 8008c5c:	08008d79 	.word	0x08008d79
 8008c60:	08008cf7 	.word	0x08008cf7
 8008c64:	08008d79 	.word	0x08008d79
 8008c68:	08008d79 	.word	0x08008d79
 8008c6c:	08008d79 	.word	0x08008d79
 8008c70:	08008d37 	.word	0x08008d37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68b9      	ldr	r1, [r7, #8]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 f9e2 	bl	8009044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	699a      	ldr	r2, [r3, #24]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f042 0208 	orr.w	r2, r2, #8
 8008c8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	699a      	ldr	r2, [r3, #24]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 0204 	bic.w	r2, r2, #4
 8008c9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6999      	ldr	r1, [r3, #24]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	691a      	ldr	r2, [r3, #16]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	619a      	str	r2, [r3, #24]
      break;
 8008cb2:	e062      	b.n	8008d7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68b9      	ldr	r1, [r7, #8]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 fa32 	bl	8009124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	699a      	ldr	r2, [r3, #24]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	699a      	ldr	r2, [r3, #24]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6999      	ldr	r1, [r3, #24]
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	021a      	lsls	r2, r3, #8
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	619a      	str	r2, [r3, #24]
      break;
 8008cf4:	e041      	b.n	8008d7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68b9      	ldr	r1, [r7, #8]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 fa87 	bl	8009210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	69da      	ldr	r2, [r3, #28]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f042 0208 	orr.w	r2, r2, #8
 8008d10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	69da      	ldr	r2, [r3, #28]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f022 0204 	bic.w	r2, r2, #4
 8008d20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	69d9      	ldr	r1, [r3, #28]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	691a      	ldr	r2, [r3, #16]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	430a      	orrs	r2, r1
 8008d32:	61da      	str	r2, [r3, #28]
      break;
 8008d34:	e021      	b.n	8008d7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68b9      	ldr	r1, [r7, #8]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f000 fadb 	bl	80092f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	69da      	ldr	r2, [r3, #28]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	69da      	ldr	r2, [r3, #28]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	69d9      	ldr	r1, [r3, #28]
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	021a      	lsls	r2, r3, #8
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	430a      	orrs	r2, r1
 8008d74:	61da      	str	r2, [r3, #28]
      break;
 8008d76:	e000      	b.n	8008d7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008d78:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d101      	bne.n	8008dac <HAL_TIM_ConfigClockSource+0x18>
 8008da8:	2302      	movs	r3, #2
 8008daa:	e0a6      	b.n	8008efa <HAL_TIM_ConfigClockSource+0x166>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2202      	movs	r2, #2
 8008db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008dca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b40      	cmp	r3, #64	; 0x40
 8008de2:	d067      	beq.n	8008eb4 <HAL_TIM_ConfigClockSource+0x120>
 8008de4:	2b40      	cmp	r3, #64	; 0x40
 8008de6:	d80b      	bhi.n	8008e00 <HAL_TIM_ConfigClockSource+0x6c>
 8008de8:	2b10      	cmp	r3, #16
 8008dea:	d073      	beq.n	8008ed4 <HAL_TIM_ConfigClockSource+0x140>
 8008dec:	2b10      	cmp	r3, #16
 8008dee:	d802      	bhi.n	8008df6 <HAL_TIM_ConfigClockSource+0x62>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d06f      	beq.n	8008ed4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008df4:	e078      	b.n	8008ee8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008df6:	2b20      	cmp	r3, #32
 8008df8:	d06c      	beq.n	8008ed4 <HAL_TIM_ConfigClockSource+0x140>
 8008dfa:	2b30      	cmp	r3, #48	; 0x30
 8008dfc:	d06a      	beq.n	8008ed4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008dfe:	e073      	b.n	8008ee8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008e00:	2b70      	cmp	r3, #112	; 0x70
 8008e02:	d00d      	beq.n	8008e20 <HAL_TIM_ConfigClockSource+0x8c>
 8008e04:	2b70      	cmp	r3, #112	; 0x70
 8008e06:	d804      	bhi.n	8008e12 <HAL_TIM_ConfigClockSource+0x7e>
 8008e08:	2b50      	cmp	r3, #80	; 0x50
 8008e0a:	d033      	beq.n	8008e74 <HAL_TIM_ConfigClockSource+0xe0>
 8008e0c:	2b60      	cmp	r3, #96	; 0x60
 8008e0e:	d041      	beq.n	8008e94 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008e10:	e06a      	b.n	8008ee8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e16:	d066      	beq.n	8008ee6 <HAL_TIM_ConfigClockSource+0x152>
 8008e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e1c:	d017      	beq.n	8008e4e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008e1e:	e063      	b.n	8008ee8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6818      	ldr	r0, [r3, #0]
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	6899      	ldr	r1, [r3, #8]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f000 fb32 	bl	8009498 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e42:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	609a      	str	r2, [r3, #8]
      break;
 8008e4c:	e04c      	b.n	8008ee8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6818      	ldr	r0, [r3, #0]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	6899      	ldr	r1, [r3, #8]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	685a      	ldr	r2, [r3, #4]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	f000 fb1b 	bl	8009498 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	689a      	ldr	r2, [r3, #8]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e70:	609a      	str	r2, [r3, #8]
      break;
 8008e72:	e039      	b.n	8008ee8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6818      	ldr	r0, [r3, #0]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	6859      	ldr	r1, [r3, #4]
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	461a      	mov	r2, r3
 8008e82:	f000 fa8f 	bl	80093a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2150      	movs	r1, #80	; 0x50
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f000 fae8 	bl	8009462 <TIM_ITRx_SetConfig>
      break;
 8008e92:	e029      	b.n	8008ee8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6818      	ldr	r0, [r3, #0]
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	6859      	ldr	r1, [r3, #4]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	f000 faae 	bl	8009402 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2160      	movs	r1, #96	; 0x60
 8008eac:	4618      	mov	r0, r3
 8008eae:	f000 fad8 	bl	8009462 <TIM_ITRx_SetConfig>
      break;
 8008eb2:	e019      	b.n	8008ee8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	6859      	ldr	r1, [r3, #4]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	f000 fa6f 	bl	80093a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2140      	movs	r1, #64	; 0x40
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 fac8 	bl	8009462 <TIM_ITRx_SetConfig>
      break;
 8008ed2:	e009      	b.n	8008ee8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4619      	mov	r1, r3
 8008ede:	4610      	mov	r0, r2
 8008ee0:	f000 fabf 	bl	8009462 <TIM_ITRx_SetConfig>
      break;
 8008ee4:	e000      	b.n	8008ee8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a40      	ldr	r2, [pc, #256]	; (8009018 <TIM_Base_SetConfig+0x114>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d013      	beq.n	8008f44 <TIM_Base_SetConfig+0x40>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f22:	d00f      	beq.n	8008f44 <TIM_Base_SetConfig+0x40>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a3d      	ldr	r2, [pc, #244]	; (800901c <TIM_Base_SetConfig+0x118>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d00b      	beq.n	8008f44 <TIM_Base_SetConfig+0x40>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a3c      	ldr	r2, [pc, #240]	; (8009020 <TIM_Base_SetConfig+0x11c>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d007      	beq.n	8008f44 <TIM_Base_SetConfig+0x40>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a3b      	ldr	r2, [pc, #236]	; (8009024 <TIM_Base_SetConfig+0x120>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d003      	beq.n	8008f44 <TIM_Base_SetConfig+0x40>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a3a      	ldr	r2, [pc, #232]	; (8009028 <TIM_Base_SetConfig+0x124>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d108      	bne.n	8008f56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a2f      	ldr	r2, [pc, #188]	; (8009018 <TIM_Base_SetConfig+0x114>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d02b      	beq.n	8008fb6 <TIM_Base_SetConfig+0xb2>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f64:	d027      	beq.n	8008fb6 <TIM_Base_SetConfig+0xb2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a2c      	ldr	r2, [pc, #176]	; (800901c <TIM_Base_SetConfig+0x118>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d023      	beq.n	8008fb6 <TIM_Base_SetConfig+0xb2>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a2b      	ldr	r2, [pc, #172]	; (8009020 <TIM_Base_SetConfig+0x11c>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d01f      	beq.n	8008fb6 <TIM_Base_SetConfig+0xb2>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a2a      	ldr	r2, [pc, #168]	; (8009024 <TIM_Base_SetConfig+0x120>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d01b      	beq.n	8008fb6 <TIM_Base_SetConfig+0xb2>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a29      	ldr	r2, [pc, #164]	; (8009028 <TIM_Base_SetConfig+0x124>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d017      	beq.n	8008fb6 <TIM_Base_SetConfig+0xb2>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a28      	ldr	r2, [pc, #160]	; (800902c <TIM_Base_SetConfig+0x128>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d013      	beq.n	8008fb6 <TIM_Base_SetConfig+0xb2>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a27      	ldr	r2, [pc, #156]	; (8009030 <TIM_Base_SetConfig+0x12c>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d00f      	beq.n	8008fb6 <TIM_Base_SetConfig+0xb2>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a26      	ldr	r2, [pc, #152]	; (8009034 <TIM_Base_SetConfig+0x130>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d00b      	beq.n	8008fb6 <TIM_Base_SetConfig+0xb2>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a25      	ldr	r2, [pc, #148]	; (8009038 <TIM_Base_SetConfig+0x134>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d007      	beq.n	8008fb6 <TIM_Base_SetConfig+0xb2>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a24      	ldr	r2, [pc, #144]	; (800903c <TIM_Base_SetConfig+0x138>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d003      	beq.n	8008fb6 <TIM_Base_SetConfig+0xb2>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a23      	ldr	r2, [pc, #140]	; (8009040 <TIM_Base_SetConfig+0x13c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d108      	bne.n	8008fc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	689a      	ldr	r2, [r3, #8]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a0a      	ldr	r2, [pc, #40]	; (8009018 <TIM_Base_SetConfig+0x114>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d003      	beq.n	8008ffc <TIM_Base_SetConfig+0xf8>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a0c      	ldr	r2, [pc, #48]	; (8009028 <TIM_Base_SetConfig+0x124>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d103      	bne.n	8009004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	691a      	ldr	r2, [r3, #16]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	615a      	str	r2, [r3, #20]
}
 800900a:	bf00      	nop
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	40010000 	.word	0x40010000
 800901c:	40000400 	.word	0x40000400
 8009020:	40000800 	.word	0x40000800
 8009024:	40000c00 	.word	0x40000c00
 8009028:	40010400 	.word	0x40010400
 800902c:	40014000 	.word	0x40014000
 8009030:	40014400 	.word	0x40014400
 8009034:	40014800 	.word	0x40014800
 8009038:	40001800 	.word	0x40001800
 800903c:	40001c00 	.word	0x40001c00
 8009040:	40002000 	.word	0x40002000

08009044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009044:	b480      	push	{r7}
 8009046:	b087      	sub	sp, #28
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	f023 0201 	bic.w	r2, r3, #1
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	699b      	ldr	r3, [r3, #24]
 800906a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f023 0303 	bic.w	r3, r3, #3
 800907a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	4313      	orrs	r3, r2
 8009084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f023 0302 	bic.w	r3, r3, #2
 800908c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	4313      	orrs	r3, r2
 8009096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a20      	ldr	r2, [pc, #128]	; (800911c <TIM_OC1_SetConfig+0xd8>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d003      	beq.n	80090a8 <TIM_OC1_SetConfig+0x64>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a1f      	ldr	r2, [pc, #124]	; (8009120 <TIM_OC1_SetConfig+0xdc>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d10c      	bne.n	80090c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	f023 0308 	bic.w	r3, r3, #8
 80090ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	697a      	ldr	r2, [r7, #20]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	f023 0304 	bic.w	r3, r3, #4
 80090c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a15      	ldr	r2, [pc, #84]	; (800911c <TIM_OC1_SetConfig+0xd8>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d003      	beq.n	80090d2 <TIM_OC1_SetConfig+0x8e>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a14      	ldr	r2, [pc, #80]	; (8009120 <TIM_OC1_SetConfig+0xdc>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d111      	bne.n	80090f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	685a      	ldr	r2, [r3, #4]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	621a      	str	r2, [r3, #32]
}
 8009110:	bf00      	nop
 8009112:	371c      	adds	r7, #28
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	40010000 	.word	0x40010000
 8009120:	40010400 	.word	0x40010400

08009124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009124:	b480      	push	{r7}
 8009126:	b087      	sub	sp, #28
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	f023 0210 	bic.w	r2, r3, #16
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800915a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	021b      	lsls	r3, r3, #8
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	4313      	orrs	r3, r2
 8009166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	f023 0320 	bic.w	r3, r3, #32
 800916e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	011b      	lsls	r3, r3, #4
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	4313      	orrs	r3, r2
 800917a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a22      	ldr	r2, [pc, #136]	; (8009208 <TIM_OC2_SetConfig+0xe4>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d003      	beq.n	800918c <TIM_OC2_SetConfig+0x68>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a21      	ldr	r2, [pc, #132]	; (800920c <TIM_OC2_SetConfig+0xe8>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d10d      	bne.n	80091a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	011b      	lsls	r3, r3, #4
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	4313      	orrs	r3, r2
 800919e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a17      	ldr	r2, [pc, #92]	; (8009208 <TIM_OC2_SetConfig+0xe4>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d003      	beq.n	80091b8 <TIM_OC2_SetConfig+0x94>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a16      	ldr	r2, [pc, #88]	; (800920c <TIM_OC2_SetConfig+0xe8>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d113      	bne.n	80091e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	693a      	ldr	r2, [r7, #16]
 80091dc:	4313      	orrs	r3, r2
 80091de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	621a      	str	r2, [r3, #32]
}
 80091fa:	bf00      	nop
 80091fc:	371c      	adds	r7, #28
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	40010000 	.word	0x40010000
 800920c:	40010400 	.word	0x40010400

08009210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009210:	b480      	push	{r7}
 8009212:	b087      	sub	sp, #28
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a1b      	ldr	r3, [r3, #32]
 800921e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a1b      	ldr	r3, [r3, #32]
 800922a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	69db      	ldr	r3, [r3, #28]
 8009236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f023 0303 	bic.w	r3, r3, #3
 8009246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	4313      	orrs	r3, r2
 8009250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	021b      	lsls	r3, r3, #8
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	4313      	orrs	r3, r2
 8009264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a21      	ldr	r2, [pc, #132]	; (80092f0 <TIM_OC3_SetConfig+0xe0>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d003      	beq.n	8009276 <TIM_OC3_SetConfig+0x66>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a20      	ldr	r2, [pc, #128]	; (80092f4 <TIM_OC3_SetConfig+0xe4>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d10d      	bne.n	8009292 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800927c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	021b      	lsls	r3, r3, #8
 8009284:	697a      	ldr	r2, [r7, #20]
 8009286:	4313      	orrs	r3, r2
 8009288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a16      	ldr	r2, [pc, #88]	; (80092f0 <TIM_OC3_SetConfig+0xe0>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d003      	beq.n	80092a2 <TIM_OC3_SetConfig+0x92>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a15      	ldr	r2, [pc, #84]	; (80092f4 <TIM_OC3_SetConfig+0xe4>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d113      	bne.n	80092ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	695b      	ldr	r3, [r3, #20]
 80092b6:	011b      	lsls	r3, r3, #4
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	011b      	lsls	r3, r3, #4
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	685a      	ldr	r2, [r3, #4]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	621a      	str	r2, [r3, #32]
}
 80092e4:	bf00      	nop
 80092e6:	371c      	adds	r7, #28
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	40010000 	.word	0x40010000
 80092f4:	40010400 	.word	0x40010400

080092f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b087      	sub	sp, #28
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a1b      	ldr	r3, [r3, #32]
 8009312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800932e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	021b      	lsls	r3, r3, #8
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	4313      	orrs	r3, r2
 800933a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	031b      	lsls	r3, r3, #12
 800934a:	693a      	ldr	r2, [r7, #16]
 800934c:	4313      	orrs	r3, r2
 800934e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a12      	ldr	r2, [pc, #72]	; (800939c <TIM_OC4_SetConfig+0xa4>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d003      	beq.n	8009360 <TIM_OC4_SetConfig+0x68>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a11      	ldr	r2, [pc, #68]	; (80093a0 <TIM_OC4_SetConfig+0xa8>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d109      	bne.n	8009374 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	019b      	lsls	r3, r3, #6
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	4313      	orrs	r3, r2
 8009372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	621a      	str	r2, [r3, #32]
}
 800938e:	bf00      	nop
 8009390:	371c      	adds	r7, #28
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	40010000 	.word	0x40010000
 80093a0:	40010400 	.word	0x40010400

080093a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b087      	sub	sp, #28
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6a1b      	ldr	r3, [r3, #32]
 80093b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	f023 0201 	bic.w	r2, r3, #1
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	011b      	lsls	r3, r3, #4
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	f023 030a 	bic.w	r3, r3, #10
 80093e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	621a      	str	r2, [r3, #32]
}
 80093f6:	bf00      	nop
 80093f8:	371c      	adds	r7, #28
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009402:	b480      	push	{r7}
 8009404:	b087      	sub	sp, #28
 8009406:	af00      	add	r7, sp, #0
 8009408:	60f8      	str	r0, [r7, #12]
 800940a:	60b9      	str	r1, [r7, #8]
 800940c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6a1b      	ldr	r3, [r3, #32]
 8009412:	f023 0210 	bic.w	r2, r3, #16
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6a1b      	ldr	r3, [r3, #32]
 8009424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800942c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	031b      	lsls	r3, r3, #12
 8009432:	697a      	ldr	r2, [r7, #20]
 8009434:	4313      	orrs	r3, r2
 8009436:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800943e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	011b      	lsls	r3, r3, #4
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	4313      	orrs	r3, r2
 8009448:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	697a      	ldr	r2, [r7, #20]
 800944e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	621a      	str	r2, [r3, #32]
}
 8009456:	bf00      	nop
 8009458:	371c      	adds	r7, #28
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009462:	b480      	push	{r7}
 8009464:	b085      	sub	sp, #20
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009478:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4313      	orrs	r3, r2
 8009480:	f043 0307 	orr.w	r3, r3, #7
 8009484:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	609a      	str	r2, [r3, #8]
}
 800948c:	bf00      	nop
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009498:	b480      	push	{r7}
 800949a:	b087      	sub	sp, #28
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	021a      	lsls	r2, r3, #8
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	431a      	orrs	r2, r3
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	4313      	orrs	r3, r2
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	609a      	str	r2, [r3, #8]
}
 80094cc:	bf00      	nop
 80094ce:	371c      	adds	r7, #28
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d101      	bne.n	80094f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094ec:	2302      	movs	r3, #2
 80094ee:	e032      	b.n	8009556 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2202      	movs	r2, #2
 80094fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009516:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	4313      	orrs	r3, r2
 8009520:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009528:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	4313      	orrs	r3, r2
 8009532:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b082      	sub	sp, #8
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d101      	bne.n	8009574 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	e03f      	b.n	80095f4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800957a:	b2db      	uxtb	r3, r3
 800957c:	2b00      	cmp	r3, #0
 800957e:	d106      	bne.n	800958e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f005 fb31 	bl	800ebf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2224      	movs	r2, #36	; 0x24
 8009592:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68da      	ldr	r2, [r3, #12]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095a4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fa5a 	bl	8009a60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	691a      	ldr	r2, [r3, #16]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	695a      	ldr	r2, [r3, #20]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095ca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095da:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2220      	movs	r2, #32
 80095e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2220      	movs	r2, #32
 80095ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b088      	sub	sp, #32
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800961c:	2300      	movs	r3, #0
 800961e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009620:	2300      	movs	r3, #0
 8009622:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	f003 030f 	and.w	r3, r3, #15
 800962a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d10d      	bne.n	800964e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	f003 0320 	and.w	r3, r3, #32
 8009638:	2b00      	cmp	r3, #0
 800963a:	d008      	beq.n	800964e <HAL_UART_IRQHandler+0x52>
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	f003 0320 	and.w	r3, r3, #32
 8009642:	2b00      	cmp	r3, #0
 8009644:	d003      	beq.n	800964e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f988 	bl	800995c <UART_Receive_IT>
      return;
 800964c:	e0cc      	b.n	80097e8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 80ab 	beq.w	80097ac <HAL_UART_IRQHandler+0x1b0>
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f003 0301 	and.w	r3, r3, #1
 800965c:	2b00      	cmp	r3, #0
 800965e:	d105      	bne.n	800966c <HAL_UART_IRQHandler+0x70>
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009666:	2b00      	cmp	r3, #0
 8009668:	f000 80a0 	beq.w	80097ac <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00a      	beq.n	800968c <HAL_UART_IRQHandler+0x90>
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800967c:	2b00      	cmp	r3, #0
 800967e:	d005      	beq.n	800968c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009684:	f043 0201 	orr.w	r2, r3, #1
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	f003 0304 	and.w	r3, r3, #4
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00a      	beq.n	80096ac <HAL_UART_IRQHandler+0xb0>
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	2b00      	cmp	r3, #0
 800969e:	d005      	beq.n	80096ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096a4:	f043 0202 	orr.w	r2, r3, #2
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	f003 0302 	and.w	r3, r3, #2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00a      	beq.n	80096cc <HAL_UART_IRQHandler+0xd0>
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d005      	beq.n	80096cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c4:	f043 0204 	orr.w	r2, r3, #4
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	f003 0308 	and.w	r3, r3, #8
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00a      	beq.n	80096ec <HAL_UART_IRQHandler+0xf0>
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	f003 0301 	and.w	r3, r3, #1
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d005      	beq.n	80096ec <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e4:	f043 0208 	orr.w	r2, r3, #8
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d078      	beq.n	80097e6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	f003 0320 	and.w	r3, r3, #32
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d007      	beq.n	800970e <HAL_UART_IRQHandler+0x112>
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	f003 0320 	and.w	r3, r3, #32
 8009704:	2b00      	cmp	r3, #0
 8009706:	d002      	beq.n	800970e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f927 	bl	800995c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	695b      	ldr	r3, [r3, #20]
 8009714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009718:	2b40      	cmp	r3, #64	; 0x40
 800971a:	bf0c      	ite	eq
 800971c:	2301      	moveq	r3, #1
 800971e:	2300      	movne	r3, #0
 8009720:	b2db      	uxtb	r3, r3
 8009722:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009728:	f003 0308 	and.w	r3, r3, #8
 800972c:	2b00      	cmp	r3, #0
 800972e:	d102      	bne.n	8009736 <HAL_UART_IRQHandler+0x13a>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d031      	beq.n	800979a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f870 	bl	800981c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	695b      	ldr	r3, [r3, #20]
 8009742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009746:	2b40      	cmp	r3, #64	; 0x40
 8009748:	d123      	bne.n	8009792 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	695a      	ldr	r2, [r3, #20]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009758:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800975e:	2b00      	cmp	r3, #0
 8009760:	d013      	beq.n	800978a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009766:	4a22      	ldr	r2, [pc, #136]	; (80097f0 <HAL_UART_IRQHandler+0x1f4>)
 8009768:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800976e:	4618      	mov	r0, r3
 8009770:	f7fa fb52 	bl	8003e18 <HAL_DMA_Abort_IT>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d016      	beq.n	80097a8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800977e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009784:	4610      	mov	r0, r2
 8009786:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009788:	e00e      	b.n	80097a8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f83c 	bl	8009808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009790:	e00a      	b.n	80097a8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f838 	bl	8009808 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009798:	e006      	b.n	80097a8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f834 	bl	8009808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80097a6:	e01e      	b.n	80097e6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a8:	bf00      	nop
    return;
 80097aa:	e01c      	b.n	80097e6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d008      	beq.n	80097c8 <HAL_UART_IRQHandler+0x1cc>
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d003      	beq.n	80097c8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f85d 	bl	8009880 <UART_Transmit_IT>
    return;
 80097c6:	e00f      	b.n	80097e8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00a      	beq.n	80097e8 <HAL_UART_IRQHandler+0x1ec>
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d005      	beq.n	80097e8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f8a5 	bl	800992c <UART_EndTransmit_IT>
    return;
 80097e2:	bf00      	nop
 80097e4:	e000      	b.n	80097e8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80097e6:	bf00      	nop
  }
}
 80097e8:	3720      	adds	r7, #32
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	08009859 	.word	0x08009859

080097f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68da      	ldr	r2, [r3, #12]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009832:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	695a      	ldr	r2, [r3, #20]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f022 0201 	bic.w	r2, r2, #1
 8009842:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2220      	movs	r2, #32
 8009848:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009864:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f7ff ffc8 	bl	8009808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009878:	bf00      	nop
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b21      	cmp	r3, #33	; 0x21
 8009892:	d144      	bne.n	800991e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800989c:	d11a      	bne.n	80098d4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	881b      	ldrh	r3, [r3, #0]
 80098a8:	461a      	mov	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098b2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d105      	bne.n	80098c8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a1b      	ldr	r3, [r3, #32]
 80098c0:	1c9a      	adds	r2, r3, #2
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	621a      	str	r2, [r3, #32]
 80098c6:	e00e      	b.n	80098e6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a1b      	ldr	r3, [r3, #32]
 80098cc:	1c5a      	adds	r2, r3, #1
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	621a      	str	r2, [r3, #32]
 80098d2:	e008      	b.n	80098e6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a1b      	ldr	r3, [r3, #32]
 80098d8:	1c59      	adds	r1, r3, #1
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	6211      	str	r1, [r2, #32]
 80098de:	781a      	ldrb	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	3b01      	subs	r3, #1
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	4619      	mov	r1, r3
 80098f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10f      	bne.n	800991a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68da      	ldr	r2, [r3, #12]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009908:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68da      	ldr	r2, [r3, #12]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009918:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	e000      	b.n	8009920 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800991e:	2302      	movs	r3, #2
  }
}
 8009920:	4618      	mov	r0, r3
 8009922:	3714      	adds	r7, #20
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009942:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2220      	movs	r2, #32
 8009948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff ff51 	bl	80097f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800996a:	b2db      	uxtb	r3, r3
 800996c:	2b22      	cmp	r3, #34	; 0x22
 800996e:	d171      	bne.n	8009a54 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009978:	d123      	bne.n	80099c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800997e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10e      	bne.n	80099a6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	b29b      	uxth	r3, r3
 8009990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009994:	b29a      	uxth	r2, r3
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800999e:	1c9a      	adds	r2, r3, #2
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	629a      	str	r2, [r3, #40]	; 0x28
 80099a4:	e029      	b.n	80099fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	629a      	str	r2, [r3, #40]	; 0x28
 80099c0:	e01b      	b.n	80099fa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d10a      	bne.n	80099e0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	6858      	ldr	r0, [r3, #4]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d4:	1c59      	adds	r1, r3, #1
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	6291      	str	r1, [r2, #40]	; 0x28
 80099da:	b2c2      	uxtb	r2, r0
 80099dc:	701a      	strb	r2, [r3, #0]
 80099de:	e00c      	b.n	80099fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ec:	1c58      	adds	r0, r3, #1
 80099ee:	6879      	ldr	r1, [r7, #4]
 80099f0:	6288      	str	r0, [r1, #40]	; 0x28
 80099f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80099f6:	b2d2      	uxtb	r2, r2
 80099f8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	3b01      	subs	r3, #1
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	4619      	mov	r1, r3
 8009a08:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d120      	bne.n	8009a50 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68da      	ldr	r2, [r3, #12]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f022 0220 	bic.w	r2, r2, #32
 8009a1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68da      	ldr	r2, [r3, #12]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	695a      	ldr	r2, [r3, #20]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f022 0201 	bic.w	r2, r2, #1
 8009a3c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2220      	movs	r2, #32
 8009a42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f003 fffe 	bl	800da48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	e002      	b.n	8009a56 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	e000      	b.n	8009a56 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009a54:	2302      	movs	r3, #2
  }
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
	...

08009a60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a60:	b5b0      	push	{r4, r5, r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	68da      	ldr	r2, [r3, #12]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	689a      	ldr	r2, [r3, #8]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	431a      	orrs	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	695b      	ldr	r3, [r3, #20]
 8009a8c:	431a      	orrs	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009aa0:	f023 030c 	bic.w	r3, r3, #12
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	6812      	ldr	r2, [r2, #0]
 8009aa8:	68f9      	ldr	r1, [r7, #12]
 8009aaa:	430b      	orrs	r3, r1
 8009aac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	699a      	ldr	r2, [r3, #24]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	69db      	ldr	r3, [r3, #28]
 8009ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009acc:	f040 80e4 	bne.w	8009c98 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4aab      	ldr	r2, [pc, #684]	; (8009d84 <UART_SetConfig+0x324>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d004      	beq.n	8009ae4 <UART_SetConfig+0x84>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4aaa      	ldr	r2, [pc, #680]	; (8009d88 <UART_SetConfig+0x328>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d16c      	bne.n	8009bbe <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009ae4:	f7fd faee 	bl	80070c4 <HAL_RCC_GetPCLK2Freq>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	4613      	mov	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	009a      	lsls	r2, r3, #2
 8009af2:	441a      	add	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009afe:	4aa3      	ldr	r2, [pc, #652]	; (8009d8c <UART_SetConfig+0x32c>)
 8009b00:	fba2 2303 	umull	r2, r3, r2, r3
 8009b04:	095b      	lsrs	r3, r3, #5
 8009b06:	011c      	lsls	r4, r3, #4
 8009b08:	f7fd fadc 	bl	80070c4 <HAL_RCC_GetPCLK2Freq>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	4613      	mov	r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	4413      	add	r3, r2
 8009b14:	009a      	lsls	r2, r3, #2
 8009b16:	441a      	add	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	005b      	lsls	r3, r3, #1
 8009b1e:	fbb2 f5f3 	udiv	r5, r2, r3
 8009b22:	f7fd facf 	bl	80070c4 <HAL_RCC_GetPCLK2Freq>
 8009b26:	4602      	mov	r2, r0
 8009b28:	4613      	mov	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	009a      	lsls	r2, r3, #2
 8009b30:	441a      	add	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b3c:	4a93      	ldr	r2, [pc, #588]	; (8009d8c <UART_SetConfig+0x32c>)
 8009b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b42:	095b      	lsrs	r3, r3, #5
 8009b44:	2264      	movs	r2, #100	; 0x64
 8009b46:	fb02 f303 	mul.w	r3, r2, r3
 8009b4a:	1aeb      	subs	r3, r5, r3
 8009b4c:	00db      	lsls	r3, r3, #3
 8009b4e:	3332      	adds	r3, #50	; 0x32
 8009b50:	4a8e      	ldr	r2, [pc, #568]	; (8009d8c <UART_SetConfig+0x32c>)
 8009b52:	fba2 2303 	umull	r2, r3, r2, r3
 8009b56:	095b      	lsrs	r3, r3, #5
 8009b58:	005b      	lsls	r3, r3, #1
 8009b5a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009b5e:	441c      	add	r4, r3
 8009b60:	f7fd fab0 	bl	80070c4 <HAL_RCC_GetPCLK2Freq>
 8009b64:	4602      	mov	r2, r0
 8009b66:	4613      	mov	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	009a      	lsls	r2, r3, #2
 8009b6e:	441a      	add	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	005b      	lsls	r3, r3, #1
 8009b76:	fbb2 f5f3 	udiv	r5, r2, r3
 8009b7a:	f7fd faa3 	bl	80070c4 <HAL_RCC_GetPCLK2Freq>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	4613      	mov	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4413      	add	r3, r2
 8009b86:	009a      	lsls	r2, r3, #2
 8009b88:	441a      	add	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	005b      	lsls	r3, r3, #1
 8009b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b94:	4a7d      	ldr	r2, [pc, #500]	; (8009d8c <UART_SetConfig+0x32c>)
 8009b96:	fba2 2303 	umull	r2, r3, r2, r3
 8009b9a:	095b      	lsrs	r3, r3, #5
 8009b9c:	2264      	movs	r2, #100	; 0x64
 8009b9e:	fb02 f303 	mul.w	r3, r2, r3
 8009ba2:	1aeb      	subs	r3, r5, r3
 8009ba4:	00db      	lsls	r3, r3, #3
 8009ba6:	3332      	adds	r3, #50	; 0x32
 8009ba8:	4a78      	ldr	r2, [pc, #480]	; (8009d8c <UART_SetConfig+0x32c>)
 8009baa:	fba2 2303 	umull	r2, r3, r2, r3
 8009bae:	095b      	lsrs	r3, r3, #5
 8009bb0:	f003 0207 	and.w	r2, r3, #7
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4422      	add	r2, r4
 8009bba:	609a      	str	r2, [r3, #8]
 8009bbc:	e154      	b.n	8009e68 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8009bbe:	f7fd fa6d 	bl	800709c <HAL_RCC_GetPCLK1Freq>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4413      	add	r3, r2
 8009bca:	009a      	lsls	r2, r3, #2
 8009bcc:	441a      	add	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	005b      	lsls	r3, r3, #1
 8009bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bd8:	4a6c      	ldr	r2, [pc, #432]	; (8009d8c <UART_SetConfig+0x32c>)
 8009bda:	fba2 2303 	umull	r2, r3, r2, r3
 8009bde:	095b      	lsrs	r3, r3, #5
 8009be0:	011c      	lsls	r4, r3, #4
 8009be2:	f7fd fa5b 	bl	800709c <HAL_RCC_GetPCLK1Freq>
 8009be6:	4602      	mov	r2, r0
 8009be8:	4613      	mov	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	009a      	lsls	r2, r3, #2
 8009bf0:	441a      	add	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	005b      	lsls	r3, r3, #1
 8009bf8:	fbb2 f5f3 	udiv	r5, r2, r3
 8009bfc:	f7fd fa4e 	bl	800709c <HAL_RCC_GetPCLK1Freq>
 8009c00:	4602      	mov	r2, r0
 8009c02:	4613      	mov	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4413      	add	r3, r2
 8009c08:	009a      	lsls	r2, r3, #2
 8009c0a:	441a      	add	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	005b      	lsls	r3, r3, #1
 8009c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c16:	4a5d      	ldr	r2, [pc, #372]	; (8009d8c <UART_SetConfig+0x32c>)
 8009c18:	fba2 2303 	umull	r2, r3, r2, r3
 8009c1c:	095b      	lsrs	r3, r3, #5
 8009c1e:	2264      	movs	r2, #100	; 0x64
 8009c20:	fb02 f303 	mul.w	r3, r2, r3
 8009c24:	1aeb      	subs	r3, r5, r3
 8009c26:	00db      	lsls	r3, r3, #3
 8009c28:	3332      	adds	r3, #50	; 0x32
 8009c2a:	4a58      	ldr	r2, [pc, #352]	; (8009d8c <UART_SetConfig+0x32c>)
 8009c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c30:	095b      	lsrs	r3, r3, #5
 8009c32:	005b      	lsls	r3, r3, #1
 8009c34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c38:	441c      	add	r4, r3
 8009c3a:	f7fd fa2f 	bl	800709c <HAL_RCC_GetPCLK1Freq>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	4613      	mov	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4413      	add	r3, r2
 8009c46:	009a      	lsls	r2, r3, #2
 8009c48:	441a      	add	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	005b      	lsls	r3, r3, #1
 8009c50:	fbb2 f5f3 	udiv	r5, r2, r3
 8009c54:	f7fd fa22 	bl	800709c <HAL_RCC_GetPCLK1Freq>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4413      	add	r3, r2
 8009c60:	009a      	lsls	r2, r3, #2
 8009c62:	441a      	add	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	005b      	lsls	r3, r3, #1
 8009c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c6e:	4a47      	ldr	r2, [pc, #284]	; (8009d8c <UART_SetConfig+0x32c>)
 8009c70:	fba2 2303 	umull	r2, r3, r2, r3
 8009c74:	095b      	lsrs	r3, r3, #5
 8009c76:	2264      	movs	r2, #100	; 0x64
 8009c78:	fb02 f303 	mul.w	r3, r2, r3
 8009c7c:	1aeb      	subs	r3, r5, r3
 8009c7e:	00db      	lsls	r3, r3, #3
 8009c80:	3332      	adds	r3, #50	; 0x32
 8009c82:	4a42      	ldr	r2, [pc, #264]	; (8009d8c <UART_SetConfig+0x32c>)
 8009c84:	fba2 2303 	umull	r2, r3, r2, r3
 8009c88:	095b      	lsrs	r3, r3, #5
 8009c8a:	f003 0207 	and.w	r2, r3, #7
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4422      	add	r2, r4
 8009c94:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8009c96:	e0e7      	b.n	8009e68 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a39      	ldr	r2, [pc, #228]	; (8009d84 <UART_SetConfig+0x324>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d004      	beq.n	8009cac <UART_SetConfig+0x24c>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a38      	ldr	r2, [pc, #224]	; (8009d88 <UART_SetConfig+0x328>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d171      	bne.n	8009d90 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009cac:	f7fd fa0a 	bl	80070c4 <HAL_RCC_GetPCLK2Freq>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4413      	add	r3, r2
 8009cb8:	009a      	lsls	r2, r3, #2
 8009cba:	441a      	add	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc6:	4a31      	ldr	r2, [pc, #196]	; (8009d8c <UART_SetConfig+0x32c>)
 8009cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ccc:	095b      	lsrs	r3, r3, #5
 8009cce:	011c      	lsls	r4, r3, #4
 8009cd0:	f7fd f9f8 	bl	80070c4 <HAL_RCC_GetPCLK2Freq>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	009a      	lsls	r2, r3, #2
 8009cde:	441a      	add	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	fbb2 f5f3 	udiv	r5, r2, r3
 8009cea:	f7fd f9eb 	bl	80070c4 <HAL_RCC_GetPCLK2Freq>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	009a      	lsls	r2, r3, #2
 8009cf8:	441a      	add	r2, r3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d04:	4a21      	ldr	r2, [pc, #132]	; (8009d8c <UART_SetConfig+0x32c>)
 8009d06:	fba2 2303 	umull	r2, r3, r2, r3
 8009d0a:	095b      	lsrs	r3, r3, #5
 8009d0c:	2264      	movs	r2, #100	; 0x64
 8009d0e:	fb02 f303 	mul.w	r3, r2, r3
 8009d12:	1aeb      	subs	r3, r5, r3
 8009d14:	011b      	lsls	r3, r3, #4
 8009d16:	3332      	adds	r3, #50	; 0x32
 8009d18:	4a1c      	ldr	r2, [pc, #112]	; (8009d8c <UART_SetConfig+0x32c>)
 8009d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d1e:	095b      	lsrs	r3, r3, #5
 8009d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d24:	441c      	add	r4, r3
 8009d26:	f7fd f9cd 	bl	80070c4 <HAL_RCC_GetPCLK2Freq>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	009a      	lsls	r2, r3, #2
 8009d34:	441a      	add	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	fbb2 f5f3 	udiv	r5, r2, r3
 8009d40:	f7fd f9c0 	bl	80070c4 <HAL_RCC_GetPCLK2Freq>
 8009d44:	4602      	mov	r2, r0
 8009d46:	4613      	mov	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	009a      	lsls	r2, r3, #2
 8009d4e:	441a      	add	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d5a:	4a0c      	ldr	r2, [pc, #48]	; (8009d8c <UART_SetConfig+0x32c>)
 8009d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d60:	095b      	lsrs	r3, r3, #5
 8009d62:	2264      	movs	r2, #100	; 0x64
 8009d64:	fb02 f303 	mul.w	r3, r2, r3
 8009d68:	1aeb      	subs	r3, r5, r3
 8009d6a:	011b      	lsls	r3, r3, #4
 8009d6c:	3332      	adds	r3, #50	; 0x32
 8009d6e:	4a07      	ldr	r2, [pc, #28]	; (8009d8c <UART_SetConfig+0x32c>)
 8009d70:	fba2 2303 	umull	r2, r3, r2, r3
 8009d74:	095b      	lsrs	r3, r3, #5
 8009d76:	f003 020f 	and.w	r2, r3, #15
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4422      	add	r2, r4
 8009d80:	609a      	str	r2, [r3, #8]
 8009d82:	e071      	b.n	8009e68 <UART_SetConfig+0x408>
 8009d84:	40011000 	.word	0x40011000
 8009d88:	40011400 	.word	0x40011400
 8009d8c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8009d90:	f7fd f984 	bl	800709c <HAL_RCC_GetPCLK1Freq>
 8009d94:	4602      	mov	r2, r0
 8009d96:	4613      	mov	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4413      	add	r3, r2
 8009d9c:	009a      	lsls	r2, r3, #2
 8009d9e:	441a      	add	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009daa:	4a31      	ldr	r2, [pc, #196]	; (8009e70 <UART_SetConfig+0x410>)
 8009dac:	fba2 2303 	umull	r2, r3, r2, r3
 8009db0:	095b      	lsrs	r3, r3, #5
 8009db2:	011c      	lsls	r4, r3, #4
 8009db4:	f7fd f972 	bl	800709c <HAL_RCC_GetPCLK1Freq>
 8009db8:	4602      	mov	r2, r0
 8009dba:	4613      	mov	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	009a      	lsls	r2, r3, #2
 8009dc2:	441a      	add	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	fbb2 f5f3 	udiv	r5, r2, r3
 8009dce:	f7fd f965 	bl	800709c <HAL_RCC_GetPCLK1Freq>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4413      	add	r3, r2
 8009dda:	009a      	lsls	r2, r3, #2
 8009ddc:	441a      	add	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de8:	4a21      	ldr	r2, [pc, #132]	; (8009e70 <UART_SetConfig+0x410>)
 8009dea:	fba2 2303 	umull	r2, r3, r2, r3
 8009dee:	095b      	lsrs	r3, r3, #5
 8009df0:	2264      	movs	r2, #100	; 0x64
 8009df2:	fb02 f303 	mul.w	r3, r2, r3
 8009df6:	1aeb      	subs	r3, r5, r3
 8009df8:	011b      	lsls	r3, r3, #4
 8009dfa:	3332      	adds	r3, #50	; 0x32
 8009dfc:	4a1c      	ldr	r2, [pc, #112]	; (8009e70 <UART_SetConfig+0x410>)
 8009dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8009e02:	095b      	lsrs	r3, r3, #5
 8009e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e08:	441c      	add	r4, r3
 8009e0a:	f7fd f947 	bl	800709c <HAL_RCC_GetPCLK1Freq>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	4613      	mov	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	009a      	lsls	r2, r3, #2
 8009e18:	441a      	add	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	fbb2 f5f3 	udiv	r5, r2, r3
 8009e24:	f7fd f93a 	bl	800709c <HAL_RCC_GetPCLK1Freq>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	009a      	lsls	r2, r3, #2
 8009e32:	441a      	add	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e3e:	4a0c      	ldr	r2, [pc, #48]	; (8009e70 <UART_SetConfig+0x410>)
 8009e40:	fba2 2303 	umull	r2, r3, r2, r3
 8009e44:	095b      	lsrs	r3, r3, #5
 8009e46:	2264      	movs	r2, #100	; 0x64
 8009e48:	fb02 f303 	mul.w	r3, r2, r3
 8009e4c:	1aeb      	subs	r3, r5, r3
 8009e4e:	011b      	lsls	r3, r3, #4
 8009e50:	3332      	adds	r3, #50	; 0x32
 8009e52:	4a07      	ldr	r2, [pc, #28]	; (8009e70 <UART_SetConfig+0x410>)
 8009e54:	fba2 2303 	umull	r2, r3, r2, r3
 8009e58:	095b      	lsrs	r3, r3, #5
 8009e5a:	f003 020f 	and.w	r2, r3, #15
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4422      	add	r2, r4
 8009e64:	609a      	str	r2, [r3, #8]
}
 8009e66:	e7ff      	b.n	8009e68 <UART_SetConfig+0x408>
 8009e68:	bf00      	nop
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8009e70:	51eb851f 	.word	0x51eb851f

08009e74 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009e74:	b084      	sub	sp, #16
 8009e76:	b480      	push	{r7}
 8009e78:	b085      	sub	sp, #20
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	f107 001c 	add.w	r0, r7, #28
 8009e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 8009e86:	2300      	movs	r3, #0
 8009e88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009e8a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009e8c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009e8e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009e92:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009e96:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009e9a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009e9e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009eae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009eb2:	68fa      	ldr	r2, [r7, #12]
 8009eb4:	431a      	orrs	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3714      	adds	r7, #20
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	b004      	add	sp, #16
 8009ec8:	4770      	bx	lr

08009eca <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b083      	sub	sp, #12
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	370c      	adds	r7, #12
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009f06:	b480      	push	{r7}
 8009f08:	b083      	sub	sp, #12
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2203      	movs	r2, #3
 8009f12:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	370c      	adds	r7, #12
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009f22:	b480      	push	{r7}
 8009f24:	b083      	sub	sp, #12
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 0303 	and.w	r3, r3, #3
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	370c      	adds	r7, #12
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009f3e:	b480      	push	{r7}
 8009f40:	b085      	sub	sp, #20
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f5c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009f62:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009f68:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009f78:	f023 030f 	bic.w	r3, r3, #15
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	431a      	orrs	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3714      	adds	r7, #20
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b083      	sub	sp, #12
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	b2db      	uxtb	r3, r3
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	3314      	adds	r3, #20
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
}  
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3714      	adds	r7, #20
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr

08009fd6 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b085      	sub	sp, #20
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	685a      	ldr	r2, [r3, #4]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ffc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a002:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a008:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a014:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	431a      	orrs	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a020:	2300      	movs	r3, #0

}
 800a022:	4618      	mov	r0, r3
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b088      	sub	sp, #32
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a038:	2300      	movs	r3, #0
 800a03a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a040:	2310      	movs	r3, #16
 800a042:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a044:	2340      	movs	r3, #64	; 0x40
 800a046:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a048:	2300      	movs	r3, #0
 800a04a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a04c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a050:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a052:	f107 0308 	add.w	r3, r7, #8
 800a056:	4619      	mov	r1, r3
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7ff ff70 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a05e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a062:	2110      	movs	r1, #16
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fa63 	bl	800a530 <SDMMC_GetCmdResp1>
 800a06a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a06c:	69fb      	ldr	r3, [r7, #28]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3720      	adds	r7, #32
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b088      	sub	sp, #32
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a080:	2300      	movs	r3, #0
 800a082:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a088:	2311      	movs	r3, #17
 800a08a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a08c:	2340      	movs	r3, #64	; 0x40
 800a08e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a090:	2300      	movs	r3, #0
 800a092:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a098:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a09a:	f107 0308 	add.w	r3, r7, #8
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7ff ff4c 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a0a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0aa:	2111      	movs	r1, #17
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 fa3f 	bl	800a530 <SDMMC_GetCmdResp1>
 800a0b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0b4:	69fb      	ldr	r3, [r7, #28]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3720      	adds	r7, #32
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b088      	sub	sp, #32
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a0d0:	2312      	movs	r3, #18
 800a0d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0d4:	2340      	movs	r3, #64	; 0x40
 800a0d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0e0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0e2:	f107 0308 	add.w	r3, r7, #8
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7ff ff28 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a0ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0f2:	2112      	movs	r1, #18
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 fa1b 	bl	800a530 <SDMMC_GetCmdResp1>
 800a0fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0fc:	69fb      	ldr	r3, [r7, #28]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3720      	adds	r7, #32
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b088      	sub	sp, #32
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
 800a10e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a110:	2300      	movs	r3, #0
 800a112:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a118:	2318      	movs	r3, #24
 800a11a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a11c:	2340      	movs	r3, #64	; 0x40
 800a11e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a120:	2300      	movs	r3, #0
 800a122:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a128:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a12a:	f107 0308 	add.w	r3, r7, #8
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f7ff ff04 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a136:	f241 3288 	movw	r2, #5000	; 0x1388
 800a13a:	2118      	movs	r1, #24
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 f9f7 	bl	800a530 <SDMMC_GetCmdResp1>
 800a142:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a144:	69fb      	ldr	r3, [r7, #28]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3720      	adds	r7, #32
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b088      	sub	sp, #32
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
 800a156:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a158:	2300      	movs	r3, #0
 800a15a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a160:	2319      	movs	r3, #25
 800a162:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a164:	2340      	movs	r3, #64	; 0x40
 800a166:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a168:	2300      	movs	r3, #0
 800a16a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a16c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a170:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a172:	f107 0308 	add.w	r3, r7, #8
 800a176:	4619      	mov	r1, r3
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7ff fee0 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a17e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a182:	2119      	movs	r1, #25
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f9d3 	bl	800a530 <SDMMC_GetCmdResp1>
 800a18a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a18c:	69fb      	ldr	r3, [r7, #28]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3720      	adds	r7, #32
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
	...

0800a198 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b088      	sub	sp, #32
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a1a8:	230c      	movs	r3, #12
 800a1aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1ac:	2340      	movs	r3, #64	; 0x40
 800a1ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1b8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1ba:	f107 0308 	add.w	r3, r7, #8
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7ff febc 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800a1c6:	4a05      	ldr	r2, [pc, #20]	; (800a1dc <SDMMC_CmdStopTransfer+0x44>)
 800a1c8:	210c      	movs	r1, #12
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 f9b0 	bl	800a530 <SDMMC_GetCmdResp1>
 800a1d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1d2:	69fb      	ldr	r3, [r7, #28]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3720      	adds	r7, #32
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	05f5e100 	.word	0x05f5e100

0800a1e0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08a      	sub	sp, #40	; 0x28
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a1f4:	2307      	movs	r3, #7
 800a1f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1f8:	2340      	movs	r3, #64	; 0x40
 800a1fa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a204:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a206:	f107 0310 	add.w	r3, r7, #16
 800a20a:	4619      	mov	r1, r3
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f7ff fe96 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a212:	f241 3288 	movw	r2, #5000	; 0x1388
 800a216:	2107      	movs	r1, #7
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 f989 	bl	800a530 <SDMMC_GetCmdResp1>
 800a21e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a222:	4618      	mov	r0, r3
 800a224:	3728      	adds	r7, #40	; 0x28
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b088      	sub	sp, #32
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a232:	2300      	movs	r3, #0
 800a234:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800a236:	2300      	movs	r3, #0
 800a238:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a23a:	2300      	movs	r3, #0
 800a23c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a23e:	2300      	movs	r3, #0
 800a240:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a242:	2300      	movs	r3, #0
 800a244:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a24a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a24c:	f107 0308 	add.w	r3, r7, #8
 800a250:	4619      	mov	r1, r3
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7ff fe73 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f93f 	bl	800a4dc <SDMMC_GetCmdError>
 800a25e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a260:	69fb      	ldr	r3, [r7, #28]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3720      	adds	r7, #32
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b088      	sub	sp, #32
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a272:	2300      	movs	r3, #0
 800a274:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a276:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a27a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a27c:	2308      	movs	r3, #8
 800a27e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a280:	2340      	movs	r3, #64	; 0x40
 800a282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a284:	2300      	movs	r3, #0
 800a286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a28c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a28e:	f107 0308 	add.w	r3, r7, #8
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7ff fe52 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fb10 	bl	800a8c0 <SDMMC_GetCmdResp7>
 800a2a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2a2:	69fb      	ldr	r3, [r7, #28]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3720      	adds	r7, #32
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b088      	sub	sp, #32
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a2be:	2337      	movs	r3, #55	; 0x37
 800a2c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2c2:	2340      	movs	r3, #64	; 0x40
 800a2c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2ce:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2d0:	f107 0308 	add.w	r3, r7, #8
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f7ff fe31 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a2dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2e0:	2137      	movs	r1, #55	; 0x37
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 f924 	bl	800a530 <SDMMC_GetCmdResp1>
 800a2e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2ea:	69fb      	ldr	r3, [r7, #28]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3720      	adds	r7, #32
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b088      	sub	sp, #32
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a2fe:	2300      	movs	r3, #0
 800a300:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a30c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a30e:	2329      	movs	r3, #41	; 0x29
 800a310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a312:	2340      	movs	r3, #64	; 0x40
 800a314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a316:	2300      	movs	r3, #0
 800a318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a31a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a31e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a320:	f107 0308 	add.w	r3, r7, #8
 800a324:	4619      	mov	r1, r3
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7ff fe09 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fa25 	bl	800a77c <SDMMC_GetCmdResp3>
 800a332:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a334:	69fb      	ldr	r3, [r7, #28]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3720      	adds	r7, #32
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b088      	sub	sp, #32
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a348:	2300      	movs	r3, #0
 800a34a:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a350:	2306      	movs	r3, #6
 800a352:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a354:	2340      	movs	r3, #64	; 0x40
 800a356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a358:	2300      	movs	r3, #0
 800a35a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a35c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a360:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a362:	f107 0308 	add.w	r3, r7, #8
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7ff fde8 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a36e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a372:	2106      	movs	r1, #6
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 f8db 	bl	800a530 <SDMMC_GetCmdResp1>
 800a37a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a37c:	69fb      	ldr	r3, [r7, #28]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3720      	adds	r7, #32
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b088      	sub	sp, #32
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a38e:	2300      	movs	r3, #0
 800a390:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a392:	2300      	movs	r3, #0
 800a394:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a396:	2333      	movs	r3, #51	; 0x33
 800a398:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a39a:	2340      	movs	r3, #64	; 0x40
 800a39c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3a6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3a8:	f107 0308 	add.w	r3, r7, #8
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7ff fdc5 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a3b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3b8:	2133      	movs	r1, #51	; 0x33
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 f8b8 	bl	800a530 <SDMMC_GetCmdResp1>
 800a3c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3c2:	69fb      	ldr	r3, [r7, #28]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3720      	adds	r7, #32
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b088      	sub	sp, #32
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a3dc:	2302      	movs	r3, #2
 800a3de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a3e0:	23c0      	movs	r3, #192	; 0xc0
 800a3e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3ec:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3ee:	f107 0308 	add.w	r3, r7, #8
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f7ff fda2 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f97e 	bl	800a6fc <SDMMC_GetCmdResp2>
 800a400:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a402:	69fb      	ldr	r3, [r7, #28]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3720      	adds	r7, #32
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b088      	sub	sp, #32
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a416:	2300      	movs	r3, #0
 800a418:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a41e:	2309      	movs	r3, #9
 800a420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a422:	23c0      	movs	r3, #192	; 0xc0
 800a424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a426:	2300      	movs	r3, #0
 800a428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a42a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a42e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a430:	f107 0308 	add.w	r3, r7, #8
 800a434:	4619      	mov	r1, r3
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f7ff fd81 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f95d 	bl	800a6fc <SDMMC_GetCmdResp2>
 800a442:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a444:	69fb      	ldr	r3, [r7, #28]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3720      	adds	r7, #32
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b088      	sub	sp, #32
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a458:	2300      	movs	r3, #0
 800a45a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a45c:	2300      	movs	r3, #0
 800a45e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a460:	2303      	movs	r3, #3
 800a462:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a464:	2340      	movs	r3, #64	; 0x40
 800a466:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a468:	2300      	movs	r3, #0
 800a46a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a46c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a470:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a472:	f107 0308 	add.w	r3, r7, #8
 800a476:	4619      	mov	r1, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f7ff fd60 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	2103      	movs	r1, #3
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f9ae 	bl	800a7e4 <SDMMC_GetCmdResp6>
 800a488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a48a:	69fb      	ldr	r3, [r7, #28]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3720      	adds	r7, #32
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b088      	sub	sp, #32
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a4a6:	230d      	movs	r3, #13
 800a4a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4aa:	2340      	movs	r3, #64	; 0x40
 800a4ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4b6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4b8:	f107 0308 	add.w	r3, r7, #8
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7ff fd3d 	bl	8009f3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a4c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4c8:	210d      	movs	r1, #13
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 f830 	bl	800a530 <SDMMC_GetCmdResp1>
 800a4d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4d2:	69fb      	ldr	r3, [r7, #28]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3720      	adds	r7, #32
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a4dc:	b490      	push	{r4, r7}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a4e4:	4b10      	ldr	r3, [pc, #64]	; (800a528 <SDMMC_GetCmdError+0x4c>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a10      	ldr	r2, [pc, #64]	; (800a52c <SDMMC_GetCmdError+0x50>)
 800a4ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ee:	0a5b      	lsrs	r3, r3, #9
 800a4f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4f4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a4f8:	4623      	mov	r3, r4
 800a4fa:	1e5c      	subs	r4, r3, #1
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d102      	bne.n	800a506 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a500:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a504:	e00a      	b.n	800a51c <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a50a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d0f2      	beq.n	800a4f8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a518:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bc90      	pop	{r4, r7}
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	2000015c 	.word	0x2000015c
 800a52c:	10624dd3 	.word	0x10624dd3

0800a530 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a530:	b590      	push	{r4, r7, lr}
 800a532:	b087      	sub	sp, #28
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	460b      	mov	r3, r1
 800a53a:	607a      	str	r2, [r7, #4]
 800a53c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a53e:	4b6c      	ldr	r3, [pc, #432]	; (800a6f0 <SDMMC_GetCmdResp1+0x1c0>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a6c      	ldr	r2, [pc, #432]	; (800a6f4 <SDMMC_GetCmdResp1+0x1c4>)
 800a544:	fba2 2303 	umull	r2, r3, r2, r3
 800a548:	0a5b      	lsrs	r3, r3, #9
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a550:	4623      	mov	r3, r4
 800a552:	1e5c      	subs	r4, r3, #1
 800a554:	2b00      	cmp	r3, #0
 800a556:	d102      	bne.n	800a55e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a558:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a55c:	e0c3      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a562:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a566:	2b00      	cmp	r3, #0
 800a568:	d0f2      	beq.n	800a550 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a56e:	f003 0304 	and.w	r3, r3, #4
 800a572:	2b00      	cmp	r3, #0
 800a574:	d004      	beq.n	800a580 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2204      	movs	r2, #4
 800a57a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a57c:	2304      	movs	r3, #4
 800a57e:	e0b2      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a584:	f003 0301 	and.w	r3, r3, #1
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d004      	beq.n	800a596 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2201      	movs	r2, #1
 800a590:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a592:	2301      	movs	r3, #1
 800a594:	e0a7      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f7ff fcfb 	bl	8009f92 <SDIO_GetCommandResponse>
 800a59c:	4603      	mov	r3, r0
 800a59e:	461a      	mov	r2, r3
 800a5a0:	7afb      	ldrb	r3, [r7, #11]
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d001      	beq.n	800a5aa <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e09d      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a5b0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f7ff fcf9 	bl	8009fac <SDIO_GetResponse>
 800a5ba:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	4b4e      	ldr	r3, [pc, #312]	; (800a6f8 <SDMMC_GetCmdResp1+0x1c8>)
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	e08d      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	da02      	bge.n	800a5d6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a5d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5d4:	e087      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d001      	beq.n	800a5e4 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a5e0:	2340      	movs	r3, #64	; 0x40
 800a5e2:	e080      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d001      	beq.n	800a5f2 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a5ee:	2380      	movs	r3, #128	; 0x80
 800a5f0:	e079      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d002      	beq.n	800a602 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a5fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a600:	e071      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d002      	beq.n	800a612 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a60c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a610:	e069      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d002      	beq.n	800a622 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a61c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a620:	e061      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d002      	beq.n	800a632 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a62c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a630:	e059      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d002      	beq.n	800a642 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a63c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a640:	e051      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d002      	beq.n	800a652 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a64c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a650:	e049      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a65c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a660:	e041      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800a66c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a670:	e039      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d002      	beq.n	800a682 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a67c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a680:	e031      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d002      	beq.n	800a692 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a68c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a690:	e029      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d002      	beq.n	800a6a2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a69c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a6a0:	e021      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a6ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a6b0:	e019      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a6bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a6c0:	e011      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d002      	beq.n	800a6d2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a6cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a6d0:	e009      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f003 0308 	and.w	r3, r3, #8
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d002      	beq.n	800a6e2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a6dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a6e0:	e001      	b.n	800a6e6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a6e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	371c      	adds	r7, #28
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd90      	pop	{r4, r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	2000015c 	.word	0x2000015c
 800a6f4:	10624dd3 	.word	0x10624dd3
 800a6f8:	fdffe008 	.word	0xfdffe008

0800a6fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a6fc:	b490      	push	{r4, r7}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a704:	4b1b      	ldr	r3, [pc, #108]	; (800a774 <SDMMC_GetCmdResp2+0x78>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a1b      	ldr	r2, [pc, #108]	; (800a778 <SDMMC_GetCmdResp2+0x7c>)
 800a70a:	fba2 2303 	umull	r2, r3, r2, r3
 800a70e:	0a5b      	lsrs	r3, r3, #9
 800a710:	f241 3288 	movw	r2, #5000	; 0x1388
 800a714:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a718:	4623      	mov	r3, r4
 800a71a:	1e5c      	subs	r4, r3, #1
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d102      	bne.n	800a726 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a720:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a724:	e020      	b.n	800a768 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a72a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d0f2      	beq.n	800a718 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a736:	f003 0304 	and.w	r3, r3, #4
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d004      	beq.n	800a748 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2204      	movs	r2, #4
 800a742:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a744:	2304      	movs	r3, #4
 800a746:	e00f      	b.n	800a768 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a74c:	f003 0301 	and.w	r3, r3, #1
 800a750:	2b00      	cmp	r3, #0
 800a752:	d004      	beq.n	800a75e <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a75a:	2301      	movs	r3, #1
 800a75c:	e004      	b.n	800a768 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a764:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bc90      	pop	{r4, r7}
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	2000015c 	.word	0x2000015c
 800a778:	10624dd3 	.word	0x10624dd3

0800a77c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a77c:	b490      	push	{r4, r7}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a784:	4b15      	ldr	r3, [pc, #84]	; (800a7dc <SDMMC_GetCmdResp3+0x60>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a15      	ldr	r2, [pc, #84]	; (800a7e0 <SDMMC_GetCmdResp3+0x64>)
 800a78a:	fba2 2303 	umull	r2, r3, r2, r3
 800a78e:	0a5b      	lsrs	r3, r3, #9
 800a790:	f241 3288 	movw	r2, #5000	; 0x1388
 800a794:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a798:	4623      	mov	r3, r4
 800a79a:	1e5c      	subs	r4, r3, #1
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d102      	bne.n	800a7a6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7a4:	e015      	b.n	800a7d2 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d0f2      	beq.n	800a798 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b6:	f003 0304 	and.w	r3, r3, #4
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d004      	beq.n	800a7c8 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2204      	movs	r2, #4
 800a7c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7c4:	2304      	movs	r3, #4
 800a7c6:	e004      	b.n	800a7d2 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a7ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bc90      	pop	{r4, r7}
 800a7da:	4770      	bx	lr
 800a7dc:	2000015c 	.word	0x2000015c
 800a7e0:	10624dd3 	.word	0x10624dd3

0800a7e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a7e4:	b590      	push	{r4, r7, lr}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	607a      	str	r2, [r7, #4]
 800a7f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a7f2:	4b31      	ldr	r3, [pc, #196]	; (800a8b8 <SDMMC_GetCmdResp6+0xd4>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a31      	ldr	r2, [pc, #196]	; (800a8bc <SDMMC_GetCmdResp6+0xd8>)
 800a7f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a7fc:	0a5b      	lsrs	r3, r3, #9
 800a7fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a802:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a806:	4623      	mov	r3, r4
 800a808:	1e5c      	subs	r4, r3, #1
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d102      	bne.n	800a814 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a80e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a812:	e04c      	b.n	800a8ae <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a818:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d0f2      	beq.n	800a806 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a824:	f003 0304 	and.w	r3, r3, #4
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d004      	beq.n	800a836 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2204      	movs	r2, #4
 800a830:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a832:	2304      	movs	r3, #4
 800a834:	e03b      	b.n	800a8ae <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a83a:	f003 0301 	and.w	r3, r3, #1
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d004      	beq.n	800a84c <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2201      	movs	r2, #1
 800a846:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a848:	2301      	movs	r3, #1
 800a84a:	e030      	b.n	800a8ae <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f7ff fba0 	bl	8009f92 <SDIO_GetCommandResponse>
 800a852:	4603      	mov	r3, r0
 800a854:	461a      	mov	r2, r3
 800a856:	7afb      	ldrb	r3, [r7, #11]
 800a858:	4293      	cmp	r3, r2
 800a85a:	d001      	beq.n	800a860 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e026      	b.n	800a8ae <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a866:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a868:	2100      	movs	r1, #0
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f7ff fb9e 	bl	8009fac <SDIO_GetResponse>
 800a870:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d106      	bne.n	800a88a <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	0c1b      	lsrs	r3, r3, #16
 800a880:	b29a      	uxth	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a886:	2300      	movs	r3, #0
 800a888:	e011      	b.n	800a8ae <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a898:	e009      	b.n	800a8ae <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d002      	beq.n	800a8aa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a8a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8a8:	e001      	b.n	800a8ae <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a8aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	371c      	adds	r7, #28
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd90      	pop	{r4, r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	2000015c 	.word	0x2000015c
 800a8bc:	10624dd3 	.word	0x10624dd3

0800a8c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a8c0:	b490      	push	{r4, r7}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a8c8:	4b18      	ldr	r3, [pc, #96]	; (800a92c <SDMMC_GetCmdResp7+0x6c>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a18      	ldr	r2, [pc, #96]	; (800a930 <SDMMC_GetCmdResp7+0x70>)
 800a8ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d2:	0a5b      	lsrs	r3, r3, #9
 800a8d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a8dc:	4623      	mov	r3, r4
 800a8de:	1e5c      	subs	r4, r3, #1
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d102      	bne.n	800a8ea <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a8e8:	e01a      	b.n	800a920 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d0f2      	beq.n	800a8dc <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8fa:	f003 0304 	and.w	r3, r3, #4
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d004      	beq.n	800a90c <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2240      	movs	r2, #64	; 0x40
 800a906:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a908:	2304      	movs	r3, #4
 800a90a:	e009      	b.n	800a920 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a914:	2b00      	cmp	r3, #0
 800a916:	d002      	beq.n	800a91e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2240      	movs	r2, #64	; 0x40
 800a91c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a91e:	2300      	movs	r3, #0
  
}
 800a920:	4618      	mov	r0, r3
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bc90      	pop	{r4, r7}
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	2000015c 	.word	0x2000015c
 800a930:	10624dd3 	.word	0x10624dd3

0800a934 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a934:	b084      	sub	sp, #16
 800a936:	b580      	push	{r7, lr}
 800a938:	b084      	sub	sp, #16
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	f107 001c 	add.w	r0, r7, #28
 800a942:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d122      	bne.n	800a992 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a950:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a976:	2b01      	cmp	r3, #1
 800a978:	d105      	bne.n	800a986 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f001 fa7c 	bl	800be84 <USB_CoreReset>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73fb      	strb	r3, [r7, #15]
 800a990:	e01a      	b.n	800a9c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f001 fa70 	bl	800be84 <USB_CoreReset>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a9a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d106      	bne.n	800a9bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	639a      	str	r2, [r3, #56]	; 0x38
 800a9ba:	e005      	b.n	800a9c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d10b      	bne.n	800a9e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	f043 0206 	orr.w	r2, r3, #6
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	f043 0220 	orr.w	r2, r3, #32
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a9f2:	b004      	add	sp, #16
 800a9f4:	4770      	bx	lr
	...

0800a9f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b087      	sub	sp, #28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	4613      	mov	r3, r2
 800aa04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800aa06:	79fb      	ldrb	r3, [r7, #7]
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d165      	bne.n	800aad8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	4a41      	ldr	r2, [pc, #260]	; (800ab14 <USB_SetTurnaroundTime+0x11c>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d906      	bls.n	800aa22 <USB_SetTurnaroundTime+0x2a>
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	4a40      	ldr	r2, [pc, #256]	; (800ab18 <USB_SetTurnaroundTime+0x120>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d802      	bhi.n	800aa22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800aa1c:	230f      	movs	r3, #15
 800aa1e:	617b      	str	r3, [r7, #20]
 800aa20:	e062      	b.n	800aae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	4a3c      	ldr	r2, [pc, #240]	; (800ab18 <USB_SetTurnaroundTime+0x120>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d906      	bls.n	800aa38 <USB_SetTurnaroundTime+0x40>
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	4a3b      	ldr	r2, [pc, #236]	; (800ab1c <USB_SetTurnaroundTime+0x124>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d802      	bhi.n	800aa38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800aa32:	230e      	movs	r3, #14
 800aa34:	617b      	str	r3, [r7, #20]
 800aa36:	e057      	b.n	800aae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	4a38      	ldr	r2, [pc, #224]	; (800ab1c <USB_SetTurnaroundTime+0x124>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d906      	bls.n	800aa4e <USB_SetTurnaroundTime+0x56>
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	4a37      	ldr	r2, [pc, #220]	; (800ab20 <USB_SetTurnaroundTime+0x128>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d802      	bhi.n	800aa4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800aa48:	230d      	movs	r3, #13
 800aa4a:	617b      	str	r3, [r7, #20]
 800aa4c:	e04c      	b.n	800aae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	4a33      	ldr	r2, [pc, #204]	; (800ab20 <USB_SetTurnaroundTime+0x128>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d906      	bls.n	800aa64 <USB_SetTurnaroundTime+0x6c>
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	4a32      	ldr	r2, [pc, #200]	; (800ab24 <USB_SetTurnaroundTime+0x12c>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d802      	bhi.n	800aa64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800aa5e:	230c      	movs	r3, #12
 800aa60:	617b      	str	r3, [r7, #20]
 800aa62:	e041      	b.n	800aae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	4a2f      	ldr	r2, [pc, #188]	; (800ab24 <USB_SetTurnaroundTime+0x12c>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d906      	bls.n	800aa7a <USB_SetTurnaroundTime+0x82>
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	4a2e      	ldr	r2, [pc, #184]	; (800ab28 <USB_SetTurnaroundTime+0x130>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d802      	bhi.n	800aa7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800aa74:	230b      	movs	r3, #11
 800aa76:	617b      	str	r3, [r7, #20]
 800aa78:	e036      	b.n	800aae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	4a2a      	ldr	r2, [pc, #168]	; (800ab28 <USB_SetTurnaroundTime+0x130>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d906      	bls.n	800aa90 <USB_SetTurnaroundTime+0x98>
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	4a29      	ldr	r2, [pc, #164]	; (800ab2c <USB_SetTurnaroundTime+0x134>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d802      	bhi.n	800aa90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800aa8a:	230a      	movs	r3, #10
 800aa8c:	617b      	str	r3, [r7, #20]
 800aa8e:	e02b      	b.n	800aae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	4a26      	ldr	r2, [pc, #152]	; (800ab2c <USB_SetTurnaroundTime+0x134>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d906      	bls.n	800aaa6 <USB_SetTurnaroundTime+0xae>
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	4a25      	ldr	r2, [pc, #148]	; (800ab30 <USB_SetTurnaroundTime+0x138>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d802      	bhi.n	800aaa6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800aaa0:	2309      	movs	r3, #9
 800aaa2:	617b      	str	r3, [r7, #20]
 800aaa4:	e020      	b.n	800aae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	4a21      	ldr	r2, [pc, #132]	; (800ab30 <USB_SetTurnaroundTime+0x138>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d906      	bls.n	800aabc <USB_SetTurnaroundTime+0xc4>
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	4a20      	ldr	r2, [pc, #128]	; (800ab34 <USB_SetTurnaroundTime+0x13c>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d802      	bhi.n	800aabc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800aab6:	2308      	movs	r3, #8
 800aab8:	617b      	str	r3, [r7, #20]
 800aaba:	e015      	b.n	800aae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	4a1d      	ldr	r2, [pc, #116]	; (800ab34 <USB_SetTurnaroundTime+0x13c>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d906      	bls.n	800aad2 <USB_SetTurnaroundTime+0xda>
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	4a1c      	ldr	r2, [pc, #112]	; (800ab38 <USB_SetTurnaroundTime+0x140>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d802      	bhi.n	800aad2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800aacc:	2307      	movs	r3, #7
 800aace:	617b      	str	r3, [r7, #20]
 800aad0:	e00a      	b.n	800aae8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800aad2:	2306      	movs	r3, #6
 800aad4:	617b      	str	r3, [r7, #20]
 800aad6:	e007      	b.n	800aae8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800aad8:	79fb      	ldrb	r3, [r7, #7]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d102      	bne.n	800aae4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800aade:	2309      	movs	r3, #9
 800aae0:	617b      	str	r3, [r7, #20]
 800aae2:	e001      	b.n	800aae8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800aae4:	2309      	movs	r3, #9
 800aae6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	68da      	ldr	r2, [r3, #12]
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	029b      	lsls	r3, r3, #10
 800aafc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ab00:	431a      	orrs	r2, r3
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	371c      	adds	r7, #28
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr
 800ab14:	00d8acbf 	.word	0x00d8acbf
 800ab18:	00e4e1bf 	.word	0x00e4e1bf
 800ab1c:	00f423ff 	.word	0x00f423ff
 800ab20:	0106737f 	.word	0x0106737f
 800ab24:	011a499f 	.word	0x011a499f
 800ab28:	01312cff 	.word	0x01312cff
 800ab2c:	014ca43f 	.word	0x014ca43f
 800ab30:	016e35ff 	.word	0x016e35ff
 800ab34:	01a6ab1f 	.word	0x01a6ab1f
 800ab38:	01e847ff 	.word	0x01e847ff

0800ab3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	f043 0201 	orr.w	r2, r3, #1
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	370c      	adds	r7, #12
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab5e:	b480      	push	{r7}
 800ab60:	b083      	sub	sp, #12
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	f023 0201 	bic.w	r2, r3, #1
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ab98:	78fb      	ldrb	r3, [r7, #3]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d106      	bne.n	800abac <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	60da      	str	r2, [r3, #12]
 800abaa:	e00b      	b.n	800abc4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800abac:	78fb      	ldrb	r3, [r7, #3]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d106      	bne.n	800abc0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	60da      	str	r2, [r3, #12]
 800abbe:	e001      	b.n	800abc4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	e003      	b.n	800abcc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800abc4:	2032      	movs	r0, #50	; 0x32
 800abc6:	f7f8 fee5 	bl	8003994 <HAL_Delay>

  return HAL_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800abd4:	b084      	sub	sp, #16
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b086      	sub	sp, #24
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800abe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800abe6:	2300      	movs	r3, #0
 800abe8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800abee:	2300      	movs	r3, #0
 800abf0:	613b      	str	r3, [r7, #16]
 800abf2:	e009      	b.n	800ac08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	3340      	adds	r3, #64	; 0x40
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4413      	add	r3, r2
 800abfe:	2200      	movs	r2, #0
 800ac00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	3301      	adds	r3, #1
 800ac06:	613b      	str	r3, [r7, #16]
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	2b0e      	cmp	r3, #14
 800ac0c:	d9f2      	bls.n	800abf4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ac0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d112      	bne.n	800ac3a <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	639a      	str	r2, [r3, #56]	; 0x38
 800ac38:	e00b      	b.n	800ac52 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac58:	461a      	mov	r2, r3
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac64:	4619      	mov	r1, r3
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	680b      	ldr	r3, [r1, #0]
 800ac70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d10c      	bne.n	800ac92 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ac78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d104      	bne.n	800ac88 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ac7e:	2100      	movs	r1, #0
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 f961 	bl	800af48 <USB_SetDevSpeed>
 800ac86:	e008      	b.n	800ac9a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ac88:	2101      	movs	r1, #1
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f95c 	bl	800af48 <USB_SetDevSpeed>
 800ac90:	e003      	b.n	800ac9a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ac92:	2103      	movs	r1, #3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f957 	bl	800af48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ac9a:	2110      	movs	r1, #16
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f90b 	bl	800aeb8 <USB_FlushTxFifo>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f929 	bl	800af04 <USB_FlushRxFifo>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d001      	beq.n	800acbc <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acc2:	461a      	mov	r2, r3
 800acc4:	2300      	movs	r3, #0
 800acc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acce:	461a      	mov	r2, r3
 800acd0:	2300      	movs	r3, #0
 800acd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acda:	461a      	mov	r2, r3
 800acdc:	2300      	movs	r3, #0
 800acde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ace0:	2300      	movs	r3, #0
 800ace2:	613b      	str	r3, [r7, #16]
 800ace4:	e043      	b.n	800ad6e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	015a      	lsls	r2, r3, #5
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	4413      	add	r3, r2
 800acee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acfc:	d118      	bne.n	800ad30 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10a      	bne.n	800ad1a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	015a      	lsls	r2, r3, #5
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad10:	461a      	mov	r2, r3
 800ad12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ad16:	6013      	str	r3, [r2, #0]
 800ad18:	e013      	b.n	800ad42 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	015a      	lsls	r2, r3, #5
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	4413      	add	r3, r2
 800ad22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad26:	461a      	mov	r2, r3
 800ad28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ad2c:	6013      	str	r3, [r2, #0]
 800ad2e:	e008      	b.n	800ad42 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	015a      	lsls	r2, r3, #5
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	4413      	add	r3, r2
 800ad38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	2300      	movs	r3, #0
 800ad40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	015a      	lsls	r2, r3, #5
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	4413      	add	r3, r2
 800ad4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad4e:	461a      	mov	r2, r3
 800ad50:	2300      	movs	r3, #0
 800ad52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	015a      	lsls	r2, r3, #5
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad60:	461a      	mov	r2, r3
 800ad62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ad66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	613b      	str	r3, [r7, #16]
 800ad6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad70:	693a      	ldr	r2, [r7, #16]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d3b7      	bcc.n	800ace6 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad76:	2300      	movs	r3, #0
 800ad78:	613b      	str	r3, [r7, #16]
 800ad7a:	e043      	b.n	800ae04 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	015a      	lsls	r2, r3, #5
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	4413      	add	r3, r2
 800ad84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad92:	d118      	bne.n	800adc6 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10a      	bne.n	800adb0 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	015a      	lsls	r2, r3, #5
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	4413      	add	r3, r2
 800ada2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ada6:	461a      	mov	r2, r3
 800ada8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800adac:	6013      	str	r3, [r2, #0]
 800adae:	e013      	b.n	800add8 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	015a      	lsls	r2, r3, #5
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	4413      	add	r3, r2
 800adb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adbc:	461a      	mov	r2, r3
 800adbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800adc2:	6013      	str	r3, [r2, #0]
 800adc4:	e008      	b.n	800add8 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	015a      	lsls	r2, r3, #5
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	4413      	add	r3, r2
 800adce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800add2:	461a      	mov	r2, r3
 800add4:	2300      	movs	r3, #0
 800add6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	015a      	lsls	r2, r3, #5
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	4413      	add	r3, r2
 800ade0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ade4:	461a      	mov	r2, r3
 800ade6:	2300      	movs	r3, #0
 800ade8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	015a      	lsls	r2, r3, #5
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	4413      	add	r3, r2
 800adf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adf6:	461a      	mov	r2, r3
 800adf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800adfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	3301      	adds	r3, #1
 800ae02:	613b      	str	r3, [r7, #16]
 800ae04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d3b7      	bcc.n	800ad7c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae1e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d111      	bne.n	800ae4a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	4b20      	ldr	r3, [pc, #128]	; (800aeb0 <USB_DevInit+0x2dc>)
 800ae30:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae44:	f043 0303 	orr.w	r3, r3, #3
 800ae48:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ae56:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ae58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d105      	bne.n	800ae6a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	699b      	ldr	r3, [r3, #24]
 800ae62:	f043 0210 	orr.w	r2, r3, #16
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	699a      	ldr	r2, [r3, #24]
 800ae6e:	4b11      	ldr	r3, [pc, #68]	; (800aeb4 <USB_DevInit+0x2e0>)
 800ae70:	4313      	orrs	r3, r2
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ae76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d005      	beq.n	800ae88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	f043 0208 	orr.w	r2, r3, #8
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ae88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d107      	bne.n	800ae9e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae96:	f043 0304 	orr.w	r3, r3, #4
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ae9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3718      	adds	r7, #24
 800aea4:	46bd      	mov	sp, r7
 800aea6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aeaa:	b004      	add	sp, #16
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	00800100 	.word	0x00800100
 800aeb4:	803c3800 	.word	0x803c3800

0800aeb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800aec2:	2300      	movs	r3, #0
 800aec4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	019b      	lsls	r3, r3, #6
 800aeca:	f043 0220 	orr.w	r2, r3, #32
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	3301      	adds	r3, #1
 800aed6:	60fb      	str	r3, [r7, #12]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	4a09      	ldr	r2, [pc, #36]	; (800af00 <USB_FlushTxFifo+0x48>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d901      	bls.n	800aee4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800aee0:	2303      	movs	r3, #3
 800aee2:	e006      	b.n	800aef2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	f003 0320 	and.w	r3, r3, #32
 800aeec:	2b20      	cmp	r3, #32
 800aeee:	d0f0      	beq.n	800aed2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3714      	adds	r7, #20
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	00030d40 	.word	0x00030d40

0800af04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800af0c:	2300      	movs	r3, #0
 800af0e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2210      	movs	r2, #16
 800af14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	3301      	adds	r3, #1
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	4a09      	ldr	r2, [pc, #36]	; (800af44 <USB_FlushRxFifo+0x40>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d901      	bls.n	800af28 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800af24:	2303      	movs	r3, #3
 800af26:	e006      	b.n	800af36 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	691b      	ldr	r3, [r3, #16]
 800af2c:	f003 0310 	and.w	r3, r3, #16
 800af30:	2b10      	cmp	r3, #16
 800af32:	d0f0      	beq.n	800af16 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	00030d40 	.word	0x00030d40

0800af48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	460b      	mov	r3, r1
 800af52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	78fb      	ldrb	r3, [r7, #3]
 800af62:	68f9      	ldr	r1, [r7, #12]
 800af64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af68:	4313      	orrs	r3, r2
 800af6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3714      	adds	r7, #20
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr

0800af7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800af7a:	b480      	push	{r7}
 800af7c:	b087      	sub	sp, #28
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	f003 0306 	and.w	r3, r3, #6
 800af92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d102      	bne.n	800afa0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800af9a:	2300      	movs	r3, #0
 800af9c:	75fb      	strb	r3, [r7, #23]
 800af9e:	e00a      	b.n	800afb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d002      	beq.n	800afac <USB_GetDevSpeed+0x32>
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2b06      	cmp	r3, #6
 800afaa:	d102      	bne.n	800afb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800afac:	2302      	movs	r3, #2
 800afae:	75fb      	strb	r3, [r7, #23]
 800afb0:	e001      	b.n	800afb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800afb2:	230f      	movs	r3, #15
 800afb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800afb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	371c      	adds	r7, #28
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	785b      	ldrb	r3, [r3, #1]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d13a      	bne.n	800b056 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afe6:	69da      	ldr	r2, [r3, #28]
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	f003 030f 	and.w	r3, r3, #15
 800aff0:	2101      	movs	r1, #1
 800aff2:	fa01 f303 	lsl.w	r3, r1, r3
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	68f9      	ldr	r1, [r7, #12]
 800affa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800affe:	4313      	orrs	r3, r2
 800b000:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	015a      	lsls	r2, r3, #5
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	4413      	add	r3, r2
 800b00a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d155      	bne.n	800b0c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	015a      	lsls	r2, r3, #5
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	4413      	add	r3, r2
 800b020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	78db      	ldrb	r3, [r3, #3]
 800b032:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b034:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	059b      	lsls	r3, r3, #22
 800b03a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b03c:	4313      	orrs	r3, r2
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	0151      	lsls	r1, r2, #5
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	440a      	add	r2, r1
 800b046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b04a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b04e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b052:	6013      	str	r3, [r2, #0]
 800b054:	e036      	b.n	800b0c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b05c:	69da      	ldr	r2, [r3, #28]
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	f003 030f 	and.w	r3, r3, #15
 800b066:	2101      	movs	r1, #1
 800b068:	fa01 f303 	lsl.w	r3, r1, r3
 800b06c:	041b      	lsls	r3, r3, #16
 800b06e:	68f9      	ldr	r1, [r7, #12]
 800b070:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b074:	4313      	orrs	r3, r2
 800b076:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	015a      	lsls	r2, r3, #5
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	4413      	add	r3, r2
 800b080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d11a      	bne.n	800b0c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	015a      	lsls	r2, r3, #5
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	4413      	add	r3, r2
 800b096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	78db      	ldrb	r3, [r3, #3]
 800b0a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b0aa:	430b      	orrs	r3, r1
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	0151      	lsls	r1, r2, #5
 800b0b2:	68fa      	ldr	r2, [r7, #12]
 800b0b4:	440a      	add	r2, r1
 800b0b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
	...

0800b0d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	785b      	ldrb	r3, [r3, #1]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d135      	bne.n	800b15c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	f003 030f 	and.w	r3, r3, #15
 800b100:	2101      	movs	r1, #1
 800b102:	fa01 f303 	lsl.w	r3, r1, r3
 800b106:	b29b      	uxth	r3, r3
 800b108:	43db      	mvns	r3, r3
 800b10a:	68f9      	ldr	r1, [r7, #12]
 800b10c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b110:	4013      	ands	r3, r2
 800b112:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b11a:	69da      	ldr	r2, [r3, #28]
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	f003 030f 	and.w	r3, r3, #15
 800b124:	2101      	movs	r1, #1
 800b126:	fa01 f303 	lsl.w	r3, r1, r3
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	43db      	mvns	r3, r3
 800b12e:	68f9      	ldr	r1, [r7, #12]
 800b130:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b134:	4013      	ands	r3, r2
 800b136:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	015a      	lsls	r2, r3, #5
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	4413      	add	r3, r2
 800b140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	0159      	lsls	r1, r3, #5
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	440b      	add	r3, r1
 800b14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b152:	4619      	mov	r1, r3
 800b154:	4b1f      	ldr	r3, [pc, #124]	; (800b1d4 <USB_DeactivateEndpoint+0x100>)
 800b156:	4013      	ands	r3, r2
 800b158:	600b      	str	r3, [r1, #0]
 800b15a:	e034      	b.n	800b1c6 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	f003 030f 	and.w	r3, r3, #15
 800b16c:	2101      	movs	r1, #1
 800b16e:	fa01 f303 	lsl.w	r3, r1, r3
 800b172:	041b      	lsls	r3, r3, #16
 800b174:	43db      	mvns	r3, r3
 800b176:	68f9      	ldr	r1, [r7, #12]
 800b178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b17c:	4013      	ands	r3, r2
 800b17e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b186:	69da      	ldr	r2, [r3, #28]
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	f003 030f 	and.w	r3, r3, #15
 800b190:	2101      	movs	r1, #1
 800b192:	fa01 f303 	lsl.w	r3, r1, r3
 800b196:	041b      	lsls	r3, r3, #16
 800b198:	43db      	mvns	r3, r3
 800b19a:	68f9      	ldr	r1, [r7, #12]
 800b19c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	015a      	lsls	r2, r3, #5
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	0159      	lsls	r1, r3, #5
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	440b      	add	r3, r1
 800b1ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1be:	4619      	mov	r1, r3
 800b1c0:	4b05      	ldr	r3, [pc, #20]	; (800b1d8 <USB_DeactivateEndpoint+0x104>)
 800b1c2:	4013      	ands	r3, r2
 800b1c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3714      	adds	r7, #20
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr
 800b1d4:	ec337800 	.word	0xec337800
 800b1d8:	eff37800 	.word	0xeff37800

0800b1dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b08a      	sub	sp, #40	; 0x28
 800b1e0:	af02      	add	r7, sp, #8
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	785b      	ldrb	r3, [r3, #1]
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	f040 815c 	bne.w	800b4b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	695b      	ldr	r3, [r3, #20]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d132      	bne.n	800b26c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	015a      	lsls	r2, r3, #5
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	4413      	add	r3, r2
 800b20e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b212:	691b      	ldr	r3, [r3, #16]
 800b214:	69ba      	ldr	r2, [r7, #24]
 800b216:	0151      	lsls	r1, r2, #5
 800b218:	69fa      	ldr	r2, [r7, #28]
 800b21a:	440a      	add	r2, r1
 800b21c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b220:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b224:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b228:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	015a      	lsls	r2, r3, #5
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	4413      	add	r3, r2
 800b232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b236:	691b      	ldr	r3, [r3, #16]
 800b238:	69ba      	ldr	r2, [r7, #24]
 800b23a:	0151      	lsls	r1, r2, #5
 800b23c:	69fa      	ldr	r2, [r7, #28]
 800b23e:	440a      	add	r2, r1
 800b240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b244:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b248:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	015a      	lsls	r2, r3, #5
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	4413      	add	r3, r2
 800b252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	69ba      	ldr	r2, [r7, #24]
 800b25a:	0151      	lsls	r1, r2, #5
 800b25c:	69fa      	ldr	r2, [r7, #28]
 800b25e:	440a      	add	r2, r1
 800b260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b264:	0cdb      	lsrs	r3, r3, #19
 800b266:	04db      	lsls	r3, r3, #19
 800b268:	6113      	str	r3, [r2, #16]
 800b26a:	e074      	b.n	800b356 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	015a      	lsls	r2, r3, #5
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	4413      	add	r3, r2
 800b274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	69ba      	ldr	r2, [r7, #24]
 800b27c:	0151      	lsls	r1, r2, #5
 800b27e:	69fa      	ldr	r2, [r7, #28]
 800b280:	440a      	add	r2, r1
 800b282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b286:	0cdb      	lsrs	r3, r3, #19
 800b288:	04db      	lsls	r3, r3, #19
 800b28a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	015a      	lsls	r2, r3, #5
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	4413      	add	r3, r2
 800b294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b298:	691b      	ldr	r3, [r3, #16]
 800b29a:	69ba      	ldr	r2, [r7, #24]
 800b29c:	0151      	lsls	r1, r2, #5
 800b29e:	69fa      	ldr	r2, [r7, #28]
 800b2a0:	440a      	add	r2, r1
 800b2a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b2aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b2ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	015a      	lsls	r2, r3, #5
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2bc:	691a      	ldr	r2, [r3, #16]
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	6959      	ldr	r1, [r3, #20]
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	440b      	add	r3, r1
 800b2c8:	1e59      	subs	r1, r3, #1
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	fbb1 f3f3 	udiv	r3, r1, r3
 800b2d2:	04d9      	lsls	r1, r3, #19
 800b2d4:	4b9d      	ldr	r3, [pc, #628]	; (800b54c <USB_EPStartXfer+0x370>)
 800b2d6:	400b      	ands	r3, r1
 800b2d8:	69b9      	ldr	r1, [r7, #24]
 800b2da:	0148      	lsls	r0, r1, #5
 800b2dc:	69f9      	ldr	r1, [r7, #28]
 800b2de:	4401      	add	r1, r0
 800b2e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	015a      	lsls	r2, r3, #5
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2f4:	691a      	ldr	r2, [r3, #16]
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2fe:	69b9      	ldr	r1, [r7, #24]
 800b300:	0148      	lsls	r0, r1, #5
 800b302:	69f9      	ldr	r1, [r7, #28]
 800b304:	4401      	add	r1, r0
 800b306:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b30a:	4313      	orrs	r3, r2
 800b30c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	78db      	ldrb	r3, [r3, #3]
 800b312:	2b01      	cmp	r3, #1
 800b314:	d11f      	bne.n	800b356 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	015a      	lsls	r2, r3, #5
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	4413      	add	r3, r2
 800b31e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	69ba      	ldr	r2, [r7, #24]
 800b326:	0151      	lsls	r1, r2, #5
 800b328:	69fa      	ldr	r2, [r7, #28]
 800b32a:	440a      	add	r2, r1
 800b32c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b330:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b334:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	015a      	lsls	r2, r3, #5
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	4413      	add	r3, r2
 800b33e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b342:	691b      	ldr	r3, [r3, #16]
 800b344:	69ba      	ldr	r2, [r7, #24]
 800b346:	0151      	lsls	r1, r2, #5
 800b348:	69fa      	ldr	r2, [r7, #28]
 800b34a:	440a      	add	r2, r1
 800b34c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b350:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b354:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b356:	79fb      	ldrb	r3, [r7, #7]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d14b      	bne.n	800b3f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d009      	beq.n	800b378 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	015a      	lsls	r2, r3, #5
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	4413      	add	r3, r2
 800b36c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b370:	461a      	mov	r2, r3
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	691b      	ldr	r3, [r3, #16]
 800b376:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	78db      	ldrb	r3, [r3, #3]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d128      	bne.n	800b3d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d110      	bne.n	800b3b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	015a      	lsls	r2, r3, #5
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	4413      	add	r3, r2
 800b398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	69ba      	ldr	r2, [r7, #24]
 800b3a0:	0151      	lsls	r1, r2, #5
 800b3a2:	69fa      	ldr	r2, [r7, #28]
 800b3a4:	440a      	add	r2, r1
 800b3a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b3ae:	6013      	str	r3, [r2, #0]
 800b3b0:	e00f      	b.n	800b3d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	015a      	lsls	r2, r3, #5
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	69ba      	ldr	r2, [r7, #24]
 800b3c2:	0151      	lsls	r1, r2, #5
 800b3c4:	69fa      	ldr	r2, [r7, #28]
 800b3c6:	440a      	add	r2, r1
 800b3c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	015a      	lsls	r2, r3, #5
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	4413      	add	r3, r2
 800b3da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	69ba      	ldr	r2, [r7, #24]
 800b3e2:	0151      	lsls	r1, r2, #5
 800b3e4:	69fa      	ldr	r2, [r7, #28]
 800b3e6:	440a      	add	r2, r1
 800b3e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3f0:	6013      	str	r3, [r2, #0]
 800b3f2:	e12f      	b.n	800b654 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	015a      	lsls	r2, r3, #5
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	69ba      	ldr	r2, [r7, #24]
 800b404:	0151      	lsls	r1, r2, #5
 800b406:	69fa      	ldr	r2, [r7, #28]
 800b408:	440a      	add	r2, r1
 800b40a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b40e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b412:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	78db      	ldrb	r3, [r3, #3]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d015      	beq.n	800b448 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	695b      	ldr	r3, [r3, #20]
 800b420:	2b00      	cmp	r3, #0
 800b422:	f000 8117 	beq.w	800b654 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b42c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	f003 030f 	and.w	r3, r3, #15
 800b436:	2101      	movs	r1, #1
 800b438:	fa01 f303 	lsl.w	r3, r1, r3
 800b43c:	69f9      	ldr	r1, [r7, #28]
 800b43e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b442:	4313      	orrs	r3, r2
 800b444:	634b      	str	r3, [r1, #52]	; 0x34
 800b446:	e105      	b.n	800b654 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b454:	2b00      	cmp	r3, #0
 800b456:	d110      	bne.n	800b47a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	015a      	lsls	r2, r3, #5
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	4413      	add	r3, r2
 800b460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	69ba      	ldr	r2, [r7, #24]
 800b468:	0151      	lsls	r1, r2, #5
 800b46a:	69fa      	ldr	r2, [r7, #28]
 800b46c:	440a      	add	r2, r1
 800b46e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b472:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b476:	6013      	str	r3, [r2, #0]
 800b478:	e00f      	b.n	800b49a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b47a:	69bb      	ldr	r3, [r7, #24]
 800b47c:	015a      	lsls	r2, r3, #5
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	4413      	add	r3, r2
 800b482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	69ba      	ldr	r2, [r7, #24]
 800b48a:	0151      	lsls	r1, r2, #5
 800b48c:	69fa      	ldr	r2, [r7, #28]
 800b48e:	440a      	add	r2, r1
 800b490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b498:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	68d9      	ldr	r1, [r3, #12]
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	781a      	ldrb	r2, [r3, #0]
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	695b      	ldr	r3, [r3, #20]
 800b4a6:	b298      	uxth	r0, r3
 800b4a8:	79fb      	ldrb	r3, [r7, #7]
 800b4aa:	9300      	str	r3, [sp, #0]
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	68f8      	ldr	r0, [r7, #12]
 800b4b0:	f000 fa2b 	bl	800b90a <USB_WritePacket>
 800b4b4:	e0ce      	b.n	800b654 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	015a      	lsls	r2, r3, #5
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	4413      	add	r3, r2
 800b4be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	69ba      	ldr	r2, [r7, #24]
 800b4c6:	0151      	lsls	r1, r2, #5
 800b4c8:	69fa      	ldr	r2, [r7, #28]
 800b4ca:	440a      	add	r2, r1
 800b4cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4d0:	0cdb      	lsrs	r3, r3, #19
 800b4d2:	04db      	lsls	r3, r3, #19
 800b4d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	015a      	lsls	r2, r3, #5
 800b4da:	69fb      	ldr	r3, [r7, #28]
 800b4dc:	4413      	add	r3, r2
 800b4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	69ba      	ldr	r2, [r7, #24]
 800b4e6:	0151      	lsls	r1, r2, #5
 800b4e8:	69fa      	ldr	r2, [r7, #28]
 800b4ea:	440a      	add	r2, r1
 800b4ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b4f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b4f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	695b      	ldr	r3, [r3, #20]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d126      	bne.n	800b550 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	015a      	lsls	r2, r3, #5
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	4413      	add	r3, r2
 800b50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b50e:	691a      	ldr	r2, [r3, #16]
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b518:	69b9      	ldr	r1, [r7, #24]
 800b51a:	0148      	lsls	r0, r1, #5
 800b51c:	69f9      	ldr	r1, [r7, #28]
 800b51e:	4401      	add	r1, r0
 800b520:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b524:	4313      	orrs	r3, r2
 800b526:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	015a      	lsls	r2, r3, #5
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	4413      	add	r3, r2
 800b530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	69ba      	ldr	r2, [r7, #24]
 800b538:	0151      	lsls	r1, r2, #5
 800b53a:	69fa      	ldr	r2, [r7, #28]
 800b53c:	440a      	add	r2, r1
 800b53e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b546:	6113      	str	r3, [r2, #16]
 800b548:	e036      	b.n	800b5b8 <USB_EPStartXfer+0x3dc>
 800b54a:	bf00      	nop
 800b54c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	695a      	ldr	r2, [r3, #20]
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	4413      	add	r3, r2
 800b55a:	1e5a      	subs	r2, r3, #1
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	fbb2 f3f3 	udiv	r3, r2, r3
 800b564:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	015a      	lsls	r2, r3, #5
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b572:	691a      	ldr	r2, [r3, #16]
 800b574:	8afb      	ldrh	r3, [r7, #22]
 800b576:	04d9      	lsls	r1, r3, #19
 800b578:	4b39      	ldr	r3, [pc, #228]	; (800b660 <USB_EPStartXfer+0x484>)
 800b57a:	400b      	ands	r3, r1
 800b57c:	69b9      	ldr	r1, [r7, #24]
 800b57e:	0148      	lsls	r0, r1, #5
 800b580:	69f9      	ldr	r1, [r7, #28]
 800b582:	4401      	add	r1, r0
 800b584:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b588:	4313      	orrs	r3, r2
 800b58a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	015a      	lsls	r2, r3, #5
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	4413      	add	r3, r2
 800b594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b598:	691a      	ldr	r2, [r3, #16]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	8af9      	ldrh	r1, [r7, #22]
 800b5a0:	fb01 f303 	mul.w	r3, r1, r3
 800b5a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5a8:	69b9      	ldr	r1, [r7, #24]
 800b5aa:	0148      	lsls	r0, r1, #5
 800b5ac:	69f9      	ldr	r1, [r7, #28]
 800b5ae:	4401      	add	r1, r0
 800b5b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b5b8:	79fb      	ldrb	r3, [r7, #7]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d10d      	bne.n	800b5da <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d009      	beq.n	800b5da <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	68d9      	ldr	r1, [r3, #12]
 800b5ca:	69bb      	ldr	r3, [r7, #24]
 800b5cc:	015a      	lsls	r2, r3, #5
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5d6:	460a      	mov	r2, r1
 800b5d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	78db      	ldrb	r3, [r3, #3]
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d128      	bne.n	800b634 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d110      	bne.n	800b614 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	015a      	lsls	r2, r3, #5
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	69ba      	ldr	r2, [r7, #24]
 800b602:	0151      	lsls	r1, r2, #5
 800b604:	69fa      	ldr	r2, [r7, #28]
 800b606:	440a      	add	r2, r1
 800b608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b60c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b610:	6013      	str	r3, [r2, #0]
 800b612:	e00f      	b.n	800b634 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	015a      	lsls	r2, r3, #5
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	4413      	add	r3, r2
 800b61c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	69ba      	ldr	r2, [r7, #24]
 800b624:	0151      	lsls	r1, r2, #5
 800b626:	69fa      	ldr	r2, [r7, #28]
 800b628:	440a      	add	r2, r1
 800b62a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b62e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b632:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	015a      	lsls	r2, r3, #5
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	4413      	add	r3, r2
 800b63c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	69ba      	ldr	r2, [r7, #24]
 800b644:	0151      	lsls	r1, r2, #5
 800b646:	69fa      	ldr	r2, [r7, #28]
 800b648:	440a      	add	r2, r1
 800b64a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b64e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3720      	adds	r7, #32
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	1ff80000 	.word	0x1ff80000

0800b664 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b664:	b480      	push	{r7}
 800b666:	b087      	sub	sp, #28
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	4613      	mov	r3, r2
 800b670:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	785b      	ldrb	r3, [r3, #1]
 800b680:	2b01      	cmp	r3, #1
 800b682:	f040 80cd 	bne.w	800b820 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	695b      	ldr	r3, [r3, #20]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d132      	bne.n	800b6f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	015a      	lsls	r2, r3, #5
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	4413      	add	r3, r2
 800b696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	693a      	ldr	r2, [r7, #16]
 800b69e:	0151      	lsls	r1, r2, #5
 800b6a0:	697a      	ldr	r2, [r7, #20]
 800b6a2:	440a      	add	r2, r1
 800b6a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b6ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b6b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	015a      	lsls	r2, r3, #5
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	693a      	ldr	r2, [r7, #16]
 800b6c2:	0151      	lsls	r1, r2, #5
 800b6c4:	697a      	ldr	r2, [r7, #20]
 800b6c6:	440a      	add	r2, r1
 800b6c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b6d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	015a      	lsls	r2, r3, #5
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	4413      	add	r3, r2
 800b6da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	693a      	ldr	r2, [r7, #16]
 800b6e2:	0151      	lsls	r1, r2, #5
 800b6e4:	697a      	ldr	r2, [r7, #20]
 800b6e6:	440a      	add	r2, r1
 800b6e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6ec:	0cdb      	lsrs	r3, r3, #19
 800b6ee:	04db      	lsls	r3, r3, #19
 800b6f0:	6113      	str	r3, [r2, #16]
 800b6f2:	e04e      	b.n	800b792 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	015a      	lsls	r2, r3, #5
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b700:	691b      	ldr	r3, [r3, #16]
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	0151      	lsls	r1, r2, #5
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	440a      	add	r2, r1
 800b70a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b70e:	0cdb      	lsrs	r3, r3, #19
 800b710:	04db      	lsls	r3, r3, #19
 800b712:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	015a      	lsls	r2, r3, #5
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	4413      	add	r3, r2
 800b71c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b720:	691b      	ldr	r3, [r3, #16]
 800b722:	693a      	ldr	r2, [r7, #16]
 800b724:	0151      	lsls	r1, r2, #5
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	440a      	add	r2, r1
 800b72a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b72e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b732:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b736:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	695a      	ldr	r2, [r3, #20]
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	429a      	cmp	r2, r3
 800b742:	d903      	bls.n	800b74c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	689a      	ldr	r2, [r3, #8]
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	015a      	lsls	r2, r3, #5
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	4413      	add	r3, r2
 800b754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	693a      	ldr	r2, [r7, #16]
 800b75c:	0151      	lsls	r1, r2, #5
 800b75e:	697a      	ldr	r2, [r7, #20]
 800b760:	440a      	add	r2, r1
 800b762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b766:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b76a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	015a      	lsls	r2, r3, #5
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	4413      	add	r3, r2
 800b774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b778:	691a      	ldr	r2, [r3, #16]
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	695b      	ldr	r3, [r3, #20]
 800b77e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b782:	6939      	ldr	r1, [r7, #16]
 800b784:	0148      	lsls	r0, r1, #5
 800b786:	6979      	ldr	r1, [r7, #20]
 800b788:	4401      	add	r1, r0
 800b78a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b78e:	4313      	orrs	r3, r2
 800b790:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b792:	79fb      	ldrb	r3, [r7, #7]
 800b794:	2b01      	cmp	r3, #1
 800b796:	d11e      	bne.n	800b7d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	691b      	ldr	r3, [r3, #16]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d009      	beq.n	800b7b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	015a      	lsls	r2, r3, #5
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	4413      	add	r3, r2
 800b7a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	015a      	lsls	r2, r3, #5
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	693a      	ldr	r2, [r7, #16]
 800b7c4:	0151      	lsls	r1, r2, #5
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	440a      	add	r2, r1
 800b7ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b7d2:	6013      	str	r3, [r2, #0]
 800b7d4:	e092      	b.n	800b8fc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	015a      	lsls	r2, r3, #5
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	4413      	add	r3, r2
 800b7de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	693a      	ldr	r2, [r7, #16]
 800b7e6:	0151      	lsls	r1, r2, #5
 800b7e8:	697a      	ldr	r2, [r7, #20]
 800b7ea:	440a      	add	r2, r1
 800b7ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b7f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	695b      	ldr	r3, [r3, #20]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d07e      	beq.n	800b8fc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	f003 030f 	and.w	r3, r3, #15
 800b80e:	2101      	movs	r1, #1
 800b810:	fa01 f303 	lsl.w	r3, r1, r3
 800b814:	6979      	ldr	r1, [r7, #20]
 800b816:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b81a:	4313      	orrs	r3, r2
 800b81c:	634b      	str	r3, [r1, #52]	; 0x34
 800b81e:	e06d      	b.n	800b8fc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	015a      	lsls	r2, r3, #5
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	4413      	add	r3, r2
 800b828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	693a      	ldr	r2, [r7, #16]
 800b830:	0151      	lsls	r1, r2, #5
 800b832:	697a      	ldr	r2, [r7, #20]
 800b834:	440a      	add	r2, r1
 800b836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b83a:	0cdb      	lsrs	r3, r3, #19
 800b83c:	04db      	lsls	r3, r3, #19
 800b83e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	015a      	lsls	r2, r3, #5
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	4413      	add	r3, r2
 800b848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	693a      	ldr	r2, [r7, #16]
 800b850:	0151      	lsls	r1, r2, #5
 800b852:	697a      	ldr	r2, [r7, #20]
 800b854:	440a      	add	r2, r1
 800b856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b85a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b85e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b862:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	695b      	ldr	r3, [r3, #20]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d003      	beq.n	800b874 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	689a      	ldr	r2, [r3, #8]
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	015a      	lsls	r2, r3, #5
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	4413      	add	r3, r2
 800b87c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	693a      	ldr	r2, [r7, #16]
 800b884:	0151      	lsls	r1, r2, #5
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	440a      	add	r2, r1
 800b88a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b88e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b892:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	015a      	lsls	r2, r3, #5
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	4413      	add	r3, r2
 800b89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8a0:	691a      	ldr	r2, [r3, #16]
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8aa:	6939      	ldr	r1, [r7, #16]
 800b8ac:	0148      	lsls	r0, r1, #5
 800b8ae:	6979      	ldr	r1, [r7, #20]
 800b8b0:	4401      	add	r1, r0
 800b8b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b8ba:	79fb      	ldrb	r3, [r7, #7]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d10d      	bne.n	800b8dc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d009      	beq.n	800b8dc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	68d9      	ldr	r1, [r3, #12]
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	015a      	lsls	r2, r3, #5
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	4413      	add	r3, r2
 800b8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8d8:	460a      	mov	r2, r1
 800b8da:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	015a      	lsls	r2, r3, #5
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	693a      	ldr	r2, [r7, #16]
 800b8ec:	0151      	lsls	r1, r2, #5
 800b8ee:	697a      	ldr	r2, [r7, #20]
 800b8f0:	440a      	add	r2, r1
 800b8f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b8fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	371c      	adds	r7, #28
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr

0800b90a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b90a:	b480      	push	{r7}
 800b90c:	b089      	sub	sp, #36	; 0x24
 800b90e:	af00      	add	r7, sp, #0
 800b910:	60f8      	str	r0, [r7, #12]
 800b912:	60b9      	str	r1, [r7, #8]
 800b914:	4611      	mov	r1, r2
 800b916:	461a      	mov	r2, r3
 800b918:	460b      	mov	r3, r1
 800b91a:	71fb      	strb	r3, [r7, #7]
 800b91c:	4613      	mov	r3, r2
 800b91e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b928:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d11a      	bne.n	800b966 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b930:	88bb      	ldrh	r3, [r7, #4]
 800b932:	3303      	adds	r3, #3
 800b934:	089b      	lsrs	r3, r3, #2
 800b936:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b938:	2300      	movs	r3, #0
 800b93a:	61bb      	str	r3, [r7, #24]
 800b93c:	e00f      	b.n	800b95e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b93e:	79fb      	ldrb	r3, [r7, #7]
 800b940:	031a      	lsls	r2, r3, #12
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	4413      	add	r3, r2
 800b946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b94a:	461a      	mov	r2, r3
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	3304      	adds	r3, #4
 800b956:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	3301      	adds	r3, #1
 800b95c:	61bb      	str	r3, [r7, #24]
 800b95e:	69ba      	ldr	r2, [r7, #24]
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	429a      	cmp	r2, r3
 800b964:	d3eb      	bcc.n	800b93e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3724      	adds	r7, #36	; 0x24
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b974:	b480      	push	{r7}
 800b976:	b089      	sub	sp, #36	; 0x24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	4613      	mov	r3, r2
 800b980:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b98a:	88fb      	ldrh	r3, [r7, #6]
 800b98c:	3303      	adds	r3, #3
 800b98e:	089b      	lsrs	r3, r3, #2
 800b990:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b992:	2300      	movs	r3, #0
 800b994:	61bb      	str	r3, [r7, #24]
 800b996:	e00b      	b.n	800b9b0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	601a      	str	r2, [r3, #0]
    pDest++;
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	61bb      	str	r3, [r7, #24]
 800b9b0:	69ba      	ldr	r2, [r7, #24]
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d3ef      	bcc.n	800b998 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b9b8:	69fb      	ldr	r3, [r7, #28]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3724      	adds	r7, #36	; 0x24
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr

0800b9c6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b9c6:	b480      	push	{r7}
 800b9c8:	b085      	sub	sp, #20
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
 800b9ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	785b      	ldrb	r3, [r3, #1]
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d12c      	bne.n	800ba3c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	015a      	lsls	r2, r3, #5
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	db12      	blt.n	800ba1a <USB_EPSetStall+0x54>
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00f      	beq.n	800ba1a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	015a      	lsls	r2, r3, #5
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	4413      	add	r3, r2
 800ba02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	0151      	lsls	r1, r2, #5
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	440a      	add	r2, r1
 800ba10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ba18:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	015a      	lsls	r2, r3, #5
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	4413      	add	r3, r2
 800ba22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	68ba      	ldr	r2, [r7, #8]
 800ba2a:	0151      	lsls	r1, r2, #5
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	440a      	add	r2, r1
 800ba30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba38:	6013      	str	r3, [r2, #0]
 800ba3a:	e02b      	b.n	800ba94 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	015a      	lsls	r2, r3, #5
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	4413      	add	r3, r2
 800ba44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	db12      	blt.n	800ba74 <USB_EPSetStall+0xae>
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00f      	beq.n	800ba74 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	015a      	lsls	r2, r3, #5
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	0151      	lsls	r1, r2, #5
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	440a      	add	r2, r1
 800ba6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ba72:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	015a      	lsls	r2, r3, #5
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	0151      	lsls	r1, r2, #5
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	440a      	add	r2, r1
 800ba8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba94:	2300      	movs	r3, #0
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3714      	adds	r7, #20
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr

0800baa2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800baa2:	b480      	push	{r7}
 800baa4:	b085      	sub	sp, #20
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	785b      	ldrb	r3, [r3, #1]
 800baba:	2b01      	cmp	r3, #1
 800babc:	d128      	bne.n	800bb10 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	015a      	lsls	r2, r3, #5
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	4413      	add	r3, r2
 800bac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	68ba      	ldr	r2, [r7, #8]
 800bace:	0151      	lsls	r1, r2, #5
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	440a      	add	r2, r1
 800bad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bad8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800badc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	78db      	ldrb	r3, [r3, #3]
 800bae2:	2b03      	cmp	r3, #3
 800bae4:	d003      	beq.n	800baee <USB_EPClearStall+0x4c>
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	78db      	ldrb	r3, [r3, #3]
 800baea:	2b02      	cmp	r3, #2
 800baec:	d138      	bne.n	800bb60 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	015a      	lsls	r2, r3, #5
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	4413      	add	r3, r2
 800baf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	68ba      	ldr	r2, [r7, #8]
 800bafe:	0151      	lsls	r1, r2, #5
 800bb00:	68fa      	ldr	r2, [r7, #12]
 800bb02:	440a      	add	r2, r1
 800bb04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb0c:	6013      	str	r3, [r2, #0]
 800bb0e:	e027      	b.n	800bb60 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	015a      	lsls	r2, r3, #5
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	4413      	add	r3, r2
 800bb18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	68ba      	ldr	r2, [r7, #8]
 800bb20:	0151      	lsls	r1, r2, #5
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	440a      	add	r2, r1
 800bb26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	78db      	ldrb	r3, [r3, #3]
 800bb34:	2b03      	cmp	r3, #3
 800bb36:	d003      	beq.n	800bb40 <USB_EPClearStall+0x9e>
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	78db      	ldrb	r3, [r3, #3]
 800bb3c:	2b02      	cmp	r3, #2
 800bb3e:	d10f      	bne.n	800bb60 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	015a      	lsls	r2, r3, #5
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	4413      	add	r3, r2
 800bb48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	0151      	lsls	r1, r2, #5
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	440a      	add	r2, r1
 800bb56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb5e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bb60:	2300      	movs	r3, #0
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3714      	adds	r7, #20
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr

0800bb6e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bb6e:	b480      	push	{r7}
 800bb70:	b085      	sub	sp, #20
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
 800bb76:	460b      	mov	r3, r1
 800bb78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	68fa      	ldr	r2, [r7, #12]
 800bb88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bb90:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	78fb      	ldrb	r3, [r7, #3]
 800bb9c:	011b      	lsls	r3, r3, #4
 800bb9e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bba2:	68f9      	ldr	r1, [r7, #12]
 800bba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3714      	adds	r7, #20
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b084      	sub	sp, #16
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbd4:	f023 0302 	bic.w	r3, r3, #2
 800bbd8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800bbda:	2003      	movs	r0, #3
 800bbdc:	f7f7 feda 	bl	8003994 <HAL_Delay>

  return HAL_OK;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b084      	sub	sp, #16
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	68fa      	ldr	r2, [r7, #12]
 800bc00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc04:	f043 0302 	orr.w	r3, r3, #2
 800bc08:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800bc0a:	2003      	movs	r0, #3
 800bc0c:	f7f7 fec2 	bl	8003994 <HAL_Delay>

  return HAL_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bc1a:	b480      	push	{r7}
 800bc1c:	b085      	sub	sp, #20
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	695b      	ldr	r3, [r3, #20]
 800bc26:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	699b      	ldr	r3, [r3, #24]
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	4013      	ands	r3, r2
 800bc30:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bc32:	68fb      	ldr	r3, [r7, #12]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3714      	adds	r7, #20
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc52:	699b      	ldr	r3, [r3, #24]
 800bc54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc5c:	69db      	ldr	r3, [r3, #28]
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	4013      	ands	r3, r2
 800bc62:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	0c1b      	lsrs	r3, r3, #16
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3714      	adds	r7, #20
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc86:	699b      	ldr	r3, [r3, #24]
 800bc88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc90:	69db      	ldr	r3, [r3, #28]
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	4013      	ands	r3, r2
 800bc96:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	b29b      	uxth	r3, r3
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3714      	adds	r7, #20
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bcb8:	78fb      	ldrb	r3, [r7, #3]
 800bcba:	015a      	lsls	r2, r3, #5
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcc4:	689b      	ldr	r3, [r3, #8]
 800bcc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcce:	695b      	ldr	r3, [r3, #20]
 800bcd0:	68ba      	ldr	r2, [r7, #8]
 800bcd2:	4013      	ands	r3, r2
 800bcd4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bcd6:	68bb      	ldr	r3, [r7, #8]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3714      	adds	r7, #20
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b087      	sub	sp, #28
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	460b      	mov	r3, r1
 800bcee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd06:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bd08:	78fb      	ldrb	r3, [r7, #3]
 800bd0a:	f003 030f 	and.w	r3, r3, #15
 800bd0e:	68fa      	ldr	r2, [r7, #12]
 800bd10:	fa22 f303 	lsr.w	r3, r2, r3
 800bd14:	01db      	lsls	r3, r3, #7
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	693a      	ldr	r2, [r7, #16]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bd1e:	78fb      	ldrb	r3, [r7, #3]
 800bd20:	015a      	lsls	r2, r3, #5
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	4413      	add	r3, r2
 800bd26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	693a      	ldr	r2, [r7, #16]
 800bd2e:	4013      	ands	r3, r2
 800bd30:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bd32:	68bb      	ldr	r3, [r7, #8]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	371c      	adds	r7, #28
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	695b      	ldr	r3, [r3, #20]
 800bd4c:	f003 0301 	and.w	r3, r3, #1
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr

0800bd5c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	68fa      	ldr	r2, [r7, #12]
 800bd72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd76:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bd7a:	f023 0307 	bic.w	r3, r3, #7
 800bd7e:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	f003 0306 	and.w	r3, r3, #6
 800bd8c:	2b04      	cmp	r3, #4
 800bd8e:	d109      	bne.n	800bda4 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68fa      	ldr	r2, [r7, #12]
 800bd9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd9e:	f043 0303 	orr.w	r3, r3, #3
 800bda2:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	68fa      	ldr	r2, [r7, #12]
 800bdae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3714      	adds	r7, #20
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
	...

0800bdc8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b087      	sub	sp, #28
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	607a      	str	r2, [r7, #4]
 800bdd4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	333c      	adds	r3, #60	; 0x3c
 800bdde:	3304      	adds	r3, #4
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	4a26      	ldr	r2, [pc, #152]	; (800be80 <USB_EP0_OutStart+0xb8>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d90a      	bls.n	800be02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdfc:	d101      	bne.n	800be02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bdfe:	2300      	movs	r3, #0
 800be00:	e037      	b.n	800be72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be08:	461a      	mov	r2, r3
 800be0a:	2300      	movs	r3, #0
 800be0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	697a      	ldr	r2, [r7, #20]
 800be18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be28:	691b      	ldr	r3, [r3, #16]
 800be2a:	697a      	ldr	r2, [r7, #20]
 800be2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be30:	f043 0318 	orr.w	r3, r3, #24
 800be34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	697a      	ldr	r2, [r7, #20]
 800be40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be44:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800be48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800be4a:	7afb      	ldrb	r3, [r7, #11]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d10f      	bne.n	800be70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be56:	461a      	mov	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	697a      	ldr	r2, [r7, #20]
 800be66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be6a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800be6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	371c      	adds	r7, #28
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	4f54300a 	.word	0x4f54300a

0800be84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be84:	b480      	push	{r7}
 800be86:	b085      	sub	sp, #20
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800be8c:	2300      	movs	r3, #0
 800be8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	3301      	adds	r3, #1
 800be94:	60fb      	str	r3, [r7, #12]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	4a13      	ldr	r2, [pc, #76]	; (800bee8 <USB_CoreReset+0x64>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d901      	bls.n	800bea2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800be9e:	2303      	movs	r3, #3
 800bea0:	e01b      	b.n	800beda <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	daf2      	bge.n	800be90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800beaa:	2300      	movs	r3, #0
 800beac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	691b      	ldr	r3, [r3, #16]
 800beb2:	f043 0201 	orr.w	r2, r3, #1
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	3301      	adds	r3, #1
 800bebe:	60fb      	str	r3, [r7, #12]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	4a09      	ldr	r2, [pc, #36]	; (800bee8 <USB_CoreReset+0x64>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d901      	bls.n	800becc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bec8:	2303      	movs	r3, #3
 800beca:	e006      	b.n	800beda <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	f003 0301 	and.w	r3, r3, #1
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d0f0      	beq.n	800beba <USB_CoreReset+0x36>

  return HAL_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3714      	adds	r7, #20
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	00030d40 	.word	0x00030d40

0800beec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	460b      	mov	r3, r1
 800bef6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bef8:	2300      	movs	r3, #0
 800befa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	7c1b      	ldrb	r3, [r3, #16]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d115      	bne.n	800bf30 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bf04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf08:	2202      	movs	r2, #2
 800bf0a:	2181      	movs	r1, #129	; 0x81
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f003 fa4a 	bl	800f3a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2201      	movs	r2, #1
 800bf16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bf18:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf1c:	2202      	movs	r2, #2
 800bf1e:	2101      	movs	r1, #1
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f003 fa40 	bl	800f3a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2201      	movs	r2, #1
 800bf2a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800bf2e:	e012      	b.n	800bf56 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bf30:	2340      	movs	r3, #64	; 0x40
 800bf32:	2202      	movs	r2, #2
 800bf34:	2181      	movs	r1, #129	; 0x81
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f003 fa35 	bl	800f3a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bf42:	2340      	movs	r3, #64	; 0x40
 800bf44:	2202      	movs	r2, #2
 800bf46:	2101      	movs	r1, #1
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f003 fa2c 	bl	800f3a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2201      	movs	r2, #1
 800bf52:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bf56:	2308      	movs	r3, #8
 800bf58:	2203      	movs	r2, #3
 800bf5a:	2182      	movs	r1, #130	; 0x82
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f003 fa22 	bl	800f3a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2201      	movs	r2, #1
 800bf66:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800bf68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bf6c:	f003 fcd0 	bl	800f910 <malloc>
 800bf70:	4603      	mov	r3, r0
 800bf72:	461a      	mov	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d102      	bne.n	800bf8a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800bf84:	2301      	movs	r3, #1
 800bf86:	73fb      	strb	r3, [r7, #15]
 800bf88:	e026      	b.n	800bfd8 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bf90:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	7c1b      	ldrb	r3, [r3, #16]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d109      	bne.n	800bfc8 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bfba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfbe:	2101      	movs	r1, #1
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f003 fae1 	bl	800f588 <USBD_LL_PrepareReceive>
 800bfc6:	e007      	b.n	800bfd8 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bfce:	2340      	movs	r3, #64	; 0x40
 800bfd0:	2101      	movs	r1, #1
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f003 fad8 	bl	800f588 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b084      	sub	sp, #16
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
 800bfea:	460b      	mov	r3, r1
 800bfec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bfee:	2300      	movs	r3, #0
 800bff0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bff2:	2181      	movs	r1, #129	; 0x81
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f003 f9fc 	bl	800f3f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c000:	2101      	movs	r1, #1
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f003 f9f5 	bl	800f3f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c010:	2182      	movs	r1, #130	; 0x82
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f003 f9ed 	bl	800f3f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c024:	2b00      	cmp	r3, #0
 800c026:	d00e      	beq.n	800c046 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c038:	4618      	mov	r0, r3
 800c03a:	f003 fc71 	bl	800f920 <free>
    pdev->pClassData = NULL;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800c046:	7bfb      	ldrb	r3, [r7, #15]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b086      	sub	sp, #24
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c060:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c062:	2300      	movs	r3, #0
 800c064:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c066:	2300      	movs	r3, #0
 800c068:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c06a:	2300      	movs	r3, #0
 800c06c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c076:	2b00      	cmp	r3, #0
 800c078:	d039      	beq.n	800c0ee <USBD_CDC_Setup+0x9e>
 800c07a:	2b20      	cmp	r3, #32
 800c07c:	d17c      	bne.n	800c178 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	88db      	ldrh	r3, [r3, #6]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d029      	beq.n	800c0da <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	b25b      	sxtb	r3, r3
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	da11      	bge.n	800c0b4 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	683a      	ldr	r2, [r7, #0]
 800c09a:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800c09c:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c09e:	683a      	ldr	r2, [r7, #0]
 800c0a0:	88d2      	ldrh	r2, [r2, #6]
 800c0a2:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c0a4:	6939      	ldr	r1, [r7, #16]
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	88db      	ldrh	r3, [r3, #6]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f001 f9c9 	bl	800d444 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800c0b2:	e068      	b.n	800c186 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	785a      	ldrb	r2, [r3, #1]
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	88db      	ldrh	r3, [r3, #6]
 800c0c2:	b2da      	uxtb	r2, r3
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c0ca:	6939      	ldr	r1, [r7, #16]
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	88db      	ldrh	r3, [r3, #6]
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f001 f9e4 	bl	800d4a0 <USBD_CtlPrepareRx>
    break;
 800c0d8:	e055      	b.n	800c186 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	683a      	ldr	r2, [r7, #0]
 800c0e4:	7850      	ldrb	r0, [r2, #1]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	6839      	ldr	r1, [r7, #0]
 800c0ea:	4798      	blx	r3
    break;
 800c0ec:	e04b      	b.n	800c186 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	785b      	ldrb	r3, [r3, #1]
 800c0f2:	2b0a      	cmp	r3, #10
 800c0f4:	d017      	beq.n	800c126 <USBD_CDC_Setup+0xd6>
 800c0f6:	2b0b      	cmp	r3, #11
 800c0f8:	d029      	beq.n	800c14e <USBD_CDC_Setup+0xfe>
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d133      	bne.n	800c166 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c104:	2b03      	cmp	r3, #3
 800c106:	d107      	bne.n	800c118 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800c108:	f107 030c 	add.w	r3, r7, #12
 800c10c:	2202      	movs	r2, #2
 800c10e:	4619      	mov	r1, r3
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f001 f997 	bl	800d444 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c116:	e02e      	b.n	800c176 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800c118:	6839      	ldr	r1, [r7, #0]
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f001 f927 	bl	800d36e <USBD_CtlError>
			  ret = USBD_FAIL;
 800c120:	2302      	movs	r3, #2
 800c122:	75fb      	strb	r3, [r7, #23]
      break;
 800c124:	e027      	b.n	800c176 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c12c:	2b03      	cmp	r3, #3
 800c12e:	d107      	bne.n	800c140 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800c130:	f107 030f 	add.w	r3, r7, #15
 800c134:	2201      	movs	r2, #1
 800c136:	4619      	mov	r1, r3
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f001 f983 	bl	800d444 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c13e:	e01a      	b.n	800c176 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800c140:	6839      	ldr	r1, [r7, #0]
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f001 f913 	bl	800d36e <USBD_CtlError>
			  ret = USBD_FAIL;
 800c148:	2302      	movs	r3, #2
 800c14a:	75fb      	strb	r3, [r7, #23]
      break;
 800c14c:	e013      	b.n	800c176 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c154:	2b03      	cmp	r3, #3
 800c156:	d00d      	beq.n	800c174 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800c158:	6839      	ldr	r1, [r7, #0]
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f001 f907 	bl	800d36e <USBD_CtlError>
			  ret = USBD_FAIL;
 800c160:	2302      	movs	r3, #2
 800c162:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c164:	e006      	b.n	800c174 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800c166:	6839      	ldr	r1, [r7, #0]
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f001 f900 	bl	800d36e <USBD_CtlError>
      ret = USBD_FAIL;
 800c16e:	2302      	movs	r3, #2
 800c170:	75fb      	strb	r3, [r7, #23]
      break;
 800c172:	e000      	b.n	800c176 <USBD_CDC_Setup+0x126>
      break;
 800c174:	bf00      	nop
    }
    break;
 800c176:	e006      	b.n	800c186 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800c178:	6839      	ldr	r1, [r7, #0]
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f001 f8f7 	bl	800d36e <USBD_CtlError>
    ret = USBD_FAIL;
 800c180:	2302      	movs	r3, #2
 800c182:	75fb      	strb	r3, [r7, #23]
    break;
 800c184:	bf00      	nop
  }

  return ret;
 800c186:	7dfb      	ldrb	r3, [r7, #23]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3718      	adds	r7, #24
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	460b      	mov	r3, r1
 800c19a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c1a2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c1aa:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d03a      	beq.n	800c22c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c1b6:	78fa      	ldrb	r2, [r7, #3]
 800c1b8:	6879      	ldr	r1, [r7, #4]
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	4413      	add	r3, r2
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	440b      	add	r3, r1
 800c1c4:	331c      	adds	r3, #28
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d029      	beq.n	800c220 <USBD_CDC_DataIn+0x90>
 800c1cc:	78fa      	ldrb	r2, [r7, #3]
 800c1ce:	6879      	ldr	r1, [r7, #4]
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	4413      	add	r3, r2
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	440b      	add	r3, r1
 800c1da:	331c      	adds	r3, #28
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	78f9      	ldrb	r1, [r7, #3]
 800c1e0:	68b8      	ldr	r0, [r7, #8]
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	00db      	lsls	r3, r3, #3
 800c1e6:	1a5b      	subs	r3, r3, r1
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	4403      	add	r3, r0
 800c1ec:	3344      	adds	r3, #68	; 0x44
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	fbb2 f1f3 	udiv	r1, r2, r3
 800c1f4:	fb03 f301 	mul.w	r3, r3, r1
 800c1f8:	1ad3      	subs	r3, r2, r3
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d110      	bne.n	800c220 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c1fe:	78fa      	ldrb	r2, [r7, #3]
 800c200:	6879      	ldr	r1, [r7, #4]
 800c202:	4613      	mov	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4413      	add	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	440b      	add	r3, r1
 800c20c:	331c      	adds	r3, #28
 800c20e:	2200      	movs	r2, #0
 800c210:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800c212:	78f9      	ldrb	r1, [r7, #3]
 800c214:	2300      	movs	r3, #0
 800c216:	2200      	movs	r2, #0
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f003 f992 	bl	800f542 <USBD_LL_Transmit>
 800c21e:	e003      	b.n	800c228 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2200      	movs	r2, #0
 800c224:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800c228:	2300      	movs	r3, #0
 800c22a:	e000      	b.n	800c22e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c22c:	2302      	movs	r3, #2
  }
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b084      	sub	sp, #16
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
 800c23e:	460b      	mov	r3, r1
 800c240:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c248:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c24a:	78fb      	ldrb	r3, [r7, #3]
 800c24c:	4619      	mov	r1, r3
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f003 f9bd 	bl	800f5ce <USBD_LL_GetRxDataSize>
 800c254:	4602      	mov	r2, r0
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00d      	beq.n	800c282 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	68fa      	ldr	r2, [r7, #12]
 800c270:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c27a:	4611      	mov	r1, r2
 800c27c:	4798      	blx	r3

    return USBD_OK;
 800c27e:	2300      	movs	r3, #0
 800c280:	e000      	b.n	800c284 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c282:	2302      	movs	r3, #2
  }
}
 800c284:	4618      	mov	r0, r3
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c29a:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d015      	beq.n	800c2d2 <USBD_CDC_EP0_RxReady+0x46>
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c2ac:	2bff      	cmp	r3, #255	; 0xff
 800c2ae:	d010      	beq.n	800c2d2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c2be:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c2c6:	b292      	uxth	r2, r2
 800c2c8:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	22ff      	movs	r2, #255	; 0xff
 800c2ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3710      	adds	r7, #16
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b083      	sub	sp, #12
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2243      	movs	r2, #67	; 0x43
 800c2e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c2ea:	4b03      	ldr	r3, [pc, #12]	; (800c2f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr
 800c2f8:	20000090 	.word	0x20000090

0800c2fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2243      	movs	r2, #67	; 0x43
 800c308:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c30a:	4b03      	ldr	r3, [pc, #12]	; (800c318 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	370c      	adds	r7, #12
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	2000004c 	.word	0x2000004c

0800c31c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2243      	movs	r2, #67	; 0x43
 800c328:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c32a:	4b03      	ldr	r3, [pc, #12]	; (800c338 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr
 800c338:	200000d4 	.word	0x200000d4

0800c33c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	220a      	movs	r2, #10
 800c348:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c34a:	4b03      	ldr	r3, [pc, #12]	; (800c358 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	370c      	adds	r7, #12
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr
 800c358:	20000008 	.word	0x20000008

0800c35c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c366:	2302      	movs	r3, #2
 800c368:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d005      	beq.n	800c37c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	683a      	ldr	r2, [r7, #0]
 800c374:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800c378:	2300      	movs	r3, #0
 800c37a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3714      	adds	r7, #20
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800c38a:	b480      	push	{r7}
 800c38c:	b087      	sub	sp, #28
 800c38e:	af00      	add	r7, sp, #0
 800c390:	60f8      	str	r0, [r7, #12]
 800c392:	60b9      	str	r1, [r7, #8]
 800c394:	4613      	mov	r3, r2
 800c396:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c39e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	68ba      	ldr	r2, [r7, #8]
 800c3a4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c3a8:	88fa      	ldrh	r2, [r7, #6]
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	371c      	adds	r7, #28
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr

0800c3be <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800c3be:	b480      	push	{r7}
 800c3c0:	b085      	sub	sp, #20
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c3ce:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	683a      	ldr	r2, [r7, #0]
 800c3d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3714      	adds	r7, #20
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr

0800c3e6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c3f4:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d01c      	beq.n	800c43a <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c406:	2b00      	cmp	r3, #0
 800c408:	d115      	bne.n	800c436 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c428:	b29b      	uxth	r3, r3
 800c42a:	2181      	movs	r1, #129	; 0x81
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f003 f888 	bl	800f542 <USBD_LL_Transmit>

      return USBD_OK;
 800c432:	2300      	movs	r3, #0
 800c434:	e002      	b.n	800c43c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c436:	2301      	movs	r3, #1
 800c438:	e000      	b.n	800c43c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c43a:	2302      	movs	r3, #2
  }
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c452:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d017      	beq.n	800c48e <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	7c1b      	ldrb	r3, [r3, #16]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d109      	bne.n	800c47a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c46c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c470:	2101      	movs	r1, #1
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f003 f888 	bl	800f588 <USBD_LL_PrepareReceive>
 800c478:	e007      	b.n	800c48a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c480:	2340      	movs	r3, #64	; 0x40
 800c482:	2101      	movs	r1, #1
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f003 f87f 	bl	800f588 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c48a:	2300      	movs	r3, #0
 800c48c:	e000      	b.n	800c490 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c48e:	2302      	movs	r3, #2
  }
}
 800c490:	4618      	mov	r0, r3
 800c492:	3710      	adds	r7, #16
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d101      	bne.n	800c4b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c4ac:	2302      	movs	r3, #2
 800c4ae:	e01a      	b.n	800c4e6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d003      	beq.n	800c4c2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d003      	beq.n	800c4d0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	68ba      	ldr	r2, [r7, #8]
 800c4cc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	79fa      	ldrb	r2, [r7, #7]
 800c4dc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c4de:	68f8      	ldr	r0, [r7, #12]
 800c4e0:	f002 fefa 	bl	800f2d8 <USBD_LL_Init>

  return USBD_OK;
 800c4e4:	2300      	movs	r3, #0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c4ee:	b480      	push	{r7}
 800c4f0:	b085      	sub	sp, #20
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
 800c4f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d006      	beq.n	800c510 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	683a      	ldr	r2, [r7, #0]
 800c506:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800c50a:	2300      	movs	r3, #0
 800c50c:	73fb      	strb	r3, [r7, #15]
 800c50e:	e001      	b.n	800c514 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c510:	2302      	movs	r3, #2
 800c512:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c514:	7bfb      	ldrb	r3, [r7, #15]
}
 800c516:	4618      	mov	r0, r3
 800c518:	3714      	adds	r7, #20
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b082      	sub	sp, #8
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f002 ff20 	bl	800f370 <USBD_LL_Start>

  return USBD_OK;
 800c530:	2300      	movs	r3, #0
}
 800c532:	4618      	mov	r0, r3
 800c534:	3708      	adds	r7, #8
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}

0800c53a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800c53a:	b480      	push	{r7}
 800c53c:	b083      	sub	sp, #12
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	460b      	mov	r3, r1
 800c55a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800c55c:	2302      	movs	r3, #2
 800c55e:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00c      	beq.n	800c584 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	78fa      	ldrb	r2, [r7, #3]
 800c574:	4611      	mov	r1, r2
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	4798      	blx	r3
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d101      	bne.n	800c584 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c580:	2300      	movs	r3, #0
 800c582:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c584:	7bfb      	ldrb	r3, [r7, #15]
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b082      	sub	sp, #8
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
 800c596:	460b      	mov	r3, r1
 800c598:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	78fa      	ldrb	r2, [r7, #3]
 800c5a4:	4611      	mov	r1, r2
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	4798      	blx	r3
  return USBD_OK;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3708      	adds	r7, #8
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c5c4:	6839      	ldr	r1, [r7, #0]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f000 fe94 	bl	800d2f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800c5da:	461a      	mov	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c5e8:	f003 031f 	and.w	r3, r3, #31
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d00c      	beq.n	800c60a <USBD_LL_SetupStage+0x56>
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d302      	bcc.n	800c5fa <USBD_LL_SetupStage+0x46>
 800c5f4:	2b02      	cmp	r3, #2
 800c5f6:	d010      	beq.n	800c61a <USBD_LL_SetupStage+0x66>
 800c5f8:	e017      	b.n	800c62a <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c600:	4619      	mov	r1, r3
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fa04 	bl	800ca10 <USBD_StdDevReq>
    break;
 800c608:	e01a      	b.n	800c640 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c610:	4619      	mov	r1, r3
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 fa66 	bl	800cae4 <USBD_StdItfReq>
    break;
 800c618:	e012      	b.n	800c640 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c620:	4619      	mov	r1, r3
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 faa4 	bl	800cb70 <USBD_StdEPReq>
    break;
 800c628:	e00a      	b.n	800c640 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c630:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c634:	b2db      	uxtb	r3, r3
 800c636:	4619      	mov	r1, r3
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f002 fef9 	bl	800f430 <USBD_LL_StallEP>
    break;
 800c63e:	bf00      	nop
  }

  return USBD_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b086      	sub	sp, #24
 800c64e:	af00      	add	r7, sp, #0
 800c650:	60f8      	str	r0, [r7, #12]
 800c652:	460b      	mov	r3, r1
 800c654:	607a      	str	r2, [r7, #4]
 800c656:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800c658:	7afb      	ldrb	r3, [r7, #11]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d14b      	bne.n	800c6f6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c664:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c66c:	2b03      	cmp	r3, #3
 800c66e:	d134      	bne.n	800c6da <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	68da      	ldr	r2, [r3, #12]
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d919      	bls.n	800c6b0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	68da      	ldr	r2, [r3, #12]
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	691b      	ldr	r3, [r3, #16]
 800c684:	1ad2      	subs	r2, r2, r3
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	68da      	ldr	r2, [r3, #12]
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c692:	429a      	cmp	r2, r3
 800c694:	d203      	bcs.n	800c69e <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	e002      	b.n	800c6a4 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	6879      	ldr	r1, [r7, #4]
 800c6a8:	68f8      	ldr	r0, [r7, #12]
 800c6aa:	f000 ff17 	bl	800d4dc <USBD_CtlContinueRx>
 800c6ae:	e038      	b.n	800c722 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00a      	beq.n	800c6d2 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800c6c2:	2b03      	cmp	r3, #3
 800c6c4:	d105      	bne.n	800c6d2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	68f8      	ldr	r0, [r7, #12]
 800c6d0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	f000 ff14 	bl	800d500 <USBD_CtlSendStatus>
 800c6d8:	e023      	b.n	800c722 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c6e0:	2b05      	cmp	r3, #5
 800c6e2:	d11e      	bne.n	800c722 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800c6ec:	2100      	movs	r1, #0
 800c6ee:	68f8      	ldr	r0, [r7, #12]
 800c6f0:	f002 fe9e 	bl	800f430 <USBD_LL_StallEP>
 800c6f4:	e015      	b.n	800c722 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c6fc:	699b      	ldr	r3, [r3, #24]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d00d      	beq.n	800c71e <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800c708:	2b03      	cmp	r3, #3
 800c70a:	d108      	bne.n	800c71e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c712:	699b      	ldr	r3, [r3, #24]
 800c714:	7afa      	ldrb	r2, [r7, #11]
 800c716:	4611      	mov	r1, r2
 800c718:	68f8      	ldr	r0, [r7, #12]
 800c71a:	4798      	blx	r3
 800c71c:	e001      	b.n	800c722 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c71e:	2302      	movs	r3, #2
 800c720:	e000      	b.n	800c724 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c722:	2300      	movs	r3, #0
}
 800c724:	4618      	mov	r0, r3
 800c726:	3718      	adds	r7, #24
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b086      	sub	sp, #24
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	460b      	mov	r3, r1
 800c736:	607a      	str	r2, [r7, #4]
 800c738:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800c73a:	7afb      	ldrb	r3, [r7, #11]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d17f      	bne.n	800c840 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	3314      	adds	r3, #20
 800c744:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d15c      	bne.n	800c80a <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	68da      	ldr	r2, [r3, #12]
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	691b      	ldr	r3, [r3, #16]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d915      	bls.n	800c788 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	68da      	ldr	r2, [r3, #12]
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	1ad2      	subs	r2, r2, r3
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	68db      	ldr	r3, [r3, #12]
 800c76e:	b29b      	uxth	r3, r3
 800c770:	461a      	mov	r2, r3
 800c772:	6879      	ldr	r1, [r7, #4]
 800c774:	68f8      	ldr	r0, [r7, #12]
 800c776:	f000 fe81 	bl	800d47c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c77a:	2300      	movs	r3, #0
 800c77c:	2200      	movs	r2, #0
 800c77e:	2100      	movs	r1, #0
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f002 ff01 	bl	800f588 <USBD_LL_PrepareReceive>
 800c786:	e04e      	b.n	800c826 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	697a      	ldr	r2, [r7, #20]
 800c78e:	6912      	ldr	r2, [r2, #16]
 800c790:	fbb3 f1f2 	udiv	r1, r3, r2
 800c794:	fb02 f201 	mul.w	r2, r2, r1
 800c798:	1a9b      	subs	r3, r3, r2
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d11c      	bne.n	800c7d8 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	689a      	ldr	r2, [r3, #8]
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d316      	bcc.n	800c7d8 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	689a      	ldr	r2, [r3, #8]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d20f      	bcs.n	800c7d8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	2100      	movs	r1, #0
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f000 fe5d 	bl	800d47c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	2100      	movs	r1, #0
 800c7d0:	68f8      	ldr	r0, [r7, #12]
 800c7d2:	f002 fed9 	bl	800f588 <USBD_LL_PrepareReceive>
 800c7d6:	e026      	b.n	800c826 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00a      	beq.n	800c7fa <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800c7ea:	2b03      	cmp	r3, #3
 800c7ec:	d105      	bne.n	800c7fa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c7fa:	2180      	movs	r1, #128	; 0x80
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f002 fe17 	bl	800f430 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c802:	68f8      	ldr	r0, [r7, #12]
 800c804:	f000 fe8f 	bl	800d526 <USBD_CtlReceiveStatus>
 800c808:	e00d      	b.n	800c826 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800c810:	2b04      	cmp	r3, #4
 800c812:	d004      	beq.n	800c81e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d103      	bne.n	800c826 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c81e:	2180      	movs	r1, #128	; 0x80
 800c820:	68f8      	ldr	r0, [r7, #12]
 800c822:	f002 fe05 	bl	800f430 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d11d      	bne.n	800c86c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	f7ff fe82 	bl	800c53a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2200      	movs	r2, #0
 800c83a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800c83e:	e015      	b.n	800c86c <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c846:	695b      	ldr	r3, [r3, #20]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00d      	beq.n	800c868 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800c852:	2b03      	cmp	r3, #3
 800c854:	d108      	bne.n	800c868 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c85c:	695b      	ldr	r3, [r3, #20]
 800c85e:	7afa      	ldrb	r2, [r7, #11]
 800c860:	4611      	mov	r1, r2
 800c862:	68f8      	ldr	r0, [r7, #12]
 800c864:	4798      	blx	r3
 800c866:	e001      	b.n	800c86c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c868:	2302      	movs	r3, #2
 800c86a:	e000      	b.n	800c86e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3718      	adds	r7, #24
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b082      	sub	sp, #8
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c87e:	2340      	movs	r3, #64	; 0x40
 800c880:	2200      	movs	r2, #0
 800c882:	2100      	movs	r1, #0
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f002 fd8e 	bl	800f3a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2201      	movs	r2, #1
 800c88e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2240      	movs	r2, #64	; 0x40
 800c896:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c89a:	2340      	movs	r3, #64	; 0x40
 800c89c:	2200      	movs	r2, #0
 800c89e:	2180      	movs	r1, #128	; 0x80
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f002 fd80 	bl	800f3a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2240      	movs	r2, #64	; 0x40
 800c8b0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d009      	beq.n	800c8ee <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	6852      	ldr	r2, [r2, #4]
 800c8e6:	b2d2      	uxtb	r2, r2
 800c8e8:	4611      	mov	r1, r2
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	4798      	blx	r3
  }

  return USBD_OK;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	460b      	mov	r3, r1
 800c902:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	78fa      	ldrb	r2, [r7, #3]
 800c908:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800c90a:	2300      	movs	r3, #0
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2204      	movs	r2, #4
 800c930:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	370c      	adds	r7, #12
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr

0800c942 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800c942:	b480      	push	{r7}
 800c944:	b083      	sub	sp, #12
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800c956:	2300      	movs	r3, #0
}
 800c958:	4618      	mov	r0, r3
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c972:	2b03      	cmp	r3, #3
 800c974:	d10b      	bne.n	800c98e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c97c:	69db      	ldr	r3, [r3, #28]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d005      	beq.n	800c98e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c988:	69db      	ldr	r3, [r3, #28]
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800c98e:	2300      	movs	r3, #0
}
 800c990:	4618      	mov	r0, r3
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c998:	b480      	push	{r7}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	370c      	adds	r7, #12
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800c9b2:	b480      	push	{r7}
 800c9b4:	b083      	sub	sp, #12
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c9be:	2300      	movs	r3, #0
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	370c      	adds	r7, #12
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c9d4:	2300      	movs	r3, #0
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	370c      	adds	r7, #12
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr

0800c9e2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	6852      	ldr	r2, [r2, #4]
 800c9fe:	b2d2      	uxtb	r2, r2
 800ca00:	4611      	mov	r1, r2
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	4798      	blx	r3

  return USBD_OK;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca26:	2b20      	cmp	r3, #32
 800ca28:	d004      	beq.n	800ca34 <USBD_StdDevReq+0x24>
 800ca2a:	2b40      	cmp	r3, #64	; 0x40
 800ca2c:	d002      	beq.n	800ca34 <USBD_StdDevReq+0x24>
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d008      	beq.n	800ca44 <USBD_StdDevReq+0x34>
 800ca32:	e04c      	b.n	800cace <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	6839      	ldr	r1, [r7, #0]
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	4798      	blx	r3
    break;
 800ca42:	e049      	b.n	800cad8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	785b      	ldrb	r3, [r3, #1]
 800ca48:	2b09      	cmp	r3, #9
 800ca4a:	d83a      	bhi.n	800cac2 <USBD_StdDevReq+0xb2>
 800ca4c:	a201      	add	r2, pc, #4	; (adr r2, 800ca54 <USBD_StdDevReq+0x44>)
 800ca4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca52:	bf00      	nop
 800ca54:	0800caa5 	.word	0x0800caa5
 800ca58:	0800cab9 	.word	0x0800cab9
 800ca5c:	0800cac3 	.word	0x0800cac3
 800ca60:	0800caaf 	.word	0x0800caaf
 800ca64:	0800cac3 	.word	0x0800cac3
 800ca68:	0800ca87 	.word	0x0800ca87
 800ca6c:	0800ca7d 	.word	0x0800ca7d
 800ca70:	0800cac3 	.word	0x0800cac3
 800ca74:	0800ca9b 	.word	0x0800ca9b
 800ca78:	0800ca91 	.word	0x0800ca91
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800ca7c:	6839      	ldr	r1, [r7, #0]
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 f9d2 	bl	800ce28 <USBD_GetDescriptor>
      break;
 800ca84:	e022      	b.n	800cacc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 fac7 	bl	800d01c <USBD_SetAddress>
      break;
 800ca8e:	e01d      	b.n	800cacc <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800ca90:	6839      	ldr	r1, [r7, #0]
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 fb04 	bl	800d0a0 <USBD_SetConfig>
      break;
 800ca98:	e018      	b.n	800cacc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800ca9a:	6839      	ldr	r1, [r7, #0]
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f000 fb8d 	bl	800d1bc <USBD_GetConfig>
      break;
 800caa2:	e013      	b.n	800cacc <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800caa4:	6839      	ldr	r1, [r7, #0]
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 fbbc 	bl	800d224 <USBD_GetStatus>
      break;
 800caac:	e00e      	b.n	800cacc <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800caae:	6839      	ldr	r1, [r7, #0]
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 fbea 	bl	800d28a <USBD_SetFeature>
      break;
 800cab6:	e009      	b.n	800cacc <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800cab8:	6839      	ldr	r1, [r7, #0]
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 fbf9 	bl	800d2b2 <USBD_ClrFeature>
      break;
 800cac0:	e004      	b.n	800cacc <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800cac2:	6839      	ldr	r1, [r7, #0]
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 fc52 	bl	800d36e <USBD_CtlError>
      break;
 800caca:	bf00      	nop
    }
    break;
 800cacc:	e004      	b.n	800cad8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800cace:	6839      	ldr	r1, [r7, #0]
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 fc4c 	bl	800d36e <USBD_CtlError>
    break;
 800cad6:	bf00      	nop
  }

  return ret;
 800cad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3710      	adds	r7, #16
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop

0800cae4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800caee:	2300      	movs	r3, #0
 800caf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cafa:	2b20      	cmp	r3, #32
 800cafc:	d003      	beq.n	800cb06 <USBD_StdItfReq+0x22>
 800cafe:	2b40      	cmp	r3, #64	; 0x40
 800cb00:	d001      	beq.n	800cb06 <USBD_StdItfReq+0x22>
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d12a      	bne.n	800cb5c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cb0c:	3b01      	subs	r3, #1
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d81d      	bhi.n	800cb4e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	889b      	ldrh	r3, [r3, #4]
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d813      	bhi.n	800cb44 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	6839      	ldr	r1, [r7, #0]
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	4798      	blx	r3
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	88db      	ldrh	r3, [r3, #6]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d110      	bne.n	800cb58 <USBD_StdItfReq+0x74>
 800cb36:	7bfb      	ldrb	r3, [r7, #15]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d10d      	bne.n	800cb58 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 fcdf 	bl	800d500 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800cb42:	e009      	b.n	800cb58 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800cb44:	6839      	ldr	r1, [r7, #0]
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 fc11 	bl	800d36e <USBD_CtlError>
      break;
 800cb4c:	e004      	b.n	800cb58 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800cb4e:	6839      	ldr	r1, [r7, #0]
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 fc0c 	bl	800d36e <USBD_CtlError>
      break;
 800cb56:	e000      	b.n	800cb5a <USBD_StdItfReq+0x76>
      break;
 800cb58:	bf00      	nop
    }
    break;
 800cb5a:	e004      	b.n	800cb66 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800cb5c:	6839      	ldr	r1, [r7, #0]
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 fc05 	bl	800d36e <USBD_CtlError>
    break;
 800cb64:	bf00      	nop
  }

  return USBD_OK;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	889b      	ldrh	r3, [r3, #4]
 800cb82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb8c:	2b20      	cmp	r3, #32
 800cb8e:	d004      	beq.n	800cb9a <USBD_StdEPReq+0x2a>
 800cb90:	2b40      	cmp	r3, #64	; 0x40
 800cb92:	d002      	beq.n	800cb9a <USBD_StdEPReq+0x2a>
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d008      	beq.n	800cbaa <USBD_StdEPReq+0x3a>
 800cb98:	e13b      	b.n	800ce12 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cba0:	689b      	ldr	r3, [r3, #8]
 800cba2:	6839      	ldr	r1, [r7, #0]
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	4798      	blx	r3
    break;
 800cba8:	e138      	b.n	800ce1c <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbb2:	2b20      	cmp	r3, #32
 800cbb4:	d10a      	bne.n	800cbcc <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	6839      	ldr	r1, [r7, #0]
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	4798      	blx	r3
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	73fb      	strb	r3, [r7, #15]

      return ret;
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
 800cbca:	e128      	b.n	800ce1e <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	785b      	ldrb	r3, [r3, #1]
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d03e      	beq.n	800cc52 <USBD_StdEPReq+0xe2>
 800cbd4:	2b03      	cmp	r3, #3
 800cbd6:	d002      	beq.n	800cbde <USBD_StdEPReq+0x6e>
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d070      	beq.n	800ccbe <USBD_StdEPReq+0x14e>
 800cbdc:	e113      	b.n	800ce06 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cbe4:	2b02      	cmp	r3, #2
 800cbe6:	d002      	beq.n	800cbee <USBD_StdEPReq+0x7e>
 800cbe8:	2b03      	cmp	r3, #3
 800cbea:	d015      	beq.n	800cc18 <USBD_StdEPReq+0xa8>
 800cbec:	e02b      	b.n	800cc46 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbee:	7bbb      	ldrb	r3, [r7, #14]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d00c      	beq.n	800cc0e <USBD_StdEPReq+0x9e>
 800cbf4:	7bbb      	ldrb	r3, [r7, #14]
 800cbf6:	2b80      	cmp	r3, #128	; 0x80
 800cbf8:	d009      	beq.n	800cc0e <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800cbfa:	7bbb      	ldrb	r3, [r7, #14]
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f002 fc16 	bl	800f430 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800cc04:	2180      	movs	r1, #128	; 0x80
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f002 fc12 	bl	800f430 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800cc0c:	e020      	b.n	800cc50 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800cc0e:	6839      	ldr	r1, [r7, #0]
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 fbac 	bl	800d36e <USBD_CtlError>
        break;
 800cc16:	e01b      	b.n	800cc50 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	885b      	ldrh	r3, [r3, #2]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d10e      	bne.n	800cc3e <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc20:	7bbb      	ldrb	r3, [r7, #14]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d00b      	beq.n	800cc3e <USBD_StdEPReq+0xce>
 800cc26:	7bbb      	ldrb	r3, [r7, #14]
 800cc28:	2b80      	cmp	r3, #128	; 0x80
 800cc2a:	d008      	beq.n	800cc3e <USBD_StdEPReq+0xce>
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	88db      	ldrh	r3, [r3, #6]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d104      	bne.n	800cc3e <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800cc34:	7bbb      	ldrb	r3, [r7, #14]
 800cc36:	4619      	mov	r1, r3
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f002 fbf9 	bl	800f430 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 fc5e 	bl	800d500 <USBD_CtlSendStatus>

        break;
 800cc44:	e004      	b.n	800cc50 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800cc46:	6839      	ldr	r1, [r7, #0]
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 fb90 	bl	800d36e <USBD_CtlError>
        break;
 800cc4e:	bf00      	nop
      }
      break;
 800cc50:	e0de      	b.n	800ce10 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cc58:	2b02      	cmp	r3, #2
 800cc5a:	d002      	beq.n	800cc62 <USBD_StdEPReq+0xf2>
 800cc5c:	2b03      	cmp	r3, #3
 800cc5e:	d015      	beq.n	800cc8c <USBD_StdEPReq+0x11c>
 800cc60:	e026      	b.n	800ccb0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc62:	7bbb      	ldrb	r3, [r7, #14]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00c      	beq.n	800cc82 <USBD_StdEPReq+0x112>
 800cc68:	7bbb      	ldrb	r3, [r7, #14]
 800cc6a:	2b80      	cmp	r3, #128	; 0x80
 800cc6c:	d009      	beq.n	800cc82 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800cc6e:	7bbb      	ldrb	r3, [r7, #14]
 800cc70:	4619      	mov	r1, r3
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f002 fbdc 	bl	800f430 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800cc78:	2180      	movs	r1, #128	; 0x80
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f002 fbd8 	bl	800f430 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800cc80:	e01c      	b.n	800ccbc <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800cc82:	6839      	ldr	r1, [r7, #0]
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 fb72 	bl	800d36e <USBD_CtlError>
        break;
 800cc8a:	e017      	b.n	800ccbc <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	885b      	ldrh	r3, [r3, #2]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d112      	bne.n	800ccba <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800cc94:	7bbb      	ldrb	r3, [r7, #14]
 800cc96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d004      	beq.n	800cca8 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc9e:	7bbb      	ldrb	r3, [r7, #14]
 800cca0:	4619      	mov	r1, r3
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f002 fbe3 	bl	800f46e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 fc29 	bl	800d500 <USBD_CtlSendStatus>
        }
        break;
 800ccae:	e004      	b.n	800ccba <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800ccb0:	6839      	ldr	r1, [r7, #0]
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 fb5b 	bl	800d36e <USBD_CtlError>
        break;
 800ccb8:	e000      	b.n	800ccbc <USBD_StdEPReq+0x14c>
        break;
 800ccba:	bf00      	nop
      }
      break;
 800ccbc:	e0a8      	b.n	800ce10 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d002      	beq.n	800ccce <USBD_StdEPReq+0x15e>
 800ccc8:	2b03      	cmp	r3, #3
 800ccca:	d031      	beq.n	800cd30 <USBD_StdEPReq+0x1c0>
 800cccc:	e095      	b.n	800cdfa <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ccce:	7bbb      	ldrb	r3, [r7, #14]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d007      	beq.n	800cce4 <USBD_StdEPReq+0x174>
 800ccd4:	7bbb      	ldrb	r3, [r7, #14]
 800ccd6:	2b80      	cmp	r3, #128	; 0x80
 800ccd8:	d004      	beq.n	800cce4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800ccda:	6839      	ldr	r1, [r7, #0]
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f000 fb46 	bl	800d36e <USBD_CtlError>
          break;
 800cce2:	e08f      	b.n	800ce04 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cce4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	da0b      	bge.n	800cd04 <USBD_StdEPReq+0x194>
 800ccec:	7bbb      	ldrb	r3, [r7, #14]
 800ccee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	4413      	add	r3, r2
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	3310      	adds	r3, #16
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	4413      	add	r3, r2
 800cd00:	3304      	adds	r3, #4
 800cd02:	e00a      	b.n	800cd1a <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800cd04:	7bbb      	ldrb	r3, [r7, #14]
 800cd06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cd0a:	4613      	mov	r3, r2
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	4413      	add	r3, r2
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	4413      	add	r3, r2
 800cd1a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	2202      	movs	r2, #2
 800cd26:	4619      	mov	r1, r3
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f000 fb8b 	bl	800d444 <USBD_CtlSendData>
          break;
 800cd2e:	e069      	b.n	800ce04 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800cd30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	da11      	bge.n	800cd5c <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd38:	7bbb      	ldrb	r3, [r7, #14]
 800cd3a:	f003 020f 	and.w	r2, r3, #15
 800cd3e:	6879      	ldr	r1, [r7, #4]
 800cd40:	4613      	mov	r3, r2
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	4413      	add	r3, r2
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	440b      	add	r3, r1
 800cd4a:	3318      	adds	r3, #24
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d117      	bne.n	800cd82 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800cd52:	6839      	ldr	r1, [r7, #0]
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 fb0a 	bl	800d36e <USBD_CtlError>
            break;
 800cd5a:	e053      	b.n	800ce04 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd5c:	7bbb      	ldrb	r3, [r7, #14]
 800cd5e:	f003 020f 	and.w	r2, r3, #15
 800cd62:	6879      	ldr	r1, [r7, #4]
 800cd64:	4613      	mov	r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4413      	add	r3, r2
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	440b      	add	r3, r1
 800cd6e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d104      	bne.n	800cd82 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800cd78:	6839      	ldr	r1, [r7, #0]
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 faf7 	bl	800d36e <USBD_CtlError>
            break;
 800cd80:	e040      	b.n	800ce04 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cd82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	da0b      	bge.n	800cda2 <USBD_StdEPReq+0x232>
 800cd8a:	7bbb      	ldrb	r3, [r7, #14]
 800cd8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd90:	4613      	mov	r3, r2
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	4413      	add	r3, r2
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	3310      	adds	r3, #16
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	3304      	adds	r3, #4
 800cda0:	e00a      	b.n	800cdb8 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800cda2:	7bbb      	ldrb	r3, [r7, #14]
 800cda4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800cda8:	4613      	mov	r3, r2
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	4413      	add	r3, r2
 800cdae:	009b      	lsls	r3, r3, #2
 800cdb0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800cdb4:	687a      	ldr	r2, [r7, #4]
 800cdb6:	4413      	add	r3, r2
 800cdb8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cdba:	7bbb      	ldrb	r3, [r7, #14]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d002      	beq.n	800cdc6 <USBD_StdEPReq+0x256>
 800cdc0:	7bbb      	ldrb	r3, [r7, #14]
 800cdc2:	2b80      	cmp	r3, #128	; 0x80
 800cdc4:	d103      	bne.n	800cdce <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	601a      	str	r2, [r3, #0]
 800cdcc:	e00e      	b.n	800cdec <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800cdce:	7bbb      	ldrb	r3, [r7, #14]
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f002 fb6a 	bl	800f4ac <USBD_LL_IsStallEP>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d003      	beq.n	800cde6 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	2201      	movs	r2, #1
 800cde2:	601a      	str	r2, [r3, #0]
 800cde4:	e002      	b.n	800cdec <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	2200      	movs	r2, #0
 800cdea:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	2202      	movs	r2, #2
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 fb26 	bl	800d444 <USBD_CtlSendData>
          break;
 800cdf8:	e004      	b.n	800ce04 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800cdfa:	6839      	ldr	r1, [r7, #0]
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 fab6 	bl	800d36e <USBD_CtlError>
        break;
 800ce02:	bf00      	nop
      }
      break;
 800ce04:	e004      	b.n	800ce10 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800ce06:	6839      	ldr	r1, [r7, #0]
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 fab0 	bl	800d36e <USBD_CtlError>
      break;
 800ce0e:	bf00      	nop
    }
    break;
 800ce10:	e004      	b.n	800ce1c <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800ce12:	6839      	ldr	r1, [r7, #0]
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f000 faaa 	bl	800d36e <USBD_CtlError>
    break;
 800ce1a:	bf00      	nop
  }

  return ret;
 800ce1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
	...

0800ce28 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	885b      	ldrh	r3, [r3, #2]
 800ce36:	0a1b      	lsrs	r3, r3, #8
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	3b01      	subs	r3, #1
 800ce3c:	2b06      	cmp	r3, #6
 800ce3e:	f200 80c9 	bhi.w	800cfd4 <USBD_GetDescriptor+0x1ac>
 800ce42:	a201      	add	r2, pc, #4	; (adr r2, 800ce48 <USBD_GetDescriptor+0x20>)
 800ce44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce48:	0800ce65 	.word	0x0800ce65
 800ce4c:	0800ce7d 	.word	0x0800ce7d
 800ce50:	0800cebd 	.word	0x0800cebd
 800ce54:	0800cfd5 	.word	0x0800cfd5
 800ce58:	0800cfd5 	.word	0x0800cfd5
 800ce5c:	0800cf81 	.word	0x0800cf81
 800ce60:	0800cfa7 	.word	0x0800cfa7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	7c12      	ldrb	r2, [r2, #16]
 800ce70:	f107 010a 	add.w	r1, r7, #10
 800ce74:	4610      	mov	r0, r2
 800ce76:	4798      	blx	r3
 800ce78:	60f8      	str	r0, [r7, #12]
    break;
 800ce7a:	e0b0      	b.n	800cfde <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	7c1b      	ldrb	r3, [r3, #16]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d10d      	bne.n	800cea0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ce8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce8c:	f107 020a 	add.w	r2, r7, #10
 800ce90:	4610      	mov	r0, r2
 800ce92:	4798      	blx	r3
 800ce94:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	2202      	movs	r2, #2
 800ce9c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ce9e:	e09e      	b.n	800cfde <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea8:	f107 020a 	add.w	r2, r7, #10
 800ceac:	4610      	mov	r0, r2
 800ceae:	4798      	blx	r3
 800ceb0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	2202      	movs	r2, #2
 800ceb8:	701a      	strb	r2, [r3, #0]
    break;
 800ceba:	e090      	b.n	800cfde <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	885b      	ldrh	r3, [r3, #2]
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	2b05      	cmp	r3, #5
 800cec4:	d856      	bhi.n	800cf74 <USBD_GetDescriptor+0x14c>
 800cec6:	a201      	add	r2, pc, #4	; (adr r2, 800cecc <USBD_GetDescriptor+0xa4>)
 800cec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cecc:	0800cee5 	.word	0x0800cee5
 800ced0:	0800cefd 	.word	0x0800cefd
 800ced4:	0800cf15 	.word	0x0800cf15
 800ced8:	0800cf2d 	.word	0x0800cf2d
 800cedc:	0800cf45 	.word	0x0800cf45
 800cee0:	0800cf5d 	.word	0x0800cf5d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	7c12      	ldrb	r2, [r2, #16]
 800cef0:	f107 010a 	add.w	r1, r7, #10
 800cef4:	4610      	mov	r0, r2
 800cef6:	4798      	blx	r3
 800cef8:	60f8      	str	r0, [r7, #12]
      break;
 800cefa:	e040      	b.n	800cf7e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	7c12      	ldrb	r2, [r2, #16]
 800cf08:	f107 010a 	add.w	r1, r7, #10
 800cf0c:	4610      	mov	r0, r2
 800cf0e:	4798      	blx	r3
 800cf10:	60f8      	str	r0, [r7, #12]
      break;
 800cf12:	e034      	b.n	800cf7e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	7c12      	ldrb	r2, [r2, #16]
 800cf20:	f107 010a 	add.w	r1, r7, #10
 800cf24:	4610      	mov	r0, r2
 800cf26:	4798      	blx	r3
 800cf28:	60f8      	str	r0, [r7, #12]
      break;
 800cf2a:	e028      	b.n	800cf7e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf32:	691b      	ldr	r3, [r3, #16]
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	7c12      	ldrb	r2, [r2, #16]
 800cf38:	f107 010a 	add.w	r1, r7, #10
 800cf3c:	4610      	mov	r0, r2
 800cf3e:	4798      	blx	r3
 800cf40:	60f8      	str	r0, [r7, #12]
      break;
 800cf42:	e01c      	b.n	800cf7e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf4a:	695b      	ldr	r3, [r3, #20]
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	7c12      	ldrb	r2, [r2, #16]
 800cf50:	f107 010a 	add.w	r1, r7, #10
 800cf54:	4610      	mov	r0, r2
 800cf56:	4798      	blx	r3
 800cf58:	60f8      	str	r0, [r7, #12]
      break;
 800cf5a:	e010      	b.n	800cf7e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800cf62:	699b      	ldr	r3, [r3, #24]
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	7c12      	ldrb	r2, [r2, #16]
 800cf68:	f107 010a 	add.w	r1, r7, #10
 800cf6c:	4610      	mov	r0, r2
 800cf6e:	4798      	blx	r3
 800cf70:	60f8      	str	r0, [r7, #12]
      break;
 800cf72:	e004      	b.n	800cf7e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800cf74:	6839      	ldr	r1, [r7, #0]
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 f9f9 	bl	800d36e <USBD_CtlError>
      return;
 800cf7c:	e04b      	b.n	800d016 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800cf7e:	e02e      	b.n	800cfde <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	7c1b      	ldrb	r3, [r3, #16]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d109      	bne.n	800cf9c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cf8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf90:	f107 020a 	add.w	r2, r7, #10
 800cf94:	4610      	mov	r0, r2
 800cf96:	4798      	blx	r3
 800cf98:	60f8      	str	r0, [r7, #12]
      break;
 800cf9a:	e020      	b.n	800cfde <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800cf9c:	6839      	ldr	r1, [r7, #0]
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 f9e5 	bl	800d36e <USBD_CtlError>
      return;
 800cfa4:	e037      	b.n	800d016 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	7c1b      	ldrb	r3, [r3, #16]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d10d      	bne.n	800cfca <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cfb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfb6:	f107 020a 	add.w	r2, r7, #10
 800cfba:	4610      	mov	r0, r2
 800cfbc:	4798      	blx	r3
 800cfbe:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	2207      	movs	r2, #7
 800cfc6:	701a      	strb	r2, [r3, #0]
      break;
 800cfc8:	e009      	b.n	800cfde <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800cfca:	6839      	ldr	r1, [r7, #0]
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 f9ce 	bl	800d36e <USBD_CtlError>
      return;
 800cfd2:	e020      	b.n	800d016 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800cfd4:	6839      	ldr	r1, [r7, #0]
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 f9c9 	bl	800d36e <USBD_CtlError>
    return;
 800cfdc:	e01b      	b.n	800d016 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800cfde:	897b      	ldrh	r3, [r7, #10]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d011      	beq.n	800d008 <USBD_GetDescriptor+0x1e0>
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	88db      	ldrh	r3, [r3, #6]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d00d      	beq.n	800d008 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	88da      	ldrh	r2, [r3, #6]
 800cff0:	897b      	ldrh	r3, [r7, #10]
 800cff2:	4293      	cmp	r3, r2
 800cff4:	bf28      	it	cs
 800cff6:	4613      	movcs	r3, r2
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800cffc:	897b      	ldrh	r3, [r7, #10]
 800cffe:	461a      	mov	r2, r3
 800d000:	68f9      	ldr	r1, [r7, #12]
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f000 fa1e 	bl	800d444 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	88db      	ldrh	r3, [r3, #6]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d102      	bne.n	800d016 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 fa75 	bl	800d500 <USBD_CtlSendStatus>
  }
}
 800d016:	3710      	adds	r7, #16
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	889b      	ldrh	r3, [r3, #4]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d130      	bne.n	800d090 <USBD_SetAddress+0x74>
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	88db      	ldrh	r3, [r3, #6]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d12c      	bne.n	800d090 <USBD_SetAddress+0x74>
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	885b      	ldrh	r3, [r3, #2]
 800d03a:	2b7f      	cmp	r3, #127	; 0x7f
 800d03c:	d828      	bhi.n	800d090 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	885b      	ldrh	r3, [r3, #2]
 800d042:	b2db      	uxtb	r3, r3
 800d044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d048:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d050:	2b03      	cmp	r3, #3
 800d052:	d104      	bne.n	800d05e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800d054:	6839      	ldr	r1, [r7, #0]
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 f989 	bl	800d36e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d05c:	e01c      	b.n	800d098 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	7bfa      	ldrb	r2, [r7, #15]
 800d062:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d066:	7bfb      	ldrb	r3, [r7, #15]
 800d068:	4619      	mov	r1, r3
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f002 fa4a 	bl	800f504 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f000 fa45 	bl	800d500 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d076:	7bfb      	ldrb	r3, [r7, #15]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d004      	beq.n	800d086 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2202      	movs	r2, #2
 800d080:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d084:	e008      	b.n	800d098 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2201      	movs	r2, #1
 800d08a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d08e:	e003      	b.n	800d098 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d090:	6839      	ldr	r1, [r7, #0]
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f96b 	bl	800d36e <USBD_CtlError>
  }
}
 800d098:	bf00      	nop
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	885b      	ldrh	r3, [r3, #2]
 800d0ae:	b2da      	uxtb	r2, r3
 800d0b0:	4b41      	ldr	r3, [pc, #260]	; (800d1b8 <USBD_SetConfig+0x118>)
 800d0b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d0b4:	4b40      	ldr	r3, [pc, #256]	; (800d1b8 <USBD_SetConfig+0x118>)
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	d904      	bls.n	800d0c6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d0bc:	6839      	ldr	r1, [r7, #0]
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 f955 	bl	800d36e <USBD_CtlError>
 800d0c4:	e075      	b.n	800d1b2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d0cc:	2b02      	cmp	r3, #2
 800d0ce:	d002      	beq.n	800d0d6 <USBD_SetConfig+0x36>
 800d0d0:	2b03      	cmp	r3, #3
 800d0d2:	d023      	beq.n	800d11c <USBD_SetConfig+0x7c>
 800d0d4:	e062      	b.n	800d19c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800d0d6:	4b38      	ldr	r3, [pc, #224]	; (800d1b8 <USBD_SetConfig+0x118>)
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d01a      	beq.n	800d114 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800d0de:	4b36      	ldr	r3, [pc, #216]	; (800d1b8 <USBD_SetConfig+0x118>)
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2203      	movs	r2, #3
 800d0ec:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d0f0:	4b31      	ldr	r3, [pc, #196]	; (800d1b8 <USBD_SetConfig+0x118>)
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f7ff fa2a 	bl	800c550 <USBD_SetClassConfig>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b02      	cmp	r3, #2
 800d100:	d104      	bne.n	800d10c <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800d102:	6839      	ldr	r1, [r7, #0]
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 f932 	bl	800d36e <USBD_CtlError>
          return;
 800d10a:	e052      	b.n	800d1b2 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 f9f7 	bl	800d500 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d112:	e04e      	b.n	800d1b2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 f9f3 	bl	800d500 <USBD_CtlSendStatus>
      break;
 800d11a:	e04a      	b.n	800d1b2 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d11c:	4b26      	ldr	r3, [pc, #152]	; (800d1b8 <USBD_SetConfig+0x118>)
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d112      	bne.n	800d14a <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2202      	movs	r2, #2
 800d128:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800d12c:	4b22      	ldr	r3, [pc, #136]	; (800d1b8 <USBD_SetConfig+0x118>)
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	461a      	mov	r2, r3
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800d136:	4b20      	ldr	r3, [pc, #128]	; (800d1b8 <USBD_SetConfig+0x118>)
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	4619      	mov	r1, r3
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f7ff fa26 	bl	800c58e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 f9dc 	bl	800d500 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d148:	e033      	b.n	800d1b2 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800d14a:	4b1b      	ldr	r3, [pc, #108]	; (800d1b8 <USBD_SetConfig+0x118>)
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	461a      	mov	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	429a      	cmp	r2, r3
 800d156:	d01d      	beq.n	800d194 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	b2db      	uxtb	r3, r3
 800d15e:	4619      	mov	r1, r3
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f7ff fa14 	bl	800c58e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d166:	4b14      	ldr	r3, [pc, #80]	; (800d1b8 <USBD_SetConfig+0x118>)
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	461a      	mov	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d170:	4b11      	ldr	r3, [pc, #68]	; (800d1b8 <USBD_SetConfig+0x118>)
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	4619      	mov	r1, r3
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f7ff f9ea 	bl	800c550 <USBD_SetClassConfig>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b02      	cmp	r3, #2
 800d180:	d104      	bne.n	800d18c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800d182:	6839      	ldr	r1, [r7, #0]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 f8f2 	bl	800d36e <USBD_CtlError>
          return;
 800d18a:	e012      	b.n	800d1b2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 f9b7 	bl	800d500 <USBD_CtlSendStatus>
      break;
 800d192:	e00e      	b.n	800d1b2 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f000 f9b3 	bl	800d500 <USBD_CtlSendStatus>
      break;
 800d19a:	e00a      	b.n	800d1b2 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800d19c:	6839      	ldr	r1, [r7, #0]
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 f8e5 	bl	800d36e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800d1a4:	4b04      	ldr	r3, [pc, #16]	; (800d1b8 <USBD_SetConfig+0x118>)
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7ff f9ef 	bl	800c58e <USBD_ClrClassConfig>
      break;
 800d1b0:	bf00      	nop
    }
  }
}
 800d1b2:	3708      	adds	r7, #8
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	200005b4 	.word	0x200005b4

0800d1bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	88db      	ldrh	r3, [r3, #6]
 800d1ca:	2b01      	cmp	r3, #1
 800d1cc:	d004      	beq.n	800d1d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800d1ce:	6839      	ldr	r1, [r7, #0]
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 f8cc 	bl	800d36e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800d1d6:	e021      	b.n	800d21c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	db17      	blt.n	800d212 <USBD_GetConfig+0x56>
 800d1e2:	2b02      	cmp	r3, #2
 800d1e4:	dd02      	ble.n	800d1ec <USBD_GetConfig+0x30>
 800d1e6:	2b03      	cmp	r3, #3
 800d1e8:	d00b      	beq.n	800d202 <USBD_GetConfig+0x46>
 800d1ea:	e012      	b.n	800d212 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	3308      	adds	r3, #8
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 f922 	bl	800d444 <USBD_CtlSendData>
      break;
 800d200:	e00c      	b.n	800d21c <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	3304      	adds	r3, #4
 800d206:	2201      	movs	r2, #1
 800d208:	4619      	mov	r1, r3
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f91a 	bl	800d444 <USBD_CtlSendData>
      break;
 800d210:	e004      	b.n	800d21c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800d212:	6839      	ldr	r1, [r7, #0]
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 f8aa 	bl	800d36e <USBD_CtlError>
      break;
 800d21a:	bf00      	nop
}
 800d21c:	bf00      	nop
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d234:	3b01      	subs	r3, #1
 800d236:	2b02      	cmp	r3, #2
 800d238:	d81e      	bhi.n	800d278 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	88db      	ldrh	r3, [r3, #6]
 800d23e:	2b02      	cmp	r3, #2
 800d240:	d004      	beq.n	800d24c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d242:	6839      	ldr	r1, [r7, #0]
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 f892 	bl	800d36e <USBD_CtlError>
      break;
 800d24a:	e01a      	b.n	800d282 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2201      	movs	r2, #1
 800d250:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d005      	beq.n	800d268 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	f043 0202 	orr.w	r2, r3, #2
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	330c      	adds	r3, #12
 800d26c:	2202      	movs	r2, #2
 800d26e:	4619      	mov	r1, r3
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 f8e7 	bl	800d444 <USBD_CtlSendData>
    break;
 800d276:	e004      	b.n	800d282 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800d278:	6839      	ldr	r1, [r7, #0]
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f877 	bl	800d36e <USBD_CtlError>
    break;
 800d280:	bf00      	nop
  }
}
 800d282:	bf00      	nop
 800d284:	3708      	adds	r7, #8
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}

0800d28a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d28a:	b580      	push	{r7, lr}
 800d28c:	b082      	sub	sp, #8
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
 800d292:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	885b      	ldrh	r3, [r3, #2]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d106      	bne.n	800d2aa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 f92b 	bl	800d500 <USBD_CtlSendStatus>
  }

}
 800d2aa:	bf00      	nop
 800d2ac:	3708      	adds	r7, #8
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b082      	sub	sp, #8
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
 800d2ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d2c2:	3b01      	subs	r3, #1
 800d2c4:	2b02      	cmp	r3, #2
 800d2c6:	d80b      	bhi.n	800d2e0 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	885b      	ldrh	r3, [r3, #2]
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d10c      	bne.n	800d2ea <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 f911 	bl	800d500 <USBD_CtlSendStatus>
    }
    break;
 800d2de:	e004      	b.n	800d2ea <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800d2e0:	6839      	ldr	r1, [r7, #0]
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 f843 	bl	800d36e <USBD_CtlError>
    break;
 800d2e8:	e000      	b.n	800d2ec <USBD_ClrFeature+0x3a>
    break;
 800d2ea:	bf00      	nop
  }
}
 800d2ec:	bf00      	nop
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	781a      	ldrb	r2, [r3, #0]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	785a      	ldrb	r2, [r3, #1]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	3302      	adds	r3, #2
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	b29a      	uxth	r2, r3
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	3303      	adds	r3, #3
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	021b      	lsls	r3, r3, #8
 800d320:	b29b      	uxth	r3, r3
 800d322:	4413      	add	r3, r2
 800d324:	b29a      	uxth	r2, r3
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	3304      	adds	r3, #4
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	b29a      	uxth	r2, r3
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	3305      	adds	r3, #5
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	b29b      	uxth	r3, r3
 800d33a:	021b      	lsls	r3, r3, #8
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	4413      	add	r3, r2
 800d340:	b29a      	uxth	r2, r3
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	3306      	adds	r3, #6
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	b29a      	uxth	r2, r3
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	3307      	adds	r3, #7
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	b29b      	uxth	r3, r3
 800d356:	021b      	lsls	r3, r3, #8
 800d358:	b29b      	uxth	r3, r3
 800d35a:	4413      	add	r3, r2
 800d35c:	b29a      	uxth	r2, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	80da      	strh	r2, [r3, #6]

}
 800d362:	bf00      	nop
 800d364:	370c      	adds	r7, #12
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr

0800d36e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b082      	sub	sp, #8
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
 800d376:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800d378:	2180      	movs	r1, #128	; 0x80
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f002 f858 	bl	800f430 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800d380:	2100      	movs	r1, #0
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f002 f854 	bl	800f430 <USBD_LL_StallEP>
}
 800d388:	bf00      	nop
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b086      	sub	sp, #24
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d39c:	2300      	movs	r3, #0
 800d39e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d032      	beq.n	800d40c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f000 f834 	bl	800d414 <USBD_GetLen>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	005b      	lsls	r3, r3, #1
 800d3b4:	b29a      	uxth	r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d3ba:	7dfb      	ldrb	r3, [r7, #23]
 800d3bc:	1c5a      	adds	r2, r3, #1
 800d3be:	75fa      	strb	r2, [r7, #23]
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	7812      	ldrb	r2, [r2, #0]
 800d3ca:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d3cc:	7dfb      	ldrb	r3, [r7, #23]
 800d3ce:	1c5a      	adds	r2, r3, #1
 800d3d0:	75fa      	strb	r2, [r7, #23]
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	2203      	movs	r2, #3
 800d3da:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d3dc:	e012      	b.n	800d404 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	1c5a      	adds	r2, r3, #1
 800d3e2:	60fa      	str	r2, [r7, #12]
 800d3e4:	7dfa      	ldrb	r2, [r7, #23]
 800d3e6:	1c51      	adds	r1, r2, #1
 800d3e8:	75f9      	strb	r1, [r7, #23]
 800d3ea:	4611      	mov	r1, r2
 800d3ec:	68ba      	ldr	r2, [r7, #8]
 800d3ee:	440a      	add	r2, r1
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d3f4:	7dfb      	ldrb	r3, [r7, #23]
 800d3f6:	1c5a      	adds	r2, r3, #1
 800d3f8:	75fa      	strb	r2, [r7, #23]
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	4413      	add	r3, r2
 800d400:	2200      	movs	r2, #0
 800d402:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d1e8      	bne.n	800d3de <USBD_GetString+0x4e>
    }
  }
}
 800d40c:	bf00      	nop
 800d40e:	3718      	adds	r7, #24
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d414:	b480      	push	{r7}
 800d416:	b085      	sub	sp, #20
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800d41c:	2300      	movs	r3, #0
 800d41e:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800d420:	e005      	b.n	800d42e <USBD_GetLen+0x1a>
    {
        len++;
 800d422:	7bfb      	ldrb	r3, [r7, #15]
 800d424:	3301      	adds	r3, #1
 800d426:	73fb      	strb	r3, [r7, #15]
        buf++;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	3301      	adds	r3, #1
 800d42c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d1f5      	bne.n	800d422 <USBD_GetLen+0xe>
    }

    return len;
 800d436:	7bfb      	ldrb	r3, [r7, #15]
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3714      	adds	r7, #20
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr

0800d444 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	4613      	mov	r3, r2
 800d450:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2202      	movs	r2, #2
 800d456:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800d45a:	88fa      	ldrh	r2, [r7, #6]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d460:	88fa      	ldrh	r2, [r7, #6]
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d466:	88fb      	ldrh	r3, [r7, #6]
 800d468:	68ba      	ldr	r2, [r7, #8]
 800d46a:	2100      	movs	r1, #0
 800d46c:	68f8      	ldr	r0, [r7, #12]
 800d46e:	f002 f868 	bl	800f542 <USBD_LL_Transmit>

  return USBD_OK;
 800d472:	2300      	movs	r3, #0
}
 800d474:	4618      	mov	r0, r3
 800d476:	3710      	adds	r7, #16
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	4613      	mov	r3, r2
 800d488:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d48a:	88fb      	ldrh	r3, [r7, #6]
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	2100      	movs	r1, #0
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f002 f856 	bl	800f542 <USBD_LL_Transmit>

  return USBD_OK;
 800d496:	2300      	movs	r3, #0
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2203      	movs	r2, #3
 800d4b2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800d4b6:	88fa      	ldrh	r2, [r7, #6]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800d4be:	88fa      	ldrh	r2, [r7, #6]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800d4c6:	88fb      	ldrh	r3, [r7, #6]
 800d4c8:	68ba      	ldr	r2, [r7, #8]
 800d4ca:	2100      	movs	r1, #0
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f002 f85b 	bl	800f588 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4d2:	2300      	movs	r3, #0
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3710      	adds	r7, #16
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	60f8      	str	r0, [r7, #12]
 800d4e4:	60b9      	str	r1, [r7, #8]
 800d4e6:	4613      	mov	r3, r2
 800d4e8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4ea:	88fb      	ldrh	r3, [r7, #6]
 800d4ec:	68ba      	ldr	r2, [r7, #8]
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f002 f849 	bl	800f588 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4f6:	2300      	movs	r3, #0
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3710      	adds	r7, #16
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2204      	movs	r2, #4
 800d50c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d510:	2300      	movs	r3, #0
 800d512:	2200      	movs	r2, #0
 800d514:	2100      	movs	r1, #0
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f002 f813 	bl	800f542 <USBD_LL_Transmit>

  return USBD_OK;
 800d51c:	2300      	movs	r3, #0
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3708      	adds	r7, #8
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800d526:	b580      	push	{r7, lr}
 800d528:	b082      	sub	sp, #8
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2205      	movs	r2, #5
 800d532:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d536:	2300      	movs	r3, #0
 800d538:	2200      	movs	r2, #0
 800d53a:	2100      	movs	r1, #0
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f002 f823 	bl	800f588 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d542:	2300      	movs	r3, #0
}
 800d544:	4618      	mov	r0, r3
 800d546:	3708      	adds	r7, #8
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b087      	sub	sp, #28
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	4613      	mov	r3, r2
 800d558:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d55a:	2301      	movs	r3, #1
 800d55c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d55e:	2300      	movs	r3, #0
 800d560:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d562:	4b1f      	ldr	r3, [pc, #124]	; (800d5e0 <FATFS_LinkDriverEx+0x94>)
 800d564:	7a5b      	ldrb	r3, [r3, #9]
 800d566:	b2db      	uxtb	r3, r3
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d131      	bne.n	800d5d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d56c:	4b1c      	ldr	r3, [pc, #112]	; (800d5e0 <FATFS_LinkDriverEx+0x94>)
 800d56e:	7a5b      	ldrb	r3, [r3, #9]
 800d570:	b2db      	uxtb	r3, r3
 800d572:	461a      	mov	r2, r3
 800d574:	4b1a      	ldr	r3, [pc, #104]	; (800d5e0 <FATFS_LinkDriverEx+0x94>)
 800d576:	2100      	movs	r1, #0
 800d578:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d57a:	4b19      	ldr	r3, [pc, #100]	; (800d5e0 <FATFS_LinkDriverEx+0x94>)
 800d57c:	7a5b      	ldrb	r3, [r3, #9]
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	4a17      	ldr	r2, [pc, #92]	; (800d5e0 <FATFS_LinkDriverEx+0x94>)
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	4413      	add	r3, r2
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d58a:	4b15      	ldr	r3, [pc, #84]	; (800d5e0 <FATFS_LinkDriverEx+0x94>)
 800d58c:	7a5b      	ldrb	r3, [r3, #9]
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	461a      	mov	r2, r3
 800d592:	4b13      	ldr	r3, [pc, #76]	; (800d5e0 <FATFS_LinkDriverEx+0x94>)
 800d594:	4413      	add	r3, r2
 800d596:	79fa      	ldrb	r2, [r7, #7]
 800d598:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d59a:	4b11      	ldr	r3, [pc, #68]	; (800d5e0 <FATFS_LinkDriverEx+0x94>)
 800d59c:	7a5b      	ldrb	r3, [r3, #9]
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	1c5a      	adds	r2, r3, #1
 800d5a2:	b2d1      	uxtb	r1, r2
 800d5a4:	4a0e      	ldr	r2, [pc, #56]	; (800d5e0 <FATFS_LinkDriverEx+0x94>)
 800d5a6:	7251      	strb	r1, [r2, #9]
 800d5a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d5aa:	7dbb      	ldrb	r3, [r7, #22]
 800d5ac:	3330      	adds	r3, #48	; 0x30
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	223a      	movs	r2, #58	; 0x3a
 800d5ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	3302      	adds	r3, #2
 800d5c0:	222f      	movs	r2, #47	; 0x2f
 800d5c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	3303      	adds	r3, #3
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d5d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	371c      	adds	r7, #28
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr
 800d5de:	bf00      	nop
 800d5e0:	200005b8 	.word	0x200005b8

0800d5e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	6839      	ldr	r1, [r7, #0]
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f7ff ffaa 	bl	800d54c <FATFS_LinkDriverEx>
 800d5f8:	4603      	mov	r3, r0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
	...

0800d604 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d60a:	2300      	movs	r3, #0
 800d60c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d60e:	f000 f896 	bl	800d73e <BSP_SD_IsDetected>
 800d612:	4603      	mov	r3, r0
 800d614:	2b01      	cmp	r3, #1
 800d616:	d001      	beq.n	800d61c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d618:	2301      	movs	r3, #1
 800d61a:	e012      	b.n	800d642 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d61c:	480b      	ldr	r0, [pc, #44]	; (800d64c <BSP_SD_Init+0x48>)
 800d61e:	f7f9 ff2c 	bl	800747a <HAL_SD_Init>
 800d622:	4603      	mov	r3, r0
 800d624:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d626:	79fb      	ldrb	r3, [r7, #7]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d109      	bne.n	800d640 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d62c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d630:	4806      	ldr	r0, [pc, #24]	; (800d64c <BSP_SD_Init+0x48>)
 800d632:	f7fa fd06 	bl	8008042 <HAL_SD_ConfigWideBusOperation>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d001      	beq.n	800d640 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d63c:	2301      	movs	r3, #1
 800d63e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d640:	79fb      	ldrb	r3, [r7, #7]
}
 800d642:	4618      	mov	r0, r3
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop
 800d64c:	20006770 	.word	0x20006770

0800d650 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b086      	sub	sp, #24
 800d654:	af00      	add	r7, sp, #0
 800d656:	60f8      	str	r0, [r7, #12]
 800d658:	60b9      	str	r1, [r7, #8]
 800d65a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d65c:	2300      	movs	r3, #0
 800d65e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	68ba      	ldr	r2, [r7, #8]
 800d664:	68f9      	ldr	r1, [r7, #12]
 800d666:	4806      	ldr	r0, [pc, #24]	; (800d680 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d668:	f7f9 ff8e 	bl	8007588 <HAL_SD_ReadBlocks_DMA>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d001      	beq.n	800d676 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d672:	2301      	movs	r3, #1
 800d674:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800d676:	7dfb      	ldrb	r3, [r7, #23]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3718      	adds	r7, #24
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	20006770 	.word	0x20006770

0800d684 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b086      	sub	sp, #24
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d690:	2300      	movs	r3, #0
 800d692:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	68ba      	ldr	r2, [r7, #8]
 800d698:	68f9      	ldr	r1, [r7, #12]
 800d69a:	4806      	ldr	r0, [pc, #24]	; (800d6b4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d69c:	f7fa f840 	bl	8007720 <HAL_SD_WriteBlocks_DMA>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d001      	beq.n	800d6aa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800d6aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3718      	adds	r7, #24
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	20006770 	.word	0x20006770

0800d6b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d6bc:	4805      	ldr	r0, [pc, #20]	; (800d6d4 <BSP_SD_GetCardState+0x1c>)
 800d6be:	f7fa fd3c 	bl	800813a <HAL_SD_GetCardState>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	2b04      	cmp	r3, #4
 800d6c6:	bf14      	ite	ne
 800d6c8:	2301      	movne	r3, #1
 800d6ca:	2300      	moveq	r3, #0
 800d6cc:	b2db      	uxtb	r3, r3
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop
 800d6d4:	20006770 	.word	0x20006770

0800d6d8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d6e0:	6879      	ldr	r1, [r7, #4]
 800d6e2:	4803      	ldr	r0, [pc, #12]	; (800d6f0 <BSP_SD_GetCardInfo+0x18>)
 800d6e4:	f7fa fc81 	bl	8007fea <HAL_SD_GetCardInfo>
}
 800d6e8:	bf00      	nop
 800d6ea:	3708      	adds	r7, #8
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	20006770 	.word	0x20006770

0800d6f4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d6fc:	f000 f818 	bl	800d730 <BSP_SD_AbortCallback>
}
 800d700:	bf00      	nop
 800d702:	3708      	adds	r7, #8
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d710:	f000 ffda 	bl	800e6c8 <BSP_SD_WriteCpltCallback>
}
 800d714:	bf00      	nop
 800d716:	3708      	adds	r7, #8
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d724:	f000 ffdc 	bl	800e6e0 <BSP_SD_ReadCpltCallback>
}
 800d728:	bf00      	nop
 800d72a:	3708      	adds	r7, #8
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}

0800d730 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d730:	b480      	push	{r7}
 800d732:	af00      	add	r7, sp, #0

}
 800d734:	bf00      	nop
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr

0800d73e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800d73e:	b580      	push	{r7, lr}
 800d740:	b082      	sub	sp, #8
 800d742:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d744:	2301      	movs	r3, #1
 800d746:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800d748:	f000 f81e 	bl	800d788 <BSP_PlatformIsDetected>
 800d74c:	4603      	mov	r3, r0
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d101      	bne.n	800d756 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d752:	2300      	movs	r3, #0
 800d754:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d756:	79fb      	ldrb	r3, [r7, #7]
 800d758:	b2db      	uxtb	r3, r3
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3708      	adds	r7, #8
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
	...

0800d764 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800d764:	b580      	push	{r7, lr}
 800d766:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d768:	4904      	ldr	r1, [pc, #16]	; (800d77c <MX_FATFS_Init+0x18>)
 800d76a:	4805      	ldr	r0, [pc, #20]	; (800d780 <MX_FATFS_Init+0x1c>)
 800d76c:	f7ff ff3a 	bl	800d5e4 <FATFS_LinkDriver>
 800d770:	4603      	mov	r3, r0
 800d772:	461a      	mov	r2, r3
 800d774:	4b03      	ldr	r3, [pc, #12]	; (800d784 <MX_FATFS_Init+0x20>)
 800d776:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800d778:	bf00      	nop
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	20004514 	.word	0x20004514
 800d780:	080150b0 	.word	0x080150b0
 800d784:	20004510 	.word	0x20004510

0800d788 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d78e:	2301      	movs	r3, #1
 800d790:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d792:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d796:	4806      	ldr	r0, [pc, #24]	; (800d7b0 <BSP_PlatformIsDetected+0x28>)
 800d798:	f7f6 ff62 	bl	8004660 <HAL_GPIO_ReadPin>
 800d79c:	4603      	mov	r3, r0
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d001      	beq.n	800d7a6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800d7a6:	79fb      	ldrb	r3, [r7, #7]
}  
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	40020000 	.word	0x40020000

0800d7b4 <micros>:
 800d7b4:	b480      	push	{r7}
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7be:	4618      	mov	r0, r3
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <millis>:
static inline uint32_t millis(void) { return (uint32_t)(TIM2->CNT) / 1000; }
 800d7c8:	b480      	push	{r7}
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7d2:	4a04      	ldr	r2, [pc, #16]	; (800d7e4 <millis+0x1c>)
 800d7d4:	fba2 2303 	umull	r2, r3, r2, r3
 800d7d8:	099b      	lsrs	r3, r3, #6
 800d7da:	4618      	mov	r0, r3
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr
 800d7e4:	10624dd3 	.word	0x10624dd3

0800d7e8 <println>:
{
 800d7e8:	b40f      	push	{r0, r1, r2, r3}
 800d7ea:	b580      	push	{r7, lr}
 800d7ec:	b084      	sub	sp, #16
 800d7ee:	af00      	add	r7, sp, #0
	if (usbPresent)
 800d7f0:	4b2a      	ldr	r3, [pc, #168]	; (800d89c <println+0xb4>)
 800d7f2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d7f6:	2b03      	cmp	r3, #3
 800d7f8:	d147      	bne.n	800d88a <println+0xa2>
		writePin(LEDD, HIGH);
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d800:	4827      	ldr	r0, [pc, #156]	; (800d8a0 <println+0xb8>)
 800d802:	f7f6 ff45 	bl	8004690 <HAL_GPIO_WritePin>
		va_start(argptr, format);
 800d806:	f107 031c 	add.w	r3, r7, #28
 800d80a:	607b      	str	r3, [r7, #4]
		printLen = vsprintf(printBuffer, format, argptr);
 800d80c:	687a      	ldr	r2, [r7, #4]
 800d80e:	69b9      	ldr	r1, [r7, #24]
 800d810:	4824      	ldr	r0, [pc, #144]	; (800d8a4 <println+0xbc>)
 800d812:	f003 fe95 	bl	8011540 <vsiprintf>
 800d816:	4603      	mov	r3, r0
 800d818:	461a      	mov	r2, r3
 800d81a:	4b23      	ldr	r3, [pc, #140]	; (800d8a8 <println+0xc0>)
 800d81c:	601a      	str	r2, [r3, #0]
		printBuffer[printLen] = '\r';
 800d81e:	4b22      	ldr	r3, [pc, #136]	; (800d8a8 <println+0xc0>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	4a20      	ldr	r2, [pc, #128]	; (800d8a4 <println+0xbc>)
 800d824:	210d      	movs	r1, #13
 800d826:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 1] = '\n';
 800d828:	4b1f      	ldr	r3, [pc, #124]	; (800d8a8 <println+0xc0>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	3301      	adds	r3, #1
 800d82e:	4a1d      	ldr	r2, [pc, #116]	; (800d8a4 <println+0xbc>)
 800d830:	210a      	movs	r1, #10
 800d832:	54d1      	strb	r1, [r2, r3]
		printBuffer[printLen + 2] = '\0';
 800d834:	4b1c      	ldr	r3, [pc, #112]	; (800d8a8 <println+0xc0>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	3302      	adds	r3, #2
 800d83a:	4a1a      	ldr	r2, [pc, #104]	; (800d8a4 <println+0xbc>)
 800d83c:	2100      	movs	r1, #0
 800d83e:	54d1      	strb	r1, [r2, r3]
		printLen += 3;
 800d840:	4b19      	ldr	r3, [pc, #100]	; (800d8a8 <println+0xc0>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	3303      	adds	r3, #3
 800d846:	4a18      	ldr	r2, [pc, #96]	; (800d8a8 <println+0xc0>)
 800d848:	6013      	str	r3, [r2, #0]
		uint32_t printStart = micros();
 800d84a:	f7ff ffb3 	bl	800d7b4 <micros>
 800d84e:	60f8      	str	r0, [r7, #12]
		uint32_t timeout = 10 * printLen + 70;
 800d850:	4b15      	ldr	r3, [pc, #84]	; (800d8a8 <println+0xc0>)
 800d852:	681a      	ldr	r2, [r3, #0]
 800d854:	4613      	mov	r3, r2
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	4413      	add	r3, r2
 800d85a:	005b      	lsls	r3, r3, #1
 800d85c:	3346      	adds	r3, #70	; 0x46
 800d85e:	60bb      	str	r3, [r7, #8]
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 800d860:	e001      	b.n	800d866 <println+0x7e>
			if (micros() - printStart > timeout && false)
 800d862:	f7ff ffa7 	bl	800d7b4 <micros>
		while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY)
 800d866:	4b10      	ldr	r3, [pc, #64]	; (800d8a8 <println+0xc0>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	4619      	mov	r1, r3
 800d86e:	480d      	ldr	r0, [pc, #52]	; (800d8a4 <println+0xbc>)
 800d870:	f001 fbc6 	bl	800f000 <CDC_Transmit_FS>
 800d874:	4603      	mov	r3, r0
 800d876:	2b01      	cmp	r3, #1
 800d878:	d0f3      	beq.n	800d862 <println+0x7a>
		writePin(LEDD, LOW);
 800d87a:	2200      	movs	r2, #0
 800d87c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d880:	4807      	ldr	r0, [pc, #28]	; (800d8a0 <println+0xb8>)
 800d882:	f7f6 ff05 	bl	8004690 <HAL_GPIO_WritePin>
		return true;
 800d886:	2301      	movs	r3, #1
 800d888:	e000      	b.n	800d88c <println+0xa4>
	return false;
 800d88a:	2300      	movs	r3, #0
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3710      	adds	r7, #16
 800d890:	46bd      	mov	sp, r7
 800d892:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d896:	b004      	add	sp, #16
 800d898:	4770      	bx	lr
 800d89a:	bf00      	nop
 800d89c:	200009dc 	.word	0x200009dc
 800d8a0:	40020400 	.word	0x40020400
 800d8a4:	200005c8 	.word	0x200005c8
 800d8a8:	200005c4 	.word	0x200005c4

0800d8ac <imuTest_printData>:

MPU9250 mpu;
uint32_t lastPrint;

static void imuTest_printData(void)
{
 800d8ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d8b0:	b084      	sub	sp, #16
 800d8b2:	af04      	add	r7, sp, #16
	if (millis() - lastPrint > 20)
 800d8b4:	f7ff ff88 	bl	800d7c8 <millis>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	4b17      	ldr	r3, [pc, #92]	; (800d918 <imuTest_printData+0x6c>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	1ad3      	subs	r3, r2, r3
 800d8c0:	2b14      	cmp	r3, #20
 800d8c2:	d925      	bls.n	800d910 <imuTest_printData+0x64>
	{
		println("[MPU] Data");
 800d8c4:	4815      	ldr	r0, [pc, #84]	; (800d91c <imuTest_printData+0x70>)
 800d8c6:	f7ff ff8f 	bl	800d7e8 <println>
		#if IMUTEST_PRINT_QUAT
		println("Q[%f, %f, %f, %f]", mpu.q[0], mpu.q[1], mpu.q[2], mpu.q[3]);
		#endif

		#if IMUTEST_PRINT_EULER
		println("Y %f P %f R %f", mpu.yaw, mpu.pitch, mpu.roll);
 800d8ca:	4b15      	ldr	r3, [pc, #84]	; (800d920 <imuTest_printData+0x74>)
 800d8cc:	68db      	ldr	r3, [r3, #12]
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7f2 fe3a 	bl	8000548 <__aeabi_f2d>
 800d8d4:	4680      	mov	r8, r0
 800d8d6:	4689      	mov	r9, r1
 800d8d8:	4b11      	ldr	r3, [pc, #68]	; (800d920 <imuTest_printData+0x74>)
 800d8da:	691b      	ldr	r3, [r3, #16]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7f2 fe33 	bl	8000548 <__aeabi_f2d>
 800d8e2:	4604      	mov	r4, r0
 800d8e4:	460d      	mov	r5, r1
 800d8e6:	4b0e      	ldr	r3, [pc, #56]	; (800d920 <imuTest_printData+0x74>)
 800d8e8:	695b      	ldr	r3, [r3, #20]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7f2 fe2c 	bl	8000548 <__aeabi_f2d>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	460b      	mov	r3, r1
 800d8f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d8f8:	e9cd 4500 	strd	r4, r5, [sp]
 800d8fc:	4642      	mov	r2, r8
 800d8fe:	464b      	mov	r3, r9
 800d900:	4808      	ldr	r0, [pc, #32]	; (800d924 <imuTest_printData+0x78>)
 800d902:	f7ff ff71 	bl	800d7e8 <println>

		#if IMUTEST_3DPLOT
		println("w%fwa%fab%fbc%fc", mpu.q[0], mpu.q[1], mpu.q[2], mpu.q[3]);
		#endif

		lastPrint = millis();
 800d906:	f7ff ff5f 	bl	800d7c8 <millis>
 800d90a:	4602      	mov	r2, r0
 800d90c:	4b02      	ldr	r3, [pc, #8]	; (800d918 <imuTest_printData+0x6c>)
 800d90e:	601a      	str	r2, [r3, #0]
	}
}
 800d910:	bf00      	nop
 800d912:	46bd      	mov	sp, r7
 800d914:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d918:	200040f4 	.word	0x200040f4
 800d91c:	08014f84 	.word	0x08014f84
 800d920:	20004024 	.word	0x20004024
 800d924:	08014f90 	.word	0x08014f90

0800d928 <imuTest_begin>:

static bool imuTest_begin(void)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	af00      	add	r7, sp, #0
	mpu.i2c = Get_I2C1_Instance();
 800d92c:	f000 fcae 	bl	800e28c <Get_I2C1_Instance>
 800d930:	4602      	mov	r2, r0
 800d932:	4b13      	ldr	r3, [pc, #76]	; (800d980 <imuTest_begin+0x58>)
 800d934:	601a      	str	r2, [r3, #0]
	mpu.i2c_addr = MPU9250_I2C_ADDRESS;
 800d936:	4b12      	ldr	r3, [pc, #72]	; (800d980 <imuTest_begin+0x58>)
 800d938:	22d2      	movs	r2, #210	; 0xd2
 800d93a:	711a      	strb	r2, [r3, #4]
	mpu.i2c_addr_ak = AK8963_I2C_ADDRESS;
 800d93c:	4b10      	ldr	r3, [pc, #64]	; (800d980 <imuTest_begin+0x58>)
 800d93e:	2218      	movs	r2, #24
 800d940:	715a      	strb	r2, [r3, #5]

	writePin(LEDB, HIGH);
 800d942:	2201      	movs	r2, #1
 800d944:	2140      	movs	r1, #64	; 0x40
 800d946:	480f      	ldr	r0, [pc, #60]	; (800d984 <imuTest_begin+0x5c>)
 800d948:	f7f6 fea2 	bl	8004690 <HAL_GPIO_WritePin>
	MPU9250_init(&mpu, &mpu9250_default_config);
 800d94c:	490e      	ldr	r1, [pc, #56]	; (800d988 <imuTest_begin+0x60>)
 800d94e:	480c      	ldr	r0, [pc, #48]	; (800d980 <imuTest_begin+0x58>)
 800d950:	f7f3 fe16 	bl	8001580 <MPU9250_init>
	writePin(LEDB, LOW);
 800d954:	2200      	movs	r2, #0
 800d956:	2140      	movs	r1, #64	; 0x40
 800d958:	480a      	ldr	r0, [pc, #40]	; (800d984 <imuTest_begin+0x5c>)
 800d95a:	f7f6 fe99 	bl	8004690 <HAL_GPIO_WritePin>
	writePin(LEDA, HIGH);
 800d95e:	2201      	movs	r2, #1
 800d960:	2180      	movs	r1, #128	; 0x80
 800d962:	4808      	ldr	r0, [pc, #32]	; (800d984 <imuTest_begin+0x5c>)
 800d964:	f7f6 fe94 	bl	8004690 <HAL_GPIO_WritePin>
	AK8963_init(&mpu, &mpu9250_default_config);
 800d968:	4907      	ldr	r1, [pc, #28]	; (800d988 <imuTest_begin+0x60>)
 800d96a:	4805      	ldr	r0, [pc, #20]	; (800d980 <imuTest_begin+0x58>)
 800d96c:	f7f3 ff44 	bl	80017f8 <AK8963_init>
	writePin(LEDA, LOW);
 800d970:	2200      	movs	r2, #0
 800d972:	2180      	movs	r1, #128	; 0x80
 800d974:	4803      	ldr	r0, [pc, #12]	; (800d984 <imuTest_begin+0x5c>)
 800d976:	f7f6 fe8b 	bl	8004690 <HAL_GPIO_WritePin>
	return false;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	20004024 	.word	0x20004024
 800d984:	40020800 	.word	0x40020800
 800d988:	20000118 	.word	0x20000118

0800d98c <imuTest_loop>:
static bool imuTest_loop(void)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	af00      	add	r7, sp, #0
	if (MPU9250_update(&mpu))
 800d990:	4814      	ldr	r0, [pc, #80]	; (800d9e4 <imuTest_loop+0x58>)
 800d992:	f7f3 ffd7 	bl	8001944 <MPU9250_update>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d020      	beq.n	800d9de <imuTest_loop+0x52>
	{
		imuTest_printData();
 800d99c:	f7ff ff86 	bl	800d8ac <imuTest_printData>
		if (mpu.yaw >= 178.0 && mpu.yaw <= 182.0) writePin(LEDA, HIGH);
 800d9a0:	4b10      	ldr	r3, [pc, #64]	; (800d9e4 <imuTest_loop+0x58>)
 800d9a2:	edd3 7a03 	vldr	s15, [r3, #12]
 800d9a6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800d9e8 <imuTest_loop+0x5c>
 800d9aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d9ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9b2:	db0f      	blt.n	800d9d4 <imuTest_loop+0x48>
 800d9b4:	4b0b      	ldr	r3, [pc, #44]	; (800d9e4 <imuTest_loop+0x58>)
 800d9b6:	edd3 7a03 	vldr	s15, [r3, #12]
 800d9ba:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d9ec <imuTest_loop+0x60>
 800d9be:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c6:	d805      	bhi.n	800d9d4 <imuTest_loop+0x48>
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	2180      	movs	r1, #128	; 0x80
 800d9cc:	4808      	ldr	r0, [pc, #32]	; (800d9f0 <imuTest_loop+0x64>)
 800d9ce:	f7f6 fe5f 	bl	8004690 <HAL_GPIO_WritePin>
 800d9d2:	e004      	b.n	800d9de <imuTest_loop+0x52>
		else writePin(LEDA, LOW);
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	2180      	movs	r1, #128	; 0x80
 800d9d8:	4805      	ldr	r0, [pc, #20]	; (800d9f0 <imuTest_loop+0x64>)
 800d9da:	f7f6 fe59 	bl	8004690 <HAL_GPIO_WritePin>
	}
}
 800d9de:	bf00      	nop
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	20004024 	.word	0x20004024
 800d9e8:	43320000 	.word	0x43320000
 800d9ec:	43360000 	.word	0x43360000
 800d9f0:	40020800 	.word	0x40020800

0800d9f4 <setup>:
*/

#include "Scripts/Peripherials/imuTest.c"

static void setup(void)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	af00      	add	r7, sp, #0
	writePin(LEDD, HIGH);	while (readPin(BTN_USR) == HIGH);	writePin(LEDD, LOW);
 800d9f8:	2201      	movs	r2, #1
 800d9fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d9fe:	480c      	ldr	r0, [pc, #48]	; (800da30 <setup+0x3c>)
 800da00:	f7f6 fe46 	bl	8004690 <HAL_GPIO_WritePin>
 800da04:	bf00      	nop
 800da06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800da0a:	480a      	ldr	r0, [pc, #40]	; (800da34 <setup+0x40>)
 800da0c:	f7f6 fe28 	bl	8004660 <HAL_GPIO_ReadPin>
 800da10:	4603      	mov	r3, r0
 800da12:	2b01      	cmp	r3, #1
 800da14:	d0f7      	beq.n	800da06 <setup+0x12>
 800da16:	2200      	movs	r2, #0
 800da18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800da1c:	4804      	ldr	r0, [pc, #16]	; (800da30 <setup+0x3c>)
 800da1e:	f7f6 fe37 	bl	8004690 <HAL_GPIO_WritePin>
	println("Hello world");
 800da22:	4805      	ldr	r0, [pc, #20]	; (800da38 <setup+0x44>)
 800da24:	f7ff fee0 	bl	800d7e8 <println>
	
	imuTest_begin();
 800da28:	f7ff ff7e 	bl	800d928 <imuTest_begin>
}
 800da2c:	bf00      	nop
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	40020400 	.word	0x40020400
 800da34:	40020000 	.word	0x40020000
 800da38:	08015060 	.word	0x08015060

0800da3c <loop>:

static void loop(void)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	af00      	add	r7, sp, #0
	imuTest_loop();
 800da40:	f7ff ffa4 	bl	800d98c <imuTest_loop>
}
 800da44:	bf00      	nop
 800da46:	bd80      	pop	{r7, pc}

0800da48 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 800da48:	b480      	push	{r7}
 800da4a:	b083      	sub	sp, #12
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(huart, gps.uartBuffer, 1);
	//GPS_read(&gps);
}
 800da50:	bf00      	nop
 800da52:	370c      	adds	r7, #12
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr

0800da5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800da60:	f7f5 ff26 	bl	80038b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800da64:	f000 f862 	bl	800db2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800da68:	f000 fb32 	bl	800e0d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800da6c:	f000 fb08 	bl	800e080 <MX_DMA_Init>
  MX_I2C1_Init();
 800da70:	f000 f8de 	bl	800dc30 <MX_I2C1_Init>
  MX_RTC_Init();
 800da74:	f000 f90a 	bl	800dc8c <MX_RTC_Init>
  MX_SDIO_SD_Init();
 800da78:	f000 f92e 	bl	800dcd8 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800da7c:	f000 f94c 	bl	800dd18 <MX_SPI1_Init>
  MX_TIM2_Init();
 800da80:	f000 f980 	bl	800dd84 <MX_TIM2_Init>
  MX_TIM3_Init();
 800da84:	f000 f9cc 	bl	800de20 <MX_TIM3_Init>
  MX_TIM5_Init();
 800da88:	f000 fa4c 	bl	800df24 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 800da8c:	f000 face 	bl	800e02c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800da90:	f7ff fe68 	bl	800d764 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800da94:	f001 f9be 	bl	800ee14 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	// Start millisecond timer
	HAL_TIM_Base_Start(&htim2);
 800da98:	4820      	ldr	r0, [pc, #128]	; (800db1c <main+0xc0>)
 800da9a:	f7fb f85b 	bl	8008b54 <HAL_TIM_Base_Start>

	// Setup pins
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 800da9e:	2200      	movs	r2, #0
 800daa0:	2180      	movs	r1, #128	; 0x80
 800daa2:	481f      	ldr	r0, [pc, #124]	; (800db20 <main+0xc4>)
 800daa4:	f7f6 fdf4 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 800daa8:	2200      	movs	r2, #0
 800daaa:	2140      	movs	r1, #64	; 0x40
 800daac:	481c      	ldr	r0, [pc, #112]	; (800db20 <main+0xc4>)
 800daae:	f7f6 fdef 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 800dab2:	2200      	movs	r2, #0
 800dab4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800dab8:	481a      	ldr	r0, [pc, #104]	; (800db24 <main+0xc8>)
 800daba:	f7f6 fde9 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 800dabe:	2200      	movs	r2, #0
 800dac0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800dac4:	4817      	ldr	r0, [pc, #92]	; (800db24 <main+0xc8>)
 800dac6:	f7f6 fde3 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 800daca:	2200      	movs	r2, #0
 800dacc:	2101      	movs	r1, #1
 800dace:	4816      	ldr	r0, [pc, #88]	; (800db28 <main+0xcc>)
 800dad0:	f7f6 fdde 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 800dad4:	2200      	movs	r2, #0
 800dad6:	2104      	movs	r1, #4
 800dad8:	4813      	ldr	r0, [pc, #76]	; (800db28 <main+0xcc>)
 800dada:	f7f6 fdd9 	bl	8004690 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, GPIO_PIN_RESET);
 800dade:	2200      	movs	r2, #0
 800dae0:	2101      	movs	r1, #1
 800dae2:	480f      	ldr	r0, [pc, #60]	; (800db20 <main+0xc4>)
 800dae4:	f7f6 fdd4 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, GPIO_PIN_RESET);
 800dae8:	2200      	movs	r2, #0
 800daea:	2104      	movs	r1, #4
 800daec:	480c      	ldr	r0, [pc, #48]	; (800db20 <main+0xc4>)
 800daee:	f7f6 fdcf 	bl	8004690 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P3_GPIO_Port, P3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P4_GPIO_Port, P4_Pin, GPIO_PIN_RESET);
 800daf2:	2200      	movs	r2, #0
 800daf4:	2102      	movs	r1, #2
 800daf6:	480a      	ldr	r0, [pc, #40]	; (800db20 <main+0xc4>)
 800daf8:	f7f6 fdca 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P5_GPIO_Port, P5_Pin, GPIO_PIN_SET);
 800dafc:	2201      	movs	r2, #1
 800dafe:	2108      	movs	r1, #8
 800db00:	4807      	ldr	r0, [pc, #28]	; (800db20 <main+0xc4>)
 800db02:	f7f6 fdc5 	bl	8004690 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P6_GPIO_Port, P6_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 800db06:	2200      	movs	r2, #0
 800db08:	2110      	movs	r1, #16
 800db0a:	4807      	ldr	r0, [pc, #28]	; (800db28 <main+0xcc>)
 800db0c:	f7f6 fdc0 	bl	8004690 <HAL_GPIO_WritePin>

	// Execute code
	setup();
 800db10:	f7ff ff70 	bl	800d9f4 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Execute code
	  	loop();
 800db14:	f7ff ff92 	bl	800da3c <loop>
 800db18:	e7fc      	b.n	800db14 <main+0xb8>
 800db1a:	bf00      	nop
 800db1c:	2000684c 	.word	0x2000684c
 800db20:	40020800 	.word	0x40020800
 800db24:	40020400 	.word	0x40020400
 800db28:	40020000 	.word	0x40020000

0800db2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b098      	sub	sp, #96	; 0x60
 800db30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800db32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db36:	2230      	movs	r2, #48	; 0x30
 800db38:	2100      	movs	r1, #0
 800db3a:	4618      	mov	r0, r3
 800db3c:	f001 ff03 	bl	800f946 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800db40:	f107 031c 	add.w	r3, r7, #28
 800db44:	2200      	movs	r2, #0
 800db46:	601a      	str	r2, [r3, #0]
 800db48:	605a      	str	r2, [r3, #4]
 800db4a:	609a      	str	r2, [r3, #8]
 800db4c:	60da      	str	r2, [r3, #12]
 800db4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800db50:	f107 030c 	add.w	r3, r7, #12
 800db54:	2200      	movs	r2, #0
 800db56:	601a      	str	r2, [r3, #0]
 800db58:	605a      	str	r2, [r3, #4]
 800db5a:	609a      	str	r2, [r3, #8]
 800db5c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800db5e:	2300      	movs	r3, #0
 800db60:	60bb      	str	r3, [r7, #8]
 800db62:	4b31      	ldr	r3, [pc, #196]	; (800dc28 <SystemClock_Config+0xfc>)
 800db64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db66:	4a30      	ldr	r2, [pc, #192]	; (800dc28 <SystemClock_Config+0xfc>)
 800db68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db6c:	6413      	str	r3, [r2, #64]	; 0x40
 800db6e:	4b2e      	ldr	r3, [pc, #184]	; (800dc28 <SystemClock_Config+0xfc>)
 800db70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db76:	60bb      	str	r3, [r7, #8]
 800db78:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800db7a:	2300      	movs	r3, #0
 800db7c:	607b      	str	r3, [r7, #4]
 800db7e:	4b2b      	ldr	r3, [pc, #172]	; (800dc2c <SystemClock_Config+0x100>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4a2a      	ldr	r2, [pc, #168]	; (800dc2c <SystemClock_Config+0x100>)
 800db84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800db88:	6013      	str	r3, [r2, #0]
 800db8a:	4b28      	ldr	r3, [pc, #160]	; (800dc2c <SystemClock_Config+0x100>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db92:	607b      	str	r3, [r7, #4]
 800db94:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800db96:	2305      	movs	r3, #5
 800db98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800db9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800db9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800dba0:	2301      	movs	r3, #1
 800dba2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800dba4:	2302      	movs	r3, #2
 800dba6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800dba8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dbac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800dbae:	2306      	movs	r3, #6
 800dbb0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800dbb2:	23a8      	movs	r3, #168	; 0xa8
 800dbb4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800dbb6:	2302      	movs	r3, #2
 800dbb8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800dbba:	2307      	movs	r3, #7
 800dbbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800dbbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7f8 fe88 	bl	80068d8 <HAL_RCC_OscConfig>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d001      	beq.n	800dbd2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800dbce:	f000 fb67 	bl	800e2a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800dbd2:	230f      	movs	r3, #15
 800dbd4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800dbd6:	2302      	movs	r3, #2
 800dbd8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800dbde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800dbe2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800dbe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbe8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800dbea:	f107 031c 	add.w	r3, r7, #28
 800dbee:	2105      	movs	r1, #5
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7f9 f8b3 	bl	8006d5c <HAL_RCC_ClockConfig>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d001      	beq.n	800dc00 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800dbfc:	f000 fb50 	bl	800e2a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800dc00:	2302      	movs	r3, #2
 800dc02:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800dc04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc08:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dc0a:	f107 030c 	add.w	r3, r7, #12
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7f9 fa6c 	bl	80070ec <HAL_RCCEx_PeriphCLKConfig>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d001      	beq.n	800dc1e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800dc1a:	f000 fb41 	bl	800e2a0 <Error_Handler>
  }
}
 800dc1e:	bf00      	nop
 800dc20:	3760      	adds	r7, #96	; 0x60
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	40023800 	.word	0x40023800
 800dc2c:	40007000 	.word	0x40007000

0800dc30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800dc34:	4b12      	ldr	r3, [pc, #72]	; (800dc80 <MX_I2C1_Init+0x50>)
 800dc36:	4a13      	ldr	r2, [pc, #76]	; (800dc84 <MX_I2C1_Init+0x54>)
 800dc38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800dc3a:	4b11      	ldr	r3, [pc, #68]	; (800dc80 <MX_I2C1_Init+0x50>)
 800dc3c:	4a12      	ldr	r2, [pc, #72]	; (800dc88 <MX_I2C1_Init+0x58>)
 800dc3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800dc40:	4b0f      	ldr	r3, [pc, #60]	; (800dc80 <MX_I2C1_Init+0x50>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800dc46:	4b0e      	ldr	r3, [pc, #56]	; (800dc80 <MX_I2C1_Init+0x50>)
 800dc48:	2200      	movs	r2, #0
 800dc4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800dc4c:	4b0c      	ldr	r3, [pc, #48]	; (800dc80 <MX_I2C1_Init+0x50>)
 800dc4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800dc52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800dc54:	4b0a      	ldr	r3, [pc, #40]	; (800dc80 <MX_I2C1_Init+0x50>)
 800dc56:	2200      	movs	r2, #0
 800dc58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800dc5a:	4b09      	ldr	r3, [pc, #36]	; (800dc80 <MX_I2C1_Init+0x50>)
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800dc60:	4b07      	ldr	r3, [pc, #28]	; (800dc80 <MX_I2C1_Init+0x50>)
 800dc62:	2200      	movs	r2, #0
 800dc64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800dc66:	4b06      	ldr	r3, [pc, #24]	; (800dc80 <MX_I2C1_Init+0x50>)
 800dc68:	2200      	movs	r2, #0
 800dc6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800dc6c:	4804      	ldr	r0, [pc, #16]	; (800dc80 <MX_I2C1_Init+0x50>)
 800dc6e:	f7f6 fd29 	bl	80046c4 <HAL_I2C_Init>
 800dc72:	4603      	mov	r3, r0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d001      	beq.n	800dc7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800dc78:	f000 fb12 	bl	800e2a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800dc7c:	bf00      	nop
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	2000661c 	.word	0x2000661c
 800dc84:	40005400 	.word	0x40005400
 800dc88:	00061a80 	.word	0x00061a80

0800dc8c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800dc90:	4b0f      	ldr	r3, [pc, #60]	; (800dcd0 <MX_RTC_Init+0x44>)
 800dc92:	4a10      	ldr	r2, [pc, #64]	; (800dcd4 <MX_RTC_Init+0x48>)
 800dc94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800dc96:	4b0e      	ldr	r3, [pc, #56]	; (800dcd0 <MX_RTC_Init+0x44>)
 800dc98:	2200      	movs	r2, #0
 800dc9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800dc9c:	4b0c      	ldr	r3, [pc, #48]	; (800dcd0 <MX_RTC_Init+0x44>)
 800dc9e:	227f      	movs	r2, #127	; 0x7f
 800dca0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800dca2:	4b0b      	ldr	r3, [pc, #44]	; (800dcd0 <MX_RTC_Init+0x44>)
 800dca4:	22ff      	movs	r2, #255	; 0xff
 800dca6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800dca8:	4b09      	ldr	r3, [pc, #36]	; (800dcd0 <MX_RTC_Init+0x44>)
 800dcaa:	2200      	movs	r2, #0
 800dcac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800dcae:	4b08      	ldr	r3, [pc, #32]	; (800dcd0 <MX_RTC_Init+0x44>)
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800dcb4:	4b06      	ldr	r3, [pc, #24]	; (800dcd0 <MX_RTC_Init+0x44>)
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800dcba:	4805      	ldr	r0, [pc, #20]	; (800dcd0 <MX_RTC_Init+0x44>)
 800dcbc:	f7f9 faf8 	bl	80072b0 <HAL_RTC_Init>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d001      	beq.n	800dcca <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800dcc6:	f000 faeb 	bl	800e2a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800dcca:	bf00      	nop
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	200066f0 	.word	0x200066f0
 800dcd4:	40002800 	.word	0x40002800

0800dcd8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800dcdc:	4b0c      	ldr	r3, [pc, #48]	; (800dd10 <MX_SDIO_SD_Init+0x38>)
 800dcde:	4a0d      	ldr	r2, [pc, #52]	; (800dd14 <MX_SDIO_SD_Init+0x3c>)
 800dce0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800dce2:	4b0b      	ldr	r3, [pc, #44]	; (800dd10 <MX_SDIO_SD_Init+0x38>)
 800dce4:	2200      	movs	r2, #0
 800dce6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800dce8:	4b09      	ldr	r3, [pc, #36]	; (800dd10 <MX_SDIO_SD_Init+0x38>)
 800dcea:	2200      	movs	r2, #0
 800dcec:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800dcee:	4b08      	ldr	r3, [pc, #32]	; (800dd10 <MX_SDIO_SD_Init+0x38>)
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800dcf4:	4b06      	ldr	r3, [pc, #24]	; (800dd10 <MX_SDIO_SD_Init+0x38>)
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800dcfa:	4b05      	ldr	r3, [pc, #20]	; (800dd10 <MX_SDIO_SD_Init+0x38>)
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800dd00:	4b03      	ldr	r3, [pc, #12]	; (800dd10 <MX_SDIO_SD_Init+0x38>)
 800dd02:	2200      	movs	r2, #0
 800dd04:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800dd06:	bf00      	nop
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr
 800dd10:	20006770 	.word	0x20006770
 800dd14:	40012c00 	.word	0x40012c00

0800dd18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800dd1c:	4b17      	ldr	r3, [pc, #92]	; (800dd7c <MX_SPI1_Init+0x64>)
 800dd1e:	4a18      	ldr	r2, [pc, #96]	; (800dd80 <MX_SPI1_Init+0x68>)
 800dd20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800dd22:	4b16      	ldr	r3, [pc, #88]	; (800dd7c <MX_SPI1_Init+0x64>)
 800dd24:	f44f 7282 	mov.w	r2, #260	; 0x104
 800dd28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800dd2a:	4b14      	ldr	r3, [pc, #80]	; (800dd7c <MX_SPI1_Init+0x64>)
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800dd30:	4b12      	ldr	r3, [pc, #72]	; (800dd7c <MX_SPI1_Init+0x64>)
 800dd32:	2200      	movs	r2, #0
 800dd34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800dd36:	4b11      	ldr	r3, [pc, #68]	; (800dd7c <MX_SPI1_Init+0x64>)
 800dd38:	2200      	movs	r2, #0
 800dd3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800dd3c:	4b0f      	ldr	r3, [pc, #60]	; (800dd7c <MX_SPI1_Init+0x64>)
 800dd3e:	2200      	movs	r2, #0
 800dd40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800dd42:	4b0e      	ldr	r3, [pc, #56]	; (800dd7c <MX_SPI1_Init+0x64>)
 800dd44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800dd4a:	4b0c      	ldr	r3, [pc, #48]	; (800dd7c <MX_SPI1_Init+0x64>)
 800dd4c:	2218      	movs	r2, #24
 800dd4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800dd50:	4b0a      	ldr	r3, [pc, #40]	; (800dd7c <MX_SPI1_Init+0x64>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800dd56:	4b09      	ldr	r3, [pc, #36]	; (800dd7c <MX_SPI1_Init+0x64>)
 800dd58:	2200      	movs	r2, #0
 800dd5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd5c:	4b07      	ldr	r3, [pc, #28]	; (800dd7c <MX_SPI1_Init+0x64>)
 800dd5e:	2200      	movs	r2, #0
 800dd60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800dd62:	4b06      	ldr	r3, [pc, #24]	; (800dd7c <MX_SPI1_Init+0x64>)
 800dd64:	220a      	movs	r2, #10
 800dd66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800dd68:	4804      	ldr	r0, [pc, #16]	; (800dd7c <MX_SPI1_Init+0x64>)
 800dd6a:	f7fa fe64 	bl	8008a36 <HAL_SPI_Init>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d001      	beq.n	800dd78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800dd74:	f000 fa94 	bl	800e2a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800dd78:	bf00      	nop
 800dd7a:	bd80      	pop	{r7, pc}
 800dd7c:	200067f4 	.word	0x200067f4
 800dd80:	40013000 	.word	0x40013000

0800dd84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b086      	sub	sp, #24
 800dd88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dd8a:	f107 0308 	add.w	r3, r7, #8
 800dd8e:	2200      	movs	r2, #0
 800dd90:	601a      	str	r2, [r3, #0]
 800dd92:	605a      	str	r2, [r3, #4]
 800dd94:	609a      	str	r2, [r3, #8]
 800dd96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dd98:	463b      	mov	r3, r7
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	601a      	str	r2, [r3, #0]
 800dd9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800dda0:	4b1d      	ldr	r3, [pc, #116]	; (800de18 <MX_TIM2_Init+0x94>)
 800dda2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800dda6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800dda8:	4b1b      	ldr	r3, [pc, #108]	; (800de18 <MX_TIM2_Init+0x94>)
 800ddaa:	2253      	movs	r2, #83	; 0x53
 800ddac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ddae:	4b1a      	ldr	r3, [pc, #104]	; (800de18 <MX_TIM2_Init+0x94>)
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200000000;
 800ddb4:	4b18      	ldr	r3, [pc, #96]	; (800de18 <MX_TIM2_Init+0x94>)
 800ddb6:	4a19      	ldr	r2, [pc, #100]	; (800de1c <MX_TIM2_Init+0x98>)
 800ddb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ddba:	4b17      	ldr	r3, [pc, #92]	; (800de18 <MX_TIM2_Init+0x94>)
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ddc0:	4b15      	ldr	r3, [pc, #84]	; (800de18 <MX_TIM2_Init+0x94>)
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800ddc6:	4814      	ldr	r0, [pc, #80]	; (800de18 <MX_TIM2_Init+0x94>)
 800ddc8:	f7fa fe99 	bl	8008afe <HAL_TIM_Base_Init>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d001      	beq.n	800ddd6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800ddd2:	f000 fa65 	bl	800e2a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ddd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800dddc:	f107 0308 	add.w	r3, r7, #8
 800dde0:	4619      	mov	r1, r3
 800dde2:	480d      	ldr	r0, [pc, #52]	; (800de18 <MX_TIM2_Init+0x94>)
 800dde4:	f7fa ffd6 	bl	8008d94 <HAL_TIM_ConfigClockSource>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d001      	beq.n	800ddf2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800ddee:	f000 fa57 	bl	800e2a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ddfa:	463b      	mov	r3, r7
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	4806      	ldr	r0, [pc, #24]	; (800de18 <MX_TIM2_Init+0x94>)
 800de00:	f7fb fb6a 	bl	80094d8 <HAL_TIMEx_MasterConfigSynchronization>
 800de04:	4603      	mov	r3, r0
 800de06:	2b00      	cmp	r3, #0
 800de08:	d001      	beq.n	800de0e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800de0a:	f000 fa49 	bl	800e2a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800de0e:	bf00      	nop
 800de10:	3718      	adds	r7, #24
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	2000684c 	.word	0x2000684c
 800de1c:	fa56ea00 	.word	0xfa56ea00

0800de20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b08e      	sub	sp, #56	; 0x38
 800de24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800de26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de2a:	2200      	movs	r2, #0
 800de2c:	601a      	str	r2, [r3, #0]
 800de2e:	605a      	str	r2, [r3, #4]
 800de30:	609a      	str	r2, [r3, #8]
 800de32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800de34:	f107 0320 	add.w	r3, r7, #32
 800de38:	2200      	movs	r2, #0
 800de3a:	601a      	str	r2, [r3, #0]
 800de3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800de3e:	1d3b      	adds	r3, r7, #4
 800de40:	2200      	movs	r2, #0
 800de42:	601a      	str	r2, [r3, #0]
 800de44:	605a      	str	r2, [r3, #4]
 800de46:	609a      	str	r2, [r3, #8]
 800de48:	60da      	str	r2, [r3, #12]
 800de4a:	611a      	str	r2, [r3, #16]
 800de4c:	615a      	str	r2, [r3, #20]
 800de4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800de50:	4b32      	ldr	r3, [pc, #200]	; (800df1c <MX_TIM3_Init+0xfc>)
 800de52:	4a33      	ldr	r2, [pc, #204]	; (800df20 <MX_TIM3_Init+0x100>)
 800de54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 800de56:	4b31      	ldr	r3, [pc, #196]	; (800df1c <MX_TIM3_Init+0xfc>)
 800de58:	22a7      	movs	r2, #167	; 0xa7
 800de5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de5c:	4b2f      	ldr	r3, [pc, #188]	; (800df1c <MX_TIM3_Init+0xfc>)
 800de5e:	2200      	movs	r2, #0
 800de60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800de62:	4b2e      	ldr	r3, [pc, #184]	; (800df1c <MX_TIM3_Init+0xfc>)
 800de64:	f242 7210 	movw	r2, #10000	; 0x2710
 800de68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800de6a:	4b2c      	ldr	r3, [pc, #176]	; (800df1c <MX_TIM3_Init+0xfc>)
 800de6c:	2200      	movs	r2, #0
 800de6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800de70:	4b2a      	ldr	r3, [pc, #168]	; (800df1c <MX_TIM3_Init+0xfc>)
 800de72:	2200      	movs	r2, #0
 800de74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800de76:	4829      	ldr	r0, [pc, #164]	; (800df1c <MX_TIM3_Init+0xfc>)
 800de78:	f7fa fe41 	bl	8008afe <HAL_TIM_Base_Init>
 800de7c:	4603      	mov	r3, r0
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d001      	beq.n	800de86 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800de82:	f000 fa0d 	bl	800e2a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800de86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800de8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800de90:	4619      	mov	r1, r3
 800de92:	4822      	ldr	r0, [pc, #136]	; (800df1c <MX_TIM3_Init+0xfc>)
 800de94:	f7fa ff7e 	bl	8008d94 <HAL_TIM_ConfigClockSource>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d001      	beq.n	800dea2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800de9e:	f000 f9ff 	bl	800e2a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800dea2:	481e      	ldr	r0, [pc, #120]	; (800df1c <MX_TIM3_Init+0xfc>)
 800dea4:	f7fa fe7a 	bl	8008b9c <HAL_TIM_PWM_Init>
 800dea8:	4603      	mov	r3, r0
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d001      	beq.n	800deb2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800deae:	f000 f9f7 	bl	800e2a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800deb2:	2300      	movs	r3, #0
 800deb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800deb6:	2300      	movs	r3, #0
 800deb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800deba:	f107 0320 	add.w	r3, r7, #32
 800debe:	4619      	mov	r1, r3
 800dec0:	4816      	ldr	r0, [pc, #88]	; (800df1c <MX_TIM3_Init+0xfc>)
 800dec2:	f7fb fb09 	bl	80094d8 <HAL_TIMEx_MasterConfigSynchronization>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d001      	beq.n	800ded0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800decc:	f000 f9e8 	bl	800e2a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ded0:	2360      	movs	r3, #96	; 0x60
 800ded2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800ded4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ded8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800deda:	2300      	movs	r3, #0
 800dedc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dede:	2300      	movs	r3, #0
 800dee0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800dee2:	1d3b      	adds	r3, r7, #4
 800dee4:	2208      	movs	r2, #8
 800dee6:	4619      	mov	r1, r3
 800dee8:	480c      	ldr	r0, [pc, #48]	; (800df1c <MX_TIM3_Init+0xfc>)
 800deea:	f7fa fe8d 	bl	8008c08 <HAL_TIM_PWM_ConfigChannel>
 800deee:	4603      	mov	r3, r0
 800def0:	2b00      	cmp	r3, #0
 800def2:	d001      	beq.n	800def8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800def4:	f000 f9d4 	bl	800e2a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800def8:	1d3b      	adds	r3, r7, #4
 800defa:	220c      	movs	r2, #12
 800defc:	4619      	mov	r1, r3
 800defe:	4807      	ldr	r0, [pc, #28]	; (800df1c <MX_TIM3_Init+0xfc>)
 800df00:	f7fa fe82 	bl	8008c08 <HAL_TIM_PWM_ConfigChannel>
 800df04:	4603      	mov	r3, r0
 800df06:	2b00      	cmp	r3, #0
 800df08:	d001      	beq.n	800df0e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800df0a:	f000 f9c9 	bl	800e2a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800df0e:	4803      	ldr	r0, [pc, #12]	; (800df1c <MX_TIM3_Init+0xfc>)
 800df10:	f000 fe0c 	bl	800eb2c <HAL_TIM_MspPostInit>

}
 800df14:	bf00      	nop
 800df16:	3738      	adds	r7, #56	; 0x38
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	200066b0 	.word	0x200066b0
 800df20:	40000400 	.word	0x40000400

0800df24 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b08e      	sub	sp, #56	; 0x38
 800df28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800df2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df2e:	2200      	movs	r2, #0
 800df30:	601a      	str	r2, [r3, #0]
 800df32:	605a      	str	r2, [r3, #4]
 800df34:	609a      	str	r2, [r3, #8]
 800df36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800df38:	f107 0320 	add.w	r3, r7, #32
 800df3c:	2200      	movs	r2, #0
 800df3e:	601a      	str	r2, [r3, #0]
 800df40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800df42:	1d3b      	adds	r3, r7, #4
 800df44:	2200      	movs	r2, #0
 800df46:	601a      	str	r2, [r3, #0]
 800df48:	605a      	str	r2, [r3, #4]
 800df4a:	609a      	str	r2, [r3, #8]
 800df4c:	60da      	str	r2, [r3, #12]
 800df4e:	611a      	str	r2, [r3, #16]
 800df50:	615a      	str	r2, [r3, #20]
 800df52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800df54:	4b33      	ldr	r3, [pc, #204]	; (800e024 <MX_TIM5_Init+0x100>)
 800df56:	4a34      	ldr	r2, [pc, #208]	; (800e028 <MX_TIM5_Init+0x104>)
 800df58:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 800df5a:	4b32      	ldr	r3, [pc, #200]	; (800e024 <MX_TIM5_Init+0x100>)
 800df5c:	2201      	movs	r2, #1
 800df5e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800df60:	4b30      	ldr	r3, [pc, #192]	; (800e024 <MX_TIM5_Init+0x100>)
 800df62:	2200      	movs	r2, #0
 800df64:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 800df66:	4b2f      	ldr	r3, [pc, #188]	; (800e024 <MX_TIM5_Init+0x100>)
 800df68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800df6c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800df6e:	4b2d      	ldr	r3, [pc, #180]	; (800e024 <MX_TIM5_Init+0x100>)
 800df70:	2200      	movs	r2, #0
 800df72:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800df74:	4b2b      	ldr	r3, [pc, #172]	; (800e024 <MX_TIM5_Init+0x100>)
 800df76:	2200      	movs	r2, #0
 800df78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800df7a:	482a      	ldr	r0, [pc, #168]	; (800e024 <MX_TIM5_Init+0x100>)
 800df7c:	f7fa fdbf 	bl	8008afe <HAL_TIM_Base_Init>
 800df80:	4603      	mov	r3, r0
 800df82:	2b00      	cmp	r3, #0
 800df84:	d001      	beq.n	800df8a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800df86:	f000 f98b 	bl	800e2a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800df8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800df90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df94:	4619      	mov	r1, r3
 800df96:	4823      	ldr	r0, [pc, #140]	; (800e024 <MX_TIM5_Init+0x100>)
 800df98:	f7fa fefc 	bl	8008d94 <HAL_TIM_ConfigClockSource>
 800df9c:	4603      	mov	r3, r0
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d001      	beq.n	800dfa6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800dfa2:	f000 f97d 	bl	800e2a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800dfa6:	481f      	ldr	r0, [pc, #124]	; (800e024 <MX_TIM5_Init+0x100>)
 800dfa8:	f7fa fdf8 	bl	8008b9c <HAL_TIM_PWM_Init>
 800dfac:	4603      	mov	r3, r0
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d001      	beq.n	800dfb6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800dfb2:	f000 f975 	bl	800e2a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800dfbe:	f107 0320 	add.w	r3, r7, #32
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	4817      	ldr	r0, [pc, #92]	; (800e024 <MX_TIM5_Init+0x100>)
 800dfc6:	f7fb fa87 	bl	80094d8 <HAL_TIMEx_MasterConfigSynchronization>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d001      	beq.n	800dfd4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800dfd0:	f000 f966 	bl	800e2a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800dfd4:	2370      	movs	r3, #112	; 0x70
 800dfd6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 800dfd8:	2364      	movs	r3, #100	; 0x64
 800dfda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800dfe4:	1d3b      	adds	r3, r7, #4
 800dfe6:	2204      	movs	r2, #4
 800dfe8:	4619      	mov	r1, r3
 800dfea:	480e      	ldr	r0, [pc, #56]	; (800e024 <MX_TIM5_Init+0x100>)
 800dfec:	f7fa fe0c 	bl	8008c08 <HAL_TIM_PWM_ConfigChannel>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d001      	beq.n	800dffa <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800dff6:	f000 f953 	bl	800e2a0 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800dffa:	2304      	movs	r3, #4
 800dffc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800dffe:	1d3b      	adds	r3, r7, #4
 800e000:	220c      	movs	r2, #12
 800e002:	4619      	mov	r1, r3
 800e004:	4807      	ldr	r0, [pc, #28]	; (800e024 <MX_TIM5_Init+0x100>)
 800e006:	f7fa fdff 	bl	8008c08 <HAL_TIM_PWM_ConfigChannel>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d001      	beq.n	800e014 <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 800e010:	f000 f946 	bl	800e2a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800e014:	4803      	ldr	r0, [pc, #12]	; (800e024 <MX_TIM5_Init+0x100>)
 800e016:	f000 fd89 	bl	800eb2c <HAL_TIM_MspPostInit>

}
 800e01a:	bf00      	nop
 800e01c:	3738      	adds	r7, #56	; 0x38
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop
 800e024:	20006670 	.word	0x20006670
 800e028:	40000c00 	.word	0x40000c00

0800e02c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800e030:	4b11      	ldr	r3, [pc, #68]	; (800e078 <MX_USART3_UART_Init+0x4c>)
 800e032:	4a12      	ldr	r2, [pc, #72]	; (800e07c <MX_USART3_UART_Init+0x50>)
 800e034:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800e036:	4b10      	ldr	r3, [pc, #64]	; (800e078 <MX_USART3_UART_Init+0x4c>)
 800e038:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800e03c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e03e:	4b0e      	ldr	r3, [pc, #56]	; (800e078 <MX_USART3_UART_Init+0x4c>)
 800e040:	2200      	movs	r2, #0
 800e042:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800e044:	4b0c      	ldr	r3, [pc, #48]	; (800e078 <MX_USART3_UART_Init+0x4c>)
 800e046:	2200      	movs	r2, #0
 800e048:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800e04a:	4b0b      	ldr	r3, [pc, #44]	; (800e078 <MX_USART3_UART_Init+0x4c>)
 800e04c:	2200      	movs	r2, #0
 800e04e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800e050:	4b09      	ldr	r3, [pc, #36]	; (800e078 <MX_USART3_UART_Init+0x4c>)
 800e052:	220c      	movs	r2, #12
 800e054:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e056:	4b08      	ldr	r3, [pc, #32]	; (800e078 <MX_USART3_UART_Init+0x4c>)
 800e058:	2200      	movs	r2, #0
 800e05a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800e05c:	4b06      	ldr	r3, [pc, #24]	; (800e078 <MX_USART3_UART_Init+0x4c>)
 800e05e:	2200      	movs	r2, #0
 800e060:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800e062:	4805      	ldr	r0, [pc, #20]	; (800e078 <MX_USART3_UART_Init+0x4c>)
 800e064:	f7fb fa7d 	bl	8009562 <HAL_UART_Init>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d001      	beq.n	800e072 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800e06e:	f000 f917 	bl	800e2a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800e072:	bf00      	nop
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	200065dc 	.word	0x200065dc
 800e07c:	40004800 	.word	0x40004800

0800e080 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800e086:	2300      	movs	r3, #0
 800e088:	607b      	str	r3, [r7, #4]
 800e08a:	4b10      	ldr	r3, [pc, #64]	; (800e0cc <MX_DMA_Init+0x4c>)
 800e08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e08e:	4a0f      	ldr	r2, [pc, #60]	; (800e0cc <MX_DMA_Init+0x4c>)
 800e090:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e094:	6313      	str	r3, [r2, #48]	; 0x30
 800e096:	4b0d      	ldr	r3, [pc, #52]	; (800e0cc <MX_DMA_Init+0x4c>)
 800e098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e09a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e09e:	607b      	str	r3, [r7, #4]
 800e0a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	2100      	movs	r1, #0
 800e0a6:	203b      	movs	r0, #59	; 0x3b
 800e0a8:	f7f5 fd71 	bl	8003b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800e0ac:	203b      	movs	r0, #59	; 0x3b
 800e0ae:	f7f5 fd8a 	bl	8003bc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	2045      	movs	r0, #69	; 0x45
 800e0b8:	f7f5 fd69 	bl	8003b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800e0bc:	2045      	movs	r0, #69	; 0x45
 800e0be:	f7f5 fd82 	bl	8003bc6 <HAL_NVIC_EnableIRQ>

}
 800e0c2:	bf00      	nop
 800e0c4:	3708      	adds	r7, #8
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	40023800 	.word	0x40023800

0800e0d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b08a      	sub	sp, #40	; 0x28
 800e0d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e0d6:	f107 0314 	add.w	r3, r7, #20
 800e0da:	2200      	movs	r2, #0
 800e0dc:	601a      	str	r2, [r3, #0]
 800e0de:	605a      	str	r2, [r3, #4]
 800e0e0:	609a      	str	r2, [r3, #8]
 800e0e2:	60da      	str	r2, [r3, #12]
 800e0e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	613b      	str	r3, [r7, #16]
 800e0ea:	4b63      	ldr	r3, [pc, #396]	; (800e278 <MX_GPIO_Init+0x1a8>)
 800e0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ee:	4a62      	ldr	r2, [pc, #392]	; (800e278 <MX_GPIO_Init+0x1a8>)
 800e0f0:	f043 0304 	orr.w	r3, r3, #4
 800e0f4:	6313      	str	r3, [r2, #48]	; 0x30
 800e0f6:	4b60      	ldr	r3, [pc, #384]	; (800e278 <MX_GPIO_Init+0x1a8>)
 800e0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0fa:	f003 0304 	and.w	r3, r3, #4
 800e0fe:	613b      	str	r3, [r7, #16]
 800e100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e102:	2300      	movs	r3, #0
 800e104:	60fb      	str	r3, [r7, #12]
 800e106:	4b5c      	ldr	r3, [pc, #368]	; (800e278 <MX_GPIO_Init+0x1a8>)
 800e108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e10a:	4a5b      	ldr	r2, [pc, #364]	; (800e278 <MX_GPIO_Init+0x1a8>)
 800e10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e110:	6313      	str	r3, [r2, #48]	; 0x30
 800e112:	4b59      	ldr	r3, [pc, #356]	; (800e278 <MX_GPIO_Init+0x1a8>)
 800e114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e11a:	60fb      	str	r3, [r7, #12]
 800e11c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e11e:	2300      	movs	r3, #0
 800e120:	60bb      	str	r3, [r7, #8]
 800e122:	4b55      	ldr	r3, [pc, #340]	; (800e278 <MX_GPIO_Init+0x1a8>)
 800e124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e126:	4a54      	ldr	r2, [pc, #336]	; (800e278 <MX_GPIO_Init+0x1a8>)
 800e128:	f043 0301 	orr.w	r3, r3, #1
 800e12c:	6313      	str	r3, [r2, #48]	; 0x30
 800e12e:	4b52      	ldr	r3, [pc, #328]	; (800e278 <MX_GPIO_Init+0x1a8>)
 800e130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e132:	f003 0301 	and.w	r3, r3, #1
 800e136:	60bb      	str	r3, [r7, #8]
 800e138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e13a:	2300      	movs	r3, #0
 800e13c:	607b      	str	r3, [r7, #4]
 800e13e:	4b4e      	ldr	r3, [pc, #312]	; (800e278 <MX_GPIO_Init+0x1a8>)
 800e140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e142:	4a4d      	ldr	r2, [pc, #308]	; (800e278 <MX_GPIO_Init+0x1a8>)
 800e144:	f043 0302 	orr.w	r3, r3, #2
 800e148:	6313      	str	r3, [r2, #48]	; 0x30
 800e14a:	4b4b      	ldr	r3, [pc, #300]	; (800e278 <MX_GPIO_Init+0x1a8>)
 800e14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e14e:	f003 0302 	and.w	r3, r3, #2
 800e152:	607b      	str	r3, [r7, #4]
 800e154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e156:	2300      	movs	r3, #0
 800e158:	603b      	str	r3, [r7, #0]
 800e15a:	4b47      	ldr	r3, [pc, #284]	; (800e278 <MX_GPIO_Init+0x1a8>)
 800e15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e15e:	4a46      	ldr	r2, [pc, #280]	; (800e278 <MX_GPIO_Init+0x1a8>)
 800e160:	f043 0308 	orr.w	r3, r3, #8
 800e164:	6313      	str	r3, [r2, #48]	; 0x30
 800e166:	4b44      	ldr	r3, [pc, #272]	; (800e278 <MX_GPIO_Init+0x1a8>)
 800e168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e16a:	f003 0308 	and.w	r3, r3, #8
 800e16e:	603b      	str	r3, [r7, #0]
 800e170:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 800e172:	2200      	movs	r2, #0
 800e174:	21ef      	movs	r1, #239	; 0xef
 800e176:	4841      	ldr	r0, [pc, #260]	; (800e27c <MX_GPIO_Init+0x1ac>)
 800e178:	f7f6 fa8a 	bl	8004690 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 800e17c:	2200      	movs	r2, #0
 800e17e:	2115      	movs	r1, #21
 800e180:	483f      	ldr	r0, [pc, #252]	; (800e280 <MX_GPIO_Init+0x1b0>)
 800e182:	f7f6 fa85 	bl	8004690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 800e186:	2200      	movs	r2, #0
 800e188:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 800e18c:	483d      	ldr	r0, [pc, #244]	; (800e284 <MX_GPIO_Init+0x1b4>)
 800e18e:	f7f6 fa7f 	bl	8004690 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 800e192:	23cf      	movs	r3, #207	; 0xcf
 800e194:	617b      	str	r3, [r7, #20]
                          |LEDB_Pin|LEDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e196:	2301      	movs	r3, #1
 800e198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e19a:	2300      	movs	r3, #0
 800e19c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e1a2:	f107 0314 	add.w	r3, r7, #20
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	4834      	ldr	r0, [pc, #208]	; (800e27c <MX_GPIO_Init+0x1ac>)
 800e1aa:	f7f6 f8bf 	bl	800432c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin;
 800e1ae:	2305      	movs	r3, #5
 800e1b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800e1b6:	2302      	movs	r3, #2
 800e1b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e1be:	f107 0314 	add.w	r3, r7, #20
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	482e      	ldr	r0, [pc, #184]	; (800e280 <MX_GPIO_Init+0x1b0>)
 800e1c6:	f7f6 f8b1 	bl	800432c <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 800e1ca:	2310      	movs	r3, #16
 800e1cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 800e1da:	f107 0314 	add.w	r3, r7, #20
 800e1de:	4619      	mov	r1, r3
 800e1e0:	4827      	ldr	r0, [pc, #156]	; (800e280 <MX_GPIO_Init+0x1b0>)
 800e1e2:	f7f6 f8a3 	bl	800432c <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_DIO0_Pin LR_TIM_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin|LR_TIM_Pin;
 800e1e6:	23c0      	movs	r3, #192	; 0xc0
 800e1e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e1ea:	4b27      	ldr	r3, [pc, #156]	; (800e288 <MX_GPIO_Init+0x1b8>)
 800e1ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e1f2:	f107 0314 	add.w	r3, r7, #20
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	4821      	ldr	r0, [pc, #132]	; (800e280 <MX_GPIO_Init+0x1b0>)
 800e1fa:	f7f6 f897 	bl	800432c <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_RESET_Pin */
  GPIO_InitStruct.Pin = LR_RESET_Pin;
 800e1fe:	2320      	movs	r3, #32
 800e200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e202:	2301      	movs	r3, #1
 800e204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800e206:	2302      	movs	r3, #2
 800e208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e20a:	2300      	movs	r3, #0
 800e20c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_RESET_GPIO_Port, &GPIO_InitStruct);
 800e20e:	f107 0314 	add.w	r3, r7, #20
 800e212:	4619      	mov	r1, r3
 800e214:	4819      	ldr	r0, [pc, #100]	; (800e27c <MX_GPIO_Init+0x1ac>)
 800e216:	f7f6 f889 	bl	800432c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 800e21a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800e21e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e220:	2301      	movs	r3, #1
 800e222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e224:	2300      	movs	r3, #0
 800e226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e228:	2300      	movs	r3, #0
 800e22a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e22c:	f107 0314 	add.w	r3, r7, #20
 800e230:	4619      	mov	r1, r3
 800e232:	4814      	ldr	r0, [pc, #80]	; (800e284 <MX_GPIO_Init+0x1b4>)
 800e234:	f7f6 f87a 	bl	800432c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO_SW_Pin BTN_USR_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin|BTN_USR_Pin;
 800e238:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800e23c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e23e:	2300      	movs	r3, #0
 800e240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e242:	2301      	movs	r3, #1
 800e244:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e246:	f107 0314 	add.w	r3, r7, #20
 800e24a:	4619      	mov	r1, r3
 800e24c:	480c      	ldr	r0, [pc, #48]	; (800e280 <MX_GPIO_Init+0x1b0>)
 800e24e:	f7f6 f86d 	bl	800432c <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 800e252:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e258:	2301      	movs	r3, #1
 800e25a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800e25c:	2302      	movs	r3, #2
 800e25e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e260:	2300      	movs	r3, #0
 800e262:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 800e264:	f107 0314 	add.w	r3, r7, #20
 800e268:	4619      	mov	r1, r3
 800e26a:	4806      	ldr	r0, [pc, #24]	; (800e284 <MX_GPIO_Init+0x1b4>)
 800e26c:	f7f6 f85e 	bl	800432c <HAL_GPIO_Init>

}
 800e270:	bf00      	nop
 800e272:	3728      	adds	r7, #40	; 0x28
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	40023800 	.word	0x40023800
 800e27c:	40020800 	.word	0x40020800
 800e280:	40020000 	.word	0x40020000
 800e284:	40020400 	.word	0x40020400
 800e288:	10110000 	.word	0x10110000

0800e28c <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
 800e28c:	b480      	push	{r7}
 800e28e:	af00      	add	r7, sp, #0
 800e290:	4b02      	ldr	r3, [pc, #8]	; (800e29c <Get_I2C1_Instance+0x10>)
 800e292:	4618      	mov	r0, r3
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr
 800e29c:	2000661c 	.word	0x2000661c

0800e2a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800e2a4:	bf00      	nop
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ac:	4770      	bx	lr

0800e2ae <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	b084      	sub	sp, #16
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e2b6:	f7f5 fb61 	bl	800397c <HAL_GetTick>
 800e2ba:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e2bc:	e006      	b.n	800e2cc <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e2be:	f7ff f9fb 	bl	800d6b8 <BSP_SD_GetCardState>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d101      	bne.n	800e2cc <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	e009      	b.n	800e2e0 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e2cc:	f7f5 fb56 	bl	800397c <HAL_GetTick>
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	1ad3      	subs	r3, r2, r3
 800e2d6:	687a      	ldr	r2, [r7, #4]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d8f0      	bhi.n	800e2be <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e2dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3710      	adds	r7, #16
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e2f2:	4b0b      	ldr	r3, [pc, #44]	; (800e320 <SD_CheckStatus+0x38>)
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e2f8:	f7ff f9de 	bl	800d6b8 <BSP_SD_GetCardState>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d107      	bne.n	800e312 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e302:	4b07      	ldr	r3, [pc, #28]	; (800e320 <SD_CheckStatus+0x38>)
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	b2db      	uxtb	r3, r3
 800e308:	f023 0301 	bic.w	r3, r3, #1
 800e30c:	b2da      	uxtb	r2, r3
 800e30e:	4b04      	ldr	r3, [pc, #16]	; (800e320 <SD_CheckStatus+0x38>)
 800e310:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e312:	4b03      	ldr	r3, [pc, #12]	; (800e320 <SD_CheckStatus+0x38>)
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	b2db      	uxtb	r3, r3
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3708      	adds	r7, #8
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	20000158 	.word	0x20000158

0800e324 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	4603      	mov	r3, r0
 800e32c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e32e:	f7ff f969 	bl	800d604 <BSP_SD_Init>
 800e332:	4603      	mov	r3, r0
 800e334:	2b00      	cmp	r3, #0
 800e336:	d107      	bne.n	800e348 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e338:	79fb      	ldrb	r3, [r7, #7]
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7ff ffd4 	bl	800e2e8 <SD_CheckStatus>
 800e340:	4603      	mov	r3, r0
 800e342:	461a      	mov	r2, r3
 800e344:	4b04      	ldr	r3, [pc, #16]	; (800e358 <SD_initialize+0x34>)
 800e346:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800e348:	4b03      	ldr	r3, [pc, #12]	; (800e358 <SD_initialize+0x34>)
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	b2db      	uxtb	r3, r3
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	20000158 	.word	0x20000158

0800e35c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	4603      	mov	r3, r0
 800e364:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e366:	79fb      	ldrb	r3, [r7, #7]
 800e368:	4618      	mov	r0, r3
 800e36a:	f7ff ffbd 	bl	800e2e8 <SD_CheckStatus>
 800e36e:	4603      	mov	r3, r0
}
 800e370:	4618      	mov	r0, r3
 800e372:	3708      	adds	r7, #8
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}

0800e378 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b088      	sub	sp, #32
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60b9      	str	r1, [r7, #8]
 800e380:	607a      	str	r2, [r7, #4]
 800e382:	603b      	str	r3, [r7, #0]
 800e384:	4603      	mov	r3, r0
 800e386:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e388:	2301      	movs	r3, #1
 800e38a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e38c:	f247 5030 	movw	r0, #30000	; 0x7530
 800e390:	f7ff ff8d 	bl	800e2ae <SD_CheckStatusWithTimeout>
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	da01      	bge.n	800e39e <SD_read+0x26>
  {
    return res;
 800e39a:	7ffb      	ldrb	r3, [r7, #31]
 800e39c:	e08b      	b.n	800e4b6 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	f003 0303 	and.w	r3, r3, #3
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	f040 8085 	bne.w	800e4b4 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e3aa:	683a      	ldr	r2, [r7, #0]
 800e3ac:	6879      	ldr	r1, [r7, #4]
 800e3ae:	68b8      	ldr	r0, [r7, #8]
 800e3b0:	f7ff f94e 	bl	800d650 <BSP_SD_ReadBlocks_DMA>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d133      	bne.n	800e422 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e3ba:	4b41      	ldr	r3, [pc, #260]	; (800e4c0 <SD_read+0x148>)
 800e3bc:	2200      	movs	r2, #0
 800e3be:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e3c0:	f7f5 fadc 	bl	800397c <HAL_GetTick>
 800e3c4:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e3c6:	bf00      	nop
 800e3c8:	4b3d      	ldr	r3, [pc, #244]	; (800e4c0 <SD_read+0x148>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d108      	bne.n	800e3e2 <SD_read+0x6a>
 800e3d0:	f7f5 fad4 	bl	800397c <HAL_GetTick>
 800e3d4:	4602      	mov	r2, r0
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	1ad3      	subs	r3, r2, r3
 800e3da:	f247 522f 	movw	r2, #29999	; 0x752f
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d9f2      	bls.n	800e3c8 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800e3e2:	4b37      	ldr	r3, [pc, #220]	; (800e4c0 <SD_read+0x148>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d102      	bne.n	800e3f0 <SD_read+0x78>
      {
        res = RES_ERROR;
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	77fb      	strb	r3, [r7, #31]
 800e3ee:	e061      	b.n	800e4b4 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800e3f0:	4b33      	ldr	r3, [pc, #204]	; (800e4c0 <SD_read+0x148>)
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e3f6:	f7f5 fac1 	bl	800397c <HAL_GetTick>
 800e3fa:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e3fc:	e007      	b.n	800e40e <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e3fe:	f7ff f95b 	bl	800d6b8 <BSP_SD_GetCardState>
 800e402:	4603      	mov	r3, r0
 800e404:	2b00      	cmp	r3, #0
 800e406:	d102      	bne.n	800e40e <SD_read+0x96>
          {
            res = RES_OK;
 800e408:	2300      	movs	r3, #0
 800e40a:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e40c:	e052      	b.n	800e4b4 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e40e:	f7f5 fab5 	bl	800397c <HAL_GetTick>
 800e412:	4602      	mov	r2, r0
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	1ad3      	subs	r3, r2, r3
 800e418:	f247 522f 	movw	r2, #29999	; 0x752f
 800e41c:	4293      	cmp	r3, r2
 800e41e:	d9ee      	bls.n	800e3fe <SD_read+0x86>
 800e420:	e048      	b.n	800e4b4 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800e422:	2300      	movs	r3, #0
 800e424:	61bb      	str	r3, [r7, #24]
 800e426:	e034      	b.n	800e492 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	1c5a      	adds	r2, r3, #1
 800e42c:	607a      	str	r2, [r7, #4]
 800e42e:	2201      	movs	r2, #1
 800e430:	4619      	mov	r1, r3
 800e432:	4824      	ldr	r0, [pc, #144]	; (800e4c4 <SD_read+0x14c>)
 800e434:	f7ff f90c 	bl	800d650 <BSP_SD_ReadBlocks_DMA>
 800e438:	4603      	mov	r3, r0
 800e43a:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800e43c:	7fbb      	ldrb	r3, [r7, #30]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d12c      	bne.n	800e49c <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800e442:	4b1f      	ldr	r3, [pc, #124]	; (800e4c0 <SD_read+0x148>)
 800e444:	2200      	movs	r2, #0
 800e446:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800e448:	f7f5 fa98 	bl	800397c <HAL_GetTick>
 800e44c:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e44e:	bf00      	nop
 800e450:	4b1b      	ldr	r3, [pc, #108]	; (800e4c0 <SD_read+0x148>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d108      	bne.n	800e46a <SD_read+0xf2>
 800e458:	f7f5 fa90 	bl	800397c <HAL_GetTick>
 800e45c:	4602      	mov	r2, r0
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	1ad3      	subs	r3, r2, r3
 800e462:	f247 522f 	movw	r2, #29999	; 0x752f
 800e466:	4293      	cmp	r3, r2
 800e468:	d9f2      	bls.n	800e450 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800e46a:	4b15      	ldr	r3, [pc, #84]	; (800e4c0 <SD_read+0x148>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d016      	beq.n	800e4a0 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	4a13      	ldr	r2, [pc, #76]	; (800e4c4 <SD_read+0x14c>)
 800e476:	4618      	mov	r0, r3
 800e478:	4611      	mov	r1, r2
 800e47a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e47e:	461a      	mov	r2, r3
 800e480:	f001 fa56 	bl	800f930 <memcpy>
          buff += BLOCKSIZE;
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e48a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	3301      	adds	r3, #1
 800e490:	61bb      	str	r3, [r7, #24]
 800e492:	69bb      	ldr	r3, [r7, #24]
 800e494:	683a      	ldr	r2, [r7, #0]
 800e496:	429a      	cmp	r2, r3
 800e498:	d8c6      	bhi.n	800e428 <SD_read+0xb0>
 800e49a:	e002      	b.n	800e4a2 <SD_read+0x12a>
        }
        else
        {
          break;
 800e49c:	bf00      	nop
 800e49e:	e000      	b.n	800e4a2 <SD_read+0x12a>
            break;
 800e4a0:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800e4a2:	69bb      	ldr	r3, [r7, #24]
 800e4a4:	683a      	ldr	r2, [r7, #0]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d104      	bne.n	800e4b4 <SD_read+0x13c>
 800e4aa:	7fbb      	ldrb	r3, [r7, #30]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d101      	bne.n	800e4b4 <SD_read+0x13c>
        res = RES_OK;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800e4b4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3720      	adds	r7, #32
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	200009cc 	.word	0x200009cc
 800e4c4:	200007c8 	.word	0x200007c8

0800e4c8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b088      	sub	sp, #32
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	60b9      	str	r1, [r7, #8]
 800e4d0:	607a      	str	r2, [r7, #4]
 800e4d2:	603b      	str	r3, [r7, #0]
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e4d8:	2301      	movs	r3, #1
 800e4da:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800e4dc:	4b4c      	ldr	r3, [pc, #304]	; (800e610 <SD_write+0x148>)
 800e4de:	2200      	movs	r2, #0
 800e4e0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e4e2:	f247 5030 	movw	r0, #30000	; 0x7530
 800e4e6:	f7ff fee2 	bl	800e2ae <SD_CheckStatusWithTimeout>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	da01      	bge.n	800e4f4 <SD_write+0x2c>
  {
    return res;
 800e4f0:	7ffb      	ldrb	r3, [r7, #31]
 800e4f2:	e088      	b.n	800e606 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	f003 0303 	and.w	r3, r3, #3
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	f040 8082 	bne.w	800e604 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e500:	683a      	ldr	r2, [r7, #0]
 800e502:	6879      	ldr	r1, [r7, #4]
 800e504:	68b8      	ldr	r0, [r7, #8]
 800e506:	f7ff f8bd 	bl	800d684 <BSP_SD_WriteBlocks_DMA>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d130      	bne.n	800e572 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e510:	f7f5 fa34 	bl	800397c <HAL_GetTick>
 800e514:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e516:	bf00      	nop
 800e518:	4b3d      	ldr	r3, [pc, #244]	; (800e610 <SD_write+0x148>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d108      	bne.n	800e532 <SD_write+0x6a>
 800e520:	f7f5 fa2c 	bl	800397c <HAL_GetTick>
 800e524:	4602      	mov	r2, r0
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	1ad3      	subs	r3, r2, r3
 800e52a:	f247 522f 	movw	r2, #29999	; 0x752f
 800e52e:	4293      	cmp	r3, r2
 800e530:	d9f2      	bls.n	800e518 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800e532:	4b37      	ldr	r3, [pc, #220]	; (800e610 <SD_write+0x148>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d102      	bne.n	800e540 <SD_write+0x78>
      {
        res = RES_ERROR;
 800e53a:	2301      	movs	r3, #1
 800e53c:	77fb      	strb	r3, [r7, #31]
 800e53e:	e061      	b.n	800e604 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800e540:	4b33      	ldr	r3, [pc, #204]	; (800e610 <SD_write+0x148>)
 800e542:	2200      	movs	r2, #0
 800e544:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e546:	f7f5 fa19 	bl	800397c <HAL_GetTick>
 800e54a:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e54c:	e007      	b.n	800e55e <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e54e:	f7ff f8b3 	bl	800d6b8 <BSP_SD_GetCardState>
 800e552:	4603      	mov	r3, r0
 800e554:	2b00      	cmp	r3, #0
 800e556:	d102      	bne.n	800e55e <SD_write+0x96>
          {
            res = RES_OK;
 800e558:	2300      	movs	r3, #0
 800e55a:	77fb      	strb	r3, [r7, #31]
            break;
 800e55c:	e052      	b.n	800e604 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e55e:	f7f5 fa0d 	bl	800397c <HAL_GetTick>
 800e562:	4602      	mov	r2, r0
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	1ad3      	subs	r3, r2, r3
 800e568:	f247 522f 	movw	r2, #29999	; 0x752f
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d9ee      	bls.n	800e54e <SD_write+0x86>
 800e570:	e048      	b.n	800e604 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800e572:	2300      	movs	r3, #0
 800e574:	61bb      	str	r3, [r7, #24]
 800e576:	e034      	b.n	800e5e2 <SD_write+0x11a>
      {
        WriteStatus = 0;
 800e578:	4b25      	ldr	r3, [pc, #148]	; (800e610 <SD_write+0x148>)
 800e57a:	2200      	movs	r2, #0
 800e57c:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	1c5a      	adds	r2, r3, #1
 800e582:	607a      	str	r2, [r7, #4]
 800e584:	2201      	movs	r2, #1
 800e586:	4619      	mov	r1, r3
 800e588:	4822      	ldr	r0, [pc, #136]	; (800e614 <SD_write+0x14c>)
 800e58a:	f7ff f87b 	bl	800d684 <BSP_SD_WriteBlocks_DMA>
 800e58e:	4603      	mov	r3, r0
 800e590:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800e592:	7fbb      	ldrb	r3, [r7, #30]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d129      	bne.n	800e5ec <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800e598:	f7f5 f9f0 	bl	800397c <HAL_GetTick>
 800e59c:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e59e:	bf00      	nop
 800e5a0:	4b1b      	ldr	r3, [pc, #108]	; (800e610 <SD_write+0x148>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d108      	bne.n	800e5ba <SD_write+0xf2>
 800e5a8:	f7f5 f9e8 	bl	800397c <HAL_GetTick>
 800e5ac:	4602      	mov	r2, r0
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	1ad3      	subs	r3, r2, r3
 800e5b2:	f247 522f 	movw	r2, #29999	; 0x752f
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d9f2      	bls.n	800e5a0 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800e5ba:	4b15      	ldr	r3, [pc, #84]	; (800e610 <SD_write+0x148>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d016      	beq.n	800e5f0 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	4a13      	ldr	r2, [pc, #76]	; (800e614 <SD_write+0x14c>)
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	4611      	mov	r1, r2
 800e5ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	f001 f9ae 	bl	800f930 <memcpy>
          buff += BLOCKSIZE;
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e5da:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800e5dc:	69bb      	ldr	r3, [r7, #24]
 800e5de:	3301      	adds	r3, #1
 800e5e0:	61bb      	str	r3, [r7, #24]
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	683a      	ldr	r2, [r7, #0]
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	d8c6      	bhi.n	800e578 <SD_write+0xb0>
 800e5ea:	e002      	b.n	800e5f2 <SD_write+0x12a>
        }
        else
        {
          break;
 800e5ec:	bf00      	nop
 800e5ee:	e000      	b.n	800e5f2 <SD_write+0x12a>
            break;
 800e5f0:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800e5f2:	69bb      	ldr	r3, [r7, #24]
 800e5f4:	683a      	ldr	r2, [r7, #0]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d104      	bne.n	800e604 <SD_write+0x13c>
 800e5fa:	7fbb      	ldrb	r3, [r7, #30]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d101      	bne.n	800e604 <SD_write+0x13c>
        res = RES_OK;
 800e600:	2300      	movs	r3, #0
 800e602:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800e604:	7ffb      	ldrb	r3, [r7, #31]
}
 800e606:	4618      	mov	r0, r3
 800e608:	3720      	adds	r7, #32
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop
 800e610:	200009c8 	.word	0x200009c8
 800e614:	200007c8 	.word	0x200007c8

0800e618 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b08c      	sub	sp, #48	; 0x30
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	4603      	mov	r3, r0
 800e620:	603a      	str	r2, [r7, #0]
 800e622:	71fb      	strb	r3, [r7, #7]
 800e624:	460b      	mov	r3, r1
 800e626:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e628:	2301      	movs	r3, #1
 800e62a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e62e:	4b25      	ldr	r3, [pc, #148]	; (800e6c4 <SD_ioctl+0xac>)
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	b2db      	uxtb	r3, r3
 800e634:	f003 0301 	and.w	r3, r3, #1
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d001      	beq.n	800e640 <SD_ioctl+0x28>
 800e63c:	2303      	movs	r3, #3
 800e63e:	e03c      	b.n	800e6ba <SD_ioctl+0xa2>

  switch (cmd)
 800e640:	79bb      	ldrb	r3, [r7, #6]
 800e642:	2b03      	cmp	r3, #3
 800e644:	d834      	bhi.n	800e6b0 <SD_ioctl+0x98>
 800e646:	a201      	add	r2, pc, #4	; (adr r2, 800e64c <SD_ioctl+0x34>)
 800e648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e64c:	0800e65d 	.word	0x0800e65d
 800e650:	0800e665 	.word	0x0800e665
 800e654:	0800e67d 	.word	0x0800e67d
 800e658:	0800e697 	.word	0x0800e697
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e65c:	2300      	movs	r3, #0
 800e65e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e662:	e028      	b.n	800e6b6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e664:	f107 030c 	add.w	r3, r7, #12
 800e668:	4618      	mov	r0, r3
 800e66a:	f7ff f835 	bl	800d6d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e66e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e674:	2300      	movs	r3, #0
 800e676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e67a:	e01c      	b.n	800e6b6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e67c:	f107 030c 	add.w	r3, r7, #12
 800e680:	4618      	mov	r0, r3
 800e682:	f7ff f829 	bl	800d6d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e688:	b29a      	uxth	r2, r3
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e68e:	2300      	movs	r3, #0
 800e690:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e694:	e00f      	b.n	800e6b6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e696:	f107 030c 	add.w	r3, r7, #12
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7ff f81c 	bl	800d6d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a2:	0a5a      	lsrs	r2, r3, #9
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e6ae:	e002      	b.n	800e6b6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e6b0:	2304      	movs	r3, #4
 800e6b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e6b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3730      	adds	r7, #48	; 0x30
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	20000158 	.word	0x20000158

0800e6c8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 800e6cc:	4b03      	ldr	r3, [pc, #12]	; (800e6dc <BSP_SD_WriteCpltCallback+0x14>)
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	601a      	str	r2, [r3, #0]
}
 800e6d2:	bf00      	nop
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr
 800e6dc:	200009c8 	.word	0x200009c8

0800e6e0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e6e4:	4b03      	ldr	r3, [pc, #12]	; (800e6f4 <BSP_SD_ReadCpltCallback+0x14>)
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	601a      	str	r2, [r3, #0]
}
 800e6ea:	bf00      	nop
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr
 800e6f4:	200009cc 	.word	0x200009cc

0800e6f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b083      	sub	sp, #12
 800e6fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e6fe:	2300      	movs	r3, #0
 800e700:	607b      	str	r3, [r7, #4]
 800e702:	4b10      	ldr	r3, [pc, #64]	; (800e744 <HAL_MspInit+0x4c>)
 800e704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e706:	4a0f      	ldr	r2, [pc, #60]	; (800e744 <HAL_MspInit+0x4c>)
 800e708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e70c:	6453      	str	r3, [r2, #68]	; 0x44
 800e70e:	4b0d      	ldr	r3, [pc, #52]	; (800e744 <HAL_MspInit+0x4c>)
 800e710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e716:	607b      	str	r3, [r7, #4]
 800e718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e71a:	2300      	movs	r3, #0
 800e71c:	603b      	str	r3, [r7, #0]
 800e71e:	4b09      	ldr	r3, [pc, #36]	; (800e744 <HAL_MspInit+0x4c>)
 800e720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e722:	4a08      	ldr	r2, [pc, #32]	; (800e744 <HAL_MspInit+0x4c>)
 800e724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e728:	6413      	str	r3, [r2, #64]	; 0x40
 800e72a:	4b06      	ldr	r3, [pc, #24]	; (800e744 <HAL_MspInit+0x4c>)
 800e72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e72e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e732:	603b      	str	r3, [r7, #0]
 800e734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e736:	bf00      	nop
 800e738:	370c      	adds	r7, #12
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr
 800e742:	bf00      	nop
 800e744:	40023800 	.word	0x40023800

0800e748 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b08a      	sub	sp, #40	; 0x28
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e750:	f107 0314 	add.w	r3, r7, #20
 800e754:	2200      	movs	r2, #0
 800e756:	601a      	str	r2, [r3, #0]
 800e758:	605a      	str	r2, [r3, #4]
 800e75a:	609a      	str	r2, [r3, #8]
 800e75c:	60da      	str	r2, [r3, #12]
 800e75e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4a19      	ldr	r2, [pc, #100]	; (800e7cc <HAL_I2C_MspInit+0x84>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d12b      	bne.n	800e7c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e76a:	2300      	movs	r3, #0
 800e76c:	613b      	str	r3, [r7, #16]
 800e76e:	4b18      	ldr	r3, [pc, #96]	; (800e7d0 <HAL_I2C_MspInit+0x88>)
 800e770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e772:	4a17      	ldr	r2, [pc, #92]	; (800e7d0 <HAL_I2C_MspInit+0x88>)
 800e774:	f043 0302 	orr.w	r3, r3, #2
 800e778:	6313      	str	r3, [r2, #48]	; 0x30
 800e77a:	4b15      	ldr	r3, [pc, #84]	; (800e7d0 <HAL_I2C_MspInit+0x88>)
 800e77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e77e:	f003 0302 	and.w	r3, r3, #2
 800e782:	613b      	str	r3, [r7, #16]
 800e784:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800e786:	23c0      	movs	r3, #192	; 0xc0
 800e788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e78a:	2312      	movs	r3, #18
 800e78c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e78e:	2300      	movs	r3, #0
 800e790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e792:	2303      	movs	r3, #3
 800e794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e796:	2304      	movs	r3, #4
 800e798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e79a:	f107 0314 	add.w	r3, r7, #20
 800e79e:	4619      	mov	r1, r3
 800e7a0:	480c      	ldr	r0, [pc, #48]	; (800e7d4 <HAL_I2C_MspInit+0x8c>)
 800e7a2:	f7f5 fdc3 	bl	800432c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	60fb      	str	r3, [r7, #12]
 800e7aa:	4b09      	ldr	r3, [pc, #36]	; (800e7d0 <HAL_I2C_MspInit+0x88>)
 800e7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7ae:	4a08      	ldr	r2, [pc, #32]	; (800e7d0 <HAL_I2C_MspInit+0x88>)
 800e7b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e7b4:	6413      	str	r3, [r2, #64]	; 0x40
 800e7b6:	4b06      	ldr	r3, [pc, #24]	; (800e7d0 <HAL_I2C_MspInit+0x88>)
 800e7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e7be:	60fb      	str	r3, [r7, #12]
 800e7c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800e7c2:	bf00      	nop
 800e7c4:	3728      	adds	r7, #40	; 0x28
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop
 800e7cc:	40005400 	.word	0x40005400
 800e7d0:	40023800 	.word	0x40023800
 800e7d4:	40020400 	.word	0x40020400

0800e7d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4a05      	ldr	r2, [pc, #20]	; (800e7fc <HAL_RTC_MspInit+0x24>)
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d102      	bne.n	800e7f0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e7ea:	4b05      	ldr	r3, [pc, #20]	; (800e800 <HAL_RTC_MspInit+0x28>)
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800e7f0:	bf00      	nop
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr
 800e7fc:	40002800 	.word	0x40002800
 800e800:	42470e3c 	.word	0x42470e3c

0800e804 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b08a      	sub	sp, #40	; 0x28
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e80c:	f107 0314 	add.w	r3, r7, #20
 800e810:	2200      	movs	r2, #0
 800e812:	601a      	str	r2, [r3, #0]
 800e814:	605a      	str	r2, [r3, #4]
 800e816:	609a      	str	r2, [r3, #8]
 800e818:	60da      	str	r2, [r3, #12]
 800e81a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4a70      	ldr	r2, [pc, #448]	; (800e9e4 <HAL_SD_MspInit+0x1e0>)
 800e822:	4293      	cmp	r3, r2
 800e824:	f040 80da 	bne.w	800e9dc <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800e828:	2300      	movs	r3, #0
 800e82a:	613b      	str	r3, [r7, #16]
 800e82c:	4b6e      	ldr	r3, [pc, #440]	; (800e9e8 <HAL_SD_MspInit+0x1e4>)
 800e82e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e830:	4a6d      	ldr	r2, [pc, #436]	; (800e9e8 <HAL_SD_MspInit+0x1e4>)
 800e832:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e836:	6453      	str	r3, [r2, #68]	; 0x44
 800e838:	4b6b      	ldr	r3, [pc, #428]	; (800e9e8 <HAL_SD_MspInit+0x1e4>)
 800e83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e83c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e840:	613b      	str	r3, [r7, #16]
 800e842:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e844:	2300      	movs	r3, #0
 800e846:	60fb      	str	r3, [r7, #12]
 800e848:	4b67      	ldr	r3, [pc, #412]	; (800e9e8 <HAL_SD_MspInit+0x1e4>)
 800e84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e84c:	4a66      	ldr	r2, [pc, #408]	; (800e9e8 <HAL_SD_MspInit+0x1e4>)
 800e84e:	f043 0304 	orr.w	r3, r3, #4
 800e852:	6313      	str	r3, [r2, #48]	; 0x30
 800e854:	4b64      	ldr	r3, [pc, #400]	; (800e9e8 <HAL_SD_MspInit+0x1e4>)
 800e856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e858:	f003 0304 	and.w	r3, r3, #4
 800e85c:	60fb      	str	r3, [r7, #12]
 800e85e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e860:	2300      	movs	r3, #0
 800e862:	60bb      	str	r3, [r7, #8]
 800e864:	4b60      	ldr	r3, [pc, #384]	; (800e9e8 <HAL_SD_MspInit+0x1e4>)
 800e866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e868:	4a5f      	ldr	r2, [pc, #380]	; (800e9e8 <HAL_SD_MspInit+0x1e4>)
 800e86a:	f043 0308 	orr.w	r3, r3, #8
 800e86e:	6313      	str	r3, [r2, #48]	; 0x30
 800e870:	4b5d      	ldr	r3, [pc, #372]	; (800e9e8 <HAL_SD_MspInit+0x1e4>)
 800e872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e874:	f003 0308 	and.w	r3, r3, #8
 800e878:	60bb      	str	r3, [r7, #8]
 800e87a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800e87c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800e880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e882:	2302      	movs	r3, #2
 800e884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e886:	2301      	movs	r3, #1
 800e888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e88a:	2303      	movs	r3, #3
 800e88c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800e88e:	230c      	movs	r3, #12
 800e890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e892:	f107 0314 	add.w	r3, r7, #20
 800e896:	4619      	mov	r1, r3
 800e898:	4854      	ldr	r0, [pc, #336]	; (800e9ec <HAL_SD_MspInit+0x1e8>)
 800e89a:	f7f5 fd47 	bl	800432c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e89e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e8a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8a4:	2302      	movs	r3, #2
 800e8a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8ac:	2303      	movs	r3, #3
 800e8ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800e8b0:	230c      	movs	r3, #12
 800e8b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e8b4:	f107 0314 	add.w	r3, r7, #20
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	484c      	ldr	r0, [pc, #304]	; (800e9ec <HAL_SD_MspInit+0x1e8>)
 800e8bc:	f7f5 fd36 	bl	800432c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e8c0:	2304      	movs	r3, #4
 800e8c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8c4:	2302      	movs	r3, #2
 800e8c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8cc:	2303      	movs	r3, #3
 800e8ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800e8d0:	230c      	movs	r3, #12
 800e8d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e8d4:	f107 0314 	add.w	r3, r7, #20
 800e8d8:	4619      	mov	r1, r3
 800e8da:	4845      	ldr	r0, [pc, #276]	; (800e9f0 <HAL_SD_MspInit+0x1ec>)
 800e8dc:	f7f5 fd26 	bl	800432c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800e8e0:	4b44      	ldr	r3, [pc, #272]	; (800e9f4 <HAL_SD_MspInit+0x1f0>)
 800e8e2:	4a45      	ldr	r2, [pc, #276]	; (800e9f8 <HAL_SD_MspInit+0x1f4>)
 800e8e4:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800e8e6:	4b43      	ldr	r3, [pc, #268]	; (800e9f4 <HAL_SD_MspInit+0x1f0>)
 800e8e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e8ec:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e8ee:	4b41      	ldr	r3, [pc, #260]	; (800e9f4 <HAL_SD_MspInit+0x1f0>)
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e8f4:	4b3f      	ldr	r3, [pc, #252]	; (800e9f4 <HAL_SD_MspInit+0x1f0>)
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e8fa:	4b3e      	ldr	r3, [pc, #248]	; (800e9f4 <HAL_SD_MspInit+0x1f0>)
 800e8fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e900:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e902:	4b3c      	ldr	r3, [pc, #240]	; (800e9f4 <HAL_SD_MspInit+0x1f0>)
 800e904:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e908:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e90a:	4b3a      	ldr	r3, [pc, #232]	; (800e9f4 <HAL_SD_MspInit+0x1f0>)
 800e90c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e910:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800e912:	4b38      	ldr	r3, [pc, #224]	; (800e9f4 <HAL_SD_MspInit+0x1f0>)
 800e914:	2220      	movs	r2, #32
 800e916:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e918:	4b36      	ldr	r3, [pc, #216]	; (800e9f4 <HAL_SD_MspInit+0x1f0>)
 800e91a:	2200      	movs	r2, #0
 800e91c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800e91e:	4b35      	ldr	r3, [pc, #212]	; (800e9f4 <HAL_SD_MspInit+0x1f0>)
 800e920:	2204      	movs	r2, #4
 800e922:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800e924:	4b33      	ldr	r3, [pc, #204]	; (800e9f4 <HAL_SD_MspInit+0x1f0>)
 800e926:	2203      	movs	r2, #3
 800e928:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800e92a:	4b32      	ldr	r3, [pc, #200]	; (800e9f4 <HAL_SD_MspInit+0x1f0>)
 800e92c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800e930:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800e932:	4b30      	ldr	r3, [pc, #192]	; (800e9f4 <HAL_SD_MspInit+0x1f0>)
 800e934:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e938:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800e93a:	482e      	ldr	r0, [pc, #184]	; (800e9f4 <HAL_SD_MspInit+0x1f0>)
 800e93c:	f7f5 f95e 	bl	8003bfc <HAL_DMA_Init>
 800e940:	4603      	mov	r3, r0
 800e942:	2b00      	cmp	r3, #0
 800e944:	d001      	beq.n	800e94a <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 800e946:	f7ff fcab 	bl	800e2a0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	4a29      	ldr	r2, [pc, #164]	; (800e9f4 <HAL_SD_MspInit+0x1f0>)
 800e94e:	63da      	str	r2, [r3, #60]	; 0x3c
 800e950:	4a28      	ldr	r2, [pc, #160]	; (800e9f4 <HAL_SD_MspInit+0x1f0>)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800e956:	4b29      	ldr	r3, [pc, #164]	; (800e9fc <HAL_SD_MspInit+0x1f8>)
 800e958:	4a29      	ldr	r2, [pc, #164]	; (800ea00 <HAL_SD_MspInit+0x1fc>)
 800e95a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800e95c:	4b27      	ldr	r3, [pc, #156]	; (800e9fc <HAL_SD_MspInit+0x1f8>)
 800e95e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e962:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e964:	4b25      	ldr	r3, [pc, #148]	; (800e9fc <HAL_SD_MspInit+0x1f8>)
 800e966:	2240      	movs	r2, #64	; 0x40
 800e968:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e96a:	4b24      	ldr	r3, [pc, #144]	; (800e9fc <HAL_SD_MspInit+0x1f8>)
 800e96c:	2200      	movs	r2, #0
 800e96e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e970:	4b22      	ldr	r3, [pc, #136]	; (800e9fc <HAL_SD_MspInit+0x1f8>)
 800e972:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e976:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e978:	4b20      	ldr	r3, [pc, #128]	; (800e9fc <HAL_SD_MspInit+0x1f8>)
 800e97a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e97e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800e980:	4b1e      	ldr	r3, [pc, #120]	; (800e9fc <HAL_SD_MspInit+0x1f8>)
 800e982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e986:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800e988:	4b1c      	ldr	r3, [pc, #112]	; (800e9fc <HAL_SD_MspInit+0x1f8>)
 800e98a:	2220      	movs	r2, #32
 800e98c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e98e:	4b1b      	ldr	r3, [pc, #108]	; (800e9fc <HAL_SD_MspInit+0x1f8>)
 800e990:	2200      	movs	r2, #0
 800e992:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800e994:	4b19      	ldr	r3, [pc, #100]	; (800e9fc <HAL_SD_MspInit+0x1f8>)
 800e996:	2204      	movs	r2, #4
 800e998:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800e99a:	4b18      	ldr	r3, [pc, #96]	; (800e9fc <HAL_SD_MspInit+0x1f8>)
 800e99c:	2203      	movs	r2, #3
 800e99e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800e9a0:	4b16      	ldr	r3, [pc, #88]	; (800e9fc <HAL_SD_MspInit+0x1f8>)
 800e9a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800e9a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800e9a8:	4b14      	ldr	r3, [pc, #80]	; (800e9fc <HAL_SD_MspInit+0x1f8>)
 800e9aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e9ae:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800e9b0:	4812      	ldr	r0, [pc, #72]	; (800e9fc <HAL_SD_MspInit+0x1f8>)
 800e9b2:	f7f5 f923 	bl	8003bfc <HAL_DMA_Init>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d001      	beq.n	800e9c0 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800e9bc:	f7ff fc70 	bl	800e2a0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	4a0e      	ldr	r2, [pc, #56]	; (800e9fc <HAL_SD_MspInit+0x1f8>)
 800e9c4:	641a      	str	r2, [r3, #64]	; 0x40
 800e9c6:	4a0d      	ldr	r2, [pc, #52]	; (800e9fc <HAL_SD_MspInit+0x1f8>)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	2031      	movs	r0, #49	; 0x31
 800e9d2:	f7f5 f8dc 	bl	8003b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800e9d6:	2031      	movs	r0, #49	; 0x31
 800e9d8:	f7f5 f8f5 	bl	8003bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800e9dc:	bf00      	nop
 800e9de:	3728      	adds	r7, #40	; 0x28
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	40012c00 	.word	0x40012c00
 800e9e8:	40023800 	.word	0x40023800
 800e9ec:	40020800 	.word	0x40020800
 800e9f0:	40020c00 	.word	0x40020c00
 800e9f4:	2000657c 	.word	0x2000657c
 800e9f8:	40026458 	.word	0x40026458
 800e9fc:	20006710 	.word	0x20006710
 800ea00:	400264a0 	.word	0x400264a0

0800ea04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b08a      	sub	sp, #40	; 0x28
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea0c:	f107 0314 	add.w	r3, r7, #20
 800ea10:	2200      	movs	r2, #0
 800ea12:	601a      	str	r2, [r3, #0]
 800ea14:	605a      	str	r2, [r3, #4]
 800ea16:	609a      	str	r2, [r3, #8]
 800ea18:	60da      	str	r2, [r3, #12]
 800ea1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4a19      	ldr	r2, [pc, #100]	; (800ea88 <HAL_SPI_MspInit+0x84>)
 800ea22:	4293      	cmp	r3, r2
 800ea24:	d12b      	bne.n	800ea7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ea26:	2300      	movs	r3, #0
 800ea28:	613b      	str	r3, [r7, #16]
 800ea2a:	4b18      	ldr	r3, [pc, #96]	; (800ea8c <HAL_SPI_MspInit+0x88>)
 800ea2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea2e:	4a17      	ldr	r2, [pc, #92]	; (800ea8c <HAL_SPI_MspInit+0x88>)
 800ea30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ea34:	6453      	str	r3, [r2, #68]	; 0x44
 800ea36:	4b15      	ldr	r3, [pc, #84]	; (800ea8c <HAL_SPI_MspInit+0x88>)
 800ea38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ea3e:	613b      	str	r3, [r7, #16]
 800ea40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ea42:	2300      	movs	r3, #0
 800ea44:	60fb      	str	r3, [r7, #12]
 800ea46:	4b11      	ldr	r3, [pc, #68]	; (800ea8c <HAL_SPI_MspInit+0x88>)
 800ea48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea4a:	4a10      	ldr	r2, [pc, #64]	; (800ea8c <HAL_SPI_MspInit+0x88>)
 800ea4c:	f043 0302 	orr.w	r3, r3, #2
 800ea50:	6313      	str	r3, [r2, #48]	; 0x30
 800ea52:	4b0e      	ldr	r3, [pc, #56]	; (800ea8c <HAL_SPI_MspInit+0x88>)
 800ea54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea56:	f003 0302 	and.w	r3, r3, #2
 800ea5a:	60fb      	str	r3, [r7, #12]
 800ea5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 800ea5e:	2338      	movs	r3, #56	; 0x38
 800ea60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea62:	2302      	movs	r3, #2
 800ea64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea66:	2300      	movs	r3, #0
 800ea68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea6a:	2303      	movs	r3, #3
 800ea6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ea6e:	2305      	movs	r3, #5
 800ea70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ea72:	f107 0314 	add.w	r3, r7, #20
 800ea76:	4619      	mov	r1, r3
 800ea78:	4805      	ldr	r0, [pc, #20]	; (800ea90 <HAL_SPI_MspInit+0x8c>)
 800ea7a:	f7f5 fc57 	bl	800432c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800ea7e:	bf00      	nop
 800ea80:	3728      	adds	r7, #40	; 0x28
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}
 800ea86:	bf00      	nop
 800ea88:	40013000 	.word	0x40013000
 800ea8c:	40023800 	.word	0x40023800
 800ea90:	40020400 	.word	0x40020400

0800ea94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b087      	sub	sp, #28
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eaa4:	d10e      	bne.n	800eac4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	617b      	str	r3, [r7, #20]
 800eaaa:	4b1d      	ldr	r3, [pc, #116]	; (800eb20 <HAL_TIM_Base_MspInit+0x8c>)
 800eaac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaae:	4a1c      	ldr	r2, [pc, #112]	; (800eb20 <HAL_TIM_Base_MspInit+0x8c>)
 800eab0:	f043 0301 	orr.w	r3, r3, #1
 800eab4:	6413      	str	r3, [r2, #64]	; 0x40
 800eab6:	4b1a      	ldr	r3, [pc, #104]	; (800eb20 <HAL_TIM_Base_MspInit+0x8c>)
 800eab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaba:	f003 0301 	and.w	r3, r3, #1
 800eabe:	617b      	str	r3, [r7, #20]
 800eac0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800eac2:	e026      	b.n	800eb12 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	4a16      	ldr	r2, [pc, #88]	; (800eb24 <HAL_TIM_Base_MspInit+0x90>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d10e      	bne.n	800eaec <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800eace:	2300      	movs	r3, #0
 800ead0:	613b      	str	r3, [r7, #16]
 800ead2:	4b13      	ldr	r3, [pc, #76]	; (800eb20 <HAL_TIM_Base_MspInit+0x8c>)
 800ead4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ead6:	4a12      	ldr	r2, [pc, #72]	; (800eb20 <HAL_TIM_Base_MspInit+0x8c>)
 800ead8:	f043 0302 	orr.w	r3, r3, #2
 800eadc:	6413      	str	r3, [r2, #64]	; 0x40
 800eade:	4b10      	ldr	r3, [pc, #64]	; (800eb20 <HAL_TIM_Base_MspInit+0x8c>)
 800eae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eae2:	f003 0302 	and.w	r3, r3, #2
 800eae6:	613b      	str	r3, [r7, #16]
 800eae8:	693b      	ldr	r3, [r7, #16]
}
 800eaea:	e012      	b.n	800eb12 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	4a0d      	ldr	r2, [pc, #52]	; (800eb28 <HAL_TIM_Base_MspInit+0x94>)
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d10d      	bne.n	800eb12 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	60fb      	str	r3, [r7, #12]
 800eafa:	4b09      	ldr	r3, [pc, #36]	; (800eb20 <HAL_TIM_Base_MspInit+0x8c>)
 800eafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eafe:	4a08      	ldr	r2, [pc, #32]	; (800eb20 <HAL_TIM_Base_MspInit+0x8c>)
 800eb00:	f043 0308 	orr.w	r3, r3, #8
 800eb04:	6413      	str	r3, [r2, #64]	; 0x40
 800eb06:	4b06      	ldr	r3, [pc, #24]	; (800eb20 <HAL_TIM_Base_MspInit+0x8c>)
 800eb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb0a:	f003 0308 	and.w	r3, r3, #8
 800eb0e:	60fb      	str	r3, [r7, #12]
 800eb10:	68fb      	ldr	r3, [r7, #12]
}
 800eb12:	bf00      	nop
 800eb14:	371c      	adds	r7, #28
 800eb16:	46bd      	mov	sp, r7
 800eb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1c:	4770      	bx	lr
 800eb1e:	bf00      	nop
 800eb20:	40023800 	.word	0x40023800
 800eb24:	40000400 	.word	0x40000400
 800eb28:	40000c00 	.word	0x40000c00

0800eb2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b08a      	sub	sp, #40	; 0x28
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb34:	f107 0314 	add.w	r3, r7, #20
 800eb38:	2200      	movs	r2, #0
 800eb3a:	601a      	str	r2, [r3, #0]
 800eb3c:	605a      	str	r2, [r3, #4]
 800eb3e:	609a      	str	r2, [r3, #8]
 800eb40:	60da      	str	r2, [r3, #12]
 800eb42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	4a24      	ldr	r2, [pc, #144]	; (800ebdc <HAL_TIM_MspPostInit+0xb0>)
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d11e      	bne.n	800eb8c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eb4e:	2300      	movs	r3, #0
 800eb50:	613b      	str	r3, [r7, #16]
 800eb52:	4b23      	ldr	r3, [pc, #140]	; (800ebe0 <HAL_TIM_MspPostInit+0xb4>)
 800eb54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb56:	4a22      	ldr	r2, [pc, #136]	; (800ebe0 <HAL_TIM_MspPostInit+0xb4>)
 800eb58:	f043 0302 	orr.w	r3, r3, #2
 800eb5c:	6313      	str	r3, [r2, #48]	; 0x30
 800eb5e:	4b20      	ldr	r3, [pc, #128]	; (800ebe0 <HAL_TIM_MspPostInit+0xb4>)
 800eb60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb62:	f003 0302 	and.w	r3, r3, #2
 800eb66:	613b      	str	r3, [r7, #16]
 800eb68:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = P6_Pin|P3_Pin;
 800eb6a:	2303      	movs	r3, #3
 800eb6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb6e:	2302      	movs	r3, #2
 800eb70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb72:	2300      	movs	r3, #0
 800eb74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eb76:	2300      	movs	r3, #0
 800eb78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800eb7a:	2302      	movs	r3, #2
 800eb7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eb7e:	f107 0314 	add.w	r3, r7, #20
 800eb82:	4619      	mov	r1, r3
 800eb84:	4817      	ldr	r0, [pc, #92]	; (800ebe4 <HAL_TIM_MspPostInit+0xb8>)
 800eb86:	f7f5 fbd1 	bl	800432c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800eb8a:	e022      	b.n	800ebd2 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4a15      	ldr	r2, [pc, #84]	; (800ebe8 <HAL_TIM_MspPostInit+0xbc>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d11d      	bne.n	800ebd2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb96:	2300      	movs	r3, #0
 800eb98:	60fb      	str	r3, [r7, #12]
 800eb9a:	4b11      	ldr	r3, [pc, #68]	; (800ebe0 <HAL_TIM_MspPostInit+0xb4>)
 800eb9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb9e:	4a10      	ldr	r2, [pc, #64]	; (800ebe0 <HAL_TIM_MspPostInit+0xb4>)
 800eba0:	f043 0301 	orr.w	r3, r3, #1
 800eba4:	6313      	str	r3, [r2, #48]	; 0x30
 800eba6:	4b0e      	ldr	r3, [pc, #56]	; (800ebe0 <HAL_TIM_MspPostInit+0xb4>)
 800eba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebaa:	f003 0301 	and.w	r3, r3, #1
 800ebae:	60fb      	str	r3, [r7, #12]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EN_L_Pin|EN_R_Pin;
 800ebb2:	230a      	movs	r3, #10
 800ebb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebb6:	2302      	movs	r3, #2
 800ebb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800ebc2:	2302      	movs	r3, #2
 800ebc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ebc6:	f107 0314 	add.w	r3, r7, #20
 800ebca:	4619      	mov	r1, r3
 800ebcc:	4807      	ldr	r0, [pc, #28]	; (800ebec <HAL_TIM_MspPostInit+0xc0>)
 800ebce:	f7f5 fbad 	bl	800432c <HAL_GPIO_Init>
}
 800ebd2:	bf00      	nop
 800ebd4:	3728      	adds	r7, #40	; 0x28
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	40000400 	.word	0x40000400
 800ebe0:	40023800 	.word	0x40023800
 800ebe4:	40020400 	.word	0x40020400
 800ebe8:	40000c00 	.word	0x40000c00
 800ebec:	40020000 	.word	0x40020000

0800ebf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b08a      	sub	sp, #40	; 0x28
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ebf8:	f107 0314 	add.w	r3, r7, #20
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	601a      	str	r2, [r3, #0]
 800ec00:	605a      	str	r2, [r3, #4]
 800ec02:	609a      	str	r2, [r3, #8]
 800ec04:	60da      	str	r2, [r3, #12]
 800ec06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4a1d      	ldr	r2, [pc, #116]	; (800ec84 <HAL_UART_MspInit+0x94>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d134      	bne.n	800ec7c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800ec12:	2300      	movs	r3, #0
 800ec14:	613b      	str	r3, [r7, #16]
 800ec16:	4b1c      	ldr	r3, [pc, #112]	; (800ec88 <HAL_UART_MspInit+0x98>)
 800ec18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec1a:	4a1b      	ldr	r2, [pc, #108]	; (800ec88 <HAL_UART_MspInit+0x98>)
 800ec1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ec20:	6413      	str	r3, [r2, #64]	; 0x40
 800ec22:	4b19      	ldr	r3, [pc, #100]	; (800ec88 <HAL_UART_MspInit+0x98>)
 800ec24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ec2a:	613b      	str	r3, [r7, #16]
 800ec2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ec2e:	2300      	movs	r3, #0
 800ec30:	60fb      	str	r3, [r7, #12]
 800ec32:	4b15      	ldr	r3, [pc, #84]	; (800ec88 <HAL_UART_MspInit+0x98>)
 800ec34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec36:	4a14      	ldr	r2, [pc, #80]	; (800ec88 <HAL_UART_MspInit+0x98>)
 800ec38:	f043 0302 	orr.w	r3, r3, #2
 800ec3c:	6313      	str	r3, [r2, #48]	; 0x30
 800ec3e:	4b12      	ldr	r3, [pc, #72]	; (800ec88 <HAL_UART_MspInit+0x98>)
 800ec40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec42:	f003 0302 	and.w	r3, r3, #2
 800ec46:	60fb      	str	r3, [r7, #12]
 800ec48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 800ec4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ec4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec50:	2302      	movs	r3, #2
 800ec52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ec54:	2301      	movs	r3, #1
 800ec56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec58:	2303      	movs	r3, #3
 800ec5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ec5c:	2307      	movs	r3, #7
 800ec5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ec60:	f107 0314 	add.w	r3, r7, #20
 800ec64:	4619      	mov	r1, r3
 800ec66:	4809      	ldr	r0, [pc, #36]	; (800ec8c <HAL_UART_MspInit+0x9c>)
 800ec68:	f7f5 fb60 	bl	800432c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	2100      	movs	r1, #0
 800ec70:	2027      	movs	r0, #39	; 0x27
 800ec72:	f7f4 ff8c 	bl	8003b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800ec76:	2027      	movs	r0, #39	; 0x27
 800ec78:	f7f4 ffa5 	bl	8003bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800ec7c:	bf00      	nop
 800ec7e:	3728      	adds	r7, #40	; 0x28
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}
 800ec84:	40004800 	.word	0x40004800
 800ec88:	40023800 	.word	0x40023800
 800ec8c:	40020400 	.word	0x40020400

0800ec90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ec90:	b480      	push	{r7}
 800ec92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ec94:	bf00      	nop
 800ec96:	46bd      	mov	sp, r7
 800ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9c:	4770      	bx	lr

0800ec9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ec9e:	b480      	push	{r7}
 800eca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800eca2:	e7fe      	b.n	800eca2 <HardFault_Handler+0x4>

0800eca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800eca4:	b480      	push	{r7}
 800eca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800eca8:	e7fe      	b.n	800eca8 <MemManage_Handler+0x4>

0800ecaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ecaa:	b480      	push	{r7}
 800ecac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ecae:	e7fe      	b.n	800ecae <BusFault_Handler+0x4>

0800ecb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ecb4:	e7fe      	b.n	800ecb4 <UsageFault_Handler+0x4>

0800ecb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ecb6:	b480      	push	{r7}
 800ecb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ecba:	bf00      	nop
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ecc8:	bf00      	nop
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr

0800ecd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ecd2:	b480      	push	{r7}
 800ecd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ecd6:	bf00      	nop
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr

0800ece0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ece4:	f7f4 fe36 	bl	8003954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ece8:	bf00      	nop
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800ecf0:	4802      	ldr	r0, [pc, #8]	; (800ecfc <USART3_IRQHandler+0x10>)
 800ecf2:	f7fa fc83 	bl	80095fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800ecf6:	bf00      	nop
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	200065dc 	.word	0x200065dc

0800ed00 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800ed04:	4802      	ldr	r0, [pc, #8]	; (800ed10 <SDIO_IRQHandler+0x10>)
 800ed06:	f7f8 fdd7 	bl	80078b8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800ed0a:	bf00      	nop
 800ed0c:	bd80      	pop	{r7, pc}
 800ed0e:	bf00      	nop
 800ed10:	20006770 	.word	0x20006770

0800ed14 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800ed18:	4802      	ldr	r0, [pc, #8]	; (800ed24 <DMA2_Stream3_IRQHandler+0x10>)
 800ed1a:	f7f5 f89f 	bl	8003e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800ed1e:	bf00      	nop
 800ed20:	bd80      	pop	{r7, pc}
 800ed22:	bf00      	nop
 800ed24:	2000657c 	.word	0x2000657c

0800ed28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800ed2c:	4802      	ldr	r0, [pc, #8]	; (800ed38 <OTG_FS_IRQHandler+0x10>)
 800ed2e:	f7f6 fd98 	bl	8005862 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800ed32:	bf00      	nop
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	2000788c 	.word	0x2000788c

0800ed3c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800ed40:	4802      	ldr	r0, [pc, #8]	; (800ed4c <DMA2_Stream6_IRQHandler+0x10>)
 800ed42:	f7f5 f88b 	bl	8003e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800ed46:	bf00      	nop
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	20006710 	.word	0x20006710

0800ed50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ed58:	4b11      	ldr	r3, [pc, #68]	; (800eda0 <_sbrk+0x50>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d102      	bne.n	800ed66 <_sbrk+0x16>
		heap_end = &end;
 800ed60:	4b0f      	ldr	r3, [pc, #60]	; (800eda0 <_sbrk+0x50>)
 800ed62:	4a10      	ldr	r2, [pc, #64]	; (800eda4 <_sbrk+0x54>)
 800ed64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800ed66:	4b0e      	ldr	r3, [pc, #56]	; (800eda0 <_sbrk+0x50>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ed6c:	4b0c      	ldr	r3, [pc, #48]	; (800eda0 <_sbrk+0x50>)
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	4413      	add	r3, r2
 800ed74:	466a      	mov	r2, sp
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d907      	bls.n	800ed8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800ed7a:	f000 fd9f 	bl	800f8bc <__errno>
 800ed7e:	4602      	mov	r2, r0
 800ed80:	230c      	movs	r3, #12
 800ed82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800ed84:	f04f 33ff 	mov.w	r3, #4294967295
 800ed88:	e006      	b.n	800ed98 <_sbrk+0x48>
	}

	heap_end += incr;
 800ed8a:	4b05      	ldr	r3, [pc, #20]	; (800eda0 <_sbrk+0x50>)
 800ed8c:	681a      	ldr	r2, [r3, #0]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	4413      	add	r3, r2
 800ed92:	4a03      	ldr	r2, [pc, #12]	; (800eda0 <_sbrk+0x50>)
 800ed94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800ed96:	68fb      	ldr	r3, [r7, #12]
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3710      	adds	r7, #16
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	200009d0 	.word	0x200009d0
 800eda4:	20007e98 	.word	0x20007e98

0800eda8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800eda8:	b480      	push	{r7}
 800edaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800edac:	4b16      	ldr	r3, [pc, #88]	; (800ee08 <SystemInit+0x60>)
 800edae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edb2:	4a15      	ldr	r2, [pc, #84]	; (800ee08 <SystemInit+0x60>)
 800edb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800edb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800edbc:	4b13      	ldr	r3, [pc, #76]	; (800ee0c <SystemInit+0x64>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	4a12      	ldr	r2, [pc, #72]	; (800ee0c <SystemInit+0x64>)
 800edc2:	f043 0301 	orr.w	r3, r3, #1
 800edc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800edc8:	4b10      	ldr	r3, [pc, #64]	; (800ee0c <SystemInit+0x64>)
 800edca:	2200      	movs	r2, #0
 800edcc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800edce:	4b0f      	ldr	r3, [pc, #60]	; (800ee0c <SystemInit+0x64>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	4a0e      	ldr	r2, [pc, #56]	; (800ee0c <SystemInit+0x64>)
 800edd4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800edd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eddc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800edde:	4b0b      	ldr	r3, [pc, #44]	; (800ee0c <SystemInit+0x64>)
 800ede0:	4a0b      	ldr	r2, [pc, #44]	; (800ee10 <SystemInit+0x68>)
 800ede2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ede4:	4b09      	ldr	r3, [pc, #36]	; (800ee0c <SystemInit+0x64>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	4a08      	ldr	r2, [pc, #32]	; (800ee0c <SystemInit+0x64>)
 800edea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800edee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800edf0:	4b06      	ldr	r3, [pc, #24]	; (800ee0c <SystemInit+0x64>)
 800edf2:	2200      	movs	r2, #0
 800edf4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800edf6:	4b04      	ldr	r3, [pc, #16]	; (800ee08 <SystemInit+0x60>)
 800edf8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800edfc:	609a      	str	r2, [r3, #8]
#endif
}
 800edfe:	bf00      	nop
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr
 800ee08:	e000ed00 	.word	0xe000ed00
 800ee0c:	40023800 	.word	0x40023800
 800ee10:	24003010 	.word	0x24003010

0800ee14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ee18:	2200      	movs	r2, #0
 800ee1a:	4912      	ldr	r1, [pc, #72]	; (800ee64 <MX_USB_DEVICE_Init+0x50>)
 800ee1c:	4812      	ldr	r0, [pc, #72]	; (800ee68 <MX_USB_DEVICE_Init+0x54>)
 800ee1e:	f7fd fb3b 	bl	800c498 <USBD_Init>
 800ee22:	4603      	mov	r3, r0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d001      	beq.n	800ee2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ee28:	f7ff fa3a 	bl	800e2a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ee2c:	490f      	ldr	r1, [pc, #60]	; (800ee6c <MX_USB_DEVICE_Init+0x58>)
 800ee2e:	480e      	ldr	r0, [pc, #56]	; (800ee68 <MX_USB_DEVICE_Init+0x54>)
 800ee30:	f7fd fb5d 	bl	800c4ee <USBD_RegisterClass>
 800ee34:	4603      	mov	r3, r0
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d001      	beq.n	800ee3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ee3a:	f7ff fa31 	bl	800e2a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ee3e:	490c      	ldr	r1, [pc, #48]	; (800ee70 <MX_USB_DEVICE_Init+0x5c>)
 800ee40:	4809      	ldr	r0, [pc, #36]	; (800ee68 <MX_USB_DEVICE_Init+0x54>)
 800ee42:	f7fd fa8b 	bl	800c35c <USBD_CDC_RegisterInterface>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d001      	beq.n	800ee50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ee4c:	f7ff fa28 	bl	800e2a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ee50:	4805      	ldr	r0, [pc, #20]	; (800ee68 <MX_USB_DEVICE_Init+0x54>)
 800ee52:	f7fd fb66 	bl	800c522 <USBD_Start>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d001      	beq.n	800ee60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ee5c:	f7ff fa20 	bl	800e2a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ee60:	bf00      	nop
 800ee62:	bd80      	pop	{r7, pc}
 800ee64:	20000170 	.word	0x20000170
 800ee68:	200009dc 	.word	0x200009dc
 800ee6c:	20000014 	.word	0x20000014
 800ee70:	20000160 	.word	0x20000160

0800ee74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ee78:	2200      	movs	r2, #0
 800ee7a:	4905      	ldr	r1, [pc, #20]	; (800ee90 <CDC_Init_FS+0x1c>)
 800ee7c:	4805      	ldr	r0, [pc, #20]	; (800ee94 <CDC_Init_FS+0x20>)
 800ee7e:	f7fd fa84 	bl	800c38a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ee82:	4905      	ldr	r1, [pc, #20]	; (800ee98 <CDC_Init_FS+0x24>)
 800ee84:	4803      	ldr	r0, [pc, #12]	; (800ee94 <CDC_Init_FS+0x20>)
 800ee86:	f7fd fa9a 	bl	800c3be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ee8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	2000708c 	.word	0x2000708c
 800ee94:	200009dc 	.word	0x200009dc
 800ee98:	2000688c 	.word	0x2000688c

0800ee9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800eea0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr

0800eeac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b085      	sub	sp, #20
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	6039      	str	r1, [r7, #0]
 800eeb6:	71fb      	strb	r3, [r7, #7]
 800eeb8:	4613      	mov	r3, r2
 800eeba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800eebc:	f107 0308 	add.w	r3, r7, #8
 800eec0:	2200      	movs	r2, #0
 800eec2:	601a      	str	r2, [r3, #0]
 800eec4:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800eec8:	79fb      	ldrb	r3, [r7, #7]
 800eeca:	2b23      	cmp	r3, #35	; 0x23
 800eecc:	d87c      	bhi.n	800efc8 <CDC_Control_FS+0x11c>
 800eece:	a201      	add	r2, pc, #4	; (adr r2, 800eed4 <CDC_Control_FS+0x28>)
 800eed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eed4:	0800efc9 	.word	0x0800efc9
 800eed8:	0800efc9 	.word	0x0800efc9
 800eedc:	0800efc9 	.word	0x0800efc9
 800eee0:	0800efc9 	.word	0x0800efc9
 800eee4:	0800efc9 	.word	0x0800efc9
 800eee8:	0800efc9 	.word	0x0800efc9
 800eeec:	0800efc9 	.word	0x0800efc9
 800eef0:	0800efc9 	.word	0x0800efc9
 800eef4:	0800efc9 	.word	0x0800efc9
 800eef8:	0800efc9 	.word	0x0800efc9
 800eefc:	0800efc9 	.word	0x0800efc9
 800ef00:	0800efc9 	.word	0x0800efc9
 800ef04:	0800efc9 	.word	0x0800efc9
 800ef08:	0800efc9 	.word	0x0800efc9
 800ef0c:	0800efc9 	.word	0x0800efc9
 800ef10:	0800efc9 	.word	0x0800efc9
 800ef14:	0800efc9 	.word	0x0800efc9
 800ef18:	0800efc9 	.word	0x0800efc9
 800ef1c:	0800efc9 	.word	0x0800efc9
 800ef20:	0800efc9 	.word	0x0800efc9
 800ef24:	0800efc9 	.word	0x0800efc9
 800ef28:	0800efc9 	.word	0x0800efc9
 800ef2c:	0800efc9 	.word	0x0800efc9
 800ef30:	0800efc9 	.word	0x0800efc9
 800ef34:	0800efc9 	.word	0x0800efc9
 800ef38:	0800efc9 	.word	0x0800efc9
 800ef3c:	0800efc9 	.word	0x0800efc9
 800ef40:	0800efc9 	.word	0x0800efc9
 800ef44:	0800efc9 	.word	0x0800efc9
 800ef48:	0800efc9 	.word	0x0800efc9
 800ef4c:	0800efc9 	.word	0x0800efc9
 800ef50:	0800efc9 	.word	0x0800efc9
 800ef54:	0800ef65 	.word	0x0800ef65
 800ef58:	0800ef91 	.word	0x0800ef91
 800ef5c:	0800efc9 	.word	0x0800efc9
 800ef60:	0800efc9 	.word	0x0800efc9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	tempbuf[0] = pbuf[0];
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	723b      	strb	r3, [r7, #8]
        	tempbuf[1] = pbuf[1];
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	785b      	ldrb	r3, [r3, #1]
 800ef6e:	727b      	strb	r3, [r7, #9]
        	tempbuf[2] = pbuf[2];
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	789b      	ldrb	r3, [r3, #2]
 800ef74:	72bb      	strb	r3, [r7, #10]
        	tempbuf[3] = pbuf[3];
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	78db      	ldrb	r3, [r3, #3]
 800ef7a:	72fb      	strb	r3, [r7, #11]
        	tempbuf[4] = pbuf[4];
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	791b      	ldrb	r3, [r3, #4]
 800ef80:	733b      	strb	r3, [r7, #12]
        	tempbuf[5] = pbuf[5];
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	795b      	ldrb	r3, [r3, #5]
 800ef86:	737b      	strb	r3, [r7, #13]
        	tempbuf[6] = pbuf[6];
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	799b      	ldrb	r3, [r3, #6]
 800ef8c:	73bb      	strb	r3, [r7, #14]
        	break;
 800ef8e:	e01c      	b.n	800efca <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
        	pbuf[0] = tempbuf[0];
 800ef90:	7a3a      	ldrb	r2, [r7, #8]
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	701a      	strb	r2, [r3, #0]
        	pbuf[1] = tempbuf[1];
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	3301      	adds	r3, #1
 800ef9a:	7a7a      	ldrb	r2, [r7, #9]
 800ef9c:	701a      	strb	r2, [r3, #0]
        	pbuf[2] = tempbuf[2];
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	3302      	adds	r3, #2
 800efa2:	7aba      	ldrb	r2, [r7, #10]
 800efa4:	701a      	strb	r2, [r3, #0]
        	pbuf[3] = tempbuf[3];
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	3303      	adds	r3, #3
 800efaa:	7afa      	ldrb	r2, [r7, #11]
 800efac:	701a      	strb	r2, [r3, #0]
        	pbuf[4] = tempbuf[4];
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	3304      	adds	r3, #4
 800efb2:	7b3a      	ldrb	r2, [r7, #12]
 800efb4:	701a      	strb	r2, [r3, #0]
        	pbuf[5] = tempbuf[5];
 800efb6:	683b      	ldr	r3, [r7, #0]
 800efb8:	3305      	adds	r3, #5
 800efba:	7b7a      	ldrb	r2, [r7, #13]
 800efbc:	701a      	strb	r2, [r3, #0]
        	pbuf[6] = tempbuf[6];
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	3306      	adds	r3, #6
 800efc2:	7bba      	ldrb	r2, [r7, #14]
 800efc4:	701a      	strb	r2, [r3, #0]
        	break;
 800efc6:	e000      	b.n	800efca <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800efc8:	bf00      	nop
  }

  return (USBD_OK);
 800efca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3714      	adds	r7, #20
 800efd0:	46bd      	mov	sp, r7
 800efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd6:	4770      	bx	lr

0800efd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b082      	sub	sp, #8
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800efe2:	6879      	ldr	r1, [r7, #4]
 800efe4:	4805      	ldr	r0, [pc, #20]	; (800effc <CDC_Receive_FS+0x24>)
 800efe6:	f7fd f9ea 	bl	800c3be <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800efea:	4804      	ldr	r0, [pc, #16]	; (800effc <CDC_Receive_FS+0x24>)
 800efec:	f7fd fa2a 	bl	800c444 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800eff0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3708      	adds	r7, #8
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}
 800effa:	bf00      	nop
 800effc:	200009dc 	.word	0x200009dc

0800f000 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b084      	sub	sp, #16
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	460b      	mov	r3, r1
 800f00a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f00c:	2300      	movs	r3, #0
 800f00e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f010:	4b0d      	ldr	r3, [pc, #52]	; (800f048 <CDC_Transmit_FS+0x48>)
 800f012:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800f016:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d001      	beq.n	800f026 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f022:	2301      	movs	r3, #1
 800f024:	e00b      	b.n	800f03e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f026:	887b      	ldrh	r3, [r7, #2]
 800f028:	461a      	mov	r2, r3
 800f02a:	6879      	ldr	r1, [r7, #4]
 800f02c:	4806      	ldr	r0, [pc, #24]	; (800f048 <CDC_Transmit_FS+0x48>)
 800f02e:	f7fd f9ac 	bl	800c38a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f032:	4805      	ldr	r0, [pc, #20]	; (800f048 <CDC_Transmit_FS+0x48>)
 800f034:	f7fd f9d7 	bl	800c3e6 <USBD_CDC_TransmitPacket>
 800f038:	4603      	mov	r3, r0
 800f03a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3710      	adds	r7, #16
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	200009dc 	.word	0x200009dc

0800f04c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b08a      	sub	sp, #40	; 0x28
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f054:	f107 0314 	add.w	r3, r7, #20
 800f058:	2200      	movs	r2, #0
 800f05a:	601a      	str	r2, [r3, #0]
 800f05c:	605a      	str	r2, [r3, #4]
 800f05e:	609a      	str	r2, [r3, #8]
 800f060:	60da      	str	r2, [r3, #12]
 800f062:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f06c:	d13a      	bne.n	800f0e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f06e:	2300      	movs	r3, #0
 800f070:	613b      	str	r3, [r7, #16]
 800f072:	4b1e      	ldr	r3, [pc, #120]	; (800f0ec <HAL_PCD_MspInit+0xa0>)
 800f074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f076:	4a1d      	ldr	r2, [pc, #116]	; (800f0ec <HAL_PCD_MspInit+0xa0>)
 800f078:	f043 0301 	orr.w	r3, r3, #1
 800f07c:	6313      	str	r3, [r2, #48]	; 0x30
 800f07e:	4b1b      	ldr	r3, [pc, #108]	; (800f0ec <HAL_PCD_MspInit+0xa0>)
 800f080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f082:	f003 0301 	and.w	r3, r3, #1
 800f086:	613b      	str	r3, [r7, #16]
 800f088:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800f08a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f08e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f090:	2302      	movs	r3, #2
 800f092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f094:	2300      	movs	r3, #0
 800f096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f098:	2303      	movs	r3, #3
 800f09a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f09c:	230a      	movs	r3, #10
 800f09e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f0a0:	f107 0314 	add.w	r3, r7, #20
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	4812      	ldr	r0, [pc, #72]	; (800f0f0 <HAL_PCD_MspInit+0xa4>)
 800f0a8:	f7f5 f940 	bl	800432c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f0ac:	4b0f      	ldr	r3, [pc, #60]	; (800f0ec <HAL_PCD_MspInit+0xa0>)
 800f0ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0b0:	4a0e      	ldr	r2, [pc, #56]	; (800f0ec <HAL_PCD_MspInit+0xa0>)
 800f0b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0b6:	6353      	str	r3, [r2, #52]	; 0x34
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	60fb      	str	r3, [r7, #12]
 800f0bc:	4b0b      	ldr	r3, [pc, #44]	; (800f0ec <HAL_PCD_MspInit+0xa0>)
 800f0be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0c0:	4a0a      	ldr	r2, [pc, #40]	; (800f0ec <HAL_PCD_MspInit+0xa0>)
 800f0c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f0c6:	6453      	str	r3, [r2, #68]	; 0x44
 800f0c8:	4b08      	ldr	r3, [pc, #32]	; (800f0ec <HAL_PCD_MspInit+0xa0>)
 800f0ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f0d0:	60fb      	str	r3, [r7, #12]
 800f0d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	2043      	movs	r0, #67	; 0x43
 800f0da:	f7f4 fd58 	bl	8003b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f0de:	2043      	movs	r0, #67	; 0x43
 800f0e0:	f7f4 fd71 	bl	8003bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f0e4:	bf00      	nop
 800f0e6:	3728      	adds	r7, #40	; 0x28
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	40023800 	.word	0x40023800
 800f0f0:	40020000 	.word	0x40020000

0800f0f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f108:	4619      	mov	r1, r3
 800f10a:	4610      	mov	r0, r2
 800f10c:	f7fd fa52 	bl	800c5b4 <USBD_LL_SetupStage>
}
 800f110:	bf00      	nop
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	460b      	mov	r3, r1
 800f122:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f12a:	78fa      	ldrb	r2, [r7, #3]
 800f12c:	6879      	ldr	r1, [r7, #4]
 800f12e:	4613      	mov	r3, r2
 800f130:	00db      	lsls	r3, r3, #3
 800f132:	1a9b      	subs	r3, r3, r2
 800f134:	009b      	lsls	r3, r3, #2
 800f136:	440b      	add	r3, r1
 800f138:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	78fb      	ldrb	r3, [r7, #3]
 800f140:	4619      	mov	r1, r3
 800f142:	f7fd fa82 	bl	800c64a <USBD_LL_DataOutStage>
}
 800f146:	bf00      	nop
 800f148:	3708      	adds	r7, #8
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}

0800f14e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f14e:	b580      	push	{r7, lr}
 800f150:	b082      	sub	sp, #8
 800f152:	af00      	add	r7, sp, #0
 800f154:	6078      	str	r0, [r7, #4]
 800f156:	460b      	mov	r3, r1
 800f158:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f160:	78fa      	ldrb	r2, [r7, #3]
 800f162:	6879      	ldr	r1, [r7, #4]
 800f164:	4613      	mov	r3, r2
 800f166:	00db      	lsls	r3, r3, #3
 800f168:	1a9b      	subs	r3, r3, r2
 800f16a:	009b      	lsls	r3, r3, #2
 800f16c:	440b      	add	r3, r1
 800f16e:	3348      	adds	r3, #72	; 0x48
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	78fb      	ldrb	r3, [r7, #3]
 800f174:	4619      	mov	r1, r3
 800f176:	f7fd fad9 	bl	800c72c <USBD_LL_DataInStage>
}
 800f17a:	bf00      	nop
 800f17c:	3708      	adds	r7, #8
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f182:	b580      	push	{r7, lr}
 800f184:	b082      	sub	sp, #8
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f190:	4618      	mov	r0, r3
 800f192:	f7fd fbe7 	bl	800c964 <USBD_LL_SOF>
}
 800f196:	bf00      	nop
 800f198:	3708      	adds	r7, #8
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}

0800f19e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800f19e:	b580      	push	{r7, lr}
 800f1a0:	b084      	sub	sp, #16
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	68db      	ldr	r3, [r3, #12]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d102      	bne.n	800f1b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	73fb      	strb	r3, [r7, #15]
 800f1b6:	e008      	b.n	800f1ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	2b02      	cmp	r3, #2
 800f1be:	d102      	bne.n	800f1c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	73fb      	strb	r3, [r7, #15]
 800f1c4:	e001      	b.n	800f1ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f1c6:	f7ff f86b 	bl	800e2a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f1d0:	7bfa      	ldrb	r2, [r7, #15]
 800f1d2:	4611      	mov	r1, r2
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7fd fb8f 	bl	800c8f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7fd fb48 	bl	800c876 <USBD_LL_Reset>
}
 800f1e6:	bf00      	nop
 800f1e8:	3710      	adds	r7, #16
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
	...

0800f1f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7fd fb8a 	bl	800c918 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	687a      	ldr	r2, [r7, #4]
 800f210:	6812      	ldr	r2, [r2, #0]
 800f212:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f216:	f043 0301 	orr.w	r3, r3, #1
 800f21a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6a1b      	ldr	r3, [r3, #32]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d005      	beq.n	800f230 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f224:	4b04      	ldr	r3, [pc, #16]	; (800f238 <HAL_PCD_SuspendCallback+0x48>)
 800f226:	691b      	ldr	r3, [r3, #16]
 800f228:	4a03      	ldr	r2, [pc, #12]	; (800f238 <HAL_PCD_SuspendCallback+0x48>)
 800f22a:	f043 0306 	orr.w	r3, r3, #6
 800f22e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f230:	bf00      	nop
 800f232:	3708      	adds	r7, #8
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}
 800f238:	e000ed00 	.word	0xe000ed00

0800f23c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7fd fb79 	bl	800c942 <USBD_LL_Resume>
}
 800f250:	bf00      	nop
 800f252:	3708      	adds	r7, #8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}

0800f258 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	460b      	mov	r3, r1
 800f262:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f26a:	78fa      	ldrb	r2, [r7, #3]
 800f26c:	4611      	mov	r1, r2
 800f26e:	4618      	mov	r0, r3
 800f270:	f7fd fb9f 	bl	800c9b2 <USBD_LL_IsoOUTIncomplete>
}
 800f274:	bf00      	nop
 800f276:	3708      	adds	r7, #8
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	460b      	mov	r3, r1
 800f286:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f28e:	78fa      	ldrb	r2, [r7, #3]
 800f290:	4611      	mov	r1, r2
 800f292:	4618      	mov	r0, r3
 800f294:	f7fd fb80 	bl	800c998 <USBD_LL_IsoINIncomplete>
}
 800f298:	bf00      	nop
 800f29a:	3708      	adds	r7, #8
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fd fb8c 	bl	800c9cc <USBD_LL_DevConnected>
}
 800f2b4:	bf00      	nop
 800f2b6:	3708      	adds	r7, #8
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7fd fb89 	bl	800c9e2 <USBD_LL_DevDisconnected>
}
 800f2d0:	bf00      	nop
 800f2d2:	3708      	adds	r7, #8
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d13c      	bne.n	800f362 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f2e8:	4a20      	ldr	r2, [pc, #128]	; (800f36c <USBD_LL_Init+0x94>)
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	4a1e      	ldr	r2, [pc, #120]	; (800f36c <USBD_LL_Init+0x94>)
 800f2f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f2f8:	4b1c      	ldr	r3, [pc, #112]	; (800f36c <USBD_LL_Init+0x94>)
 800f2fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f2fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f300:	4b1a      	ldr	r3, [pc, #104]	; (800f36c <USBD_LL_Init+0x94>)
 800f302:	2204      	movs	r2, #4
 800f304:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f306:	4b19      	ldr	r3, [pc, #100]	; (800f36c <USBD_LL_Init+0x94>)
 800f308:	2202      	movs	r2, #2
 800f30a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f30c:	4b17      	ldr	r3, [pc, #92]	; (800f36c <USBD_LL_Init+0x94>)
 800f30e:	2200      	movs	r2, #0
 800f310:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f312:	4b16      	ldr	r3, [pc, #88]	; (800f36c <USBD_LL_Init+0x94>)
 800f314:	2202      	movs	r2, #2
 800f316:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f318:	4b14      	ldr	r3, [pc, #80]	; (800f36c <USBD_LL_Init+0x94>)
 800f31a:	2200      	movs	r2, #0
 800f31c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f31e:	4b13      	ldr	r3, [pc, #76]	; (800f36c <USBD_LL_Init+0x94>)
 800f320:	2200      	movs	r2, #0
 800f322:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f324:	4b11      	ldr	r3, [pc, #68]	; (800f36c <USBD_LL_Init+0x94>)
 800f326:	2200      	movs	r2, #0
 800f328:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f32a:	4b10      	ldr	r3, [pc, #64]	; (800f36c <USBD_LL_Init+0x94>)
 800f32c:	2200      	movs	r2, #0
 800f32e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f330:	4b0e      	ldr	r3, [pc, #56]	; (800f36c <USBD_LL_Init+0x94>)
 800f332:	2200      	movs	r2, #0
 800f334:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f336:	480d      	ldr	r0, [pc, #52]	; (800f36c <USBD_LL_Init+0x94>)
 800f338:	f7f6 f943 	bl	80055c2 <HAL_PCD_Init>
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d001      	beq.n	800f346 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f342:	f7fe ffad 	bl	800e2a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f346:	2180      	movs	r1, #128	; 0x80
 800f348:	4808      	ldr	r0, [pc, #32]	; (800f36c <USBD_LL_Init+0x94>)
 800f34a:	f7f7 faa8 	bl	800689e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f34e:	2240      	movs	r2, #64	; 0x40
 800f350:	2100      	movs	r1, #0
 800f352:	4806      	ldr	r0, [pc, #24]	; (800f36c <USBD_LL_Init+0x94>)
 800f354:	f7f7 fa5c 	bl	8006810 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f358:	2280      	movs	r2, #128	; 0x80
 800f35a:	2101      	movs	r1, #1
 800f35c:	4803      	ldr	r0, [pc, #12]	; (800f36c <USBD_LL_Init+0x94>)
 800f35e:	f7f7 fa57 	bl	8006810 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f362:	2300      	movs	r3, #0
}
 800f364:	4618      	mov	r0, r3
 800f366:	3708      	adds	r7, #8
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	2000788c 	.word	0x2000788c

0800f370 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f378:	2300      	movs	r3, #0
 800f37a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f37c:	2300      	movs	r3, #0
 800f37e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f386:	4618      	mov	r0, r3
 800f388:	f7f6 fa38 	bl	80057fc <HAL_PCD_Start>
 800f38c:	4603      	mov	r3, r0
 800f38e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800f390:	7bfb      	ldrb	r3, [r7, #15]
 800f392:	4618      	mov	r0, r3
 800f394:	f000 f92e 	bl	800f5f4 <USBD_Get_USB_Status>
 800f398:	4603      	mov	r3, r0
 800f39a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800f39c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3710      	adds	r7, #16
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}

0800f3a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f3a6:	b580      	push	{r7, lr}
 800f3a8:	b084      	sub	sp, #16
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	6078      	str	r0, [r7, #4]
 800f3ae:	4608      	mov	r0, r1
 800f3b0:	4611      	mov	r1, r2
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	70fb      	strb	r3, [r7, #3]
 800f3b8:	460b      	mov	r3, r1
 800f3ba:	70bb      	strb	r3, [r7, #2]
 800f3bc:	4613      	mov	r3, r2
 800f3be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800f3ce:	78bb      	ldrb	r3, [r7, #2]
 800f3d0:	883a      	ldrh	r2, [r7, #0]
 800f3d2:	78f9      	ldrb	r1, [r7, #3]
 800f3d4:	f7f6 fe0d 	bl	8005ff2 <HAL_PCD_EP_Open>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3dc:	7bfb      	ldrb	r3, [r7, #15]
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f000 f908 	bl	800f5f4 <USBD_Get_USB_Status>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800f3e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3710      	adds	r7, #16
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}

0800f3f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3f2:	b580      	push	{r7, lr}
 800f3f4:	b084      	sub	sp, #16
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3fe:	2300      	movs	r3, #0
 800f400:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f402:	2300      	movs	r3, #0
 800f404:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f40c:	78fa      	ldrb	r2, [r7, #3]
 800f40e:	4611      	mov	r1, r2
 800f410:	4618      	mov	r0, r3
 800f412:	f7f6 fe56 	bl	80060c2 <HAL_PCD_EP_Close>
 800f416:	4603      	mov	r3, r0
 800f418:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800f41a:	7bfb      	ldrb	r3, [r7, #15]
 800f41c:	4618      	mov	r0, r3
 800f41e:	f000 f8e9 	bl	800f5f4 <USBD_Get_USB_Status>
 800f422:	4603      	mov	r3, r0
 800f424:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800f426:	7bbb      	ldrb	r3, [r7, #14]
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3710      	adds	r7, #16
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b084      	sub	sp, #16
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	460b      	mov	r3, r1
 800f43a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f43c:	2300      	movs	r3, #0
 800f43e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f440:	2300      	movs	r3, #0
 800f442:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f44a:	78fa      	ldrb	r2, [r7, #3]
 800f44c:	4611      	mov	r1, r2
 800f44e:	4618      	mov	r0, r3
 800f450:	f7f6 ff2e 	bl	80062b0 <HAL_PCD_EP_SetStall>
 800f454:	4603      	mov	r3, r0
 800f456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f458:	7bfb      	ldrb	r3, [r7, #15]
 800f45a:	4618      	mov	r0, r3
 800f45c:	f000 f8ca 	bl	800f5f4 <USBD_Get_USB_Status>
 800f460:	4603      	mov	r3, r0
 800f462:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800f464:	7bbb      	ldrb	r3, [r7, #14]
}
 800f466:	4618      	mov	r0, r3
 800f468:	3710      	adds	r7, #16
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}

0800f46e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f46e:	b580      	push	{r7, lr}
 800f470:	b084      	sub	sp, #16
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
 800f476:	460b      	mov	r3, r1
 800f478:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f47a:	2300      	movs	r3, #0
 800f47c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f47e:	2300      	movs	r3, #0
 800f480:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f488:	78fa      	ldrb	r2, [r7, #3]
 800f48a:	4611      	mov	r1, r2
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7f6 ff73 	bl	8006378 <HAL_PCD_EP_ClrStall>
 800f492:	4603      	mov	r3, r0
 800f494:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800f496:	7bfb      	ldrb	r3, [r7, #15]
 800f498:	4618      	mov	r0, r3
 800f49a:	f000 f8ab 	bl	800f5f4 <USBD_Get_USB_Status>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800f4a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3710      	adds	r7, #16
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b085      	sub	sp, #20
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	460b      	mov	r3, r1
 800f4b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f4be:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800f4c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	da0b      	bge.n	800f4e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800f4c8:	78fb      	ldrb	r3, [r7, #3]
 800f4ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f4ce:	68f9      	ldr	r1, [r7, #12]
 800f4d0:	4613      	mov	r3, r2
 800f4d2:	00db      	lsls	r3, r3, #3
 800f4d4:	1a9b      	subs	r3, r3, r2
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	440b      	add	r3, r1
 800f4da:	333e      	adds	r3, #62	; 0x3e
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	e00b      	b.n	800f4f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800f4e0:	78fb      	ldrb	r3, [r7, #3]
 800f4e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f4e6:	68f9      	ldr	r1, [r7, #12]
 800f4e8:	4613      	mov	r3, r2
 800f4ea:	00db      	lsls	r3, r3, #3
 800f4ec:	1a9b      	subs	r3, r3, r2
 800f4ee:	009b      	lsls	r3, r3, #2
 800f4f0:	440b      	add	r3, r1
 800f4f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f4f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3714      	adds	r7, #20
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b084      	sub	sp, #16
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	460b      	mov	r3, r1
 800f50e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f510:	2300      	movs	r3, #0
 800f512:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f514:	2300      	movs	r3, #0
 800f516:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f51e:	78fa      	ldrb	r2, [r7, #3]
 800f520:	4611      	mov	r1, r2
 800f522:	4618      	mov	r0, r3
 800f524:	f7f6 fd40 	bl	8005fa8 <HAL_PCD_SetAddress>
 800f528:	4603      	mov	r3, r0
 800f52a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800f52c:	7bfb      	ldrb	r3, [r7, #15]
 800f52e:	4618      	mov	r0, r3
 800f530:	f000 f860 	bl	800f5f4 <USBD_Get_USB_Status>
 800f534:	4603      	mov	r3, r0
 800f536:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800f538:	7bbb      	ldrb	r3, [r7, #14]
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3710      	adds	r7, #16
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}

0800f542 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f542:	b580      	push	{r7, lr}
 800f544:	b086      	sub	sp, #24
 800f546:	af00      	add	r7, sp, #0
 800f548:	60f8      	str	r0, [r7, #12]
 800f54a:	607a      	str	r2, [r7, #4]
 800f54c:	461a      	mov	r2, r3
 800f54e:	460b      	mov	r3, r1
 800f550:	72fb      	strb	r3, [r7, #11]
 800f552:	4613      	mov	r3, r2
 800f554:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f556:	2300      	movs	r3, #0
 800f558:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f55a:	2300      	movs	r3, #0
 800f55c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800f564:	893b      	ldrh	r3, [r7, #8]
 800f566:	7af9      	ldrb	r1, [r7, #11]
 800f568:	687a      	ldr	r2, [r7, #4]
 800f56a:	f7f6 fe57 	bl	800621c <HAL_PCD_EP_Transmit>
 800f56e:	4603      	mov	r3, r0
 800f570:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800f572:	7dfb      	ldrb	r3, [r7, #23]
 800f574:	4618      	mov	r0, r3
 800f576:	f000 f83d 	bl	800f5f4 <USBD_Get_USB_Status>
 800f57a:	4603      	mov	r3, r0
 800f57c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800f57e:	7dbb      	ldrb	r3, [r7, #22]
}
 800f580:	4618      	mov	r0, r3
 800f582:	3718      	adds	r7, #24
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}

0800f588 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b086      	sub	sp, #24
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	607a      	str	r2, [r7, #4]
 800f592:	461a      	mov	r2, r3
 800f594:	460b      	mov	r3, r1
 800f596:	72fb      	strb	r3, [r7, #11]
 800f598:	4613      	mov	r3, r2
 800f59a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f59c:	2300      	movs	r3, #0
 800f59e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800f5aa:	893b      	ldrh	r3, [r7, #8]
 800f5ac:	7af9      	ldrb	r1, [r7, #11]
 800f5ae:	687a      	ldr	r2, [r7, #4]
 800f5b0:	f7f6 fdd1 	bl	8006156 <HAL_PCD_EP_Receive>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800f5b8:	7dfb      	ldrb	r3, [r7, #23]
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f000 f81a 	bl	800f5f4 <USBD_Get_USB_Status>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800f5c4:	7dbb      	ldrb	r3, [r7, #22]
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3718      	adds	r7, #24
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}

0800f5ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f5ce:	b580      	push	{r7, lr}
 800f5d0:	b082      	sub	sp, #8
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6078      	str	r0, [r7, #4]
 800f5d6:	460b      	mov	r3, r1
 800f5d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800f5e0:	78fa      	ldrb	r2, [r7, #3]
 800f5e2:	4611      	mov	r1, r2
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7f6 fe01 	bl	80061ec <HAL_PCD_EP_GetRxCount>
 800f5ea:	4603      	mov	r3, r0
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3708      	adds	r7, #8
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b085      	sub	sp, #20
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5fe:	2300      	movs	r3, #0
 800f600:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f602:	79fb      	ldrb	r3, [r7, #7]
 800f604:	2b03      	cmp	r3, #3
 800f606:	d817      	bhi.n	800f638 <USBD_Get_USB_Status+0x44>
 800f608:	a201      	add	r2, pc, #4	; (adr r2, 800f610 <USBD_Get_USB_Status+0x1c>)
 800f60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f60e:	bf00      	nop
 800f610:	0800f621 	.word	0x0800f621
 800f614:	0800f627 	.word	0x0800f627
 800f618:	0800f62d 	.word	0x0800f62d
 800f61c:	0800f633 	.word	0x0800f633
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f620:	2300      	movs	r3, #0
 800f622:	73fb      	strb	r3, [r7, #15]
    break;
 800f624:	e00b      	b.n	800f63e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f626:	2302      	movs	r3, #2
 800f628:	73fb      	strb	r3, [r7, #15]
    break;
 800f62a:	e008      	b.n	800f63e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f62c:	2301      	movs	r3, #1
 800f62e:	73fb      	strb	r3, [r7, #15]
    break;
 800f630:	e005      	b.n	800f63e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f632:	2302      	movs	r3, #2
 800f634:	73fb      	strb	r3, [r7, #15]
    break;
 800f636:	e002      	b.n	800f63e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f638:	2302      	movs	r3, #2
 800f63a:	73fb      	strb	r3, [r7, #15]
    break;
 800f63c:	bf00      	nop
  }
  return usb_status;
 800f63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f640:	4618      	mov	r0, r3
 800f642:	3714      	adds	r7, #20
 800f644:	46bd      	mov	sp, r7
 800f646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64a:	4770      	bx	lr

0800f64c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f64c:	b480      	push	{r7}
 800f64e:	b083      	sub	sp, #12
 800f650:	af00      	add	r7, sp, #0
 800f652:	4603      	mov	r3, r0
 800f654:	6039      	str	r1, [r7, #0]
 800f656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	2212      	movs	r2, #18
 800f65c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f65e:	4b03      	ldr	r3, [pc, #12]	; (800f66c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f660:	4618      	mov	r0, r3
 800f662:	370c      	adds	r7, #12
 800f664:	46bd      	mov	sp, r7
 800f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66a:	4770      	bx	lr
 800f66c:	2000018c 	.word	0x2000018c

0800f670 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f670:	b480      	push	{r7}
 800f672:	b083      	sub	sp, #12
 800f674:	af00      	add	r7, sp, #0
 800f676:	4603      	mov	r3, r0
 800f678:	6039      	str	r1, [r7, #0]
 800f67a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	2204      	movs	r2, #4
 800f680:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f682:	4b03      	ldr	r3, [pc, #12]	; (800f690 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f684:	4618      	mov	r0, r3
 800f686:	370c      	adds	r7, #12
 800f688:	46bd      	mov	sp, r7
 800f68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68e:	4770      	bx	lr
 800f690:	200001a0 	.word	0x200001a0

0800f694 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b082      	sub	sp, #8
 800f698:	af00      	add	r7, sp, #0
 800f69a:	4603      	mov	r3, r0
 800f69c:	6039      	str	r1, [r7, #0]
 800f69e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f6a0:	79fb      	ldrb	r3, [r7, #7]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d105      	bne.n	800f6b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f6a6:	683a      	ldr	r2, [r7, #0]
 800f6a8:	4907      	ldr	r1, [pc, #28]	; (800f6c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f6aa:	4808      	ldr	r0, [pc, #32]	; (800f6cc <USBD_FS_ProductStrDescriptor+0x38>)
 800f6ac:	f7fd fe70 	bl	800d390 <USBD_GetString>
 800f6b0:	e004      	b.n	800f6bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f6b2:	683a      	ldr	r2, [r7, #0]
 800f6b4:	4904      	ldr	r1, [pc, #16]	; (800f6c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f6b6:	4805      	ldr	r0, [pc, #20]	; (800f6cc <USBD_FS_ProductStrDescriptor+0x38>)
 800f6b8:	f7fd fe6a 	bl	800d390 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f6bc:	4b02      	ldr	r3, [pc, #8]	; (800f6c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3708      	adds	r7, #8
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	20007c94 	.word	0x20007c94
 800f6cc:	0801506c 	.word	0x0801506c

0800f6d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	6039      	str	r1, [r7, #0]
 800f6da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f6dc:	683a      	ldr	r2, [r7, #0]
 800f6de:	4904      	ldr	r1, [pc, #16]	; (800f6f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f6e0:	4804      	ldr	r0, [pc, #16]	; (800f6f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f6e2:	f7fd fe55 	bl	800d390 <USBD_GetString>
  return USBD_StrDesc;
 800f6e6:	4b02      	ldr	r3, [pc, #8]	; (800f6f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}
 800f6f0:	20007c94 	.word	0x20007c94
 800f6f4:	08015078 	.word	0x08015078

0800f6f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	4603      	mov	r3, r0
 800f700:	6039      	str	r1, [r7, #0]
 800f702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	221a      	movs	r2, #26
 800f708:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f70a:	f000 f843 	bl	800f794 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800f70e:	4b02      	ldr	r3, [pc, #8]	; (800f718 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f710:	4618      	mov	r0, r3
 800f712:	3708      	adds	r7, #8
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	200001a4 	.word	0x200001a4

0800f71c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
 800f722:	4603      	mov	r3, r0
 800f724:	6039      	str	r1, [r7, #0]
 800f726:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f728:	79fb      	ldrb	r3, [r7, #7]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d105      	bne.n	800f73a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f72e:	683a      	ldr	r2, [r7, #0]
 800f730:	4907      	ldr	r1, [pc, #28]	; (800f750 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f732:	4808      	ldr	r0, [pc, #32]	; (800f754 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f734:	f7fd fe2c 	bl	800d390 <USBD_GetString>
 800f738:	e004      	b.n	800f744 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f73a:	683a      	ldr	r2, [r7, #0]
 800f73c:	4904      	ldr	r1, [pc, #16]	; (800f750 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f73e:	4805      	ldr	r0, [pc, #20]	; (800f754 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f740:	f7fd fe26 	bl	800d390 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f744:	4b02      	ldr	r3, [pc, #8]	; (800f750 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f746:	4618      	mov	r0, r3
 800f748:	3708      	adds	r7, #8
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop
 800f750:	20007c94 	.word	0x20007c94
 800f754:	0801508c 	.word	0x0801508c

0800f758 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	4603      	mov	r3, r0
 800f760:	6039      	str	r1, [r7, #0]
 800f762:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f764:	79fb      	ldrb	r3, [r7, #7]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d105      	bne.n	800f776 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f76a:	683a      	ldr	r2, [r7, #0]
 800f76c:	4907      	ldr	r1, [pc, #28]	; (800f78c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f76e:	4808      	ldr	r0, [pc, #32]	; (800f790 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f770:	f7fd fe0e 	bl	800d390 <USBD_GetString>
 800f774:	e004      	b.n	800f780 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f776:	683a      	ldr	r2, [r7, #0]
 800f778:	4904      	ldr	r1, [pc, #16]	; (800f78c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f77a:	4805      	ldr	r0, [pc, #20]	; (800f790 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f77c:	f7fd fe08 	bl	800d390 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f780:	4b02      	ldr	r3, [pc, #8]	; (800f78c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f782:	4618      	mov	r0, r3
 800f784:	3708      	adds	r7, #8
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	20007c94 	.word	0x20007c94
 800f790:	08015098 	.word	0x08015098

0800f794 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f79a:	4b0f      	ldr	r3, [pc, #60]	; (800f7d8 <Get_SerialNum+0x44>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f7a0:	4b0e      	ldr	r3, [pc, #56]	; (800f7dc <Get_SerialNum+0x48>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f7a6:	4b0e      	ldr	r3, [pc, #56]	; (800f7e0 <Get_SerialNum+0x4c>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f7ac:	68fa      	ldr	r2, [r7, #12]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	4413      	add	r3, r2
 800f7b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d009      	beq.n	800f7ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f7ba:	2208      	movs	r2, #8
 800f7bc:	4909      	ldr	r1, [pc, #36]	; (800f7e4 <Get_SerialNum+0x50>)
 800f7be:	68f8      	ldr	r0, [r7, #12]
 800f7c0:	f000 f814 	bl	800f7ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f7c4:	2204      	movs	r2, #4
 800f7c6:	4908      	ldr	r1, [pc, #32]	; (800f7e8 <Get_SerialNum+0x54>)
 800f7c8:	68b8      	ldr	r0, [r7, #8]
 800f7ca:	f000 f80f 	bl	800f7ec <IntToUnicode>
  }
}
 800f7ce:	bf00      	nop
 800f7d0:	3710      	adds	r7, #16
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	1fff7a10 	.word	0x1fff7a10
 800f7dc:	1fff7a14 	.word	0x1fff7a14
 800f7e0:	1fff7a18 	.word	0x1fff7a18
 800f7e4:	200001a6 	.word	0x200001a6
 800f7e8:	200001b6 	.word	0x200001b6

0800f7ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b087      	sub	sp, #28
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	60f8      	str	r0, [r7, #12]
 800f7f4:	60b9      	str	r1, [r7, #8]
 800f7f6:	4613      	mov	r3, r2
 800f7f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f7fe:	2300      	movs	r3, #0
 800f800:	75fb      	strb	r3, [r7, #23]
 800f802:	e027      	b.n	800f854 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	0f1b      	lsrs	r3, r3, #28
 800f808:	2b09      	cmp	r3, #9
 800f80a:	d80b      	bhi.n	800f824 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	0f1b      	lsrs	r3, r3, #28
 800f810:	b2da      	uxtb	r2, r3
 800f812:	7dfb      	ldrb	r3, [r7, #23]
 800f814:	005b      	lsls	r3, r3, #1
 800f816:	4619      	mov	r1, r3
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	440b      	add	r3, r1
 800f81c:	3230      	adds	r2, #48	; 0x30
 800f81e:	b2d2      	uxtb	r2, r2
 800f820:	701a      	strb	r2, [r3, #0]
 800f822:	e00a      	b.n	800f83a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	0f1b      	lsrs	r3, r3, #28
 800f828:	b2da      	uxtb	r2, r3
 800f82a:	7dfb      	ldrb	r3, [r7, #23]
 800f82c:	005b      	lsls	r3, r3, #1
 800f82e:	4619      	mov	r1, r3
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	440b      	add	r3, r1
 800f834:	3237      	adds	r2, #55	; 0x37
 800f836:	b2d2      	uxtb	r2, r2
 800f838:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	011b      	lsls	r3, r3, #4
 800f83e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f840:	7dfb      	ldrb	r3, [r7, #23]
 800f842:	005b      	lsls	r3, r3, #1
 800f844:	3301      	adds	r3, #1
 800f846:	68ba      	ldr	r2, [r7, #8]
 800f848:	4413      	add	r3, r2
 800f84a:	2200      	movs	r2, #0
 800f84c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f84e:	7dfb      	ldrb	r3, [r7, #23]
 800f850:	3301      	adds	r3, #1
 800f852:	75fb      	strb	r3, [r7, #23]
 800f854:	7dfa      	ldrb	r2, [r7, #23]
 800f856:	79fb      	ldrb	r3, [r7, #7]
 800f858:	429a      	cmp	r2, r3
 800f85a:	d3d3      	bcc.n	800f804 <IntToUnicode+0x18>
  }
}
 800f85c:	bf00      	nop
 800f85e:	371c      	adds	r7, #28
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr

0800f868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800f868:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f8a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f86c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f86e:	e003      	b.n	800f878 <LoopCopyDataInit>

0800f870 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f870:	4b0c      	ldr	r3, [pc, #48]	; (800f8a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f872:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f874:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f876:	3104      	adds	r1, #4

0800f878 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f878:	480b      	ldr	r0, [pc, #44]	; (800f8a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f87a:	4b0c      	ldr	r3, [pc, #48]	; (800f8ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f87c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f87e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f880:	d3f6      	bcc.n	800f870 <CopyDataInit>
  ldr  r2, =_sbss
 800f882:	4a0b      	ldr	r2, [pc, #44]	; (800f8b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f884:	e002      	b.n	800f88c <LoopFillZerobss>

0800f886 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f886:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f888:	f842 3b04 	str.w	r3, [r2], #4

0800f88c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f88c:	4b09      	ldr	r3, [pc, #36]	; (800f8b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f88e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f890:	d3f9      	bcc.n	800f886 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f892:	f7ff fa89 	bl	800eda8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f896:	f000 f817 	bl	800f8c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f89a:	f7fe f8df 	bl	800da5c <main>
  bx  lr    
 800f89e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800f8a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800f8a4:	08015430 	.word	0x08015430
  ldr  r0, =_sdata
 800f8a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f8ac:	20000394 	.word	0x20000394
  ldr  r2, =_sbss
 800f8b0:	20000394 	.word	0x20000394
  ldr  r3, = _ebss
 800f8b4:	20007e98 	.word	0x20007e98

0800f8b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f8b8:	e7fe      	b.n	800f8b8 <ADC_IRQHandler>
	...

0800f8bc <__errno>:
 800f8bc:	4b01      	ldr	r3, [pc, #4]	; (800f8c4 <__errno+0x8>)
 800f8be:	6818      	ldr	r0, [r3, #0]
 800f8c0:	4770      	bx	lr
 800f8c2:	bf00      	nop
 800f8c4:	200001c0 	.word	0x200001c0

0800f8c8 <__libc_init_array>:
 800f8c8:	b570      	push	{r4, r5, r6, lr}
 800f8ca:	4e0d      	ldr	r6, [pc, #52]	; (800f900 <__libc_init_array+0x38>)
 800f8cc:	4c0d      	ldr	r4, [pc, #52]	; (800f904 <__libc_init_array+0x3c>)
 800f8ce:	1ba4      	subs	r4, r4, r6
 800f8d0:	10a4      	asrs	r4, r4, #2
 800f8d2:	2500      	movs	r5, #0
 800f8d4:	42a5      	cmp	r5, r4
 800f8d6:	d109      	bne.n	800f8ec <__libc_init_array+0x24>
 800f8d8:	4e0b      	ldr	r6, [pc, #44]	; (800f908 <__libc_init_array+0x40>)
 800f8da:	4c0c      	ldr	r4, [pc, #48]	; (800f90c <__libc_init_array+0x44>)
 800f8dc:	f005 fb16 	bl	8014f0c <_init>
 800f8e0:	1ba4      	subs	r4, r4, r6
 800f8e2:	10a4      	asrs	r4, r4, #2
 800f8e4:	2500      	movs	r5, #0
 800f8e6:	42a5      	cmp	r5, r4
 800f8e8:	d105      	bne.n	800f8f6 <__libc_init_array+0x2e>
 800f8ea:	bd70      	pop	{r4, r5, r6, pc}
 800f8ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f8f0:	4798      	blx	r3
 800f8f2:	3501      	adds	r5, #1
 800f8f4:	e7ee      	b.n	800f8d4 <__libc_init_array+0xc>
 800f8f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f8fa:	4798      	blx	r3
 800f8fc:	3501      	adds	r5, #1
 800f8fe:	e7f2      	b.n	800f8e6 <__libc_init_array+0x1e>
 800f900:	08015428 	.word	0x08015428
 800f904:	08015428 	.word	0x08015428
 800f908:	08015428 	.word	0x08015428
 800f90c:	0801542c 	.word	0x0801542c

0800f910 <malloc>:
 800f910:	4b02      	ldr	r3, [pc, #8]	; (800f91c <malloc+0xc>)
 800f912:	4601      	mov	r1, r0
 800f914:	6818      	ldr	r0, [r3, #0]
 800f916:	f000 b86d 	b.w	800f9f4 <_malloc_r>
 800f91a:	bf00      	nop
 800f91c:	200001c0 	.word	0x200001c0

0800f920 <free>:
 800f920:	4b02      	ldr	r3, [pc, #8]	; (800f92c <free+0xc>)
 800f922:	4601      	mov	r1, r0
 800f924:	6818      	ldr	r0, [r3, #0]
 800f926:	f000 b817 	b.w	800f958 <_free_r>
 800f92a:	bf00      	nop
 800f92c:	200001c0 	.word	0x200001c0

0800f930 <memcpy>:
 800f930:	b510      	push	{r4, lr}
 800f932:	1e43      	subs	r3, r0, #1
 800f934:	440a      	add	r2, r1
 800f936:	4291      	cmp	r1, r2
 800f938:	d100      	bne.n	800f93c <memcpy+0xc>
 800f93a:	bd10      	pop	{r4, pc}
 800f93c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f940:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f944:	e7f7      	b.n	800f936 <memcpy+0x6>

0800f946 <memset>:
 800f946:	4402      	add	r2, r0
 800f948:	4603      	mov	r3, r0
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d100      	bne.n	800f950 <memset+0xa>
 800f94e:	4770      	bx	lr
 800f950:	f803 1b01 	strb.w	r1, [r3], #1
 800f954:	e7f9      	b.n	800f94a <memset+0x4>
	...

0800f958 <_free_r>:
 800f958:	b538      	push	{r3, r4, r5, lr}
 800f95a:	4605      	mov	r5, r0
 800f95c:	2900      	cmp	r1, #0
 800f95e:	d045      	beq.n	800f9ec <_free_r+0x94>
 800f960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f964:	1f0c      	subs	r4, r1, #4
 800f966:	2b00      	cmp	r3, #0
 800f968:	bfb8      	it	lt
 800f96a:	18e4      	addlt	r4, r4, r3
 800f96c:	f002 ff84 	bl	8012878 <__malloc_lock>
 800f970:	4a1f      	ldr	r2, [pc, #124]	; (800f9f0 <_free_r+0x98>)
 800f972:	6813      	ldr	r3, [r2, #0]
 800f974:	4610      	mov	r0, r2
 800f976:	b933      	cbnz	r3, 800f986 <_free_r+0x2e>
 800f978:	6063      	str	r3, [r4, #4]
 800f97a:	6014      	str	r4, [r2, #0]
 800f97c:	4628      	mov	r0, r5
 800f97e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f982:	f002 bf7a 	b.w	801287a <__malloc_unlock>
 800f986:	42a3      	cmp	r3, r4
 800f988:	d90c      	bls.n	800f9a4 <_free_r+0x4c>
 800f98a:	6821      	ldr	r1, [r4, #0]
 800f98c:	1862      	adds	r2, r4, r1
 800f98e:	4293      	cmp	r3, r2
 800f990:	bf04      	itt	eq
 800f992:	681a      	ldreq	r2, [r3, #0]
 800f994:	685b      	ldreq	r3, [r3, #4]
 800f996:	6063      	str	r3, [r4, #4]
 800f998:	bf04      	itt	eq
 800f99a:	1852      	addeq	r2, r2, r1
 800f99c:	6022      	streq	r2, [r4, #0]
 800f99e:	6004      	str	r4, [r0, #0]
 800f9a0:	e7ec      	b.n	800f97c <_free_r+0x24>
 800f9a2:	4613      	mov	r3, r2
 800f9a4:	685a      	ldr	r2, [r3, #4]
 800f9a6:	b10a      	cbz	r2, 800f9ac <_free_r+0x54>
 800f9a8:	42a2      	cmp	r2, r4
 800f9aa:	d9fa      	bls.n	800f9a2 <_free_r+0x4a>
 800f9ac:	6819      	ldr	r1, [r3, #0]
 800f9ae:	1858      	adds	r0, r3, r1
 800f9b0:	42a0      	cmp	r0, r4
 800f9b2:	d10b      	bne.n	800f9cc <_free_r+0x74>
 800f9b4:	6820      	ldr	r0, [r4, #0]
 800f9b6:	4401      	add	r1, r0
 800f9b8:	1858      	adds	r0, r3, r1
 800f9ba:	4282      	cmp	r2, r0
 800f9bc:	6019      	str	r1, [r3, #0]
 800f9be:	d1dd      	bne.n	800f97c <_free_r+0x24>
 800f9c0:	6810      	ldr	r0, [r2, #0]
 800f9c2:	6852      	ldr	r2, [r2, #4]
 800f9c4:	605a      	str	r2, [r3, #4]
 800f9c6:	4401      	add	r1, r0
 800f9c8:	6019      	str	r1, [r3, #0]
 800f9ca:	e7d7      	b.n	800f97c <_free_r+0x24>
 800f9cc:	d902      	bls.n	800f9d4 <_free_r+0x7c>
 800f9ce:	230c      	movs	r3, #12
 800f9d0:	602b      	str	r3, [r5, #0]
 800f9d2:	e7d3      	b.n	800f97c <_free_r+0x24>
 800f9d4:	6820      	ldr	r0, [r4, #0]
 800f9d6:	1821      	adds	r1, r4, r0
 800f9d8:	428a      	cmp	r2, r1
 800f9da:	bf04      	itt	eq
 800f9dc:	6811      	ldreq	r1, [r2, #0]
 800f9de:	6852      	ldreq	r2, [r2, #4]
 800f9e0:	6062      	str	r2, [r4, #4]
 800f9e2:	bf04      	itt	eq
 800f9e4:	1809      	addeq	r1, r1, r0
 800f9e6:	6021      	streq	r1, [r4, #0]
 800f9e8:	605c      	str	r4, [r3, #4]
 800f9ea:	e7c7      	b.n	800f97c <_free_r+0x24>
 800f9ec:	bd38      	pop	{r3, r4, r5, pc}
 800f9ee:	bf00      	nop
 800f9f0:	200009d4 	.word	0x200009d4

0800f9f4 <_malloc_r>:
 800f9f4:	b570      	push	{r4, r5, r6, lr}
 800f9f6:	1ccd      	adds	r5, r1, #3
 800f9f8:	f025 0503 	bic.w	r5, r5, #3
 800f9fc:	3508      	adds	r5, #8
 800f9fe:	2d0c      	cmp	r5, #12
 800fa00:	bf38      	it	cc
 800fa02:	250c      	movcc	r5, #12
 800fa04:	2d00      	cmp	r5, #0
 800fa06:	4606      	mov	r6, r0
 800fa08:	db01      	blt.n	800fa0e <_malloc_r+0x1a>
 800fa0a:	42a9      	cmp	r1, r5
 800fa0c:	d903      	bls.n	800fa16 <_malloc_r+0x22>
 800fa0e:	230c      	movs	r3, #12
 800fa10:	6033      	str	r3, [r6, #0]
 800fa12:	2000      	movs	r0, #0
 800fa14:	bd70      	pop	{r4, r5, r6, pc}
 800fa16:	f002 ff2f 	bl	8012878 <__malloc_lock>
 800fa1a:	4a21      	ldr	r2, [pc, #132]	; (800faa0 <_malloc_r+0xac>)
 800fa1c:	6814      	ldr	r4, [r2, #0]
 800fa1e:	4621      	mov	r1, r4
 800fa20:	b991      	cbnz	r1, 800fa48 <_malloc_r+0x54>
 800fa22:	4c20      	ldr	r4, [pc, #128]	; (800faa4 <_malloc_r+0xb0>)
 800fa24:	6823      	ldr	r3, [r4, #0]
 800fa26:	b91b      	cbnz	r3, 800fa30 <_malloc_r+0x3c>
 800fa28:	4630      	mov	r0, r6
 800fa2a:	f000 fe7b 	bl	8010724 <_sbrk_r>
 800fa2e:	6020      	str	r0, [r4, #0]
 800fa30:	4629      	mov	r1, r5
 800fa32:	4630      	mov	r0, r6
 800fa34:	f000 fe76 	bl	8010724 <_sbrk_r>
 800fa38:	1c43      	adds	r3, r0, #1
 800fa3a:	d124      	bne.n	800fa86 <_malloc_r+0x92>
 800fa3c:	230c      	movs	r3, #12
 800fa3e:	6033      	str	r3, [r6, #0]
 800fa40:	4630      	mov	r0, r6
 800fa42:	f002 ff1a 	bl	801287a <__malloc_unlock>
 800fa46:	e7e4      	b.n	800fa12 <_malloc_r+0x1e>
 800fa48:	680b      	ldr	r3, [r1, #0]
 800fa4a:	1b5b      	subs	r3, r3, r5
 800fa4c:	d418      	bmi.n	800fa80 <_malloc_r+0x8c>
 800fa4e:	2b0b      	cmp	r3, #11
 800fa50:	d90f      	bls.n	800fa72 <_malloc_r+0x7e>
 800fa52:	600b      	str	r3, [r1, #0]
 800fa54:	50cd      	str	r5, [r1, r3]
 800fa56:	18cc      	adds	r4, r1, r3
 800fa58:	4630      	mov	r0, r6
 800fa5a:	f002 ff0e 	bl	801287a <__malloc_unlock>
 800fa5e:	f104 000b 	add.w	r0, r4, #11
 800fa62:	1d23      	adds	r3, r4, #4
 800fa64:	f020 0007 	bic.w	r0, r0, #7
 800fa68:	1ac3      	subs	r3, r0, r3
 800fa6a:	d0d3      	beq.n	800fa14 <_malloc_r+0x20>
 800fa6c:	425a      	negs	r2, r3
 800fa6e:	50e2      	str	r2, [r4, r3]
 800fa70:	e7d0      	b.n	800fa14 <_malloc_r+0x20>
 800fa72:	428c      	cmp	r4, r1
 800fa74:	684b      	ldr	r3, [r1, #4]
 800fa76:	bf16      	itet	ne
 800fa78:	6063      	strne	r3, [r4, #4]
 800fa7a:	6013      	streq	r3, [r2, #0]
 800fa7c:	460c      	movne	r4, r1
 800fa7e:	e7eb      	b.n	800fa58 <_malloc_r+0x64>
 800fa80:	460c      	mov	r4, r1
 800fa82:	6849      	ldr	r1, [r1, #4]
 800fa84:	e7cc      	b.n	800fa20 <_malloc_r+0x2c>
 800fa86:	1cc4      	adds	r4, r0, #3
 800fa88:	f024 0403 	bic.w	r4, r4, #3
 800fa8c:	42a0      	cmp	r0, r4
 800fa8e:	d005      	beq.n	800fa9c <_malloc_r+0xa8>
 800fa90:	1a21      	subs	r1, r4, r0
 800fa92:	4630      	mov	r0, r6
 800fa94:	f000 fe46 	bl	8010724 <_sbrk_r>
 800fa98:	3001      	adds	r0, #1
 800fa9a:	d0cf      	beq.n	800fa3c <_malloc_r+0x48>
 800fa9c:	6025      	str	r5, [r4, #0]
 800fa9e:	e7db      	b.n	800fa58 <_malloc_r+0x64>
 800faa0:	200009d4 	.word	0x200009d4
 800faa4:	200009d8 	.word	0x200009d8

0800faa8 <__cvt>:
 800faa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800faac:	ec55 4b10 	vmov	r4, r5, d0
 800fab0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800fab2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fab6:	2d00      	cmp	r5, #0
 800fab8:	460e      	mov	r6, r1
 800faba:	4691      	mov	r9, r2
 800fabc:	4619      	mov	r1, r3
 800fabe:	bfb8      	it	lt
 800fac0:	4622      	movlt	r2, r4
 800fac2:	462b      	mov	r3, r5
 800fac4:	f027 0720 	bic.w	r7, r7, #32
 800fac8:	bfbb      	ittet	lt
 800faca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800face:	461d      	movlt	r5, r3
 800fad0:	2300      	movge	r3, #0
 800fad2:	232d      	movlt	r3, #45	; 0x2d
 800fad4:	bfb8      	it	lt
 800fad6:	4614      	movlt	r4, r2
 800fad8:	2f46      	cmp	r7, #70	; 0x46
 800fada:	700b      	strb	r3, [r1, #0]
 800fadc:	d004      	beq.n	800fae8 <__cvt+0x40>
 800fade:	2f45      	cmp	r7, #69	; 0x45
 800fae0:	d100      	bne.n	800fae4 <__cvt+0x3c>
 800fae2:	3601      	adds	r6, #1
 800fae4:	2102      	movs	r1, #2
 800fae6:	e000      	b.n	800faea <__cvt+0x42>
 800fae8:	2103      	movs	r1, #3
 800faea:	ab03      	add	r3, sp, #12
 800faec:	9301      	str	r3, [sp, #4]
 800faee:	ab02      	add	r3, sp, #8
 800faf0:	9300      	str	r3, [sp, #0]
 800faf2:	4632      	mov	r2, r6
 800faf4:	4653      	mov	r3, sl
 800faf6:	ec45 4b10 	vmov	d0, r4, r5
 800fafa:	f001 fdb9 	bl	8011670 <_dtoa_r>
 800fafe:	2f47      	cmp	r7, #71	; 0x47
 800fb00:	4680      	mov	r8, r0
 800fb02:	d102      	bne.n	800fb0a <__cvt+0x62>
 800fb04:	f019 0f01 	tst.w	r9, #1
 800fb08:	d026      	beq.n	800fb58 <__cvt+0xb0>
 800fb0a:	2f46      	cmp	r7, #70	; 0x46
 800fb0c:	eb08 0906 	add.w	r9, r8, r6
 800fb10:	d111      	bne.n	800fb36 <__cvt+0x8e>
 800fb12:	f898 3000 	ldrb.w	r3, [r8]
 800fb16:	2b30      	cmp	r3, #48	; 0x30
 800fb18:	d10a      	bne.n	800fb30 <__cvt+0x88>
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	4620      	mov	r0, r4
 800fb20:	4629      	mov	r1, r5
 800fb22:	f7f0 ffd1 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb26:	b918      	cbnz	r0, 800fb30 <__cvt+0x88>
 800fb28:	f1c6 0601 	rsb	r6, r6, #1
 800fb2c:	f8ca 6000 	str.w	r6, [sl]
 800fb30:	f8da 3000 	ldr.w	r3, [sl]
 800fb34:	4499      	add	r9, r3
 800fb36:	2200      	movs	r2, #0
 800fb38:	2300      	movs	r3, #0
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	4629      	mov	r1, r5
 800fb3e:	f7f0 ffc3 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb42:	b938      	cbnz	r0, 800fb54 <__cvt+0xac>
 800fb44:	2230      	movs	r2, #48	; 0x30
 800fb46:	9b03      	ldr	r3, [sp, #12]
 800fb48:	454b      	cmp	r3, r9
 800fb4a:	d205      	bcs.n	800fb58 <__cvt+0xb0>
 800fb4c:	1c59      	adds	r1, r3, #1
 800fb4e:	9103      	str	r1, [sp, #12]
 800fb50:	701a      	strb	r2, [r3, #0]
 800fb52:	e7f8      	b.n	800fb46 <__cvt+0x9e>
 800fb54:	f8cd 900c 	str.w	r9, [sp, #12]
 800fb58:	9b03      	ldr	r3, [sp, #12]
 800fb5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb5c:	eba3 0308 	sub.w	r3, r3, r8
 800fb60:	4640      	mov	r0, r8
 800fb62:	6013      	str	r3, [r2, #0]
 800fb64:	b004      	add	sp, #16
 800fb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fb6a <__exponent>:
 800fb6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb6c:	2900      	cmp	r1, #0
 800fb6e:	4604      	mov	r4, r0
 800fb70:	bfba      	itte	lt
 800fb72:	4249      	neglt	r1, r1
 800fb74:	232d      	movlt	r3, #45	; 0x2d
 800fb76:	232b      	movge	r3, #43	; 0x2b
 800fb78:	2909      	cmp	r1, #9
 800fb7a:	f804 2b02 	strb.w	r2, [r4], #2
 800fb7e:	7043      	strb	r3, [r0, #1]
 800fb80:	dd20      	ble.n	800fbc4 <__exponent+0x5a>
 800fb82:	f10d 0307 	add.w	r3, sp, #7
 800fb86:	461f      	mov	r7, r3
 800fb88:	260a      	movs	r6, #10
 800fb8a:	fb91 f5f6 	sdiv	r5, r1, r6
 800fb8e:	fb06 1115 	mls	r1, r6, r5, r1
 800fb92:	3130      	adds	r1, #48	; 0x30
 800fb94:	2d09      	cmp	r5, #9
 800fb96:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fb9a:	f103 32ff 	add.w	r2, r3, #4294967295
 800fb9e:	4629      	mov	r1, r5
 800fba0:	dc09      	bgt.n	800fbb6 <__exponent+0x4c>
 800fba2:	3130      	adds	r1, #48	; 0x30
 800fba4:	3b02      	subs	r3, #2
 800fba6:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fbaa:	42bb      	cmp	r3, r7
 800fbac:	4622      	mov	r2, r4
 800fbae:	d304      	bcc.n	800fbba <__exponent+0x50>
 800fbb0:	1a10      	subs	r0, r2, r0
 800fbb2:	b003      	add	sp, #12
 800fbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbb6:	4613      	mov	r3, r2
 800fbb8:	e7e7      	b.n	800fb8a <__exponent+0x20>
 800fbba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbbe:	f804 2b01 	strb.w	r2, [r4], #1
 800fbc2:	e7f2      	b.n	800fbaa <__exponent+0x40>
 800fbc4:	2330      	movs	r3, #48	; 0x30
 800fbc6:	4419      	add	r1, r3
 800fbc8:	7083      	strb	r3, [r0, #2]
 800fbca:	1d02      	adds	r2, r0, #4
 800fbcc:	70c1      	strb	r1, [r0, #3]
 800fbce:	e7ef      	b.n	800fbb0 <__exponent+0x46>

0800fbd0 <_printf_float>:
 800fbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbd4:	b08d      	sub	sp, #52	; 0x34
 800fbd6:	460c      	mov	r4, r1
 800fbd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800fbdc:	4616      	mov	r6, r2
 800fbde:	461f      	mov	r7, r3
 800fbe0:	4605      	mov	r5, r0
 800fbe2:	f002 fe29 	bl	8012838 <_localeconv_r>
 800fbe6:	6803      	ldr	r3, [r0, #0]
 800fbe8:	9304      	str	r3, [sp, #16]
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7f0 faf0 	bl	80001d0 <strlen>
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	930a      	str	r3, [sp, #40]	; 0x28
 800fbf4:	f8d8 3000 	ldr.w	r3, [r8]
 800fbf8:	9005      	str	r0, [sp, #20]
 800fbfa:	3307      	adds	r3, #7
 800fbfc:	f023 0307 	bic.w	r3, r3, #7
 800fc00:	f103 0208 	add.w	r2, r3, #8
 800fc04:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fc08:	f8d4 b000 	ldr.w	fp, [r4]
 800fc0c:	f8c8 2000 	str.w	r2, [r8]
 800fc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc14:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fc18:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fc1c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fc20:	9307      	str	r3, [sp, #28]
 800fc22:	f8cd 8018 	str.w	r8, [sp, #24]
 800fc26:	f04f 32ff 	mov.w	r2, #4294967295
 800fc2a:	4ba7      	ldr	r3, [pc, #668]	; (800fec8 <_printf_float+0x2f8>)
 800fc2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc30:	f7f0 ff7c 	bl	8000b2c <__aeabi_dcmpun>
 800fc34:	bb70      	cbnz	r0, 800fc94 <_printf_float+0xc4>
 800fc36:	f04f 32ff 	mov.w	r2, #4294967295
 800fc3a:	4ba3      	ldr	r3, [pc, #652]	; (800fec8 <_printf_float+0x2f8>)
 800fc3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc40:	f7f0 ff56 	bl	8000af0 <__aeabi_dcmple>
 800fc44:	bb30      	cbnz	r0, 800fc94 <_printf_float+0xc4>
 800fc46:	2200      	movs	r2, #0
 800fc48:	2300      	movs	r3, #0
 800fc4a:	4640      	mov	r0, r8
 800fc4c:	4649      	mov	r1, r9
 800fc4e:	f7f0 ff45 	bl	8000adc <__aeabi_dcmplt>
 800fc52:	b110      	cbz	r0, 800fc5a <_printf_float+0x8a>
 800fc54:	232d      	movs	r3, #45	; 0x2d
 800fc56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc5a:	4a9c      	ldr	r2, [pc, #624]	; (800fecc <_printf_float+0x2fc>)
 800fc5c:	4b9c      	ldr	r3, [pc, #624]	; (800fed0 <_printf_float+0x300>)
 800fc5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800fc62:	bf8c      	ite	hi
 800fc64:	4690      	movhi	r8, r2
 800fc66:	4698      	movls	r8, r3
 800fc68:	2303      	movs	r3, #3
 800fc6a:	f02b 0204 	bic.w	r2, fp, #4
 800fc6e:	6123      	str	r3, [r4, #16]
 800fc70:	6022      	str	r2, [r4, #0]
 800fc72:	f04f 0900 	mov.w	r9, #0
 800fc76:	9700      	str	r7, [sp, #0]
 800fc78:	4633      	mov	r3, r6
 800fc7a:	aa0b      	add	r2, sp, #44	; 0x2c
 800fc7c:	4621      	mov	r1, r4
 800fc7e:	4628      	mov	r0, r5
 800fc80:	f000 f9e6 	bl	8010050 <_printf_common>
 800fc84:	3001      	adds	r0, #1
 800fc86:	f040 808d 	bne.w	800fda4 <_printf_float+0x1d4>
 800fc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc8e:	b00d      	add	sp, #52	; 0x34
 800fc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc94:	4642      	mov	r2, r8
 800fc96:	464b      	mov	r3, r9
 800fc98:	4640      	mov	r0, r8
 800fc9a:	4649      	mov	r1, r9
 800fc9c:	f7f0 ff46 	bl	8000b2c <__aeabi_dcmpun>
 800fca0:	b110      	cbz	r0, 800fca8 <_printf_float+0xd8>
 800fca2:	4a8c      	ldr	r2, [pc, #560]	; (800fed4 <_printf_float+0x304>)
 800fca4:	4b8c      	ldr	r3, [pc, #560]	; (800fed8 <_printf_float+0x308>)
 800fca6:	e7da      	b.n	800fc5e <_printf_float+0x8e>
 800fca8:	6861      	ldr	r1, [r4, #4]
 800fcaa:	1c4b      	adds	r3, r1, #1
 800fcac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800fcb0:	a80a      	add	r0, sp, #40	; 0x28
 800fcb2:	d13e      	bne.n	800fd32 <_printf_float+0x162>
 800fcb4:	2306      	movs	r3, #6
 800fcb6:	6063      	str	r3, [r4, #4]
 800fcb8:	2300      	movs	r3, #0
 800fcba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800fcbe:	ab09      	add	r3, sp, #36	; 0x24
 800fcc0:	9300      	str	r3, [sp, #0]
 800fcc2:	ec49 8b10 	vmov	d0, r8, r9
 800fcc6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fcca:	6022      	str	r2, [r4, #0]
 800fccc:	f8cd a004 	str.w	sl, [sp, #4]
 800fcd0:	6861      	ldr	r1, [r4, #4]
 800fcd2:	4628      	mov	r0, r5
 800fcd4:	f7ff fee8 	bl	800faa8 <__cvt>
 800fcd8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800fcdc:	2b47      	cmp	r3, #71	; 0x47
 800fcde:	4680      	mov	r8, r0
 800fce0:	d109      	bne.n	800fcf6 <_printf_float+0x126>
 800fce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fce4:	1cd8      	adds	r0, r3, #3
 800fce6:	db02      	blt.n	800fcee <_printf_float+0x11e>
 800fce8:	6862      	ldr	r2, [r4, #4]
 800fcea:	4293      	cmp	r3, r2
 800fcec:	dd47      	ble.n	800fd7e <_printf_float+0x1ae>
 800fcee:	f1aa 0a02 	sub.w	sl, sl, #2
 800fcf2:	fa5f fa8a 	uxtb.w	sl, sl
 800fcf6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800fcfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fcfc:	d824      	bhi.n	800fd48 <_printf_float+0x178>
 800fcfe:	3901      	subs	r1, #1
 800fd00:	4652      	mov	r2, sl
 800fd02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fd06:	9109      	str	r1, [sp, #36]	; 0x24
 800fd08:	f7ff ff2f 	bl	800fb6a <__exponent>
 800fd0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd0e:	1813      	adds	r3, r2, r0
 800fd10:	2a01      	cmp	r2, #1
 800fd12:	4681      	mov	r9, r0
 800fd14:	6123      	str	r3, [r4, #16]
 800fd16:	dc02      	bgt.n	800fd1e <_printf_float+0x14e>
 800fd18:	6822      	ldr	r2, [r4, #0]
 800fd1a:	07d1      	lsls	r1, r2, #31
 800fd1c:	d501      	bpl.n	800fd22 <_printf_float+0x152>
 800fd1e:	3301      	adds	r3, #1
 800fd20:	6123      	str	r3, [r4, #16]
 800fd22:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d0a5      	beq.n	800fc76 <_printf_float+0xa6>
 800fd2a:	232d      	movs	r3, #45	; 0x2d
 800fd2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd30:	e7a1      	b.n	800fc76 <_printf_float+0xa6>
 800fd32:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800fd36:	f000 8177 	beq.w	8010028 <_printf_float+0x458>
 800fd3a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800fd3e:	d1bb      	bne.n	800fcb8 <_printf_float+0xe8>
 800fd40:	2900      	cmp	r1, #0
 800fd42:	d1b9      	bne.n	800fcb8 <_printf_float+0xe8>
 800fd44:	2301      	movs	r3, #1
 800fd46:	e7b6      	b.n	800fcb6 <_printf_float+0xe6>
 800fd48:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800fd4c:	d119      	bne.n	800fd82 <_printf_float+0x1b2>
 800fd4e:	2900      	cmp	r1, #0
 800fd50:	6863      	ldr	r3, [r4, #4]
 800fd52:	dd0c      	ble.n	800fd6e <_printf_float+0x19e>
 800fd54:	6121      	str	r1, [r4, #16]
 800fd56:	b913      	cbnz	r3, 800fd5e <_printf_float+0x18e>
 800fd58:	6822      	ldr	r2, [r4, #0]
 800fd5a:	07d2      	lsls	r2, r2, #31
 800fd5c:	d502      	bpl.n	800fd64 <_printf_float+0x194>
 800fd5e:	3301      	adds	r3, #1
 800fd60:	440b      	add	r3, r1
 800fd62:	6123      	str	r3, [r4, #16]
 800fd64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd66:	65a3      	str	r3, [r4, #88]	; 0x58
 800fd68:	f04f 0900 	mov.w	r9, #0
 800fd6c:	e7d9      	b.n	800fd22 <_printf_float+0x152>
 800fd6e:	b913      	cbnz	r3, 800fd76 <_printf_float+0x1a6>
 800fd70:	6822      	ldr	r2, [r4, #0]
 800fd72:	07d0      	lsls	r0, r2, #31
 800fd74:	d501      	bpl.n	800fd7a <_printf_float+0x1aa>
 800fd76:	3302      	adds	r3, #2
 800fd78:	e7f3      	b.n	800fd62 <_printf_float+0x192>
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	e7f1      	b.n	800fd62 <_printf_float+0x192>
 800fd7e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800fd82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fd86:	4293      	cmp	r3, r2
 800fd88:	db05      	blt.n	800fd96 <_printf_float+0x1c6>
 800fd8a:	6822      	ldr	r2, [r4, #0]
 800fd8c:	6123      	str	r3, [r4, #16]
 800fd8e:	07d1      	lsls	r1, r2, #31
 800fd90:	d5e8      	bpl.n	800fd64 <_printf_float+0x194>
 800fd92:	3301      	adds	r3, #1
 800fd94:	e7e5      	b.n	800fd62 <_printf_float+0x192>
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	bfd4      	ite	le
 800fd9a:	f1c3 0302 	rsble	r3, r3, #2
 800fd9e:	2301      	movgt	r3, #1
 800fda0:	4413      	add	r3, r2
 800fda2:	e7de      	b.n	800fd62 <_printf_float+0x192>
 800fda4:	6823      	ldr	r3, [r4, #0]
 800fda6:	055a      	lsls	r2, r3, #21
 800fda8:	d407      	bmi.n	800fdba <_printf_float+0x1ea>
 800fdaa:	6923      	ldr	r3, [r4, #16]
 800fdac:	4642      	mov	r2, r8
 800fdae:	4631      	mov	r1, r6
 800fdb0:	4628      	mov	r0, r5
 800fdb2:	47b8      	blx	r7
 800fdb4:	3001      	adds	r0, #1
 800fdb6:	d12b      	bne.n	800fe10 <_printf_float+0x240>
 800fdb8:	e767      	b.n	800fc8a <_printf_float+0xba>
 800fdba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800fdbe:	f240 80dc 	bls.w	800ff7a <_printf_float+0x3aa>
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fdca:	f7f0 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800fdce:	2800      	cmp	r0, #0
 800fdd0:	d033      	beq.n	800fe3a <_printf_float+0x26a>
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	4a41      	ldr	r2, [pc, #260]	; (800fedc <_printf_float+0x30c>)
 800fdd6:	4631      	mov	r1, r6
 800fdd8:	4628      	mov	r0, r5
 800fdda:	47b8      	blx	r7
 800fddc:	3001      	adds	r0, #1
 800fdde:	f43f af54 	beq.w	800fc8a <_printf_float+0xba>
 800fde2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fde6:	429a      	cmp	r2, r3
 800fde8:	db02      	blt.n	800fdf0 <_printf_float+0x220>
 800fdea:	6823      	ldr	r3, [r4, #0]
 800fdec:	07d8      	lsls	r0, r3, #31
 800fdee:	d50f      	bpl.n	800fe10 <_printf_float+0x240>
 800fdf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fdf4:	4631      	mov	r1, r6
 800fdf6:	4628      	mov	r0, r5
 800fdf8:	47b8      	blx	r7
 800fdfa:	3001      	adds	r0, #1
 800fdfc:	f43f af45 	beq.w	800fc8a <_printf_float+0xba>
 800fe00:	f04f 0800 	mov.w	r8, #0
 800fe04:	f104 091a 	add.w	r9, r4, #26
 800fe08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe0a:	3b01      	subs	r3, #1
 800fe0c:	4543      	cmp	r3, r8
 800fe0e:	dc09      	bgt.n	800fe24 <_printf_float+0x254>
 800fe10:	6823      	ldr	r3, [r4, #0]
 800fe12:	079b      	lsls	r3, r3, #30
 800fe14:	f100 8103 	bmi.w	801001e <_printf_float+0x44e>
 800fe18:	68e0      	ldr	r0, [r4, #12]
 800fe1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe1c:	4298      	cmp	r0, r3
 800fe1e:	bfb8      	it	lt
 800fe20:	4618      	movlt	r0, r3
 800fe22:	e734      	b.n	800fc8e <_printf_float+0xbe>
 800fe24:	2301      	movs	r3, #1
 800fe26:	464a      	mov	r2, r9
 800fe28:	4631      	mov	r1, r6
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	47b8      	blx	r7
 800fe2e:	3001      	adds	r0, #1
 800fe30:	f43f af2b 	beq.w	800fc8a <_printf_float+0xba>
 800fe34:	f108 0801 	add.w	r8, r8, #1
 800fe38:	e7e6      	b.n	800fe08 <_printf_float+0x238>
 800fe3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	dc2b      	bgt.n	800fe98 <_printf_float+0x2c8>
 800fe40:	2301      	movs	r3, #1
 800fe42:	4a26      	ldr	r2, [pc, #152]	; (800fedc <_printf_float+0x30c>)
 800fe44:	4631      	mov	r1, r6
 800fe46:	4628      	mov	r0, r5
 800fe48:	47b8      	blx	r7
 800fe4a:	3001      	adds	r0, #1
 800fe4c:	f43f af1d 	beq.w	800fc8a <_printf_float+0xba>
 800fe50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe52:	b923      	cbnz	r3, 800fe5e <_printf_float+0x28e>
 800fe54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe56:	b913      	cbnz	r3, 800fe5e <_printf_float+0x28e>
 800fe58:	6823      	ldr	r3, [r4, #0]
 800fe5a:	07d9      	lsls	r1, r3, #31
 800fe5c:	d5d8      	bpl.n	800fe10 <_printf_float+0x240>
 800fe5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe62:	4631      	mov	r1, r6
 800fe64:	4628      	mov	r0, r5
 800fe66:	47b8      	blx	r7
 800fe68:	3001      	adds	r0, #1
 800fe6a:	f43f af0e 	beq.w	800fc8a <_printf_float+0xba>
 800fe6e:	f04f 0900 	mov.w	r9, #0
 800fe72:	f104 0a1a 	add.w	sl, r4, #26
 800fe76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe78:	425b      	negs	r3, r3
 800fe7a:	454b      	cmp	r3, r9
 800fe7c:	dc01      	bgt.n	800fe82 <_printf_float+0x2b2>
 800fe7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe80:	e794      	b.n	800fdac <_printf_float+0x1dc>
 800fe82:	2301      	movs	r3, #1
 800fe84:	4652      	mov	r2, sl
 800fe86:	4631      	mov	r1, r6
 800fe88:	4628      	mov	r0, r5
 800fe8a:	47b8      	blx	r7
 800fe8c:	3001      	adds	r0, #1
 800fe8e:	f43f aefc 	beq.w	800fc8a <_printf_float+0xba>
 800fe92:	f109 0901 	add.w	r9, r9, #1
 800fe96:	e7ee      	b.n	800fe76 <_printf_float+0x2a6>
 800fe98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	bfa8      	it	ge
 800fea0:	461a      	movge	r2, r3
 800fea2:	2a00      	cmp	r2, #0
 800fea4:	4691      	mov	r9, r2
 800fea6:	dd07      	ble.n	800feb8 <_printf_float+0x2e8>
 800fea8:	4613      	mov	r3, r2
 800feaa:	4631      	mov	r1, r6
 800feac:	4642      	mov	r2, r8
 800feae:	4628      	mov	r0, r5
 800feb0:	47b8      	blx	r7
 800feb2:	3001      	adds	r0, #1
 800feb4:	f43f aee9 	beq.w	800fc8a <_printf_float+0xba>
 800feb8:	f104 031a 	add.w	r3, r4, #26
 800febc:	f04f 0b00 	mov.w	fp, #0
 800fec0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fec4:	9306      	str	r3, [sp, #24]
 800fec6:	e015      	b.n	800fef4 <_printf_float+0x324>
 800fec8:	7fefffff 	.word	0x7fefffff
 800fecc:	080150e0 	.word	0x080150e0
 800fed0:	080150dc 	.word	0x080150dc
 800fed4:	080150e8 	.word	0x080150e8
 800fed8:	080150e4 	.word	0x080150e4
 800fedc:	080150ec 	.word	0x080150ec
 800fee0:	2301      	movs	r3, #1
 800fee2:	9a06      	ldr	r2, [sp, #24]
 800fee4:	4631      	mov	r1, r6
 800fee6:	4628      	mov	r0, r5
 800fee8:	47b8      	blx	r7
 800feea:	3001      	adds	r0, #1
 800feec:	f43f aecd 	beq.w	800fc8a <_printf_float+0xba>
 800fef0:	f10b 0b01 	add.w	fp, fp, #1
 800fef4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800fef8:	ebaa 0309 	sub.w	r3, sl, r9
 800fefc:	455b      	cmp	r3, fp
 800fefe:	dcef      	bgt.n	800fee0 <_printf_float+0x310>
 800ff00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff04:	429a      	cmp	r2, r3
 800ff06:	44d0      	add	r8, sl
 800ff08:	db15      	blt.n	800ff36 <_printf_float+0x366>
 800ff0a:	6823      	ldr	r3, [r4, #0]
 800ff0c:	07da      	lsls	r2, r3, #31
 800ff0e:	d412      	bmi.n	800ff36 <_printf_float+0x366>
 800ff10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff12:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff14:	eba3 020a 	sub.w	r2, r3, sl
 800ff18:	eba3 0a01 	sub.w	sl, r3, r1
 800ff1c:	4592      	cmp	sl, r2
 800ff1e:	bfa8      	it	ge
 800ff20:	4692      	movge	sl, r2
 800ff22:	f1ba 0f00 	cmp.w	sl, #0
 800ff26:	dc0e      	bgt.n	800ff46 <_printf_float+0x376>
 800ff28:	f04f 0800 	mov.w	r8, #0
 800ff2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ff30:	f104 091a 	add.w	r9, r4, #26
 800ff34:	e019      	b.n	800ff6a <_printf_float+0x39a>
 800ff36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff3a:	4631      	mov	r1, r6
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	47b8      	blx	r7
 800ff40:	3001      	adds	r0, #1
 800ff42:	d1e5      	bne.n	800ff10 <_printf_float+0x340>
 800ff44:	e6a1      	b.n	800fc8a <_printf_float+0xba>
 800ff46:	4653      	mov	r3, sl
 800ff48:	4642      	mov	r2, r8
 800ff4a:	4631      	mov	r1, r6
 800ff4c:	4628      	mov	r0, r5
 800ff4e:	47b8      	blx	r7
 800ff50:	3001      	adds	r0, #1
 800ff52:	d1e9      	bne.n	800ff28 <_printf_float+0x358>
 800ff54:	e699      	b.n	800fc8a <_printf_float+0xba>
 800ff56:	2301      	movs	r3, #1
 800ff58:	464a      	mov	r2, r9
 800ff5a:	4631      	mov	r1, r6
 800ff5c:	4628      	mov	r0, r5
 800ff5e:	47b8      	blx	r7
 800ff60:	3001      	adds	r0, #1
 800ff62:	f43f ae92 	beq.w	800fc8a <_printf_float+0xba>
 800ff66:	f108 0801 	add.w	r8, r8, #1
 800ff6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff6e:	1a9b      	subs	r3, r3, r2
 800ff70:	eba3 030a 	sub.w	r3, r3, sl
 800ff74:	4543      	cmp	r3, r8
 800ff76:	dcee      	bgt.n	800ff56 <_printf_float+0x386>
 800ff78:	e74a      	b.n	800fe10 <_printf_float+0x240>
 800ff7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff7c:	2a01      	cmp	r2, #1
 800ff7e:	dc01      	bgt.n	800ff84 <_printf_float+0x3b4>
 800ff80:	07db      	lsls	r3, r3, #31
 800ff82:	d53a      	bpl.n	800fffa <_printf_float+0x42a>
 800ff84:	2301      	movs	r3, #1
 800ff86:	4642      	mov	r2, r8
 800ff88:	4631      	mov	r1, r6
 800ff8a:	4628      	mov	r0, r5
 800ff8c:	47b8      	blx	r7
 800ff8e:	3001      	adds	r0, #1
 800ff90:	f43f ae7b 	beq.w	800fc8a <_printf_float+0xba>
 800ff94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff98:	4631      	mov	r1, r6
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	47b8      	blx	r7
 800ff9e:	3001      	adds	r0, #1
 800ffa0:	f108 0801 	add.w	r8, r8, #1
 800ffa4:	f43f ae71 	beq.w	800fc8a <_printf_float+0xba>
 800ffa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffaa:	2200      	movs	r2, #0
 800ffac:	f103 3aff 	add.w	sl, r3, #4294967295
 800ffb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	f7f0 fd87 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffba:	b9c8      	cbnz	r0, 800fff0 <_printf_float+0x420>
 800ffbc:	4653      	mov	r3, sl
 800ffbe:	4642      	mov	r2, r8
 800ffc0:	4631      	mov	r1, r6
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	47b8      	blx	r7
 800ffc6:	3001      	adds	r0, #1
 800ffc8:	d10e      	bne.n	800ffe8 <_printf_float+0x418>
 800ffca:	e65e      	b.n	800fc8a <_printf_float+0xba>
 800ffcc:	2301      	movs	r3, #1
 800ffce:	4652      	mov	r2, sl
 800ffd0:	4631      	mov	r1, r6
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	47b8      	blx	r7
 800ffd6:	3001      	adds	r0, #1
 800ffd8:	f43f ae57 	beq.w	800fc8a <_printf_float+0xba>
 800ffdc:	f108 0801 	add.w	r8, r8, #1
 800ffe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffe2:	3b01      	subs	r3, #1
 800ffe4:	4543      	cmp	r3, r8
 800ffe6:	dcf1      	bgt.n	800ffcc <_printf_float+0x3fc>
 800ffe8:	464b      	mov	r3, r9
 800ffea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ffee:	e6de      	b.n	800fdae <_printf_float+0x1de>
 800fff0:	f04f 0800 	mov.w	r8, #0
 800fff4:	f104 0a1a 	add.w	sl, r4, #26
 800fff8:	e7f2      	b.n	800ffe0 <_printf_float+0x410>
 800fffa:	2301      	movs	r3, #1
 800fffc:	e7df      	b.n	800ffbe <_printf_float+0x3ee>
 800fffe:	2301      	movs	r3, #1
 8010000:	464a      	mov	r2, r9
 8010002:	4631      	mov	r1, r6
 8010004:	4628      	mov	r0, r5
 8010006:	47b8      	blx	r7
 8010008:	3001      	adds	r0, #1
 801000a:	f43f ae3e 	beq.w	800fc8a <_printf_float+0xba>
 801000e:	f108 0801 	add.w	r8, r8, #1
 8010012:	68e3      	ldr	r3, [r4, #12]
 8010014:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010016:	1a9b      	subs	r3, r3, r2
 8010018:	4543      	cmp	r3, r8
 801001a:	dcf0      	bgt.n	800fffe <_printf_float+0x42e>
 801001c:	e6fc      	b.n	800fe18 <_printf_float+0x248>
 801001e:	f04f 0800 	mov.w	r8, #0
 8010022:	f104 0919 	add.w	r9, r4, #25
 8010026:	e7f4      	b.n	8010012 <_printf_float+0x442>
 8010028:	2900      	cmp	r1, #0
 801002a:	f43f ae8b 	beq.w	800fd44 <_printf_float+0x174>
 801002e:	2300      	movs	r3, #0
 8010030:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010034:	ab09      	add	r3, sp, #36	; 0x24
 8010036:	9300      	str	r3, [sp, #0]
 8010038:	ec49 8b10 	vmov	d0, r8, r9
 801003c:	6022      	str	r2, [r4, #0]
 801003e:	f8cd a004 	str.w	sl, [sp, #4]
 8010042:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010046:	4628      	mov	r0, r5
 8010048:	f7ff fd2e 	bl	800faa8 <__cvt>
 801004c:	4680      	mov	r8, r0
 801004e:	e648      	b.n	800fce2 <_printf_float+0x112>

08010050 <_printf_common>:
 8010050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010054:	4691      	mov	r9, r2
 8010056:	461f      	mov	r7, r3
 8010058:	688a      	ldr	r2, [r1, #8]
 801005a:	690b      	ldr	r3, [r1, #16]
 801005c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010060:	4293      	cmp	r3, r2
 8010062:	bfb8      	it	lt
 8010064:	4613      	movlt	r3, r2
 8010066:	f8c9 3000 	str.w	r3, [r9]
 801006a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801006e:	4606      	mov	r6, r0
 8010070:	460c      	mov	r4, r1
 8010072:	b112      	cbz	r2, 801007a <_printf_common+0x2a>
 8010074:	3301      	adds	r3, #1
 8010076:	f8c9 3000 	str.w	r3, [r9]
 801007a:	6823      	ldr	r3, [r4, #0]
 801007c:	0699      	lsls	r1, r3, #26
 801007e:	bf42      	ittt	mi
 8010080:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010084:	3302      	addmi	r3, #2
 8010086:	f8c9 3000 	strmi.w	r3, [r9]
 801008a:	6825      	ldr	r5, [r4, #0]
 801008c:	f015 0506 	ands.w	r5, r5, #6
 8010090:	d107      	bne.n	80100a2 <_printf_common+0x52>
 8010092:	f104 0a19 	add.w	sl, r4, #25
 8010096:	68e3      	ldr	r3, [r4, #12]
 8010098:	f8d9 2000 	ldr.w	r2, [r9]
 801009c:	1a9b      	subs	r3, r3, r2
 801009e:	42ab      	cmp	r3, r5
 80100a0:	dc28      	bgt.n	80100f4 <_printf_common+0xa4>
 80100a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80100a6:	6822      	ldr	r2, [r4, #0]
 80100a8:	3300      	adds	r3, #0
 80100aa:	bf18      	it	ne
 80100ac:	2301      	movne	r3, #1
 80100ae:	0692      	lsls	r2, r2, #26
 80100b0:	d42d      	bmi.n	801010e <_printf_common+0xbe>
 80100b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80100b6:	4639      	mov	r1, r7
 80100b8:	4630      	mov	r0, r6
 80100ba:	47c0      	blx	r8
 80100bc:	3001      	adds	r0, #1
 80100be:	d020      	beq.n	8010102 <_printf_common+0xb2>
 80100c0:	6823      	ldr	r3, [r4, #0]
 80100c2:	68e5      	ldr	r5, [r4, #12]
 80100c4:	f8d9 2000 	ldr.w	r2, [r9]
 80100c8:	f003 0306 	and.w	r3, r3, #6
 80100cc:	2b04      	cmp	r3, #4
 80100ce:	bf08      	it	eq
 80100d0:	1aad      	subeq	r5, r5, r2
 80100d2:	68a3      	ldr	r3, [r4, #8]
 80100d4:	6922      	ldr	r2, [r4, #16]
 80100d6:	bf0c      	ite	eq
 80100d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80100dc:	2500      	movne	r5, #0
 80100de:	4293      	cmp	r3, r2
 80100e0:	bfc4      	itt	gt
 80100e2:	1a9b      	subgt	r3, r3, r2
 80100e4:	18ed      	addgt	r5, r5, r3
 80100e6:	f04f 0900 	mov.w	r9, #0
 80100ea:	341a      	adds	r4, #26
 80100ec:	454d      	cmp	r5, r9
 80100ee:	d11a      	bne.n	8010126 <_printf_common+0xd6>
 80100f0:	2000      	movs	r0, #0
 80100f2:	e008      	b.n	8010106 <_printf_common+0xb6>
 80100f4:	2301      	movs	r3, #1
 80100f6:	4652      	mov	r2, sl
 80100f8:	4639      	mov	r1, r7
 80100fa:	4630      	mov	r0, r6
 80100fc:	47c0      	blx	r8
 80100fe:	3001      	adds	r0, #1
 8010100:	d103      	bne.n	801010a <_printf_common+0xba>
 8010102:	f04f 30ff 	mov.w	r0, #4294967295
 8010106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801010a:	3501      	adds	r5, #1
 801010c:	e7c3      	b.n	8010096 <_printf_common+0x46>
 801010e:	18e1      	adds	r1, r4, r3
 8010110:	1c5a      	adds	r2, r3, #1
 8010112:	2030      	movs	r0, #48	; 0x30
 8010114:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010118:	4422      	add	r2, r4
 801011a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801011e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010122:	3302      	adds	r3, #2
 8010124:	e7c5      	b.n	80100b2 <_printf_common+0x62>
 8010126:	2301      	movs	r3, #1
 8010128:	4622      	mov	r2, r4
 801012a:	4639      	mov	r1, r7
 801012c:	4630      	mov	r0, r6
 801012e:	47c0      	blx	r8
 8010130:	3001      	adds	r0, #1
 8010132:	d0e6      	beq.n	8010102 <_printf_common+0xb2>
 8010134:	f109 0901 	add.w	r9, r9, #1
 8010138:	e7d8      	b.n	80100ec <_printf_common+0x9c>
	...

0801013c <_printf_i>:
 801013c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010140:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010144:	460c      	mov	r4, r1
 8010146:	7e09      	ldrb	r1, [r1, #24]
 8010148:	b085      	sub	sp, #20
 801014a:	296e      	cmp	r1, #110	; 0x6e
 801014c:	4617      	mov	r7, r2
 801014e:	4606      	mov	r6, r0
 8010150:	4698      	mov	r8, r3
 8010152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010154:	f000 80b3 	beq.w	80102be <_printf_i+0x182>
 8010158:	d822      	bhi.n	80101a0 <_printf_i+0x64>
 801015a:	2963      	cmp	r1, #99	; 0x63
 801015c:	d036      	beq.n	80101cc <_printf_i+0x90>
 801015e:	d80a      	bhi.n	8010176 <_printf_i+0x3a>
 8010160:	2900      	cmp	r1, #0
 8010162:	f000 80b9 	beq.w	80102d8 <_printf_i+0x19c>
 8010166:	2958      	cmp	r1, #88	; 0x58
 8010168:	f000 8083 	beq.w	8010272 <_printf_i+0x136>
 801016c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010170:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010174:	e032      	b.n	80101dc <_printf_i+0xa0>
 8010176:	2964      	cmp	r1, #100	; 0x64
 8010178:	d001      	beq.n	801017e <_printf_i+0x42>
 801017a:	2969      	cmp	r1, #105	; 0x69
 801017c:	d1f6      	bne.n	801016c <_printf_i+0x30>
 801017e:	6820      	ldr	r0, [r4, #0]
 8010180:	6813      	ldr	r3, [r2, #0]
 8010182:	0605      	lsls	r5, r0, #24
 8010184:	f103 0104 	add.w	r1, r3, #4
 8010188:	d52a      	bpl.n	80101e0 <_printf_i+0xa4>
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	6011      	str	r1, [r2, #0]
 801018e:	2b00      	cmp	r3, #0
 8010190:	da03      	bge.n	801019a <_printf_i+0x5e>
 8010192:	222d      	movs	r2, #45	; 0x2d
 8010194:	425b      	negs	r3, r3
 8010196:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801019a:	486f      	ldr	r0, [pc, #444]	; (8010358 <_printf_i+0x21c>)
 801019c:	220a      	movs	r2, #10
 801019e:	e039      	b.n	8010214 <_printf_i+0xd8>
 80101a0:	2973      	cmp	r1, #115	; 0x73
 80101a2:	f000 809d 	beq.w	80102e0 <_printf_i+0x1a4>
 80101a6:	d808      	bhi.n	80101ba <_printf_i+0x7e>
 80101a8:	296f      	cmp	r1, #111	; 0x6f
 80101aa:	d020      	beq.n	80101ee <_printf_i+0xb2>
 80101ac:	2970      	cmp	r1, #112	; 0x70
 80101ae:	d1dd      	bne.n	801016c <_printf_i+0x30>
 80101b0:	6823      	ldr	r3, [r4, #0]
 80101b2:	f043 0320 	orr.w	r3, r3, #32
 80101b6:	6023      	str	r3, [r4, #0]
 80101b8:	e003      	b.n	80101c2 <_printf_i+0x86>
 80101ba:	2975      	cmp	r1, #117	; 0x75
 80101bc:	d017      	beq.n	80101ee <_printf_i+0xb2>
 80101be:	2978      	cmp	r1, #120	; 0x78
 80101c0:	d1d4      	bne.n	801016c <_printf_i+0x30>
 80101c2:	2378      	movs	r3, #120	; 0x78
 80101c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80101c8:	4864      	ldr	r0, [pc, #400]	; (801035c <_printf_i+0x220>)
 80101ca:	e055      	b.n	8010278 <_printf_i+0x13c>
 80101cc:	6813      	ldr	r3, [r2, #0]
 80101ce:	1d19      	adds	r1, r3, #4
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	6011      	str	r1, [r2, #0]
 80101d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80101dc:	2301      	movs	r3, #1
 80101de:	e08c      	b.n	80102fa <_printf_i+0x1be>
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	6011      	str	r1, [r2, #0]
 80101e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80101e8:	bf18      	it	ne
 80101ea:	b21b      	sxthne	r3, r3
 80101ec:	e7cf      	b.n	801018e <_printf_i+0x52>
 80101ee:	6813      	ldr	r3, [r2, #0]
 80101f0:	6825      	ldr	r5, [r4, #0]
 80101f2:	1d18      	adds	r0, r3, #4
 80101f4:	6010      	str	r0, [r2, #0]
 80101f6:	0628      	lsls	r0, r5, #24
 80101f8:	d501      	bpl.n	80101fe <_printf_i+0xc2>
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	e002      	b.n	8010204 <_printf_i+0xc8>
 80101fe:	0668      	lsls	r0, r5, #25
 8010200:	d5fb      	bpl.n	80101fa <_printf_i+0xbe>
 8010202:	881b      	ldrh	r3, [r3, #0]
 8010204:	4854      	ldr	r0, [pc, #336]	; (8010358 <_printf_i+0x21c>)
 8010206:	296f      	cmp	r1, #111	; 0x6f
 8010208:	bf14      	ite	ne
 801020a:	220a      	movne	r2, #10
 801020c:	2208      	moveq	r2, #8
 801020e:	2100      	movs	r1, #0
 8010210:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010214:	6865      	ldr	r5, [r4, #4]
 8010216:	60a5      	str	r5, [r4, #8]
 8010218:	2d00      	cmp	r5, #0
 801021a:	f2c0 8095 	blt.w	8010348 <_printf_i+0x20c>
 801021e:	6821      	ldr	r1, [r4, #0]
 8010220:	f021 0104 	bic.w	r1, r1, #4
 8010224:	6021      	str	r1, [r4, #0]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d13d      	bne.n	80102a6 <_printf_i+0x16a>
 801022a:	2d00      	cmp	r5, #0
 801022c:	f040 808e 	bne.w	801034c <_printf_i+0x210>
 8010230:	4665      	mov	r5, ip
 8010232:	2a08      	cmp	r2, #8
 8010234:	d10b      	bne.n	801024e <_printf_i+0x112>
 8010236:	6823      	ldr	r3, [r4, #0]
 8010238:	07db      	lsls	r3, r3, #31
 801023a:	d508      	bpl.n	801024e <_printf_i+0x112>
 801023c:	6923      	ldr	r3, [r4, #16]
 801023e:	6862      	ldr	r2, [r4, #4]
 8010240:	429a      	cmp	r2, r3
 8010242:	bfde      	ittt	le
 8010244:	2330      	movle	r3, #48	; 0x30
 8010246:	f805 3c01 	strble.w	r3, [r5, #-1]
 801024a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801024e:	ebac 0305 	sub.w	r3, ip, r5
 8010252:	6123      	str	r3, [r4, #16]
 8010254:	f8cd 8000 	str.w	r8, [sp]
 8010258:	463b      	mov	r3, r7
 801025a:	aa03      	add	r2, sp, #12
 801025c:	4621      	mov	r1, r4
 801025e:	4630      	mov	r0, r6
 8010260:	f7ff fef6 	bl	8010050 <_printf_common>
 8010264:	3001      	adds	r0, #1
 8010266:	d14d      	bne.n	8010304 <_printf_i+0x1c8>
 8010268:	f04f 30ff 	mov.w	r0, #4294967295
 801026c:	b005      	add	sp, #20
 801026e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010272:	4839      	ldr	r0, [pc, #228]	; (8010358 <_printf_i+0x21c>)
 8010274:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010278:	6813      	ldr	r3, [r2, #0]
 801027a:	6821      	ldr	r1, [r4, #0]
 801027c:	1d1d      	adds	r5, r3, #4
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	6015      	str	r5, [r2, #0]
 8010282:	060a      	lsls	r2, r1, #24
 8010284:	d50b      	bpl.n	801029e <_printf_i+0x162>
 8010286:	07ca      	lsls	r2, r1, #31
 8010288:	bf44      	itt	mi
 801028a:	f041 0120 	orrmi.w	r1, r1, #32
 801028e:	6021      	strmi	r1, [r4, #0]
 8010290:	b91b      	cbnz	r3, 801029a <_printf_i+0x15e>
 8010292:	6822      	ldr	r2, [r4, #0]
 8010294:	f022 0220 	bic.w	r2, r2, #32
 8010298:	6022      	str	r2, [r4, #0]
 801029a:	2210      	movs	r2, #16
 801029c:	e7b7      	b.n	801020e <_printf_i+0xd2>
 801029e:	064d      	lsls	r5, r1, #25
 80102a0:	bf48      	it	mi
 80102a2:	b29b      	uxthmi	r3, r3
 80102a4:	e7ef      	b.n	8010286 <_printf_i+0x14a>
 80102a6:	4665      	mov	r5, ip
 80102a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80102ac:	fb02 3311 	mls	r3, r2, r1, r3
 80102b0:	5cc3      	ldrb	r3, [r0, r3]
 80102b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80102b6:	460b      	mov	r3, r1
 80102b8:	2900      	cmp	r1, #0
 80102ba:	d1f5      	bne.n	80102a8 <_printf_i+0x16c>
 80102bc:	e7b9      	b.n	8010232 <_printf_i+0xf6>
 80102be:	6813      	ldr	r3, [r2, #0]
 80102c0:	6825      	ldr	r5, [r4, #0]
 80102c2:	6961      	ldr	r1, [r4, #20]
 80102c4:	1d18      	adds	r0, r3, #4
 80102c6:	6010      	str	r0, [r2, #0]
 80102c8:	0628      	lsls	r0, r5, #24
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	d501      	bpl.n	80102d2 <_printf_i+0x196>
 80102ce:	6019      	str	r1, [r3, #0]
 80102d0:	e002      	b.n	80102d8 <_printf_i+0x19c>
 80102d2:	066a      	lsls	r2, r5, #25
 80102d4:	d5fb      	bpl.n	80102ce <_printf_i+0x192>
 80102d6:	8019      	strh	r1, [r3, #0]
 80102d8:	2300      	movs	r3, #0
 80102da:	6123      	str	r3, [r4, #16]
 80102dc:	4665      	mov	r5, ip
 80102de:	e7b9      	b.n	8010254 <_printf_i+0x118>
 80102e0:	6813      	ldr	r3, [r2, #0]
 80102e2:	1d19      	adds	r1, r3, #4
 80102e4:	6011      	str	r1, [r2, #0]
 80102e6:	681d      	ldr	r5, [r3, #0]
 80102e8:	6862      	ldr	r2, [r4, #4]
 80102ea:	2100      	movs	r1, #0
 80102ec:	4628      	mov	r0, r5
 80102ee:	f7ef ff77 	bl	80001e0 <memchr>
 80102f2:	b108      	cbz	r0, 80102f8 <_printf_i+0x1bc>
 80102f4:	1b40      	subs	r0, r0, r5
 80102f6:	6060      	str	r0, [r4, #4]
 80102f8:	6863      	ldr	r3, [r4, #4]
 80102fa:	6123      	str	r3, [r4, #16]
 80102fc:	2300      	movs	r3, #0
 80102fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010302:	e7a7      	b.n	8010254 <_printf_i+0x118>
 8010304:	6923      	ldr	r3, [r4, #16]
 8010306:	462a      	mov	r2, r5
 8010308:	4639      	mov	r1, r7
 801030a:	4630      	mov	r0, r6
 801030c:	47c0      	blx	r8
 801030e:	3001      	adds	r0, #1
 8010310:	d0aa      	beq.n	8010268 <_printf_i+0x12c>
 8010312:	6823      	ldr	r3, [r4, #0]
 8010314:	079b      	lsls	r3, r3, #30
 8010316:	d413      	bmi.n	8010340 <_printf_i+0x204>
 8010318:	68e0      	ldr	r0, [r4, #12]
 801031a:	9b03      	ldr	r3, [sp, #12]
 801031c:	4298      	cmp	r0, r3
 801031e:	bfb8      	it	lt
 8010320:	4618      	movlt	r0, r3
 8010322:	e7a3      	b.n	801026c <_printf_i+0x130>
 8010324:	2301      	movs	r3, #1
 8010326:	464a      	mov	r2, r9
 8010328:	4639      	mov	r1, r7
 801032a:	4630      	mov	r0, r6
 801032c:	47c0      	blx	r8
 801032e:	3001      	adds	r0, #1
 8010330:	d09a      	beq.n	8010268 <_printf_i+0x12c>
 8010332:	3501      	adds	r5, #1
 8010334:	68e3      	ldr	r3, [r4, #12]
 8010336:	9a03      	ldr	r2, [sp, #12]
 8010338:	1a9b      	subs	r3, r3, r2
 801033a:	42ab      	cmp	r3, r5
 801033c:	dcf2      	bgt.n	8010324 <_printf_i+0x1e8>
 801033e:	e7eb      	b.n	8010318 <_printf_i+0x1dc>
 8010340:	2500      	movs	r5, #0
 8010342:	f104 0919 	add.w	r9, r4, #25
 8010346:	e7f5      	b.n	8010334 <_printf_i+0x1f8>
 8010348:	2b00      	cmp	r3, #0
 801034a:	d1ac      	bne.n	80102a6 <_printf_i+0x16a>
 801034c:	7803      	ldrb	r3, [r0, #0]
 801034e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010352:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010356:	e76c      	b.n	8010232 <_printf_i+0xf6>
 8010358:	080150ee 	.word	0x080150ee
 801035c:	080150ff 	.word	0x080150ff

08010360 <_scanf_float>:
 8010360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010364:	469a      	mov	sl, r3
 8010366:	688b      	ldr	r3, [r1, #8]
 8010368:	4616      	mov	r6, r2
 801036a:	1e5a      	subs	r2, r3, #1
 801036c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010370:	b087      	sub	sp, #28
 8010372:	bf83      	ittte	hi
 8010374:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8010378:	189b      	addhi	r3, r3, r2
 801037a:	9301      	strhi	r3, [sp, #4]
 801037c:	2300      	movls	r3, #0
 801037e:	bf86      	itte	hi
 8010380:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010384:	608b      	strhi	r3, [r1, #8]
 8010386:	9301      	strls	r3, [sp, #4]
 8010388:	680b      	ldr	r3, [r1, #0]
 801038a:	4688      	mov	r8, r1
 801038c:	f04f 0b00 	mov.w	fp, #0
 8010390:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010394:	f848 3b1c 	str.w	r3, [r8], #28
 8010398:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801039c:	4607      	mov	r7, r0
 801039e:	460c      	mov	r4, r1
 80103a0:	4645      	mov	r5, r8
 80103a2:	465a      	mov	r2, fp
 80103a4:	46d9      	mov	r9, fp
 80103a6:	f8cd b008 	str.w	fp, [sp, #8]
 80103aa:	68a1      	ldr	r1, [r4, #8]
 80103ac:	b181      	cbz	r1, 80103d0 <_scanf_float+0x70>
 80103ae:	6833      	ldr	r3, [r6, #0]
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	2b49      	cmp	r3, #73	; 0x49
 80103b4:	d071      	beq.n	801049a <_scanf_float+0x13a>
 80103b6:	d84d      	bhi.n	8010454 <_scanf_float+0xf4>
 80103b8:	2b39      	cmp	r3, #57	; 0x39
 80103ba:	d840      	bhi.n	801043e <_scanf_float+0xde>
 80103bc:	2b31      	cmp	r3, #49	; 0x31
 80103be:	f080 8088 	bcs.w	80104d2 <_scanf_float+0x172>
 80103c2:	2b2d      	cmp	r3, #45	; 0x2d
 80103c4:	f000 8090 	beq.w	80104e8 <_scanf_float+0x188>
 80103c8:	d815      	bhi.n	80103f6 <_scanf_float+0x96>
 80103ca:	2b2b      	cmp	r3, #43	; 0x2b
 80103cc:	f000 808c 	beq.w	80104e8 <_scanf_float+0x188>
 80103d0:	f1b9 0f00 	cmp.w	r9, #0
 80103d4:	d003      	beq.n	80103de <_scanf_float+0x7e>
 80103d6:	6823      	ldr	r3, [r4, #0]
 80103d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80103dc:	6023      	str	r3, [r4, #0]
 80103de:	3a01      	subs	r2, #1
 80103e0:	2a01      	cmp	r2, #1
 80103e2:	f200 80ea 	bhi.w	80105ba <_scanf_float+0x25a>
 80103e6:	4545      	cmp	r5, r8
 80103e8:	f200 80dc 	bhi.w	80105a4 <_scanf_float+0x244>
 80103ec:	2601      	movs	r6, #1
 80103ee:	4630      	mov	r0, r6
 80103f0:	b007      	add	sp, #28
 80103f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103f6:	2b2e      	cmp	r3, #46	; 0x2e
 80103f8:	f000 809f 	beq.w	801053a <_scanf_float+0x1da>
 80103fc:	2b30      	cmp	r3, #48	; 0x30
 80103fe:	d1e7      	bne.n	80103d0 <_scanf_float+0x70>
 8010400:	6820      	ldr	r0, [r4, #0]
 8010402:	f410 7f80 	tst.w	r0, #256	; 0x100
 8010406:	d064      	beq.n	80104d2 <_scanf_float+0x172>
 8010408:	9b01      	ldr	r3, [sp, #4]
 801040a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801040e:	6020      	str	r0, [r4, #0]
 8010410:	f109 0901 	add.w	r9, r9, #1
 8010414:	b11b      	cbz	r3, 801041e <_scanf_float+0xbe>
 8010416:	3b01      	subs	r3, #1
 8010418:	3101      	adds	r1, #1
 801041a:	9301      	str	r3, [sp, #4]
 801041c:	60a1      	str	r1, [r4, #8]
 801041e:	68a3      	ldr	r3, [r4, #8]
 8010420:	3b01      	subs	r3, #1
 8010422:	60a3      	str	r3, [r4, #8]
 8010424:	6923      	ldr	r3, [r4, #16]
 8010426:	3301      	adds	r3, #1
 8010428:	6123      	str	r3, [r4, #16]
 801042a:	6873      	ldr	r3, [r6, #4]
 801042c:	3b01      	subs	r3, #1
 801042e:	2b00      	cmp	r3, #0
 8010430:	6073      	str	r3, [r6, #4]
 8010432:	f340 80ac 	ble.w	801058e <_scanf_float+0x22e>
 8010436:	6833      	ldr	r3, [r6, #0]
 8010438:	3301      	adds	r3, #1
 801043a:	6033      	str	r3, [r6, #0]
 801043c:	e7b5      	b.n	80103aa <_scanf_float+0x4a>
 801043e:	2b45      	cmp	r3, #69	; 0x45
 8010440:	f000 8085 	beq.w	801054e <_scanf_float+0x1ee>
 8010444:	2b46      	cmp	r3, #70	; 0x46
 8010446:	d06a      	beq.n	801051e <_scanf_float+0x1be>
 8010448:	2b41      	cmp	r3, #65	; 0x41
 801044a:	d1c1      	bne.n	80103d0 <_scanf_float+0x70>
 801044c:	2a01      	cmp	r2, #1
 801044e:	d1bf      	bne.n	80103d0 <_scanf_float+0x70>
 8010450:	2202      	movs	r2, #2
 8010452:	e046      	b.n	80104e2 <_scanf_float+0x182>
 8010454:	2b65      	cmp	r3, #101	; 0x65
 8010456:	d07a      	beq.n	801054e <_scanf_float+0x1ee>
 8010458:	d818      	bhi.n	801048c <_scanf_float+0x12c>
 801045a:	2b54      	cmp	r3, #84	; 0x54
 801045c:	d066      	beq.n	801052c <_scanf_float+0x1cc>
 801045e:	d811      	bhi.n	8010484 <_scanf_float+0x124>
 8010460:	2b4e      	cmp	r3, #78	; 0x4e
 8010462:	d1b5      	bne.n	80103d0 <_scanf_float+0x70>
 8010464:	2a00      	cmp	r2, #0
 8010466:	d146      	bne.n	80104f6 <_scanf_float+0x196>
 8010468:	f1b9 0f00 	cmp.w	r9, #0
 801046c:	d145      	bne.n	80104fa <_scanf_float+0x19a>
 801046e:	6821      	ldr	r1, [r4, #0]
 8010470:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8010474:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8010478:	d13f      	bne.n	80104fa <_scanf_float+0x19a>
 801047a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801047e:	6021      	str	r1, [r4, #0]
 8010480:	2201      	movs	r2, #1
 8010482:	e02e      	b.n	80104e2 <_scanf_float+0x182>
 8010484:	2b59      	cmp	r3, #89	; 0x59
 8010486:	d01e      	beq.n	80104c6 <_scanf_float+0x166>
 8010488:	2b61      	cmp	r3, #97	; 0x61
 801048a:	e7de      	b.n	801044a <_scanf_float+0xea>
 801048c:	2b6e      	cmp	r3, #110	; 0x6e
 801048e:	d0e9      	beq.n	8010464 <_scanf_float+0x104>
 8010490:	d815      	bhi.n	80104be <_scanf_float+0x15e>
 8010492:	2b66      	cmp	r3, #102	; 0x66
 8010494:	d043      	beq.n	801051e <_scanf_float+0x1be>
 8010496:	2b69      	cmp	r3, #105	; 0x69
 8010498:	d19a      	bne.n	80103d0 <_scanf_float+0x70>
 801049a:	f1bb 0f00 	cmp.w	fp, #0
 801049e:	d138      	bne.n	8010512 <_scanf_float+0x1b2>
 80104a0:	f1b9 0f00 	cmp.w	r9, #0
 80104a4:	d197      	bne.n	80103d6 <_scanf_float+0x76>
 80104a6:	6821      	ldr	r1, [r4, #0]
 80104a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80104ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80104b0:	d195      	bne.n	80103de <_scanf_float+0x7e>
 80104b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80104b6:	6021      	str	r1, [r4, #0]
 80104b8:	f04f 0b01 	mov.w	fp, #1
 80104bc:	e011      	b.n	80104e2 <_scanf_float+0x182>
 80104be:	2b74      	cmp	r3, #116	; 0x74
 80104c0:	d034      	beq.n	801052c <_scanf_float+0x1cc>
 80104c2:	2b79      	cmp	r3, #121	; 0x79
 80104c4:	d184      	bne.n	80103d0 <_scanf_float+0x70>
 80104c6:	f1bb 0f07 	cmp.w	fp, #7
 80104ca:	d181      	bne.n	80103d0 <_scanf_float+0x70>
 80104cc:	f04f 0b08 	mov.w	fp, #8
 80104d0:	e007      	b.n	80104e2 <_scanf_float+0x182>
 80104d2:	eb12 0f0b 	cmn.w	r2, fp
 80104d6:	f47f af7b 	bne.w	80103d0 <_scanf_float+0x70>
 80104da:	6821      	ldr	r1, [r4, #0]
 80104dc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80104e0:	6021      	str	r1, [r4, #0]
 80104e2:	702b      	strb	r3, [r5, #0]
 80104e4:	3501      	adds	r5, #1
 80104e6:	e79a      	b.n	801041e <_scanf_float+0xbe>
 80104e8:	6821      	ldr	r1, [r4, #0]
 80104ea:	0608      	lsls	r0, r1, #24
 80104ec:	f57f af70 	bpl.w	80103d0 <_scanf_float+0x70>
 80104f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80104f4:	e7f4      	b.n	80104e0 <_scanf_float+0x180>
 80104f6:	2a02      	cmp	r2, #2
 80104f8:	d047      	beq.n	801058a <_scanf_float+0x22a>
 80104fa:	f1bb 0f01 	cmp.w	fp, #1
 80104fe:	d003      	beq.n	8010508 <_scanf_float+0x1a8>
 8010500:	f1bb 0f04 	cmp.w	fp, #4
 8010504:	f47f af64 	bne.w	80103d0 <_scanf_float+0x70>
 8010508:	f10b 0b01 	add.w	fp, fp, #1
 801050c:	fa5f fb8b 	uxtb.w	fp, fp
 8010510:	e7e7      	b.n	80104e2 <_scanf_float+0x182>
 8010512:	f1bb 0f03 	cmp.w	fp, #3
 8010516:	d0f7      	beq.n	8010508 <_scanf_float+0x1a8>
 8010518:	f1bb 0f05 	cmp.w	fp, #5
 801051c:	e7f2      	b.n	8010504 <_scanf_float+0x1a4>
 801051e:	f1bb 0f02 	cmp.w	fp, #2
 8010522:	f47f af55 	bne.w	80103d0 <_scanf_float+0x70>
 8010526:	f04f 0b03 	mov.w	fp, #3
 801052a:	e7da      	b.n	80104e2 <_scanf_float+0x182>
 801052c:	f1bb 0f06 	cmp.w	fp, #6
 8010530:	f47f af4e 	bne.w	80103d0 <_scanf_float+0x70>
 8010534:	f04f 0b07 	mov.w	fp, #7
 8010538:	e7d3      	b.n	80104e2 <_scanf_float+0x182>
 801053a:	6821      	ldr	r1, [r4, #0]
 801053c:	0588      	lsls	r0, r1, #22
 801053e:	f57f af47 	bpl.w	80103d0 <_scanf_float+0x70>
 8010542:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8010546:	6021      	str	r1, [r4, #0]
 8010548:	f8cd 9008 	str.w	r9, [sp, #8]
 801054c:	e7c9      	b.n	80104e2 <_scanf_float+0x182>
 801054e:	6821      	ldr	r1, [r4, #0]
 8010550:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8010554:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010558:	d006      	beq.n	8010568 <_scanf_float+0x208>
 801055a:	0548      	lsls	r0, r1, #21
 801055c:	f57f af38 	bpl.w	80103d0 <_scanf_float+0x70>
 8010560:	f1b9 0f00 	cmp.w	r9, #0
 8010564:	f43f af3b 	beq.w	80103de <_scanf_float+0x7e>
 8010568:	0588      	lsls	r0, r1, #22
 801056a:	bf58      	it	pl
 801056c:	9802      	ldrpl	r0, [sp, #8]
 801056e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8010572:	bf58      	it	pl
 8010574:	eba9 0000 	subpl.w	r0, r9, r0
 8010578:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801057c:	bf58      	it	pl
 801057e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8010582:	6021      	str	r1, [r4, #0]
 8010584:	f04f 0900 	mov.w	r9, #0
 8010588:	e7ab      	b.n	80104e2 <_scanf_float+0x182>
 801058a:	2203      	movs	r2, #3
 801058c:	e7a9      	b.n	80104e2 <_scanf_float+0x182>
 801058e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010592:	9205      	str	r2, [sp, #20]
 8010594:	4631      	mov	r1, r6
 8010596:	4638      	mov	r0, r7
 8010598:	4798      	blx	r3
 801059a:	9a05      	ldr	r2, [sp, #20]
 801059c:	2800      	cmp	r0, #0
 801059e:	f43f af04 	beq.w	80103aa <_scanf_float+0x4a>
 80105a2:	e715      	b.n	80103d0 <_scanf_float+0x70>
 80105a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80105a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80105ac:	4632      	mov	r2, r6
 80105ae:	4638      	mov	r0, r7
 80105b0:	4798      	blx	r3
 80105b2:	6923      	ldr	r3, [r4, #16]
 80105b4:	3b01      	subs	r3, #1
 80105b6:	6123      	str	r3, [r4, #16]
 80105b8:	e715      	b.n	80103e6 <_scanf_float+0x86>
 80105ba:	f10b 33ff 	add.w	r3, fp, #4294967295
 80105be:	2b06      	cmp	r3, #6
 80105c0:	d80a      	bhi.n	80105d8 <_scanf_float+0x278>
 80105c2:	f1bb 0f02 	cmp.w	fp, #2
 80105c6:	d968      	bls.n	801069a <_scanf_float+0x33a>
 80105c8:	f1ab 0b03 	sub.w	fp, fp, #3
 80105cc:	fa5f fb8b 	uxtb.w	fp, fp
 80105d0:	eba5 0b0b 	sub.w	fp, r5, fp
 80105d4:	455d      	cmp	r5, fp
 80105d6:	d14b      	bne.n	8010670 <_scanf_float+0x310>
 80105d8:	6823      	ldr	r3, [r4, #0]
 80105da:	05da      	lsls	r2, r3, #23
 80105dc:	d51f      	bpl.n	801061e <_scanf_float+0x2be>
 80105de:	055b      	lsls	r3, r3, #21
 80105e0:	d468      	bmi.n	80106b4 <_scanf_float+0x354>
 80105e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80105e6:	6923      	ldr	r3, [r4, #16]
 80105e8:	2965      	cmp	r1, #101	; 0x65
 80105ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80105ee:	f105 3bff 	add.w	fp, r5, #4294967295
 80105f2:	6123      	str	r3, [r4, #16]
 80105f4:	d00d      	beq.n	8010612 <_scanf_float+0x2b2>
 80105f6:	2945      	cmp	r1, #69	; 0x45
 80105f8:	d00b      	beq.n	8010612 <_scanf_float+0x2b2>
 80105fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80105fe:	4632      	mov	r2, r6
 8010600:	4638      	mov	r0, r7
 8010602:	4798      	blx	r3
 8010604:	6923      	ldr	r3, [r4, #16]
 8010606:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801060a:	3b01      	subs	r3, #1
 801060c:	f1a5 0b02 	sub.w	fp, r5, #2
 8010610:	6123      	str	r3, [r4, #16]
 8010612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010616:	4632      	mov	r2, r6
 8010618:	4638      	mov	r0, r7
 801061a:	4798      	blx	r3
 801061c:	465d      	mov	r5, fp
 801061e:	6826      	ldr	r6, [r4, #0]
 8010620:	f016 0610 	ands.w	r6, r6, #16
 8010624:	d17a      	bne.n	801071c <_scanf_float+0x3bc>
 8010626:	702e      	strb	r6, [r5, #0]
 8010628:	6823      	ldr	r3, [r4, #0]
 801062a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801062e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010632:	d142      	bne.n	80106ba <_scanf_float+0x35a>
 8010634:	9b02      	ldr	r3, [sp, #8]
 8010636:	eba9 0303 	sub.w	r3, r9, r3
 801063a:	425a      	negs	r2, r3
 801063c:	2b00      	cmp	r3, #0
 801063e:	d149      	bne.n	80106d4 <_scanf_float+0x374>
 8010640:	2200      	movs	r2, #0
 8010642:	4641      	mov	r1, r8
 8010644:	4638      	mov	r0, r7
 8010646:	f000 fec7 	bl	80113d8 <_strtod_r>
 801064a:	6825      	ldr	r5, [r4, #0]
 801064c:	f8da 3000 	ldr.w	r3, [sl]
 8010650:	f015 0f02 	tst.w	r5, #2
 8010654:	f103 0204 	add.w	r2, r3, #4
 8010658:	ec59 8b10 	vmov	r8, r9, d0
 801065c:	f8ca 2000 	str.w	r2, [sl]
 8010660:	d043      	beq.n	80106ea <_scanf_float+0x38a>
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	e9c3 8900 	strd	r8, r9, [r3]
 8010668:	68e3      	ldr	r3, [r4, #12]
 801066a:	3301      	adds	r3, #1
 801066c:	60e3      	str	r3, [r4, #12]
 801066e:	e6be      	b.n	80103ee <_scanf_float+0x8e>
 8010670:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010674:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8010678:	4632      	mov	r2, r6
 801067a:	4638      	mov	r0, r7
 801067c:	4798      	blx	r3
 801067e:	6923      	ldr	r3, [r4, #16]
 8010680:	3b01      	subs	r3, #1
 8010682:	6123      	str	r3, [r4, #16]
 8010684:	e7a6      	b.n	80105d4 <_scanf_float+0x274>
 8010686:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801068a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801068e:	4632      	mov	r2, r6
 8010690:	4638      	mov	r0, r7
 8010692:	4798      	blx	r3
 8010694:	6923      	ldr	r3, [r4, #16]
 8010696:	3b01      	subs	r3, #1
 8010698:	6123      	str	r3, [r4, #16]
 801069a:	4545      	cmp	r5, r8
 801069c:	d8f3      	bhi.n	8010686 <_scanf_float+0x326>
 801069e:	e6a5      	b.n	80103ec <_scanf_float+0x8c>
 80106a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80106a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80106a8:	4632      	mov	r2, r6
 80106aa:	4638      	mov	r0, r7
 80106ac:	4798      	blx	r3
 80106ae:	6923      	ldr	r3, [r4, #16]
 80106b0:	3b01      	subs	r3, #1
 80106b2:	6123      	str	r3, [r4, #16]
 80106b4:	4545      	cmp	r5, r8
 80106b6:	d8f3      	bhi.n	80106a0 <_scanf_float+0x340>
 80106b8:	e698      	b.n	80103ec <_scanf_float+0x8c>
 80106ba:	9b03      	ldr	r3, [sp, #12]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d0bf      	beq.n	8010640 <_scanf_float+0x2e0>
 80106c0:	9904      	ldr	r1, [sp, #16]
 80106c2:	230a      	movs	r3, #10
 80106c4:	4632      	mov	r2, r6
 80106c6:	3101      	adds	r1, #1
 80106c8:	4638      	mov	r0, r7
 80106ca:	f000 ff11 	bl	80114f0 <_strtol_r>
 80106ce:	9b03      	ldr	r3, [sp, #12]
 80106d0:	9d04      	ldr	r5, [sp, #16]
 80106d2:	1ac2      	subs	r2, r0, r3
 80106d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80106d8:	429d      	cmp	r5, r3
 80106da:	bf28      	it	cs
 80106dc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80106e0:	490f      	ldr	r1, [pc, #60]	; (8010720 <_scanf_float+0x3c0>)
 80106e2:	4628      	mov	r0, r5
 80106e4:	f000 f834 	bl	8010750 <siprintf>
 80106e8:	e7aa      	b.n	8010640 <_scanf_float+0x2e0>
 80106ea:	f015 0504 	ands.w	r5, r5, #4
 80106ee:	d1b8      	bne.n	8010662 <_scanf_float+0x302>
 80106f0:	681f      	ldr	r7, [r3, #0]
 80106f2:	ee10 2a10 	vmov	r2, s0
 80106f6:	464b      	mov	r3, r9
 80106f8:	ee10 0a10 	vmov	r0, s0
 80106fc:	4649      	mov	r1, r9
 80106fe:	f7f0 fa15 	bl	8000b2c <__aeabi_dcmpun>
 8010702:	b128      	cbz	r0, 8010710 <_scanf_float+0x3b0>
 8010704:	4628      	mov	r0, r5
 8010706:	f000 f81d 	bl	8010744 <nanf>
 801070a:	ed87 0a00 	vstr	s0, [r7]
 801070e:	e7ab      	b.n	8010668 <_scanf_float+0x308>
 8010710:	4640      	mov	r0, r8
 8010712:	4649      	mov	r1, r9
 8010714:	f7f0 fa68 	bl	8000be8 <__aeabi_d2f>
 8010718:	6038      	str	r0, [r7, #0]
 801071a:	e7a5      	b.n	8010668 <_scanf_float+0x308>
 801071c:	2600      	movs	r6, #0
 801071e:	e666      	b.n	80103ee <_scanf_float+0x8e>
 8010720:	08015110 	.word	0x08015110

08010724 <_sbrk_r>:
 8010724:	b538      	push	{r3, r4, r5, lr}
 8010726:	4c06      	ldr	r4, [pc, #24]	; (8010740 <_sbrk_r+0x1c>)
 8010728:	2300      	movs	r3, #0
 801072a:	4605      	mov	r5, r0
 801072c:	4608      	mov	r0, r1
 801072e:	6023      	str	r3, [r4, #0]
 8010730:	f7fe fb0e 	bl	800ed50 <_sbrk>
 8010734:	1c43      	adds	r3, r0, #1
 8010736:	d102      	bne.n	801073e <_sbrk_r+0x1a>
 8010738:	6823      	ldr	r3, [r4, #0]
 801073a:	b103      	cbz	r3, 801073e <_sbrk_r+0x1a>
 801073c:	602b      	str	r3, [r5, #0]
 801073e:	bd38      	pop	{r3, r4, r5, pc}
 8010740:	20007e94 	.word	0x20007e94

08010744 <nanf>:
 8010744:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801074c <nanf+0x8>
 8010748:	4770      	bx	lr
 801074a:	bf00      	nop
 801074c:	7fc00000 	.word	0x7fc00000

08010750 <siprintf>:
 8010750:	b40e      	push	{r1, r2, r3}
 8010752:	b500      	push	{lr}
 8010754:	b09c      	sub	sp, #112	; 0x70
 8010756:	ab1d      	add	r3, sp, #116	; 0x74
 8010758:	9002      	str	r0, [sp, #8]
 801075a:	9006      	str	r0, [sp, #24]
 801075c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010760:	4809      	ldr	r0, [pc, #36]	; (8010788 <siprintf+0x38>)
 8010762:	9107      	str	r1, [sp, #28]
 8010764:	9104      	str	r1, [sp, #16]
 8010766:	4909      	ldr	r1, [pc, #36]	; (801078c <siprintf+0x3c>)
 8010768:	f853 2b04 	ldr.w	r2, [r3], #4
 801076c:	9105      	str	r1, [sp, #20]
 801076e:	6800      	ldr	r0, [r0, #0]
 8010770:	9301      	str	r3, [sp, #4]
 8010772:	a902      	add	r1, sp, #8
 8010774:	f002 fcea 	bl	801314c <_svfiprintf_r>
 8010778:	9b02      	ldr	r3, [sp, #8]
 801077a:	2200      	movs	r2, #0
 801077c:	701a      	strb	r2, [r3, #0]
 801077e:	b01c      	add	sp, #112	; 0x70
 8010780:	f85d eb04 	ldr.w	lr, [sp], #4
 8010784:	b003      	add	sp, #12
 8010786:	4770      	bx	lr
 8010788:	200001c0 	.word	0x200001c0
 801078c:	ffff0208 	.word	0xffff0208

08010790 <strncmp>:
 8010790:	b510      	push	{r4, lr}
 8010792:	b16a      	cbz	r2, 80107b0 <strncmp+0x20>
 8010794:	3901      	subs	r1, #1
 8010796:	1884      	adds	r4, r0, r2
 8010798:	f810 3b01 	ldrb.w	r3, [r0], #1
 801079c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80107a0:	4293      	cmp	r3, r2
 80107a2:	d103      	bne.n	80107ac <strncmp+0x1c>
 80107a4:	42a0      	cmp	r0, r4
 80107a6:	d001      	beq.n	80107ac <strncmp+0x1c>
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d1f5      	bne.n	8010798 <strncmp+0x8>
 80107ac:	1a98      	subs	r0, r3, r2
 80107ae:	bd10      	pop	{r4, pc}
 80107b0:	4610      	mov	r0, r2
 80107b2:	e7fc      	b.n	80107ae <strncmp+0x1e>

080107b4 <sulp>:
 80107b4:	b570      	push	{r4, r5, r6, lr}
 80107b6:	4604      	mov	r4, r0
 80107b8:	460d      	mov	r5, r1
 80107ba:	ec45 4b10 	vmov	d0, r4, r5
 80107be:	4616      	mov	r6, r2
 80107c0:	f002 fb28 	bl	8012e14 <__ulp>
 80107c4:	ec51 0b10 	vmov	r0, r1, d0
 80107c8:	b17e      	cbz	r6, 80107ea <sulp+0x36>
 80107ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80107ce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	dd09      	ble.n	80107ea <sulp+0x36>
 80107d6:	051b      	lsls	r3, r3, #20
 80107d8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80107dc:	2400      	movs	r4, #0
 80107de:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80107e2:	4622      	mov	r2, r4
 80107e4:	462b      	mov	r3, r5
 80107e6:	f7ef ff07 	bl	80005f8 <__aeabi_dmul>
 80107ea:	bd70      	pop	{r4, r5, r6, pc}
 80107ec:	0000      	movs	r0, r0
	...

080107f0 <_strtod_l>:
 80107f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f4:	461f      	mov	r7, r3
 80107f6:	b0a1      	sub	sp, #132	; 0x84
 80107f8:	2300      	movs	r3, #0
 80107fa:	4681      	mov	r9, r0
 80107fc:	4638      	mov	r0, r7
 80107fe:	460e      	mov	r6, r1
 8010800:	9217      	str	r2, [sp, #92]	; 0x5c
 8010802:	931c      	str	r3, [sp, #112]	; 0x70
 8010804:	f002 f815 	bl	8012832 <__localeconv_l>
 8010808:	4680      	mov	r8, r0
 801080a:	6800      	ldr	r0, [r0, #0]
 801080c:	f7ef fce0 	bl	80001d0 <strlen>
 8010810:	f04f 0a00 	mov.w	sl, #0
 8010814:	4604      	mov	r4, r0
 8010816:	f04f 0b00 	mov.w	fp, #0
 801081a:	961b      	str	r6, [sp, #108]	; 0x6c
 801081c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801081e:	781a      	ldrb	r2, [r3, #0]
 8010820:	2a0d      	cmp	r2, #13
 8010822:	d832      	bhi.n	801088a <_strtod_l+0x9a>
 8010824:	2a09      	cmp	r2, #9
 8010826:	d236      	bcs.n	8010896 <_strtod_l+0xa6>
 8010828:	2a00      	cmp	r2, #0
 801082a:	d03e      	beq.n	80108aa <_strtod_l+0xba>
 801082c:	2300      	movs	r3, #0
 801082e:	930d      	str	r3, [sp, #52]	; 0x34
 8010830:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8010832:	782b      	ldrb	r3, [r5, #0]
 8010834:	2b30      	cmp	r3, #48	; 0x30
 8010836:	f040 80ac 	bne.w	8010992 <_strtod_l+0x1a2>
 801083a:	786b      	ldrb	r3, [r5, #1]
 801083c:	2b58      	cmp	r3, #88	; 0x58
 801083e:	d001      	beq.n	8010844 <_strtod_l+0x54>
 8010840:	2b78      	cmp	r3, #120	; 0x78
 8010842:	d167      	bne.n	8010914 <_strtod_l+0x124>
 8010844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010846:	9301      	str	r3, [sp, #4]
 8010848:	ab1c      	add	r3, sp, #112	; 0x70
 801084a:	9300      	str	r3, [sp, #0]
 801084c:	9702      	str	r7, [sp, #8]
 801084e:	ab1d      	add	r3, sp, #116	; 0x74
 8010850:	4a88      	ldr	r2, [pc, #544]	; (8010a74 <_strtod_l+0x284>)
 8010852:	a91b      	add	r1, sp, #108	; 0x6c
 8010854:	4648      	mov	r0, r9
 8010856:	f001 fd12 	bl	801227e <__gethex>
 801085a:	f010 0407 	ands.w	r4, r0, #7
 801085e:	4606      	mov	r6, r0
 8010860:	d005      	beq.n	801086e <_strtod_l+0x7e>
 8010862:	2c06      	cmp	r4, #6
 8010864:	d12b      	bne.n	80108be <_strtod_l+0xce>
 8010866:	3501      	adds	r5, #1
 8010868:	2300      	movs	r3, #0
 801086a:	951b      	str	r5, [sp, #108]	; 0x6c
 801086c:	930d      	str	r3, [sp, #52]	; 0x34
 801086e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010870:	2b00      	cmp	r3, #0
 8010872:	f040 859a 	bne.w	80113aa <_strtod_l+0xbba>
 8010876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010878:	b1e3      	cbz	r3, 80108b4 <_strtod_l+0xc4>
 801087a:	4652      	mov	r2, sl
 801087c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010880:	ec43 2b10 	vmov	d0, r2, r3
 8010884:	b021      	add	sp, #132	; 0x84
 8010886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801088a:	2a2b      	cmp	r2, #43	; 0x2b
 801088c:	d015      	beq.n	80108ba <_strtod_l+0xca>
 801088e:	2a2d      	cmp	r2, #45	; 0x2d
 8010890:	d004      	beq.n	801089c <_strtod_l+0xac>
 8010892:	2a20      	cmp	r2, #32
 8010894:	d1ca      	bne.n	801082c <_strtod_l+0x3c>
 8010896:	3301      	adds	r3, #1
 8010898:	931b      	str	r3, [sp, #108]	; 0x6c
 801089a:	e7bf      	b.n	801081c <_strtod_l+0x2c>
 801089c:	2201      	movs	r2, #1
 801089e:	920d      	str	r2, [sp, #52]	; 0x34
 80108a0:	1c5a      	adds	r2, r3, #1
 80108a2:	921b      	str	r2, [sp, #108]	; 0x6c
 80108a4:	785b      	ldrb	r3, [r3, #1]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d1c2      	bne.n	8010830 <_strtod_l+0x40>
 80108aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80108ac:	961b      	str	r6, [sp, #108]	; 0x6c
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	f040 8579 	bne.w	80113a6 <_strtod_l+0xbb6>
 80108b4:	4652      	mov	r2, sl
 80108b6:	465b      	mov	r3, fp
 80108b8:	e7e2      	b.n	8010880 <_strtod_l+0x90>
 80108ba:	2200      	movs	r2, #0
 80108bc:	e7ef      	b.n	801089e <_strtod_l+0xae>
 80108be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80108c0:	b13a      	cbz	r2, 80108d2 <_strtod_l+0xe2>
 80108c2:	2135      	movs	r1, #53	; 0x35
 80108c4:	a81e      	add	r0, sp, #120	; 0x78
 80108c6:	f002 fb9d 	bl	8013004 <__copybits>
 80108ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 80108cc:	4648      	mov	r0, r9
 80108ce:	f002 f809 	bl	80128e4 <_Bfree>
 80108d2:	3c01      	subs	r4, #1
 80108d4:	2c04      	cmp	r4, #4
 80108d6:	d806      	bhi.n	80108e6 <_strtod_l+0xf6>
 80108d8:	e8df f004 	tbb	[pc, r4]
 80108dc:	1714030a 	.word	0x1714030a
 80108e0:	0a          	.byte	0x0a
 80108e1:	00          	.byte	0x00
 80108e2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80108e6:	0730      	lsls	r0, r6, #28
 80108e8:	d5c1      	bpl.n	801086e <_strtod_l+0x7e>
 80108ea:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80108ee:	e7be      	b.n	801086e <_strtod_l+0x7e>
 80108f0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80108f4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80108f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80108fa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80108fe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010902:	e7f0      	b.n	80108e6 <_strtod_l+0xf6>
 8010904:	f8df b170 	ldr.w	fp, [pc, #368]	; 8010a78 <_strtod_l+0x288>
 8010908:	e7ed      	b.n	80108e6 <_strtod_l+0xf6>
 801090a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801090e:	f04f 3aff 	mov.w	sl, #4294967295
 8010912:	e7e8      	b.n	80108e6 <_strtod_l+0xf6>
 8010914:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010916:	1c5a      	adds	r2, r3, #1
 8010918:	921b      	str	r2, [sp, #108]	; 0x6c
 801091a:	785b      	ldrb	r3, [r3, #1]
 801091c:	2b30      	cmp	r3, #48	; 0x30
 801091e:	d0f9      	beq.n	8010914 <_strtod_l+0x124>
 8010920:	2b00      	cmp	r3, #0
 8010922:	d0a4      	beq.n	801086e <_strtod_l+0x7e>
 8010924:	2301      	movs	r3, #1
 8010926:	2500      	movs	r5, #0
 8010928:	9306      	str	r3, [sp, #24]
 801092a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801092c:	9308      	str	r3, [sp, #32]
 801092e:	9507      	str	r5, [sp, #28]
 8010930:	9505      	str	r5, [sp, #20]
 8010932:	220a      	movs	r2, #10
 8010934:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010936:	7807      	ldrb	r7, [r0, #0]
 8010938:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801093c:	b2d9      	uxtb	r1, r3
 801093e:	2909      	cmp	r1, #9
 8010940:	d929      	bls.n	8010996 <_strtod_l+0x1a6>
 8010942:	4622      	mov	r2, r4
 8010944:	f8d8 1000 	ldr.w	r1, [r8]
 8010948:	f7ff ff22 	bl	8010790 <strncmp>
 801094c:	2800      	cmp	r0, #0
 801094e:	d031      	beq.n	80109b4 <_strtod_l+0x1c4>
 8010950:	2000      	movs	r0, #0
 8010952:	9c05      	ldr	r4, [sp, #20]
 8010954:	9004      	str	r0, [sp, #16]
 8010956:	463b      	mov	r3, r7
 8010958:	4602      	mov	r2, r0
 801095a:	2b65      	cmp	r3, #101	; 0x65
 801095c:	d001      	beq.n	8010962 <_strtod_l+0x172>
 801095e:	2b45      	cmp	r3, #69	; 0x45
 8010960:	d114      	bne.n	801098c <_strtod_l+0x19c>
 8010962:	b924      	cbnz	r4, 801096e <_strtod_l+0x17e>
 8010964:	b910      	cbnz	r0, 801096c <_strtod_l+0x17c>
 8010966:	9b06      	ldr	r3, [sp, #24]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d09e      	beq.n	80108aa <_strtod_l+0xba>
 801096c:	2400      	movs	r4, #0
 801096e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8010970:	1c73      	adds	r3, r6, #1
 8010972:	931b      	str	r3, [sp, #108]	; 0x6c
 8010974:	7873      	ldrb	r3, [r6, #1]
 8010976:	2b2b      	cmp	r3, #43	; 0x2b
 8010978:	d078      	beq.n	8010a6c <_strtod_l+0x27c>
 801097a:	2b2d      	cmp	r3, #45	; 0x2d
 801097c:	d070      	beq.n	8010a60 <_strtod_l+0x270>
 801097e:	f04f 0c00 	mov.w	ip, #0
 8010982:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8010986:	2f09      	cmp	r7, #9
 8010988:	d97c      	bls.n	8010a84 <_strtod_l+0x294>
 801098a:	961b      	str	r6, [sp, #108]	; 0x6c
 801098c:	f04f 0e00 	mov.w	lr, #0
 8010990:	e09a      	b.n	8010ac8 <_strtod_l+0x2d8>
 8010992:	2300      	movs	r3, #0
 8010994:	e7c7      	b.n	8010926 <_strtod_l+0x136>
 8010996:	9905      	ldr	r1, [sp, #20]
 8010998:	2908      	cmp	r1, #8
 801099a:	bfdd      	ittte	le
 801099c:	9907      	ldrle	r1, [sp, #28]
 801099e:	fb02 3301 	mlale	r3, r2, r1, r3
 80109a2:	9307      	strle	r3, [sp, #28]
 80109a4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80109a8:	9b05      	ldr	r3, [sp, #20]
 80109aa:	3001      	adds	r0, #1
 80109ac:	3301      	adds	r3, #1
 80109ae:	9305      	str	r3, [sp, #20]
 80109b0:	901b      	str	r0, [sp, #108]	; 0x6c
 80109b2:	e7bf      	b.n	8010934 <_strtod_l+0x144>
 80109b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80109b6:	191a      	adds	r2, r3, r4
 80109b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80109ba:	9a05      	ldr	r2, [sp, #20]
 80109bc:	5d1b      	ldrb	r3, [r3, r4]
 80109be:	2a00      	cmp	r2, #0
 80109c0:	d037      	beq.n	8010a32 <_strtod_l+0x242>
 80109c2:	9c05      	ldr	r4, [sp, #20]
 80109c4:	4602      	mov	r2, r0
 80109c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80109ca:	2909      	cmp	r1, #9
 80109cc:	d913      	bls.n	80109f6 <_strtod_l+0x206>
 80109ce:	2101      	movs	r1, #1
 80109d0:	9104      	str	r1, [sp, #16]
 80109d2:	e7c2      	b.n	801095a <_strtod_l+0x16a>
 80109d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80109d6:	1c5a      	adds	r2, r3, #1
 80109d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80109da:	785b      	ldrb	r3, [r3, #1]
 80109dc:	3001      	adds	r0, #1
 80109de:	2b30      	cmp	r3, #48	; 0x30
 80109e0:	d0f8      	beq.n	80109d4 <_strtod_l+0x1e4>
 80109e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80109e6:	2a08      	cmp	r2, #8
 80109e8:	f200 84e4 	bhi.w	80113b4 <_strtod_l+0xbc4>
 80109ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80109ee:	9208      	str	r2, [sp, #32]
 80109f0:	4602      	mov	r2, r0
 80109f2:	2000      	movs	r0, #0
 80109f4:	4604      	mov	r4, r0
 80109f6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80109fa:	f100 0101 	add.w	r1, r0, #1
 80109fe:	d012      	beq.n	8010a26 <_strtod_l+0x236>
 8010a00:	440a      	add	r2, r1
 8010a02:	eb00 0c04 	add.w	ip, r0, r4
 8010a06:	4621      	mov	r1, r4
 8010a08:	270a      	movs	r7, #10
 8010a0a:	458c      	cmp	ip, r1
 8010a0c:	d113      	bne.n	8010a36 <_strtod_l+0x246>
 8010a0e:	1821      	adds	r1, r4, r0
 8010a10:	2908      	cmp	r1, #8
 8010a12:	f104 0401 	add.w	r4, r4, #1
 8010a16:	4404      	add	r4, r0
 8010a18:	dc19      	bgt.n	8010a4e <_strtod_l+0x25e>
 8010a1a:	9b07      	ldr	r3, [sp, #28]
 8010a1c:	210a      	movs	r1, #10
 8010a1e:	fb01 e303 	mla	r3, r1, r3, lr
 8010a22:	9307      	str	r3, [sp, #28]
 8010a24:	2100      	movs	r1, #0
 8010a26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010a28:	1c58      	adds	r0, r3, #1
 8010a2a:	901b      	str	r0, [sp, #108]	; 0x6c
 8010a2c:	785b      	ldrb	r3, [r3, #1]
 8010a2e:	4608      	mov	r0, r1
 8010a30:	e7c9      	b.n	80109c6 <_strtod_l+0x1d6>
 8010a32:	9805      	ldr	r0, [sp, #20]
 8010a34:	e7d3      	b.n	80109de <_strtod_l+0x1ee>
 8010a36:	2908      	cmp	r1, #8
 8010a38:	f101 0101 	add.w	r1, r1, #1
 8010a3c:	dc03      	bgt.n	8010a46 <_strtod_l+0x256>
 8010a3e:	9b07      	ldr	r3, [sp, #28]
 8010a40:	437b      	muls	r3, r7
 8010a42:	9307      	str	r3, [sp, #28]
 8010a44:	e7e1      	b.n	8010a0a <_strtod_l+0x21a>
 8010a46:	2910      	cmp	r1, #16
 8010a48:	bfd8      	it	le
 8010a4a:	437d      	mulle	r5, r7
 8010a4c:	e7dd      	b.n	8010a0a <_strtod_l+0x21a>
 8010a4e:	2c10      	cmp	r4, #16
 8010a50:	bfdc      	itt	le
 8010a52:	210a      	movle	r1, #10
 8010a54:	fb01 e505 	mlale	r5, r1, r5, lr
 8010a58:	e7e4      	b.n	8010a24 <_strtod_l+0x234>
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	9304      	str	r3, [sp, #16]
 8010a5e:	e781      	b.n	8010964 <_strtod_l+0x174>
 8010a60:	f04f 0c01 	mov.w	ip, #1
 8010a64:	1cb3      	adds	r3, r6, #2
 8010a66:	931b      	str	r3, [sp, #108]	; 0x6c
 8010a68:	78b3      	ldrb	r3, [r6, #2]
 8010a6a:	e78a      	b.n	8010982 <_strtod_l+0x192>
 8010a6c:	f04f 0c00 	mov.w	ip, #0
 8010a70:	e7f8      	b.n	8010a64 <_strtod_l+0x274>
 8010a72:	bf00      	nop
 8010a74:	08015118 	.word	0x08015118
 8010a78:	7ff00000 	.word	0x7ff00000
 8010a7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010a7e:	1c5f      	adds	r7, r3, #1
 8010a80:	971b      	str	r7, [sp, #108]	; 0x6c
 8010a82:	785b      	ldrb	r3, [r3, #1]
 8010a84:	2b30      	cmp	r3, #48	; 0x30
 8010a86:	d0f9      	beq.n	8010a7c <_strtod_l+0x28c>
 8010a88:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8010a8c:	2f08      	cmp	r7, #8
 8010a8e:	f63f af7d 	bhi.w	801098c <_strtod_l+0x19c>
 8010a92:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8010a96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010a98:	930a      	str	r3, [sp, #40]	; 0x28
 8010a9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010a9c:	1c5f      	adds	r7, r3, #1
 8010a9e:	971b      	str	r7, [sp, #108]	; 0x6c
 8010aa0:	785b      	ldrb	r3, [r3, #1]
 8010aa2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8010aa6:	f1b8 0f09 	cmp.w	r8, #9
 8010aaa:	d937      	bls.n	8010b1c <_strtod_l+0x32c>
 8010aac:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010aae:	1a7f      	subs	r7, r7, r1
 8010ab0:	2f08      	cmp	r7, #8
 8010ab2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8010ab6:	dc37      	bgt.n	8010b28 <_strtod_l+0x338>
 8010ab8:	45be      	cmp	lr, r7
 8010aba:	bfa8      	it	ge
 8010abc:	46be      	movge	lr, r7
 8010abe:	f1bc 0f00 	cmp.w	ip, #0
 8010ac2:	d001      	beq.n	8010ac8 <_strtod_l+0x2d8>
 8010ac4:	f1ce 0e00 	rsb	lr, lr, #0
 8010ac8:	2c00      	cmp	r4, #0
 8010aca:	d151      	bne.n	8010b70 <_strtod_l+0x380>
 8010acc:	2800      	cmp	r0, #0
 8010ace:	f47f aece 	bne.w	801086e <_strtod_l+0x7e>
 8010ad2:	9a06      	ldr	r2, [sp, #24]
 8010ad4:	2a00      	cmp	r2, #0
 8010ad6:	f47f aeca 	bne.w	801086e <_strtod_l+0x7e>
 8010ada:	9a04      	ldr	r2, [sp, #16]
 8010adc:	2a00      	cmp	r2, #0
 8010ade:	f47f aee4 	bne.w	80108aa <_strtod_l+0xba>
 8010ae2:	2b4e      	cmp	r3, #78	; 0x4e
 8010ae4:	d027      	beq.n	8010b36 <_strtod_l+0x346>
 8010ae6:	dc21      	bgt.n	8010b2c <_strtod_l+0x33c>
 8010ae8:	2b49      	cmp	r3, #73	; 0x49
 8010aea:	f47f aede 	bne.w	80108aa <_strtod_l+0xba>
 8010aee:	49a0      	ldr	r1, [pc, #640]	; (8010d70 <_strtod_l+0x580>)
 8010af0:	a81b      	add	r0, sp, #108	; 0x6c
 8010af2:	f001 fdf7 	bl	80126e4 <__match>
 8010af6:	2800      	cmp	r0, #0
 8010af8:	f43f aed7 	beq.w	80108aa <_strtod_l+0xba>
 8010afc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010afe:	499d      	ldr	r1, [pc, #628]	; (8010d74 <_strtod_l+0x584>)
 8010b00:	3b01      	subs	r3, #1
 8010b02:	a81b      	add	r0, sp, #108	; 0x6c
 8010b04:	931b      	str	r3, [sp, #108]	; 0x6c
 8010b06:	f001 fded 	bl	80126e4 <__match>
 8010b0a:	b910      	cbnz	r0, 8010b12 <_strtod_l+0x322>
 8010b0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010b0e:	3301      	adds	r3, #1
 8010b10:	931b      	str	r3, [sp, #108]	; 0x6c
 8010b12:	f8df b274 	ldr.w	fp, [pc, #628]	; 8010d88 <_strtod_l+0x598>
 8010b16:	f04f 0a00 	mov.w	sl, #0
 8010b1a:	e6a8      	b.n	801086e <_strtod_l+0x7e>
 8010b1c:	210a      	movs	r1, #10
 8010b1e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8010b22:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010b26:	e7b8      	b.n	8010a9a <_strtod_l+0x2aa>
 8010b28:	46be      	mov	lr, r7
 8010b2a:	e7c8      	b.n	8010abe <_strtod_l+0x2ce>
 8010b2c:	2b69      	cmp	r3, #105	; 0x69
 8010b2e:	d0de      	beq.n	8010aee <_strtod_l+0x2fe>
 8010b30:	2b6e      	cmp	r3, #110	; 0x6e
 8010b32:	f47f aeba 	bne.w	80108aa <_strtod_l+0xba>
 8010b36:	4990      	ldr	r1, [pc, #576]	; (8010d78 <_strtod_l+0x588>)
 8010b38:	a81b      	add	r0, sp, #108	; 0x6c
 8010b3a:	f001 fdd3 	bl	80126e4 <__match>
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	f43f aeb3 	beq.w	80108aa <_strtod_l+0xba>
 8010b44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010b46:	781b      	ldrb	r3, [r3, #0]
 8010b48:	2b28      	cmp	r3, #40	; 0x28
 8010b4a:	d10e      	bne.n	8010b6a <_strtod_l+0x37a>
 8010b4c:	aa1e      	add	r2, sp, #120	; 0x78
 8010b4e:	498b      	ldr	r1, [pc, #556]	; (8010d7c <_strtod_l+0x58c>)
 8010b50:	a81b      	add	r0, sp, #108	; 0x6c
 8010b52:	f001 fddb 	bl	801270c <__hexnan>
 8010b56:	2805      	cmp	r0, #5
 8010b58:	d107      	bne.n	8010b6a <_strtod_l+0x37a>
 8010b5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010b5c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8010b60:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010b64:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010b68:	e681      	b.n	801086e <_strtod_l+0x7e>
 8010b6a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8010d90 <_strtod_l+0x5a0>
 8010b6e:	e7d2      	b.n	8010b16 <_strtod_l+0x326>
 8010b70:	ebae 0302 	sub.w	r3, lr, r2
 8010b74:	9306      	str	r3, [sp, #24]
 8010b76:	9b05      	ldr	r3, [sp, #20]
 8010b78:	9807      	ldr	r0, [sp, #28]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	bf08      	it	eq
 8010b7e:	4623      	moveq	r3, r4
 8010b80:	2c10      	cmp	r4, #16
 8010b82:	9305      	str	r3, [sp, #20]
 8010b84:	46a0      	mov	r8, r4
 8010b86:	bfa8      	it	ge
 8010b88:	f04f 0810 	movge.w	r8, #16
 8010b8c:	f7ef fcba 	bl	8000504 <__aeabi_ui2d>
 8010b90:	2c09      	cmp	r4, #9
 8010b92:	4682      	mov	sl, r0
 8010b94:	468b      	mov	fp, r1
 8010b96:	dc13      	bgt.n	8010bc0 <_strtod_l+0x3d0>
 8010b98:	9b06      	ldr	r3, [sp, #24]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	f43f ae67 	beq.w	801086e <_strtod_l+0x7e>
 8010ba0:	9b06      	ldr	r3, [sp, #24]
 8010ba2:	dd7a      	ble.n	8010c9a <_strtod_l+0x4aa>
 8010ba4:	2b16      	cmp	r3, #22
 8010ba6:	dc61      	bgt.n	8010c6c <_strtod_l+0x47c>
 8010ba8:	4a75      	ldr	r2, [pc, #468]	; (8010d80 <_strtod_l+0x590>)
 8010baa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8010bae:	e9de 0100 	ldrd	r0, r1, [lr]
 8010bb2:	4652      	mov	r2, sl
 8010bb4:	465b      	mov	r3, fp
 8010bb6:	f7ef fd1f 	bl	80005f8 <__aeabi_dmul>
 8010bba:	4682      	mov	sl, r0
 8010bbc:	468b      	mov	fp, r1
 8010bbe:	e656      	b.n	801086e <_strtod_l+0x7e>
 8010bc0:	4b6f      	ldr	r3, [pc, #444]	; (8010d80 <_strtod_l+0x590>)
 8010bc2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010bc6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010bca:	f7ef fd15 	bl	80005f8 <__aeabi_dmul>
 8010bce:	4606      	mov	r6, r0
 8010bd0:	4628      	mov	r0, r5
 8010bd2:	460f      	mov	r7, r1
 8010bd4:	f7ef fc96 	bl	8000504 <__aeabi_ui2d>
 8010bd8:	4602      	mov	r2, r0
 8010bda:	460b      	mov	r3, r1
 8010bdc:	4630      	mov	r0, r6
 8010bde:	4639      	mov	r1, r7
 8010be0:	f7ef fb54 	bl	800028c <__adddf3>
 8010be4:	2c0f      	cmp	r4, #15
 8010be6:	4682      	mov	sl, r0
 8010be8:	468b      	mov	fp, r1
 8010bea:	ddd5      	ble.n	8010b98 <_strtod_l+0x3a8>
 8010bec:	9b06      	ldr	r3, [sp, #24]
 8010bee:	eba4 0808 	sub.w	r8, r4, r8
 8010bf2:	4498      	add	r8, r3
 8010bf4:	f1b8 0f00 	cmp.w	r8, #0
 8010bf8:	f340 8096 	ble.w	8010d28 <_strtod_l+0x538>
 8010bfc:	f018 030f 	ands.w	r3, r8, #15
 8010c00:	d00a      	beq.n	8010c18 <_strtod_l+0x428>
 8010c02:	495f      	ldr	r1, [pc, #380]	; (8010d80 <_strtod_l+0x590>)
 8010c04:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010c08:	4652      	mov	r2, sl
 8010c0a:	465b      	mov	r3, fp
 8010c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c10:	f7ef fcf2 	bl	80005f8 <__aeabi_dmul>
 8010c14:	4682      	mov	sl, r0
 8010c16:	468b      	mov	fp, r1
 8010c18:	f038 080f 	bics.w	r8, r8, #15
 8010c1c:	d073      	beq.n	8010d06 <_strtod_l+0x516>
 8010c1e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010c22:	dd47      	ble.n	8010cb4 <_strtod_l+0x4c4>
 8010c24:	2400      	movs	r4, #0
 8010c26:	46a0      	mov	r8, r4
 8010c28:	9407      	str	r4, [sp, #28]
 8010c2a:	9405      	str	r4, [sp, #20]
 8010c2c:	2322      	movs	r3, #34	; 0x22
 8010c2e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8010d88 <_strtod_l+0x598>
 8010c32:	f8c9 3000 	str.w	r3, [r9]
 8010c36:	f04f 0a00 	mov.w	sl, #0
 8010c3a:	9b07      	ldr	r3, [sp, #28]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	f43f ae16 	beq.w	801086e <_strtod_l+0x7e>
 8010c42:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010c44:	4648      	mov	r0, r9
 8010c46:	f001 fe4d 	bl	80128e4 <_Bfree>
 8010c4a:	9905      	ldr	r1, [sp, #20]
 8010c4c:	4648      	mov	r0, r9
 8010c4e:	f001 fe49 	bl	80128e4 <_Bfree>
 8010c52:	4641      	mov	r1, r8
 8010c54:	4648      	mov	r0, r9
 8010c56:	f001 fe45 	bl	80128e4 <_Bfree>
 8010c5a:	9907      	ldr	r1, [sp, #28]
 8010c5c:	4648      	mov	r0, r9
 8010c5e:	f001 fe41 	bl	80128e4 <_Bfree>
 8010c62:	4621      	mov	r1, r4
 8010c64:	4648      	mov	r0, r9
 8010c66:	f001 fe3d 	bl	80128e4 <_Bfree>
 8010c6a:	e600      	b.n	801086e <_strtod_l+0x7e>
 8010c6c:	9a06      	ldr	r2, [sp, #24]
 8010c6e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8010c72:	4293      	cmp	r3, r2
 8010c74:	dbba      	blt.n	8010bec <_strtod_l+0x3fc>
 8010c76:	4d42      	ldr	r5, [pc, #264]	; (8010d80 <_strtod_l+0x590>)
 8010c78:	f1c4 040f 	rsb	r4, r4, #15
 8010c7c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8010c80:	4652      	mov	r2, sl
 8010c82:	465b      	mov	r3, fp
 8010c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c88:	f7ef fcb6 	bl	80005f8 <__aeabi_dmul>
 8010c8c:	9b06      	ldr	r3, [sp, #24]
 8010c8e:	1b1c      	subs	r4, r3, r4
 8010c90:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8010c94:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010c98:	e78d      	b.n	8010bb6 <_strtod_l+0x3c6>
 8010c9a:	f113 0f16 	cmn.w	r3, #22
 8010c9e:	dba5      	blt.n	8010bec <_strtod_l+0x3fc>
 8010ca0:	4a37      	ldr	r2, [pc, #220]	; (8010d80 <_strtod_l+0x590>)
 8010ca2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8010ca6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8010caa:	4650      	mov	r0, sl
 8010cac:	4659      	mov	r1, fp
 8010cae:	f7ef fdcd 	bl	800084c <__aeabi_ddiv>
 8010cb2:	e782      	b.n	8010bba <_strtod_l+0x3ca>
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	4e33      	ldr	r6, [pc, #204]	; (8010d84 <_strtod_l+0x594>)
 8010cb8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010cbc:	4650      	mov	r0, sl
 8010cbe:	4659      	mov	r1, fp
 8010cc0:	461d      	mov	r5, r3
 8010cc2:	f1b8 0f01 	cmp.w	r8, #1
 8010cc6:	dc21      	bgt.n	8010d0c <_strtod_l+0x51c>
 8010cc8:	b10b      	cbz	r3, 8010cce <_strtod_l+0x4de>
 8010cca:	4682      	mov	sl, r0
 8010ccc:	468b      	mov	fp, r1
 8010cce:	4b2d      	ldr	r3, [pc, #180]	; (8010d84 <_strtod_l+0x594>)
 8010cd0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010cd4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8010cd8:	4652      	mov	r2, sl
 8010cda:	465b      	mov	r3, fp
 8010cdc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010ce0:	f7ef fc8a 	bl	80005f8 <__aeabi_dmul>
 8010ce4:	4b28      	ldr	r3, [pc, #160]	; (8010d88 <_strtod_l+0x598>)
 8010ce6:	460a      	mov	r2, r1
 8010ce8:	400b      	ands	r3, r1
 8010cea:	4928      	ldr	r1, [pc, #160]	; (8010d8c <_strtod_l+0x59c>)
 8010cec:	428b      	cmp	r3, r1
 8010cee:	4682      	mov	sl, r0
 8010cf0:	d898      	bhi.n	8010c24 <_strtod_l+0x434>
 8010cf2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010cf6:	428b      	cmp	r3, r1
 8010cf8:	bf86      	itte	hi
 8010cfa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8010d94 <_strtod_l+0x5a4>
 8010cfe:	f04f 3aff 	movhi.w	sl, #4294967295
 8010d02:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010d06:	2300      	movs	r3, #0
 8010d08:	9304      	str	r3, [sp, #16]
 8010d0a:	e077      	b.n	8010dfc <_strtod_l+0x60c>
 8010d0c:	f018 0f01 	tst.w	r8, #1
 8010d10:	d006      	beq.n	8010d20 <_strtod_l+0x530>
 8010d12:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8010d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d1a:	f7ef fc6d 	bl	80005f8 <__aeabi_dmul>
 8010d1e:	2301      	movs	r3, #1
 8010d20:	3501      	adds	r5, #1
 8010d22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010d26:	e7cc      	b.n	8010cc2 <_strtod_l+0x4d2>
 8010d28:	d0ed      	beq.n	8010d06 <_strtod_l+0x516>
 8010d2a:	f1c8 0800 	rsb	r8, r8, #0
 8010d2e:	f018 020f 	ands.w	r2, r8, #15
 8010d32:	d00a      	beq.n	8010d4a <_strtod_l+0x55a>
 8010d34:	4b12      	ldr	r3, [pc, #72]	; (8010d80 <_strtod_l+0x590>)
 8010d36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d3a:	4650      	mov	r0, sl
 8010d3c:	4659      	mov	r1, fp
 8010d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d42:	f7ef fd83 	bl	800084c <__aeabi_ddiv>
 8010d46:	4682      	mov	sl, r0
 8010d48:	468b      	mov	fp, r1
 8010d4a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010d4e:	d0da      	beq.n	8010d06 <_strtod_l+0x516>
 8010d50:	f1b8 0f1f 	cmp.w	r8, #31
 8010d54:	dd20      	ble.n	8010d98 <_strtod_l+0x5a8>
 8010d56:	2400      	movs	r4, #0
 8010d58:	46a0      	mov	r8, r4
 8010d5a:	9407      	str	r4, [sp, #28]
 8010d5c:	9405      	str	r4, [sp, #20]
 8010d5e:	2322      	movs	r3, #34	; 0x22
 8010d60:	f04f 0a00 	mov.w	sl, #0
 8010d64:	f04f 0b00 	mov.w	fp, #0
 8010d68:	f8c9 3000 	str.w	r3, [r9]
 8010d6c:	e765      	b.n	8010c3a <_strtod_l+0x44a>
 8010d6e:	bf00      	nop
 8010d70:	080150e1 	.word	0x080150e1
 8010d74:	0801516b 	.word	0x0801516b
 8010d78:	080150e9 	.word	0x080150e9
 8010d7c:	0801512c 	.word	0x0801512c
 8010d80:	080151a8 	.word	0x080151a8
 8010d84:	08015180 	.word	0x08015180
 8010d88:	7ff00000 	.word	0x7ff00000
 8010d8c:	7ca00000 	.word	0x7ca00000
 8010d90:	fff80000 	.word	0xfff80000
 8010d94:	7fefffff 	.word	0x7fefffff
 8010d98:	f018 0310 	ands.w	r3, r8, #16
 8010d9c:	bf18      	it	ne
 8010d9e:	236a      	movne	r3, #106	; 0x6a
 8010da0:	4da0      	ldr	r5, [pc, #640]	; (8011024 <_strtod_l+0x834>)
 8010da2:	9304      	str	r3, [sp, #16]
 8010da4:	4650      	mov	r0, sl
 8010da6:	4659      	mov	r1, fp
 8010da8:	2300      	movs	r3, #0
 8010daa:	f1b8 0f00 	cmp.w	r8, #0
 8010dae:	f300 810a 	bgt.w	8010fc6 <_strtod_l+0x7d6>
 8010db2:	b10b      	cbz	r3, 8010db8 <_strtod_l+0x5c8>
 8010db4:	4682      	mov	sl, r0
 8010db6:	468b      	mov	fp, r1
 8010db8:	9b04      	ldr	r3, [sp, #16]
 8010dba:	b1bb      	cbz	r3, 8010dec <_strtod_l+0x5fc>
 8010dbc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010dc0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	4659      	mov	r1, fp
 8010dc8:	dd10      	ble.n	8010dec <_strtod_l+0x5fc>
 8010dca:	2b1f      	cmp	r3, #31
 8010dcc:	f340 8107 	ble.w	8010fde <_strtod_l+0x7ee>
 8010dd0:	2b34      	cmp	r3, #52	; 0x34
 8010dd2:	bfde      	ittt	le
 8010dd4:	3b20      	suble	r3, #32
 8010dd6:	f04f 32ff 	movle.w	r2, #4294967295
 8010dda:	fa02 f303 	lslle.w	r3, r2, r3
 8010dde:	f04f 0a00 	mov.w	sl, #0
 8010de2:	bfcc      	ite	gt
 8010de4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010de8:	ea03 0b01 	andle.w	fp, r3, r1
 8010dec:	2200      	movs	r2, #0
 8010dee:	2300      	movs	r3, #0
 8010df0:	4650      	mov	r0, sl
 8010df2:	4659      	mov	r1, fp
 8010df4:	f7ef fe68 	bl	8000ac8 <__aeabi_dcmpeq>
 8010df8:	2800      	cmp	r0, #0
 8010dfa:	d1ac      	bne.n	8010d56 <_strtod_l+0x566>
 8010dfc:	9b07      	ldr	r3, [sp, #28]
 8010dfe:	9300      	str	r3, [sp, #0]
 8010e00:	9a05      	ldr	r2, [sp, #20]
 8010e02:	9908      	ldr	r1, [sp, #32]
 8010e04:	4623      	mov	r3, r4
 8010e06:	4648      	mov	r0, r9
 8010e08:	f001 fdbe 	bl	8012988 <__s2b>
 8010e0c:	9007      	str	r0, [sp, #28]
 8010e0e:	2800      	cmp	r0, #0
 8010e10:	f43f af08 	beq.w	8010c24 <_strtod_l+0x434>
 8010e14:	9a06      	ldr	r2, [sp, #24]
 8010e16:	9b06      	ldr	r3, [sp, #24]
 8010e18:	2a00      	cmp	r2, #0
 8010e1a:	f1c3 0300 	rsb	r3, r3, #0
 8010e1e:	bfa8      	it	ge
 8010e20:	2300      	movge	r3, #0
 8010e22:	930e      	str	r3, [sp, #56]	; 0x38
 8010e24:	2400      	movs	r4, #0
 8010e26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010e2a:	9316      	str	r3, [sp, #88]	; 0x58
 8010e2c:	46a0      	mov	r8, r4
 8010e2e:	9b07      	ldr	r3, [sp, #28]
 8010e30:	4648      	mov	r0, r9
 8010e32:	6859      	ldr	r1, [r3, #4]
 8010e34:	f001 fd22 	bl	801287c <_Balloc>
 8010e38:	9005      	str	r0, [sp, #20]
 8010e3a:	2800      	cmp	r0, #0
 8010e3c:	f43f aef6 	beq.w	8010c2c <_strtod_l+0x43c>
 8010e40:	9b07      	ldr	r3, [sp, #28]
 8010e42:	691a      	ldr	r2, [r3, #16]
 8010e44:	3202      	adds	r2, #2
 8010e46:	f103 010c 	add.w	r1, r3, #12
 8010e4a:	0092      	lsls	r2, r2, #2
 8010e4c:	300c      	adds	r0, #12
 8010e4e:	f7fe fd6f 	bl	800f930 <memcpy>
 8010e52:	aa1e      	add	r2, sp, #120	; 0x78
 8010e54:	a91d      	add	r1, sp, #116	; 0x74
 8010e56:	ec4b ab10 	vmov	d0, sl, fp
 8010e5a:	4648      	mov	r0, r9
 8010e5c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010e60:	f002 f84e 	bl	8012f00 <__d2b>
 8010e64:	901c      	str	r0, [sp, #112]	; 0x70
 8010e66:	2800      	cmp	r0, #0
 8010e68:	f43f aee0 	beq.w	8010c2c <_strtod_l+0x43c>
 8010e6c:	2101      	movs	r1, #1
 8010e6e:	4648      	mov	r0, r9
 8010e70:	f001 fe16 	bl	8012aa0 <__i2b>
 8010e74:	4680      	mov	r8, r0
 8010e76:	2800      	cmp	r0, #0
 8010e78:	f43f aed8 	beq.w	8010c2c <_strtod_l+0x43c>
 8010e7c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010e7e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010e80:	2e00      	cmp	r6, #0
 8010e82:	bfab      	itete	ge
 8010e84:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8010e86:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8010e88:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8010e8a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8010e8c:	bfac      	ite	ge
 8010e8e:	18f7      	addge	r7, r6, r3
 8010e90:	1b9d      	sublt	r5, r3, r6
 8010e92:	9b04      	ldr	r3, [sp, #16]
 8010e94:	1af6      	subs	r6, r6, r3
 8010e96:	4416      	add	r6, r2
 8010e98:	4b63      	ldr	r3, [pc, #396]	; (8011028 <_strtod_l+0x838>)
 8010e9a:	3e01      	subs	r6, #1
 8010e9c:	429e      	cmp	r6, r3
 8010e9e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010ea2:	f280 80af 	bge.w	8011004 <_strtod_l+0x814>
 8010ea6:	1b9b      	subs	r3, r3, r6
 8010ea8:	2b1f      	cmp	r3, #31
 8010eaa:	eba2 0203 	sub.w	r2, r2, r3
 8010eae:	f04f 0101 	mov.w	r1, #1
 8010eb2:	f300 809b 	bgt.w	8010fec <_strtod_l+0x7fc>
 8010eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8010eba:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8010ec0:	18be      	adds	r6, r7, r2
 8010ec2:	9b04      	ldr	r3, [sp, #16]
 8010ec4:	42b7      	cmp	r7, r6
 8010ec6:	4415      	add	r5, r2
 8010ec8:	441d      	add	r5, r3
 8010eca:	463b      	mov	r3, r7
 8010ecc:	bfa8      	it	ge
 8010ece:	4633      	movge	r3, r6
 8010ed0:	42ab      	cmp	r3, r5
 8010ed2:	bfa8      	it	ge
 8010ed4:	462b      	movge	r3, r5
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	bfc2      	ittt	gt
 8010eda:	1af6      	subgt	r6, r6, r3
 8010edc:	1aed      	subgt	r5, r5, r3
 8010ede:	1aff      	subgt	r7, r7, r3
 8010ee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ee2:	b1bb      	cbz	r3, 8010f14 <_strtod_l+0x724>
 8010ee4:	4641      	mov	r1, r8
 8010ee6:	461a      	mov	r2, r3
 8010ee8:	4648      	mov	r0, r9
 8010eea:	f001 fe79 	bl	8012be0 <__pow5mult>
 8010eee:	4680      	mov	r8, r0
 8010ef0:	2800      	cmp	r0, #0
 8010ef2:	f43f ae9b 	beq.w	8010c2c <_strtod_l+0x43c>
 8010ef6:	4601      	mov	r1, r0
 8010ef8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010efa:	4648      	mov	r0, r9
 8010efc:	f001 fdd9 	bl	8012ab2 <__multiply>
 8010f00:	900c      	str	r0, [sp, #48]	; 0x30
 8010f02:	2800      	cmp	r0, #0
 8010f04:	f43f ae92 	beq.w	8010c2c <_strtod_l+0x43c>
 8010f08:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010f0a:	4648      	mov	r0, r9
 8010f0c:	f001 fcea 	bl	80128e4 <_Bfree>
 8010f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f12:	931c      	str	r3, [sp, #112]	; 0x70
 8010f14:	2e00      	cmp	r6, #0
 8010f16:	dc7a      	bgt.n	801100e <_strtod_l+0x81e>
 8010f18:	9b06      	ldr	r3, [sp, #24]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	dd08      	ble.n	8010f30 <_strtod_l+0x740>
 8010f1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010f20:	9905      	ldr	r1, [sp, #20]
 8010f22:	4648      	mov	r0, r9
 8010f24:	f001 fe5c 	bl	8012be0 <__pow5mult>
 8010f28:	9005      	str	r0, [sp, #20]
 8010f2a:	2800      	cmp	r0, #0
 8010f2c:	f43f ae7e 	beq.w	8010c2c <_strtod_l+0x43c>
 8010f30:	2d00      	cmp	r5, #0
 8010f32:	dd08      	ble.n	8010f46 <_strtod_l+0x756>
 8010f34:	462a      	mov	r2, r5
 8010f36:	9905      	ldr	r1, [sp, #20]
 8010f38:	4648      	mov	r0, r9
 8010f3a:	f001 fe9f 	bl	8012c7c <__lshift>
 8010f3e:	9005      	str	r0, [sp, #20]
 8010f40:	2800      	cmp	r0, #0
 8010f42:	f43f ae73 	beq.w	8010c2c <_strtod_l+0x43c>
 8010f46:	2f00      	cmp	r7, #0
 8010f48:	dd08      	ble.n	8010f5c <_strtod_l+0x76c>
 8010f4a:	4641      	mov	r1, r8
 8010f4c:	463a      	mov	r2, r7
 8010f4e:	4648      	mov	r0, r9
 8010f50:	f001 fe94 	bl	8012c7c <__lshift>
 8010f54:	4680      	mov	r8, r0
 8010f56:	2800      	cmp	r0, #0
 8010f58:	f43f ae68 	beq.w	8010c2c <_strtod_l+0x43c>
 8010f5c:	9a05      	ldr	r2, [sp, #20]
 8010f5e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010f60:	4648      	mov	r0, r9
 8010f62:	f001 fef9 	bl	8012d58 <__mdiff>
 8010f66:	4604      	mov	r4, r0
 8010f68:	2800      	cmp	r0, #0
 8010f6a:	f43f ae5f 	beq.w	8010c2c <_strtod_l+0x43c>
 8010f6e:	68c3      	ldr	r3, [r0, #12]
 8010f70:	930c      	str	r3, [sp, #48]	; 0x30
 8010f72:	2300      	movs	r3, #0
 8010f74:	60c3      	str	r3, [r0, #12]
 8010f76:	4641      	mov	r1, r8
 8010f78:	f001 fed4 	bl	8012d24 <__mcmp>
 8010f7c:	2800      	cmp	r0, #0
 8010f7e:	da55      	bge.n	801102c <_strtod_l+0x83c>
 8010f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f82:	b9e3      	cbnz	r3, 8010fbe <_strtod_l+0x7ce>
 8010f84:	f1ba 0f00 	cmp.w	sl, #0
 8010f88:	d119      	bne.n	8010fbe <_strtod_l+0x7ce>
 8010f8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f8e:	b9b3      	cbnz	r3, 8010fbe <_strtod_l+0x7ce>
 8010f90:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010f94:	0d1b      	lsrs	r3, r3, #20
 8010f96:	051b      	lsls	r3, r3, #20
 8010f98:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010f9c:	d90f      	bls.n	8010fbe <_strtod_l+0x7ce>
 8010f9e:	6963      	ldr	r3, [r4, #20]
 8010fa0:	b913      	cbnz	r3, 8010fa8 <_strtod_l+0x7b8>
 8010fa2:	6923      	ldr	r3, [r4, #16]
 8010fa4:	2b01      	cmp	r3, #1
 8010fa6:	dd0a      	ble.n	8010fbe <_strtod_l+0x7ce>
 8010fa8:	4621      	mov	r1, r4
 8010faa:	2201      	movs	r2, #1
 8010fac:	4648      	mov	r0, r9
 8010fae:	f001 fe65 	bl	8012c7c <__lshift>
 8010fb2:	4641      	mov	r1, r8
 8010fb4:	4604      	mov	r4, r0
 8010fb6:	f001 feb5 	bl	8012d24 <__mcmp>
 8010fba:	2800      	cmp	r0, #0
 8010fbc:	dc67      	bgt.n	801108e <_strtod_l+0x89e>
 8010fbe:	9b04      	ldr	r3, [sp, #16]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d171      	bne.n	80110a8 <_strtod_l+0x8b8>
 8010fc4:	e63d      	b.n	8010c42 <_strtod_l+0x452>
 8010fc6:	f018 0f01 	tst.w	r8, #1
 8010fca:	d004      	beq.n	8010fd6 <_strtod_l+0x7e6>
 8010fcc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010fd0:	f7ef fb12 	bl	80005f8 <__aeabi_dmul>
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010fda:	3508      	adds	r5, #8
 8010fdc:	e6e5      	b.n	8010daa <_strtod_l+0x5ba>
 8010fde:	f04f 32ff 	mov.w	r2, #4294967295
 8010fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8010fe6:	ea03 0a0a 	and.w	sl, r3, sl
 8010fea:	e6ff      	b.n	8010dec <_strtod_l+0x5fc>
 8010fec:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010ff0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8010ff4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010ff8:	36e2      	adds	r6, #226	; 0xe2
 8010ffa:	fa01 f306 	lsl.w	r3, r1, r6
 8010ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8011000:	910f      	str	r1, [sp, #60]	; 0x3c
 8011002:	e75d      	b.n	8010ec0 <_strtod_l+0x6d0>
 8011004:	2300      	movs	r3, #0
 8011006:	930a      	str	r3, [sp, #40]	; 0x28
 8011008:	2301      	movs	r3, #1
 801100a:	930f      	str	r3, [sp, #60]	; 0x3c
 801100c:	e758      	b.n	8010ec0 <_strtod_l+0x6d0>
 801100e:	4632      	mov	r2, r6
 8011010:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011012:	4648      	mov	r0, r9
 8011014:	f001 fe32 	bl	8012c7c <__lshift>
 8011018:	901c      	str	r0, [sp, #112]	; 0x70
 801101a:	2800      	cmp	r0, #0
 801101c:	f47f af7c 	bne.w	8010f18 <_strtod_l+0x728>
 8011020:	e604      	b.n	8010c2c <_strtod_l+0x43c>
 8011022:	bf00      	nop
 8011024:	08015140 	.word	0x08015140
 8011028:	fffffc02 	.word	0xfffffc02
 801102c:	465d      	mov	r5, fp
 801102e:	f040 8086 	bne.w	801113e <_strtod_l+0x94e>
 8011032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011034:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011038:	b32a      	cbz	r2, 8011086 <_strtod_l+0x896>
 801103a:	4aaf      	ldr	r2, [pc, #700]	; (80112f8 <_strtod_l+0xb08>)
 801103c:	4293      	cmp	r3, r2
 801103e:	d153      	bne.n	80110e8 <_strtod_l+0x8f8>
 8011040:	9b04      	ldr	r3, [sp, #16]
 8011042:	4650      	mov	r0, sl
 8011044:	b1d3      	cbz	r3, 801107c <_strtod_l+0x88c>
 8011046:	4aad      	ldr	r2, [pc, #692]	; (80112fc <_strtod_l+0xb0c>)
 8011048:	402a      	ands	r2, r5
 801104a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801104e:	f04f 31ff 	mov.w	r1, #4294967295
 8011052:	d816      	bhi.n	8011082 <_strtod_l+0x892>
 8011054:	0d12      	lsrs	r2, r2, #20
 8011056:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801105a:	fa01 f303 	lsl.w	r3, r1, r3
 801105e:	4298      	cmp	r0, r3
 8011060:	d142      	bne.n	80110e8 <_strtod_l+0x8f8>
 8011062:	4ba7      	ldr	r3, [pc, #668]	; (8011300 <_strtod_l+0xb10>)
 8011064:	429d      	cmp	r5, r3
 8011066:	d102      	bne.n	801106e <_strtod_l+0x87e>
 8011068:	3001      	adds	r0, #1
 801106a:	f43f addf 	beq.w	8010c2c <_strtod_l+0x43c>
 801106e:	4ba3      	ldr	r3, [pc, #652]	; (80112fc <_strtod_l+0xb0c>)
 8011070:	402b      	ands	r3, r5
 8011072:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011076:	f04f 0a00 	mov.w	sl, #0
 801107a:	e7a0      	b.n	8010fbe <_strtod_l+0x7ce>
 801107c:	f04f 33ff 	mov.w	r3, #4294967295
 8011080:	e7ed      	b.n	801105e <_strtod_l+0x86e>
 8011082:	460b      	mov	r3, r1
 8011084:	e7eb      	b.n	801105e <_strtod_l+0x86e>
 8011086:	bb7b      	cbnz	r3, 80110e8 <_strtod_l+0x8f8>
 8011088:	f1ba 0f00 	cmp.w	sl, #0
 801108c:	d12c      	bne.n	80110e8 <_strtod_l+0x8f8>
 801108e:	9904      	ldr	r1, [sp, #16]
 8011090:	4a9a      	ldr	r2, [pc, #616]	; (80112fc <_strtod_l+0xb0c>)
 8011092:	465b      	mov	r3, fp
 8011094:	b1f1      	cbz	r1, 80110d4 <_strtod_l+0x8e4>
 8011096:	ea02 010b 	and.w	r1, r2, fp
 801109a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801109e:	dc19      	bgt.n	80110d4 <_strtod_l+0x8e4>
 80110a0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80110a4:	f77f ae5b 	ble.w	8010d5e <_strtod_l+0x56e>
 80110a8:	4a96      	ldr	r2, [pc, #600]	; (8011304 <_strtod_l+0xb14>)
 80110aa:	2300      	movs	r3, #0
 80110ac:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80110b0:	4650      	mov	r0, sl
 80110b2:	4659      	mov	r1, fp
 80110b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80110b8:	f7ef fa9e 	bl	80005f8 <__aeabi_dmul>
 80110bc:	4682      	mov	sl, r0
 80110be:	468b      	mov	fp, r1
 80110c0:	2900      	cmp	r1, #0
 80110c2:	f47f adbe 	bne.w	8010c42 <_strtod_l+0x452>
 80110c6:	2800      	cmp	r0, #0
 80110c8:	f47f adbb 	bne.w	8010c42 <_strtod_l+0x452>
 80110cc:	2322      	movs	r3, #34	; 0x22
 80110ce:	f8c9 3000 	str.w	r3, [r9]
 80110d2:	e5b6      	b.n	8010c42 <_strtod_l+0x452>
 80110d4:	4013      	ands	r3, r2
 80110d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80110da:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80110de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80110e2:	f04f 3aff 	mov.w	sl, #4294967295
 80110e6:	e76a      	b.n	8010fbe <_strtod_l+0x7ce>
 80110e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110ea:	b193      	cbz	r3, 8011112 <_strtod_l+0x922>
 80110ec:	422b      	tst	r3, r5
 80110ee:	f43f af66 	beq.w	8010fbe <_strtod_l+0x7ce>
 80110f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110f4:	9a04      	ldr	r2, [sp, #16]
 80110f6:	4650      	mov	r0, sl
 80110f8:	4659      	mov	r1, fp
 80110fa:	b173      	cbz	r3, 801111a <_strtod_l+0x92a>
 80110fc:	f7ff fb5a 	bl	80107b4 <sulp>
 8011100:	4602      	mov	r2, r0
 8011102:	460b      	mov	r3, r1
 8011104:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011108:	f7ef f8c0 	bl	800028c <__adddf3>
 801110c:	4682      	mov	sl, r0
 801110e:	468b      	mov	fp, r1
 8011110:	e755      	b.n	8010fbe <_strtod_l+0x7ce>
 8011112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011114:	ea13 0f0a 	tst.w	r3, sl
 8011118:	e7e9      	b.n	80110ee <_strtod_l+0x8fe>
 801111a:	f7ff fb4b 	bl	80107b4 <sulp>
 801111e:	4602      	mov	r2, r0
 8011120:	460b      	mov	r3, r1
 8011122:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011126:	f7ef f8af 	bl	8000288 <__aeabi_dsub>
 801112a:	2200      	movs	r2, #0
 801112c:	2300      	movs	r3, #0
 801112e:	4682      	mov	sl, r0
 8011130:	468b      	mov	fp, r1
 8011132:	f7ef fcc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8011136:	2800      	cmp	r0, #0
 8011138:	f47f ae11 	bne.w	8010d5e <_strtod_l+0x56e>
 801113c:	e73f      	b.n	8010fbe <_strtod_l+0x7ce>
 801113e:	4641      	mov	r1, r8
 8011140:	4620      	mov	r0, r4
 8011142:	f001 ff2c 	bl	8012f9e <__ratio>
 8011146:	ec57 6b10 	vmov	r6, r7, d0
 801114a:	2200      	movs	r2, #0
 801114c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011150:	ee10 0a10 	vmov	r0, s0
 8011154:	4639      	mov	r1, r7
 8011156:	f7ef fccb 	bl	8000af0 <__aeabi_dcmple>
 801115a:	2800      	cmp	r0, #0
 801115c:	d077      	beq.n	801124e <_strtod_l+0xa5e>
 801115e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011160:	2b00      	cmp	r3, #0
 8011162:	d04a      	beq.n	80111fa <_strtod_l+0xa0a>
 8011164:	4b68      	ldr	r3, [pc, #416]	; (8011308 <_strtod_l+0xb18>)
 8011166:	2200      	movs	r2, #0
 8011168:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801116c:	4f66      	ldr	r7, [pc, #408]	; (8011308 <_strtod_l+0xb18>)
 801116e:	2600      	movs	r6, #0
 8011170:	4b62      	ldr	r3, [pc, #392]	; (80112fc <_strtod_l+0xb0c>)
 8011172:	402b      	ands	r3, r5
 8011174:	930f      	str	r3, [sp, #60]	; 0x3c
 8011176:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011178:	4b64      	ldr	r3, [pc, #400]	; (801130c <_strtod_l+0xb1c>)
 801117a:	429a      	cmp	r2, r3
 801117c:	f040 80ce 	bne.w	801131c <_strtod_l+0xb2c>
 8011180:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011184:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011188:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801118c:	ec4b ab10 	vmov	d0, sl, fp
 8011190:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8011194:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011198:	f001 fe3c 	bl	8012e14 <__ulp>
 801119c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80111a0:	ec53 2b10 	vmov	r2, r3, d0
 80111a4:	f7ef fa28 	bl	80005f8 <__aeabi_dmul>
 80111a8:	4652      	mov	r2, sl
 80111aa:	465b      	mov	r3, fp
 80111ac:	f7ef f86e 	bl	800028c <__adddf3>
 80111b0:	460b      	mov	r3, r1
 80111b2:	4952      	ldr	r1, [pc, #328]	; (80112fc <_strtod_l+0xb0c>)
 80111b4:	4a56      	ldr	r2, [pc, #344]	; (8011310 <_strtod_l+0xb20>)
 80111b6:	4019      	ands	r1, r3
 80111b8:	4291      	cmp	r1, r2
 80111ba:	4682      	mov	sl, r0
 80111bc:	d95b      	bls.n	8011276 <_strtod_l+0xa86>
 80111be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111c0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80111c4:	4293      	cmp	r3, r2
 80111c6:	d103      	bne.n	80111d0 <_strtod_l+0x9e0>
 80111c8:	9b08      	ldr	r3, [sp, #32]
 80111ca:	3301      	adds	r3, #1
 80111cc:	f43f ad2e 	beq.w	8010c2c <_strtod_l+0x43c>
 80111d0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8011300 <_strtod_l+0xb10>
 80111d4:	f04f 3aff 	mov.w	sl, #4294967295
 80111d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80111da:	4648      	mov	r0, r9
 80111dc:	f001 fb82 	bl	80128e4 <_Bfree>
 80111e0:	9905      	ldr	r1, [sp, #20]
 80111e2:	4648      	mov	r0, r9
 80111e4:	f001 fb7e 	bl	80128e4 <_Bfree>
 80111e8:	4641      	mov	r1, r8
 80111ea:	4648      	mov	r0, r9
 80111ec:	f001 fb7a 	bl	80128e4 <_Bfree>
 80111f0:	4621      	mov	r1, r4
 80111f2:	4648      	mov	r0, r9
 80111f4:	f001 fb76 	bl	80128e4 <_Bfree>
 80111f8:	e619      	b.n	8010e2e <_strtod_l+0x63e>
 80111fa:	f1ba 0f00 	cmp.w	sl, #0
 80111fe:	d11a      	bne.n	8011236 <_strtod_l+0xa46>
 8011200:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011204:	b9eb      	cbnz	r3, 8011242 <_strtod_l+0xa52>
 8011206:	2200      	movs	r2, #0
 8011208:	4b3f      	ldr	r3, [pc, #252]	; (8011308 <_strtod_l+0xb18>)
 801120a:	4630      	mov	r0, r6
 801120c:	4639      	mov	r1, r7
 801120e:	f7ef fc65 	bl	8000adc <__aeabi_dcmplt>
 8011212:	b9c8      	cbnz	r0, 8011248 <_strtod_l+0xa58>
 8011214:	4630      	mov	r0, r6
 8011216:	4639      	mov	r1, r7
 8011218:	2200      	movs	r2, #0
 801121a:	4b3e      	ldr	r3, [pc, #248]	; (8011314 <_strtod_l+0xb24>)
 801121c:	f7ef f9ec 	bl	80005f8 <__aeabi_dmul>
 8011220:	4606      	mov	r6, r0
 8011222:	460f      	mov	r7, r1
 8011224:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8011228:	9618      	str	r6, [sp, #96]	; 0x60
 801122a:	9319      	str	r3, [sp, #100]	; 0x64
 801122c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8011230:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011234:	e79c      	b.n	8011170 <_strtod_l+0x980>
 8011236:	f1ba 0f01 	cmp.w	sl, #1
 801123a:	d102      	bne.n	8011242 <_strtod_l+0xa52>
 801123c:	2d00      	cmp	r5, #0
 801123e:	f43f ad8e 	beq.w	8010d5e <_strtod_l+0x56e>
 8011242:	2200      	movs	r2, #0
 8011244:	4b34      	ldr	r3, [pc, #208]	; (8011318 <_strtod_l+0xb28>)
 8011246:	e78f      	b.n	8011168 <_strtod_l+0x978>
 8011248:	2600      	movs	r6, #0
 801124a:	4f32      	ldr	r7, [pc, #200]	; (8011314 <_strtod_l+0xb24>)
 801124c:	e7ea      	b.n	8011224 <_strtod_l+0xa34>
 801124e:	4b31      	ldr	r3, [pc, #196]	; (8011314 <_strtod_l+0xb24>)
 8011250:	4630      	mov	r0, r6
 8011252:	4639      	mov	r1, r7
 8011254:	2200      	movs	r2, #0
 8011256:	f7ef f9cf 	bl	80005f8 <__aeabi_dmul>
 801125a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801125c:	4606      	mov	r6, r0
 801125e:	460f      	mov	r7, r1
 8011260:	b933      	cbnz	r3, 8011270 <_strtod_l+0xa80>
 8011262:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011266:	9010      	str	r0, [sp, #64]	; 0x40
 8011268:	9311      	str	r3, [sp, #68]	; 0x44
 801126a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801126e:	e7df      	b.n	8011230 <_strtod_l+0xa40>
 8011270:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8011274:	e7f9      	b.n	801126a <_strtod_l+0xa7a>
 8011276:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801127a:	9b04      	ldr	r3, [sp, #16]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d1ab      	bne.n	80111d8 <_strtod_l+0x9e8>
 8011280:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011284:	0d1b      	lsrs	r3, r3, #20
 8011286:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011288:	051b      	lsls	r3, r3, #20
 801128a:	429a      	cmp	r2, r3
 801128c:	465d      	mov	r5, fp
 801128e:	d1a3      	bne.n	80111d8 <_strtod_l+0x9e8>
 8011290:	4639      	mov	r1, r7
 8011292:	4630      	mov	r0, r6
 8011294:	f7ef fc60 	bl	8000b58 <__aeabi_d2iz>
 8011298:	f7ef f944 	bl	8000524 <__aeabi_i2d>
 801129c:	460b      	mov	r3, r1
 801129e:	4602      	mov	r2, r0
 80112a0:	4639      	mov	r1, r7
 80112a2:	4630      	mov	r0, r6
 80112a4:	f7ee fff0 	bl	8000288 <__aeabi_dsub>
 80112a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80112aa:	4606      	mov	r6, r0
 80112ac:	460f      	mov	r7, r1
 80112ae:	b933      	cbnz	r3, 80112be <_strtod_l+0xace>
 80112b0:	f1ba 0f00 	cmp.w	sl, #0
 80112b4:	d103      	bne.n	80112be <_strtod_l+0xace>
 80112b6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80112ba:	2d00      	cmp	r5, #0
 80112bc:	d06d      	beq.n	801139a <_strtod_l+0xbaa>
 80112be:	a30a      	add	r3, pc, #40	; (adr r3, 80112e8 <_strtod_l+0xaf8>)
 80112c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c4:	4630      	mov	r0, r6
 80112c6:	4639      	mov	r1, r7
 80112c8:	f7ef fc08 	bl	8000adc <__aeabi_dcmplt>
 80112cc:	2800      	cmp	r0, #0
 80112ce:	f47f acb8 	bne.w	8010c42 <_strtod_l+0x452>
 80112d2:	a307      	add	r3, pc, #28	; (adr r3, 80112f0 <_strtod_l+0xb00>)
 80112d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d8:	4630      	mov	r0, r6
 80112da:	4639      	mov	r1, r7
 80112dc:	f7ef fc1c 	bl	8000b18 <__aeabi_dcmpgt>
 80112e0:	2800      	cmp	r0, #0
 80112e2:	f43f af79 	beq.w	80111d8 <_strtod_l+0x9e8>
 80112e6:	e4ac      	b.n	8010c42 <_strtod_l+0x452>
 80112e8:	94a03595 	.word	0x94a03595
 80112ec:	3fdfffff 	.word	0x3fdfffff
 80112f0:	35afe535 	.word	0x35afe535
 80112f4:	3fe00000 	.word	0x3fe00000
 80112f8:	000fffff 	.word	0x000fffff
 80112fc:	7ff00000 	.word	0x7ff00000
 8011300:	7fefffff 	.word	0x7fefffff
 8011304:	39500000 	.word	0x39500000
 8011308:	3ff00000 	.word	0x3ff00000
 801130c:	7fe00000 	.word	0x7fe00000
 8011310:	7c9fffff 	.word	0x7c9fffff
 8011314:	3fe00000 	.word	0x3fe00000
 8011318:	bff00000 	.word	0xbff00000
 801131c:	9b04      	ldr	r3, [sp, #16]
 801131e:	b333      	cbz	r3, 801136e <_strtod_l+0xb7e>
 8011320:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011322:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011326:	d822      	bhi.n	801136e <_strtod_l+0xb7e>
 8011328:	a327      	add	r3, pc, #156	; (adr r3, 80113c8 <_strtod_l+0xbd8>)
 801132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801132e:	4630      	mov	r0, r6
 8011330:	4639      	mov	r1, r7
 8011332:	f7ef fbdd 	bl	8000af0 <__aeabi_dcmple>
 8011336:	b1a0      	cbz	r0, 8011362 <_strtod_l+0xb72>
 8011338:	4639      	mov	r1, r7
 801133a:	4630      	mov	r0, r6
 801133c:	f7ef fc34 	bl	8000ba8 <__aeabi_d2uiz>
 8011340:	2800      	cmp	r0, #0
 8011342:	bf08      	it	eq
 8011344:	2001      	moveq	r0, #1
 8011346:	f7ef f8dd 	bl	8000504 <__aeabi_ui2d>
 801134a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801134c:	4606      	mov	r6, r0
 801134e:	460f      	mov	r7, r1
 8011350:	bb03      	cbnz	r3, 8011394 <_strtod_l+0xba4>
 8011352:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011356:	9012      	str	r0, [sp, #72]	; 0x48
 8011358:	9313      	str	r3, [sp, #76]	; 0x4c
 801135a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801135e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011364:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011366:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801136a:	1a9b      	subs	r3, r3, r2
 801136c:	930b      	str	r3, [sp, #44]	; 0x2c
 801136e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8011372:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8011376:	f001 fd4d 	bl	8012e14 <__ulp>
 801137a:	4650      	mov	r0, sl
 801137c:	ec53 2b10 	vmov	r2, r3, d0
 8011380:	4659      	mov	r1, fp
 8011382:	f7ef f939 	bl	80005f8 <__aeabi_dmul>
 8011386:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801138a:	f7ee ff7f 	bl	800028c <__adddf3>
 801138e:	4682      	mov	sl, r0
 8011390:	468b      	mov	fp, r1
 8011392:	e772      	b.n	801127a <_strtod_l+0xa8a>
 8011394:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8011398:	e7df      	b.n	801135a <_strtod_l+0xb6a>
 801139a:	a30d      	add	r3, pc, #52	; (adr r3, 80113d0 <_strtod_l+0xbe0>)
 801139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a0:	f7ef fb9c 	bl	8000adc <__aeabi_dcmplt>
 80113a4:	e79c      	b.n	80112e0 <_strtod_l+0xaf0>
 80113a6:	2300      	movs	r3, #0
 80113a8:	930d      	str	r3, [sp, #52]	; 0x34
 80113aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80113ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80113ae:	6013      	str	r3, [r2, #0]
 80113b0:	f7ff ba61 	b.w	8010876 <_strtod_l+0x86>
 80113b4:	2b65      	cmp	r3, #101	; 0x65
 80113b6:	f04f 0200 	mov.w	r2, #0
 80113ba:	f43f ab4e 	beq.w	8010a5a <_strtod_l+0x26a>
 80113be:	2101      	movs	r1, #1
 80113c0:	4614      	mov	r4, r2
 80113c2:	9104      	str	r1, [sp, #16]
 80113c4:	f7ff bacb 	b.w	801095e <_strtod_l+0x16e>
 80113c8:	ffc00000 	.word	0xffc00000
 80113cc:	41dfffff 	.word	0x41dfffff
 80113d0:	94a03595 	.word	0x94a03595
 80113d4:	3fcfffff 	.word	0x3fcfffff

080113d8 <_strtod_r>:
 80113d8:	4b05      	ldr	r3, [pc, #20]	; (80113f0 <_strtod_r+0x18>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	b410      	push	{r4}
 80113de:	6a1b      	ldr	r3, [r3, #32]
 80113e0:	4c04      	ldr	r4, [pc, #16]	; (80113f4 <_strtod_r+0x1c>)
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	bf08      	it	eq
 80113e6:	4623      	moveq	r3, r4
 80113e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113ec:	f7ff ba00 	b.w	80107f0 <_strtod_l>
 80113f0:	200001c0 	.word	0x200001c0
 80113f4:	20000224 	.word	0x20000224

080113f8 <_strtol_l.isra.0>:
 80113f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113fc:	4680      	mov	r8, r0
 80113fe:	4689      	mov	r9, r1
 8011400:	4692      	mov	sl, r2
 8011402:	461e      	mov	r6, r3
 8011404:	460f      	mov	r7, r1
 8011406:	463d      	mov	r5, r7
 8011408:	9808      	ldr	r0, [sp, #32]
 801140a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801140e:	f001 fa0d 	bl	801282c <__locale_ctype_ptr_l>
 8011412:	4420      	add	r0, r4
 8011414:	7843      	ldrb	r3, [r0, #1]
 8011416:	f013 0308 	ands.w	r3, r3, #8
 801141a:	d132      	bne.n	8011482 <_strtol_l.isra.0+0x8a>
 801141c:	2c2d      	cmp	r4, #45	; 0x2d
 801141e:	d132      	bne.n	8011486 <_strtol_l.isra.0+0x8e>
 8011420:	787c      	ldrb	r4, [r7, #1]
 8011422:	1cbd      	adds	r5, r7, #2
 8011424:	2201      	movs	r2, #1
 8011426:	2e00      	cmp	r6, #0
 8011428:	d05d      	beq.n	80114e6 <_strtol_l.isra.0+0xee>
 801142a:	2e10      	cmp	r6, #16
 801142c:	d109      	bne.n	8011442 <_strtol_l.isra.0+0x4a>
 801142e:	2c30      	cmp	r4, #48	; 0x30
 8011430:	d107      	bne.n	8011442 <_strtol_l.isra.0+0x4a>
 8011432:	782b      	ldrb	r3, [r5, #0]
 8011434:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011438:	2b58      	cmp	r3, #88	; 0x58
 801143a:	d14f      	bne.n	80114dc <_strtol_l.isra.0+0xe4>
 801143c:	786c      	ldrb	r4, [r5, #1]
 801143e:	2610      	movs	r6, #16
 8011440:	3502      	adds	r5, #2
 8011442:	2a00      	cmp	r2, #0
 8011444:	bf14      	ite	ne
 8011446:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801144a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801144e:	2700      	movs	r7, #0
 8011450:	fbb1 fcf6 	udiv	ip, r1, r6
 8011454:	4638      	mov	r0, r7
 8011456:	fb06 1e1c 	mls	lr, r6, ip, r1
 801145a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801145e:	2b09      	cmp	r3, #9
 8011460:	d817      	bhi.n	8011492 <_strtol_l.isra.0+0x9a>
 8011462:	461c      	mov	r4, r3
 8011464:	42a6      	cmp	r6, r4
 8011466:	dd23      	ble.n	80114b0 <_strtol_l.isra.0+0xb8>
 8011468:	1c7b      	adds	r3, r7, #1
 801146a:	d007      	beq.n	801147c <_strtol_l.isra.0+0x84>
 801146c:	4584      	cmp	ip, r0
 801146e:	d31c      	bcc.n	80114aa <_strtol_l.isra.0+0xb2>
 8011470:	d101      	bne.n	8011476 <_strtol_l.isra.0+0x7e>
 8011472:	45a6      	cmp	lr, r4
 8011474:	db19      	blt.n	80114aa <_strtol_l.isra.0+0xb2>
 8011476:	fb00 4006 	mla	r0, r0, r6, r4
 801147a:	2701      	movs	r7, #1
 801147c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011480:	e7eb      	b.n	801145a <_strtol_l.isra.0+0x62>
 8011482:	462f      	mov	r7, r5
 8011484:	e7bf      	b.n	8011406 <_strtol_l.isra.0+0xe>
 8011486:	2c2b      	cmp	r4, #43	; 0x2b
 8011488:	bf04      	itt	eq
 801148a:	1cbd      	addeq	r5, r7, #2
 801148c:	787c      	ldrbeq	r4, [r7, #1]
 801148e:	461a      	mov	r2, r3
 8011490:	e7c9      	b.n	8011426 <_strtol_l.isra.0+0x2e>
 8011492:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8011496:	2b19      	cmp	r3, #25
 8011498:	d801      	bhi.n	801149e <_strtol_l.isra.0+0xa6>
 801149a:	3c37      	subs	r4, #55	; 0x37
 801149c:	e7e2      	b.n	8011464 <_strtol_l.isra.0+0x6c>
 801149e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80114a2:	2b19      	cmp	r3, #25
 80114a4:	d804      	bhi.n	80114b0 <_strtol_l.isra.0+0xb8>
 80114a6:	3c57      	subs	r4, #87	; 0x57
 80114a8:	e7dc      	b.n	8011464 <_strtol_l.isra.0+0x6c>
 80114aa:	f04f 37ff 	mov.w	r7, #4294967295
 80114ae:	e7e5      	b.n	801147c <_strtol_l.isra.0+0x84>
 80114b0:	1c7b      	adds	r3, r7, #1
 80114b2:	d108      	bne.n	80114c6 <_strtol_l.isra.0+0xce>
 80114b4:	2322      	movs	r3, #34	; 0x22
 80114b6:	f8c8 3000 	str.w	r3, [r8]
 80114ba:	4608      	mov	r0, r1
 80114bc:	f1ba 0f00 	cmp.w	sl, #0
 80114c0:	d107      	bne.n	80114d2 <_strtol_l.isra.0+0xda>
 80114c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114c6:	b102      	cbz	r2, 80114ca <_strtol_l.isra.0+0xd2>
 80114c8:	4240      	negs	r0, r0
 80114ca:	f1ba 0f00 	cmp.w	sl, #0
 80114ce:	d0f8      	beq.n	80114c2 <_strtol_l.isra.0+0xca>
 80114d0:	b10f      	cbz	r7, 80114d6 <_strtol_l.isra.0+0xde>
 80114d2:	f105 39ff 	add.w	r9, r5, #4294967295
 80114d6:	f8ca 9000 	str.w	r9, [sl]
 80114da:	e7f2      	b.n	80114c2 <_strtol_l.isra.0+0xca>
 80114dc:	2430      	movs	r4, #48	; 0x30
 80114de:	2e00      	cmp	r6, #0
 80114e0:	d1af      	bne.n	8011442 <_strtol_l.isra.0+0x4a>
 80114e2:	2608      	movs	r6, #8
 80114e4:	e7ad      	b.n	8011442 <_strtol_l.isra.0+0x4a>
 80114e6:	2c30      	cmp	r4, #48	; 0x30
 80114e8:	d0a3      	beq.n	8011432 <_strtol_l.isra.0+0x3a>
 80114ea:	260a      	movs	r6, #10
 80114ec:	e7a9      	b.n	8011442 <_strtol_l.isra.0+0x4a>
	...

080114f0 <_strtol_r>:
 80114f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114f2:	4c06      	ldr	r4, [pc, #24]	; (801150c <_strtol_r+0x1c>)
 80114f4:	4d06      	ldr	r5, [pc, #24]	; (8011510 <_strtol_r+0x20>)
 80114f6:	6824      	ldr	r4, [r4, #0]
 80114f8:	6a24      	ldr	r4, [r4, #32]
 80114fa:	2c00      	cmp	r4, #0
 80114fc:	bf08      	it	eq
 80114fe:	462c      	moveq	r4, r5
 8011500:	9400      	str	r4, [sp, #0]
 8011502:	f7ff ff79 	bl	80113f8 <_strtol_l.isra.0>
 8011506:	b003      	add	sp, #12
 8011508:	bd30      	pop	{r4, r5, pc}
 801150a:	bf00      	nop
 801150c:	200001c0 	.word	0x200001c0
 8011510:	20000224 	.word	0x20000224

08011514 <_vsiprintf_r>:
 8011514:	b500      	push	{lr}
 8011516:	b09b      	sub	sp, #108	; 0x6c
 8011518:	9100      	str	r1, [sp, #0]
 801151a:	9104      	str	r1, [sp, #16]
 801151c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011520:	9105      	str	r1, [sp, #20]
 8011522:	9102      	str	r1, [sp, #8]
 8011524:	4905      	ldr	r1, [pc, #20]	; (801153c <_vsiprintf_r+0x28>)
 8011526:	9103      	str	r1, [sp, #12]
 8011528:	4669      	mov	r1, sp
 801152a:	f001 fe0f 	bl	801314c <_svfiprintf_r>
 801152e:	9b00      	ldr	r3, [sp, #0]
 8011530:	2200      	movs	r2, #0
 8011532:	701a      	strb	r2, [r3, #0]
 8011534:	b01b      	add	sp, #108	; 0x6c
 8011536:	f85d fb04 	ldr.w	pc, [sp], #4
 801153a:	bf00      	nop
 801153c:	ffff0208 	.word	0xffff0208

08011540 <vsiprintf>:
 8011540:	4613      	mov	r3, r2
 8011542:	460a      	mov	r2, r1
 8011544:	4601      	mov	r1, r0
 8011546:	4802      	ldr	r0, [pc, #8]	; (8011550 <vsiprintf+0x10>)
 8011548:	6800      	ldr	r0, [r0, #0]
 801154a:	f7ff bfe3 	b.w	8011514 <_vsiprintf_r>
 801154e:	bf00      	nop
 8011550:	200001c0 	.word	0x200001c0

08011554 <quorem>:
 8011554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011558:	6903      	ldr	r3, [r0, #16]
 801155a:	690c      	ldr	r4, [r1, #16]
 801155c:	42a3      	cmp	r3, r4
 801155e:	4680      	mov	r8, r0
 8011560:	f2c0 8082 	blt.w	8011668 <quorem+0x114>
 8011564:	3c01      	subs	r4, #1
 8011566:	f101 0714 	add.w	r7, r1, #20
 801156a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801156e:	f100 0614 	add.w	r6, r0, #20
 8011572:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8011576:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801157a:	eb06 030c 	add.w	r3, r6, ip
 801157e:	3501      	adds	r5, #1
 8011580:	eb07 090c 	add.w	r9, r7, ip
 8011584:	9301      	str	r3, [sp, #4]
 8011586:	fbb0 f5f5 	udiv	r5, r0, r5
 801158a:	b395      	cbz	r5, 80115f2 <quorem+0x9e>
 801158c:	f04f 0a00 	mov.w	sl, #0
 8011590:	4638      	mov	r0, r7
 8011592:	46b6      	mov	lr, r6
 8011594:	46d3      	mov	fp, sl
 8011596:	f850 2b04 	ldr.w	r2, [r0], #4
 801159a:	b293      	uxth	r3, r2
 801159c:	fb05 a303 	mla	r3, r5, r3, sl
 80115a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80115a4:	b29b      	uxth	r3, r3
 80115a6:	ebab 0303 	sub.w	r3, fp, r3
 80115aa:	0c12      	lsrs	r2, r2, #16
 80115ac:	f8de b000 	ldr.w	fp, [lr]
 80115b0:	fb05 a202 	mla	r2, r5, r2, sl
 80115b4:	fa13 f38b 	uxtah	r3, r3, fp
 80115b8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80115bc:	fa1f fb82 	uxth.w	fp, r2
 80115c0:	f8de 2000 	ldr.w	r2, [lr]
 80115c4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80115c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80115cc:	b29b      	uxth	r3, r3
 80115ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80115d2:	4581      	cmp	r9, r0
 80115d4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80115d8:	f84e 3b04 	str.w	r3, [lr], #4
 80115dc:	d2db      	bcs.n	8011596 <quorem+0x42>
 80115de:	f856 300c 	ldr.w	r3, [r6, ip]
 80115e2:	b933      	cbnz	r3, 80115f2 <quorem+0x9e>
 80115e4:	9b01      	ldr	r3, [sp, #4]
 80115e6:	3b04      	subs	r3, #4
 80115e8:	429e      	cmp	r6, r3
 80115ea:	461a      	mov	r2, r3
 80115ec:	d330      	bcc.n	8011650 <quorem+0xfc>
 80115ee:	f8c8 4010 	str.w	r4, [r8, #16]
 80115f2:	4640      	mov	r0, r8
 80115f4:	f001 fb96 	bl	8012d24 <__mcmp>
 80115f8:	2800      	cmp	r0, #0
 80115fa:	db25      	blt.n	8011648 <quorem+0xf4>
 80115fc:	3501      	adds	r5, #1
 80115fe:	4630      	mov	r0, r6
 8011600:	f04f 0c00 	mov.w	ip, #0
 8011604:	f857 2b04 	ldr.w	r2, [r7], #4
 8011608:	f8d0 e000 	ldr.w	lr, [r0]
 801160c:	b293      	uxth	r3, r2
 801160e:	ebac 0303 	sub.w	r3, ip, r3
 8011612:	0c12      	lsrs	r2, r2, #16
 8011614:	fa13 f38e 	uxtah	r3, r3, lr
 8011618:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801161c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011620:	b29b      	uxth	r3, r3
 8011622:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011626:	45b9      	cmp	r9, r7
 8011628:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801162c:	f840 3b04 	str.w	r3, [r0], #4
 8011630:	d2e8      	bcs.n	8011604 <quorem+0xb0>
 8011632:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8011636:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801163a:	b92a      	cbnz	r2, 8011648 <quorem+0xf4>
 801163c:	3b04      	subs	r3, #4
 801163e:	429e      	cmp	r6, r3
 8011640:	461a      	mov	r2, r3
 8011642:	d30b      	bcc.n	801165c <quorem+0x108>
 8011644:	f8c8 4010 	str.w	r4, [r8, #16]
 8011648:	4628      	mov	r0, r5
 801164a:	b003      	add	sp, #12
 801164c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011650:	6812      	ldr	r2, [r2, #0]
 8011652:	3b04      	subs	r3, #4
 8011654:	2a00      	cmp	r2, #0
 8011656:	d1ca      	bne.n	80115ee <quorem+0x9a>
 8011658:	3c01      	subs	r4, #1
 801165a:	e7c5      	b.n	80115e8 <quorem+0x94>
 801165c:	6812      	ldr	r2, [r2, #0]
 801165e:	3b04      	subs	r3, #4
 8011660:	2a00      	cmp	r2, #0
 8011662:	d1ef      	bne.n	8011644 <quorem+0xf0>
 8011664:	3c01      	subs	r4, #1
 8011666:	e7ea      	b.n	801163e <quorem+0xea>
 8011668:	2000      	movs	r0, #0
 801166a:	e7ee      	b.n	801164a <quorem+0xf6>
 801166c:	0000      	movs	r0, r0
	...

08011670 <_dtoa_r>:
 8011670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011674:	ec57 6b10 	vmov	r6, r7, d0
 8011678:	b097      	sub	sp, #92	; 0x5c
 801167a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801167c:	9106      	str	r1, [sp, #24]
 801167e:	4604      	mov	r4, r0
 8011680:	920b      	str	r2, [sp, #44]	; 0x2c
 8011682:	9312      	str	r3, [sp, #72]	; 0x48
 8011684:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011688:	e9cd 6700 	strd	r6, r7, [sp]
 801168c:	b93d      	cbnz	r5, 801169e <_dtoa_r+0x2e>
 801168e:	2010      	movs	r0, #16
 8011690:	f7fe f93e 	bl	800f910 <malloc>
 8011694:	6260      	str	r0, [r4, #36]	; 0x24
 8011696:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801169a:	6005      	str	r5, [r0, #0]
 801169c:	60c5      	str	r5, [r0, #12]
 801169e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116a0:	6819      	ldr	r1, [r3, #0]
 80116a2:	b151      	cbz	r1, 80116ba <_dtoa_r+0x4a>
 80116a4:	685a      	ldr	r2, [r3, #4]
 80116a6:	604a      	str	r2, [r1, #4]
 80116a8:	2301      	movs	r3, #1
 80116aa:	4093      	lsls	r3, r2
 80116ac:	608b      	str	r3, [r1, #8]
 80116ae:	4620      	mov	r0, r4
 80116b0:	f001 f918 	bl	80128e4 <_Bfree>
 80116b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116b6:	2200      	movs	r2, #0
 80116b8:	601a      	str	r2, [r3, #0]
 80116ba:	1e3b      	subs	r3, r7, #0
 80116bc:	bfbb      	ittet	lt
 80116be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80116c2:	9301      	strlt	r3, [sp, #4]
 80116c4:	2300      	movge	r3, #0
 80116c6:	2201      	movlt	r2, #1
 80116c8:	bfac      	ite	ge
 80116ca:	f8c8 3000 	strge.w	r3, [r8]
 80116ce:	f8c8 2000 	strlt.w	r2, [r8]
 80116d2:	4baf      	ldr	r3, [pc, #700]	; (8011990 <_dtoa_r+0x320>)
 80116d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80116d8:	ea33 0308 	bics.w	r3, r3, r8
 80116dc:	d114      	bne.n	8011708 <_dtoa_r+0x98>
 80116de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80116e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80116e4:	6013      	str	r3, [r2, #0]
 80116e6:	9b00      	ldr	r3, [sp, #0]
 80116e8:	b923      	cbnz	r3, 80116f4 <_dtoa_r+0x84>
 80116ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80116ee:	2800      	cmp	r0, #0
 80116f0:	f000 8542 	beq.w	8012178 <_dtoa_r+0xb08>
 80116f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80119a4 <_dtoa_r+0x334>
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	f000 8544 	beq.w	8012188 <_dtoa_r+0xb18>
 8011700:	f10b 0303 	add.w	r3, fp, #3
 8011704:	f000 bd3e 	b.w	8012184 <_dtoa_r+0xb14>
 8011708:	e9dd 6700 	ldrd	r6, r7, [sp]
 801170c:	2200      	movs	r2, #0
 801170e:	2300      	movs	r3, #0
 8011710:	4630      	mov	r0, r6
 8011712:	4639      	mov	r1, r7
 8011714:	f7ef f9d8 	bl	8000ac8 <__aeabi_dcmpeq>
 8011718:	4681      	mov	r9, r0
 801171a:	b168      	cbz	r0, 8011738 <_dtoa_r+0xc8>
 801171c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801171e:	2301      	movs	r3, #1
 8011720:	6013      	str	r3, [r2, #0]
 8011722:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011724:	2b00      	cmp	r3, #0
 8011726:	f000 8524 	beq.w	8012172 <_dtoa_r+0xb02>
 801172a:	4b9a      	ldr	r3, [pc, #616]	; (8011994 <_dtoa_r+0x324>)
 801172c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801172e:	f103 3bff 	add.w	fp, r3, #4294967295
 8011732:	6013      	str	r3, [r2, #0]
 8011734:	f000 bd28 	b.w	8012188 <_dtoa_r+0xb18>
 8011738:	aa14      	add	r2, sp, #80	; 0x50
 801173a:	a915      	add	r1, sp, #84	; 0x54
 801173c:	ec47 6b10 	vmov	d0, r6, r7
 8011740:	4620      	mov	r0, r4
 8011742:	f001 fbdd 	bl	8012f00 <__d2b>
 8011746:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801174a:	9004      	str	r0, [sp, #16]
 801174c:	2d00      	cmp	r5, #0
 801174e:	d07c      	beq.n	801184a <_dtoa_r+0x1da>
 8011750:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011754:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8011758:	46b2      	mov	sl, r6
 801175a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801175e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011762:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8011766:	2200      	movs	r2, #0
 8011768:	4b8b      	ldr	r3, [pc, #556]	; (8011998 <_dtoa_r+0x328>)
 801176a:	4650      	mov	r0, sl
 801176c:	4659      	mov	r1, fp
 801176e:	f7ee fd8b 	bl	8000288 <__aeabi_dsub>
 8011772:	a381      	add	r3, pc, #516	; (adr r3, 8011978 <_dtoa_r+0x308>)
 8011774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011778:	f7ee ff3e 	bl	80005f8 <__aeabi_dmul>
 801177c:	a380      	add	r3, pc, #512	; (adr r3, 8011980 <_dtoa_r+0x310>)
 801177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011782:	f7ee fd83 	bl	800028c <__adddf3>
 8011786:	4606      	mov	r6, r0
 8011788:	4628      	mov	r0, r5
 801178a:	460f      	mov	r7, r1
 801178c:	f7ee feca 	bl	8000524 <__aeabi_i2d>
 8011790:	a37d      	add	r3, pc, #500	; (adr r3, 8011988 <_dtoa_r+0x318>)
 8011792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011796:	f7ee ff2f 	bl	80005f8 <__aeabi_dmul>
 801179a:	4602      	mov	r2, r0
 801179c:	460b      	mov	r3, r1
 801179e:	4630      	mov	r0, r6
 80117a0:	4639      	mov	r1, r7
 80117a2:	f7ee fd73 	bl	800028c <__adddf3>
 80117a6:	4606      	mov	r6, r0
 80117a8:	460f      	mov	r7, r1
 80117aa:	f7ef f9d5 	bl	8000b58 <__aeabi_d2iz>
 80117ae:	2200      	movs	r2, #0
 80117b0:	4682      	mov	sl, r0
 80117b2:	2300      	movs	r3, #0
 80117b4:	4630      	mov	r0, r6
 80117b6:	4639      	mov	r1, r7
 80117b8:	f7ef f990 	bl	8000adc <__aeabi_dcmplt>
 80117bc:	b148      	cbz	r0, 80117d2 <_dtoa_r+0x162>
 80117be:	4650      	mov	r0, sl
 80117c0:	f7ee feb0 	bl	8000524 <__aeabi_i2d>
 80117c4:	4632      	mov	r2, r6
 80117c6:	463b      	mov	r3, r7
 80117c8:	f7ef f97e 	bl	8000ac8 <__aeabi_dcmpeq>
 80117cc:	b908      	cbnz	r0, 80117d2 <_dtoa_r+0x162>
 80117ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80117d2:	f1ba 0f16 	cmp.w	sl, #22
 80117d6:	d859      	bhi.n	801188c <_dtoa_r+0x21c>
 80117d8:	4970      	ldr	r1, [pc, #448]	; (801199c <_dtoa_r+0x32c>)
 80117da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80117de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80117e6:	f7ef f997 	bl	8000b18 <__aeabi_dcmpgt>
 80117ea:	2800      	cmp	r0, #0
 80117ec:	d050      	beq.n	8011890 <_dtoa_r+0x220>
 80117ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80117f2:	2300      	movs	r3, #0
 80117f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80117f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80117f8:	1b5d      	subs	r5, r3, r5
 80117fa:	f1b5 0801 	subs.w	r8, r5, #1
 80117fe:	bf49      	itett	mi
 8011800:	f1c5 0301 	rsbmi	r3, r5, #1
 8011804:	2300      	movpl	r3, #0
 8011806:	9305      	strmi	r3, [sp, #20]
 8011808:	f04f 0800 	movmi.w	r8, #0
 801180c:	bf58      	it	pl
 801180e:	9305      	strpl	r3, [sp, #20]
 8011810:	f1ba 0f00 	cmp.w	sl, #0
 8011814:	db3e      	blt.n	8011894 <_dtoa_r+0x224>
 8011816:	2300      	movs	r3, #0
 8011818:	44d0      	add	r8, sl
 801181a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801181e:	9307      	str	r3, [sp, #28]
 8011820:	9b06      	ldr	r3, [sp, #24]
 8011822:	2b09      	cmp	r3, #9
 8011824:	f200 8090 	bhi.w	8011948 <_dtoa_r+0x2d8>
 8011828:	2b05      	cmp	r3, #5
 801182a:	bfc4      	itt	gt
 801182c:	3b04      	subgt	r3, #4
 801182e:	9306      	strgt	r3, [sp, #24]
 8011830:	9b06      	ldr	r3, [sp, #24]
 8011832:	f1a3 0302 	sub.w	r3, r3, #2
 8011836:	bfcc      	ite	gt
 8011838:	2500      	movgt	r5, #0
 801183a:	2501      	movle	r5, #1
 801183c:	2b03      	cmp	r3, #3
 801183e:	f200 808f 	bhi.w	8011960 <_dtoa_r+0x2f0>
 8011842:	e8df f003 	tbb	[pc, r3]
 8011846:	7f7d      	.short	0x7f7d
 8011848:	7131      	.short	0x7131
 801184a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801184e:	441d      	add	r5, r3
 8011850:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8011854:	2820      	cmp	r0, #32
 8011856:	dd13      	ble.n	8011880 <_dtoa_r+0x210>
 8011858:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801185c:	9b00      	ldr	r3, [sp, #0]
 801185e:	fa08 f800 	lsl.w	r8, r8, r0
 8011862:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8011866:	fa23 f000 	lsr.w	r0, r3, r0
 801186a:	ea48 0000 	orr.w	r0, r8, r0
 801186e:	f7ee fe49 	bl	8000504 <__aeabi_ui2d>
 8011872:	2301      	movs	r3, #1
 8011874:	4682      	mov	sl, r0
 8011876:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801187a:	3d01      	subs	r5, #1
 801187c:	9313      	str	r3, [sp, #76]	; 0x4c
 801187e:	e772      	b.n	8011766 <_dtoa_r+0xf6>
 8011880:	9b00      	ldr	r3, [sp, #0]
 8011882:	f1c0 0020 	rsb	r0, r0, #32
 8011886:	fa03 f000 	lsl.w	r0, r3, r0
 801188a:	e7f0      	b.n	801186e <_dtoa_r+0x1fe>
 801188c:	2301      	movs	r3, #1
 801188e:	e7b1      	b.n	80117f4 <_dtoa_r+0x184>
 8011890:	900f      	str	r0, [sp, #60]	; 0x3c
 8011892:	e7b0      	b.n	80117f6 <_dtoa_r+0x186>
 8011894:	9b05      	ldr	r3, [sp, #20]
 8011896:	eba3 030a 	sub.w	r3, r3, sl
 801189a:	9305      	str	r3, [sp, #20]
 801189c:	f1ca 0300 	rsb	r3, sl, #0
 80118a0:	9307      	str	r3, [sp, #28]
 80118a2:	2300      	movs	r3, #0
 80118a4:	930e      	str	r3, [sp, #56]	; 0x38
 80118a6:	e7bb      	b.n	8011820 <_dtoa_r+0x1b0>
 80118a8:	2301      	movs	r3, #1
 80118aa:	930a      	str	r3, [sp, #40]	; 0x28
 80118ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	dd59      	ble.n	8011966 <_dtoa_r+0x2f6>
 80118b2:	9302      	str	r3, [sp, #8]
 80118b4:	4699      	mov	r9, r3
 80118b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80118b8:	2200      	movs	r2, #0
 80118ba:	6072      	str	r2, [r6, #4]
 80118bc:	2204      	movs	r2, #4
 80118be:	f102 0014 	add.w	r0, r2, #20
 80118c2:	4298      	cmp	r0, r3
 80118c4:	6871      	ldr	r1, [r6, #4]
 80118c6:	d953      	bls.n	8011970 <_dtoa_r+0x300>
 80118c8:	4620      	mov	r0, r4
 80118ca:	f000 ffd7 	bl	801287c <_Balloc>
 80118ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80118d0:	6030      	str	r0, [r6, #0]
 80118d2:	f1b9 0f0e 	cmp.w	r9, #14
 80118d6:	f8d3 b000 	ldr.w	fp, [r3]
 80118da:	f200 80e6 	bhi.w	8011aaa <_dtoa_r+0x43a>
 80118de:	2d00      	cmp	r5, #0
 80118e0:	f000 80e3 	beq.w	8011aaa <_dtoa_r+0x43a>
 80118e4:	ed9d 7b00 	vldr	d7, [sp]
 80118e8:	f1ba 0f00 	cmp.w	sl, #0
 80118ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80118f0:	dd74      	ble.n	80119dc <_dtoa_r+0x36c>
 80118f2:	4a2a      	ldr	r2, [pc, #168]	; (801199c <_dtoa_r+0x32c>)
 80118f4:	f00a 030f 	and.w	r3, sl, #15
 80118f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80118fc:	ed93 7b00 	vldr	d7, [r3]
 8011900:	ea4f 162a 	mov.w	r6, sl, asr #4
 8011904:	06f0      	lsls	r0, r6, #27
 8011906:	ed8d 7b08 	vstr	d7, [sp, #32]
 801190a:	d565      	bpl.n	80119d8 <_dtoa_r+0x368>
 801190c:	4b24      	ldr	r3, [pc, #144]	; (80119a0 <_dtoa_r+0x330>)
 801190e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011912:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011916:	f7ee ff99 	bl	800084c <__aeabi_ddiv>
 801191a:	e9cd 0100 	strd	r0, r1, [sp]
 801191e:	f006 060f 	and.w	r6, r6, #15
 8011922:	2503      	movs	r5, #3
 8011924:	4f1e      	ldr	r7, [pc, #120]	; (80119a0 <_dtoa_r+0x330>)
 8011926:	e04c      	b.n	80119c2 <_dtoa_r+0x352>
 8011928:	2301      	movs	r3, #1
 801192a:	930a      	str	r3, [sp, #40]	; 0x28
 801192c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801192e:	4453      	add	r3, sl
 8011930:	f103 0901 	add.w	r9, r3, #1
 8011934:	9302      	str	r3, [sp, #8]
 8011936:	464b      	mov	r3, r9
 8011938:	2b01      	cmp	r3, #1
 801193a:	bfb8      	it	lt
 801193c:	2301      	movlt	r3, #1
 801193e:	e7ba      	b.n	80118b6 <_dtoa_r+0x246>
 8011940:	2300      	movs	r3, #0
 8011942:	e7b2      	b.n	80118aa <_dtoa_r+0x23a>
 8011944:	2300      	movs	r3, #0
 8011946:	e7f0      	b.n	801192a <_dtoa_r+0x2ba>
 8011948:	2501      	movs	r5, #1
 801194a:	2300      	movs	r3, #0
 801194c:	9306      	str	r3, [sp, #24]
 801194e:	950a      	str	r5, [sp, #40]	; 0x28
 8011950:	f04f 33ff 	mov.w	r3, #4294967295
 8011954:	9302      	str	r3, [sp, #8]
 8011956:	4699      	mov	r9, r3
 8011958:	2200      	movs	r2, #0
 801195a:	2312      	movs	r3, #18
 801195c:	920b      	str	r2, [sp, #44]	; 0x2c
 801195e:	e7aa      	b.n	80118b6 <_dtoa_r+0x246>
 8011960:	2301      	movs	r3, #1
 8011962:	930a      	str	r3, [sp, #40]	; 0x28
 8011964:	e7f4      	b.n	8011950 <_dtoa_r+0x2e0>
 8011966:	2301      	movs	r3, #1
 8011968:	9302      	str	r3, [sp, #8]
 801196a:	4699      	mov	r9, r3
 801196c:	461a      	mov	r2, r3
 801196e:	e7f5      	b.n	801195c <_dtoa_r+0x2ec>
 8011970:	3101      	adds	r1, #1
 8011972:	6071      	str	r1, [r6, #4]
 8011974:	0052      	lsls	r2, r2, #1
 8011976:	e7a2      	b.n	80118be <_dtoa_r+0x24e>
 8011978:	636f4361 	.word	0x636f4361
 801197c:	3fd287a7 	.word	0x3fd287a7
 8011980:	8b60c8b3 	.word	0x8b60c8b3
 8011984:	3fc68a28 	.word	0x3fc68a28
 8011988:	509f79fb 	.word	0x509f79fb
 801198c:	3fd34413 	.word	0x3fd34413
 8011990:	7ff00000 	.word	0x7ff00000
 8011994:	080150ed 	.word	0x080150ed
 8011998:	3ff80000 	.word	0x3ff80000
 801199c:	080151a8 	.word	0x080151a8
 80119a0:	08015180 	.word	0x08015180
 80119a4:	08015171 	.word	0x08015171
 80119a8:	07f1      	lsls	r1, r6, #31
 80119aa:	d508      	bpl.n	80119be <_dtoa_r+0x34e>
 80119ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80119b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80119b4:	f7ee fe20 	bl	80005f8 <__aeabi_dmul>
 80119b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80119bc:	3501      	adds	r5, #1
 80119be:	1076      	asrs	r6, r6, #1
 80119c0:	3708      	adds	r7, #8
 80119c2:	2e00      	cmp	r6, #0
 80119c4:	d1f0      	bne.n	80119a8 <_dtoa_r+0x338>
 80119c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80119ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80119ce:	f7ee ff3d 	bl	800084c <__aeabi_ddiv>
 80119d2:	e9cd 0100 	strd	r0, r1, [sp]
 80119d6:	e01a      	b.n	8011a0e <_dtoa_r+0x39e>
 80119d8:	2502      	movs	r5, #2
 80119da:	e7a3      	b.n	8011924 <_dtoa_r+0x2b4>
 80119dc:	f000 80a0 	beq.w	8011b20 <_dtoa_r+0x4b0>
 80119e0:	f1ca 0600 	rsb	r6, sl, #0
 80119e4:	4b9f      	ldr	r3, [pc, #636]	; (8011c64 <_dtoa_r+0x5f4>)
 80119e6:	4fa0      	ldr	r7, [pc, #640]	; (8011c68 <_dtoa_r+0x5f8>)
 80119e8:	f006 020f 	and.w	r2, r6, #15
 80119ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80119f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80119f8:	f7ee fdfe 	bl	80005f8 <__aeabi_dmul>
 80119fc:	e9cd 0100 	strd	r0, r1, [sp]
 8011a00:	1136      	asrs	r6, r6, #4
 8011a02:	2300      	movs	r3, #0
 8011a04:	2502      	movs	r5, #2
 8011a06:	2e00      	cmp	r6, #0
 8011a08:	d17f      	bne.n	8011b0a <_dtoa_r+0x49a>
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d1e1      	bne.n	80119d2 <_dtoa_r+0x362>
 8011a0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	f000 8087 	beq.w	8011b24 <_dtoa_r+0x4b4>
 8011a16:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	4b93      	ldr	r3, [pc, #588]	; (8011c6c <_dtoa_r+0x5fc>)
 8011a1e:	4630      	mov	r0, r6
 8011a20:	4639      	mov	r1, r7
 8011a22:	f7ef f85b 	bl	8000adc <__aeabi_dcmplt>
 8011a26:	2800      	cmp	r0, #0
 8011a28:	d07c      	beq.n	8011b24 <_dtoa_r+0x4b4>
 8011a2a:	f1b9 0f00 	cmp.w	r9, #0
 8011a2e:	d079      	beq.n	8011b24 <_dtoa_r+0x4b4>
 8011a30:	9b02      	ldr	r3, [sp, #8]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	dd35      	ble.n	8011aa2 <_dtoa_r+0x432>
 8011a36:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011a3a:	9308      	str	r3, [sp, #32]
 8011a3c:	4639      	mov	r1, r7
 8011a3e:	2200      	movs	r2, #0
 8011a40:	4b8b      	ldr	r3, [pc, #556]	; (8011c70 <_dtoa_r+0x600>)
 8011a42:	4630      	mov	r0, r6
 8011a44:	f7ee fdd8 	bl	80005f8 <__aeabi_dmul>
 8011a48:	e9cd 0100 	strd	r0, r1, [sp]
 8011a4c:	9f02      	ldr	r7, [sp, #8]
 8011a4e:	3501      	adds	r5, #1
 8011a50:	4628      	mov	r0, r5
 8011a52:	f7ee fd67 	bl	8000524 <__aeabi_i2d>
 8011a56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a5a:	f7ee fdcd 	bl	80005f8 <__aeabi_dmul>
 8011a5e:	2200      	movs	r2, #0
 8011a60:	4b84      	ldr	r3, [pc, #528]	; (8011c74 <_dtoa_r+0x604>)
 8011a62:	f7ee fc13 	bl	800028c <__adddf3>
 8011a66:	4605      	mov	r5, r0
 8011a68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8011a6c:	2f00      	cmp	r7, #0
 8011a6e:	d15d      	bne.n	8011b2c <_dtoa_r+0x4bc>
 8011a70:	2200      	movs	r2, #0
 8011a72:	4b81      	ldr	r3, [pc, #516]	; (8011c78 <_dtoa_r+0x608>)
 8011a74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011a78:	f7ee fc06 	bl	8000288 <__aeabi_dsub>
 8011a7c:	462a      	mov	r2, r5
 8011a7e:	4633      	mov	r3, r6
 8011a80:	e9cd 0100 	strd	r0, r1, [sp]
 8011a84:	f7ef f848 	bl	8000b18 <__aeabi_dcmpgt>
 8011a88:	2800      	cmp	r0, #0
 8011a8a:	f040 8288 	bne.w	8011f9e <_dtoa_r+0x92e>
 8011a8e:	462a      	mov	r2, r5
 8011a90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011a94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011a98:	f7ef f820 	bl	8000adc <__aeabi_dcmplt>
 8011a9c:	2800      	cmp	r0, #0
 8011a9e:	f040 827c 	bne.w	8011f9a <_dtoa_r+0x92a>
 8011aa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011aa6:	e9cd 2300 	strd	r2, r3, [sp]
 8011aaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	f2c0 8150 	blt.w	8011d52 <_dtoa_r+0x6e2>
 8011ab2:	f1ba 0f0e 	cmp.w	sl, #14
 8011ab6:	f300 814c 	bgt.w	8011d52 <_dtoa_r+0x6e2>
 8011aba:	4b6a      	ldr	r3, [pc, #424]	; (8011c64 <_dtoa_r+0x5f4>)
 8011abc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011ac0:	ed93 7b00 	vldr	d7, [r3]
 8011ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011acc:	f280 80d8 	bge.w	8011c80 <_dtoa_r+0x610>
 8011ad0:	f1b9 0f00 	cmp.w	r9, #0
 8011ad4:	f300 80d4 	bgt.w	8011c80 <_dtoa_r+0x610>
 8011ad8:	f040 825e 	bne.w	8011f98 <_dtoa_r+0x928>
 8011adc:	2200      	movs	r2, #0
 8011ade:	4b66      	ldr	r3, [pc, #408]	; (8011c78 <_dtoa_r+0x608>)
 8011ae0:	ec51 0b17 	vmov	r0, r1, d7
 8011ae4:	f7ee fd88 	bl	80005f8 <__aeabi_dmul>
 8011ae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011aec:	f7ef f80a 	bl	8000b04 <__aeabi_dcmpge>
 8011af0:	464f      	mov	r7, r9
 8011af2:	464e      	mov	r6, r9
 8011af4:	2800      	cmp	r0, #0
 8011af6:	f040 8234 	bne.w	8011f62 <_dtoa_r+0x8f2>
 8011afa:	2331      	movs	r3, #49	; 0x31
 8011afc:	f10b 0501 	add.w	r5, fp, #1
 8011b00:	f88b 3000 	strb.w	r3, [fp]
 8011b04:	f10a 0a01 	add.w	sl, sl, #1
 8011b08:	e22f      	b.n	8011f6a <_dtoa_r+0x8fa>
 8011b0a:	07f2      	lsls	r2, r6, #31
 8011b0c:	d505      	bpl.n	8011b1a <_dtoa_r+0x4aa>
 8011b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011b12:	f7ee fd71 	bl	80005f8 <__aeabi_dmul>
 8011b16:	3501      	adds	r5, #1
 8011b18:	2301      	movs	r3, #1
 8011b1a:	1076      	asrs	r6, r6, #1
 8011b1c:	3708      	adds	r7, #8
 8011b1e:	e772      	b.n	8011a06 <_dtoa_r+0x396>
 8011b20:	2502      	movs	r5, #2
 8011b22:	e774      	b.n	8011a0e <_dtoa_r+0x39e>
 8011b24:	f8cd a020 	str.w	sl, [sp, #32]
 8011b28:	464f      	mov	r7, r9
 8011b2a:	e791      	b.n	8011a50 <_dtoa_r+0x3e0>
 8011b2c:	4b4d      	ldr	r3, [pc, #308]	; (8011c64 <_dtoa_r+0x5f4>)
 8011b2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011b32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8011b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d047      	beq.n	8011bcc <_dtoa_r+0x55c>
 8011b3c:	4602      	mov	r2, r0
 8011b3e:	460b      	mov	r3, r1
 8011b40:	2000      	movs	r0, #0
 8011b42:	494e      	ldr	r1, [pc, #312]	; (8011c7c <_dtoa_r+0x60c>)
 8011b44:	f7ee fe82 	bl	800084c <__aeabi_ddiv>
 8011b48:	462a      	mov	r2, r5
 8011b4a:	4633      	mov	r3, r6
 8011b4c:	f7ee fb9c 	bl	8000288 <__aeabi_dsub>
 8011b50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011b54:	465d      	mov	r5, fp
 8011b56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011b5a:	f7ee fffd 	bl	8000b58 <__aeabi_d2iz>
 8011b5e:	4606      	mov	r6, r0
 8011b60:	f7ee fce0 	bl	8000524 <__aeabi_i2d>
 8011b64:	4602      	mov	r2, r0
 8011b66:	460b      	mov	r3, r1
 8011b68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011b6c:	f7ee fb8c 	bl	8000288 <__aeabi_dsub>
 8011b70:	3630      	adds	r6, #48	; 0x30
 8011b72:	f805 6b01 	strb.w	r6, [r5], #1
 8011b76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011b7a:	e9cd 0100 	strd	r0, r1, [sp]
 8011b7e:	f7ee ffad 	bl	8000adc <__aeabi_dcmplt>
 8011b82:	2800      	cmp	r0, #0
 8011b84:	d163      	bne.n	8011c4e <_dtoa_r+0x5de>
 8011b86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b8a:	2000      	movs	r0, #0
 8011b8c:	4937      	ldr	r1, [pc, #220]	; (8011c6c <_dtoa_r+0x5fc>)
 8011b8e:	f7ee fb7b 	bl	8000288 <__aeabi_dsub>
 8011b92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011b96:	f7ee ffa1 	bl	8000adc <__aeabi_dcmplt>
 8011b9a:	2800      	cmp	r0, #0
 8011b9c:	f040 80b7 	bne.w	8011d0e <_dtoa_r+0x69e>
 8011ba0:	eba5 030b 	sub.w	r3, r5, fp
 8011ba4:	429f      	cmp	r7, r3
 8011ba6:	f77f af7c 	ble.w	8011aa2 <_dtoa_r+0x432>
 8011baa:	2200      	movs	r2, #0
 8011bac:	4b30      	ldr	r3, [pc, #192]	; (8011c70 <_dtoa_r+0x600>)
 8011bae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011bb2:	f7ee fd21 	bl	80005f8 <__aeabi_dmul>
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011bbc:	4b2c      	ldr	r3, [pc, #176]	; (8011c70 <_dtoa_r+0x600>)
 8011bbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bc2:	f7ee fd19 	bl	80005f8 <__aeabi_dmul>
 8011bc6:	e9cd 0100 	strd	r0, r1, [sp]
 8011bca:	e7c4      	b.n	8011b56 <_dtoa_r+0x4e6>
 8011bcc:	462a      	mov	r2, r5
 8011bce:	4633      	mov	r3, r6
 8011bd0:	f7ee fd12 	bl	80005f8 <__aeabi_dmul>
 8011bd4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011bd8:	eb0b 0507 	add.w	r5, fp, r7
 8011bdc:	465e      	mov	r6, fp
 8011bde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011be2:	f7ee ffb9 	bl	8000b58 <__aeabi_d2iz>
 8011be6:	4607      	mov	r7, r0
 8011be8:	f7ee fc9c 	bl	8000524 <__aeabi_i2d>
 8011bec:	3730      	adds	r7, #48	; 0x30
 8011bee:	4602      	mov	r2, r0
 8011bf0:	460b      	mov	r3, r1
 8011bf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bf6:	f7ee fb47 	bl	8000288 <__aeabi_dsub>
 8011bfa:	f806 7b01 	strb.w	r7, [r6], #1
 8011bfe:	42ae      	cmp	r6, r5
 8011c00:	e9cd 0100 	strd	r0, r1, [sp]
 8011c04:	f04f 0200 	mov.w	r2, #0
 8011c08:	d126      	bne.n	8011c58 <_dtoa_r+0x5e8>
 8011c0a:	4b1c      	ldr	r3, [pc, #112]	; (8011c7c <_dtoa_r+0x60c>)
 8011c0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011c10:	f7ee fb3c 	bl	800028c <__adddf3>
 8011c14:	4602      	mov	r2, r0
 8011c16:	460b      	mov	r3, r1
 8011c18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c1c:	f7ee ff7c 	bl	8000b18 <__aeabi_dcmpgt>
 8011c20:	2800      	cmp	r0, #0
 8011c22:	d174      	bne.n	8011d0e <_dtoa_r+0x69e>
 8011c24:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011c28:	2000      	movs	r0, #0
 8011c2a:	4914      	ldr	r1, [pc, #80]	; (8011c7c <_dtoa_r+0x60c>)
 8011c2c:	f7ee fb2c 	bl	8000288 <__aeabi_dsub>
 8011c30:	4602      	mov	r2, r0
 8011c32:	460b      	mov	r3, r1
 8011c34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c38:	f7ee ff50 	bl	8000adc <__aeabi_dcmplt>
 8011c3c:	2800      	cmp	r0, #0
 8011c3e:	f43f af30 	beq.w	8011aa2 <_dtoa_r+0x432>
 8011c42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011c46:	2b30      	cmp	r3, #48	; 0x30
 8011c48:	f105 32ff 	add.w	r2, r5, #4294967295
 8011c4c:	d002      	beq.n	8011c54 <_dtoa_r+0x5e4>
 8011c4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011c52:	e04a      	b.n	8011cea <_dtoa_r+0x67a>
 8011c54:	4615      	mov	r5, r2
 8011c56:	e7f4      	b.n	8011c42 <_dtoa_r+0x5d2>
 8011c58:	4b05      	ldr	r3, [pc, #20]	; (8011c70 <_dtoa_r+0x600>)
 8011c5a:	f7ee fccd 	bl	80005f8 <__aeabi_dmul>
 8011c5e:	e9cd 0100 	strd	r0, r1, [sp]
 8011c62:	e7bc      	b.n	8011bde <_dtoa_r+0x56e>
 8011c64:	080151a8 	.word	0x080151a8
 8011c68:	08015180 	.word	0x08015180
 8011c6c:	3ff00000 	.word	0x3ff00000
 8011c70:	40240000 	.word	0x40240000
 8011c74:	401c0000 	.word	0x401c0000
 8011c78:	40140000 	.word	0x40140000
 8011c7c:	3fe00000 	.word	0x3fe00000
 8011c80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011c84:	465d      	mov	r5, fp
 8011c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011c8a:	4630      	mov	r0, r6
 8011c8c:	4639      	mov	r1, r7
 8011c8e:	f7ee fddd 	bl	800084c <__aeabi_ddiv>
 8011c92:	f7ee ff61 	bl	8000b58 <__aeabi_d2iz>
 8011c96:	4680      	mov	r8, r0
 8011c98:	f7ee fc44 	bl	8000524 <__aeabi_i2d>
 8011c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ca0:	f7ee fcaa 	bl	80005f8 <__aeabi_dmul>
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	460b      	mov	r3, r1
 8011ca8:	4630      	mov	r0, r6
 8011caa:	4639      	mov	r1, r7
 8011cac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8011cb0:	f7ee faea 	bl	8000288 <__aeabi_dsub>
 8011cb4:	f805 6b01 	strb.w	r6, [r5], #1
 8011cb8:	eba5 060b 	sub.w	r6, r5, fp
 8011cbc:	45b1      	cmp	r9, r6
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	460b      	mov	r3, r1
 8011cc2:	d139      	bne.n	8011d38 <_dtoa_r+0x6c8>
 8011cc4:	f7ee fae2 	bl	800028c <__adddf3>
 8011cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ccc:	4606      	mov	r6, r0
 8011cce:	460f      	mov	r7, r1
 8011cd0:	f7ee ff22 	bl	8000b18 <__aeabi_dcmpgt>
 8011cd4:	b9c8      	cbnz	r0, 8011d0a <_dtoa_r+0x69a>
 8011cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011cda:	4630      	mov	r0, r6
 8011cdc:	4639      	mov	r1, r7
 8011cde:	f7ee fef3 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ce2:	b110      	cbz	r0, 8011cea <_dtoa_r+0x67a>
 8011ce4:	f018 0f01 	tst.w	r8, #1
 8011ce8:	d10f      	bne.n	8011d0a <_dtoa_r+0x69a>
 8011cea:	9904      	ldr	r1, [sp, #16]
 8011cec:	4620      	mov	r0, r4
 8011cee:	f000 fdf9 	bl	80128e4 <_Bfree>
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011cf6:	702b      	strb	r3, [r5, #0]
 8011cf8:	f10a 0301 	add.w	r3, sl, #1
 8011cfc:	6013      	str	r3, [r2, #0]
 8011cfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	f000 8241 	beq.w	8012188 <_dtoa_r+0xb18>
 8011d06:	601d      	str	r5, [r3, #0]
 8011d08:	e23e      	b.n	8012188 <_dtoa_r+0xb18>
 8011d0a:	f8cd a020 	str.w	sl, [sp, #32]
 8011d0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011d12:	2a39      	cmp	r2, #57	; 0x39
 8011d14:	f105 33ff 	add.w	r3, r5, #4294967295
 8011d18:	d108      	bne.n	8011d2c <_dtoa_r+0x6bc>
 8011d1a:	459b      	cmp	fp, r3
 8011d1c:	d10a      	bne.n	8011d34 <_dtoa_r+0x6c4>
 8011d1e:	9b08      	ldr	r3, [sp, #32]
 8011d20:	3301      	adds	r3, #1
 8011d22:	9308      	str	r3, [sp, #32]
 8011d24:	2330      	movs	r3, #48	; 0x30
 8011d26:	f88b 3000 	strb.w	r3, [fp]
 8011d2a:	465b      	mov	r3, fp
 8011d2c:	781a      	ldrb	r2, [r3, #0]
 8011d2e:	3201      	adds	r2, #1
 8011d30:	701a      	strb	r2, [r3, #0]
 8011d32:	e78c      	b.n	8011c4e <_dtoa_r+0x5de>
 8011d34:	461d      	mov	r5, r3
 8011d36:	e7ea      	b.n	8011d0e <_dtoa_r+0x69e>
 8011d38:	2200      	movs	r2, #0
 8011d3a:	4b9b      	ldr	r3, [pc, #620]	; (8011fa8 <_dtoa_r+0x938>)
 8011d3c:	f7ee fc5c 	bl	80005f8 <__aeabi_dmul>
 8011d40:	2200      	movs	r2, #0
 8011d42:	2300      	movs	r3, #0
 8011d44:	4606      	mov	r6, r0
 8011d46:	460f      	mov	r7, r1
 8011d48:	f7ee febe 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d4c:	2800      	cmp	r0, #0
 8011d4e:	d09a      	beq.n	8011c86 <_dtoa_r+0x616>
 8011d50:	e7cb      	b.n	8011cea <_dtoa_r+0x67a>
 8011d52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d54:	2a00      	cmp	r2, #0
 8011d56:	f000 808b 	beq.w	8011e70 <_dtoa_r+0x800>
 8011d5a:	9a06      	ldr	r2, [sp, #24]
 8011d5c:	2a01      	cmp	r2, #1
 8011d5e:	dc6e      	bgt.n	8011e3e <_dtoa_r+0x7ce>
 8011d60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011d62:	2a00      	cmp	r2, #0
 8011d64:	d067      	beq.n	8011e36 <_dtoa_r+0x7c6>
 8011d66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011d6a:	9f07      	ldr	r7, [sp, #28]
 8011d6c:	9d05      	ldr	r5, [sp, #20]
 8011d6e:	9a05      	ldr	r2, [sp, #20]
 8011d70:	2101      	movs	r1, #1
 8011d72:	441a      	add	r2, r3
 8011d74:	4620      	mov	r0, r4
 8011d76:	9205      	str	r2, [sp, #20]
 8011d78:	4498      	add	r8, r3
 8011d7a:	f000 fe91 	bl	8012aa0 <__i2b>
 8011d7e:	4606      	mov	r6, r0
 8011d80:	2d00      	cmp	r5, #0
 8011d82:	dd0c      	ble.n	8011d9e <_dtoa_r+0x72e>
 8011d84:	f1b8 0f00 	cmp.w	r8, #0
 8011d88:	dd09      	ble.n	8011d9e <_dtoa_r+0x72e>
 8011d8a:	4545      	cmp	r5, r8
 8011d8c:	9a05      	ldr	r2, [sp, #20]
 8011d8e:	462b      	mov	r3, r5
 8011d90:	bfa8      	it	ge
 8011d92:	4643      	movge	r3, r8
 8011d94:	1ad2      	subs	r2, r2, r3
 8011d96:	9205      	str	r2, [sp, #20]
 8011d98:	1aed      	subs	r5, r5, r3
 8011d9a:	eba8 0803 	sub.w	r8, r8, r3
 8011d9e:	9b07      	ldr	r3, [sp, #28]
 8011da0:	b1eb      	cbz	r3, 8011dde <_dtoa_r+0x76e>
 8011da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d067      	beq.n	8011e78 <_dtoa_r+0x808>
 8011da8:	b18f      	cbz	r7, 8011dce <_dtoa_r+0x75e>
 8011daa:	4631      	mov	r1, r6
 8011dac:	463a      	mov	r2, r7
 8011dae:	4620      	mov	r0, r4
 8011db0:	f000 ff16 	bl	8012be0 <__pow5mult>
 8011db4:	9a04      	ldr	r2, [sp, #16]
 8011db6:	4601      	mov	r1, r0
 8011db8:	4606      	mov	r6, r0
 8011dba:	4620      	mov	r0, r4
 8011dbc:	f000 fe79 	bl	8012ab2 <__multiply>
 8011dc0:	9904      	ldr	r1, [sp, #16]
 8011dc2:	9008      	str	r0, [sp, #32]
 8011dc4:	4620      	mov	r0, r4
 8011dc6:	f000 fd8d 	bl	80128e4 <_Bfree>
 8011dca:	9b08      	ldr	r3, [sp, #32]
 8011dcc:	9304      	str	r3, [sp, #16]
 8011dce:	9b07      	ldr	r3, [sp, #28]
 8011dd0:	1bda      	subs	r2, r3, r7
 8011dd2:	d004      	beq.n	8011dde <_dtoa_r+0x76e>
 8011dd4:	9904      	ldr	r1, [sp, #16]
 8011dd6:	4620      	mov	r0, r4
 8011dd8:	f000 ff02 	bl	8012be0 <__pow5mult>
 8011ddc:	9004      	str	r0, [sp, #16]
 8011dde:	2101      	movs	r1, #1
 8011de0:	4620      	mov	r0, r4
 8011de2:	f000 fe5d 	bl	8012aa0 <__i2b>
 8011de6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011de8:	4607      	mov	r7, r0
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	f000 81d0 	beq.w	8012190 <_dtoa_r+0xb20>
 8011df0:	461a      	mov	r2, r3
 8011df2:	4601      	mov	r1, r0
 8011df4:	4620      	mov	r0, r4
 8011df6:	f000 fef3 	bl	8012be0 <__pow5mult>
 8011dfa:	9b06      	ldr	r3, [sp, #24]
 8011dfc:	2b01      	cmp	r3, #1
 8011dfe:	4607      	mov	r7, r0
 8011e00:	dc40      	bgt.n	8011e84 <_dtoa_r+0x814>
 8011e02:	9b00      	ldr	r3, [sp, #0]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d139      	bne.n	8011e7c <_dtoa_r+0x80c>
 8011e08:	9b01      	ldr	r3, [sp, #4]
 8011e0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d136      	bne.n	8011e80 <_dtoa_r+0x810>
 8011e12:	9b01      	ldr	r3, [sp, #4]
 8011e14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011e18:	0d1b      	lsrs	r3, r3, #20
 8011e1a:	051b      	lsls	r3, r3, #20
 8011e1c:	b12b      	cbz	r3, 8011e2a <_dtoa_r+0x7ba>
 8011e1e:	9b05      	ldr	r3, [sp, #20]
 8011e20:	3301      	adds	r3, #1
 8011e22:	9305      	str	r3, [sp, #20]
 8011e24:	f108 0801 	add.w	r8, r8, #1
 8011e28:	2301      	movs	r3, #1
 8011e2a:	9307      	str	r3, [sp, #28]
 8011e2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d12a      	bne.n	8011e88 <_dtoa_r+0x818>
 8011e32:	2001      	movs	r0, #1
 8011e34:	e030      	b.n	8011e98 <_dtoa_r+0x828>
 8011e36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011e38:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011e3c:	e795      	b.n	8011d6a <_dtoa_r+0x6fa>
 8011e3e:	9b07      	ldr	r3, [sp, #28]
 8011e40:	f109 37ff 	add.w	r7, r9, #4294967295
 8011e44:	42bb      	cmp	r3, r7
 8011e46:	bfbf      	itttt	lt
 8011e48:	9b07      	ldrlt	r3, [sp, #28]
 8011e4a:	9707      	strlt	r7, [sp, #28]
 8011e4c:	1afa      	sublt	r2, r7, r3
 8011e4e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011e50:	bfbb      	ittet	lt
 8011e52:	189b      	addlt	r3, r3, r2
 8011e54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011e56:	1bdf      	subge	r7, r3, r7
 8011e58:	2700      	movlt	r7, #0
 8011e5a:	f1b9 0f00 	cmp.w	r9, #0
 8011e5e:	bfb5      	itete	lt
 8011e60:	9b05      	ldrlt	r3, [sp, #20]
 8011e62:	9d05      	ldrge	r5, [sp, #20]
 8011e64:	eba3 0509 	sublt.w	r5, r3, r9
 8011e68:	464b      	movge	r3, r9
 8011e6a:	bfb8      	it	lt
 8011e6c:	2300      	movlt	r3, #0
 8011e6e:	e77e      	b.n	8011d6e <_dtoa_r+0x6fe>
 8011e70:	9f07      	ldr	r7, [sp, #28]
 8011e72:	9d05      	ldr	r5, [sp, #20]
 8011e74:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011e76:	e783      	b.n	8011d80 <_dtoa_r+0x710>
 8011e78:	9a07      	ldr	r2, [sp, #28]
 8011e7a:	e7ab      	b.n	8011dd4 <_dtoa_r+0x764>
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	e7d4      	b.n	8011e2a <_dtoa_r+0x7ba>
 8011e80:	9b00      	ldr	r3, [sp, #0]
 8011e82:	e7d2      	b.n	8011e2a <_dtoa_r+0x7ba>
 8011e84:	2300      	movs	r3, #0
 8011e86:	9307      	str	r3, [sp, #28]
 8011e88:	693b      	ldr	r3, [r7, #16]
 8011e8a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8011e8e:	6918      	ldr	r0, [r3, #16]
 8011e90:	f000 fdb8 	bl	8012a04 <__hi0bits>
 8011e94:	f1c0 0020 	rsb	r0, r0, #32
 8011e98:	4440      	add	r0, r8
 8011e9a:	f010 001f 	ands.w	r0, r0, #31
 8011e9e:	d047      	beq.n	8011f30 <_dtoa_r+0x8c0>
 8011ea0:	f1c0 0320 	rsb	r3, r0, #32
 8011ea4:	2b04      	cmp	r3, #4
 8011ea6:	dd3b      	ble.n	8011f20 <_dtoa_r+0x8b0>
 8011ea8:	9b05      	ldr	r3, [sp, #20]
 8011eaa:	f1c0 001c 	rsb	r0, r0, #28
 8011eae:	4403      	add	r3, r0
 8011eb0:	9305      	str	r3, [sp, #20]
 8011eb2:	4405      	add	r5, r0
 8011eb4:	4480      	add	r8, r0
 8011eb6:	9b05      	ldr	r3, [sp, #20]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	dd05      	ble.n	8011ec8 <_dtoa_r+0x858>
 8011ebc:	461a      	mov	r2, r3
 8011ebe:	9904      	ldr	r1, [sp, #16]
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	f000 fedb 	bl	8012c7c <__lshift>
 8011ec6:	9004      	str	r0, [sp, #16]
 8011ec8:	f1b8 0f00 	cmp.w	r8, #0
 8011ecc:	dd05      	ble.n	8011eda <_dtoa_r+0x86a>
 8011ece:	4639      	mov	r1, r7
 8011ed0:	4642      	mov	r2, r8
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	f000 fed2 	bl	8012c7c <__lshift>
 8011ed8:	4607      	mov	r7, r0
 8011eda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011edc:	b353      	cbz	r3, 8011f34 <_dtoa_r+0x8c4>
 8011ede:	4639      	mov	r1, r7
 8011ee0:	9804      	ldr	r0, [sp, #16]
 8011ee2:	f000 ff1f 	bl	8012d24 <__mcmp>
 8011ee6:	2800      	cmp	r0, #0
 8011ee8:	da24      	bge.n	8011f34 <_dtoa_r+0x8c4>
 8011eea:	2300      	movs	r3, #0
 8011eec:	220a      	movs	r2, #10
 8011eee:	9904      	ldr	r1, [sp, #16]
 8011ef0:	4620      	mov	r0, r4
 8011ef2:	f000 fd0e 	bl	8012912 <__multadd>
 8011ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ef8:	9004      	str	r0, [sp, #16]
 8011efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	f000 814d 	beq.w	801219e <_dtoa_r+0xb2e>
 8011f04:	2300      	movs	r3, #0
 8011f06:	4631      	mov	r1, r6
 8011f08:	220a      	movs	r2, #10
 8011f0a:	4620      	mov	r0, r4
 8011f0c:	f000 fd01 	bl	8012912 <__multadd>
 8011f10:	9b02      	ldr	r3, [sp, #8]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	4606      	mov	r6, r0
 8011f16:	dc4f      	bgt.n	8011fb8 <_dtoa_r+0x948>
 8011f18:	9b06      	ldr	r3, [sp, #24]
 8011f1a:	2b02      	cmp	r3, #2
 8011f1c:	dd4c      	ble.n	8011fb8 <_dtoa_r+0x948>
 8011f1e:	e011      	b.n	8011f44 <_dtoa_r+0x8d4>
 8011f20:	d0c9      	beq.n	8011eb6 <_dtoa_r+0x846>
 8011f22:	9a05      	ldr	r2, [sp, #20]
 8011f24:	331c      	adds	r3, #28
 8011f26:	441a      	add	r2, r3
 8011f28:	9205      	str	r2, [sp, #20]
 8011f2a:	441d      	add	r5, r3
 8011f2c:	4498      	add	r8, r3
 8011f2e:	e7c2      	b.n	8011eb6 <_dtoa_r+0x846>
 8011f30:	4603      	mov	r3, r0
 8011f32:	e7f6      	b.n	8011f22 <_dtoa_r+0x8b2>
 8011f34:	f1b9 0f00 	cmp.w	r9, #0
 8011f38:	dc38      	bgt.n	8011fac <_dtoa_r+0x93c>
 8011f3a:	9b06      	ldr	r3, [sp, #24]
 8011f3c:	2b02      	cmp	r3, #2
 8011f3e:	dd35      	ble.n	8011fac <_dtoa_r+0x93c>
 8011f40:	f8cd 9008 	str.w	r9, [sp, #8]
 8011f44:	9b02      	ldr	r3, [sp, #8]
 8011f46:	b963      	cbnz	r3, 8011f62 <_dtoa_r+0x8f2>
 8011f48:	4639      	mov	r1, r7
 8011f4a:	2205      	movs	r2, #5
 8011f4c:	4620      	mov	r0, r4
 8011f4e:	f000 fce0 	bl	8012912 <__multadd>
 8011f52:	4601      	mov	r1, r0
 8011f54:	4607      	mov	r7, r0
 8011f56:	9804      	ldr	r0, [sp, #16]
 8011f58:	f000 fee4 	bl	8012d24 <__mcmp>
 8011f5c:	2800      	cmp	r0, #0
 8011f5e:	f73f adcc 	bgt.w	8011afa <_dtoa_r+0x48a>
 8011f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f64:	465d      	mov	r5, fp
 8011f66:	ea6f 0a03 	mvn.w	sl, r3
 8011f6a:	f04f 0900 	mov.w	r9, #0
 8011f6e:	4639      	mov	r1, r7
 8011f70:	4620      	mov	r0, r4
 8011f72:	f000 fcb7 	bl	80128e4 <_Bfree>
 8011f76:	2e00      	cmp	r6, #0
 8011f78:	f43f aeb7 	beq.w	8011cea <_dtoa_r+0x67a>
 8011f7c:	f1b9 0f00 	cmp.w	r9, #0
 8011f80:	d005      	beq.n	8011f8e <_dtoa_r+0x91e>
 8011f82:	45b1      	cmp	r9, r6
 8011f84:	d003      	beq.n	8011f8e <_dtoa_r+0x91e>
 8011f86:	4649      	mov	r1, r9
 8011f88:	4620      	mov	r0, r4
 8011f8a:	f000 fcab 	bl	80128e4 <_Bfree>
 8011f8e:	4631      	mov	r1, r6
 8011f90:	4620      	mov	r0, r4
 8011f92:	f000 fca7 	bl	80128e4 <_Bfree>
 8011f96:	e6a8      	b.n	8011cea <_dtoa_r+0x67a>
 8011f98:	2700      	movs	r7, #0
 8011f9a:	463e      	mov	r6, r7
 8011f9c:	e7e1      	b.n	8011f62 <_dtoa_r+0x8f2>
 8011f9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011fa2:	463e      	mov	r6, r7
 8011fa4:	e5a9      	b.n	8011afa <_dtoa_r+0x48a>
 8011fa6:	bf00      	nop
 8011fa8:	40240000 	.word	0x40240000
 8011fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fae:	f8cd 9008 	str.w	r9, [sp, #8]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	f000 80fa 	beq.w	80121ac <_dtoa_r+0xb3c>
 8011fb8:	2d00      	cmp	r5, #0
 8011fba:	dd05      	ble.n	8011fc8 <_dtoa_r+0x958>
 8011fbc:	4631      	mov	r1, r6
 8011fbe:	462a      	mov	r2, r5
 8011fc0:	4620      	mov	r0, r4
 8011fc2:	f000 fe5b 	bl	8012c7c <__lshift>
 8011fc6:	4606      	mov	r6, r0
 8011fc8:	9b07      	ldr	r3, [sp, #28]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d04c      	beq.n	8012068 <_dtoa_r+0x9f8>
 8011fce:	6871      	ldr	r1, [r6, #4]
 8011fd0:	4620      	mov	r0, r4
 8011fd2:	f000 fc53 	bl	801287c <_Balloc>
 8011fd6:	6932      	ldr	r2, [r6, #16]
 8011fd8:	3202      	adds	r2, #2
 8011fda:	4605      	mov	r5, r0
 8011fdc:	0092      	lsls	r2, r2, #2
 8011fde:	f106 010c 	add.w	r1, r6, #12
 8011fe2:	300c      	adds	r0, #12
 8011fe4:	f7fd fca4 	bl	800f930 <memcpy>
 8011fe8:	2201      	movs	r2, #1
 8011fea:	4629      	mov	r1, r5
 8011fec:	4620      	mov	r0, r4
 8011fee:	f000 fe45 	bl	8012c7c <__lshift>
 8011ff2:	9b00      	ldr	r3, [sp, #0]
 8011ff4:	f8cd b014 	str.w	fp, [sp, #20]
 8011ff8:	f003 0301 	and.w	r3, r3, #1
 8011ffc:	46b1      	mov	r9, r6
 8011ffe:	9307      	str	r3, [sp, #28]
 8012000:	4606      	mov	r6, r0
 8012002:	4639      	mov	r1, r7
 8012004:	9804      	ldr	r0, [sp, #16]
 8012006:	f7ff faa5 	bl	8011554 <quorem>
 801200a:	4649      	mov	r1, r9
 801200c:	4605      	mov	r5, r0
 801200e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012012:	9804      	ldr	r0, [sp, #16]
 8012014:	f000 fe86 	bl	8012d24 <__mcmp>
 8012018:	4632      	mov	r2, r6
 801201a:	9000      	str	r0, [sp, #0]
 801201c:	4639      	mov	r1, r7
 801201e:	4620      	mov	r0, r4
 8012020:	f000 fe9a 	bl	8012d58 <__mdiff>
 8012024:	68c3      	ldr	r3, [r0, #12]
 8012026:	4602      	mov	r2, r0
 8012028:	bb03      	cbnz	r3, 801206c <_dtoa_r+0x9fc>
 801202a:	4601      	mov	r1, r0
 801202c:	9008      	str	r0, [sp, #32]
 801202e:	9804      	ldr	r0, [sp, #16]
 8012030:	f000 fe78 	bl	8012d24 <__mcmp>
 8012034:	9a08      	ldr	r2, [sp, #32]
 8012036:	4603      	mov	r3, r0
 8012038:	4611      	mov	r1, r2
 801203a:	4620      	mov	r0, r4
 801203c:	9308      	str	r3, [sp, #32]
 801203e:	f000 fc51 	bl	80128e4 <_Bfree>
 8012042:	9b08      	ldr	r3, [sp, #32]
 8012044:	b9a3      	cbnz	r3, 8012070 <_dtoa_r+0xa00>
 8012046:	9a06      	ldr	r2, [sp, #24]
 8012048:	b992      	cbnz	r2, 8012070 <_dtoa_r+0xa00>
 801204a:	9a07      	ldr	r2, [sp, #28]
 801204c:	b982      	cbnz	r2, 8012070 <_dtoa_r+0xa00>
 801204e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012052:	d029      	beq.n	80120a8 <_dtoa_r+0xa38>
 8012054:	9b00      	ldr	r3, [sp, #0]
 8012056:	2b00      	cmp	r3, #0
 8012058:	dd01      	ble.n	801205e <_dtoa_r+0x9ee>
 801205a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801205e:	9b05      	ldr	r3, [sp, #20]
 8012060:	1c5d      	adds	r5, r3, #1
 8012062:	f883 8000 	strb.w	r8, [r3]
 8012066:	e782      	b.n	8011f6e <_dtoa_r+0x8fe>
 8012068:	4630      	mov	r0, r6
 801206a:	e7c2      	b.n	8011ff2 <_dtoa_r+0x982>
 801206c:	2301      	movs	r3, #1
 801206e:	e7e3      	b.n	8012038 <_dtoa_r+0x9c8>
 8012070:	9a00      	ldr	r2, [sp, #0]
 8012072:	2a00      	cmp	r2, #0
 8012074:	db04      	blt.n	8012080 <_dtoa_r+0xa10>
 8012076:	d125      	bne.n	80120c4 <_dtoa_r+0xa54>
 8012078:	9a06      	ldr	r2, [sp, #24]
 801207a:	bb1a      	cbnz	r2, 80120c4 <_dtoa_r+0xa54>
 801207c:	9a07      	ldr	r2, [sp, #28]
 801207e:	bb0a      	cbnz	r2, 80120c4 <_dtoa_r+0xa54>
 8012080:	2b00      	cmp	r3, #0
 8012082:	ddec      	ble.n	801205e <_dtoa_r+0x9ee>
 8012084:	2201      	movs	r2, #1
 8012086:	9904      	ldr	r1, [sp, #16]
 8012088:	4620      	mov	r0, r4
 801208a:	f000 fdf7 	bl	8012c7c <__lshift>
 801208e:	4639      	mov	r1, r7
 8012090:	9004      	str	r0, [sp, #16]
 8012092:	f000 fe47 	bl	8012d24 <__mcmp>
 8012096:	2800      	cmp	r0, #0
 8012098:	dc03      	bgt.n	80120a2 <_dtoa_r+0xa32>
 801209a:	d1e0      	bne.n	801205e <_dtoa_r+0x9ee>
 801209c:	f018 0f01 	tst.w	r8, #1
 80120a0:	d0dd      	beq.n	801205e <_dtoa_r+0x9ee>
 80120a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80120a6:	d1d8      	bne.n	801205a <_dtoa_r+0x9ea>
 80120a8:	9b05      	ldr	r3, [sp, #20]
 80120aa:	9a05      	ldr	r2, [sp, #20]
 80120ac:	1c5d      	adds	r5, r3, #1
 80120ae:	2339      	movs	r3, #57	; 0x39
 80120b0:	7013      	strb	r3, [r2, #0]
 80120b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80120b6:	2b39      	cmp	r3, #57	; 0x39
 80120b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80120bc:	d04f      	beq.n	801215e <_dtoa_r+0xaee>
 80120be:	3301      	adds	r3, #1
 80120c0:	7013      	strb	r3, [r2, #0]
 80120c2:	e754      	b.n	8011f6e <_dtoa_r+0x8fe>
 80120c4:	9a05      	ldr	r2, [sp, #20]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	f102 0501 	add.w	r5, r2, #1
 80120cc:	dd06      	ble.n	80120dc <_dtoa_r+0xa6c>
 80120ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80120d2:	d0e9      	beq.n	80120a8 <_dtoa_r+0xa38>
 80120d4:	f108 0801 	add.w	r8, r8, #1
 80120d8:	9b05      	ldr	r3, [sp, #20]
 80120da:	e7c2      	b.n	8012062 <_dtoa_r+0x9f2>
 80120dc:	9a02      	ldr	r2, [sp, #8]
 80120de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80120e2:	eba5 030b 	sub.w	r3, r5, fp
 80120e6:	4293      	cmp	r3, r2
 80120e8:	d021      	beq.n	801212e <_dtoa_r+0xabe>
 80120ea:	2300      	movs	r3, #0
 80120ec:	220a      	movs	r2, #10
 80120ee:	9904      	ldr	r1, [sp, #16]
 80120f0:	4620      	mov	r0, r4
 80120f2:	f000 fc0e 	bl	8012912 <__multadd>
 80120f6:	45b1      	cmp	r9, r6
 80120f8:	9004      	str	r0, [sp, #16]
 80120fa:	f04f 0300 	mov.w	r3, #0
 80120fe:	f04f 020a 	mov.w	r2, #10
 8012102:	4649      	mov	r1, r9
 8012104:	4620      	mov	r0, r4
 8012106:	d105      	bne.n	8012114 <_dtoa_r+0xaa4>
 8012108:	f000 fc03 	bl	8012912 <__multadd>
 801210c:	4681      	mov	r9, r0
 801210e:	4606      	mov	r6, r0
 8012110:	9505      	str	r5, [sp, #20]
 8012112:	e776      	b.n	8012002 <_dtoa_r+0x992>
 8012114:	f000 fbfd 	bl	8012912 <__multadd>
 8012118:	4631      	mov	r1, r6
 801211a:	4681      	mov	r9, r0
 801211c:	2300      	movs	r3, #0
 801211e:	220a      	movs	r2, #10
 8012120:	4620      	mov	r0, r4
 8012122:	f000 fbf6 	bl	8012912 <__multadd>
 8012126:	4606      	mov	r6, r0
 8012128:	e7f2      	b.n	8012110 <_dtoa_r+0xaa0>
 801212a:	f04f 0900 	mov.w	r9, #0
 801212e:	2201      	movs	r2, #1
 8012130:	9904      	ldr	r1, [sp, #16]
 8012132:	4620      	mov	r0, r4
 8012134:	f000 fda2 	bl	8012c7c <__lshift>
 8012138:	4639      	mov	r1, r7
 801213a:	9004      	str	r0, [sp, #16]
 801213c:	f000 fdf2 	bl	8012d24 <__mcmp>
 8012140:	2800      	cmp	r0, #0
 8012142:	dcb6      	bgt.n	80120b2 <_dtoa_r+0xa42>
 8012144:	d102      	bne.n	801214c <_dtoa_r+0xadc>
 8012146:	f018 0f01 	tst.w	r8, #1
 801214a:	d1b2      	bne.n	80120b2 <_dtoa_r+0xa42>
 801214c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012150:	2b30      	cmp	r3, #48	; 0x30
 8012152:	f105 32ff 	add.w	r2, r5, #4294967295
 8012156:	f47f af0a 	bne.w	8011f6e <_dtoa_r+0x8fe>
 801215a:	4615      	mov	r5, r2
 801215c:	e7f6      	b.n	801214c <_dtoa_r+0xadc>
 801215e:	4593      	cmp	fp, r2
 8012160:	d105      	bne.n	801216e <_dtoa_r+0xafe>
 8012162:	2331      	movs	r3, #49	; 0x31
 8012164:	f10a 0a01 	add.w	sl, sl, #1
 8012168:	f88b 3000 	strb.w	r3, [fp]
 801216c:	e6ff      	b.n	8011f6e <_dtoa_r+0x8fe>
 801216e:	4615      	mov	r5, r2
 8012170:	e79f      	b.n	80120b2 <_dtoa_r+0xa42>
 8012172:	f8df b064 	ldr.w	fp, [pc, #100]	; 80121d8 <_dtoa_r+0xb68>
 8012176:	e007      	b.n	8012188 <_dtoa_r+0xb18>
 8012178:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801217a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80121dc <_dtoa_r+0xb6c>
 801217e:	b11b      	cbz	r3, 8012188 <_dtoa_r+0xb18>
 8012180:	f10b 0308 	add.w	r3, fp, #8
 8012184:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012186:	6013      	str	r3, [r2, #0]
 8012188:	4658      	mov	r0, fp
 801218a:	b017      	add	sp, #92	; 0x5c
 801218c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012190:	9b06      	ldr	r3, [sp, #24]
 8012192:	2b01      	cmp	r3, #1
 8012194:	f77f ae35 	ble.w	8011e02 <_dtoa_r+0x792>
 8012198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801219a:	9307      	str	r3, [sp, #28]
 801219c:	e649      	b.n	8011e32 <_dtoa_r+0x7c2>
 801219e:	9b02      	ldr	r3, [sp, #8]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	dc03      	bgt.n	80121ac <_dtoa_r+0xb3c>
 80121a4:	9b06      	ldr	r3, [sp, #24]
 80121a6:	2b02      	cmp	r3, #2
 80121a8:	f73f aecc 	bgt.w	8011f44 <_dtoa_r+0x8d4>
 80121ac:	465d      	mov	r5, fp
 80121ae:	4639      	mov	r1, r7
 80121b0:	9804      	ldr	r0, [sp, #16]
 80121b2:	f7ff f9cf 	bl	8011554 <quorem>
 80121b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80121ba:	f805 8b01 	strb.w	r8, [r5], #1
 80121be:	9a02      	ldr	r2, [sp, #8]
 80121c0:	eba5 030b 	sub.w	r3, r5, fp
 80121c4:	429a      	cmp	r2, r3
 80121c6:	ddb0      	ble.n	801212a <_dtoa_r+0xaba>
 80121c8:	2300      	movs	r3, #0
 80121ca:	220a      	movs	r2, #10
 80121cc:	9904      	ldr	r1, [sp, #16]
 80121ce:	4620      	mov	r0, r4
 80121d0:	f000 fb9f 	bl	8012912 <__multadd>
 80121d4:	9004      	str	r0, [sp, #16]
 80121d6:	e7ea      	b.n	80121ae <_dtoa_r+0xb3e>
 80121d8:	080150ec 	.word	0x080150ec
 80121dc:	08015168 	.word	0x08015168

080121e0 <rshift>:
 80121e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121e2:	6906      	ldr	r6, [r0, #16]
 80121e4:	114b      	asrs	r3, r1, #5
 80121e6:	429e      	cmp	r6, r3
 80121e8:	f100 0414 	add.w	r4, r0, #20
 80121ec:	dd30      	ble.n	8012250 <rshift+0x70>
 80121ee:	f011 011f 	ands.w	r1, r1, #31
 80121f2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80121f6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80121fa:	d108      	bne.n	801220e <rshift+0x2e>
 80121fc:	4621      	mov	r1, r4
 80121fe:	42b2      	cmp	r2, r6
 8012200:	460b      	mov	r3, r1
 8012202:	d211      	bcs.n	8012228 <rshift+0x48>
 8012204:	f852 3b04 	ldr.w	r3, [r2], #4
 8012208:	f841 3b04 	str.w	r3, [r1], #4
 801220c:	e7f7      	b.n	80121fe <rshift+0x1e>
 801220e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8012212:	f1c1 0c20 	rsb	ip, r1, #32
 8012216:	40cd      	lsrs	r5, r1
 8012218:	3204      	adds	r2, #4
 801221a:	4623      	mov	r3, r4
 801221c:	42b2      	cmp	r2, r6
 801221e:	4617      	mov	r7, r2
 8012220:	d30c      	bcc.n	801223c <rshift+0x5c>
 8012222:	601d      	str	r5, [r3, #0]
 8012224:	b105      	cbz	r5, 8012228 <rshift+0x48>
 8012226:	3304      	adds	r3, #4
 8012228:	1b1a      	subs	r2, r3, r4
 801222a:	42a3      	cmp	r3, r4
 801222c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012230:	bf08      	it	eq
 8012232:	2300      	moveq	r3, #0
 8012234:	6102      	str	r2, [r0, #16]
 8012236:	bf08      	it	eq
 8012238:	6143      	streq	r3, [r0, #20]
 801223a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801223c:	683f      	ldr	r7, [r7, #0]
 801223e:	fa07 f70c 	lsl.w	r7, r7, ip
 8012242:	433d      	orrs	r5, r7
 8012244:	f843 5b04 	str.w	r5, [r3], #4
 8012248:	f852 5b04 	ldr.w	r5, [r2], #4
 801224c:	40cd      	lsrs	r5, r1
 801224e:	e7e5      	b.n	801221c <rshift+0x3c>
 8012250:	4623      	mov	r3, r4
 8012252:	e7e9      	b.n	8012228 <rshift+0x48>

08012254 <__hexdig_fun>:
 8012254:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012258:	2b09      	cmp	r3, #9
 801225a:	d802      	bhi.n	8012262 <__hexdig_fun+0xe>
 801225c:	3820      	subs	r0, #32
 801225e:	b2c0      	uxtb	r0, r0
 8012260:	4770      	bx	lr
 8012262:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012266:	2b05      	cmp	r3, #5
 8012268:	d801      	bhi.n	801226e <__hexdig_fun+0x1a>
 801226a:	3847      	subs	r0, #71	; 0x47
 801226c:	e7f7      	b.n	801225e <__hexdig_fun+0xa>
 801226e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012272:	2b05      	cmp	r3, #5
 8012274:	d801      	bhi.n	801227a <__hexdig_fun+0x26>
 8012276:	3827      	subs	r0, #39	; 0x27
 8012278:	e7f1      	b.n	801225e <__hexdig_fun+0xa>
 801227a:	2000      	movs	r0, #0
 801227c:	4770      	bx	lr

0801227e <__gethex>:
 801227e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012282:	b08b      	sub	sp, #44	; 0x2c
 8012284:	468a      	mov	sl, r1
 8012286:	9002      	str	r0, [sp, #8]
 8012288:	9816      	ldr	r0, [sp, #88]	; 0x58
 801228a:	9306      	str	r3, [sp, #24]
 801228c:	4690      	mov	r8, r2
 801228e:	f000 fad0 	bl	8012832 <__localeconv_l>
 8012292:	6803      	ldr	r3, [r0, #0]
 8012294:	9303      	str	r3, [sp, #12]
 8012296:	4618      	mov	r0, r3
 8012298:	f7ed ff9a 	bl	80001d0 <strlen>
 801229c:	9b03      	ldr	r3, [sp, #12]
 801229e:	9001      	str	r0, [sp, #4]
 80122a0:	4403      	add	r3, r0
 80122a2:	f04f 0b00 	mov.w	fp, #0
 80122a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80122aa:	9307      	str	r3, [sp, #28]
 80122ac:	f8da 3000 	ldr.w	r3, [sl]
 80122b0:	3302      	adds	r3, #2
 80122b2:	461f      	mov	r7, r3
 80122b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80122b8:	2830      	cmp	r0, #48	; 0x30
 80122ba:	d06c      	beq.n	8012396 <__gethex+0x118>
 80122bc:	f7ff ffca 	bl	8012254 <__hexdig_fun>
 80122c0:	4604      	mov	r4, r0
 80122c2:	2800      	cmp	r0, #0
 80122c4:	d16a      	bne.n	801239c <__gethex+0x11e>
 80122c6:	9a01      	ldr	r2, [sp, #4]
 80122c8:	9903      	ldr	r1, [sp, #12]
 80122ca:	4638      	mov	r0, r7
 80122cc:	f7fe fa60 	bl	8010790 <strncmp>
 80122d0:	2800      	cmp	r0, #0
 80122d2:	d166      	bne.n	80123a2 <__gethex+0x124>
 80122d4:	9b01      	ldr	r3, [sp, #4]
 80122d6:	5cf8      	ldrb	r0, [r7, r3]
 80122d8:	18fe      	adds	r6, r7, r3
 80122da:	f7ff ffbb 	bl	8012254 <__hexdig_fun>
 80122de:	2800      	cmp	r0, #0
 80122e0:	d062      	beq.n	80123a8 <__gethex+0x12a>
 80122e2:	4633      	mov	r3, r6
 80122e4:	7818      	ldrb	r0, [r3, #0]
 80122e6:	2830      	cmp	r0, #48	; 0x30
 80122e8:	461f      	mov	r7, r3
 80122ea:	f103 0301 	add.w	r3, r3, #1
 80122ee:	d0f9      	beq.n	80122e4 <__gethex+0x66>
 80122f0:	f7ff ffb0 	bl	8012254 <__hexdig_fun>
 80122f4:	fab0 f580 	clz	r5, r0
 80122f8:	096d      	lsrs	r5, r5, #5
 80122fa:	4634      	mov	r4, r6
 80122fc:	f04f 0b01 	mov.w	fp, #1
 8012300:	463a      	mov	r2, r7
 8012302:	4616      	mov	r6, r2
 8012304:	3201      	adds	r2, #1
 8012306:	7830      	ldrb	r0, [r6, #0]
 8012308:	f7ff ffa4 	bl	8012254 <__hexdig_fun>
 801230c:	2800      	cmp	r0, #0
 801230e:	d1f8      	bne.n	8012302 <__gethex+0x84>
 8012310:	9a01      	ldr	r2, [sp, #4]
 8012312:	9903      	ldr	r1, [sp, #12]
 8012314:	4630      	mov	r0, r6
 8012316:	f7fe fa3b 	bl	8010790 <strncmp>
 801231a:	b950      	cbnz	r0, 8012332 <__gethex+0xb4>
 801231c:	b954      	cbnz	r4, 8012334 <__gethex+0xb6>
 801231e:	9b01      	ldr	r3, [sp, #4]
 8012320:	18f4      	adds	r4, r6, r3
 8012322:	4622      	mov	r2, r4
 8012324:	4616      	mov	r6, r2
 8012326:	3201      	adds	r2, #1
 8012328:	7830      	ldrb	r0, [r6, #0]
 801232a:	f7ff ff93 	bl	8012254 <__hexdig_fun>
 801232e:	2800      	cmp	r0, #0
 8012330:	d1f8      	bne.n	8012324 <__gethex+0xa6>
 8012332:	b10c      	cbz	r4, 8012338 <__gethex+0xba>
 8012334:	1ba4      	subs	r4, r4, r6
 8012336:	00a4      	lsls	r4, r4, #2
 8012338:	7833      	ldrb	r3, [r6, #0]
 801233a:	2b50      	cmp	r3, #80	; 0x50
 801233c:	d001      	beq.n	8012342 <__gethex+0xc4>
 801233e:	2b70      	cmp	r3, #112	; 0x70
 8012340:	d140      	bne.n	80123c4 <__gethex+0x146>
 8012342:	7873      	ldrb	r3, [r6, #1]
 8012344:	2b2b      	cmp	r3, #43	; 0x2b
 8012346:	d031      	beq.n	80123ac <__gethex+0x12e>
 8012348:	2b2d      	cmp	r3, #45	; 0x2d
 801234a:	d033      	beq.n	80123b4 <__gethex+0x136>
 801234c:	1c71      	adds	r1, r6, #1
 801234e:	f04f 0900 	mov.w	r9, #0
 8012352:	7808      	ldrb	r0, [r1, #0]
 8012354:	f7ff ff7e 	bl	8012254 <__hexdig_fun>
 8012358:	1e43      	subs	r3, r0, #1
 801235a:	b2db      	uxtb	r3, r3
 801235c:	2b18      	cmp	r3, #24
 801235e:	d831      	bhi.n	80123c4 <__gethex+0x146>
 8012360:	f1a0 0210 	sub.w	r2, r0, #16
 8012364:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012368:	f7ff ff74 	bl	8012254 <__hexdig_fun>
 801236c:	1e43      	subs	r3, r0, #1
 801236e:	b2db      	uxtb	r3, r3
 8012370:	2b18      	cmp	r3, #24
 8012372:	d922      	bls.n	80123ba <__gethex+0x13c>
 8012374:	f1b9 0f00 	cmp.w	r9, #0
 8012378:	d000      	beq.n	801237c <__gethex+0xfe>
 801237a:	4252      	negs	r2, r2
 801237c:	4414      	add	r4, r2
 801237e:	f8ca 1000 	str.w	r1, [sl]
 8012382:	b30d      	cbz	r5, 80123c8 <__gethex+0x14a>
 8012384:	f1bb 0f00 	cmp.w	fp, #0
 8012388:	bf0c      	ite	eq
 801238a:	2706      	moveq	r7, #6
 801238c:	2700      	movne	r7, #0
 801238e:	4638      	mov	r0, r7
 8012390:	b00b      	add	sp, #44	; 0x2c
 8012392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012396:	f10b 0b01 	add.w	fp, fp, #1
 801239a:	e78a      	b.n	80122b2 <__gethex+0x34>
 801239c:	2500      	movs	r5, #0
 801239e:	462c      	mov	r4, r5
 80123a0:	e7ae      	b.n	8012300 <__gethex+0x82>
 80123a2:	463e      	mov	r6, r7
 80123a4:	2501      	movs	r5, #1
 80123a6:	e7c7      	b.n	8012338 <__gethex+0xba>
 80123a8:	4604      	mov	r4, r0
 80123aa:	e7fb      	b.n	80123a4 <__gethex+0x126>
 80123ac:	f04f 0900 	mov.w	r9, #0
 80123b0:	1cb1      	adds	r1, r6, #2
 80123b2:	e7ce      	b.n	8012352 <__gethex+0xd4>
 80123b4:	f04f 0901 	mov.w	r9, #1
 80123b8:	e7fa      	b.n	80123b0 <__gethex+0x132>
 80123ba:	230a      	movs	r3, #10
 80123bc:	fb03 0202 	mla	r2, r3, r2, r0
 80123c0:	3a10      	subs	r2, #16
 80123c2:	e7cf      	b.n	8012364 <__gethex+0xe6>
 80123c4:	4631      	mov	r1, r6
 80123c6:	e7da      	b.n	801237e <__gethex+0x100>
 80123c8:	1bf3      	subs	r3, r6, r7
 80123ca:	3b01      	subs	r3, #1
 80123cc:	4629      	mov	r1, r5
 80123ce:	2b07      	cmp	r3, #7
 80123d0:	dc49      	bgt.n	8012466 <__gethex+0x1e8>
 80123d2:	9802      	ldr	r0, [sp, #8]
 80123d4:	f000 fa52 	bl	801287c <_Balloc>
 80123d8:	9b01      	ldr	r3, [sp, #4]
 80123da:	f100 0914 	add.w	r9, r0, #20
 80123de:	f04f 0b00 	mov.w	fp, #0
 80123e2:	f1c3 0301 	rsb	r3, r3, #1
 80123e6:	4605      	mov	r5, r0
 80123e8:	f8cd 9010 	str.w	r9, [sp, #16]
 80123ec:	46da      	mov	sl, fp
 80123ee:	9308      	str	r3, [sp, #32]
 80123f0:	42b7      	cmp	r7, r6
 80123f2:	d33b      	bcc.n	801246c <__gethex+0x1ee>
 80123f4:	9804      	ldr	r0, [sp, #16]
 80123f6:	f840 ab04 	str.w	sl, [r0], #4
 80123fa:	eba0 0009 	sub.w	r0, r0, r9
 80123fe:	1080      	asrs	r0, r0, #2
 8012400:	6128      	str	r0, [r5, #16]
 8012402:	0147      	lsls	r7, r0, #5
 8012404:	4650      	mov	r0, sl
 8012406:	f000 fafd 	bl	8012a04 <__hi0bits>
 801240a:	f8d8 6000 	ldr.w	r6, [r8]
 801240e:	1a3f      	subs	r7, r7, r0
 8012410:	42b7      	cmp	r7, r6
 8012412:	dd64      	ble.n	80124de <__gethex+0x260>
 8012414:	1bbf      	subs	r7, r7, r6
 8012416:	4639      	mov	r1, r7
 8012418:	4628      	mov	r0, r5
 801241a:	f000 fe0d 	bl	8013038 <__any_on>
 801241e:	4682      	mov	sl, r0
 8012420:	b178      	cbz	r0, 8012442 <__gethex+0x1c4>
 8012422:	1e7b      	subs	r3, r7, #1
 8012424:	1159      	asrs	r1, r3, #5
 8012426:	f003 021f 	and.w	r2, r3, #31
 801242a:	f04f 0a01 	mov.w	sl, #1
 801242e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012432:	fa0a f202 	lsl.w	r2, sl, r2
 8012436:	420a      	tst	r2, r1
 8012438:	d003      	beq.n	8012442 <__gethex+0x1c4>
 801243a:	4553      	cmp	r3, sl
 801243c:	dc46      	bgt.n	80124cc <__gethex+0x24e>
 801243e:	f04f 0a02 	mov.w	sl, #2
 8012442:	4639      	mov	r1, r7
 8012444:	4628      	mov	r0, r5
 8012446:	f7ff fecb 	bl	80121e0 <rshift>
 801244a:	443c      	add	r4, r7
 801244c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012450:	42a3      	cmp	r3, r4
 8012452:	da52      	bge.n	80124fa <__gethex+0x27c>
 8012454:	4629      	mov	r1, r5
 8012456:	9802      	ldr	r0, [sp, #8]
 8012458:	f000 fa44 	bl	80128e4 <_Bfree>
 801245c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801245e:	2300      	movs	r3, #0
 8012460:	6013      	str	r3, [r2, #0]
 8012462:	27a3      	movs	r7, #163	; 0xa3
 8012464:	e793      	b.n	801238e <__gethex+0x110>
 8012466:	3101      	adds	r1, #1
 8012468:	105b      	asrs	r3, r3, #1
 801246a:	e7b0      	b.n	80123ce <__gethex+0x150>
 801246c:	1e73      	subs	r3, r6, #1
 801246e:	9305      	str	r3, [sp, #20]
 8012470:	9a07      	ldr	r2, [sp, #28]
 8012472:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012476:	4293      	cmp	r3, r2
 8012478:	d018      	beq.n	80124ac <__gethex+0x22e>
 801247a:	f1bb 0f20 	cmp.w	fp, #32
 801247e:	d107      	bne.n	8012490 <__gethex+0x212>
 8012480:	9b04      	ldr	r3, [sp, #16]
 8012482:	f8c3 a000 	str.w	sl, [r3]
 8012486:	3304      	adds	r3, #4
 8012488:	f04f 0a00 	mov.w	sl, #0
 801248c:	9304      	str	r3, [sp, #16]
 801248e:	46d3      	mov	fp, sl
 8012490:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012494:	f7ff fede 	bl	8012254 <__hexdig_fun>
 8012498:	f000 000f 	and.w	r0, r0, #15
 801249c:	fa00 f00b 	lsl.w	r0, r0, fp
 80124a0:	ea4a 0a00 	orr.w	sl, sl, r0
 80124a4:	f10b 0b04 	add.w	fp, fp, #4
 80124a8:	9b05      	ldr	r3, [sp, #20]
 80124aa:	e00d      	b.n	80124c8 <__gethex+0x24a>
 80124ac:	9b05      	ldr	r3, [sp, #20]
 80124ae:	9a08      	ldr	r2, [sp, #32]
 80124b0:	4413      	add	r3, r2
 80124b2:	42bb      	cmp	r3, r7
 80124b4:	d3e1      	bcc.n	801247a <__gethex+0x1fc>
 80124b6:	4618      	mov	r0, r3
 80124b8:	9a01      	ldr	r2, [sp, #4]
 80124ba:	9903      	ldr	r1, [sp, #12]
 80124bc:	9309      	str	r3, [sp, #36]	; 0x24
 80124be:	f7fe f967 	bl	8010790 <strncmp>
 80124c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124c4:	2800      	cmp	r0, #0
 80124c6:	d1d8      	bne.n	801247a <__gethex+0x1fc>
 80124c8:	461e      	mov	r6, r3
 80124ca:	e791      	b.n	80123f0 <__gethex+0x172>
 80124cc:	1eb9      	subs	r1, r7, #2
 80124ce:	4628      	mov	r0, r5
 80124d0:	f000 fdb2 	bl	8013038 <__any_on>
 80124d4:	2800      	cmp	r0, #0
 80124d6:	d0b2      	beq.n	801243e <__gethex+0x1c0>
 80124d8:	f04f 0a03 	mov.w	sl, #3
 80124dc:	e7b1      	b.n	8012442 <__gethex+0x1c4>
 80124de:	da09      	bge.n	80124f4 <__gethex+0x276>
 80124e0:	1bf7      	subs	r7, r6, r7
 80124e2:	4629      	mov	r1, r5
 80124e4:	463a      	mov	r2, r7
 80124e6:	9802      	ldr	r0, [sp, #8]
 80124e8:	f000 fbc8 	bl	8012c7c <__lshift>
 80124ec:	1be4      	subs	r4, r4, r7
 80124ee:	4605      	mov	r5, r0
 80124f0:	f100 0914 	add.w	r9, r0, #20
 80124f4:	f04f 0a00 	mov.w	sl, #0
 80124f8:	e7a8      	b.n	801244c <__gethex+0x1ce>
 80124fa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80124fe:	42a0      	cmp	r0, r4
 8012500:	dd6a      	ble.n	80125d8 <__gethex+0x35a>
 8012502:	1b04      	subs	r4, r0, r4
 8012504:	42a6      	cmp	r6, r4
 8012506:	dc2e      	bgt.n	8012566 <__gethex+0x2e8>
 8012508:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801250c:	2b02      	cmp	r3, #2
 801250e:	d022      	beq.n	8012556 <__gethex+0x2d8>
 8012510:	2b03      	cmp	r3, #3
 8012512:	d024      	beq.n	801255e <__gethex+0x2e0>
 8012514:	2b01      	cmp	r3, #1
 8012516:	d115      	bne.n	8012544 <__gethex+0x2c6>
 8012518:	42a6      	cmp	r6, r4
 801251a:	d113      	bne.n	8012544 <__gethex+0x2c6>
 801251c:	2e01      	cmp	r6, #1
 801251e:	dc0b      	bgt.n	8012538 <__gethex+0x2ba>
 8012520:	9a06      	ldr	r2, [sp, #24]
 8012522:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012526:	6013      	str	r3, [r2, #0]
 8012528:	2301      	movs	r3, #1
 801252a:	612b      	str	r3, [r5, #16]
 801252c:	f8c9 3000 	str.w	r3, [r9]
 8012530:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012532:	2762      	movs	r7, #98	; 0x62
 8012534:	601d      	str	r5, [r3, #0]
 8012536:	e72a      	b.n	801238e <__gethex+0x110>
 8012538:	1e71      	subs	r1, r6, #1
 801253a:	4628      	mov	r0, r5
 801253c:	f000 fd7c 	bl	8013038 <__any_on>
 8012540:	2800      	cmp	r0, #0
 8012542:	d1ed      	bne.n	8012520 <__gethex+0x2a2>
 8012544:	4629      	mov	r1, r5
 8012546:	9802      	ldr	r0, [sp, #8]
 8012548:	f000 f9cc 	bl	80128e4 <_Bfree>
 801254c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801254e:	2300      	movs	r3, #0
 8012550:	6013      	str	r3, [r2, #0]
 8012552:	2750      	movs	r7, #80	; 0x50
 8012554:	e71b      	b.n	801238e <__gethex+0x110>
 8012556:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012558:	2b00      	cmp	r3, #0
 801255a:	d0e1      	beq.n	8012520 <__gethex+0x2a2>
 801255c:	e7f2      	b.n	8012544 <__gethex+0x2c6>
 801255e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012560:	2b00      	cmp	r3, #0
 8012562:	d1dd      	bne.n	8012520 <__gethex+0x2a2>
 8012564:	e7ee      	b.n	8012544 <__gethex+0x2c6>
 8012566:	1e67      	subs	r7, r4, #1
 8012568:	f1ba 0f00 	cmp.w	sl, #0
 801256c:	d131      	bne.n	80125d2 <__gethex+0x354>
 801256e:	b127      	cbz	r7, 801257a <__gethex+0x2fc>
 8012570:	4639      	mov	r1, r7
 8012572:	4628      	mov	r0, r5
 8012574:	f000 fd60 	bl	8013038 <__any_on>
 8012578:	4682      	mov	sl, r0
 801257a:	117a      	asrs	r2, r7, #5
 801257c:	2301      	movs	r3, #1
 801257e:	f007 071f 	and.w	r7, r7, #31
 8012582:	fa03 f707 	lsl.w	r7, r3, r7
 8012586:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801258a:	4621      	mov	r1, r4
 801258c:	421f      	tst	r7, r3
 801258e:	4628      	mov	r0, r5
 8012590:	bf18      	it	ne
 8012592:	f04a 0a02 	orrne.w	sl, sl, #2
 8012596:	1b36      	subs	r6, r6, r4
 8012598:	f7ff fe22 	bl	80121e0 <rshift>
 801259c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80125a0:	2702      	movs	r7, #2
 80125a2:	f1ba 0f00 	cmp.w	sl, #0
 80125a6:	d048      	beq.n	801263a <__gethex+0x3bc>
 80125a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80125ac:	2b02      	cmp	r3, #2
 80125ae:	d015      	beq.n	80125dc <__gethex+0x35e>
 80125b0:	2b03      	cmp	r3, #3
 80125b2:	d017      	beq.n	80125e4 <__gethex+0x366>
 80125b4:	2b01      	cmp	r3, #1
 80125b6:	d109      	bne.n	80125cc <__gethex+0x34e>
 80125b8:	f01a 0f02 	tst.w	sl, #2
 80125bc:	d006      	beq.n	80125cc <__gethex+0x34e>
 80125be:	f8d9 3000 	ldr.w	r3, [r9]
 80125c2:	ea4a 0a03 	orr.w	sl, sl, r3
 80125c6:	f01a 0f01 	tst.w	sl, #1
 80125ca:	d10e      	bne.n	80125ea <__gethex+0x36c>
 80125cc:	f047 0710 	orr.w	r7, r7, #16
 80125d0:	e033      	b.n	801263a <__gethex+0x3bc>
 80125d2:	f04f 0a01 	mov.w	sl, #1
 80125d6:	e7d0      	b.n	801257a <__gethex+0x2fc>
 80125d8:	2701      	movs	r7, #1
 80125da:	e7e2      	b.n	80125a2 <__gethex+0x324>
 80125dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80125de:	f1c3 0301 	rsb	r3, r3, #1
 80125e2:	9315      	str	r3, [sp, #84]	; 0x54
 80125e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d0f0      	beq.n	80125cc <__gethex+0x34e>
 80125ea:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80125ee:	f105 0314 	add.w	r3, r5, #20
 80125f2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80125f6:	eb03 010a 	add.w	r1, r3, sl
 80125fa:	f04f 0c00 	mov.w	ip, #0
 80125fe:	4618      	mov	r0, r3
 8012600:	f853 2b04 	ldr.w	r2, [r3], #4
 8012604:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012608:	d01c      	beq.n	8012644 <__gethex+0x3c6>
 801260a:	3201      	adds	r2, #1
 801260c:	6002      	str	r2, [r0, #0]
 801260e:	2f02      	cmp	r7, #2
 8012610:	f105 0314 	add.w	r3, r5, #20
 8012614:	d138      	bne.n	8012688 <__gethex+0x40a>
 8012616:	f8d8 2000 	ldr.w	r2, [r8]
 801261a:	3a01      	subs	r2, #1
 801261c:	42b2      	cmp	r2, r6
 801261e:	d10a      	bne.n	8012636 <__gethex+0x3b8>
 8012620:	1171      	asrs	r1, r6, #5
 8012622:	2201      	movs	r2, #1
 8012624:	f006 061f 	and.w	r6, r6, #31
 8012628:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801262c:	fa02 f606 	lsl.w	r6, r2, r6
 8012630:	421e      	tst	r6, r3
 8012632:	bf18      	it	ne
 8012634:	4617      	movne	r7, r2
 8012636:	f047 0720 	orr.w	r7, r7, #32
 801263a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801263c:	601d      	str	r5, [r3, #0]
 801263e:	9b06      	ldr	r3, [sp, #24]
 8012640:	601c      	str	r4, [r3, #0]
 8012642:	e6a4      	b.n	801238e <__gethex+0x110>
 8012644:	4299      	cmp	r1, r3
 8012646:	f843 cc04 	str.w	ip, [r3, #-4]
 801264a:	d8d8      	bhi.n	80125fe <__gethex+0x380>
 801264c:	68ab      	ldr	r3, [r5, #8]
 801264e:	4599      	cmp	r9, r3
 8012650:	db12      	blt.n	8012678 <__gethex+0x3fa>
 8012652:	6869      	ldr	r1, [r5, #4]
 8012654:	9802      	ldr	r0, [sp, #8]
 8012656:	3101      	adds	r1, #1
 8012658:	f000 f910 	bl	801287c <_Balloc>
 801265c:	692a      	ldr	r2, [r5, #16]
 801265e:	3202      	adds	r2, #2
 8012660:	f105 010c 	add.w	r1, r5, #12
 8012664:	4683      	mov	fp, r0
 8012666:	0092      	lsls	r2, r2, #2
 8012668:	300c      	adds	r0, #12
 801266a:	f7fd f961 	bl	800f930 <memcpy>
 801266e:	4629      	mov	r1, r5
 8012670:	9802      	ldr	r0, [sp, #8]
 8012672:	f000 f937 	bl	80128e4 <_Bfree>
 8012676:	465d      	mov	r5, fp
 8012678:	692b      	ldr	r3, [r5, #16]
 801267a:	1c5a      	adds	r2, r3, #1
 801267c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012680:	612a      	str	r2, [r5, #16]
 8012682:	2201      	movs	r2, #1
 8012684:	615a      	str	r2, [r3, #20]
 8012686:	e7c2      	b.n	801260e <__gethex+0x390>
 8012688:	692a      	ldr	r2, [r5, #16]
 801268a:	454a      	cmp	r2, r9
 801268c:	dd0b      	ble.n	80126a6 <__gethex+0x428>
 801268e:	2101      	movs	r1, #1
 8012690:	4628      	mov	r0, r5
 8012692:	f7ff fda5 	bl	80121e0 <rshift>
 8012696:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801269a:	3401      	adds	r4, #1
 801269c:	42a3      	cmp	r3, r4
 801269e:	f6ff aed9 	blt.w	8012454 <__gethex+0x1d6>
 80126a2:	2701      	movs	r7, #1
 80126a4:	e7c7      	b.n	8012636 <__gethex+0x3b8>
 80126a6:	f016 061f 	ands.w	r6, r6, #31
 80126aa:	d0fa      	beq.n	80126a2 <__gethex+0x424>
 80126ac:	449a      	add	sl, r3
 80126ae:	f1c6 0620 	rsb	r6, r6, #32
 80126b2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80126b6:	f000 f9a5 	bl	8012a04 <__hi0bits>
 80126ba:	42b0      	cmp	r0, r6
 80126bc:	dbe7      	blt.n	801268e <__gethex+0x410>
 80126be:	e7f0      	b.n	80126a2 <__gethex+0x424>

080126c0 <L_shift>:
 80126c0:	f1c2 0208 	rsb	r2, r2, #8
 80126c4:	0092      	lsls	r2, r2, #2
 80126c6:	b570      	push	{r4, r5, r6, lr}
 80126c8:	f1c2 0620 	rsb	r6, r2, #32
 80126cc:	6843      	ldr	r3, [r0, #4]
 80126ce:	6804      	ldr	r4, [r0, #0]
 80126d0:	fa03 f506 	lsl.w	r5, r3, r6
 80126d4:	432c      	orrs	r4, r5
 80126d6:	40d3      	lsrs	r3, r2
 80126d8:	6004      	str	r4, [r0, #0]
 80126da:	f840 3f04 	str.w	r3, [r0, #4]!
 80126de:	4288      	cmp	r0, r1
 80126e0:	d3f4      	bcc.n	80126cc <L_shift+0xc>
 80126e2:	bd70      	pop	{r4, r5, r6, pc}

080126e4 <__match>:
 80126e4:	b530      	push	{r4, r5, lr}
 80126e6:	6803      	ldr	r3, [r0, #0]
 80126e8:	3301      	adds	r3, #1
 80126ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80126ee:	b914      	cbnz	r4, 80126f6 <__match+0x12>
 80126f0:	6003      	str	r3, [r0, #0]
 80126f2:	2001      	movs	r0, #1
 80126f4:	bd30      	pop	{r4, r5, pc}
 80126f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80126fe:	2d19      	cmp	r5, #25
 8012700:	bf98      	it	ls
 8012702:	3220      	addls	r2, #32
 8012704:	42a2      	cmp	r2, r4
 8012706:	d0f0      	beq.n	80126ea <__match+0x6>
 8012708:	2000      	movs	r0, #0
 801270a:	e7f3      	b.n	80126f4 <__match+0x10>

0801270c <__hexnan>:
 801270c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012710:	680b      	ldr	r3, [r1, #0]
 8012712:	6801      	ldr	r1, [r0, #0]
 8012714:	115f      	asrs	r7, r3, #5
 8012716:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801271a:	f013 031f 	ands.w	r3, r3, #31
 801271e:	b087      	sub	sp, #28
 8012720:	bf18      	it	ne
 8012722:	3704      	addne	r7, #4
 8012724:	2500      	movs	r5, #0
 8012726:	1f3e      	subs	r6, r7, #4
 8012728:	4682      	mov	sl, r0
 801272a:	4690      	mov	r8, r2
 801272c:	9301      	str	r3, [sp, #4]
 801272e:	f847 5c04 	str.w	r5, [r7, #-4]
 8012732:	46b1      	mov	r9, r6
 8012734:	4634      	mov	r4, r6
 8012736:	9502      	str	r5, [sp, #8]
 8012738:	46ab      	mov	fp, r5
 801273a:	784a      	ldrb	r2, [r1, #1]
 801273c:	1c4b      	adds	r3, r1, #1
 801273e:	9303      	str	r3, [sp, #12]
 8012740:	b342      	cbz	r2, 8012794 <__hexnan+0x88>
 8012742:	4610      	mov	r0, r2
 8012744:	9105      	str	r1, [sp, #20]
 8012746:	9204      	str	r2, [sp, #16]
 8012748:	f7ff fd84 	bl	8012254 <__hexdig_fun>
 801274c:	2800      	cmp	r0, #0
 801274e:	d143      	bne.n	80127d8 <__hexnan+0xcc>
 8012750:	9a04      	ldr	r2, [sp, #16]
 8012752:	9905      	ldr	r1, [sp, #20]
 8012754:	2a20      	cmp	r2, #32
 8012756:	d818      	bhi.n	801278a <__hexnan+0x7e>
 8012758:	9b02      	ldr	r3, [sp, #8]
 801275a:	459b      	cmp	fp, r3
 801275c:	dd13      	ble.n	8012786 <__hexnan+0x7a>
 801275e:	454c      	cmp	r4, r9
 8012760:	d206      	bcs.n	8012770 <__hexnan+0x64>
 8012762:	2d07      	cmp	r5, #7
 8012764:	dc04      	bgt.n	8012770 <__hexnan+0x64>
 8012766:	462a      	mov	r2, r5
 8012768:	4649      	mov	r1, r9
 801276a:	4620      	mov	r0, r4
 801276c:	f7ff ffa8 	bl	80126c0 <L_shift>
 8012770:	4544      	cmp	r4, r8
 8012772:	d944      	bls.n	80127fe <__hexnan+0xf2>
 8012774:	2300      	movs	r3, #0
 8012776:	f1a4 0904 	sub.w	r9, r4, #4
 801277a:	f844 3c04 	str.w	r3, [r4, #-4]
 801277e:	f8cd b008 	str.w	fp, [sp, #8]
 8012782:	464c      	mov	r4, r9
 8012784:	461d      	mov	r5, r3
 8012786:	9903      	ldr	r1, [sp, #12]
 8012788:	e7d7      	b.n	801273a <__hexnan+0x2e>
 801278a:	2a29      	cmp	r2, #41	; 0x29
 801278c:	d14a      	bne.n	8012824 <__hexnan+0x118>
 801278e:	3102      	adds	r1, #2
 8012790:	f8ca 1000 	str.w	r1, [sl]
 8012794:	f1bb 0f00 	cmp.w	fp, #0
 8012798:	d044      	beq.n	8012824 <__hexnan+0x118>
 801279a:	454c      	cmp	r4, r9
 801279c:	d206      	bcs.n	80127ac <__hexnan+0xa0>
 801279e:	2d07      	cmp	r5, #7
 80127a0:	dc04      	bgt.n	80127ac <__hexnan+0xa0>
 80127a2:	462a      	mov	r2, r5
 80127a4:	4649      	mov	r1, r9
 80127a6:	4620      	mov	r0, r4
 80127a8:	f7ff ff8a 	bl	80126c0 <L_shift>
 80127ac:	4544      	cmp	r4, r8
 80127ae:	d928      	bls.n	8012802 <__hexnan+0xf6>
 80127b0:	4643      	mov	r3, r8
 80127b2:	f854 2b04 	ldr.w	r2, [r4], #4
 80127b6:	f843 2b04 	str.w	r2, [r3], #4
 80127ba:	42a6      	cmp	r6, r4
 80127bc:	d2f9      	bcs.n	80127b2 <__hexnan+0xa6>
 80127be:	2200      	movs	r2, #0
 80127c0:	f843 2b04 	str.w	r2, [r3], #4
 80127c4:	429e      	cmp	r6, r3
 80127c6:	d2fb      	bcs.n	80127c0 <__hexnan+0xb4>
 80127c8:	6833      	ldr	r3, [r6, #0]
 80127ca:	b91b      	cbnz	r3, 80127d4 <__hexnan+0xc8>
 80127cc:	4546      	cmp	r6, r8
 80127ce:	d127      	bne.n	8012820 <__hexnan+0x114>
 80127d0:	2301      	movs	r3, #1
 80127d2:	6033      	str	r3, [r6, #0]
 80127d4:	2005      	movs	r0, #5
 80127d6:	e026      	b.n	8012826 <__hexnan+0x11a>
 80127d8:	3501      	adds	r5, #1
 80127da:	2d08      	cmp	r5, #8
 80127dc:	f10b 0b01 	add.w	fp, fp, #1
 80127e0:	dd06      	ble.n	80127f0 <__hexnan+0xe4>
 80127e2:	4544      	cmp	r4, r8
 80127e4:	d9cf      	bls.n	8012786 <__hexnan+0x7a>
 80127e6:	2300      	movs	r3, #0
 80127e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80127ec:	2501      	movs	r5, #1
 80127ee:	3c04      	subs	r4, #4
 80127f0:	6822      	ldr	r2, [r4, #0]
 80127f2:	f000 000f 	and.w	r0, r0, #15
 80127f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80127fa:	6020      	str	r0, [r4, #0]
 80127fc:	e7c3      	b.n	8012786 <__hexnan+0x7a>
 80127fe:	2508      	movs	r5, #8
 8012800:	e7c1      	b.n	8012786 <__hexnan+0x7a>
 8012802:	9b01      	ldr	r3, [sp, #4]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d0df      	beq.n	80127c8 <__hexnan+0xbc>
 8012808:	f04f 32ff 	mov.w	r2, #4294967295
 801280c:	f1c3 0320 	rsb	r3, r3, #32
 8012810:	fa22 f303 	lsr.w	r3, r2, r3
 8012814:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8012818:	401a      	ands	r2, r3
 801281a:	f847 2c04 	str.w	r2, [r7, #-4]
 801281e:	e7d3      	b.n	80127c8 <__hexnan+0xbc>
 8012820:	3e04      	subs	r6, #4
 8012822:	e7d1      	b.n	80127c8 <__hexnan+0xbc>
 8012824:	2004      	movs	r0, #4
 8012826:	b007      	add	sp, #28
 8012828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801282c <__locale_ctype_ptr_l>:
 801282c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8012830:	4770      	bx	lr

08012832 <__localeconv_l>:
 8012832:	30f0      	adds	r0, #240	; 0xf0
 8012834:	4770      	bx	lr
	...

08012838 <_localeconv_r>:
 8012838:	4b04      	ldr	r3, [pc, #16]	; (801284c <_localeconv_r+0x14>)
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	6a18      	ldr	r0, [r3, #32]
 801283e:	4b04      	ldr	r3, [pc, #16]	; (8012850 <_localeconv_r+0x18>)
 8012840:	2800      	cmp	r0, #0
 8012842:	bf08      	it	eq
 8012844:	4618      	moveq	r0, r3
 8012846:	30f0      	adds	r0, #240	; 0xf0
 8012848:	4770      	bx	lr
 801284a:	bf00      	nop
 801284c:	200001c0 	.word	0x200001c0
 8012850:	20000224 	.word	0x20000224

08012854 <__ascii_mbtowc>:
 8012854:	b082      	sub	sp, #8
 8012856:	b901      	cbnz	r1, 801285a <__ascii_mbtowc+0x6>
 8012858:	a901      	add	r1, sp, #4
 801285a:	b142      	cbz	r2, 801286e <__ascii_mbtowc+0x1a>
 801285c:	b14b      	cbz	r3, 8012872 <__ascii_mbtowc+0x1e>
 801285e:	7813      	ldrb	r3, [r2, #0]
 8012860:	600b      	str	r3, [r1, #0]
 8012862:	7812      	ldrb	r2, [r2, #0]
 8012864:	1c10      	adds	r0, r2, #0
 8012866:	bf18      	it	ne
 8012868:	2001      	movne	r0, #1
 801286a:	b002      	add	sp, #8
 801286c:	4770      	bx	lr
 801286e:	4610      	mov	r0, r2
 8012870:	e7fb      	b.n	801286a <__ascii_mbtowc+0x16>
 8012872:	f06f 0001 	mvn.w	r0, #1
 8012876:	e7f8      	b.n	801286a <__ascii_mbtowc+0x16>

08012878 <__malloc_lock>:
 8012878:	4770      	bx	lr

0801287a <__malloc_unlock>:
 801287a:	4770      	bx	lr

0801287c <_Balloc>:
 801287c:	b570      	push	{r4, r5, r6, lr}
 801287e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012880:	4604      	mov	r4, r0
 8012882:	460e      	mov	r6, r1
 8012884:	b93d      	cbnz	r5, 8012896 <_Balloc+0x1a>
 8012886:	2010      	movs	r0, #16
 8012888:	f7fd f842 	bl	800f910 <malloc>
 801288c:	6260      	str	r0, [r4, #36]	; 0x24
 801288e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012892:	6005      	str	r5, [r0, #0]
 8012894:	60c5      	str	r5, [r0, #12]
 8012896:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012898:	68eb      	ldr	r3, [r5, #12]
 801289a:	b183      	cbz	r3, 80128be <_Balloc+0x42>
 801289c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801289e:	68db      	ldr	r3, [r3, #12]
 80128a0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80128a4:	b9b8      	cbnz	r0, 80128d6 <_Balloc+0x5a>
 80128a6:	2101      	movs	r1, #1
 80128a8:	fa01 f506 	lsl.w	r5, r1, r6
 80128ac:	1d6a      	adds	r2, r5, #5
 80128ae:	0092      	lsls	r2, r2, #2
 80128b0:	4620      	mov	r0, r4
 80128b2:	f000 fbe2 	bl	801307a <_calloc_r>
 80128b6:	b160      	cbz	r0, 80128d2 <_Balloc+0x56>
 80128b8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80128bc:	e00e      	b.n	80128dc <_Balloc+0x60>
 80128be:	2221      	movs	r2, #33	; 0x21
 80128c0:	2104      	movs	r1, #4
 80128c2:	4620      	mov	r0, r4
 80128c4:	f000 fbd9 	bl	801307a <_calloc_r>
 80128c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80128ca:	60e8      	str	r0, [r5, #12]
 80128cc:	68db      	ldr	r3, [r3, #12]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d1e4      	bne.n	801289c <_Balloc+0x20>
 80128d2:	2000      	movs	r0, #0
 80128d4:	bd70      	pop	{r4, r5, r6, pc}
 80128d6:	6802      	ldr	r2, [r0, #0]
 80128d8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80128dc:	2300      	movs	r3, #0
 80128de:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80128e2:	e7f7      	b.n	80128d4 <_Balloc+0x58>

080128e4 <_Bfree>:
 80128e4:	b570      	push	{r4, r5, r6, lr}
 80128e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80128e8:	4606      	mov	r6, r0
 80128ea:	460d      	mov	r5, r1
 80128ec:	b93c      	cbnz	r4, 80128fe <_Bfree+0x1a>
 80128ee:	2010      	movs	r0, #16
 80128f0:	f7fd f80e 	bl	800f910 <malloc>
 80128f4:	6270      	str	r0, [r6, #36]	; 0x24
 80128f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80128fa:	6004      	str	r4, [r0, #0]
 80128fc:	60c4      	str	r4, [r0, #12]
 80128fe:	b13d      	cbz	r5, 8012910 <_Bfree+0x2c>
 8012900:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012902:	686a      	ldr	r2, [r5, #4]
 8012904:	68db      	ldr	r3, [r3, #12]
 8012906:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801290a:	6029      	str	r1, [r5, #0]
 801290c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8012910:	bd70      	pop	{r4, r5, r6, pc}

08012912 <__multadd>:
 8012912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012916:	690d      	ldr	r5, [r1, #16]
 8012918:	461f      	mov	r7, r3
 801291a:	4606      	mov	r6, r0
 801291c:	460c      	mov	r4, r1
 801291e:	f101 0c14 	add.w	ip, r1, #20
 8012922:	2300      	movs	r3, #0
 8012924:	f8dc 0000 	ldr.w	r0, [ip]
 8012928:	b281      	uxth	r1, r0
 801292a:	fb02 7101 	mla	r1, r2, r1, r7
 801292e:	0c0f      	lsrs	r7, r1, #16
 8012930:	0c00      	lsrs	r0, r0, #16
 8012932:	fb02 7000 	mla	r0, r2, r0, r7
 8012936:	b289      	uxth	r1, r1
 8012938:	3301      	adds	r3, #1
 801293a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801293e:	429d      	cmp	r5, r3
 8012940:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8012944:	f84c 1b04 	str.w	r1, [ip], #4
 8012948:	dcec      	bgt.n	8012924 <__multadd+0x12>
 801294a:	b1d7      	cbz	r7, 8012982 <__multadd+0x70>
 801294c:	68a3      	ldr	r3, [r4, #8]
 801294e:	42ab      	cmp	r3, r5
 8012950:	dc12      	bgt.n	8012978 <__multadd+0x66>
 8012952:	6861      	ldr	r1, [r4, #4]
 8012954:	4630      	mov	r0, r6
 8012956:	3101      	adds	r1, #1
 8012958:	f7ff ff90 	bl	801287c <_Balloc>
 801295c:	6922      	ldr	r2, [r4, #16]
 801295e:	3202      	adds	r2, #2
 8012960:	f104 010c 	add.w	r1, r4, #12
 8012964:	4680      	mov	r8, r0
 8012966:	0092      	lsls	r2, r2, #2
 8012968:	300c      	adds	r0, #12
 801296a:	f7fc ffe1 	bl	800f930 <memcpy>
 801296e:	4621      	mov	r1, r4
 8012970:	4630      	mov	r0, r6
 8012972:	f7ff ffb7 	bl	80128e4 <_Bfree>
 8012976:	4644      	mov	r4, r8
 8012978:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801297c:	3501      	adds	r5, #1
 801297e:	615f      	str	r7, [r3, #20]
 8012980:	6125      	str	r5, [r4, #16]
 8012982:	4620      	mov	r0, r4
 8012984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012988 <__s2b>:
 8012988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801298c:	460c      	mov	r4, r1
 801298e:	4615      	mov	r5, r2
 8012990:	461f      	mov	r7, r3
 8012992:	2209      	movs	r2, #9
 8012994:	3308      	adds	r3, #8
 8012996:	4606      	mov	r6, r0
 8012998:	fb93 f3f2 	sdiv	r3, r3, r2
 801299c:	2100      	movs	r1, #0
 801299e:	2201      	movs	r2, #1
 80129a0:	429a      	cmp	r2, r3
 80129a2:	db20      	blt.n	80129e6 <__s2b+0x5e>
 80129a4:	4630      	mov	r0, r6
 80129a6:	f7ff ff69 	bl	801287c <_Balloc>
 80129aa:	9b08      	ldr	r3, [sp, #32]
 80129ac:	6143      	str	r3, [r0, #20]
 80129ae:	2d09      	cmp	r5, #9
 80129b0:	f04f 0301 	mov.w	r3, #1
 80129b4:	6103      	str	r3, [r0, #16]
 80129b6:	dd19      	ble.n	80129ec <__s2b+0x64>
 80129b8:	f104 0809 	add.w	r8, r4, #9
 80129bc:	46c1      	mov	r9, r8
 80129be:	442c      	add	r4, r5
 80129c0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80129c4:	4601      	mov	r1, r0
 80129c6:	3b30      	subs	r3, #48	; 0x30
 80129c8:	220a      	movs	r2, #10
 80129ca:	4630      	mov	r0, r6
 80129cc:	f7ff ffa1 	bl	8012912 <__multadd>
 80129d0:	45a1      	cmp	r9, r4
 80129d2:	d1f5      	bne.n	80129c0 <__s2b+0x38>
 80129d4:	eb08 0405 	add.w	r4, r8, r5
 80129d8:	3c08      	subs	r4, #8
 80129da:	1b2d      	subs	r5, r5, r4
 80129dc:	1963      	adds	r3, r4, r5
 80129de:	42bb      	cmp	r3, r7
 80129e0:	db07      	blt.n	80129f2 <__s2b+0x6a>
 80129e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129e6:	0052      	lsls	r2, r2, #1
 80129e8:	3101      	adds	r1, #1
 80129ea:	e7d9      	b.n	80129a0 <__s2b+0x18>
 80129ec:	340a      	adds	r4, #10
 80129ee:	2509      	movs	r5, #9
 80129f0:	e7f3      	b.n	80129da <__s2b+0x52>
 80129f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80129f6:	4601      	mov	r1, r0
 80129f8:	3b30      	subs	r3, #48	; 0x30
 80129fa:	220a      	movs	r2, #10
 80129fc:	4630      	mov	r0, r6
 80129fe:	f7ff ff88 	bl	8012912 <__multadd>
 8012a02:	e7eb      	b.n	80129dc <__s2b+0x54>

08012a04 <__hi0bits>:
 8012a04:	0c02      	lsrs	r2, r0, #16
 8012a06:	0412      	lsls	r2, r2, #16
 8012a08:	4603      	mov	r3, r0
 8012a0a:	b9b2      	cbnz	r2, 8012a3a <__hi0bits+0x36>
 8012a0c:	0403      	lsls	r3, r0, #16
 8012a0e:	2010      	movs	r0, #16
 8012a10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012a14:	bf04      	itt	eq
 8012a16:	021b      	lsleq	r3, r3, #8
 8012a18:	3008      	addeq	r0, #8
 8012a1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012a1e:	bf04      	itt	eq
 8012a20:	011b      	lsleq	r3, r3, #4
 8012a22:	3004      	addeq	r0, #4
 8012a24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012a28:	bf04      	itt	eq
 8012a2a:	009b      	lsleq	r3, r3, #2
 8012a2c:	3002      	addeq	r0, #2
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	db06      	blt.n	8012a40 <__hi0bits+0x3c>
 8012a32:	005b      	lsls	r3, r3, #1
 8012a34:	d503      	bpl.n	8012a3e <__hi0bits+0x3a>
 8012a36:	3001      	adds	r0, #1
 8012a38:	4770      	bx	lr
 8012a3a:	2000      	movs	r0, #0
 8012a3c:	e7e8      	b.n	8012a10 <__hi0bits+0xc>
 8012a3e:	2020      	movs	r0, #32
 8012a40:	4770      	bx	lr

08012a42 <__lo0bits>:
 8012a42:	6803      	ldr	r3, [r0, #0]
 8012a44:	f013 0207 	ands.w	r2, r3, #7
 8012a48:	4601      	mov	r1, r0
 8012a4a:	d00b      	beq.n	8012a64 <__lo0bits+0x22>
 8012a4c:	07da      	lsls	r2, r3, #31
 8012a4e:	d423      	bmi.n	8012a98 <__lo0bits+0x56>
 8012a50:	0798      	lsls	r0, r3, #30
 8012a52:	bf49      	itett	mi
 8012a54:	085b      	lsrmi	r3, r3, #1
 8012a56:	089b      	lsrpl	r3, r3, #2
 8012a58:	2001      	movmi	r0, #1
 8012a5a:	600b      	strmi	r3, [r1, #0]
 8012a5c:	bf5c      	itt	pl
 8012a5e:	600b      	strpl	r3, [r1, #0]
 8012a60:	2002      	movpl	r0, #2
 8012a62:	4770      	bx	lr
 8012a64:	b298      	uxth	r0, r3
 8012a66:	b9a8      	cbnz	r0, 8012a94 <__lo0bits+0x52>
 8012a68:	0c1b      	lsrs	r3, r3, #16
 8012a6a:	2010      	movs	r0, #16
 8012a6c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012a70:	bf04      	itt	eq
 8012a72:	0a1b      	lsreq	r3, r3, #8
 8012a74:	3008      	addeq	r0, #8
 8012a76:	071a      	lsls	r2, r3, #28
 8012a78:	bf04      	itt	eq
 8012a7a:	091b      	lsreq	r3, r3, #4
 8012a7c:	3004      	addeq	r0, #4
 8012a7e:	079a      	lsls	r2, r3, #30
 8012a80:	bf04      	itt	eq
 8012a82:	089b      	lsreq	r3, r3, #2
 8012a84:	3002      	addeq	r0, #2
 8012a86:	07da      	lsls	r2, r3, #31
 8012a88:	d402      	bmi.n	8012a90 <__lo0bits+0x4e>
 8012a8a:	085b      	lsrs	r3, r3, #1
 8012a8c:	d006      	beq.n	8012a9c <__lo0bits+0x5a>
 8012a8e:	3001      	adds	r0, #1
 8012a90:	600b      	str	r3, [r1, #0]
 8012a92:	4770      	bx	lr
 8012a94:	4610      	mov	r0, r2
 8012a96:	e7e9      	b.n	8012a6c <__lo0bits+0x2a>
 8012a98:	2000      	movs	r0, #0
 8012a9a:	4770      	bx	lr
 8012a9c:	2020      	movs	r0, #32
 8012a9e:	4770      	bx	lr

08012aa0 <__i2b>:
 8012aa0:	b510      	push	{r4, lr}
 8012aa2:	460c      	mov	r4, r1
 8012aa4:	2101      	movs	r1, #1
 8012aa6:	f7ff fee9 	bl	801287c <_Balloc>
 8012aaa:	2201      	movs	r2, #1
 8012aac:	6144      	str	r4, [r0, #20]
 8012aae:	6102      	str	r2, [r0, #16]
 8012ab0:	bd10      	pop	{r4, pc}

08012ab2 <__multiply>:
 8012ab2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ab6:	4614      	mov	r4, r2
 8012ab8:	690a      	ldr	r2, [r1, #16]
 8012aba:	6923      	ldr	r3, [r4, #16]
 8012abc:	429a      	cmp	r2, r3
 8012abe:	bfb8      	it	lt
 8012ac0:	460b      	movlt	r3, r1
 8012ac2:	4688      	mov	r8, r1
 8012ac4:	bfbc      	itt	lt
 8012ac6:	46a0      	movlt	r8, r4
 8012ac8:	461c      	movlt	r4, r3
 8012aca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012ace:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012ad2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012ad6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012ada:	eb07 0609 	add.w	r6, r7, r9
 8012ade:	42b3      	cmp	r3, r6
 8012ae0:	bfb8      	it	lt
 8012ae2:	3101      	addlt	r1, #1
 8012ae4:	f7ff feca 	bl	801287c <_Balloc>
 8012ae8:	f100 0514 	add.w	r5, r0, #20
 8012aec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8012af0:	462b      	mov	r3, r5
 8012af2:	2200      	movs	r2, #0
 8012af4:	4573      	cmp	r3, lr
 8012af6:	d316      	bcc.n	8012b26 <__multiply+0x74>
 8012af8:	f104 0214 	add.w	r2, r4, #20
 8012afc:	f108 0114 	add.w	r1, r8, #20
 8012b00:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8012b04:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8012b08:	9300      	str	r3, [sp, #0]
 8012b0a:	9b00      	ldr	r3, [sp, #0]
 8012b0c:	9201      	str	r2, [sp, #4]
 8012b0e:	4293      	cmp	r3, r2
 8012b10:	d80c      	bhi.n	8012b2c <__multiply+0x7a>
 8012b12:	2e00      	cmp	r6, #0
 8012b14:	dd03      	ble.n	8012b1e <__multiply+0x6c>
 8012b16:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d05d      	beq.n	8012bda <__multiply+0x128>
 8012b1e:	6106      	str	r6, [r0, #16]
 8012b20:	b003      	add	sp, #12
 8012b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b26:	f843 2b04 	str.w	r2, [r3], #4
 8012b2a:	e7e3      	b.n	8012af4 <__multiply+0x42>
 8012b2c:	f8b2 b000 	ldrh.w	fp, [r2]
 8012b30:	f1bb 0f00 	cmp.w	fp, #0
 8012b34:	d023      	beq.n	8012b7e <__multiply+0xcc>
 8012b36:	4689      	mov	r9, r1
 8012b38:	46ac      	mov	ip, r5
 8012b3a:	f04f 0800 	mov.w	r8, #0
 8012b3e:	f859 4b04 	ldr.w	r4, [r9], #4
 8012b42:	f8dc a000 	ldr.w	sl, [ip]
 8012b46:	b2a3      	uxth	r3, r4
 8012b48:	fa1f fa8a 	uxth.w	sl, sl
 8012b4c:	fb0b a303 	mla	r3, fp, r3, sl
 8012b50:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012b54:	f8dc 4000 	ldr.w	r4, [ip]
 8012b58:	4443      	add	r3, r8
 8012b5a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012b5e:	fb0b 840a 	mla	r4, fp, sl, r8
 8012b62:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8012b66:	46e2      	mov	sl, ip
 8012b68:	b29b      	uxth	r3, r3
 8012b6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012b6e:	454f      	cmp	r7, r9
 8012b70:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012b74:	f84a 3b04 	str.w	r3, [sl], #4
 8012b78:	d82b      	bhi.n	8012bd2 <__multiply+0x120>
 8012b7a:	f8cc 8004 	str.w	r8, [ip, #4]
 8012b7e:	9b01      	ldr	r3, [sp, #4]
 8012b80:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8012b84:	3204      	adds	r2, #4
 8012b86:	f1ba 0f00 	cmp.w	sl, #0
 8012b8a:	d020      	beq.n	8012bce <__multiply+0x11c>
 8012b8c:	682b      	ldr	r3, [r5, #0]
 8012b8e:	4689      	mov	r9, r1
 8012b90:	46a8      	mov	r8, r5
 8012b92:	f04f 0b00 	mov.w	fp, #0
 8012b96:	f8b9 c000 	ldrh.w	ip, [r9]
 8012b9a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8012b9e:	fb0a 440c 	mla	r4, sl, ip, r4
 8012ba2:	445c      	add	r4, fp
 8012ba4:	46c4      	mov	ip, r8
 8012ba6:	b29b      	uxth	r3, r3
 8012ba8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012bac:	f84c 3b04 	str.w	r3, [ip], #4
 8012bb0:	f859 3b04 	ldr.w	r3, [r9], #4
 8012bb4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8012bb8:	0c1b      	lsrs	r3, r3, #16
 8012bba:	fb0a b303 	mla	r3, sl, r3, fp
 8012bbe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8012bc2:	454f      	cmp	r7, r9
 8012bc4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8012bc8:	d805      	bhi.n	8012bd6 <__multiply+0x124>
 8012bca:	f8c8 3004 	str.w	r3, [r8, #4]
 8012bce:	3504      	adds	r5, #4
 8012bd0:	e79b      	b.n	8012b0a <__multiply+0x58>
 8012bd2:	46d4      	mov	ip, sl
 8012bd4:	e7b3      	b.n	8012b3e <__multiply+0x8c>
 8012bd6:	46e0      	mov	r8, ip
 8012bd8:	e7dd      	b.n	8012b96 <__multiply+0xe4>
 8012bda:	3e01      	subs	r6, #1
 8012bdc:	e799      	b.n	8012b12 <__multiply+0x60>
	...

08012be0 <__pow5mult>:
 8012be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012be4:	4615      	mov	r5, r2
 8012be6:	f012 0203 	ands.w	r2, r2, #3
 8012bea:	4606      	mov	r6, r0
 8012bec:	460f      	mov	r7, r1
 8012bee:	d007      	beq.n	8012c00 <__pow5mult+0x20>
 8012bf0:	3a01      	subs	r2, #1
 8012bf2:	4c21      	ldr	r4, [pc, #132]	; (8012c78 <__pow5mult+0x98>)
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012bfa:	f7ff fe8a 	bl	8012912 <__multadd>
 8012bfe:	4607      	mov	r7, r0
 8012c00:	10ad      	asrs	r5, r5, #2
 8012c02:	d035      	beq.n	8012c70 <__pow5mult+0x90>
 8012c04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012c06:	b93c      	cbnz	r4, 8012c18 <__pow5mult+0x38>
 8012c08:	2010      	movs	r0, #16
 8012c0a:	f7fc fe81 	bl	800f910 <malloc>
 8012c0e:	6270      	str	r0, [r6, #36]	; 0x24
 8012c10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012c14:	6004      	str	r4, [r0, #0]
 8012c16:	60c4      	str	r4, [r0, #12]
 8012c18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012c1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012c20:	b94c      	cbnz	r4, 8012c36 <__pow5mult+0x56>
 8012c22:	f240 2171 	movw	r1, #625	; 0x271
 8012c26:	4630      	mov	r0, r6
 8012c28:	f7ff ff3a 	bl	8012aa0 <__i2b>
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012c32:	4604      	mov	r4, r0
 8012c34:	6003      	str	r3, [r0, #0]
 8012c36:	f04f 0800 	mov.w	r8, #0
 8012c3a:	07eb      	lsls	r3, r5, #31
 8012c3c:	d50a      	bpl.n	8012c54 <__pow5mult+0x74>
 8012c3e:	4639      	mov	r1, r7
 8012c40:	4622      	mov	r2, r4
 8012c42:	4630      	mov	r0, r6
 8012c44:	f7ff ff35 	bl	8012ab2 <__multiply>
 8012c48:	4639      	mov	r1, r7
 8012c4a:	4681      	mov	r9, r0
 8012c4c:	4630      	mov	r0, r6
 8012c4e:	f7ff fe49 	bl	80128e4 <_Bfree>
 8012c52:	464f      	mov	r7, r9
 8012c54:	106d      	asrs	r5, r5, #1
 8012c56:	d00b      	beq.n	8012c70 <__pow5mult+0x90>
 8012c58:	6820      	ldr	r0, [r4, #0]
 8012c5a:	b938      	cbnz	r0, 8012c6c <__pow5mult+0x8c>
 8012c5c:	4622      	mov	r2, r4
 8012c5e:	4621      	mov	r1, r4
 8012c60:	4630      	mov	r0, r6
 8012c62:	f7ff ff26 	bl	8012ab2 <__multiply>
 8012c66:	6020      	str	r0, [r4, #0]
 8012c68:	f8c0 8000 	str.w	r8, [r0]
 8012c6c:	4604      	mov	r4, r0
 8012c6e:	e7e4      	b.n	8012c3a <__pow5mult+0x5a>
 8012c70:	4638      	mov	r0, r7
 8012c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c76:	bf00      	nop
 8012c78:	08015270 	.word	0x08015270

08012c7c <__lshift>:
 8012c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c80:	460c      	mov	r4, r1
 8012c82:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012c86:	6923      	ldr	r3, [r4, #16]
 8012c88:	6849      	ldr	r1, [r1, #4]
 8012c8a:	eb0a 0903 	add.w	r9, sl, r3
 8012c8e:	68a3      	ldr	r3, [r4, #8]
 8012c90:	4607      	mov	r7, r0
 8012c92:	4616      	mov	r6, r2
 8012c94:	f109 0501 	add.w	r5, r9, #1
 8012c98:	42ab      	cmp	r3, r5
 8012c9a:	db32      	blt.n	8012d02 <__lshift+0x86>
 8012c9c:	4638      	mov	r0, r7
 8012c9e:	f7ff fded 	bl	801287c <_Balloc>
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	4680      	mov	r8, r0
 8012ca6:	f100 0114 	add.w	r1, r0, #20
 8012caa:	461a      	mov	r2, r3
 8012cac:	4553      	cmp	r3, sl
 8012cae:	db2b      	blt.n	8012d08 <__lshift+0x8c>
 8012cb0:	6920      	ldr	r0, [r4, #16]
 8012cb2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012cb6:	f104 0314 	add.w	r3, r4, #20
 8012cba:	f016 021f 	ands.w	r2, r6, #31
 8012cbe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012cc2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012cc6:	d025      	beq.n	8012d14 <__lshift+0x98>
 8012cc8:	f1c2 0e20 	rsb	lr, r2, #32
 8012ccc:	2000      	movs	r0, #0
 8012cce:	681e      	ldr	r6, [r3, #0]
 8012cd0:	468a      	mov	sl, r1
 8012cd2:	4096      	lsls	r6, r2
 8012cd4:	4330      	orrs	r0, r6
 8012cd6:	f84a 0b04 	str.w	r0, [sl], #4
 8012cda:	f853 0b04 	ldr.w	r0, [r3], #4
 8012cde:	459c      	cmp	ip, r3
 8012ce0:	fa20 f00e 	lsr.w	r0, r0, lr
 8012ce4:	d814      	bhi.n	8012d10 <__lshift+0x94>
 8012ce6:	6048      	str	r0, [r1, #4]
 8012ce8:	b108      	cbz	r0, 8012cee <__lshift+0x72>
 8012cea:	f109 0502 	add.w	r5, r9, #2
 8012cee:	3d01      	subs	r5, #1
 8012cf0:	4638      	mov	r0, r7
 8012cf2:	f8c8 5010 	str.w	r5, [r8, #16]
 8012cf6:	4621      	mov	r1, r4
 8012cf8:	f7ff fdf4 	bl	80128e4 <_Bfree>
 8012cfc:	4640      	mov	r0, r8
 8012cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d02:	3101      	adds	r1, #1
 8012d04:	005b      	lsls	r3, r3, #1
 8012d06:	e7c7      	b.n	8012c98 <__lshift+0x1c>
 8012d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012d0c:	3301      	adds	r3, #1
 8012d0e:	e7cd      	b.n	8012cac <__lshift+0x30>
 8012d10:	4651      	mov	r1, sl
 8012d12:	e7dc      	b.n	8012cce <__lshift+0x52>
 8012d14:	3904      	subs	r1, #4
 8012d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d1a:	f841 2f04 	str.w	r2, [r1, #4]!
 8012d1e:	459c      	cmp	ip, r3
 8012d20:	d8f9      	bhi.n	8012d16 <__lshift+0x9a>
 8012d22:	e7e4      	b.n	8012cee <__lshift+0x72>

08012d24 <__mcmp>:
 8012d24:	6903      	ldr	r3, [r0, #16]
 8012d26:	690a      	ldr	r2, [r1, #16]
 8012d28:	1a9b      	subs	r3, r3, r2
 8012d2a:	b530      	push	{r4, r5, lr}
 8012d2c:	d10c      	bne.n	8012d48 <__mcmp+0x24>
 8012d2e:	0092      	lsls	r2, r2, #2
 8012d30:	3014      	adds	r0, #20
 8012d32:	3114      	adds	r1, #20
 8012d34:	1884      	adds	r4, r0, r2
 8012d36:	4411      	add	r1, r2
 8012d38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012d3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012d40:	4295      	cmp	r5, r2
 8012d42:	d003      	beq.n	8012d4c <__mcmp+0x28>
 8012d44:	d305      	bcc.n	8012d52 <__mcmp+0x2e>
 8012d46:	2301      	movs	r3, #1
 8012d48:	4618      	mov	r0, r3
 8012d4a:	bd30      	pop	{r4, r5, pc}
 8012d4c:	42a0      	cmp	r0, r4
 8012d4e:	d3f3      	bcc.n	8012d38 <__mcmp+0x14>
 8012d50:	e7fa      	b.n	8012d48 <__mcmp+0x24>
 8012d52:	f04f 33ff 	mov.w	r3, #4294967295
 8012d56:	e7f7      	b.n	8012d48 <__mcmp+0x24>

08012d58 <__mdiff>:
 8012d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d5c:	460d      	mov	r5, r1
 8012d5e:	4607      	mov	r7, r0
 8012d60:	4611      	mov	r1, r2
 8012d62:	4628      	mov	r0, r5
 8012d64:	4614      	mov	r4, r2
 8012d66:	f7ff ffdd 	bl	8012d24 <__mcmp>
 8012d6a:	1e06      	subs	r6, r0, #0
 8012d6c:	d108      	bne.n	8012d80 <__mdiff+0x28>
 8012d6e:	4631      	mov	r1, r6
 8012d70:	4638      	mov	r0, r7
 8012d72:	f7ff fd83 	bl	801287c <_Balloc>
 8012d76:	2301      	movs	r3, #1
 8012d78:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d80:	bfa4      	itt	ge
 8012d82:	4623      	movge	r3, r4
 8012d84:	462c      	movge	r4, r5
 8012d86:	4638      	mov	r0, r7
 8012d88:	6861      	ldr	r1, [r4, #4]
 8012d8a:	bfa6      	itte	ge
 8012d8c:	461d      	movge	r5, r3
 8012d8e:	2600      	movge	r6, #0
 8012d90:	2601      	movlt	r6, #1
 8012d92:	f7ff fd73 	bl	801287c <_Balloc>
 8012d96:	692b      	ldr	r3, [r5, #16]
 8012d98:	60c6      	str	r6, [r0, #12]
 8012d9a:	6926      	ldr	r6, [r4, #16]
 8012d9c:	f105 0914 	add.w	r9, r5, #20
 8012da0:	f104 0214 	add.w	r2, r4, #20
 8012da4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8012da8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012dac:	f100 0514 	add.w	r5, r0, #20
 8012db0:	f04f 0e00 	mov.w	lr, #0
 8012db4:	f852 ab04 	ldr.w	sl, [r2], #4
 8012db8:	f859 4b04 	ldr.w	r4, [r9], #4
 8012dbc:	fa1e f18a 	uxtah	r1, lr, sl
 8012dc0:	b2a3      	uxth	r3, r4
 8012dc2:	1ac9      	subs	r1, r1, r3
 8012dc4:	0c23      	lsrs	r3, r4, #16
 8012dc6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8012dca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8012dce:	b289      	uxth	r1, r1
 8012dd0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8012dd4:	45c8      	cmp	r8, r9
 8012dd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8012dda:	4694      	mov	ip, r2
 8012ddc:	f845 3b04 	str.w	r3, [r5], #4
 8012de0:	d8e8      	bhi.n	8012db4 <__mdiff+0x5c>
 8012de2:	45bc      	cmp	ip, r7
 8012de4:	d304      	bcc.n	8012df0 <__mdiff+0x98>
 8012de6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8012dea:	b183      	cbz	r3, 8012e0e <__mdiff+0xb6>
 8012dec:	6106      	str	r6, [r0, #16]
 8012dee:	e7c5      	b.n	8012d7c <__mdiff+0x24>
 8012df0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012df4:	fa1e f381 	uxtah	r3, lr, r1
 8012df8:	141a      	asrs	r2, r3, #16
 8012dfa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012dfe:	b29b      	uxth	r3, r3
 8012e00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012e04:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012e08:	f845 3b04 	str.w	r3, [r5], #4
 8012e0c:	e7e9      	b.n	8012de2 <__mdiff+0x8a>
 8012e0e:	3e01      	subs	r6, #1
 8012e10:	e7e9      	b.n	8012de6 <__mdiff+0x8e>
	...

08012e14 <__ulp>:
 8012e14:	4b12      	ldr	r3, [pc, #72]	; (8012e60 <__ulp+0x4c>)
 8012e16:	ee10 2a90 	vmov	r2, s1
 8012e1a:	401a      	ands	r2, r3
 8012e1c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	dd04      	ble.n	8012e2e <__ulp+0x1a>
 8012e24:	2000      	movs	r0, #0
 8012e26:	4619      	mov	r1, r3
 8012e28:	ec41 0b10 	vmov	d0, r0, r1
 8012e2c:	4770      	bx	lr
 8012e2e:	425b      	negs	r3, r3
 8012e30:	151b      	asrs	r3, r3, #20
 8012e32:	2b13      	cmp	r3, #19
 8012e34:	f04f 0000 	mov.w	r0, #0
 8012e38:	f04f 0100 	mov.w	r1, #0
 8012e3c:	dc04      	bgt.n	8012e48 <__ulp+0x34>
 8012e3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8012e42:	fa42 f103 	asr.w	r1, r2, r3
 8012e46:	e7ef      	b.n	8012e28 <__ulp+0x14>
 8012e48:	3b14      	subs	r3, #20
 8012e4a:	2b1e      	cmp	r3, #30
 8012e4c:	f04f 0201 	mov.w	r2, #1
 8012e50:	bfda      	itte	le
 8012e52:	f1c3 031f 	rsble	r3, r3, #31
 8012e56:	fa02 f303 	lslle.w	r3, r2, r3
 8012e5a:	4613      	movgt	r3, r2
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	e7e3      	b.n	8012e28 <__ulp+0x14>
 8012e60:	7ff00000 	.word	0x7ff00000

08012e64 <__b2d>:
 8012e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e66:	6905      	ldr	r5, [r0, #16]
 8012e68:	f100 0714 	add.w	r7, r0, #20
 8012e6c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012e70:	1f2e      	subs	r6, r5, #4
 8012e72:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012e76:	4620      	mov	r0, r4
 8012e78:	f7ff fdc4 	bl	8012a04 <__hi0bits>
 8012e7c:	f1c0 0320 	rsb	r3, r0, #32
 8012e80:	280a      	cmp	r0, #10
 8012e82:	600b      	str	r3, [r1, #0]
 8012e84:	f8df c074 	ldr.w	ip, [pc, #116]	; 8012efc <__b2d+0x98>
 8012e88:	dc14      	bgt.n	8012eb4 <__b2d+0x50>
 8012e8a:	f1c0 0e0b 	rsb	lr, r0, #11
 8012e8e:	fa24 f10e 	lsr.w	r1, r4, lr
 8012e92:	42b7      	cmp	r7, r6
 8012e94:	ea41 030c 	orr.w	r3, r1, ip
 8012e98:	bf34      	ite	cc
 8012e9a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012e9e:	2100      	movcs	r1, #0
 8012ea0:	3015      	adds	r0, #21
 8012ea2:	fa04 f000 	lsl.w	r0, r4, r0
 8012ea6:	fa21 f10e 	lsr.w	r1, r1, lr
 8012eaa:	ea40 0201 	orr.w	r2, r0, r1
 8012eae:	ec43 2b10 	vmov	d0, r2, r3
 8012eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012eb4:	42b7      	cmp	r7, r6
 8012eb6:	bf3a      	itte	cc
 8012eb8:	f1a5 0608 	subcc.w	r6, r5, #8
 8012ebc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012ec0:	2100      	movcs	r1, #0
 8012ec2:	380b      	subs	r0, #11
 8012ec4:	d015      	beq.n	8012ef2 <__b2d+0x8e>
 8012ec6:	4084      	lsls	r4, r0
 8012ec8:	f1c0 0520 	rsb	r5, r0, #32
 8012ecc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8012ed0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8012ed4:	42be      	cmp	r6, r7
 8012ed6:	fa21 fc05 	lsr.w	ip, r1, r5
 8012eda:	ea44 030c 	orr.w	r3, r4, ip
 8012ede:	bf8c      	ite	hi
 8012ee0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012ee4:	2400      	movls	r4, #0
 8012ee6:	fa01 f000 	lsl.w	r0, r1, r0
 8012eea:	40ec      	lsrs	r4, r5
 8012eec:	ea40 0204 	orr.w	r2, r0, r4
 8012ef0:	e7dd      	b.n	8012eae <__b2d+0x4a>
 8012ef2:	ea44 030c 	orr.w	r3, r4, ip
 8012ef6:	460a      	mov	r2, r1
 8012ef8:	e7d9      	b.n	8012eae <__b2d+0x4a>
 8012efa:	bf00      	nop
 8012efc:	3ff00000 	.word	0x3ff00000

08012f00 <__d2b>:
 8012f00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012f04:	460e      	mov	r6, r1
 8012f06:	2101      	movs	r1, #1
 8012f08:	ec59 8b10 	vmov	r8, r9, d0
 8012f0c:	4615      	mov	r5, r2
 8012f0e:	f7ff fcb5 	bl	801287c <_Balloc>
 8012f12:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012f16:	4607      	mov	r7, r0
 8012f18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012f1c:	bb34      	cbnz	r4, 8012f6c <__d2b+0x6c>
 8012f1e:	9301      	str	r3, [sp, #4]
 8012f20:	f1b8 0300 	subs.w	r3, r8, #0
 8012f24:	d027      	beq.n	8012f76 <__d2b+0x76>
 8012f26:	a802      	add	r0, sp, #8
 8012f28:	f840 3d08 	str.w	r3, [r0, #-8]!
 8012f2c:	f7ff fd89 	bl	8012a42 <__lo0bits>
 8012f30:	9900      	ldr	r1, [sp, #0]
 8012f32:	b1f0      	cbz	r0, 8012f72 <__d2b+0x72>
 8012f34:	9a01      	ldr	r2, [sp, #4]
 8012f36:	f1c0 0320 	rsb	r3, r0, #32
 8012f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8012f3e:	430b      	orrs	r3, r1
 8012f40:	40c2      	lsrs	r2, r0
 8012f42:	617b      	str	r3, [r7, #20]
 8012f44:	9201      	str	r2, [sp, #4]
 8012f46:	9b01      	ldr	r3, [sp, #4]
 8012f48:	61bb      	str	r3, [r7, #24]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	bf14      	ite	ne
 8012f4e:	2102      	movne	r1, #2
 8012f50:	2101      	moveq	r1, #1
 8012f52:	6139      	str	r1, [r7, #16]
 8012f54:	b1c4      	cbz	r4, 8012f88 <__d2b+0x88>
 8012f56:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8012f5a:	4404      	add	r4, r0
 8012f5c:	6034      	str	r4, [r6, #0]
 8012f5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012f62:	6028      	str	r0, [r5, #0]
 8012f64:	4638      	mov	r0, r7
 8012f66:	b003      	add	sp, #12
 8012f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012f70:	e7d5      	b.n	8012f1e <__d2b+0x1e>
 8012f72:	6179      	str	r1, [r7, #20]
 8012f74:	e7e7      	b.n	8012f46 <__d2b+0x46>
 8012f76:	a801      	add	r0, sp, #4
 8012f78:	f7ff fd63 	bl	8012a42 <__lo0bits>
 8012f7c:	9b01      	ldr	r3, [sp, #4]
 8012f7e:	617b      	str	r3, [r7, #20]
 8012f80:	2101      	movs	r1, #1
 8012f82:	6139      	str	r1, [r7, #16]
 8012f84:	3020      	adds	r0, #32
 8012f86:	e7e5      	b.n	8012f54 <__d2b+0x54>
 8012f88:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8012f8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012f90:	6030      	str	r0, [r6, #0]
 8012f92:	6918      	ldr	r0, [r3, #16]
 8012f94:	f7ff fd36 	bl	8012a04 <__hi0bits>
 8012f98:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8012f9c:	e7e1      	b.n	8012f62 <__d2b+0x62>

08012f9e <__ratio>:
 8012f9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fa2:	4688      	mov	r8, r1
 8012fa4:	4669      	mov	r1, sp
 8012fa6:	4681      	mov	r9, r0
 8012fa8:	f7ff ff5c 	bl	8012e64 <__b2d>
 8012fac:	a901      	add	r1, sp, #4
 8012fae:	4640      	mov	r0, r8
 8012fb0:	ec57 6b10 	vmov	r6, r7, d0
 8012fb4:	f7ff ff56 	bl	8012e64 <__b2d>
 8012fb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012fbc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012fc0:	eba3 0c02 	sub.w	ip, r3, r2
 8012fc4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012fc8:	1a9b      	subs	r3, r3, r2
 8012fca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012fce:	ec5b ab10 	vmov	sl, fp, d0
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	bfce      	itee	gt
 8012fd6:	463a      	movgt	r2, r7
 8012fd8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012fdc:	465a      	movle	r2, fp
 8012fde:	4659      	mov	r1, fp
 8012fe0:	463d      	mov	r5, r7
 8012fe2:	bfd4      	ite	le
 8012fe4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8012fe8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8012fec:	4630      	mov	r0, r6
 8012fee:	ee10 2a10 	vmov	r2, s0
 8012ff2:	460b      	mov	r3, r1
 8012ff4:	4629      	mov	r1, r5
 8012ff6:	f7ed fc29 	bl	800084c <__aeabi_ddiv>
 8012ffa:	ec41 0b10 	vmov	d0, r0, r1
 8012ffe:	b003      	add	sp, #12
 8013000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013004 <__copybits>:
 8013004:	3901      	subs	r1, #1
 8013006:	b510      	push	{r4, lr}
 8013008:	1149      	asrs	r1, r1, #5
 801300a:	6914      	ldr	r4, [r2, #16]
 801300c:	3101      	adds	r1, #1
 801300e:	f102 0314 	add.w	r3, r2, #20
 8013012:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013016:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801301a:	42a3      	cmp	r3, r4
 801301c:	4602      	mov	r2, r0
 801301e:	d303      	bcc.n	8013028 <__copybits+0x24>
 8013020:	2300      	movs	r3, #0
 8013022:	428a      	cmp	r2, r1
 8013024:	d305      	bcc.n	8013032 <__copybits+0x2e>
 8013026:	bd10      	pop	{r4, pc}
 8013028:	f853 2b04 	ldr.w	r2, [r3], #4
 801302c:	f840 2b04 	str.w	r2, [r0], #4
 8013030:	e7f3      	b.n	801301a <__copybits+0x16>
 8013032:	f842 3b04 	str.w	r3, [r2], #4
 8013036:	e7f4      	b.n	8013022 <__copybits+0x1e>

08013038 <__any_on>:
 8013038:	f100 0214 	add.w	r2, r0, #20
 801303c:	6900      	ldr	r0, [r0, #16]
 801303e:	114b      	asrs	r3, r1, #5
 8013040:	4298      	cmp	r0, r3
 8013042:	b510      	push	{r4, lr}
 8013044:	db11      	blt.n	801306a <__any_on+0x32>
 8013046:	dd0a      	ble.n	801305e <__any_on+0x26>
 8013048:	f011 011f 	ands.w	r1, r1, #31
 801304c:	d007      	beq.n	801305e <__any_on+0x26>
 801304e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013052:	fa24 f001 	lsr.w	r0, r4, r1
 8013056:	fa00 f101 	lsl.w	r1, r0, r1
 801305a:	428c      	cmp	r4, r1
 801305c:	d10b      	bne.n	8013076 <__any_on+0x3e>
 801305e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013062:	4293      	cmp	r3, r2
 8013064:	d803      	bhi.n	801306e <__any_on+0x36>
 8013066:	2000      	movs	r0, #0
 8013068:	bd10      	pop	{r4, pc}
 801306a:	4603      	mov	r3, r0
 801306c:	e7f7      	b.n	801305e <__any_on+0x26>
 801306e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013072:	2900      	cmp	r1, #0
 8013074:	d0f5      	beq.n	8013062 <__any_on+0x2a>
 8013076:	2001      	movs	r0, #1
 8013078:	e7f6      	b.n	8013068 <__any_on+0x30>

0801307a <_calloc_r>:
 801307a:	b538      	push	{r3, r4, r5, lr}
 801307c:	fb02 f401 	mul.w	r4, r2, r1
 8013080:	4621      	mov	r1, r4
 8013082:	f7fc fcb7 	bl	800f9f4 <_malloc_r>
 8013086:	4605      	mov	r5, r0
 8013088:	b118      	cbz	r0, 8013092 <_calloc_r+0x18>
 801308a:	4622      	mov	r2, r4
 801308c:	2100      	movs	r1, #0
 801308e:	f7fc fc5a 	bl	800f946 <memset>
 8013092:	4628      	mov	r0, r5
 8013094:	bd38      	pop	{r3, r4, r5, pc}

08013096 <__ssputs_r>:
 8013096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801309a:	688e      	ldr	r6, [r1, #8]
 801309c:	429e      	cmp	r6, r3
 801309e:	4682      	mov	sl, r0
 80130a0:	460c      	mov	r4, r1
 80130a2:	4690      	mov	r8, r2
 80130a4:	4699      	mov	r9, r3
 80130a6:	d837      	bhi.n	8013118 <__ssputs_r+0x82>
 80130a8:	898a      	ldrh	r2, [r1, #12]
 80130aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80130ae:	d031      	beq.n	8013114 <__ssputs_r+0x7e>
 80130b0:	6825      	ldr	r5, [r4, #0]
 80130b2:	6909      	ldr	r1, [r1, #16]
 80130b4:	1a6f      	subs	r7, r5, r1
 80130b6:	6965      	ldr	r5, [r4, #20]
 80130b8:	2302      	movs	r3, #2
 80130ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80130be:	fb95 f5f3 	sdiv	r5, r5, r3
 80130c2:	f109 0301 	add.w	r3, r9, #1
 80130c6:	443b      	add	r3, r7
 80130c8:	429d      	cmp	r5, r3
 80130ca:	bf38      	it	cc
 80130cc:	461d      	movcc	r5, r3
 80130ce:	0553      	lsls	r3, r2, #21
 80130d0:	d530      	bpl.n	8013134 <__ssputs_r+0x9e>
 80130d2:	4629      	mov	r1, r5
 80130d4:	f7fc fc8e 	bl	800f9f4 <_malloc_r>
 80130d8:	4606      	mov	r6, r0
 80130da:	b950      	cbnz	r0, 80130f2 <__ssputs_r+0x5c>
 80130dc:	230c      	movs	r3, #12
 80130de:	f8ca 3000 	str.w	r3, [sl]
 80130e2:	89a3      	ldrh	r3, [r4, #12]
 80130e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130e8:	81a3      	strh	r3, [r4, #12]
 80130ea:	f04f 30ff 	mov.w	r0, #4294967295
 80130ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130f2:	463a      	mov	r2, r7
 80130f4:	6921      	ldr	r1, [r4, #16]
 80130f6:	f7fc fc1b 	bl	800f930 <memcpy>
 80130fa:	89a3      	ldrh	r3, [r4, #12]
 80130fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013104:	81a3      	strh	r3, [r4, #12]
 8013106:	6126      	str	r6, [r4, #16]
 8013108:	6165      	str	r5, [r4, #20]
 801310a:	443e      	add	r6, r7
 801310c:	1bed      	subs	r5, r5, r7
 801310e:	6026      	str	r6, [r4, #0]
 8013110:	60a5      	str	r5, [r4, #8]
 8013112:	464e      	mov	r6, r9
 8013114:	454e      	cmp	r6, r9
 8013116:	d900      	bls.n	801311a <__ssputs_r+0x84>
 8013118:	464e      	mov	r6, r9
 801311a:	4632      	mov	r2, r6
 801311c:	4641      	mov	r1, r8
 801311e:	6820      	ldr	r0, [r4, #0]
 8013120:	f000 f919 	bl	8013356 <memmove>
 8013124:	68a3      	ldr	r3, [r4, #8]
 8013126:	1b9b      	subs	r3, r3, r6
 8013128:	60a3      	str	r3, [r4, #8]
 801312a:	6823      	ldr	r3, [r4, #0]
 801312c:	441e      	add	r6, r3
 801312e:	6026      	str	r6, [r4, #0]
 8013130:	2000      	movs	r0, #0
 8013132:	e7dc      	b.n	80130ee <__ssputs_r+0x58>
 8013134:	462a      	mov	r2, r5
 8013136:	f000 f927 	bl	8013388 <_realloc_r>
 801313a:	4606      	mov	r6, r0
 801313c:	2800      	cmp	r0, #0
 801313e:	d1e2      	bne.n	8013106 <__ssputs_r+0x70>
 8013140:	6921      	ldr	r1, [r4, #16]
 8013142:	4650      	mov	r0, sl
 8013144:	f7fc fc08 	bl	800f958 <_free_r>
 8013148:	e7c8      	b.n	80130dc <__ssputs_r+0x46>
	...

0801314c <_svfiprintf_r>:
 801314c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013150:	461d      	mov	r5, r3
 8013152:	898b      	ldrh	r3, [r1, #12]
 8013154:	061f      	lsls	r7, r3, #24
 8013156:	b09d      	sub	sp, #116	; 0x74
 8013158:	4680      	mov	r8, r0
 801315a:	460c      	mov	r4, r1
 801315c:	4616      	mov	r6, r2
 801315e:	d50f      	bpl.n	8013180 <_svfiprintf_r+0x34>
 8013160:	690b      	ldr	r3, [r1, #16]
 8013162:	b96b      	cbnz	r3, 8013180 <_svfiprintf_r+0x34>
 8013164:	2140      	movs	r1, #64	; 0x40
 8013166:	f7fc fc45 	bl	800f9f4 <_malloc_r>
 801316a:	6020      	str	r0, [r4, #0]
 801316c:	6120      	str	r0, [r4, #16]
 801316e:	b928      	cbnz	r0, 801317c <_svfiprintf_r+0x30>
 8013170:	230c      	movs	r3, #12
 8013172:	f8c8 3000 	str.w	r3, [r8]
 8013176:	f04f 30ff 	mov.w	r0, #4294967295
 801317a:	e0c8      	b.n	801330e <_svfiprintf_r+0x1c2>
 801317c:	2340      	movs	r3, #64	; 0x40
 801317e:	6163      	str	r3, [r4, #20]
 8013180:	2300      	movs	r3, #0
 8013182:	9309      	str	r3, [sp, #36]	; 0x24
 8013184:	2320      	movs	r3, #32
 8013186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801318a:	2330      	movs	r3, #48	; 0x30
 801318c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013190:	9503      	str	r5, [sp, #12]
 8013192:	f04f 0b01 	mov.w	fp, #1
 8013196:	4637      	mov	r7, r6
 8013198:	463d      	mov	r5, r7
 801319a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801319e:	b10b      	cbz	r3, 80131a4 <_svfiprintf_r+0x58>
 80131a0:	2b25      	cmp	r3, #37	; 0x25
 80131a2:	d13e      	bne.n	8013222 <_svfiprintf_r+0xd6>
 80131a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80131a8:	d00b      	beq.n	80131c2 <_svfiprintf_r+0x76>
 80131aa:	4653      	mov	r3, sl
 80131ac:	4632      	mov	r2, r6
 80131ae:	4621      	mov	r1, r4
 80131b0:	4640      	mov	r0, r8
 80131b2:	f7ff ff70 	bl	8013096 <__ssputs_r>
 80131b6:	3001      	adds	r0, #1
 80131b8:	f000 80a4 	beq.w	8013304 <_svfiprintf_r+0x1b8>
 80131bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131be:	4453      	add	r3, sl
 80131c0:	9309      	str	r3, [sp, #36]	; 0x24
 80131c2:	783b      	ldrb	r3, [r7, #0]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	f000 809d 	beq.w	8013304 <_svfiprintf_r+0x1b8>
 80131ca:	2300      	movs	r3, #0
 80131cc:	f04f 32ff 	mov.w	r2, #4294967295
 80131d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131d4:	9304      	str	r3, [sp, #16]
 80131d6:	9307      	str	r3, [sp, #28]
 80131d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80131dc:	931a      	str	r3, [sp, #104]	; 0x68
 80131de:	462f      	mov	r7, r5
 80131e0:	2205      	movs	r2, #5
 80131e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80131e6:	4850      	ldr	r0, [pc, #320]	; (8013328 <_svfiprintf_r+0x1dc>)
 80131e8:	f7ec fffa 	bl	80001e0 <memchr>
 80131ec:	9b04      	ldr	r3, [sp, #16]
 80131ee:	b9d0      	cbnz	r0, 8013226 <_svfiprintf_r+0xda>
 80131f0:	06d9      	lsls	r1, r3, #27
 80131f2:	bf44      	itt	mi
 80131f4:	2220      	movmi	r2, #32
 80131f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80131fa:	071a      	lsls	r2, r3, #28
 80131fc:	bf44      	itt	mi
 80131fe:	222b      	movmi	r2, #43	; 0x2b
 8013200:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013204:	782a      	ldrb	r2, [r5, #0]
 8013206:	2a2a      	cmp	r2, #42	; 0x2a
 8013208:	d015      	beq.n	8013236 <_svfiprintf_r+0xea>
 801320a:	9a07      	ldr	r2, [sp, #28]
 801320c:	462f      	mov	r7, r5
 801320e:	2000      	movs	r0, #0
 8013210:	250a      	movs	r5, #10
 8013212:	4639      	mov	r1, r7
 8013214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013218:	3b30      	subs	r3, #48	; 0x30
 801321a:	2b09      	cmp	r3, #9
 801321c:	d94d      	bls.n	80132ba <_svfiprintf_r+0x16e>
 801321e:	b1b8      	cbz	r0, 8013250 <_svfiprintf_r+0x104>
 8013220:	e00f      	b.n	8013242 <_svfiprintf_r+0xf6>
 8013222:	462f      	mov	r7, r5
 8013224:	e7b8      	b.n	8013198 <_svfiprintf_r+0x4c>
 8013226:	4a40      	ldr	r2, [pc, #256]	; (8013328 <_svfiprintf_r+0x1dc>)
 8013228:	1a80      	subs	r0, r0, r2
 801322a:	fa0b f000 	lsl.w	r0, fp, r0
 801322e:	4318      	orrs	r0, r3
 8013230:	9004      	str	r0, [sp, #16]
 8013232:	463d      	mov	r5, r7
 8013234:	e7d3      	b.n	80131de <_svfiprintf_r+0x92>
 8013236:	9a03      	ldr	r2, [sp, #12]
 8013238:	1d11      	adds	r1, r2, #4
 801323a:	6812      	ldr	r2, [r2, #0]
 801323c:	9103      	str	r1, [sp, #12]
 801323e:	2a00      	cmp	r2, #0
 8013240:	db01      	blt.n	8013246 <_svfiprintf_r+0xfa>
 8013242:	9207      	str	r2, [sp, #28]
 8013244:	e004      	b.n	8013250 <_svfiprintf_r+0x104>
 8013246:	4252      	negs	r2, r2
 8013248:	f043 0302 	orr.w	r3, r3, #2
 801324c:	9207      	str	r2, [sp, #28]
 801324e:	9304      	str	r3, [sp, #16]
 8013250:	783b      	ldrb	r3, [r7, #0]
 8013252:	2b2e      	cmp	r3, #46	; 0x2e
 8013254:	d10c      	bne.n	8013270 <_svfiprintf_r+0x124>
 8013256:	787b      	ldrb	r3, [r7, #1]
 8013258:	2b2a      	cmp	r3, #42	; 0x2a
 801325a:	d133      	bne.n	80132c4 <_svfiprintf_r+0x178>
 801325c:	9b03      	ldr	r3, [sp, #12]
 801325e:	1d1a      	adds	r2, r3, #4
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	9203      	str	r2, [sp, #12]
 8013264:	2b00      	cmp	r3, #0
 8013266:	bfb8      	it	lt
 8013268:	f04f 33ff 	movlt.w	r3, #4294967295
 801326c:	3702      	adds	r7, #2
 801326e:	9305      	str	r3, [sp, #20]
 8013270:	4d2e      	ldr	r5, [pc, #184]	; (801332c <_svfiprintf_r+0x1e0>)
 8013272:	7839      	ldrb	r1, [r7, #0]
 8013274:	2203      	movs	r2, #3
 8013276:	4628      	mov	r0, r5
 8013278:	f7ec ffb2 	bl	80001e0 <memchr>
 801327c:	b138      	cbz	r0, 801328e <_svfiprintf_r+0x142>
 801327e:	2340      	movs	r3, #64	; 0x40
 8013280:	1b40      	subs	r0, r0, r5
 8013282:	fa03 f000 	lsl.w	r0, r3, r0
 8013286:	9b04      	ldr	r3, [sp, #16]
 8013288:	4303      	orrs	r3, r0
 801328a:	3701      	adds	r7, #1
 801328c:	9304      	str	r3, [sp, #16]
 801328e:	7839      	ldrb	r1, [r7, #0]
 8013290:	4827      	ldr	r0, [pc, #156]	; (8013330 <_svfiprintf_r+0x1e4>)
 8013292:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013296:	2206      	movs	r2, #6
 8013298:	1c7e      	adds	r6, r7, #1
 801329a:	f7ec ffa1 	bl	80001e0 <memchr>
 801329e:	2800      	cmp	r0, #0
 80132a0:	d038      	beq.n	8013314 <_svfiprintf_r+0x1c8>
 80132a2:	4b24      	ldr	r3, [pc, #144]	; (8013334 <_svfiprintf_r+0x1e8>)
 80132a4:	bb13      	cbnz	r3, 80132ec <_svfiprintf_r+0x1a0>
 80132a6:	9b03      	ldr	r3, [sp, #12]
 80132a8:	3307      	adds	r3, #7
 80132aa:	f023 0307 	bic.w	r3, r3, #7
 80132ae:	3308      	adds	r3, #8
 80132b0:	9303      	str	r3, [sp, #12]
 80132b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132b4:	444b      	add	r3, r9
 80132b6:	9309      	str	r3, [sp, #36]	; 0x24
 80132b8:	e76d      	b.n	8013196 <_svfiprintf_r+0x4a>
 80132ba:	fb05 3202 	mla	r2, r5, r2, r3
 80132be:	2001      	movs	r0, #1
 80132c0:	460f      	mov	r7, r1
 80132c2:	e7a6      	b.n	8013212 <_svfiprintf_r+0xc6>
 80132c4:	2300      	movs	r3, #0
 80132c6:	3701      	adds	r7, #1
 80132c8:	9305      	str	r3, [sp, #20]
 80132ca:	4619      	mov	r1, r3
 80132cc:	250a      	movs	r5, #10
 80132ce:	4638      	mov	r0, r7
 80132d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132d4:	3a30      	subs	r2, #48	; 0x30
 80132d6:	2a09      	cmp	r2, #9
 80132d8:	d903      	bls.n	80132e2 <_svfiprintf_r+0x196>
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d0c8      	beq.n	8013270 <_svfiprintf_r+0x124>
 80132de:	9105      	str	r1, [sp, #20]
 80132e0:	e7c6      	b.n	8013270 <_svfiprintf_r+0x124>
 80132e2:	fb05 2101 	mla	r1, r5, r1, r2
 80132e6:	2301      	movs	r3, #1
 80132e8:	4607      	mov	r7, r0
 80132ea:	e7f0      	b.n	80132ce <_svfiprintf_r+0x182>
 80132ec:	ab03      	add	r3, sp, #12
 80132ee:	9300      	str	r3, [sp, #0]
 80132f0:	4622      	mov	r2, r4
 80132f2:	4b11      	ldr	r3, [pc, #68]	; (8013338 <_svfiprintf_r+0x1ec>)
 80132f4:	a904      	add	r1, sp, #16
 80132f6:	4640      	mov	r0, r8
 80132f8:	f7fc fc6a 	bl	800fbd0 <_printf_float>
 80132fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013300:	4681      	mov	r9, r0
 8013302:	d1d6      	bne.n	80132b2 <_svfiprintf_r+0x166>
 8013304:	89a3      	ldrh	r3, [r4, #12]
 8013306:	065b      	lsls	r3, r3, #25
 8013308:	f53f af35 	bmi.w	8013176 <_svfiprintf_r+0x2a>
 801330c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801330e:	b01d      	add	sp, #116	; 0x74
 8013310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013314:	ab03      	add	r3, sp, #12
 8013316:	9300      	str	r3, [sp, #0]
 8013318:	4622      	mov	r2, r4
 801331a:	4b07      	ldr	r3, [pc, #28]	; (8013338 <_svfiprintf_r+0x1ec>)
 801331c:	a904      	add	r1, sp, #16
 801331e:	4640      	mov	r0, r8
 8013320:	f7fc ff0c 	bl	801013c <_printf_i>
 8013324:	e7ea      	b.n	80132fc <_svfiprintf_r+0x1b0>
 8013326:	bf00      	nop
 8013328:	0801527c 	.word	0x0801527c
 801332c:	08015282 	.word	0x08015282
 8013330:	08015286 	.word	0x08015286
 8013334:	0800fbd1 	.word	0x0800fbd1
 8013338:	08013097 	.word	0x08013097

0801333c <__ascii_wctomb>:
 801333c:	b149      	cbz	r1, 8013352 <__ascii_wctomb+0x16>
 801333e:	2aff      	cmp	r2, #255	; 0xff
 8013340:	bf85      	ittet	hi
 8013342:	238a      	movhi	r3, #138	; 0x8a
 8013344:	6003      	strhi	r3, [r0, #0]
 8013346:	700a      	strbls	r2, [r1, #0]
 8013348:	f04f 30ff 	movhi.w	r0, #4294967295
 801334c:	bf98      	it	ls
 801334e:	2001      	movls	r0, #1
 8013350:	4770      	bx	lr
 8013352:	4608      	mov	r0, r1
 8013354:	4770      	bx	lr

08013356 <memmove>:
 8013356:	4288      	cmp	r0, r1
 8013358:	b510      	push	{r4, lr}
 801335a:	eb01 0302 	add.w	r3, r1, r2
 801335e:	d807      	bhi.n	8013370 <memmove+0x1a>
 8013360:	1e42      	subs	r2, r0, #1
 8013362:	4299      	cmp	r1, r3
 8013364:	d00a      	beq.n	801337c <memmove+0x26>
 8013366:	f811 4b01 	ldrb.w	r4, [r1], #1
 801336a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801336e:	e7f8      	b.n	8013362 <memmove+0xc>
 8013370:	4283      	cmp	r3, r0
 8013372:	d9f5      	bls.n	8013360 <memmove+0xa>
 8013374:	1881      	adds	r1, r0, r2
 8013376:	1ad2      	subs	r2, r2, r3
 8013378:	42d3      	cmn	r3, r2
 801337a:	d100      	bne.n	801337e <memmove+0x28>
 801337c:	bd10      	pop	{r4, pc}
 801337e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013382:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013386:	e7f7      	b.n	8013378 <memmove+0x22>

08013388 <_realloc_r>:
 8013388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801338a:	4607      	mov	r7, r0
 801338c:	4614      	mov	r4, r2
 801338e:	460e      	mov	r6, r1
 8013390:	b921      	cbnz	r1, 801339c <_realloc_r+0x14>
 8013392:	4611      	mov	r1, r2
 8013394:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013398:	f7fc bb2c 	b.w	800f9f4 <_malloc_r>
 801339c:	b922      	cbnz	r2, 80133a8 <_realloc_r+0x20>
 801339e:	f7fc fadb 	bl	800f958 <_free_r>
 80133a2:	4625      	mov	r5, r4
 80133a4:	4628      	mov	r0, r5
 80133a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133a8:	f000 f814 	bl	80133d4 <_malloc_usable_size_r>
 80133ac:	42a0      	cmp	r0, r4
 80133ae:	d20f      	bcs.n	80133d0 <_realloc_r+0x48>
 80133b0:	4621      	mov	r1, r4
 80133b2:	4638      	mov	r0, r7
 80133b4:	f7fc fb1e 	bl	800f9f4 <_malloc_r>
 80133b8:	4605      	mov	r5, r0
 80133ba:	2800      	cmp	r0, #0
 80133bc:	d0f2      	beq.n	80133a4 <_realloc_r+0x1c>
 80133be:	4631      	mov	r1, r6
 80133c0:	4622      	mov	r2, r4
 80133c2:	f7fc fab5 	bl	800f930 <memcpy>
 80133c6:	4631      	mov	r1, r6
 80133c8:	4638      	mov	r0, r7
 80133ca:	f7fc fac5 	bl	800f958 <_free_r>
 80133ce:	e7e9      	b.n	80133a4 <_realloc_r+0x1c>
 80133d0:	4635      	mov	r5, r6
 80133d2:	e7e7      	b.n	80133a4 <_realloc_r+0x1c>

080133d4 <_malloc_usable_size_r>:
 80133d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80133d8:	1f18      	subs	r0, r3, #4
 80133da:	2b00      	cmp	r3, #0
 80133dc:	bfbc      	itt	lt
 80133de:	580b      	ldrlt	r3, [r1, r0]
 80133e0:	18c0      	addlt	r0, r0, r3
 80133e2:	4770      	bx	lr

080133e4 <asin>:
 80133e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133e6:	ed2d 8b02 	vpush	{d8}
 80133ea:	4e26      	ldr	r6, [pc, #152]	; (8013484 <asin+0xa0>)
 80133ec:	b08b      	sub	sp, #44	; 0x2c
 80133ee:	ec55 4b10 	vmov	r4, r5, d0
 80133f2:	f000 fa11 	bl	8013818 <__ieee754_asin>
 80133f6:	f996 3000 	ldrsb.w	r3, [r6]
 80133fa:	eeb0 8a40 	vmov.f32	s16, s0
 80133fe:	eef0 8a60 	vmov.f32	s17, s1
 8013402:	3301      	adds	r3, #1
 8013404:	d036      	beq.n	8013474 <asin+0x90>
 8013406:	4622      	mov	r2, r4
 8013408:	462b      	mov	r3, r5
 801340a:	4620      	mov	r0, r4
 801340c:	4629      	mov	r1, r5
 801340e:	f7ed fb8d 	bl	8000b2c <__aeabi_dcmpun>
 8013412:	4607      	mov	r7, r0
 8013414:	bb70      	cbnz	r0, 8013474 <asin+0x90>
 8013416:	ec45 4b10 	vmov	d0, r4, r5
 801341a:	f001 fc51 	bl	8014cc0 <fabs>
 801341e:	2200      	movs	r2, #0
 8013420:	4b19      	ldr	r3, [pc, #100]	; (8013488 <asin+0xa4>)
 8013422:	ec51 0b10 	vmov	r0, r1, d0
 8013426:	f7ed fb77 	bl	8000b18 <__aeabi_dcmpgt>
 801342a:	b318      	cbz	r0, 8013474 <asin+0x90>
 801342c:	2301      	movs	r3, #1
 801342e:	9300      	str	r3, [sp, #0]
 8013430:	4816      	ldr	r0, [pc, #88]	; (801348c <asin+0xa8>)
 8013432:	4b17      	ldr	r3, [pc, #92]	; (8013490 <asin+0xac>)
 8013434:	9301      	str	r3, [sp, #4]
 8013436:	9708      	str	r7, [sp, #32]
 8013438:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801343c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8013440:	f001 fc52 	bl	8014ce8 <nan>
 8013444:	f996 3000 	ldrsb.w	r3, [r6]
 8013448:	2b02      	cmp	r3, #2
 801344a:	ed8d 0b06 	vstr	d0, [sp, #24]
 801344e:	d104      	bne.n	801345a <asin+0x76>
 8013450:	f7fc fa34 	bl	800f8bc <__errno>
 8013454:	2321      	movs	r3, #33	; 0x21
 8013456:	6003      	str	r3, [r0, #0]
 8013458:	e004      	b.n	8013464 <asin+0x80>
 801345a:	4668      	mov	r0, sp
 801345c:	f001 fc41 	bl	8014ce2 <matherr>
 8013460:	2800      	cmp	r0, #0
 8013462:	d0f5      	beq.n	8013450 <asin+0x6c>
 8013464:	9b08      	ldr	r3, [sp, #32]
 8013466:	b11b      	cbz	r3, 8013470 <asin+0x8c>
 8013468:	f7fc fa28 	bl	800f8bc <__errno>
 801346c:	9b08      	ldr	r3, [sp, #32]
 801346e:	6003      	str	r3, [r0, #0]
 8013470:	ed9d 8b06 	vldr	d8, [sp, #24]
 8013474:	eeb0 0a48 	vmov.f32	s0, s16
 8013478:	eef0 0a68 	vmov.f32	s1, s17
 801347c:	b00b      	add	sp, #44	; 0x2c
 801347e:	ecbd 8b02 	vpop	{d8}
 8013482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013484:	20000390 	.word	0x20000390
 8013488:	3ff00000 	.word	0x3ff00000
 801348c:	08015281 	.word	0x08015281
 8013490:	0801538e 	.word	0x0801538e

08013494 <atan2>:
 8013494:	f000 bbd0 	b.w	8013c38 <__ieee754_atan2>

08013498 <pow>:
 8013498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801349c:	ed2d 8b04 	vpush	{d8-d9}
 80134a0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8013774 <pow+0x2dc>
 80134a4:	b08d      	sub	sp, #52	; 0x34
 80134a6:	ec57 6b10 	vmov	r6, r7, d0
 80134aa:	ec55 4b11 	vmov	r4, r5, d1
 80134ae:	f000 fca3 	bl	8013df8 <__ieee754_pow>
 80134b2:	f999 3000 	ldrsb.w	r3, [r9]
 80134b6:	9300      	str	r3, [sp, #0]
 80134b8:	3301      	adds	r3, #1
 80134ba:	eeb0 8a40 	vmov.f32	s16, s0
 80134be:	eef0 8a60 	vmov.f32	s17, s1
 80134c2:	46c8      	mov	r8, r9
 80134c4:	d05f      	beq.n	8013586 <pow+0xee>
 80134c6:	4622      	mov	r2, r4
 80134c8:	462b      	mov	r3, r5
 80134ca:	4620      	mov	r0, r4
 80134cc:	4629      	mov	r1, r5
 80134ce:	f7ed fb2d 	bl	8000b2c <__aeabi_dcmpun>
 80134d2:	4683      	mov	fp, r0
 80134d4:	2800      	cmp	r0, #0
 80134d6:	d156      	bne.n	8013586 <pow+0xee>
 80134d8:	4632      	mov	r2, r6
 80134da:	463b      	mov	r3, r7
 80134dc:	4630      	mov	r0, r6
 80134de:	4639      	mov	r1, r7
 80134e0:	f7ed fb24 	bl	8000b2c <__aeabi_dcmpun>
 80134e4:	9001      	str	r0, [sp, #4]
 80134e6:	b1e8      	cbz	r0, 8013524 <pow+0x8c>
 80134e8:	2200      	movs	r2, #0
 80134ea:	2300      	movs	r3, #0
 80134ec:	4620      	mov	r0, r4
 80134ee:	4629      	mov	r1, r5
 80134f0:	f7ed faea 	bl	8000ac8 <__aeabi_dcmpeq>
 80134f4:	2800      	cmp	r0, #0
 80134f6:	d046      	beq.n	8013586 <pow+0xee>
 80134f8:	2301      	movs	r3, #1
 80134fa:	9302      	str	r3, [sp, #8]
 80134fc:	4b96      	ldr	r3, [pc, #600]	; (8013758 <pow+0x2c0>)
 80134fe:	9303      	str	r3, [sp, #12]
 8013500:	4b96      	ldr	r3, [pc, #600]	; (801375c <pow+0x2c4>)
 8013502:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8013506:	2200      	movs	r2, #0
 8013508:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801350c:	9b00      	ldr	r3, [sp, #0]
 801350e:	2b02      	cmp	r3, #2
 8013510:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013514:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013518:	d033      	beq.n	8013582 <pow+0xea>
 801351a:	a802      	add	r0, sp, #8
 801351c:	f001 fbe1 	bl	8014ce2 <matherr>
 8013520:	bb48      	cbnz	r0, 8013576 <pow+0xde>
 8013522:	e05d      	b.n	80135e0 <pow+0x148>
 8013524:	f04f 0a00 	mov.w	sl, #0
 8013528:	f04f 0b00 	mov.w	fp, #0
 801352c:	4652      	mov	r2, sl
 801352e:	465b      	mov	r3, fp
 8013530:	4630      	mov	r0, r6
 8013532:	4639      	mov	r1, r7
 8013534:	f7ed fac8 	bl	8000ac8 <__aeabi_dcmpeq>
 8013538:	ec4b ab19 	vmov	d9, sl, fp
 801353c:	2800      	cmp	r0, #0
 801353e:	d054      	beq.n	80135ea <pow+0x152>
 8013540:	4652      	mov	r2, sl
 8013542:	465b      	mov	r3, fp
 8013544:	4620      	mov	r0, r4
 8013546:	4629      	mov	r1, r5
 8013548:	f7ed fabe 	bl	8000ac8 <__aeabi_dcmpeq>
 801354c:	4680      	mov	r8, r0
 801354e:	b318      	cbz	r0, 8013598 <pow+0x100>
 8013550:	2301      	movs	r3, #1
 8013552:	9302      	str	r3, [sp, #8]
 8013554:	4b80      	ldr	r3, [pc, #512]	; (8013758 <pow+0x2c0>)
 8013556:	9303      	str	r3, [sp, #12]
 8013558:	9b01      	ldr	r3, [sp, #4]
 801355a:	930a      	str	r3, [sp, #40]	; 0x28
 801355c:	9b00      	ldr	r3, [sp, #0]
 801355e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013562:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013566:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d0d5      	beq.n	801351a <pow+0x82>
 801356e:	4b7b      	ldr	r3, [pc, #492]	; (801375c <pow+0x2c4>)
 8013570:	2200      	movs	r2, #0
 8013572:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013578:	b11b      	cbz	r3, 8013582 <pow+0xea>
 801357a:	f7fc f99f 	bl	800f8bc <__errno>
 801357e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013580:	6003      	str	r3, [r0, #0]
 8013582:	ed9d 8b08 	vldr	d8, [sp, #32]
 8013586:	eeb0 0a48 	vmov.f32	s0, s16
 801358a:	eef0 0a68 	vmov.f32	s1, s17
 801358e:	b00d      	add	sp, #52	; 0x34
 8013590:	ecbd 8b04 	vpop	{d8-d9}
 8013594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013598:	ec45 4b10 	vmov	d0, r4, r5
 801359c:	f001 fb99 	bl	8014cd2 <finite>
 80135a0:	2800      	cmp	r0, #0
 80135a2:	d0f0      	beq.n	8013586 <pow+0xee>
 80135a4:	4652      	mov	r2, sl
 80135a6:	465b      	mov	r3, fp
 80135a8:	4620      	mov	r0, r4
 80135aa:	4629      	mov	r1, r5
 80135ac:	f7ed fa96 	bl	8000adc <__aeabi_dcmplt>
 80135b0:	2800      	cmp	r0, #0
 80135b2:	d0e8      	beq.n	8013586 <pow+0xee>
 80135b4:	2301      	movs	r3, #1
 80135b6:	9302      	str	r3, [sp, #8]
 80135b8:	4b67      	ldr	r3, [pc, #412]	; (8013758 <pow+0x2c0>)
 80135ba:	9303      	str	r3, [sp, #12]
 80135bc:	f999 3000 	ldrsb.w	r3, [r9]
 80135c0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80135c4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80135c8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80135cc:	b913      	cbnz	r3, 80135d4 <pow+0x13c>
 80135ce:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80135d2:	e7a2      	b.n	801351a <pow+0x82>
 80135d4:	4962      	ldr	r1, [pc, #392]	; (8013760 <pow+0x2c8>)
 80135d6:	2000      	movs	r0, #0
 80135d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80135dc:	2b02      	cmp	r3, #2
 80135de:	d19c      	bne.n	801351a <pow+0x82>
 80135e0:	f7fc f96c 	bl	800f8bc <__errno>
 80135e4:	2321      	movs	r3, #33	; 0x21
 80135e6:	6003      	str	r3, [r0, #0]
 80135e8:	e7c5      	b.n	8013576 <pow+0xde>
 80135ea:	eeb0 0a48 	vmov.f32	s0, s16
 80135ee:	eef0 0a68 	vmov.f32	s1, s17
 80135f2:	f001 fb6e 	bl	8014cd2 <finite>
 80135f6:	9000      	str	r0, [sp, #0]
 80135f8:	2800      	cmp	r0, #0
 80135fa:	f040 8081 	bne.w	8013700 <pow+0x268>
 80135fe:	ec47 6b10 	vmov	d0, r6, r7
 8013602:	f001 fb66 	bl	8014cd2 <finite>
 8013606:	2800      	cmp	r0, #0
 8013608:	d07a      	beq.n	8013700 <pow+0x268>
 801360a:	ec45 4b10 	vmov	d0, r4, r5
 801360e:	f001 fb60 	bl	8014cd2 <finite>
 8013612:	2800      	cmp	r0, #0
 8013614:	d074      	beq.n	8013700 <pow+0x268>
 8013616:	ec53 2b18 	vmov	r2, r3, d8
 801361a:	ee18 0a10 	vmov	r0, s16
 801361e:	4619      	mov	r1, r3
 8013620:	f7ed fa84 	bl	8000b2c <__aeabi_dcmpun>
 8013624:	f999 9000 	ldrsb.w	r9, [r9]
 8013628:	4b4b      	ldr	r3, [pc, #300]	; (8013758 <pow+0x2c0>)
 801362a:	b1b0      	cbz	r0, 801365a <pow+0x1c2>
 801362c:	2201      	movs	r2, #1
 801362e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013632:	9b00      	ldr	r3, [sp, #0]
 8013634:	930a      	str	r3, [sp, #40]	; 0x28
 8013636:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801363a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801363e:	f1b9 0f00 	cmp.w	r9, #0
 8013642:	d0c4      	beq.n	80135ce <pow+0x136>
 8013644:	4652      	mov	r2, sl
 8013646:	465b      	mov	r3, fp
 8013648:	4650      	mov	r0, sl
 801364a:	4659      	mov	r1, fp
 801364c:	f7ed f8fe 	bl	800084c <__aeabi_ddiv>
 8013650:	f1b9 0f02 	cmp.w	r9, #2
 8013654:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013658:	e7c1      	b.n	80135de <pow+0x146>
 801365a:	2203      	movs	r2, #3
 801365c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013660:	900a      	str	r0, [sp, #40]	; 0x28
 8013662:	4629      	mov	r1, r5
 8013664:	4620      	mov	r0, r4
 8013666:	2200      	movs	r2, #0
 8013668:	4b3e      	ldr	r3, [pc, #248]	; (8013764 <pow+0x2cc>)
 801366a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801366e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013672:	f7ec ffc1 	bl	80005f8 <__aeabi_dmul>
 8013676:	4604      	mov	r4, r0
 8013678:	460d      	mov	r5, r1
 801367a:	f1b9 0f00 	cmp.w	r9, #0
 801367e:	d124      	bne.n	80136ca <pow+0x232>
 8013680:	4b39      	ldr	r3, [pc, #228]	; (8013768 <pow+0x2d0>)
 8013682:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013686:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801368a:	4630      	mov	r0, r6
 801368c:	4652      	mov	r2, sl
 801368e:	465b      	mov	r3, fp
 8013690:	4639      	mov	r1, r7
 8013692:	f7ed fa23 	bl	8000adc <__aeabi_dcmplt>
 8013696:	2800      	cmp	r0, #0
 8013698:	d056      	beq.n	8013748 <pow+0x2b0>
 801369a:	ec45 4b10 	vmov	d0, r4, r5
 801369e:	f001 fb2b 	bl	8014cf8 <rint>
 80136a2:	4622      	mov	r2, r4
 80136a4:	462b      	mov	r3, r5
 80136a6:	ec51 0b10 	vmov	r0, r1, d0
 80136aa:	f7ed fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80136ae:	b920      	cbnz	r0, 80136ba <pow+0x222>
 80136b0:	4b2e      	ldr	r3, [pc, #184]	; (801376c <pow+0x2d4>)
 80136b2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80136b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80136ba:	f998 3000 	ldrsb.w	r3, [r8]
 80136be:	2b02      	cmp	r3, #2
 80136c0:	d142      	bne.n	8013748 <pow+0x2b0>
 80136c2:	f7fc f8fb 	bl	800f8bc <__errno>
 80136c6:	2322      	movs	r3, #34	; 0x22
 80136c8:	e78d      	b.n	80135e6 <pow+0x14e>
 80136ca:	4b29      	ldr	r3, [pc, #164]	; (8013770 <pow+0x2d8>)
 80136cc:	2200      	movs	r2, #0
 80136ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80136d2:	4630      	mov	r0, r6
 80136d4:	4652      	mov	r2, sl
 80136d6:	465b      	mov	r3, fp
 80136d8:	4639      	mov	r1, r7
 80136da:	f7ed f9ff 	bl	8000adc <__aeabi_dcmplt>
 80136de:	2800      	cmp	r0, #0
 80136e0:	d0eb      	beq.n	80136ba <pow+0x222>
 80136e2:	ec45 4b10 	vmov	d0, r4, r5
 80136e6:	f001 fb07 	bl	8014cf8 <rint>
 80136ea:	4622      	mov	r2, r4
 80136ec:	462b      	mov	r3, r5
 80136ee:	ec51 0b10 	vmov	r0, r1, d0
 80136f2:	f7ed f9e9 	bl	8000ac8 <__aeabi_dcmpeq>
 80136f6:	2800      	cmp	r0, #0
 80136f8:	d1df      	bne.n	80136ba <pow+0x222>
 80136fa:	2200      	movs	r2, #0
 80136fc:	4b18      	ldr	r3, [pc, #96]	; (8013760 <pow+0x2c8>)
 80136fe:	e7da      	b.n	80136b6 <pow+0x21e>
 8013700:	2200      	movs	r2, #0
 8013702:	2300      	movs	r3, #0
 8013704:	ec51 0b18 	vmov	r0, r1, d8
 8013708:	f7ed f9de 	bl	8000ac8 <__aeabi_dcmpeq>
 801370c:	2800      	cmp	r0, #0
 801370e:	f43f af3a 	beq.w	8013586 <pow+0xee>
 8013712:	ec47 6b10 	vmov	d0, r6, r7
 8013716:	f001 fadc 	bl	8014cd2 <finite>
 801371a:	2800      	cmp	r0, #0
 801371c:	f43f af33 	beq.w	8013586 <pow+0xee>
 8013720:	ec45 4b10 	vmov	d0, r4, r5
 8013724:	f001 fad5 	bl	8014cd2 <finite>
 8013728:	2800      	cmp	r0, #0
 801372a:	f43f af2c 	beq.w	8013586 <pow+0xee>
 801372e:	2304      	movs	r3, #4
 8013730:	9302      	str	r3, [sp, #8]
 8013732:	4b09      	ldr	r3, [pc, #36]	; (8013758 <pow+0x2c0>)
 8013734:	9303      	str	r3, [sp, #12]
 8013736:	2300      	movs	r3, #0
 8013738:	930a      	str	r3, [sp, #40]	; 0x28
 801373a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801373e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013742:	ed8d 9b08 	vstr	d9, [sp, #32]
 8013746:	e7b8      	b.n	80136ba <pow+0x222>
 8013748:	a802      	add	r0, sp, #8
 801374a:	f001 faca 	bl	8014ce2 <matherr>
 801374e:	2800      	cmp	r0, #0
 8013750:	f47f af11 	bne.w	8013576 <pow+0xde>
 8013754:	e7b5      	b.n	80136c2 <pow+0x22a>
 8013756:	bf00      	nop
 8013758:	08015393 	.word	0x08015393
 801375c:	3ff00000 	.word	0x3ff00000
 8013760:	fff00000 	.word	0xfff00000
 8013764:	3fe00000 	.word	0x3fe00000
 8013768:	47efffff 	.word	0x47efffff
 801376c:	c7efffff 	.word	0xc7efffff
 8013770:	7ff00000 	.word	0x7ff00000
 8013774:	20000390 	.word	0x20000390

08013778 <sqrtf>:
 8013778:	b510      	push	{r4, lr}
 801377a:	ed2d 8b02 	vpush	{d8}
 801377e:	b08a      	sub	sp, #40	; 0x28
 8013780:	eeb0 8a40 	vmov.f32	s16, s0
 8013784:	f001 f8f6 	bl	8014974 <__ieee754_sqrtf>
 8013788:	4b21      	ldr	r3, [pc, #132]	; (8013810 <sqrtf+0x98>)
 801378a:	f993 4000 	ldrsb.w	r4, [r3]
 801378e:	1c63      	adds	r3, r4, #1
 8013790:	d02c      	beq.n	80137ec <sqrtf+0x74>
 8013792:	eeb4 8a48 	vcmp.f32	s16, s16
 8013796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801379a:	d627      	bvs.n	80137ec <sqrtf+0x74>
 801379c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80137a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137a4:	d522      	bpl.n	80137ec <sqrtf+0x74>
 80137a6:	2301      	movs	r3, #1
 80137a8:	9300      	str	r3, [sp, #0]
 80137aa:	4b1a      	ldr	r3, [pc, #104]	; (8013814 <sqrtf+0x9c>)
 80137ac:	9301      	str	r3, [sp, #4]
 80137ae:	ee18 0a10 	vmov	r0, s16
 80137b2:	2300      	movs	r3, #0
 80137b4:	9308      	str	r3, [sp, #32]
 80137b6:	f7ec fec7 	bl	8000548 <__aeabi_f2d>
 80137ba:	2200      	movs	r2, #0
 80137bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80137c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80137c4:	2300      	movs	r3, #0
 80137c6:	b9ac      	cbnz	r4, 80137f4 <sqrtf+0x7c>
 80137c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80137cc:	4668      	mov	r0, sp
 80137ce:	f001 fa88 	bl	8014ce2 <matherr>
 80137d2:	b1b8      	cbz	r0, 8013804 <sqrtf+0x8c>
 80137d4:	9b08      	ldr	r3, [sp, #32]
 80137d6:	b11b      	cbz	r3, 80137e0 <sqrtf+0x68>
 80137d8:	f7fc f870 	bl	800f8bc <__errno>
 80137dc:	9b08      	ldr	r3, [sp, #32]
 80137de:	6003      	str	r3, [r0, #0]
 80137e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80137e4:	f7ed fa00 	bl	8000be8 <__aeabi_d2f>
 80137e8:	ee00 0a10 	vmov	s0, r0
 80137ec:	b00a      	add	sp, #40	; 0x28
 80137ee:	ecbd 8b02 	vpop	{d8}
 80137f2:	bd10      	pop	{r4, pc}
 80137f4:	4610      	mov	r0, r2
 80137f6:	4619      	mov	r1, r3
 80137f8:	f7ed f828 	bl	800084c <__aeabi_ddiv>
 80137fc:	2c02      	cmp	r4, #2
 80137fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013802:	d1e3      	bne.n	80137cc <sqrtf+0x54>
 8013804:	f7fc f85a 	bl	800f8bc <__errno>
 8013808:	2321      	movs	r3, #33	; 0x21
 801380a:	6003      	str	r3, [r0, #0]
 801380c:	e7e2      	b.n	80137d4 <sqrtf+0x5c>
 801380e:	bf00      	nop
 8013810:	20000390 	.word	0x20000390
 8013814:	08015397 	.word	0x08015397

08013818 <__ieee754_asin>:
 8013818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801381c:	ec55 4b10 	vmov	r4, r5, d0
 8013820:	4bcb      	ldr	r3, [pc, #812]	; (8013b50 <__ieee754_asin+0x338>)
 8013822:	b087      	sub	sp, #28
 8013824:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8013828:	429f      	cmp	r7, r3
 801382a:	9501      	str	r5, [sp, #4]
 801382c:	dd31      	ble.n	8013892 <__ieee754_asin+0x7a>
 801382e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8013832:	ee10 3a10 	vmov	r3, s0
 8013836:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 801383a:	433b      	orrs	r3, r7
 801383c:	d117      	bne.n	801386e <__ieee754_asin+0x56>
 801383e:	a3aa      	add	r3, pc, #680	; (adr r3, 8013ae8 <__ieee754_asin+0x2d0>)
 8013840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013844:	ee10 0a10 	vmov	r0, s0
 8013848:	4629      	mov	r1, r5
 801384a:	f7ec fed5 	bl	80005f8 <__aeabi_dmul>
 801384e:	a3a8      	add	r3, pc, #672	; (adr r3, 8013af0 <__ieee754_asin+0x2d8>)
 8013850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013854:	4606      	mov	r6, r0
 8013856:	460f      	mov	r7, r1
 8013858:	4620      	mov	r0, r4
 801385a:	4629      	mov	r1, r5
 801385c:	f7ec fecc 	bl	80005f8 <__aeabi_dmul>
 8013860:	4602      	mov	r2, r0
 8013862:	460b      	mov	r3, r1
 8013864:	4630      	mov	r0, r6
 8013866:	4639      	mov	r1, r7
 8013868:	f7ec fd10 	bl	800028c <__adddf3>
 801386c:	e00a      	b.n	8013884 <__ieee754_asin+0x6c>
 801386e:	ee10 2a10 	vmov	r2, s0
 8013872:	462b      	mov	r3, r5
 8013874:	4620      	mov	r0, r4
 8013876:	4629      	mov	r1, r5
 8013878:	f7ec fd06 	bl	8000288 <__aeabi_dsub>
 801387c:	4602      	mov	r2, r0
 801387e:	460b      	mov	r3, r1
 8013880:	f7ec ffe4 	bl	800084c <__aeabi_ddiv>
 8013884:	4604      	mov	r4, r0
 8013886:	460d      	mov	r5, r1
 8013888:	ec45 4b10 	vmov	d0, r4, r5
 801388c:	b007      	add	sp, #28
 801388e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013892:	4bb0      	ldr	r3, [pc, #704]	; (8013b54 <__ieee754_asin+0x33c>)
 8013894:	429f      	cmp	r7, r3
 8013896:	dc11      	bgt.n	80138bc <__ieee754_asin+0xa4>
 8013898:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801389c:	f280 80ae 	bge.w	80139fc <__ieee754_asin+0x1e4>
 80138a0:	a395      	add	r3, pc, #596	; (adr r3, 8013af8 <__ieee754_asin+0x2e0>)
 80138a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138a6:	ee10 0a10 	vmov	r0, s0
 80138aa:	4629      	mov	r1, r5
 80138ac:	f7ec fcee 	bl	800028c <__adddf3>
 80138b0:	2200      	movs	r2, #0
 80138b2:	4ba9      	ldr	r3, [pc, #676]	; (8013b58 <__ieee754_asin+0x340>)
 80138b4:	f7ed f930 	bl	8000b18 <__aeabi_dcmpgt>
 80138b8:	2800      	cmp	r0, #0
 80138ba:	d1e5      	bne.n	8013888 <__ieee754_asin+0x70>
 80138bc:	ec45 4b10 	vmov	d0, r4, r5
 80138c0:	f001 f9fe 	bl	8014cc0 <fabs>
 80138c4:	2000      	movs	r0, #0
 80138c6:	ec53 2b10 	vmov	r2, r3, d0
 80138ca:	49a3      	ldr	r1, [pc, #652]	; (8013b58 <__ieee754_asin+0x340>)
 80138cc:	f7ec fcdc 	bl	8000288 <__aeabi_dsub>
 80138d0:	2200      	movs	r2, #0
 80138d2:	4ba2      	ldr	r3, [pc, #648]	; (8013b5c <__ieee754_asin+0x344>)
 80138d4:	f7ec fe90 	bl	80005f8 <__aeabi_dmul>
 80138d8:	a389      	add	r3, pc, #548	; (adr r3, 8013b00 <__ieee754_asin+0x2e8>)
 80138da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138de:	4604      	mov	r4, r0
 80138e0:	460d      	mov	r5, r1
 80138e2:	f7ec fe89 	bl	80005f8 <__aeabi_dmul>
 80138e6:	a388      	add	r3, pc, #544	; (adr r3, 8013b08 <__ieee754_asin+0x2f0>)
 80138e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138ec:	f7ec fcce 	bl	800028c <__adddf3>
 80138f0:	4622      	mov	r2, r4
 80138f2:	462b      	mov	r3, r5
 80138f4:	f7ec fe80 	bl	80005f8 <__aeabi_dmul>
 80138f8:	a385      	add	r3, pc, #532	; (adr r3, 8013b10 <__ieee754_asin+0x2f8>)
 80138fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138fe:	f7ec fcc3 	bl	8000288 <__aeabi_dsub>
 8013902:	4622      	mov	r2, r4
 8013904:	462b      	mov	r3, r5
 8013906:	f7ec fe77 	bl	80005f8 <__aeabi_dmul>
 801390a:	a383      	add	r3, pc, #524	; (adr r3, 8013b18 <__ieee754_asin+0x300>)
 801390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013910:	f7ec fcbc 	bl	800028c <__adddf3>
 8013914:	4622      	mov	r2, r4
 8013916:	462b      	mov	r3, r5
 8013918:	f7ec fe6e 	bl	80005f8 <__aeabi_dmul>
 801391c:	a380      	add	r3, pc, #512	; (adr r3, 8013b20 <__ieee754_asin+0x308>)
 801391e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013922:	f7ec fcb1 	bl	8000288 <__aeabi_dsub>
 8013926:	4622      	mov	r2, r4
 8013928:	462b      	mov	r3, r5
 801392a:	f7ec fe65 	bl	80005f8 <__aeabi_dmul>
 801392e:	a37e      	add	r3, pc, #504	; (adr r3, 8013b28 <__ieee754_asin+0x310>)
 8013930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013934:	f7ec fcaa 	bl	800028c <__adddf3>
 8013938:	4622      	mov	r2, r4
 801393a:	462b      	mov	r3, r5
 801393c:	f7ec fe5c 	bl	80005f8 <__aeabi_dmul>
 8013940:	a37b      	add	r3, pc, #492	; (adr r3, 8013b30 <__ieee754_asin+0x318>)
 8013942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013946:	4680      	mov	r8, r0
 8013948:	4689      	mov	r9, r1
 801394a:	4620      	mov	r0, r4
 801394c:	4629      	mov	r1, r5
 801394e:	f7ec fe53 	bl	80005f8 <__aeabi_dmul>
 8013952:	a379      	add	r3, pc, #484	; (adr r3, 8013b38 <__ieee754_asin+0x320>)
 8013954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013958:	f7ec fc96 	bl	8000288 <__aeabi_dsub>
 801395c:	4622      	mov	r2, r4
 801395e:	462b      	mov	r3, r5
 8013960:	f7ec fe4a 	bl	80005f8 <__aeabi_dmul>
 8013964:	a376      	add	r3, pc, #472	; (adr r3, 8013b40 <__ieee754_asin+0x328>)
 8013966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801396a:	f7ec fc8f 	bl	800028c <__adddf3>
 801396e:	4622      	mov	r2, r4
 8013970:	462b      	mov	r3, r5
 8013972:	f7ec fe41 	bl	80005f8 <__aeabi_dmul>
 8013976:	a374      	add	r3, pc, #464	; (adr r3, 8013b48 <__ieee754_asin+0x330>)
 8013978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801397c:	f7ec fc84 	bl	8000288 <__aeabi_dsub>
 8013980:	4622      	mov	r2, r4
 8013982:	462b      	mov	r3, r5
 8013984:	f7ec fe38 	bl	80005f8 <__aeabi_dmul>
 8013988:	4b73      	ldr	r3, [pc, #460]	; (8013b58 <__ieee754_asin+0x340>)
 801398a:	2200      	movs	r2, #0
 801398c:	f7ec fc7e 	bl	800028c <__adddf3>
 8013990:	ec45 4b10 	vmov	d0, r4, r5
 8013994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013998:	f000 ff3c 	bl	8014814 <__ieee754_sqrt>
 801399c:	4b70      	ldr	r3, [pc, #448]	; (8013b60 <__ieee754_asin+0x348>)
 801399e:	429f      	cmp	r7, r3
 80139a0:	ec5b ab10 	vmov	sl, fp, d0
 80139a4:	f340 80de 	ble.w	8013b64 <__ieee754_asin+0x34c>
 80139a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80139ac:	4640      	mov	r0, r8
 80139ae:	4649      	mov	r1, r9
 80139b0:	f7ec ff4c 	bl	800084c <__aeabi_ddiv>
 80139b4:	4652      	mov	r2, sl
 80139b6:	465b      	mov	r3, fp
 80139b8:	f7ec fe1e 	bl	80005f8 <__aeabi_dmul>
 80139bc:	4652      	mov	r2, sl
 80139be:	465b      	mov	r3, fp
 80139c0:	f7ec fc64 	bl	800028c <__adddf3>
 80139c4:	4602      	mov	r2, r0
 80139c6:	460b      	mov	r3, r1
 80139c8:	f7ec fc60 	bl	800028c <__adddf3>
 80139cc:	a348      	add	r3, pc, #288	; (adr r3, 8013af0 <__ieee754_asin+0x2d8>)
 80139ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d2:	f7ec fc59 	bl	8000288 <__aeabi_dsub>
 80139d6:	4602      	mov	r2, r0
 80139d8:	460b      	mov	r3, r1
 80139da:	a143      	add	r1, pc, #268	; (adr r1, 8013ae8 <__ieee754_asin+0x2d0>)
 80139dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139e0:	f7ec fc52 	bl	8000288 <__aeabi_dsub>
 80139e4:	9b01      	ldr	r3, [sp, #4]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	bfdc      	itt	le
 80139ea:	4602      	movle	r2, r0
 80139ec:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80139f0:	4604      	mov	r4, r0
 80139f2:	460d      	mov	r5, r1
 80139f4:	bfdc      	itt	le
 80139f6:	4614      	movle	r4, r2
 80139f8:	461d      	movle	r5, r3
 80139fa:	e745      	b.n	8013888 <__ieee754_asin+0x70>
 80139fc:	ee10 2a10 	vmov	r2, s0
 8013a00:	ee10 0a10 	vmov	r0, s0
 8013a04:	462b      	mov	r3, r5
 8013a06:	4629      	mov	r1, r5
 8013a08:	f7ec fdf6 	bl	80005f8 <__aeabi_dmul>
 8013a0c:	a33c      	add	r3, pc, #240	; (adr r3, 8013b00 <__ieee754_asin+0x2e8>)
 8013a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a12:	4606      	mov	r6, r0
 8013a14:	460f      	mov	r7, r1
 8013a16:	f7ec fdef 	bl	80005f8 <__aeabi_dmul>
 8013a1a:	a33b      	add	r3, pc, #236	; (adr r3, 8013b08 <__ieee754_asin+0x2f0>)
 8013a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a20:	f7ec fc34 	bl	800028c <__adddf3>
 8013a24:	4632      	mov	r2, r6
 8013a26:	463b      	mov	r3, r7
 8013a28:	f7ec fde6 	bl	80005f8 <__aeabi_dmul>
 8013a2c:	a338      	add	r3, pc, #224	; (adr r3, 8013b10 <__ieee754_asin+0x2f8>)
 8013a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a32:	f7ec fc29 	bl	8000288 <__aeabi_dsub>
 8013a36:	4632      	mov	r2, r6
 8013a38:	463b      	mov	r3, r7
 8013a3a:	f7ec fddd 	bl	80005f8 <__aeabi_dmul>
 8013a3e:	a336      	add	r3, pc, #216	; (adr r3, 8013b18 <__ieee754_asin+0x300>)
 8013a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a44:	f7ec fc22 	bl	800028c <__adddf3>
 8013a48:	4632      	mov	r2, r6
 8013a4a:	463b      	mov	r3, r7
 8013a4c:	f7ec fdd4 	bl	80005f8 <__aeabi_dmul>
 8013a50:	a333      	add	r3, pc, #204	; (adr r3, 8013b20 <__ieee754_asin+0x308>)
 8013a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a56:	f7ec fc17 	bl	8000288 <__aeabi_dsub>
 8013a5a:	4632      	mov	r2, r6
 8013a5c:	463b      	mov	r3, r7
 8013a5e:	f7ec fdcb 	bl	80005f8 <__aeabi_dmul>
 8013a62:	a331      	add	r3, pc, #196	; (adr r3, 8013b28 <__ieee754_asin+0x310>)
 8013a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a68:	f7ec fc10 	bl	800028c <__adddf3>
 8013a6c:	4632      	mov	r2, r6
 8013a6e:	463b      	mov	r3, r7
 8013a70:	f7ec fdc2 	bl	80005f8 <__aeabi_dmul>
 8013a74:	a32e      	add	r3, pc, #184	; (adr r3, 8013b30 <__ieee754_asin+0x318>)
 8013a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a7a:	4680      	mov	r8, r0
 8013a7c:	4689      	mov	r9, r1
 8013a7e:	4630      	mov	r0, r6
 8013a80:	4639      	mov	r1, r7
 8013a82:	f7ec fdb9 	bl	80005f8 <__aeabi_dmul>
 8013a86:	a32c      	add	r3, pc, #176	; (adr r3, 8013b38 <__ieee754_asin+0x320>)
 8013a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a8c:	f7ec fbfc 	bl	8000288 <__aeabi_dsub>
 8013a90:	4632      	mov	r2, r6
 8013a92:	463b      	mov	r3, r7
 8013a94:	f7ec fdb0 	bl	80005f8 <__aeabi_dmul>
 8013a98:	a329      	add	r3, pc, #164	; (adr r3, 8013b40 <__ieee754_asin+0x328>)
 8013a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a9e:	f7ec fbf5 	bl	800028c <__adddf3>
 8013aa2:	4632      	mov	r2, r6
 8013aa4:	463b      	mov	r3, r7
 8013aa6:	f7ec fda7 	bl	80005f8 <__aeabi_dmul>
 8013aaa:	a327      	add	r3, pc, #156	; (adr r3, 8013b48 <__ieee754_asin+0x330>)
 8013aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ab0:	f7ec fbea 	bl	8000288 <__aeabi_dsub>
 8013ab4:	4632      	mov	r2, r6
 8013ab6:	463b      	mov	r3, r7
 8013ab8:	f7ec fd9e 	bl	80005f8 <__aeabi_dmul>
 8013abc:	2200      	movs	r2, #0
 8013abe:	4b26      	ldr	r3, [pc, #152]	; (8013b58 <__ieee754_asin+0x340>)
 8013ac0:	f7ec fbe4 	bl	800028c <__adddf3>
 8013ac4:	4602      	mov	r2, r0
 8013ac6:	460b      	mov	r3, r1
 8013ac8:	4640      	mov	r0, r8
 8013aca:	4649      	mov	r1, r9
 8013acc:	f7ec febe 	bl	800084c <__aeabi_ddiv>
 8013ad0:	4622      	mov	r2, r4
 8013ad2:	462b      	mov	r3, r5
 8013ad4:	f7ec fd90 	bl	80005f8 <__aeabi_dmul>
 8013ad8:	4602      	mov	r2, r0
 8013ada:	460b      	mov	r3, r1
 8013adc:	4620      	mov	r0, r4
 8013ade:	4629      	mov	r1, r5
 8013ae0:	e6c2      	b.n	8013868 <__ieee754_asin+0x50>
 8013ae2:	bf00      	nop
 8013ae4:	f3af 8000 	nop.w
 8013ae8:	54442d18 	.word	0x54442d18
 8013aec:	3ff921fb 	.word	0x3ff921fb
 8013af0:	33145c07 	.word	0x33145c07
 8013af4:	3c91a626 	.word	0x3c91a626
 8013af8:	8800759c 	.word	0x8800759c
 8013afc:	7e37e43c 	.word	0x7e37e43c
 8013b00:	0dfdf709 	.word	0x0dfdf709
 8013b04:	3f023de1 	.word	0x3f023de1
 8013b08:	7501b288 	.word	0x7501b288
 8013b0c:	3f49efe0 	.word	0x3f49efe0
 8013b10:	b5688f3b 	.word	0xb5688f3b
 8013b14:	3fa48228 	.word	0x3fa48228
 8013b18:	0e884455 	.word	0x0e884455
 8013b1c:	3fc9c155 	.word	0x3fc9c155
 8013b20:	03eb6f7d 	.word	0x03eb6f7d
 8013b24:	3fd4d612 	.word	0x3fd4d612
 8013b28:	55555555 	.word	0x55555555
 8013b2c:	3fc55555 	.word	0x3fc55555
 8013b30:	b12e9282 	.word	0xb12e9282
 8013b34:	3fb3b8c5 	.word	0x3fb3b8c5
 8013b38:	1b8d0159 	.word	0x1b8d0159
 8013b3c:	3fe6066c 	.word	0x3fe6066c
 8013b40:	9c598ac8 	.word	0x9c598ac8
 8013b44:	40002ae5 	.word	0x40002ae5
 8013b48:	1c8a2d4b 	.word	0x1c8a2d4b
 8013b4c:	40033a27 	.word	0x40033a27
 8013b50:	3fefffff 	.word	0x3fefffff
 8013b54:	3fdfffff 	.word	0x3fdfffff
 8013b58:	3ff00000 	.word	0x3ff00000
 8013b5c:	3fe00000 	.word	0x3fe00000
 8013b60:	3fef3332 	.word	0x3fef3332
 8013b64:	ee10 2a10 	vmov	r2, s0
 8013b68:	ee10 0a10 	vmov	r0, s0
 8013b6c:	465b      	mov	r3, fp
 8013b6e:	4659      	mov	r1, fp
 8013b70:	f7ec fb8c 	bl	800028c <__adddf3>
 8013b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013b78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b7c:	4640      	mov	r0, r8
 8013b7e:	4649      	mov	r1, r9
 8013b80:	f7ec fe64 	bl	800084c <__aeabi_ddiv>
 8013b84:	4602      	mov	r2, r0
 8013b86:	460b      	mov	r3, r1
 8013b88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b8c:	f7ec fd34 	bl	80005f8 <__aeabi_dmul>
 8013b90:	2600      	movs	r6, #0
 8013b92:	4680      	mov	r8, r0
 8013b94:	4689      	mov	r9, r1
 8013b96:	4632      	mov	r2, r6
 8013b98:	465b      	mov	r3, fp
 8013b9a:	4630      	mov	r0, r6
 8013b9c:	4659      	mov	r1, fp
 8013b9e:	f7ec fd2b 	bl	80005f8 <__aeabi_dmul>
 8013ba2:	4602      	mov	r2, r0
 8013ba4:	460b      	mov	r3, r1
 8013ba6:	4620      	mov	r0, r4
 8013ba8:	4629      	mov	r1, r5
 8013baa:	f7ec fb6d 	bl	8000288 <__aeabi_dsub>
 8013bae:	4632      	mov	r2, r6
 8013bb0:	4604      	mov	r4, r0
 8013bb2:	460d      	mov	r5, r1
 8013bb4:	465b      	mov	r3, fp
 8013bb6:	4650      	mov	r0, sl
 8013bb8:	4659      	mov	r1, fp
 8013bba:	f7ec fb67 	bl	800028c <__adddf3>
 8013bbe:	4602      	mov	r2, r0
 8013bc0:	460b      	mov	r3, r1
 8013bc2:	4620      	mov	r0, r4
 8013bc4:	4629      	mov	r1, r5
 8013bc6:	f7ec fe41 	bl	800084c <__aeabi_ddiv>
 8013bca:	4602      	mov	r2, r0
 8013bcc:	460b      	mov	r3, r1
 8013bce:	f7ec fb5d 	bl	800028c <__adddf3>
 8013bd2:	4602      	mov	r2, r0
 8013bd4:	460b      	mov	r3, r1
 8013bd6:	a114      	add	r1, pc, #80	; (adr r1, 8013c28 <__ieee754_asin+0x410>)
 8013bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bdc:	f7ec fb54 	bl	8000288 <__aeabi_dsub>
 8013be0:	4602      	mov	r2, r0
 8013be2:	460b      	mov	r3, r1
 8013be4:	4640      	mov	r0, r8
 8013be6:	4649      	mov	r1, r9
 8013be8:	f7ec fb4e 	bl	8000288 <__aeabi_dsub>
 8013bec:	465f      	mov	r7, fp
 8013bee:	4604      	mov	r4, r0
 8013bf0:	460d      	mov	r5, r1
 8013bf2:	4632      	mov	r2, r6
 8013bf4:	465b      	mov	r3, fp
 8013bf6:	4630      	mov	r0, r6
 8013bf8:	4639      	mov	r1, r7
 8013bfa:	f7ec fb47 	bl	800028c <__adddf3>
 8013bfe:	4602      	mov	r2, r0
 8013c00:	460b      	mov	r3, r1
 8013c02:	a10b      	add	r1, pc, #44	; (adr r1, 8013c30 <__ieee754_asin+0x418>)
 8013c04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c08:	f7ec fb3e 	bl	8000288 <__aeabi_dsub>
 8013c0c:	4602      	mov	r2, r0
 8013c0e:	460b      	mov	r3, r1
 8013c10:	4620      	mov	r0, r4
 8013c12:	4629      	mov	r1, r5
 8013c14:	f7ec fb38 	bl	8000288 <__aeabi_dsub>
 8013c18:	4602      	mov	r2, r0
 8013c1a:	460b      	mov	r3, r1
 8013c1c:	a104      	add	r1, pc, #16	; (adr r1, 8013c30 <__ieee754_asin+0x418>)
 8013c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c22:	e6dd      	b.n	80139e0 <__ieee754_asin+0x1c8>
 8013c24:	f3af 8000 	nop.w
 8013c28:	33145c07 	.word	0x33145c07
 8013c2c:	3c91a626 	.word	0x3c91a626
 8013c30:	54442d18 	.word	0x54442d18
 8013c34:	3fe921fb 	.word	0x3fe921fb

08013c38 <__ieee754_atan2>:
 8013c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c3c:	ec57 6b11 	vmov	r6, r7, d1
 8013c40:	4273      	negs	r3, r6
 8013c42:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8013c46:	4333      	orrs	r3, r6
 8013c48:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8013df0 <__ieee754_atan2+0x1b8>
 8013c4c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013c50:	4573      	cmp	r3, lr
 8013c52:	ec51 0b10 	vmov	r0, r1, d0
 8013c56:	ee11 8a10 	vmov	r8, s2
 8013c5a:	d80a      	bhi.n	8013c72 <__ieee754_atan2+0x3a>
 8013c5c:	4244      	negs	r4, r0
 8013c5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013c62:	4304      	orrs	r4, r0
 8013c64:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013c68:	4574      	cmp	r4, lr
 8013c6a:	468c      	mov	ip, r1
 8013c6c:	ee10 9a10 	vmov	r9, s0
 8013c70:	d907      	bls.n	8013c82 <__ieee754_atan2+0x4a>
 8013c72:	4632      	mov	r2, r6
 8013c74:	463b      	mov	r3, r7
 8013c76:	f7ec fb09 	bl	800028c <__adddf3>
 8013c7a:	ec41 0b10 	vmov	d0, r0, r1
 8013c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c82:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8013c86:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013c8a:	4334      	orrs	r4, r6
 8013c8c:	d103      	bne.n	8013c96 <__ieee754_atan2+0x5e>
 8013c8e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c92:	f000 be75 	b.w	8014980 <atan>
 8013c96:	17bc      	asrs	r4, r7, #30
 8013c98:	f004 0402 	and.w	r4, r4, #2
 8013c9c:	ea53 0909 	orrs.w	r9, r3, r9
 8013ca0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013ca4:	d107      	bne.n	8013cb6 <__ieee754_atan2+0x7e>
 8013ca6:	2c02      	cmp	r4, #2
 8013ca8:	d073      	beq.n	8013d92 <__ieee754_atan2+0x15a>
 8013caa:	2c03      	cmp	r4, #3
 8013cac:	d1e5      	bne.n	8013c7a <__ieee754_atan2+0x42>
 8013cae:	a13e      	add	r1, pc, #248	; (adr r1, 8013da8 <__ieee754_atan2+0x170>)
 8013cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cb4:	e7e1      	b.n	8013c7a <__ieee754_atan2+0x42>
 8013cb6:	ea52 0808 	orrs.w	r8, r2, r8
 8013cba:	d106      	bne.n	8013cca <__ieee754_atan2+0x92>
 8013cbc:	f1bc 0f00 	cmp.w	ip, #0
 8013cc0:	da6b      	bge.n	8013d9a <__ieee754_atan2+0x162>
 8013cc2:	a13b      	add	r1, pc, #236	; (adr r1, 8013db0 <__ieee754_atan2+0x178>)
 8013cc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cc8:	e7d7      	b.n	8013c7a <__ieee754_atan2+0x42>
 8013cca:	4572      	cmp	r2, lr
 8013ccc:	d120      	bne.n	8013d10 <__ieee754_atan2+0xd8>
 8013cce:	4293      	cmp	r3, r2
 8013cd0:	d111      	bne.n	8013cf6 <__ieee754_atan2+0xbe>
 8013cd2:	2c02      	cmp	r4, #2
 8013cd4:	d007      	beq.n	8013ce6 <__ieee754_atan2+0xae>
 8013cd6:	2c03      	cmp	r4, #3
 8013cd8:	d009      	beq.n	8013cee <__ieee754_atan2+0xb6>
 8013cda:	2c01      	cmp	r4, #1
 8013cdc:	d155      	bne.n	8013d8a <__ieee754_atan2+0x152>
 8013cde:	a136      	add	r1, pc, #216	; (adr r1, 8013db8 <__ieee754_atan2+0x180>)
 8013ce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ce4:	e7c9      	b.n	8013c7a <__ieee754_atan2+0x42>
 8013ce6:	a136      	add	r1, pc, #216	; (adr r1, 8013dc0 <__ieee754_atan2+0x188>)
 8013ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cec:	e7c5      	b.n	8013c7a <__ieee754_atan2+0x42>
 8013cee:	a136      	add	r1, pc, #216	; (adr r1, 8013dc8 <__ieee754_atan2+0x190>)
 8013cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cf4:	e7c1      	b.n	8013c7a <__ieee754_atan2+0x42>
 8013cf6:	2c02      	cmp	r4, #2
 8013cf8:	d04b      	beq.n	8013d92 <__ieee754_atan2+0x15a>
 8013cfa:	2c03      	cmp	r4, #3
 8013cfc:	d0d7      	beq.n	8013cae <__ieee754_atan2+0x76>
 8013cfe:	2c01      	cmp	r4, #1
 8013d00:	f04f 0000 	mov.w	r0, #0
 8013d04:	d102      	bne.n	8013d0c <__ieee754_atan2+0xd4>
 8013d06:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8013d0a:	e7b6      	b.n	8013c7a <__ieee754_atan2+0x42>
 8013d0c:	2100      	movs	r1, #0
 8013d0e:	e7b4      	b.n	8013c7a <__ieee754_atan2+0x42>
 8013d10:	4573      	cmp	r3, lr
 8013d12:	d0d3      	beq.n	8013cbc <__ieee754_atan2+0x84>
 8013d14:	1a9b      	subs	r3, r3, r2
 8013d16:	151b      	asrs	r3, r3, #20
 8013d18:	2b3c      	cmp	r3, #60	; 0x3c
 8013d1a:	dc1e      	bgt.n	8013d5a <__ieee754_atan2+0x122>
 8013d1c:	2f00      	cmp	r7, #0
 8013d1e:	da01      	bge.n	8013d24 <__ieee754_atan2+0xec>
 8013d20:	333c      	adds	r3, #60	; 0x3c
 8013d22:	db1e      	blt.n	8013d62 <__ieee754_atan2+0x12a>
 8013d24:	4632      	mov	r2, r6
 8013d26:	463b      	mov	r3, r7
 8013d28:	f7ec fd90 	bl	800084c <__aeabi_ddiv>
 8013d2c:	ec41 0b10 	vmov	d0, r0, r1
 8013d30:	f000 ffc6 	bl	8014cc0 <fabs>
 8013d34:	f000 fe24 	bl	8014980 <atan>
 8013d38:	ec51 0b10 	vmov	r0, r1, d0
 8013d3c:	2c01      	cmp	r4, #1
 8013d3e:	d013      	beq.n	8013d68 <__ieee754_atan2+0x130>
 8013d40:	2c02      	cmp	r4, #2
 8013d42:	d015      	beq.n	8013d70 <__ieee754_atan2+0x138>
 8013d44:	2c00      	cmp	r4, #0
 8013d46:	d098      	beq.n	8013c7a <__ieee754_atan2+0x42>
 8013d48:	a321      	add	r3, pc, #132	; (adr r3, 8013dd0 <__ieee754_atan2+0x198>)
 8013d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d4e:	f7ec fa9b 	bl	8000288 <__aeabi_dsub>
 8013d52:	a321      	add	r3, pc, #132	; (adr r3, 8013dd8 <__ieee754_atan2+0x1a0>)
 8013d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d58:	e014      	b.n	8013d84 <__ieee754_atan2+0x14c>
 8013d5a:	a121      	add	r1, pc, #132	; (adr r1, 8013de0 <__ieee754_atan2+0x1a8>)
 8013d5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d60:	e7ec      	b.n	8013d3c <__ieee754_atan2+0x104>
 8013d62:	2000      	movs	r0, #0
 8013d64:	2100      	movs	r1, #0
 8013d66:	e7e9      	b.n	8013d3c <__ieee754_atan2+0x104>
 8013d68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013d6c:	4619      	mov	r1, r3
 8013d6e:	e784      	b.n	8013c7a <__ieee754_atan2+0x42>
 8013d70:	a317      	add	r3, pc, #92	; (adr r3, 8013dd0 <__ieee754_atan2+0x198>)
 8013d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d76:	f7ec fa87 	bl	8000288 <__aeabi_dsub>
 8013d7a:	4602      	mov	r2, r0
 8013d7c:	460b      	mov	r3, r1
 8013d7e:	a116      	add	r1, pc, #88	; (adr r1, 8013dd8 <__ieee754_atan2+0x1a0>)
 8013d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d84:	f7ec fa80 	bl	8000288 <__aeabi_dsub>
 8013d88:	e777      	b.n	8013c7a <__ieee754_atan2+0x42>
 8013d8a:	a117      	add	r1, pc, #92	; (adr r1, 8013de8 <__ieee754_atan2+0x1b0>)
 8013d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d90:	e773      	b.n	8013c7a <__ieee754_atan2+0x42>
 8013d92:	a111      	add	r1, pc, #68	; (adr r1, 8013dd8 <__ieee754_atan2+0x1a0>)
 8013d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d98:	e76f      	b.n	8013c7a <__ieee754_atan2+0x42>
 8013d9a:	a111      	add	r1, pc, #68	; (adr r1, 8013de0 <__ieee754_atan2+0x1a8>)
 8013d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013da0:	e76b      	b.n	8013c7a <__ieee754_atan2+0x42>
 8013da2:	bf00      	nop
 8013da4:	f3af 8000 	nop.w
 8013da8:	54442d18 	.word	0x54442d18
 8013dac:	c00921fb 	.word	0xc00921fb
 8013db0:	54442d18 	.word	0x54442d18
 8013db4:	bff921fb 	.word	0xbff921fb
 8013db8:	54442d18 	.word	0x54442d18
 8013dbc:	bfe921fb 	.word	0xbfe921fb
 8013dc0:	7f3321d2 	.word	0x7f3321d2
 8013dc4:	4002d97c 	.word	0x4002d97c
 8013dc8:	7f3321d2 	.word	0x7f3321d2
 8013dcc:	c002d97c 	.word	0xc002d97c
 8013dd0:	33145c07 	.word	0x33145c07
 8013dd4:	3ca1a626 	.word	0x3ca1a626
 8013dd8:	54442d18 	.word	0x54442d18
 8013ddc:	400921fb 	.word	0x400921fb
 8013de0:	54442d18 	.word	0x54442d18
 8013de4:	3ff921fb 	.word	0x3ff921fb
 8013de8:	54442d18 	.word	0x54442d18
 8013dec:	3fe921fb 	.word	0x3fe921fb
 8013df0:	7ff00000 	.word	0x7ff00000
 8013df4:	00000000 	.word	0x00000000

08013df8 <__ieee754_pow>:
 8013df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dfc:	b091      	sub	sp, #68	; 0x44
 8013dfe:	ed8d 1b00 	vstr	d1, [sp]
 8013e02:	e9dd 2900 	ldrd	r2, r9, [sp]
 8013e06:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013e0a:	ea58 0302 	orrs.w	r3, r8, r2
 8013e0e:	ec57 6b10 	vmov	r6, r7, d0
 8013e12:	f000 84be 	beq.w	8014792 <__ieee754_pow+0x99a>
 8013e16:	4b7a      	ldr	r3, [pc, #488]	; (8014000 <__ieee754_pow+0x208>)
 8013e18:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013e1c:	429c      	cmp	r4, r3
 8013e1e:	463d      	mov	r5, r7
 8013e20:	ee10 aa10 	vmov	sl, s0
 8013e24:	dc09      	bgt.n	8013e3a <__ieee754_pow+0x42>
 8013e26:	d103      	bne.n	8013e30 <__ieee754_pow+0x38>
 8013e28:	b93e      	cbnz	r6, 8013e3a <__ieee754_pow+0x42>
 8013e2a:	45a0      	cmp	r8, r4
 8013e2c:	dc0d      	bgt.n	8013e4a <__ieee754_pow+0x52>
 8013e2e:	e001      	b.n	8013e34 <__ieee754_pow+0x3c>
 8013e30:	4598      	cmp	r8, r3
 8013e32:	dc02      	bgt.n	8013e3a <__ieee754_pow+0x42>
 8013e34:	4598      	cmp	r8, r3
 8013e36:	d10e      	bne.n	8013e56 <__ieee754_pow+0x5e>
 8013e38:	b16a      	cbz	r2, 8013e56 <__ieee754_pow+0x5e>
 8013e3a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013e3e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013e42:	ea54 030a 	orrs.w	r3, r4, sl
 8013e46:	f000 84a4 	beq.w	8014792 <__ieee754_pow+0x99a>
 8013e4a:	486e      	ldr	r0, [pc, #440]	; (8014004 <__ieee754_pow+0x20c>)
 8013e4c:	b011      	add	sp, #68	; 0x44
 8013e4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e52:	f000 bf49 	b.w	8014ce8 <nan>
 8013e56:	2d00      	cmp	r5, #0
 8013e58:	da53      	bge.n	8013f02 <__ieee754_pow+0x10a>
 8013e5a:	4b6b      	ldr	r3, [pc, #428]	; (8014008 <__ieee754_pow+0x210>)
 8013e5c:	4598      	cmp	r8, r3
 8013e5e:	dc4d      	bgt.n	8013efc <__ieee754_pow+0x104>
 8013e60:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013e64:	4598      	cmp	r8, r3
 8013e66:	dd4c      	ble.n	8013f02 <__ieee754_pow+0x10a>
 8013e68:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013e6c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013e70:	2b14      	cmp	r3, #20
 8013e72:	dd26      	ble.n	8013ec2 <__ieee754_pow+0xca>
 8013e74:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013e78:	fa22 f103 	lsr.w	r1, r2, r3
 8013e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8013e80:	4293      	cmp	r3, r2
 8013e82:	d13e      	bne.n	8013f02 <__ieee754_pow+0x10a>
 8013e84:	f001 0101 	and.w	r1, r1, #1
 8013e88:	f1c1 0b02 	rsb	fp, r1, #2
 8013e8c:	2a00      	cmp	r2, #0
 8013e8e:	d15b      	bne.n	8013f48 <__ieee754_pow+0x150>
 8013e90:	4b5b      	ldr	r3, [pc, #364]	; (8014000 <__ieee754_pow+0x208>)
 8013e92:	4598      	cmp	r8, r3
 8013e94:	d124      	bne.n	8013ee0 <__ieee754_pow+0xe8>
 8013e96:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013e9a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013e9e:	ea53 030a 	orrs.w	r3, r3, sl
 8013ea2:	f000 8476 	beq.w	8014792 <__ieee754_pow+0x99a>
 8013ea6:	4b59      	ldr	r3, [pc, #356]	; (801400c <__ieee754_pow+0x214>)
 8013ea8:	429c      	cmp	r4, r3
 8013eaa:	dd2d      	ble.n	8013f08 <__ieee754_pow+0x110>
 8013eac:	f1b9 0f00 	cmp.w	r9, #0
 8013eb0:	f280 8473 	bge.w	801479a <__ieee754_pow+0x9a2>
 8013eb4:	2000      	movs	r0, #0
 8013eb6:	2100      	movs	r1, #0
 8013eb8:	ec41 0b10 	vmov	d0, r0, r1
 8013ebc:	b011      	add	sp, #68	; 0x44
 8013ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ec2:	2a00      	cmp	r2, #0
 8013ec4:	d13e      	bne.n	8013f44 <__ieee754_pow+0x14c>
 8013ec6:	f1c3 0314 	rsb	r3, r3, #20
 8013eca:	fa48 f103 	asr.w	r1, r8, r3
 8013ece:	fa01 f303 	lsl.w	r3, r1, r3
 8013ed2:	4543      	cmp	r3, r8
 8013ed4:	f040 8469 	bne.w	80147aa <__ieee754_pow+0x9b2>
 8013ed8:	f001 0101 	and.w	r1, r1, #1
 8013edc:	f1c1 0b02 	rsb	fp, r1, #2
 8013ee0:	4b4b      	ldr	r3, [pc, #300]	; (8014010 <__ieee754_pow+0x218>)
 8013ee2:	4598      	cmp	r8, r3
 8013ee4:	d118      	bne.n	8013f18 <__ieee754_pow+0x120>
 8013ee6:	f1b9 0f00 	cmp.w	r9, #0
 8013eea:	f280 845a 	bge.w	80147a2 <__ieee754_pow+0x9aa>
 8013eee:	4948      	ldr	r1, [pc, #288]	; (8014010 <__ieee754_pow+0x218>)
 8013ef0:	4632      	mov	r2, r6
 8013ef2:	463b      	mov	r3, r7
 8013ef4:	2000      	movs	r0, #0
 8013ef6:	f7ec fca9 	bl	800084c <__aeabi_ddiv>
 8013efa:	e7dd      	b.n	8013eb8 <__ieee754_pow+0xc0>
 8013efc:	f04f 0b02 	mov.w	fp, #2
 8013f00:	e7c4      	b.n	8013e8c <__ieee754_pow+0x94>
 8013f02:	f04f 0b00 	mov.w	fp, #0
 8013f06:	e7c1      	b.n	8013e8c <__ieee754_pow+0x94>
 8013f08:	f1b9 0f00 	cmp.w	r9, #0
 8013f0c:	dad2      	bge.n	8013eb4 <__ieee754_pow+0xbc>
 8013f0e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013f12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013f16:	e7cf      	b.n	8013eb8 <__ieee754_pow+0xc0>
 8013f18:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013f1c:	d106      	bne.n	8013f2c <__ieee754_pow+0x134>
 8013f1e:	4632      	mov	r2, r6
 8013f20:	463b      	mov	r3, r7
 8013f22:	4610      	mov	r0, r2
 8013f24:	4619      	mov	r1, r3
 8013f26:	f7ec fb67 	bl	80005f8 <__aeabi_dmul>
 8013f2a:	e7c5      	b.n	8013eb8 <__ieee754_pow+0xc0>
 8013f2c:	4b39      	ldr	r3, [pc, #228]	; (8014014 <__ieee754_pow+0x21c>)
 8013f2e:	4599      	cmp	r9, r3
 8013f30:	d10a      	bne.n	8013f48 <__ieee754_pow+0x150>
 8013f32:	2d00      	cmp	r5, #0
 8013f34:	db08      	blt.n	8013f48 <__ieee754_pow+0x150>
 8013f36:	ec47 6b10 	vmov	d0, r6, r7
 8013f3a:	b011      	add	sp, #68	; 0x44
 8013f3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f40:	f000 bc68 	b.w	8014814 <__ieee754_sqrt>
 8013f44:	f04f 0b00 	mov.w	fp, #0
 8013f48:	ec47 6b10 	vmov	d0, r6, r7
 8013f4c:	f000 feb8 	bl	8014cc0 <fabs>
 8013f50:	ec51 0b10 	vmov	r0, r1, d0
 8013f54:	f1ba 0f00 	cmp.w	sl, #0
 8013f58:	d127      	bne.n	8013faa <__ieee754_pow+0x1b2>
 8013f5a:	b124      	cbz	r4, 8013f66 <__ieee754_pow+0x16e>
 8013f5c:	4b2c      	ldr	r3, [pc, #176]	; (8014010 <__ieee754_pow+0x218>)
 8013f5e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013f62:	429a      	cmp	r2, r3
 8013f64:	d121      	bne.n	8013faa <__ieee754_pow+0x1b2>
 8013f66:	f1b9 0f00 	cmp.w	r9, #0
 8013f6a:	da05      	bge.n	8013f78 <__ieee754_pow+0x180>
 8013f6c:	4602      	mov	r2, r0
 8013f6e:	460b      	mov	r3, r1
 8013f70:	2000      	movs	r0, #0
 8013f72:	4927      	ldr	r1, [pc, #156]	; (8014010 <__ieee754_pow+0x218>)
 8013f74:	f7ec fc6a 	bl	800084c <__aeabi_ddiv>
 8013f78:	2d00      	cmp	r5, #0
 8013f7a:	da9d      	bge.n	8013eb8 <__ieee754_pow+0xc0>
 8013f7c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013f80:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013f84:	ea54 030b 	orrs.w	r3, r4, fp
 8013f88:	d108      	bne.n	8013f9c <__ieee754_pow+0x1a4>
 8013f8a:	4602      	mov	r2, r0
 8013f8c:	460b      	mov	r3, r1
 8013f8e:	4610      	mov	r0, r2
 8013f90:	4619      	mov	r1, r3
 8013f92:	f7ec f979 	bl	8000288 <__aeabi_dsub>
 8013f96:	4602      	mov	r2, r0
 8013f98:	460b      	mov	r3, r1
 8013f9a:	e7ac      	b.n	8013ef6 <__ieee754_pow+0xfe>
 8013f9c:	f1bb 0f01 	cmp.w	fp, #1
 8013fa0:	d18a      	bne.n	8013eb8 <__ieee754_pow+0xc0>
 8013fa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013fa6:	4619      	mov	r1, r3
 8013fa8:	e786      	b.n	8013eb8 <__ieee754_pow+0xc0>
 8013faa:	0fed      	lsrs	r5, r5, #31
 8013fac:	1e6b      	subs	r3, r5, #1
 8013fae:	930d      	str	r3, [sp, #52]	; 0x34
 8013fb0:	ea5b 0303 	orrs.w	r3, fp, r3
 8013fb4:	d102      	bne.n	8013fbc <__ieee754_pow+0x1c4>
 8013fb6:	4632      	mov	r2, r6
 8013fb8:	463b      	mov	r3, r7
 8013fba:	e7e8      	b.n	8013f8e <__ieee754_pow+0x196>
 8013fbc:	4b16      	ldr	r3, [pc, #88]	; (8014018 <__ieee754_pow+0x220>)
 8013fbe:	4598      	cmp	r8, r3
 8013fc0:	f340 80fe 	ble.w	80141c0 <__ieee754_pow+0x3c8>
 8013fc4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013fc8:	4598      	cmp	r8, r3
 8013fca:	dd0a      	ble.n	8013fe2 <__ieee754_pow+0x1ea>
 8013fcc:	4b0f      	ldr	r3, [pc, #60]	; (801400c <__ieee754_pow+0x214>)
 8013fce:	429c      	cmp	r4, r3
 8013fd0:	dc0d      	bgt.n	8013fee <__ieee754_pow+0x1f6>
 8013fd2:	f1b9 0f00 	cmp.w	r9, #0
 8013fd6:	f6bf af6d 	bge.w	8013eb4 <__ieee754_pow+0xbc>
 8013fda:	a307      	add	r3, pc, #28	; (adr r3, 8013ff8 <__ieee754_pow+0x200>)
 8013fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fe0:	e79f      	b.n	8013f22 <__ieee754_pow+0x12a>
 8013fe2:	4b0e      	ldr	r3, [pc, #56]	; (801401c <__ieee754_pow+0x224>)
 8013fe4:	429c      	cmp	r4, r3
 8013fe6:	ddf4      	ble.n	8013fd2 <__ieee754_pow+0x1da>
 8013fe8:	4b09      	ldr	r3, [pc, #36]	; (8014010 <__ieee754_pow+0x218>)
 8013fea:	429c      	cmp	r4, r3
 8013fec:	dd18      	ble.n	8014020 <__ieee754_pow+0x228>
 8013fee:	f1b9 0f00 	cmp.w	r9, #0
 8013ff2:	dcf2      	bgt.n	8013fda <__ieee754_pow+0x1e2>
 8013ff4:	e75e      	b.n	8013eb4 <__ieee754_pow+0xbc>
 8013ff6:	bf00      	nop
 8013ff8:	8800759c 	.word	0x8800759c
 8013ffc:	7e37e43c 	.word	0x7e37e43c
 8014000:	7ff00000 	.word	0x7ff00000
 8014004:	08015281 	.word	0x08015281
 8014008:	433fffff 	.word	0x433fffff
 801400c:	3fefffff 	.word	0x3fefffff
 8014010:	3ff00000 	.word	0x3ff00000
 8014014:	3fe00000 	.word	0x3fe00000
 8014018:	41e00000 	.word	0x41e00000
 801401c:	3feffffe 	.word	0x3feffffe
 8014020:	2200      	movs	r2, #0
 8014022:	4b63      	ldr	r3, [pc, #396]	; (80141b0 <__ieee754_pow+0x3b8>)
 8014024:	f7ec f930 	bl	8000288 <__aeabi_dsub>
 8014028:	a355      	add	r3, pc, #340	; (adr r3, 8014180 <__ieee754_pow+0x388>)
 801402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801402e:	4604      	mov	r4, r0
 8014030:	460d      	mov	r5, r1
 8014032:	f7ec fae1 	bl	80005f8 <__aeabi_dmul>
 8014036:	a354      	add	r3, pc, #336	; (adr r3, 8014188 <__ieee754_pow+0x390>)
 8014038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801403c:	4606      	mov	r6, r0
 801403e:	460f      	mov	r7, r1
 8014040:	4620      	mov	r0, r4
 8014042:	4629      	mov	r1, r5
 8014044:	f7ec fad8 	bl	80005f8 <__aeabi_dmul>
 8014048:	2200      	movs	r2, #0
 801404a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801404e:	4b59      	ldr	r3, [pc, #356]	; (80141b4 <__ieee754_pow+0x3bc>)
 8014050:	4620      	mov	r0, r4
 8014052:	4629      	mov	r1, r5
 8014054:	f7ec fad0 	bl	80005f8 <__aeabi_dmul>
 8014058:	4602      	mov	r2, r0
 801405a:	460b      	mov	r3, r1
 801405c:	a14c      	add	r1, pc, #304	; (adr r1, 8014190 <__ieee754_pow+0x398>)
 801405e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014062:	f7ec f911 	bl	8000288 <__aeabi_dsub>
 8014066:	4622      	mov	r2, r4
 8014068:	462b      	mov	r3, r5
 801406a:	f7ec fac5 	bl	80005f8 <__aeabi_dmul>
 801406e:	4602      	mov	r2, r0
 8014070:	460b      	mov	r3, r1
 8014072:	2000      	movs	r0, #0
 8014074:	4950      	ldr	r1, [pc, #320]	; (80141b8 <__ieee754_pow+0x3c0>)
 8014076:	f7ec f907 	bl	8000288 <__aeabi_dsub>
 801407a:	4622      	mov	r2, r4
 801407c:	462b      	mov	r3, r5
 801407e:	4680      	mov	r8, r0
 8014080:	4689      	mov	r9, r1
 8014082:	4620      	mov	r0, r4
 8014084:	4629      	mov	r1, r5
 8014086:	f7ec fab7 	bl	80005f8 <__aeabi_dmul>
 801408a:	4602      	mov	r2, r0
 801408c:	460b      	mov	r3, r1
 801408e:	4640      	mov	r0, r8
 8014090:	4649      	mov	r1, r9
 8014092:	f7ec fab1 	bl	80005f8 <__aeabi_dmul>
 8014096:	a340      	add	r3, pc, #256	; (adr r3, 8014198 <__ieee754_pow+0x3a0>)
 8014098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801409c:	f7ec faac 	bl	80005f8 <__aeabi_dmul>
 80140a0:	4602      	mov	r2, r0
 80140a2:	460b      	mov	r3, r1
 80140a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140a8:	f7ec f8ee 	bl	8000288 <__aeabi_dsub>
 80140ac:	4602      	mov	r2, r0
 80140ae:	460b      	mov	r3, r1
 80140b0:	4604      	mov	r4, r0
 80140b2:	460d      	mov	r5, r1
 80140b4:	4630      	mov	r0, r6
 80140b6:	4639      	mov	r1, r7
 80140b8:	f7ec f8e8 	bl	800028c <__adddf3>
 80140bc:	2000      	movs	r0, #0
 80140be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80140c2:	4632      	mov	r2, r6
 80140c4:	463b      	mov	r3, r7
 80140c6:	f7ec f8df 	bl	8000288 <__aeabi_dsub>
 80140ca:	4602      	mov	r2, r0
 80140cc:	460b      	mov	r3, r1
 80140ce:	4620      	mov	r0, r4
 80140d0:	4629      	mov	r1, r5
 80140d2:	f7ec f8d9 	bl	8000288 <__aeabi_dsub>
 80140d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80140d8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80140dc:	4313      	orrs	r3, r2
 80140de:	4606      	mov	r6, r0
 80140e0:	460f      	mov	r7, r1
 80140e2:	f040 81eb 	bne.w	80144bc <__ieee754_pow+0x6c4>
 80140e6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80141a0 <__ieee754_pow+0x3a8>
 80140ea:	e9dd 4500 	ldrd	r4, r5, [sp]
 80140ee:	2400      	movs	r4, #0
 80140f0:	4622      	mov	r2, r4
 80140f2:	462b      	mov	r3, r5
 80140f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80140f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80140fc:	f7ec f8c4 	bl	8000288 <__aeabi_dsub>
 8014100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014104:	f7ec fa78 	bl	80005f8 <__aeabi_dmul>
 8014108:	e9dd 2300 	ldrd	r2, r3, [sp]
 801410c:	4680      	mov	r8, r0
 801410e:	4689      	mov	r9, r1
 8014110:	4630      	mov	r0, r6
 8014112:	4639      	mov	r1, r7
 8014114:	f7ec fa70 	bl	80005f8 <__aeabi_dmul>
 8014118:	4602      	mov	r2, r0
 801411a:	460b      	mov	r3, r1
 801411c:	4640      	mov	r0, r8
 801411e:	4649      	mov	r1, r9
 8014120:	f7ec f8b4 	bl	800028c <__adddf3>
 8014124:	4622      	mov	r2, r4
 8014126:	462b      	mov	r3, r5
 8014128:	4680      	mov	r8, r0
 801412a:	4689      	mov	r9, r1
 801412c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014130:	f7ec fa62 	bl	80005f8 <__aeabi_dmul>
 8014134:	460b      	mov	r3, r1
 8014136:	4604      	mov	r4, r0
 8014138:	460d      	mov	r5, r1
 801413a:	4602      	mov	r2, r0
 801413c:	4649      	mov	r1, r9
 801413e:	4640      	mov	r0, r8
 8014140:	e9cd 4500 	strd	r4, r5, [sp]
 8014144:	f7ec f8a2 	bl	800028c <__adddf3>
 8014148:	4b1c      	ldr	r3, [pc, #112]	; (80141bc <__ieee754_pow+0x3c4>)
 801414a:	4299      	cmp	r1, r3
 801414c:	4606      	mov	r6, r0
 801414e:	460f      	mov	r7, r1
 8014150:	468b      	mov	fp, r1
 8014152:	f340 82f7 	ble.w	8014744 <__ieee754_pow+0x94c>
 8014156:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801415a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801415e:	4303      	orrs	r3, r0
 8014160:	f000 81ea 	beq.w	8014538 <__ieee754_pow+0x740>
 8014164:	a310      	add	r3, pc, #64	; (adr r3, 80141a8 <__ieee754_pow+0x3b0>)
 8014166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801416a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801416e:	f7ec fa43 	bl	80005f8 <__aeabi_dmul>
 8014172:	a30d      	add	r3, pc, #52	; (adr r3, 80141a8 <__ieee754_pow+0x3b0>)
 8014174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014178:	e6d5      	b.n	8013f26 <__ieee754_pow+0x12e>
 801417a:	bf00      	nop
 801417c:	f3af 8000 	nop.w
 8014180:	60000000 	.word	0x60000000
 8014184:	3ff71547 	.word	0x3ff71547
 8014188:	f85ddf44 	.word	0xf85ddf44
 801418c:	3e54ae0b 	.word	0x3e54ae0b
 8014190:	55555555 	.word	0x55555555
 8014194:	3fd55555 	.word	0x3fd55555
 8014198:	652b82fe 	.word	0x652b82fe
 801419c:	3ff71547 	.word	0x3ff71547
 80141a0:	00000000 	.word	0x00000000
 80141a4:	bff00000 	.word	0xbff00000
 80141a8:	8800759c 	.word	0x8800759c
 80141ac:	7e37e43c 	.word	0x7e37e43c
 80141b0:	3ff00000 	.word	0x3ff00000
 80141b4:	3fd00000 	.word	0x3fd00000
 80141b8:	3fe00000 	.word	0x3fe00000
 80141bc:	408fffff 	.word	0x408fffff
 80141c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80141c4:	f04f 0200 	mov.w	r2, #0
 80141c8:	da05      	bge.n	80141d6 <__ieee754_pow+0x3de>
 80141ca:	4bd3      	ldr	r3, [pc, #844]	; (8014518 <__ieee754_pow+0x720>)
 80141cc:	f7ec fa14 	bl	80005f8 <__aeabi_dmul>
 80141d0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80141d4:	460c      	mov	r4, r1
 80141d6:	1523      	asrs	r3, r4, #20
 80141d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80141dc:	4413      	add	r3, r2
 80141de:	9309      	str	r3, [sp, #36]	; 0x24
 80141e0:	4bce      	ldr	r3, [pc, #824]	; (801451c <__ieee754_pow+0x724>)
 80141e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80141e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80141ea:	429c      	cmp	r4, r3
 80141ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80141f0:	dd08      	ble.n	8014204 <__ieee754_pow+0x40c>
 80141f2:	4bcb      	ldr	r3, [pc, #812]	; (8014520 <__ieee754_pow+0x728>)
 80141f4:	429c      	cmp	r4, r3
 80141f6:	f340 815e 	ble.w	80144b6 <__ieee754_pow+0x6be>
 80141fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141fc:	3301      	adds	r3, #1
 80141fe:	9309      	str	r3, [sp, #36]	; 0x24
 8014200:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014204:	f04f 0a00 	mov.w	sl, #0
 8014208:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801420c:	930c      	str	r3, [sp, #48]	; 0x30
 801420e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014210:	4bc4      	ldr	r3, [pc, #784]	; (8014524 <__ieee754_pow+0x72c>)
 8014212:	4413      	add	r3, r2
 8014214:	ed93 7b00 	vldr	d7, [r3]
 8014218:	4629      	mov	r1, r5
 801421a:	ec53 2b17 	vmov	r2, r3, d7
 801421e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014222:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014226:	f7ec f82f 	bl	8000288 <__aeabi_dsub>
 801422a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801422e:	4606      	mov	r6, r0
 8014230:	460f      	mov	r7, r1
 8014232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014236:	f7ec f829 	bl	800028c <__adddf3>
 801423a:	4602      	mov	r2, r0
 801423c:	460b      	mov	r3, r1
 801423e:	2000      	movs	r0, #0
 8014240:	49b9      	ldr	r1, [pc, #740]	; (8014528 <__ieee754_pow+0x730>)
 8014242:	f7ec fb03 	bl	800084c <__aeabi_ddiv>
 8014246:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801424a:	4602      	mov	r2, r0
 801424c:	460b      	mov	r3, r1
 801424e:	4630      	mov	r0, r6
 8014250:	4639      	mov	r1, r7
 8014252:	f7ec f9d1 	bl	80005f8 <__aeabi_dmul>
 8014256:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801425a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801425e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014262:	2300      	movs	r3, #0
 8014264:	9302      	str	r3, [sp, #8]
 8014266:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801426a:	106d      	asrs	r5, r5, #1
 801426c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014270:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014274:	2200      	movs	r2, #0
 8014276:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801427a:	4640      	mov	r0, r8
 801427c:	4649      	mov	r1, r9
 801427e:	4614      	mov	r4, r2
 8014280:	461d      	mov	r5, r3
 8014282:	f7ec f9b9 	bl	80005f8 <__aeabi_dmul>
 8014286:	4602      	mov	r2, r0
 8014288:	460b      	mov	r3, r1
 801428a:	4630      	mov	r0, r6
 801428c:	4639      	mov	r1, r7
 801428e:	f7eb fffb 	bl	8000288 <__aeabi_dsub>
 8014292:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014296:	4606      	mov	r6, r0
 8014298:	460f      	mov	r7, r1
 801429a:	4620      	mov	r0, r4
 801429c:	4629      	mov	r1, r5
 801429e:	f7eb fff3 	bl	8000288 <__aeabi_dsub>
 80142a2:	4602      	mov	r2, r0
 80142a4:	460b      	mov	r3, r1
 80142a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80142aa:	f7eb ffed 	bl	8000288 <__aeabi_dsub>
 80142ae:	4642      	mov	r2, r8
 80142b0:	464b      	mov	r3, r9
 80142b2:	f7ec f9a1 	bl	80005f8 <__aeabi_dmul>
 80142b6:	4602      	mov	r2, r0
 80142b8:	460b      	mov	r3, r1
 80142ba:	4630      	mov	r0, r6
 80142bc:	4639      	mov	r1, r7
 80142be:	f7eb ffe3 	bl	8000288 <__aeabi_dsub>
 80142c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80142c6:	f7ec f997 	bl	80005f8 <__aeabi_dmul>
 80142ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80142ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80142d2:	4610      	mov	r0, r2
 80142d4:	4619      	mov	r1, r3
 80142d6:	f7ec f98f 	bl	80005f8 <__aeabi_dmul>
 80142da:	a37b      	add	r3, pc, #492	; (adr r3, 80144c8 <__ieee754_pow+0x6d0>)
 80142dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e0:	4604      	mov	r4, r0
 80142e2:	460d      	mov	r5, r1
 80142e4:	f7ec f988 	bl	80005f8 <__aeabi_dmul>
 80142e8:	a379      	add	r3, pc, #484	; (adr r3, 80144d0 <__ieee754_pow+0x6d8>)
 80142ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ee:	f7eb ffcd 	bl	800028c <__adddf3>
 80142f2:	4622      	mov	r2, r4
 80142f4:	462b      	mov	r3, r5
 80142f6:	f7ec f97f 	bl	80005f8 <__aeabi_dmul>
 80142fa:	a377      	add	r3, pc, #476	; (adr r3, 80144d8 <__ieee754_pow+0x6e0>)
 80142fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014300:	f7eb ffc4 	bl	800028c <__adddf3>
 8014304:	4622      	mov	r2, r4
 8014306:	462b      	mov	r3, r5
 8014308:	f7ec f976 	bl	80005f8 <__aeabi_dmul>
 801430c:	a374      	add	r3, pc, #464	; (adr r3, 80144e0 <__ieee754_pow+0x6e8>)
 801430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014312:	f7eb ffbb 	bl	800028c <__adddf3>
 8014316:	4622      	mov	r2, r4
 8014318:	462b      	mov	r3, r5
 801431a:	f7ec f96d 	bl	80005f8 <__aeabi_dmul>
 801431e:	a372      	add	r3, pc, #456	; (adr r3, 80144e8 <__ieee754_pow+0x6f0>)
 8014320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014324:	f7eb ffb2 	bl	800028c <__adddf3>
 8014328:	4622      	mov	r2, r4
 801432a:	462b      	mov	r3, r5
 801432c:	f7ec f964 	bl	80005f8 <__aeabi_dmul>
 8014330:	a36f      	add	r3, pc, #444	; (adr r3, 80144f0 <__ieee754_pow+0x6f8>)
 8014332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014336:	f7eb ffa9 	bl	800028c <__adddf3>
 801433a:	4622      	mov	r2, r4
 801433c:	4606      	mov	r6, r0
 801433e:	460f      	mov	r7, r1
 8014340:	462b      	mov	r3, r5
 8014342:	4620      	mov	r0, r4
 8014344:	4629      	mov	r1, r5
 8014346:	f7ec f957 	bl	80005f8 <__aeabi_dmul>
 801434a:	4602      	mov	r2, r0
 801434c:	460b      	mov	r3, r1
 801434e:	4630      	mov	r0, r6
 8014350:	4639      	mov	r1, r7
 8014352:	f7ec f951 	bl	80005f8 <__aeabi_dmul>
 8014356:	4642      	mov	r2, r8
 8014358:	4604      	mov	r4, r0
 801435a:	460d      	mov	r5, r1
 801435c:	464b      	mov	r3, r9
 801435e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014362:	f7eb ff93 	bl	800028c <__adddf3>
 8014366:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801436a:	f7ec f945 	bl	80005f8 <__aeabi_dmul>
 801436e:	4622      	mov	r2, r4
 8014370:	462b      	mov	r3, r5
 8014372:	f7eb ff8b 	bl	800028c <__adddf3>
 8014376:	4642      	mov	r2, r8
 8014378:	4606      	mov	r6, r0
 801437a:	460f      	mov	r7, r1
 801437c:	464b      	mov	r3, r9
 801437e:	4640      	mov	r0, r8
 8014380:	4649      	mov	r1, r9
 8014382:	f7ec f939 	bl	80005f8 <__aeabi_dmul>
 8014386:	2200      	movs	r2, #0
 8014388:	4b68      	ldr	r3, [pc, #416]	; (801452c <__ieee754_pow+0x734>)
 801438a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801438e:	f7eb ff7d 	bl	800028c <__adddf3>
 8014392:	4632      	mov	r2, r6
 8014394:	463b      	mov	r3, r7
 8014396:	f7eb ff79 	bl	800028c <__adddf3>
 801439a:	9802      	ldr	r0, [sp, #8]
 801439c:	460d      	mov	r5, r1
 801439e:	4604      	mov	r4, r0
 80143a0:	4602      	mov	r2, r0
 80143a2:	460b      	mov	r3, r1
 80143a4:	4640      	mov	r0, r8
 80143a6:	4649      	mov	r1, r9
 80143a8:	f7ec f926 	bl	80005f8 <__aeabi_dmul>
 80143ac:	2200      	movs	r2, #0
 80143ae:	4680      	mov	r8, r0
 80143b0:	4689      	mov	r9, r1
 80143b2:	4b5e      	ldr	r3, [pc, #376]	; (801452c <__ieee754_pow+0x734>)
 80143b4:	4620      	mov	r0, r4
 80143b6:	4629      	mov	r1, r5
 80143b8:	f7eb ff66 	bl	8000288 <__aeabi_dsub>
 80143bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80143c0:	f7eb ff62 	bl	8000288 <__aeabi_dsub>
 80143c4:	4602      	mov	r2, r0
 80143c6:	460b      	mov	r3, r1
 80143c8:	4630      	mov	r0, r6
 80143ca:	4639      	mov	r1, r7
 80143cc:	f7eb ff5c 	bl	8000288 <__aeabi_dsub>
 80143d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80143d4:	f7ec f910 	bl	80005f8 <__aeabi_dmul>
 80143d8:	4622      	mov	r2, r4
 80143da:	4606      	mov	r6, r0
 80143dc:	460f      	mov	r7, r1
 80143de:	462b      	mov	r3, r5
 80143e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80143e4:	f7ec f908 	bl	80005f8 <__aeabi_dmul>
 80143e8:	4602      	mov	r2, r0
 80143ea:	460b      	mov	r3, r1
 80143ec:	4630      	mov	r0, r6
 80143ee:	4639      	mov	r1, r7
 80143f0:	f7eb ff4c 	bl	800028c <__adddf3>
 80143f4:	4606      	mov	r6, r0
 80143f6:	460f      	mov	r7, r1
 80143f8:	4602      	mov	r2, r0
 80143fa:	460b      	mov	r3, r1
 80143fc:	4640      	mov	r0, r8
 80143fe:	4649      	mov	r1, r9
 8014400:	f7eb ff44 	bl	800028c <__adddf3>
 8014404:	9802      	ldr	r0, [sp, #8]
 8014406:	a33c      	add	r3, pc, #240	; (adr r3, 80144f8 <__ieee754_pow+0x700>)
 8014408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801440c:	4604      	mov	r4, r0
 801440e:	460d      	mov	r5, r1
 8014410:	f7ec f8f2 	bl	80005f8 <__aeabi_dmul>
 8014414:	4642      	mov	r2, r8
 8014416:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801441a:	464b      	mov	r3, r9
 801441c:	4620      	mov	r0, r4
 801441e:	4629      	mov	r1, r5
 8014420:	f7eb ff32 	bl	8000288 <__aeabi_dsub>
 8014424:	4602      	mov	r2, r0
 8014426:	460b      	mov	r3, r1
 8014428:	4630      	mov	r0, r6
 801442a:	4639      	mov	r1, r7
 801442c:	f7eb ff2c 	bl	8000288 <__aeabi_dsub>
 8014430:	a333      	add	r3, pc, #204	; (adr r3, 8014500 <__ieee754_pow+0x708>)
 8014432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014436:	f7ec f8df 	bl	80005f8 <__aeabi_dmul>
 801443a:	a333      	add	r3, pc, #204	; (adr r3, 8014508 <__ieee754_pow+0x710>)
 801443c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014440:	4606      	mov	r6, r0
 8014442:	460f      	mov	r7, r1
 8014444:	4620      	mov	r0, r4
 8014446:	4629      	mov	r1, r5
 8014448:	f7ec f8d6 	bl	80005f8 <__aeabi_dmul>
 801444c:	4602      	mov	r2, r0
 801444e:	460b      	mov	r3, r1
 8014450:	4630      	mov	r0, r6
 8014452:	4639      	mov	r1, r7
 8014454:	f7eb ff1a 	bl	800028c <__adddf3>
 8014458:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801445a:	4b35      	ldr	r3, [pc, #212]	; (8014530 <__ieee754_pow+0x738>)
 801445c:	4413      	add	r3, r2
 801445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014462:	f7eb ff13 	bl	800028c <__adddf3>
 8014466:	4604      	mov	r4, r0
 8014468:	9809      	ldr	r0, [sp, #36]	; 0x24
 801446a:	460d      	mov	r5, r1
 801446c:	f7ec f85a 	bl	8000524 <__aeabi_i2d>
 8014470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014472:	4b30      	ldr	r3, [pc, #192]	; (8014534 <__ieee754_pow+0x73c>)
 8014474:	4413      	add	r3, r2
 8014476:	e9d3 8900 	ldrd	r8, r9, [r3]
 801447a:	4606      	mov	r6, r0
 801447c:	460f      	mov	r7, r1
 801447e:	4622      	mov	r2, r4
 8014480:	462b      	mov	r3, r5
 8014482:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014486:	f7eb ff01 	bl	800028c <__adddf3>
 801448a:	4642      	mov	r2, r8
 801448c:	464b      	mov	r3, r9
 801448e:	f7eb fefd 	bl	800028c <__adddf3>
 8014492:	4632      	mov	r2, r6
 8014494:	463b      	mov	r3, r7
 8014496:	f7eb fef9 	bl	800028c <__adddf3>
 801449a:	9802      	ldr	r0, [sp, #8]
 801449c:	4632      	mov	r2, r6
 801449e:	463b      	mov	r3, r7
 80144a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80144a4:	f7eb fef0 	bl	8000288 <__aeabi_dsub>
 80144a8:	4642      	mov	r2, r8
 80144aa:	464b      	mov	r3, r9
 80144ac:	f7eb feec 	bl	8000288 <__aeabi_dsub>
 80144b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80144b4:	e607      	b.n	80140c6 <__ieee754_pow+0x2ce>
 80144b6:	f04f 0a01 	mov.w	sl, #1
 80144ba:	e6a5      	b.n	8014208 <__ieee754_pow+0x410>
 80144bc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014510 <__ieee754_pow+0x718>
 80144c0:	e613      	b.n	80140ea <__ieee754_pow+0x2f2>
 80144c2:	bf00      	nop
 80144c4:	f3af 8000 	nop.w
 80144c8:	4a454eef 	.word	0x4a454eef
 80144cc:	3fca7e28 	.word	0x3fca7e28
 80144d0:	93c9db65 	.word	0x93c9db65
 80144d4:	3fcd864a 	.word	0x3fcd864a
 80144d8:	a91d4101 	.word	0xa91d4101
 80144dc:	3fd17460 	.word	0x3fd17460
 80144e0:	518f264d 	.word	0x518f264d
 80144e4:	3fd55555 	.word	0x3fd55555
 80144e8:	db6fabff 	.word	0xdb6fabff
 80144ec:	3fdb6db6 	.word	0x3fdb6db6
 80144f0:	33333303 	.word	0x33333303
 80144f4:	3fe33333 	.word	0x3fe33333
 80144f8:	e0000000 	.word	0xe0000000
 80144fc:	3feec709 	.word	0x3feec709
 8014500:	dc3a03fd 	.word	0xdc3a03fd
 8014504:	3feec709 	.word	0x3feec709
 8014508:	145b01f5 	.word	0x145b01f5
 801450c:	be3e2fe0 	.word	0xbe3e2fe0
 8014510:	00000000 	.word	0x00000000
 8014514:	3ff00000 	.word	0x3ff00000
 8014518:	43400000 	.word	0x43400000
 801451c:	0003988e 	.word	0x0003988e
 8014520:	000bb679 	.word	0x000bb679
 8014524:	080153a0 	.word	0x080153a0
 8014528:	3ff00000 	.word	0x3ff00000
 801452c:	40080000 	.word	0x40080000
 8014530:	080153c0 	.word	0x080153c0
 8014534:	080153b0 	.word	0x080153b0
 8014538:	a3b4      	add	r3, pc, #720	; (adr r3, 801480c <__ieee754_pow+0xa14>)
 801453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453e:	4640      	mov	r0, r8
 8014540:	4649      	mov	r1, r9
 8014542:	f7eb fea3 	bl	800028c <__adddf3>
 8014546:	4622      	mov	r2, r4
 8014548:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801454c:	462b      	mov	r3, r5
 801454e:	4630      	mov	r0, r6
 8014550:	4639      	mov	r1, r7
 8014552:	f7eb fe99 	bl	8000288 <__aeabi_dsub>
 8014556:	4602      	mov	r2, r0
 8014558:	460b      	mov	r3, r1
 801455a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801455e:	f7ec fadb 	bl	8000b18 <__aeabi_dcmpgt>
 8014562:	2800      	cmp	r0, #0
 8014564:	f47f adfe 	bne.w	8014164 <__ieee754_pow+0x36c>
 8014568:	4aa3      	ldr	r2, [pc, #652]	; (80147f8 <__ieee754_pow+0xa00>)
 801456a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801456e:	4293      	cmp	r3, r2
 8014570:	f340 810a 	ble.w	8014788 <__ieee754_pow+0x990>
 8014574:	151b      	asrs	r3, r3, #20
 8014576:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801457a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801457e:	fa4a f303 	asr.w	r3, sl, r3
 8014582:	445b      	add	r3, fp
 8014584:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014588:	4e9c      	ldr	r6, [pc, #624]	; (80147fc <__ieee754_pow+0xa04>)
 801458a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801458e:	4116      	asrs	r6, r2
 8014590:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014594:	2000      	movs	r0, #0
 8014596:	ea23 0106 	bic.w	r1, r3, r6
 801459a:	f1c2 0214 	rsb	r2, r2, #20
 801459e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80145a2:	fa4a fa02 	asr.w	sl, sl, r2
 80145a6:	f1bb 0f00 	cmp.w	fp, #0
 80145aa:	4602      	mov	r2, r0
 80145ac:	460b      	mov	r3, r1
 80145ae:	4620      	mov	r0, r4
 80145b0:	4629      	mov	r1, r5
 80145b2:	bfb8      	it	lt
 80145b4:	f1ca 0a00 	rsblt	sl, sl, #0
 80145b8:	f7eb fe66 	bl	8000288 <__aeabi_dsub>
 80145bc:	e9cd 0100 	strd	r0, r1, [sp]
 80145c0:	4642      	mov	r2, r8
 80145c2:	464b      	mov	r3, r9
 80145c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80145c8:	f7eb fe60 	bl	800028c <__adddf3>
 80145cc:	2000      	movs	r0, #0
 80145ce:	a378      	add	r3, pc, #480	; (adr r3, 80147b0 <__ieee754_pow+0x9b8>)
 80145d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145d4:	4604      	mov	r4, r0
 80145d6:	460d      	mov	r5, r1
 80145d8:	f7ec f80e 	bl	80005f8 <__aeabi_dmul>
 80145dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145e0:	4606      	mov	r6, r0
 80145e2:	460f      	mov	r7, r1
 80145e4:	4620      	mov	r0, r4
 80145e6:	4629      	mov	r1, r5
 80145e8:	f7eb fe4e 	bl	8000288 <__aeabi_dsub>
 80145ec:	4602      	mov	r2, r0
 80145ee:	460b      	mov	r3, r1
 80145f0:	4640      	mov	r0, r8
 80145f2:	4649      	mov	r1, r9
 80145f4:	f7eb fe48 	bl	8000288 <__aeabi_dsub>
 80145f8:	a36f      	add	r3, pc, #444	; (adr r3, 80147b8 <__ieee754_pow+0x9c0>)
 80145fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145fe:	f7eb fffb 	bl	80005f8 <__aeabi_dmul>
 8014602:	a36f      	add	r3, pc, #444	; (adr r3, 80147c0 <__ieee754_pow+0x9c8>)
 8014604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014608:	4680      	mov	r8, r0
 801460a:	4689      	mov	r9, r1
 801460c:	4620      	mov	r0, r4
 801460e:	4629      	mov	r1, r5
 8014610:	f7eb fff2 	bl	80005f8 <__aeabi_dmul>
 8014614:	4602      	mov	r2, r0
 8014616:	460b      	mov	r3, r1
 8014618:	4640      	mov	r0, r8
 801461a:	4649      	mov	r1, r9
 801461c:	f7eb fe36 	bl	800028c <__adddf3>
 8014620:	4604      	mov	r4, r0
 8014622:	460d      	mov	r5, r1
 8014624:	4602      	mov	r2, r0
 8014626:	460b      	mov	r3, r1
 8014628:	4630      	mov	r0, r6
 801462a:	4639      	mov	r1, r7
 801462c:	f7eb fe2e 	bl	800028c <__adddf3>
 8014630:	4632      	mov	r2, r6
 8014632:	463b      	mov	r3, r7
 8014634:	4680      	mov	r8, r0
 8014636:	4689      	mov	r9, r1
 8014638:	f7eb fe26 	bl	8000288 <__aeabi_dsub>
 801463c:	4602      	mov	r2, r0
 801463e:	460b      	mov	r3, r1
 8014640:	4620      	mov	r0, r4
 8014642:	4629      	mov	r1, r5
 8014644:	f7eb fe20 	bl	8000288 <__aeabi_dsub>
 8014648:	4642      	mov	r2, r8
 801464a:	4606      	mov	r6, r0
 801464c:	460f      	mov	r7, r1
 801464e:	464b      	mov	r3, r9
 8014650:	4640      	mov	r0, r8
 8014652:	4649      	mov	r1, r9
 8014654:	f7eb ffd0 	bl	80005f8 <__aeabi_dmul>
 8014658:	a35b      	add	r3, pc, #364	; (adr r3, 80147c8 <__ieee754_pow+0x9d0>)
 801465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801465e:	4604      	mov	r4, r0
 8014660:	460d      	mov	r5, r1
 8014662:	f7eb ffc9 	bl	80005f8 <__aeabi_dmul>
 8014666:	a35a      	add	r3, pc, #360	; (adr r3, 80147d0 <__ieee754_pow+0x9d8>)
 8014668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801466c:	f7eb fe0c 	bl	8000288 <__aeabi_dsub>
 8014670:	4622      	mov	r2, r4
 8014672:	462b      	mov	r3, r5
 8014674:	f7eb ffc0 	bl	80005f8 <__aeabi_dmul>
 8014678:	a357      	add	r3, pc, #348	; (adr r3, 80147d8 <__ieee754_pow+0x9e0>)
 801467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801467e:	f7eb fe05 	bl	800028c <__adddf3>
 8014682:	4622      	mov	r2, r4
 8014684:	462b      	mov	r3, r5
 8014686:	f7eb ffb7 	bl	80005f8 <__aeabi_dmul>
 801468a:	a355      	add	r3, pc, #340	; (adr r3, 80147e0 <__ieee754_pow+0x9e8>)
 801468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014690:	f7eb fdfa 	bl	8000288 <__aeabi_dsub>
 8014694:	4622      	mov	r2, r4
 8014696:	462b      	mov	r3, r5
 8014698:	f7eb ffae 	bl	80005f8 <__aeabi_dmul>
 801469c:	a352      	add	r3, pc, #328	; (adr r3, 80147e8 <__ieee754_pow+0x9f0>)
 801469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146a2:	f7eb fdf3 	bl	800028c <__adddf3>
 80146a6:	4622      	mov	r2, r4
 80146a8:	462b      	mov	r3, r5
 80146aa:	f7eb ffa5 	bl	80005f8 <__aeabi_dmul>
 80146ae:	4602      	mov	r2, r0
 80146b0:	460b      	mov	r3, r1
 80146b2:	4640      	mov	r0, r8
 80146b4:	4649      	mov	r1, r9
 80146b6:	f7eb fde7 	bl	8000288 <__aeabi_dsub>
 80146ba:	4604      	mov	r4, r0
 80146bc:	460d      	mov	r5, r1
 80146be:	4602      	mov	r2, r0
 80146c0:	460b      	mov	r3, r1
 80146c2:	4640      	mov	r0, r8
 80146c4:	4649      	mov	r1, r9
 80146c6:	f7eb ff97 	bl	80005f8 <__aeabi_dmul>
 80146ca:	2200      	movs	r2, #0
 80146cc:	e9cd 0100 	strd	r0, r1, [sp]
 80146d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80146d4:	4620      	mov	r0, r4
 80146d6:	4629      	mov	r1, r5
 80146d8:	f7eb fdd6 	bl	8000288 <__aeabi_dsub>
 80146dc:	4602      	mov	r2, r0
 80146de:	460b      	mov	r3, r1
 80146e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146e4:	f7ec f8b2 	bl	800084c <__aeabi_ddiv>
 80146e8:	4632      	mov	r2, r6
 80146ea:	4604      	mov	r4, r0
 80146ec:	460d      	mov	r5, r1
 80146ee:	463b      	mov	r3, r7
 80146f0:	4640      	mov	r0, r8
 80146f2:	4649      	mov	r1, r9
 80146f4:	f7eb ff80 	bl	80005f8 <__aeabi_dmul>
 80146f8:	4632      	mov	r2, r6
 80146fa:	463b      	mov	r3, r7
 80146fc:	f7eb fdc6 	bl	800028c <__adddf3>
 8014700:	4602      	mov	r2, r0
 8014702:	460b      	mov	r3, r1
 8014704:	4620      	mov	r0, r4
 8014706:	4629      	mov	r1, r5
 8014708:	f7eb fdbe 	bl	8000288 <__aeabi_dsub>
 801470c:	4642      	mov	r2, r8
 801470e:	464b      	mov	r3, r9
 8014710:	f7eb fdba 	bl	8000288 <__aeabi_dsub>
 8014714:	4602      	mov	r2, r0
 8014716:	460b      	mov	r3, r1
 8014718:	2000      	movs	r0, #0
 801471a:	4939      	ldr	r1, [pc, #228]	; (8014800 <__ieee754_pow+0xa08>)
 801471c:	f7eb fdb4 	bl	8000288 <__aeabi_dsub>
 8014720:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8014724:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014728:	4602      	mov	r2, r0
 801472a:	460b      	mov	r3, r1
 801472c:	da2f      	bge.n	801478e <__ieee754_pow+0x996>
 801472e:	4650      	mov	r0, sl
 8014730:	ec43 2b10 	vmov	d0, r2, r3
 8014734:	f000 fb64 	bl	8014e00 <scalbn>
 8014738:	ec51 0b10 	vmov	r0, r1, d0
 801473c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014740:	f7ff bbf1 	b.w	8013f26 <__ieee754_pow+0x12e>
 8014744:	4b2f      	ldr	r3, [pc, #188]	; (8014804 <__ieee754_pow+0xa0c>)
 8014746:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801474a:	429e      	cmp	r6, r3
 801474c:	f77f af0c 	ble.w	8014568 <__ieee754_pow+0x770>
 8014750:	4b2d      	ldr	r3, [pc, #180]	; (8014808 <__ieee754_pow+0xa10>)
 8014752:	440b      	add	r3, r1
 8014754:	4303      	orrs	r3, r0
 8014756:	d00b      	beq.n	8014770 <__ieee754_pow+0x978>
 8014758:	a325      	add	r3, pc, #148	; (adr r3, 80147f0 <__ieee754_pow+0x9f8>)
 801475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801475e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014762:	f7eb ff49 	bl	80005f8 <__aeabi_dmul>
 8014766:	a322      	add	r3, pc, #136	; (adr r3, 80147f0 <__ieee754_pow+0x9f8>)
 8014768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801476c:	f7ff bbdb 	b.w	8013f26 <__ieee754_pow+0x12e>
 8014770:	4622      	mov	r2, r4
 8014772:	462b      	mov	r3, r5
 8014774:	f7eb fd88 	bl	8000288 <__aeabi_dsub>
 8014778:	4642      	mov	r2, r8
 801477a:	464b      	mov	r3, r9
 801477c:	f7ec f9c2 	bl	8000b04 <__aeabi_dcmpge>
 8014780:	2800      	cmp	r0, #0
 8014782:	f43f aef1 	beq.w	8014568 <__ieee754_pow+0x770>
 8014786:	e7e7      	b.n	8014758 <__ieee754_pow+0x960>
 8014788:	f04f 0a00 	mov.w	sl, #0
 801478c:	e718      	b.n	80145c0 <__ieee754_pow+0x7c8>
 801478e:	4621      	mov	r1, r4
 8014790:	e7d4      	b.n	801473c <__ieee754_pow+0x944>
 8014792:	2000      	movs	r0, #0
 8014794:	491a      	ldr	r1, [pc, #104]	; (8014800 <__ieee754_pow+0xa08>)
 8014796:	f7ff bb8f 	b.w	8013eb8 <__ieee754_pow+0xc0>
 801479a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801479e:	f7ff bb8b 	b.w	8013eb8 <__ieee754_pow+0xc0>
 80147a2:	4630      	mov	r0, r6
 80147a4:	4639      	mov	r1, r7
 80147a6:	f7ff bb87 	b.w	8013eb8 <__ieee754_pow+0xc0>
 80147aa:	4693      	mov	fp, r2
 80147ac:	f7ff bb98 	b.w	8013ee0 <__ieee754_pow+0xe8>
 80147b0:	00000000 	.word	0x00000000
 80147b4:	3fe62e43 	.word	0x3fe62e43
 80147b8:	fefa39ef 	.word	0xfefa39ef
 80147bc:	3fe62e42 	.word	0x3fe62e42
 80147c0:	0ca86c39 	.word	0x0ca86c39
 80147c4:	be205c61 	.word	0xbe205c61
 80147c8:	72bea4d0 	.word	0x72bea4d0
 80147cc:	3e663769 	.word	0x3e663769
 80147d0:	c5d26bf1 	.word	0xc5d26bf1
 80147d4:	3ebbbd41 	.word	0x3ebbbd41
 80147d8:	af25de2c 	.word	0xaf25de2c
 80147dc:	3f11566a 	.word	0x3f11566a
 80147e0:	16bebd93 	.word	0x16bebd93
 80147e4:	3f66c16c 	.word	0x3f66c16c
 80147e8:	5555553e 	.word	0x5555553e
 80147ec:	3fc55555 	.word	0x3fc55555
 80147f0:	c2f8f359 	.word	0xc2f8f359
 80147f4:	01a56e1f 	.word	0x01a56e1f
 80147f8:	3fe00000 	.word	0x3fe00000
 80147fc:	000fffff 	.word	0x000fffff
 8014800:	3ff00000 	.word	0x3ff00000
 8014804:	4090cbff 	.word	0x4090cbff
 8014808:	3f6f3400 	.word	0x3f6f3400
 801480c:	652b82fe 	.word	0x652b82fe
 8014810:	3c971547 	.word	0x3c971547

08014814 <__ieee754_sqrt>:
 8014814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014818:	4955      	ldr	r1, [pc, #340]	; (8014970 <__ieee754_sqrt+0x15c>)
 801481a:	ec55 4b10 	vmov	r4, r5, d0
 801481e:	43a9      	bics	r1, r5
 8014820:	462b      	mov	r3, r5
 8014822:	462a      	mov	r2, r5
 8014824:	d112      	bne.n	801484c <__ieee754_sqrt+0x38>
 8014826:	ee10 2a10 	vmov	r2, s0
 801482a:	ee10 0a10 	vmov	r0, s0
 801482e:	4629      	mov	r1, r5
 8014830:	f7eb fee2 	bl	80005f8 <__aeabi_dmul>
 8014834:	4602      	mov	r2, r0
 8014836:	460b      	mov	r3, r1
 8014838:	4620      	mov	r0, r4
 801483a:	4629      	mov	r1, r5
 801483c:	f7eb fd26 	bl	800028c <__adddf3>
 8014840:	4604      	mov	r4, r0
 8014842:	460d      	mov	r5, r1
 8014844:	ec45 4b10 	vmov	d0, r4, r5
 8014848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801484c:	2d00      	cmp	r5, #0
 801484e:	ee10 0a10 	vmov	r0, s0
 8014852:	4621      	mov	r1, r4
 8014854:	dc0f      	bgt.n	8014876 <__ieee754_sqrt+0x62>
 8014856:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801485a:	4330      	orrs	r0, r6
 801485c:	d0f2      	beq.n	8014844 <__ieee754_sqrt+0x30>
 801485e:	b155      	cbz	r5, 8014876 <__ieee754_sqrt+0x62>
 8014860:	ee10 2a10 	vmov	r2, s0
 8014864:	4620      	mov	r0, r4
 8014866:	4629      	mov	r1, r5
 8014868:	f7eb fd0e 	bl	8000288 <__aeabi_dsub>
 801486c:	4602      	mov	r2, r0
 801486e:	460b      	mov	r3, r1
 8014870:	f7eb ffec 	bl	800084c <__aeabi_ddiv>
 8014874:	e7e4      	b.n	8014840 <__ieee754_sqrt+0x2c>
 8014876:	151b      	asrs	r3, r3, #20
 8014878:	d073      	beq.n	8014962 <__ieee754_sqrt+0x14e>
 801487a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801487e:	07dd      	lsls	r5, r3, #31
 8014880:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8014884:	bf48      	it	mi
 8014886:	0fc8      	lsrmi	r0, r1, #31
 8014888:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801488c:	bf44      	itt	mi
 801488e:	0049      	lslmi	r1, r1, #1
 8014890:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8014894:	2500      	movs	r5, #0
 8014896:	1058      	asrs	r0, r3, #1
 8014898:	0fcb      	lsrs	r3, r1, #31
 801489a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801489e:	0049      	lsls	r1, r1, #1
 80148a0:	2316      	movs	r3, #22
 80148a2:	462c      	mov	r4, r5
 80148a4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80148a8:	19a7      	adds	r7, r4, r6
 80148aa:	4297      	cmp	r7, r2
 80148ac:	bfde      	ittt	le
 80148ae:	19bc      	addle	r4, r7, r6
 80148b0:	1bd2      	suble	r2, r2, r7
 80148b2:	19ad      	addle	r5, r5, r6
 80148b4:	0fcf      	lsrs	r7, r1, #31
 80148b6:	3b01      	subs	r3, #1
 80148b8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80148bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80148c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80148c4:	d1f0      	bne.n	80148a8 <__ieee754_sqrt+0x94>
 80148c6:	f04f 0c20 	mov.w	ip, #32
 80148ca:	469e      	mov	lr, r3
 80148cc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80148d0:	42a2      	cmp	r2, r4
 80148d2:	eb06 070e 	add.w	r7, r6, lr
 80148d6:	dc02      	bgt.n	80148de <__ieee754_sqrt+0xca>
 80148d8:	d112      	bne.n	8014900 <__ieee754_sqrt+0xec>
 80148da:	428f      	cmp	r7, r1
 80148dc:	d810      	bhi.n	8014900 <__ieee754_sqrt+0xec>
 80148de:	2f00      	cmp	r7, #0
 80148e0:	eb07 0e06 	add.w	lr, r7, r6
 80148e4:	da42      	bge.n	801496c <__ieee754_sqrt+0x158>
 80148e6:	f1be 0f00 	cmp.w	lr, #0
 80148ea:	db3f      	blt.n	801496c <__ieee754_sqrt+0x158>
 80148ec:	f104 0801 	add.w	r8, r4, #1
 80148f0:	1b12      	subs	r2, r2, r4
 80148f2:	428f      	cmp	r7, r1
 80148f4:	bf88      	it	hi
 80148f6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80148fa:	1bc9      	subs	r1, r1, r7
 80148fc:	4433      	add	r3, r6
 80148fe:	4644      	mov	r4, r8
 8014900:	0052      	lsls	r2, r2, #1
 8014902:	f1bc 0c01 	subs.w	ip, ip, #1
 8014906:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801490a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801490e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014912:	d1dd      	bne.n	80148d0 <__ieee754_sqrt+0xbc>
 8014914:	430a      	orrs	r2, r1
 8014916:	d006      	beq.n	8014926 <__ieee754_sqrt+0x112>
 8014918:	1c5c      	adds	r4, r3, #1
 801491a:	bf13      	iteet	ne
 801491c:	3301      	addne	r3, #1
 801491e:	3501      	addeq	r5, #1
 8014920:	4663      	moveq	r3, ip
 8014922:	f023 0301 	bicne.w	r3, r3, #1
 8014926:	106a      	asrs	r2, r5, #1
 8014928:	085b      	lsrs	r3, r3, #1
 801492a:	07e9      	lsls	r1, r5, #31
 801492c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8014930:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8014934:	bf48      	it	mi
 8014936:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801493a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801493e:	461c      	mov	r4, r3
 8014940:	e780      	b.n	8014844 <__ieee754_sqrt+0x30>
 8014942:	0aca      	lsrs	r2, r1, #11
 8014944:	3815      	subs	r0, #21
 8014946:	0549      	lsls	r1, r1, #21
 8014948:	2a00      	cmp	r2, #0
 801494a:	d0fa      	beq.n	8014942 <__ieee754_sqrt+0x12e>
 801494c:	02d6      	lsls	r6, r2, #11
 801494e:	d50a      	bpl.n	8014966 <__ieee754_sqrt+0x152>
 8014950:	f1c3 0420 	rsb	r4, r3, #32
 8014954:	fa21 f404 	lsr.w	r4, r1, r4
 8014958:	1e5d      	subs	r5, r3, #1
 801495a:	4099      	lsls	r1, r3
 801495c:	4322      	orrs	r2, r4
 801495e:	1b43      	subs	r3, r0, r5
 8014960:	e78b      	b.n	801487a <__ieee754_sqrt+0x66>
 8014962:	4618      	mov	r0, r3
 8014964:	e7f0      	b.n	8014948 <__ieee754_sqrt+0x134>
 8014966:	0052      	lsls	r2, r2, #1
 8014968:	3301      	adds	r3, #1
 801496a:	e7ef      	b.n	801494c <__ieee754_sqrt+0x138>
 801496c:	46a0      	mov	r8, r4
 801496e:	e7bf      	b.n	80148f0 <__ieee754_sqrt+0xdc>
 8014970:	7ff00000 	.word	0x7ff00000

08014974 <__ieee754_sqrtf>:
 8014974:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014978:	4770      	bx	lr
 801497a:	0000      	movs	r0, r0
 801497c:	0000      	movs	r0, r0
	...

08014980 <atan>:
 8014980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014984:	ec55 4b10 	vmov	r4, r5, d0
 8014988:	4bc3      	ldr	r3, [pc, #780]	; (8014c98 <atan+0x318>)
 801498a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801498e:	429e      	cmp	r6, r3
 8014990:	46ab      	mov	fp, r5
 8014992:	dd18      	ble.n	80149c6 <atan+0x46>
 8014994:	4bc1      	ldr	r3, [pc, #772]	; (8014c9c <atan+0x31c>)
 8014996:	429e      	cmp	r6, r3
 8014998:	dc01      	bgt.n	801499e <atan+0x1e>
 801499a:	d109      	bne.n	80149b0 <atan+0x30>
 801499c:	b144      	cbz	r4, 80149b0 <atan+0x30>
 801499e:	4622      	mov	r2, r4
 80149a0:	462b      	mov	r3, r5
 80149a2:	4620      	mov	r0, r4
 80149a4:	4629      	mov	r1, r5
 80149a6:	f7eb fc71 	bl	800028c <__adddf3>
 80149aa:	4604      	mov	r4, r0
 80149ac:	460d      	mov	r5, r1
 80149ae:	e006      	b.n	80149be <atan+0x3e>
 80149b0:	f1bb 0f00 	cmp.w	fp, #0
 80149b4:	f340 8131 	ble.w	8014c1a <atan+0x29a>
 80149b8:	a59b      	add	r5, pc, #620	; (adr r5, 8014c28 <atan+0x2a8>)
 80149ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80149be:	ec45 4b10 	vmov	d0, r4, r5
 80149c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149c6:	4bb6      	ldr	r3, [pc, #728]	; (8014ca0 <atan+0x320>)
 80149c8:	429e      	cmp	r6, r3
 80149ca:	dc14      	bgt.n	80149f6 <atan+0x76>
 80149cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80149d0:	429e      	cmp	r6, r3
 80149d2:	dc0d      	bgt.n	80149f0 <atan+0x70>
 80149d4:	a396      	add	r3, pc, #600	; (adr r3, 8014c30 <atan+0x2b0>)
 80149d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149da:	ee10 0a10 	vmov	r0, s0
 80149de:	4629      	mov	r1, r5
 80149e0:	f7eb fc54 	bl	800028c <__adddf3>
 80149e4:	2200      	movs	r2, #0
 80149e6:	4baf      	ldr	r3, [pc, #700]	; (8014ca4 <atan+0x324>)
 80149e8:	f7ec f896 	bl	8000b18 <__aeabi_dcmpgt>
 80149ec:	2800      	cmp	r0, #0
 80149ee:	d1e6      	bne.n	80149be <atan+0x3e>
 80149f0:	f04f 3aff 	mov.w	sl, #4294967295
 80149f4:	e02b      	b.n	8014a4e <atan+0xce>
 80149f6:	f000 f963 	bl	8014cc0 <fabs>
 80149fa:	4bab      	ldr	r3, [pc, #684]	; (8014ca8 <atan+0x328>)
 80149fc:	429e      	cmp	r6, r3
 80149fe:	ec55 4b10 	vmov	r4, r5, d0
 8014a02:	f300 80bf 	bgt.w	8014b84 <atan+0x204>
 8014a06:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8014a0a:	429e      	cmp	r6, r3
 8014a0c:	f300 80a0 	bgt.w	8014b50 <atan+0x1d0>
 8014a10:	ee10 2a10 	vmov	r2, s0
 8014a14:	ee10 0a10 	vmov	r0, s0
 8014a18:	462b      	mov	r3, r5
 8014a1a:	4629      	mov	r1, r5
 8014a1c:	f7eb fc36 	bl	800028c <__adddf3>
 8014a20:	2200      	movs	r2, #0
 8014a22:	4ba0      	ldr	r3, [pc, #640]	; (8014ca4 <atan+0x324>)
 8014a24:	f7eb fc30 	bl	8000288 <__aeabi_dsub>
 8014a28:	2200      	movs	r2, #0
 8014a2a:	4606      	mov	r6, r0
 8014a2c:	460f      	mov	r7, r1
 8014a2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014a32:	4620      	mov	r0, r4
 8014a34:	4629      	mov	r1, r5
 8014a36:	f7eb fc29 	bl	800028c <__adddf3>
 8014a3a:	4602      	mov	r2, r0
 8014a3c:	460b      	mov	r3, r1
 8014a3e:	4630      	mov	r0, r6
 8014a40:	4639      	mov	r1, r7
 8014a42:	f7eb ff03 	bl	800084c <__aeabi_ddiv>
 8014a46:	f04f 0a00 	mov.w	sl, #0
 8014a4a:	4604      	mov	r4, r0
 8014a4c:	460d      	mov	r5, r1
 8014a4e:	4622      	mov	r2, r4
 8014a50:	462b      	mov	r3, r5
 8014a52:	4620      	mov	r0, r4
 8014a54:	4629      	mov	r1, r5
 8014a56:	f7eb fdcf 	bl	80005f8 <__aeabi_dmul>
 8014a5a:	4602      	mov	r2, r0
 8014a5c:	460b      	mov	r3, r1
 8014a5e:	4680      	mov	r8, r0
 8014a60:	4689      	mov	r9, r1
 8014a62:	f7eb fdc9 	bl	80005f8 <__aeabi_dmul>
 8014a66:	a374      	add	r3, pc, #464	; (adr r3, 8014c38 <atan+0x2b8>)
 8014a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a6c:	4606      	mov	r6, r0
 8014a6e:	460f      	mov	r7, r1
 8014a70:	f7eb fdc2 	bl	80005f8 <__aeabi_dmul>
 8014a74:	a372      	add	r3, pc, #456	; (adr r3, 8014c40 <atan+0x2c0>)
 8014a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a7a:	f7eb fc07 	bl	800028c <__adddf3>
 8014a7e:	4632      	mov	r2, r6
 8014a80:	463b      	mov	r3, r7
 8014a82:	f7eb fdb9 	bl	80005f8 <__aeabi_dmul>
 8014a86:	a370      	add	r3, pc, #448	; (adr r3, 8014c48 <atan+0x2c8>)
 8014a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a8c:	f7eb fbfe 	bl	800028c <__adddf3>
 8014a90:	4632      	mov	r2, r6
 8014a92:	463b      	mov	r3, r7
 8014a94:	f7eb fdb0 	bl	80005f8 <__aeabi_dmul>
 8014a98:	a36d      	add	r3, pc, #436	; (adr r3, 8014c50 <atan+0x2d0>)
 8014a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a9e:	f7eb fbf5 	bl	800028c <__adddf3>
 8014aa2:	4632      	mov	r2, r6
 8014aa4:	463b      	mov	r3, r7
 8014aa6:	f7eb fda7 	bl	80005f8 <__aeabi_dmul>
 8014aaa:	a36b      	add	r3, pc, #428	; (adr r3, 8014c58 <atan+0x2d8>)
 8014aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ab0:	f7eb fbec 	bl	800028c <__adddf3>
 8014ab4:	4632      	mov	r2, r6
 8014ab6:	463b      	mov	r3, r7
 8014ab8:	f7eb fd9e 	bl	80005f8 <__aeabi_dmul>
 8014abc:	a368      	add	r3, pc, #416	; (adr r3, 8014c60 <atan+0x2e0>)
 8014abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac2:	f7eb fbe3 	bl	800028c <__adddf3>
 8014ac6:	4642      	mov	r2, r8
 8014ac8:	464b      	mov	r3, r9
 8014aca:	f7eb fd95 	bl	80005f8 <__aeabi_dmul>
 8014ace:	a366      	add	r3, pc, #408	; (adr r3, 8014c68 <atan+0x2e8>)
 8014ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ad4:	4680      	mov	r8, r0
 8014ad6:	4689      	mov	r9, r1
 8014ad8:	4630      	mov	r0, r6
 8014ada:	4639      	mov	r1, r7
 8014adc:	f7eb fd8c 	bl	80005f8 <__aeabi_dmul>
 8014ae0:	a363      	add	r3, pc, #396	; (adr r3, 8014c70 <atan+0x2f0>)
 8014ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae6:	f7eb fbcf 	bl	8000288 <__aeabi_dsub>
 8014aea:	4632      	mov	r2, r6
 8014aec:	463b      	mov	r3, r7
 8014aee:	f7eb fd83 	bl	80005f8 <__aeabi_dmul>
 8014af2:	a361      	add	r3, pc, #388	; (adr r3, 8014c78 <atan+0x2f8>)
 8014af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af8:	f7eb fbc6 	bl	8000288 <__aeabi_dsub>
 8014afc:	4632      	mov	r2, r6
 8014afe:	463b      	mov	r3, r7
 8014b00:	f7eb fd7a 	bl	80005f8 <__aeabi_dmul>
 8014b04:	a35e      	add	r3, pc, #376	; (adr r3, 8014c80 <atan+0x300>)
 8014b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b0a:	f7eb fbbd 	bl	8000288 <__aeabi_dsub>
 8014b0e:	4632      	mov	r2, r6
 8014b10:	463b      	mov	r3, r7
 8014b12:	f7eb fd71 	bl	80005f8 <__aeabi_dmul>
 8014b16:	a35c      	add	r3, pc, #368	; (adr r3, 8014c88 <atan+0x308>)
 8014b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b1c:	f7eb fbb4 	bl	8000288 <__aeabi_dsub>
 8014b20:	4632      	mov	r2, r6
 8014b22:	463b      	mov	r3, r7
 8014b24:	f7eb fd68 	bl	80005f8 <__aeabi_dmul>
 8014b28:	4602      	mov	r2, r0
 8014b2a:	460b      	mov	r3, r1
 8014b2c:	4640      	mov	r0, r8
 8014b2e:	4649      	mov	r1, r9
 8014b30:	f7eb fbac 	bl	800028c <__adddf3>
 8014b34:	4622      	mov	r2, r4
 8014b36:	462b      	mov	r3, r5
 8014b38:	f7eb fd5e 	bl	80005f8 <__aeabi_dmul>
 8014b3c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014b40:	4602      	mov	r2, r0
 8014b42:	460b      	mov	r3, r1
 8014b44:	d14b      	bne.n	8014bde <atan+0x25e>
 8014b46:	4620      	mov	r0, r4
 8014b48:	4629      	mov	r1, r5
 8014b4a:	f7eb fb9d 	bl	8000288 <__aeabi_dsub>
 8014b4e:	e72c      	b.n	80149aa <atan+0x2a>
 8014b50:	ee10 0a10 	vmov	r0, s0
 8014b54:	2200      	movs	r2, #0
 8014b56:	4b53      	ldr	r3, [pc, #332]	; (8014ca4 <atan+0x324>)
 8014b58:	4629      	mov	r1, r5
 8014b5a:	f7eb fb95 	bl	8000288 <__aeabi_dsub>
 8014b5e:	2200      	movs	r2, #0
 8014b60:	4606      	mov	r6, r0
 8014b62:	460f      	mov	r7, r1
 8014b64:	4b4f      	ldr	r3, [pc, #316]	; (8014ca4 <atan+0x324>)
 8014b66:	4620      	mov	r0, r4
 8014b68:	4629      	mov	r1, r5
 8014b6a:	f7eb fb8f 	bl	800028c <__adddf3>
 8014b6e:	4602      	mov	r2, r0
 8014b70:	460b      	mov	r3, r1
 8014b72:	4630      	mov	r0, r6
 8014b74:	4639      	mov	r1, r7
 8014b76:	f7eb fe69 	bl	800084c <__aeabi_ddiv>
 8014b7a:	f04f 0a01 	mov.w	sl, #1
 8014b7e:	4604      	mov	r4, r0
 8014b80:	460d      	mov	r5, r1
 8014b82:	e764      	b.n	8014a4e <atan+0xce>
 8014b84:	4b49      	ldr	r3, [pc, #292]	; (8014cac <atan+0x32c>)
 8014b86:	429e      	cmp	r6, r3
 8014b88:	dc1d      	bgt.n	8014bc6 <atan+0x246>
 8014b8a:	ee10 0a10 	vmov	r0, s0
 8014b8e:	2200      	movs	r2, #0
 8014b90:	4b47      	ldr	r3, [pc, #284]	; (8014cb0 <atan+0x330>)
 8014b92:	4629      	mov	r1, r5
 8014b94:	f7eb fb78 	bl	8000288 <__aeabi_dsub>
 8014b98:	2200      	movs	r2, #0
 8014b9a:	4606      	mov	r6, r0
 8014b9c:	460f      	mov	r7, r1
 8014b9e:	4b44      	ldr	r3, [pc, #272]	; (8014cb0 <atan+0x330>)
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	4629      	mov	r1, r5
 8014ba4:	f7eb fd28 	bl	80005f8 <__aeabi_dmul>
 8014ba8:	2200      	movs	r2, #0
 8014baa:	4b3e      	ldr	r3, [pc, #248]	; (8014ca4 <atan+0x324>)
 8014bac:	f7eb fb6e 	bl	800028c <__adddf3>
 8014bb0:	4602      	mov	r2, r0
 8014bb2:	460b      	mov	r3, r1
 8014bb4:	4630      	mov	r0, r6
 8014bb6:	4639      	mov	r1, r7
 8014bb8:	f7eb fe48 	bl	800084c <__aeabi_ddiv>
 8014bbc:	f04f 0a02 	mov.w	sl, #2
 8014bc0:	4604      	mov	r4, r0
 8014bc2:	460d      	mov	r5, r1
 8014bc4:	e743      	b.n	8014a4e <atan+0xce>
 8014bc6:	462b      	mov	r3, r5
 8014bc8:	ee10 2a10 	vmov	r2, s0
 8014bcc:	2000      	movs	r0, #0
 8014bce:	4939      	ldr	r1, [pc, #228]	; (8014cb4 <atan+0x334>)
 8014bd0:	f7eb fe3c 	bl	800084c <__aeabi_ddiv>
 8014bd4:	f04f 0a03 	mov.w	sl, #3
 8014bd8:	4604      	mov	r4, r0
 8014bda:	460d      	mov	r5, r1
 8014bdc:	e737      	b.n	8014a4e <atan+0xce>
 8014bde:	4b36      	ldr	r3, [pc, #216]	; (8014cb8 <atan+0x338>)
 8014be0:	4e36      	ldr	r6, [pc, #216]	; (8014cbc <atan+0x33c>)
 8014be2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8014be6:	4456      	add	r6, sl
 8014be8:	449a      	add	sl, r3
 8014bea:	e9da 2300 	ldrd	r2, r3, [sl]
 8014bee:	f7eb fb4b 	bl	8000288 <__aeabi_dsub>
 8014bf2:	4622      	mov	r2, r4
 8014bf4:	462b      	mov	r3, r5
 8014bf6:	f7eb fb47 	bl	8000288 <__aeabi_dsub>
 8014bfa:	4602      	mov	r2, r0
 8014bfc:	460b      	mov	r3, r1
 8014bfe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014c02:	f7eb fb41 	bl	8000288 <__aeabi_dsub>
 8014c06:	f1bb 0f00 	cmp.w	fp, #0
 8014c0a:	4604      	mov	r4, r0
 8014c0c:	460d      	mov	r5, r1
 8014c0e:	f6bf aed6 	bge.w	80149be <atan+0x3e>
 8014c12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014c16:	461d      	mov	r5, r3
 8014c18:	e6d1      	b.n	80149be <atan+0x3e>
 8014c1a:	a51d      	add	r5, pc, #116	; (adr r5, 8014c90 <atan+0x310>)
 8014c1c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014c20:	e6cd      	b.n	80149be <atan+0x3e>
 8014c22:	bf00      	nop
 8014c24:	f3af 8000 	nop.w
 8014c28:	54442d18 	.word	0x54442d18
 8014c2c:	3ff921fb 	.word	0x3ff921fb
 8014c30:	8800759c 	.word	0x8800759c
 8014c34:	7e37e43c 	.word	0x7e37e43c
 8014c38:	e322da11 	.word	0xe322da11
 8014c3c:	3f90ad3a 	.word	0x3f90ad3a
 8014c40:	24760deb 	.word	0x24760deb
 8014c44:	3fa97b4b 	.word	0x3fa97b4b
 8014c48:	a0d03d51 	.word	0xa0d03d51
 8014c4c:	3fb10d66 	.word	0x3fb10d66
 8014c50:	c54c206e 	.word	0xc54c206e
 8014c54:	3fb745cd 	.word	0x3fb745cd
 8014c58:	920083ff 	.word	0x920083ff
 8014c5c:	3fc24924 	.word	0x3fc24924
 8014c60:	5555550d 	.word	0x5555550d
 8014c64:	3fd55555 	.word	0x3fd55555
 8014c68:	2c6a6c2f 	.word	0x2c6a6c2f
 8014c6c:	bfa2b444 	.word	0xbfa2b444
 8014c70:	52defd9a 	.word	0x52defd9a
 8014c74:	3fadde2d 	.word	0x3fadde2d
 8014c78:	af749a6d 	.word	0xaf749a6d
 8014c7c:	3fb3b0f2 	.word	0x3fb3b0f2
 8014c80:	fe231671 	.word	0xfe231671
 8014c84:	3fbc71c6 	.word	0x3fbc71c6
 8014c88:	9998ebc4 	.word	0x9998ebc4
 8014c8c:	3fc99999 	.word	0x3fc99999
 8014c90:	54442d18 	.word	0x54442d18
 8014c94:	bff921fb 	.word	0xbff921fb
 8014c98:	440fffff 	.word	0x440fffff
 8014c9c:	7ff00000 	.word	0x7ff00000
 8014ca0:	3fdbffff 	.word	0x3fdbffff
 8014ca4:	3ff00000 	.word	0x3ff00000
 8014ca8:	3ff2ffff 	.word	0x3ff2ffff
 8014cac:	40037fff 	.word	0x40037fff
 8014cb0:	3ff80000 	.word	0x3ff80000
 8014cb4:	bff00000 	.word	0xbff00000
 8014cb8:	080153f0 	.word	0x080153f0
 8014cbc:	080153d0 	.word	0x080153d0

08014cc0 <fabs>:
 8014cc0:	ec51 0b10 	vmov	r0, r1, d0
 8014cc4:	ee10 2a10 	vmov	r2, s0
 8014cc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014ccc:	ec43 2b10 	vmov	d0, r2, r3
 8014cd0:	4770      	bx	lr

08014cd2 <finite>:
 8014cd2:	ee10 3a90 	vmov	r3, s1
 8014cd6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8014cda:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014cde:	0fc0      	lsrs	r0, r0, #31
 8014ce0:	4770      	bx	lr

08014ce2 <matherr>:
 8014ce2:	2000      	movs	r0, #0
 8014ce4:	4770      	bx	lr
	...

08014ce8 <nan>:
 8014ce8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014cf0 <nan+0x8>
 8014cec:	4770      	bx	lr
 8014cee:	bf00      	nop
 8014cf0:	00000000 	.word	0x00000000
 8014cf4:	7ff80000 	.word	0x7ff80000

08014cf8 <rint>:
 8014cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014cfa:	ec51 0b10 	vmov	r0, r1, d0
 8014cfe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014d02:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8014d06:	2e13      	cmp	r6, #19
 8014d08:	460b      	mov	r3, r1
 8014d0a:	ee10 4a10 	vmov	r4, s0
 8014d0e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8014d12:	dc56      	bgt.n	8014dc2 <rint+0xca>
 8014d14:	2e00      	cmp	r6, #0
 8014d16:	da2b      	bge.n	8014d70 <rint+0x78>
 8014d18:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8014d1c:	4302      	orrs	r2, r0
 8014d1e:	d023      	beq.n	8014d68 <rint+0x70>
 8014d20:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8014d24:	4302      	orrs	r2, r0
 8014d26:	4254      	negs	r4, r2
 8014d28:	4314      	orrs	r4, r2
 8014d2a:	0c4b      	lsrs	r3, r1, #17
 8014d2c:	0b24      	lsrs	r4, r4, #12
 8014d2e:	045b      	lsls	r3, r3, #17
 8014d30:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8014d34:	ea44 0103 	orr.w	r1, r4, r3
 8014d38:	460b      	mov	r3, r1
 8014d3a:	492f      	ldr	r1, [pc, #188]	; (8014df8 <rint+0x100>)
 8014d3c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8014d40:	e9d1 6700 	ldrd	r6, r7, [r1]
 8014d44:	4602      	mov	r2, r0
 8014d46:	4639      	mov	r1, r7
 8014d48:	4630      	mov	r0, r6
 8014d4a:	f7eb fa9f 	bl	800028c <__adddf3>
 8014d4e:	e9cd 0100 	strd	r0, r1, [sp]
 8014d52:	463b      	mov	r3, r7
 8014d54:	4632      	mov	r2, r6
 8014d56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d5a:	f7eb fa95 	bl	8000288 <__aeabi_dsub>
 8014d5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014d62:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8014d66:	4639      	mov	r1, r7
 8014d68:	ec41 0b10 	vmov	d0, r0, r1
 8014d6c:	b003      	add	sp, #12
 8014d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d70:	4a22      	ldr	r2, [pc, #136]	; (8014dfc <rint+0x104>)
 8014d72:	4132      	asrs	r2, r6
 8014d74:	ea01 0702 	and.w	r7, r1, r2
 8014d78:	4307      	orrs	r7, r0
 8014d7a:	d0f5      	beq.n	8014d68 <rint+0x70>
 8014d7c:	0852      	lsrs	r2, r2, #1
 8014d7e:	4011      	ands	r1, r2
 8014d80:	430c      	orrs	r4, r1
 8014d82:	d00b      	beq.n	8014d9c <rint+0xa4>
 8014d84:	ea23 0202 	bic.w	r2, r3, r2
 8014d88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014d8c:	2e13      	cmp	r6, #19
 8014d8e:	fa43 f306 	asr.w	r3, r3, r6
 8014d92:	bf0c      	ite	eq
 8014d94:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8014d98:	2400      	movne	r4, #0
 8014d9a:	4313      	orrs	r3, r2
 8014d9c:	4916      	ldr	r1, [pc, #88]	; (8014df8 <rint+0x100>)
 8014d9e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8014da2:	4622      	mov	r2, r4
 8014da4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014da8:	4620      	mov	r0, r4
 8014daa:	4629      	mov	r1, r5
 8014dac:	f7eb fa6e 	bl	800028c <__adddf3>
 8014db0:	e9cd 0100 	strd	r0, r1, [sp]
 8014db4:	4622      	mov	r2, r4
 8014db6:	462b      	mov	r3, r5
 8014db8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014dbc:	f7eb fa64 	bl	8000288 <__aeabi_dsub>
 8014dc0:	e7d2      	b.n	8014d68 <rint+0x70>
 8014dc2:	2e33      	cmp	r6, #51	; 0x33
 8014dc4:	dd07      	ble.n	8014dd6 <rint+0xde>
 8014dc6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014dca:	d1cd      	bne.n	8014d68 <rint+0x70>
 8014dcc:	ee10 2a10 	vmov	r2, s0
 8014dd0:	f7eb fa5c 	bl	800028c <__adddf3>
 8014dd4:	e7c8      	b.n	8014d68 <rint+0x70>
 8014dd6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8014dda:	f04f 32ff 	mov.w	r2, #4294967295
 8014dde:	40f2      	lsrs	r2, r6
 8014de0:	4210      	tst	r0, r2
 8014de2:	d0c1      	beq.n	8014d68 <rint+0x70>
 8014de4:	0852      	lsrs	r2, r2, #1
 8014de6:	4210      	tst	r0, r2
 8014de8:	bf1f      	itttt	ne
 8014dea:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8014dee:	ea20 0202 	bicne.w	r2, r0, r2
 8014df2:	4134      	asrne	r4, r6
 8014df4:	4314      	orrne	r4, r2
 8014df6:	e7d1      	b.n	8014d9c <rint+0xa4>
 8014df8:	08015410 	.word	0x08015410
 8014dfc:	000fffff 	.word	0x000fffff

08014e00 <scalbn>:
 8014e00:	b570      	push	{r4, r5, r6, lr}
 8014e02:	ec55 4b10 	vmov	r4, r5, d0
 8014e06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014e0a:	4606      	mov	r6, r0
 8014e0c:	462b      	mov	r3, r5
 8014e0e:	b9aa      	cbnz	r2, 8014e3c <scalbn+0x3c>
 8014e10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014e14:	4323      	orrs	r3, r4
 8014e16:	d03b      	beq.n	8014e90 <scalbn+0x90>
 8014e18:	4b31      	ldr	r3, [pc, #196]	; (8014ee0 <scalbn+0xe0>)
 8014e1a:	4629      	mov	r1, r5
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	ee10 0a10 	vmov	r0, s0
 8014e22:	f7eb fbe9 	bl	80005f8 <__aeabi_dmul>
 8014e26:	4b2f      	ldr	r3, [pc, #188]	; (8014ee4 <scalbn+0xe4>)
 8014e28:	429e      	cmp	r6, r3
 8014e2a:	4604      	mov	r4, r0
 8014e2c:	460d      	mov	r5, r1
 8014e2e:	da12      	bge.n	8014e56 <scalbn+0x56>
 8014e30:	a327      	add	r3, pc, #156	; (adr r3, 8014ed0 <scalbn+0xd0>)
 8014e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e36:	f7eb fbdf 	bl	80005f8 <__aeabi_dmul>
 8014e3a:	e009      	b.n	8014e50 <scalbn+0x50>
 8014e3c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014e40:	428a      	cmp	r2, r1
 8014e42:	d10c      	bne.n	8014e5e <scalbn+0x5e>
 8014e44:	ee10 2a10 	vmov	r2, s0
 8014e48:	4620      	mov	r0, r4
 8014e4a:	4629      	mov	r1, r5
 8014e4c:	f7eb fa1e 	bl	800028c <__adddf3>
 8014e50:	4604      	mov	r4, r0
 8014e52:	460d      	mov	r5, r1
 8014e54:	e01c      	b.n	8014e90 <scalbn+0x90>
 8014e56:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014e5a:	460b      	mov	r3, r1
 8014e5c:	3a36      	subs	r2, #54	; 0x36
 8014e5e:	4432      	add	r2, r6
 8014e60:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014e64:	428a      	cmp	r2, r1
 8014e66:	dd0b      	ble.n	8014e80 <scalbn+0x80>
 8014e68:	ec45 4b11 	vmov	d1, r4, r5
 8014e6c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014ed8 <scalbn+0xd8>
 8014e70:	f000 f83c 	bl	8014eec <copysign>
 8014e74:	a318      	add	r3, pc, #96	; (adr r3, 8014ed8 <scalbn+0xd8>)
 8014e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e7a:	ec51 0b10 	vmov	r0, r1, d0
 8014e7e:	e7da      	b.n	8014e36 <scalbn+0x36>
 8014e80:	2a00      	cmp	r2, #0
 8014e82:	dd08      	ble.n	8014e96 <scalbn+0x96>
 8014e84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014e88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014e8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014e90:	ec45 4b10 	vmov	d0, r4, r5
 8014e94:	bd70      	pop	{r4, r5, r6, pc}
 8014e96:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014e9a:	da0d      	bge.n	8014eb8 <scalbn+0xb8>
 8014e9c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014ea0:	429e      	cmp	r6, r3
 8014ea2:	ec45 4b11 	vmov	d1, r4, r5
 8014ea6:	dce1      	bgt.n	8014e6c <scalbn+0x6c>
 8014ea8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014ed0 <scalbn+0xd0>
 8014eac:	f000 f81e 	bl	8014eec <copysign>
 8014eb0:	a307      	add	r3, pc, #28	; (adr r3, 8014ed0 <scalbn+0xd0>)
 8014eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eb6:	e7e0      	b.n	8014e7a <scalbn+0x7a>
 8014eb8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014ebc:	3236      	adds	r2, #54	; 0x36
 8014ebe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014ec2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014ec6:	4620      	mov	r0, r4
 8014ec8:	4629      	mov	r1, r5
 8014eca:	2200      	movs	r2, #0
 8014ecc:	4b06      	ldr	r3, [pc, #24]	; (8014ee8 <scalbn+0xe8>)
 8014ece:	e7b2      	b.n	8014e36 <scalbn+0x36>
 8014ed0:	c2f8f359 	.word	0xc2f8f359
 8014ed4:	01a56e1f 	.word	0x01a56e1f
 8014ed8:	8800759c 	.word	0x8800759c
 8014edc:	7e37e43c 	.word	0x7e37e43c
 8014ee0:	43500000 	.word	0x43500000
 8014ee4:	ffff3cb0 	.word	0xffff3cb0
 8014ee8:	3c900000 	.word	0x3c900000

08014eec <copysign>:
 8014eec:	ec51 0b10 	vmov	r0, r1, d0
 8014ef0:	ee11 0a90 	vmov	r0, s3
 8014ef4:	ee10 2a10 	vmov	r2, s0
 8014ef8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014efc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014f00:	ea41 0300 	orr.w	r3, r1, r0
 8014f04:	ec43 2b10 	vmov	d0, r2, r3
 8014f08:	4770      	bx	lr
	...

08014f0c <_init>:
 8014f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f0e:	bf00      	nop
 8014f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f12:	bc08      	pop	{r3}
 8014f14:	469e      	mov	lr, r3
 8014f16:	4770      	bx	lr

08014f18 <_fini>:
 8014f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f1a:	bf00      	nop
 8014f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f1e:	bc08      	pop	{r3}
 8014f20:	469e      	mov	lr, r3
 8014f22:	4770      	bx	lr
